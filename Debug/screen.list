
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e4  080078e4  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080078e4  080078e4  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078e4  080078e4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080078ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000007b0  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000848  20000848  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012dd7  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d15  00000000  00000000  00032e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00035bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f68  00000000  00000000  00036c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dc29  00000000  00000000  00037bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001439a  00000000  00000000  000557e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac23d  00000000  00000000  00069b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115db8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005034  00000000  00000000  00115e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0011ae3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0011ae60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070d4 	.word	0x080070d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080070d4 	.word	0x080070d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStick>:

#include "AnalogStick.h"

u16 AD_RES = 0;

void ReadAnalogStick(ADC_HandleTypeDef* adc, u16* outputX, u16* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
		//LCD_PCD8544_clear_ram(&gLcdScreen);
		HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f002 f8ab 	bl	80023e8 <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f002 f95d 	bl	8002554 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Map It To PWM DutyCycle
		AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f002 fa28 	bl	80026f0 <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <ReadAnalogStick+0x74>)
 80002a6:	801a      	strh	r2, [r3, #0]
		uint16_t y = AD_RES;
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <ReadAnalogStick+0x74>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

		// Start ADC Conversion
		HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f002 f89a 	bl	80023e8 <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f002 f94c 	bl	8002554 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Map It To PWM DutyCycle
		AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f002 fa17 	bl	80026f0 <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <ReadAnalogStick+0x74>)
 80002c8:	801a      	strh	r2, [r3, #0]
		uint16_t x = AD_RES;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <ReadAnalogStick+0x74>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
		x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]

		y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

		*outputX = x;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	8aba      	ldrh	r2, [r7, #20]
 80002e4:	801a      	strh	r2, [r3, #0]
		*outputY = y;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	8afa      	ldrh	r2, [r7, #22]
 80002ea:	801a      	strh	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	3718      	adds	r7, #24
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200000b4 	.word	0x200000b4

080002f8 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer>:
// copy all the regions of the frame buffer that are marked as needing to be updated
// to the lcd screen
void gfxFinishDrawing(LCD_PCD8544_screen_t* scr);


void UpdateScreenRegionsToUpdate_ClearedFrameBuffer(){
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	e01c      	b.n	800033e <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x46>
		gScreenRegionsToUpdate[i].updateNeeded = true;
 8000304:	4913      	ldr	r1, [pc, #76]	; (8000354 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x5c>)
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	4613      	mov	r3, r2
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	4413      	add	r3, r2
 800030e:	440b      	add	r3, r1
 8000310:	2201      	movs	r2, #1
 8000312:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000314:	490f      	ldr	r1, [pc, #60]	; (8000354 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x5c>)
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4613      	mov	r3, r2
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	4413      	add	r3, r2
 800031e:	440b      	add	r3, r1
 8000320:	3301      	adds	r3, #1
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
 8000326:	490b      	ldr	r1, [pc, #44]	; (8000354 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x5c>)
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	4613      	mov	r3, r2
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	4413      	add	r3, r2
 8000330:	440b      	add	r3, r1
 8000332:	3302      	adds	r3, #2
 8000334:	2254      	movs	r2, #84	; 0x54
 8000336:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3301      	adds	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b05      	cmp	r3, #5
 8000342:	dddf      	ble.n	8000304 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0xc>
	}
}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	200002b0 	.word	0x200002b0

08000358 <gfxClearFrameBuffer>:

void gfxClearFrameBuffer(){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 800035c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000360:	2100      	movs	r1, #0
 8000362:	4803      	ldr	r0, [pc, #12]	; (8000370 <gfxClearFrameBuffer+0x18>)
 8000364:	f005 fc46 	bl	8005bf4 <memset>
	UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
 8000368:	f7ff ffc6 	bl	80002f8 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer>
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200000b8 	.word	0x200000b8

08000374 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	460a      	mov	r2, r1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	4613      	mov	r3, r2
 8000382:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b53      	cmp	r3, #83	; 0x53
 8000388:	d825      	bhi.n	80003d6 <gfxPlotPixelInternal+0x62>
 800038a:	79bb      	ldrb	r3, [r7, #6]
 800038c:	2b2e      	cmp	r3, #46	; 0x2e
 800038e:	d822      	bhi.n	80003d6 <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	08db      	lsrs	r3, r3, #3
 8000394:	b2db      	uxtb	r3, r3
 8000396:	461a      	mov	r2, r3
 8000398:	2354      	movs	r3, #84	; 0x54
 800039a:	fb03 f202 	mul.w	r2, r3, r2
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4413      	add	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80003aa:	d215      	bcs.n	80003d8 <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <gfxPlotPixelInternal+0x70>)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	b25a      	sxtb	r2, r3
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	f003 0307 	and.w	r3, r3, #7
 80003bc:	2101      	movs	r1, #1
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	b25b      	sxtb	r3, r3
 80003c4:	4313      	orrs	r3, r2
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	b2d9      	uxtb	r1, r3
 80003ca:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <gfxPlotPixelInternal+0x70>)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	4413      	add	r3, r2
 80003d0:	460a      	mov	r2, r1
 80003d2:	701a      	strb	r2, [r3, #0]
 80003d4:	e000      	b.n	80003d8 <gfxPlotPixelInternal+0x64>
		return;
 80003d6:	bf00      	nop
}
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	200000b8 	.word	0x200000b8

080003e8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4604      	mov	r4, r0
 80003f0:	4608      	mov	r0, r1
 80003f2:	4611      	mov	r1, r2
 80003f4:	461a      	mov	r2, r3
 80003f6:	4623      	mov	r3, r4
 80003f8:	71fb      	strb	r3, [r7, #7]
 80003fa:	4603      	mov	r3, r0
 80003fc:	71bb      	strb	r3, [r7, #6]
 80003fe:	460b      	mov	r3, r1
 8000400:	717b      	strb	r3, [r7, #5]
 8000402:	4613      	mov	r3, r2
 8000404:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	e01c      	b.n	8000446 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 800040c:	4913      	ldr	r1, [pc, #76]	; (800045c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4613      	mov	r3, r2
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	4413      	add	r3, r2
 8000416:	440b      	add	r3, r1
 8000418:	2201      	movs	r2, #1
 800041a:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 800041c:	490f      	ldr	r1, [pc, #60]	; (800045c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	4613      	mov	r3, r2
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	4413      	add	r3, r2
 8000426:	440b      	add	r3, r1
 8000428:	3301      	adds	r3, #1
 800042a:	797a      	ldrb	r2, [r7, #5]
 800042c:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 800042e:	490b      	ldr	r1, [pc, #44]	; (800045c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	4613      	mov	r3, r2
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	4413      	add	r3, r2
 8000438:	440b      	add	r3, r1
 800043a:	3302      	adds	r3, #2
 800043c:	793a      	ldrb	r2, [r7, #4]
 800043e:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	3301      	adds	r3, #1
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	429a      	cmp	r2, r3
 800044c:	ddde      	ble.n	800040c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 800044e:	bf00      	nop
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bc90      	pop	{r4, r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	200002b0 	.word	0x200002b0

08000460 <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b089      	sub	sp, #36	; 0x24
 8000464:	af00      	add	r7, sp, #0
 8000466:	4604      	mov	r4, r0
 8000468:	4608      	mov	r0, r1
 800046a:	4611      	mov	r1, r2
 800046c:	461a      	mov	r2, r3
 800046e:	4623      	mov	r3, r4
 8000470:	71fb      	strb	r3, [r7, #7]
 8000472:	4603      	mov	r3, r0
 8000474:	71bb      	strb	r3, [r7, #6]
 8000476:	460b      	mov	r3, r1
 8000478:	717b      	strb	r3, [r7, #5]
 800047a:	4613      	mov	r3, r2
 800047c:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800047e:	797a      	ldrb	r2, [r7, #5]
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 8000486:	793a      	ldrb	r2, [r7, #4]
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 800048e:	2301      	movs	r3, #1
 8000490:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	2b00      	cmp	r3, #0
 8000496:	da05      	bge.n	80004a4 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 8000498:	f04f 33ff 	mov.w	r3, #4294967295
 800049c:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	425b      	negs	r3, r3
 80004a2:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 80004a4:	69fb      	ldr	r3, [r7, #28]
 80004a6:	005a      	lsls	r2, r3, #1
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	e01e      	b.n	80004f6 <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	693a      	ldr	r2, [r7, #16]
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff56 	bl	8000374 <gfxPlotPixelInternal>
		if(D > 0){
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	dd0b      	ble.n	80004e6 <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 80004ce:	693a      	ldr	r2, [r7, #16]
 80004d0:	69bb      	ldr	r3, [r7, #24]
 80004d2:	4413      	add	r3, r2
 80004d4:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 80004d6:	69fa      	ldr	r2, [r7, #28]
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	4413      	add	r3, r2
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e004      	b.n	80004f0 <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	697a      	ldr	r2, [r7, #20]
 80004ec:	4413      	add	r3, r2
 80004ee:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	797b      	ldrb	r3, [r7, #5]
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dddc      	ble.n	80004b8 <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	3724      	adds	r7, #36	; 0x24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd90      	pop	{r4, r7, pc}

08000508 <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	4604      	mov	r4, r0
 8000510:	4608      	mov	r0, r1
 8000512:	4611      	mov	r1, r2
 8000514:	461a      	mov	r2, r3
 8000516:	4623      	mov	r3, r4
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	4603      	mov	r3, r0
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	460b      	mov	r3, r1
 8000520:	717b      	strb	r3, [r7, #5]
 8000522:	4613      	mov	r3, r2
 8000524:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 8000526:	797a      	ldrb	r2, [r7, #5]
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 800052e:	793a      	ldrb	r2, [r7, #4]
 8000530:	79bb      	ldrb	r3, [r7, #6]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	2b00      	cmp	r3, #0
 800053e:	da04      	bge.n	800054a <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	425b      	negs	r3, r3
 8000548:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	005a      	lsls	r2, r3, #1
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e01e      	b.n	800059c <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff03 	bl	8000374 <gfxPlotPixelInternal>
		if(D > 0){
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	2b00      	cmp	r3, #0
 8000572:	dd0b      	ble.n	800058c <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 8000574:	693a      	ldr	r2, [r7, #16]
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	4413      	add	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 800057c:	69fa      	ldr	r2, [r7, #28]
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	4413      	add	r3, r2
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	e004      	b.n	8000596 <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	4413      	add	r3, r2
 8000594:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	793b      	ldrb	r3, [r7, #4]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dddc      	ble.n	800055e <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3724      	adds	r7, #36	; 0x24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd90      	pop	{r4, r7, pc}

080005ae <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 80005ae:	b590      	push	{r4, r7, lr}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	4604      	mov	r4, r0
 80005b6:	4608      	mov	r0, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	461a      	mov	r2, r3
 80005bc:	4623      	mov	r3, r4
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4603      	mov	r3, r0
 80005c2:	71bb      	strb	r3, [r7, #6]
 80005c4:	460b      	mov	r3, r1
 80005c6:	717b      	strb	r3, [r7, #5]
 80005c8:	4613      	mov	r3, r2
 80005ca:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 80005cc:	793a      	ldrb	r2, [r7, #4]
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005d6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005da:	7979      	ldrb	r1, [r7, #5]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	1acb      	subs	r3, r1, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bfb8      	it	lt
 80005e4:	425b      	neglt	r3, r3
 80005e6:	429a      	cmp	r2, r3
 80005e8:	da11      	bge.n	800060e <gfxDrawLine+0x60>
		if(x0 > x1){
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	797b      	ldrb	r3, [r7, #5]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d906      	bls.n	8000600 <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	79fa      	ldrb	r2, [r7, #7]
 80005f6:	7939      	ldrb	r1, [r7, #4]
 80005f8:	7978      	ldrb	r0, [r7, #5]
 80005fa:	f7ff ff31 	bl	8000460 <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 80005fe:	e017      	b.n	8000630 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 8000600:	793b      	ldrb	r3, [r7, #4]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	79b9      	ldrb	r1, [r7, #6]
 8000606:	79f8      	ldrb	r0, [r7, #7]
 8000608:	f7ff ff2a 	bl	8000460 <gfxDrawLineBresenhamLow>
}
 800060c:	e010      	b.n	8000630 <gfxDrawLine+0x82>
		if(y0 > y1){
 800060e:	79ba      	ldrb	r2, [r7, #6]
 8000610:	793b      	ldrb	r3, [r7, #4]
 8000612:	429a      	cmp	r2, r3
 8000614:	d906      	bls.n	8000624 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	7939      	ldrb	r1, [r7, #4]
 800061c:	7978      	ldrb	r0, [r7, #5]
 800061e:	f7ff ff73 	bl	8000508 <gfxDrawLineBresenhamHigh>
}
 8000622:	e005      	b.n	8000630 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	797a      	ldrb	r2, [r7, #5]
 8000628:	79b9      	ldrb	r1, [r7, #6]
 800062a:	79f8      	ldrb	r0, [r7, #7]
 800062c:	f7ff ff6c 	bl	8000508 <gfxDrawLineBresenhamHigh>
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bd90      	pop	{r4, r7, pc}

08000638 <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 8000638:	b580      	push	{r7, lr}
 800063a:	b08e      	sub	sp, #56	; 0x38
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 8000640:	2300      	movs	r3, #0
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000644:	e067      	b.n	8000716 <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 8000646:	4938      	ldr	r1, [pc, #224]	; (8000728 <gfxFinishDrawing+0xf0>)
 8000648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	440b      	add	r3, r1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d15b      	bne.n	8000710 <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 8000658:	4933      	ldr	r1, [pc, #204]	; (8000728 <gfxFinishDrawing+0xf0>)
 800065a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800065c:	4613      	mov	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4413      	add	r3, r2
 8000662:	440b      	add	r3, r1
 8000664:	3301      	adds	r3, #1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 800066c:	492e      	ldr	r1, [pc, #184]	; (8000728 <gfxFinishDrawing+0xf0>)
 800066e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	440b      	add	r3, r1
 8000678:	3302      	adds	r3, #2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 8000680:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000688:	429a      	cmp	r2, r3
 800068a:	d20b      	bcs.n	80006a4 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 800068c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000690:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000694:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800069c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80006a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 80006a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a6:	2254      	movs	r2, #84	; 0x54
 80006a8:	fb02 f303 	mul.w	r3, r2, r3
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 80006ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b0:	b2d9      	uxtb	r1, r3
 80006b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80006b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b8:	4413      	add	r3, r2
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <gfxFinishDrawing+0xf4>)
 80006bc:	1898      	adds	r0, r3, r2
 80006be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4603      	mov	r3, r0
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f82a 	bl	8000730 <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 80006dc:	4912      	ldr	r1, [pc, #72]	; (8000728 <gfxFinishDrawing+0xf0>)
 80006de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 80006ec:	490e      	ldr	r1, [pc, #56]	; (8000728 <gfxFinishDrawing+0xf0>)
 80006ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	3301      	adds	r3, #1
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 80006fe:	490a      	ldr	r1, [pc, #40]	; (8000728 <gfxFinishDrawing+0xf0>)
 8000700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	440b      	add	r3, r1
 800070a:	3302      	adds	r3, #2
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 8000710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000712:	3301      	adds	r3, #1
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000718:	2b05      	cmp	r3, #5
 800071a:	dd94      	ble.n	8000646 <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3730      	adds	r7, #48	; 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200002b0 	.word	0x200002b0
 800072c:	200000b8 	.word	0x200000b8

08000730 <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	72fb      	strb	r3, [r7, #11]
 800073e:	4613      	mov	r3, r2
 8000740:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f000 ffc0 	bl	80016d0 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 ffdd 	bl	8001710 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8000756:	7dfa      	ldrb	r2, [r7, #23]
 8000758:	7db9      	ldrb	r1, [r7, #22]
 800075a:	2300      	movs	r3, #0
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f000 fee0 	bl	8001522 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 8000762:	7aba      	ldrb	r2, [r7, #10]
 8000764:	7afb      	ldrb	r3, [r7, #11]
 8000766:	4619      	mov	r1, r3
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f000 ff2d 	bl	80015c8 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f000 ffde 	bl	8001730 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f000 ffbb 	bl	80016f0 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f000 ffc8 	bl	8001710 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8000780:	8c3b      	ldrh	r3, [r7, #32]
 8000782:	461a      	mov	r2, r3
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f000 fe98 	bl	80014bc <LCD_PCD8544_LL_send_data>
 800078c:	4603      	mov	r3, r0
 800078e:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f000 ffcd 	bl	8001730 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8000796:	7d7b      	ldrb	r3, [r7, #21]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	603a      	str	r2, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	460b      	mov	r3, r1
 80007ae:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 80007b0:	6838      	ldr	r0, [r7, #0]
 80007b2:	f7ff fd0d 	bl	80001d0 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 80007bc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	461a      	mov	r2, r3
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	4413      	add	r3, r2
 80007ce:	2b54      	cmp	r3, #84	; 0x54
 80007d0:	dd04      	ble.n	80007dc <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 80007d2:	230e      	movs	r3, #14
 80007d4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2254      	movs	r2, #84	; 0x54
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f005 fa05 	bl	8005bf4 <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 80007f0:	e029      	b.n	8000846 <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 80007f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d029      	beq.n	8000854 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 8000800:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 800080e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	461a      	mov	r2, r3
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	1898      	adds	r0, r3, r2
 8000822:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	461a      	mov	r2, r3
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <gfxWriteTextLineToFrameBuffer+0xf4>)
 8000832:	4413      	add	r3, r2
 8000834:	2206      	movs	r2, #6
 8000836:	4619      	mov	r1, r3
 8000838:	f005 f9ce 	bl	8005bd8 <memcpy>
	for ( ; nChars<strLen; nChars++) {
 800083c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000840:	3301      	adds	r3, #1
 8000842:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000846:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800084a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800084e:	429a      	cmp	r2, r3
 8000850:	d3cf      	bcc.n	80007f2 <gfxWriteTextLineToFrameBuffer+0x52>
 8000852:	e000      	b.n	8000856 <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 8000854:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2254      	movs	r2, #84	; 0x54
 800085a:	fb02 f303 	mul.w	r3, r2, r3
 800085e:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 8000860:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000864:	b2db      	uxtb	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	0052      	lsls	r2, r2, #1
 800086a:	4413      	add	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 8000872:	79ba      	ldrb	r2, [r7, #6]
 8000874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000876:	4413      	add	r3, r2
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <gfxWriteTextLineToFrameBuffer+0xf8>)
 800087a:	4413      	add	r3, r2
 800087c:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000880:	f107 010c 	add.w	r1, r7, #12
 8000884:	4618      	mov	r0, r3
 8000886:	f005 f9a7 	bl	8005bd8 <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 800088a:	bf00      	nop
 800088c:	3770      	adds	r7, #112	; 0x70
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	080070f0 	.word	0x080070f0
 8000898:	200000b8 	.word	0x200000b8

0800089c <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4604      	mov	r4, r0
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4623      	mov	r3, r4
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
 80008b2:	460b      	mov	r3, r1
 80008b4:	717b      	strb	r3, [r7, #5]
 80008b6:	4613      	mov	r3, r2
 80008b8:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	797a      	ldrb	r2, [r7, #5]
 80008be:	79b9      	ldrb	r1, [r7, #6]
 80008c0:	79f8      	ldrb	r0, [r7, #7]
 80008c2:	f7ff fe74 	bl	80005ae <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	797a      	ldrb	r2, [r7, #5]
 80008ca:	79b9      	ldrb	r1, [r7, #6]
 80008cc:	7978      	ldrb	r0, [r7, #5]
 80008ce:	f7ff fe6e 	bl	80005ae <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 80008d2:	793b      	ldrb	r3, [r7, #4]
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	7939      	ldrb	r1, [r7, #4]
 80008d8:	7978      	ldrb	r0, [r7, #5]
 80008da:	f7ff fe68 	bl	80005ae <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	7939      	ldrb	r1, [r7, #4]
 80008e4:	79f8      	ldrb	r0, [r7, #7]
 80008e6:	f7ff fe62 	bl	80005ae <gfxDrawLine>


}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd90      	pop	{r4, r7, pc}
	...

080008f4 <GetStateAtXY>:
typedef enum {
	EMPTY,
	FULL
}BOARD_CELL_STATE;

BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	4613      	mov	r3, r2
 8000902:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <GetStateAtXY+0x3c>)
 8000908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090c:	461a      	mov	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	fa42 f303 	asr.w	r3, r2, r3
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	b2db      	uxtb	r3, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200002c4 	.word	0x200002c4

08000934 <SetStateAtXY>:

void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	460b      	mov	r3, r1
 8000940:	71bb      	strb	r3, [r7, #6]
 8000942:	4613      	mov	r3, r2
 8000944:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000946:	797b      	ldrb	r3, [r7, #5]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d111      	bne.n	8000970 <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <SetStateAtXY+0x70>)
 8000950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000954:	b21a      	sxth	r2, r3
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	b291      	uxth	r1, r2
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <SetStateAtXY+0x70>)
 800096a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 800096e:	e012      	b.n	8000996 <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <SetStateAtXY+0x70>)
 8000974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000978:	b21a      	sxth	r2, r3
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	b21b      	sxth	r3, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	b21b      	sxth	r3, r3
 8000988:	4013      	ands	r3, r2
 800098a:	b21a      	sxth	r2, r3
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	b291      	uxth	r1, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <SetStateAtXY+0x70>)
 8000992:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200002c4 	.word	0x200002c4

080009a8 <Tetris_DrawCurentPiece>:




void Tetris_DrawCurentPiece(){
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 80009ae:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <Tetris_DrawCurentPiece+0xb8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <Tetris_DrawCurentPiece+0xb8>)
 80009b4:	7912      	ldrb	r2, [r2, #4]
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e045      	b.n	8000a4e <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	0052      	lsls	r2, r2, #1
 80009d8:	4413      	add	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	0052      	lsls	r2, r2, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <Tetris_DrawCurentPiece+0xb8>)
 80009ec:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	0052      	lsls	r2, r2, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	4413      	add	r3, r2
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <Tetris_DrawCurentPiece+0xb8>)
 8000a04:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	0052      	lsls	r2, r2, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	797b      	ldrb	r3, [r7, #5]
 8000a14:	4413      	add	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db12      	blt.n	8000a48 <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <Tetris_DrawCurentPiece+0xbc>)
 8000a24:	681c      	ldr	r4, [r3, #0]
 8000a26:	793a      	ldrb	r2, [r7, #4]
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <Tetris_DrawCurentPiece+0xc0>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b2d8      	uxtb	r0, r3
 8000a30:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000a32:	793a      	ldrb	r2, [r7, #4]
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <Tetris_DrawCurentPiece+0xc0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000a3c:	3303      	adds	r3, #3
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	3303      	adds	r3, #3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	ddb6      	ble.n	80009c2 <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200002fc 	.word	0x200002fc
 8000a64:	200002e8 	.word	0x200002e8
 8000a68:	20000000 	.word	0x20000000

08000a6c <Tetris_DrawNextPiece>:

void Tetris_DrawNextPiece(){
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <Tetris_DrawNextPiece+0x94>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <Tetris_DrawNextPiece+0x94>)
 8000a78:	7912      	ldrb	r2, [r2, #4]
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e033      	b.n	8000aee <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	0052      	lsls	r2, r2, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	0052      	lsls	r2, r2, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000aae:	79bb      	ldrb	r3, [r7, #6]
 8000ab0:	3321      	adds	r3, #33	; 0x21
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000ab6:	797b      	ldrb	r3, [r7, #5]
 8000ab8:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db12      	blt.n	8000ae8 <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <Tetris_DrawNextPiece+0x98>)
 8000ac4:	681c      	ldr	r4, [r3, #0]
 8000ac6:	793a      	ldrb	r2, [r7, #4]
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <Tetris_DrawNextPiece+0x9c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	b2d8      	uxtb	r0, r3
 8000ad0:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000ad2:	793a      	ldrb	r2, [r7, #4]
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <Tetris_DrawNextPiece+0x9c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000adc:	3303      	adds	r3, #3
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	3303      	adds	r3, #3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	ddc8      	ble.n	8000a86 <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd90      	pop	{r4, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000304 	.word	0x20000304
 8000b04:	200002e8 	.word	0x200002e8
 8000b08:	20000000 	.word	0x20000000

08000b0c <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000b16:	4b35      	ldr	r3, [pc, #212]	; (8000bec <Tetris_DrawTetrisBoard+0xe0>)
 8000b18:	681c      	ldr	r4, [r3, #0]
 8000b1a:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <Tetris_DrawTetrisBoard+0xe4>)
 8000b1c:	7818      	ldrb	r0, [r3, #0]
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <Tetris_DrawTetrisBoard+0xe8>)
 8000b20:	7819      	ldrb	r1, [r3, #0]
 8000b22:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <Tetris_DrawTetrisBoard+0xe4>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	331e      	adds	r3, #30
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <Tetris_DrawTetrisBoard+0xe8>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	332d      	adds	r3, #45	; 0x2d
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e049      	b.n	8000bce <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	e040      	b.n	8000bc2 <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fed2 	bl	80008f4 <GetStateAtXY>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d132      	bne.n	8000bbc <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	0052      	lsls	r2, r2, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <Tetris_DrawTetrisBoard+0xe4>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	0052      	lsls	r2, r2, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <Tetris_DrawTetrisBoard+0xe8>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	0052      	lsls	r2, r2, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <Tetris_DrawTetrisBoard+0xe4>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	3303      	adds	r3, #3
 8000b94:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	0052      	lsls	r2, r2, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <Tetris_DrawTetrisBoard+0xe8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	3303      	adds	r3, #3
 8000bac:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <Tetris_DrawTetrisBoard+0xec>)
 8000bb0:	681c      	ldr	r4, [r3, #0]
 8000bb2:	7b3b      	ldrb	r3, [r7, #12]
 8000bb4:	7b7a      	ldrb	r2, [r7, #13]
 8000bb6:	7bb9      	ldrb	r1, [r7, #14]
 8000bb8:	7bf8      	ldrb	r0, [r7, #15]
 8000bba:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2b09      	cmp	r3, #9
 8000bc6:	ddbb      	ble.n	8000b40 <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2b0e      	cmp	r3, #14
 8000bd2:	ddb2      	ble.n	8000b3a <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 8000bd4:	f7ff fee8 	bl	80009a8 <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d101      	bne.n	8000be2 <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8000bde:	f7ff ff45 	bl	8000a6c <Tetris_DrawNextPiece>
	}
}
 8000be2:	bf00      	nop
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200002e4 	.word	0x200002e4
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	2000030c 	.word	0x2000030c
 8000bf8:	200002ec 	.word	0x200002ec

08000bfc <InitNewCurrentPiece>:

void InitNewCurrentPiece(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <InitNewCurrentPiece+0x30>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <InitNewCurrentPiece+0x30>)
 8000c08:	22fe      	movs	r2, #254	; 0xfe
 8000c0a:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <InitNewCurrentPiece+0x34>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4798      	blx	r3
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <InitNewCurrentPiece+0x38>)
 8000c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <InitNewCurrentPiece+0x30>)
 8000c1e:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <InitNewCurrentPiece+0x30>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	711a      	strb	r2, [r3, #4]
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200002fc 	.word	0x200002fc
 8000c30:	200002f0 	.word	0x200002f0
 8000c34:	20000004 	.word	0x20000004

08000c38 <InitNewNextPiece>:

void InitNewNextPiece(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <InitNewNextPiece+0x30>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <InitNewNextPiece+0x30>)
 8000c44:	22fe      	movs	r2, #254	; 0xfe
 8000c46:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <InitNewNextPiece+0x34>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4798      	blx	r3
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <InitNewNextPiece+0x38>)
 8000c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <InitNewNextPiece+0x30>)
 8000c5a:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <InitNewNextPiece+0x30>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	711a      	strb	r2, [r3, #4]
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000304 	.word	0x20000304
 8000c6c:	200002f0 	.word	0x200002f0
 8000c70:	20000004 	.word	0x20000004

08000c74 <CopyNextPieceToCurrent>:

void CopyNextPieceToCurrent(){
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <CopyNextPieceToCurrent+0x1c>)
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <CopyNextPieceToCurrent+0x20>)
 8000c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c80:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200002fc 	.word	0x200002fc
 8000c94:	20000304 	.word	0x20000304

08000c98 <ResetBoard>:

void ResetBoard(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 8000c9c:	221e      	movs	r2, #30
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <ResetBoard+0x1c>)
 8000ca2:	f004 ffa7 	bl	8005bf4 <memset>
	InitNewCurrentPiece();
 8000ca6:	f7ff ffa9 	bl	8000bfc <InitNewCurrentPiece>
	InitNewNextPiece();
 8000caa:	f7ff ffc5 	bl	8000c38 <InitNewNextPiece>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200002c4 	.word	0x200002c4

08000cb8 <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <Tetris_Init+0x40>)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <Tetris_Init+0x44>)
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <Tetris_Init+0x48>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <Tetris_Init+0x4c>)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <Tetris_Init+0x50>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <Tetris_Init+0x54>)
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	6013      	str	r3, [r2, #0]
	ResetBoard();
 8000cea:	f7ff ffd5 	bl	8000c98 <ResetBoard>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200002e4 	.word	0x200002e4
 8000cfc:	200002ec 	.word	0x200002ec
 8000d00:	200002e8 	.word	0x200002e8
 8000d04:	200002f0 	.word	0x200002f0
 8000d08:	200002f4 	.word	0x200002f4
 8000d0c:	200002f8 	.word	0x200002f8

08000d10 <IsBlockAllowedToBeHere>:

bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8000d20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	da09      	bge.n	8000d3c <IsBlockAllowedToBeHere+0x2c>
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db05      	blt.n	8000d3c <IsBlockAllowedToBeHere+0x2c>
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	dc01      	bgt.n	8000d3c <IsBlockAllowedToBeHere+0x2c>
		return true;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e01b      	b.n	8000d74 <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	79ba      	ldrb	r2, [r7, #6]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fdd6 	bl	80008f4 <GetStateAtXY>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <IsBlockAllowedToBeHere+0x42>
		return false;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e010      	b.n	8000d74 <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b09      	cmp	r3, #9
 8000d58:	dc03      	bgt.n	8000d62 <IsBlockAllowedToBeHere+0x52>
 8000d5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d5e:	2b0e      	cmp	r3, #14
 8000d60:	dd01      	ble.n	8000d66 <IsBlockAllowedToBeHere+0x56>
		return false;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e006      	b.n	8000d74 <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	da01      	bge.n	8000d72 <IsBlockAllowedToBeHere+0x62>
		return false;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <WriteCurrentPieceToGameBoardArray>:

bool WriteCurrentPieceToGameBoardArray(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000d88:	7912      	ldrb	r2, [r2, #4]
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e02e      	b.n	8000df4 <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000db0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	4413      	add	r3, r2
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000dc0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	797b      	ldrb	r3, [r7, #5]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 8000dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da01      	bge.n	8000dda <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e010      	b.n	8000dfc <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 8000dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db05      	blt.n	8000dee <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 8000de2:	793b      	ldrb	r3, [r7, #4]
 8000de4:	78f9      	ldrb	r1, [r7, #3]
 8000de6:	2201      	movs	r2, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fda3 	bl	8000934 <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	ddcd      	ble.n	8000d96 <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200002fc 	.word	0x200002fc

08000e08 <IsMoveValid>:

u8 IsMoveValid(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <IsMoveValid+0x84>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <IsMoveValid+0x84>)
 8000e14:	7912      	ldrb	r2, [r2, #4]
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e02b      	b.n	8000e7a <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <IsMoveValid+0x84>)
 8000e3c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	4413      	add	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <IsMoveValid+0x84>)
 8000e4c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	4413      	add	r3, r2
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 8000e5a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000e5e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff53 	bl	8000d10 <IsBlockAllowedToBeHere>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <IsMoveValid+0x6c>
			return 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	e006      	b.n	8000e82 <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	ddd0      	ble.n	8000e22 <IsMoveValid+0x1a>
		}
	}
	return 1;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200002fc 	.word	0x200002fc

08000e90 <CheckForAndClearLines>:

u8 CheckForAndClearLines(){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8000e9e:	230e      	movs	r3, #14
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	e027      	b.n	8000ef4 <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <CheckForAndClearLines+0x78>)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d105      	bne.n	8000ec0 <CheckForAndClearLines+0x30>
			linesToClear++;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	71bb      	strb	r3, [r7, #6]
 8000ebe:	e001      	b.n	8000ec4 <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d011      	beq.n	8000eee <CheckForAndClearLines+0x5e>
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10e      	bne.n	8000eee <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 8000ed0:	79fa      	ldrb	r2, [r7, #7]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	490c      	ldr	r1, [pc, #48]	; (8000f08 <CheckForAndClearLines+0x78>)
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <CheckForAndClearLines+0x78>)
 8000ee0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <CheckForAndClearLines+0x78>)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	dad4      	bge.n	8000ea4 <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	200002c4 	.word	0x200002c4

08000f0c <Tetris_Rotate>:

void Tetris_Rotate(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f1a:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f1e:	791b      	ldrb	r3, [r3, #4]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d902      	bls.n	8000f2a <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 8000f2a:	f7ff ff6d 	bl	8000e08 <IsMoveValid>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10d      	bne.n	8000f50 <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f36:	791b      	ldrb	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d103      	bne.n	8000f44 <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f3e:	2203      	movs	r2, #3
 8000f40:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 8000f42:	e005      	b.n	8000f50 <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f46:	791b      	ldrb	r3, [r3, #4]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b01      	ldr	r3, [pc, #4]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f4e:	711a      	strb	r2, [r3, #4]
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200002fc 	.word	0x200002fc

08000f58 <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <Tetris_MoveDown+0x80>)
 8000f60:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b25a      	sxtb	r2, r3
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <Tetris_MoveDown+0x80>)
 8000f6e:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 8000f70:	f7ff ff4a 	bl	8000e08 <IsMoveValid>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d128      	bne.n	8000fcc <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <Tetris_MoveDown+0x80>)
 8000f7c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3b01      	subs	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	b25a      	sxtb	r2, r3
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <Tetris_MoveDown+0x80>)
 8000f8a:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 8000f8c:	f7ff fef6 	bl	8000d7c <WriteCurrentPieceToGameBoardArray>
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 8000f94:	f7ff ff7c 	bl	8000e90 <CheckForAndClearLines>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 8000f9c:	f7ff fe6a 	bl	8000c74 <CopyNextPieceToCurrent>
		InitNewNextPiece();
 8000fa0:	f7ff fe4a 	bl	8000c38 <InitNewNextPiece>
		if(hasGameOverOccured == true){
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d106      	bne.n	8000fb8 <Tetris_MoveDown+0x60>
			_onGameOver();
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <Tetris_MoveDown+0x84>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4798      	blx	r3
			ResetBoard();
 8000fb0:	f7ff fe72 	bl	8000c98 <ResetBoard>
			return GameOver;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e00a      	b.n	8000fce <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <Tetris_MoveDown+0x88>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	79ba      	ldrb	r2, [r7, #6]
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4798      	blx	r3
		}
		return Settled;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e000      	b.n	8000fce <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200002fc 	.word	0x200002fc
 8000fdc:	200002f8 	.word	0x200002f8
 8000fe0:	200002f4 	.word	0x200002f4

08000fe4 <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <Tetris_MoveLeft+0x38>)
 8000fea:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <Tetris_MoveLeft+0x38>)
 8000ff8:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8000ffa:	f7ff ff05 	bl	8000e08 <IsMoveValid>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d108      	bne.n	8001016 <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <Tetris_MoveLeft+0x38>)
 8001006:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3301      	adds	r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	b25a      	sxtb	r2, r3
 8001012:	4b02      	ldr	r3, [pc, #8]	; (800101c <Tetris_MoveLeft+0x38>)
 8001014:	715a      	strb	r2, [r3, #5]
	}
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002fc 	.word	0x200002fc

08001020 <Tetris_MoveRight>:

void Tetris_MoveRight(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <Tetris_MoveRight+0x38>)
 8001026:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	3301      	adds	r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b25a      	sxtb	r2, r3
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <Tetris_MoveRight+0x38>)
 8001034:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8001036:	f7ff fee7 	bl	8000e08 <IsMoveValid>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d108      	bne.n	8001052 <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <Tetris_MoveRight+0x38>)
 8001042:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3b01      	subs	r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	b25a      	sxtb	r2, r3
 800104e:	4b02      	ldr	r3, [pc, #8]	; (8001058 <Tetris_MoveRight+0x38>)
 8001050:	715a      	strb	r2, [r3, #5]
	}
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200002fc 	.word	0x200002fc

0800105c <GetRandomNumberBetweenZeroAndSix>:
void Write_Flash(u8 data, u8 index)
{
}


u8 GetRandomNumberBetweenZeroAndSix(){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 8001060:	f004 fdfe 	bl	8005c60 <rand>
 8001064:	4603      	mov	r3, r0
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <GetRandomNumberBetweenZeroAndSix+0x28>)
 800106a:	fba3 1302 	umull	r1, r3, r3, r2
 800106e:	1ad1      	subs	r1, r2, r3
 8001070:	0849      	lsrs	r1, r1, #1
 8001072:	440b      	add	r3, r1
 8001074:	0899      	lsrs	r1, r3, #2
 8001076:	460b      	mov	r3, r1
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	1a5b      	subs	r3, r3, r1
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b2db      	uxtb	r3, r3
}
 8001080:	4618      	mov	r0, r3
 8001082:	bd80      	pop	{r7, pc}
 8001084:	24924925 	.word	0x24924925

08001088 <DrawStationaryBlock>:


void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4604      	mov	r4, r0
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	461a      	mov	r2, r3
 8001096:	4623      	mov	r3, r4
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	4603      	mov	r3, r0
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	460b      	mov	r3, r1
 80010a0:	717b      	strb	r3, [r7, #5]
 80010a2:	4613      	mov	r3, r2
 80010a4:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 80010a6:	793b      	ldrb	r3, [r7, #4]
 80010a8:	797a      	ldrb	r2, [r7, #5]
 80010aa:	79b9      	ldrb	r1, [r7, #6]
 80010ac:	79f8      	ldrb	r0, [r7, #7]
 80010ae:	f7ff fbf5 	bl	800089c <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 80010b2:	793b      	ldrb	r3, [r7, #4]
 80010b4:	797a      	ldrb	r2, [r7, #5]
 80010b6:	79b9      	ldrb	r1, [r7, #6]
 80010b8:	79f8      	ldrb	r0, [r7, #7]
 80010ba:	f7ff fa78 	bl	80005ae <gfxDrawLine>
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
	...

080010c8 <OnLinesCleared>:

void OnLinesCleared(u8 numLinesCleared){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <OnLinesCleared+0x80>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <OnLinesCleared+0x80>)
 80010e0:	801a      	strh	r2, [r3, #0]
	switch(numLinesCleared){
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d824      	bhi.n	8001134 <OnLinesCleared+0x6c>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <OnLinesCleared+0x28>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001101 	.word	0x08001101
 80010f4:	0800110d 	.word	0x0800110d
 80010f8:	08001119 	.word	0x08001119
 80010fc:	08001127 	.word	0x08001127
	case 1:
		_score += TETRIS_SCORE_SINGLE;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <OnLinesCleared+0x84>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3328      	adds	r3, #40	; 0x28
 8001106:	4a11      	ldr	r2, [pc, #68]	; (800114c <OnLinesCleared+0x84>)
 8001108:	6013      	str	r3, [r2, #0]
		break;
 800110a:	e013      	b.n	8001134 <OnLinesCleared+0x6c>
	case 2:
		_score += TETRIS_SCORE_DOUBLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <OnLinesCleared+0x84>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3364      	adds	r3, #100	; 0x64
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <OnLinesCleared+0x84>)
 8001114:	6013      	str	r3, [r2, #0]
		break;
 8001116:	e00d      	b.n	8001134 <OnLinesCleared+0x6c>
	case 3:
		_score += TETRIS_SCORE_TRIPLE;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <OnLinesCleared+0x84>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <OnLinesCleared+0x84>)
 8001122:	6013      	str	r3, [r2, #0]
		break;
 8001124:	e006      	b.n	8001134 <OnLinesCleared+0x6c>
	case 4:
		_score += TETRIS_SCORE_TETRIS;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <OnLinesCleared+0x84>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800112e:	4a07      	ldr	r2, [pc, #28]	; (800114c <OnLinesCleared+0x84>)
 8001130:	6013      	str	r3, [r2, #0]
		break;
 8001132:	bf00      	nop
	}
	_newScoreToDisplay = true;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <OnLinesCleared+0x88>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000316 	.word	0x20000316
 800114c:	20000318 	.word	0x20000318
 8001150:	20000024 	.word	0x20000024

08001154 <OnGameOver>:

void OnGameOver(){
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	_linesCleared = 0;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <OnGameOver+0x20>)
 800115a:	2200      	movs	r2, #0
 800115c:	801a      	strh	r2, [r3, #0]
	_score = 0;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <OnGameOver+0x24>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
	_newScoreToDisplay = true;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <OnGameOver+0x28>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000316 	.word	0x20000316
 8001178:	20000318 	.word	0x20000318
 800117c:	20000024 	.word	0x20000024

08001180 <IncrementTetrisTimer>:

void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <IncrementTetrisTimer+0x44>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <IncrementTetrisTimer+0x44>)
 8001196:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <IncrementTetrisTimer+0x44>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <IncrementTetrisTimer+0x48>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d90b      	bls.n	80011bc <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d105      	bne.n	80011b6 <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 80011aa:	f7ff fed5 	bl	8000f58 <Tetris_MoveDown>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <IncrementTetrisTimer+0x4c>)
 80011b4:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 80011b6:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <IncrementTetrisTimer+0x44>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
	}
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000310 	.word	0x20000310
 80011c8:	20000020 	.word	0x20000020
 80011cc:	20000025 	.word	0x20000025

080011d0 <WriteScoreToFrameBuffer>:

void WriteScoreToFrameBuffer(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%lu",_score);
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <WriteScoreToFrameBuffer+0x28>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	463b      	mov	r3, r7
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <WriteScoreToFrameBuffer+0x2c>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fd7c 	bl	8005cdc <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 80011e4:	463b      	mov	r3, r7
 80011e6:	461a      	mov	r2, r3
 80011e8:	2126      	movs	r1, #38	; 0x26
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fad8 	bl	80007a0 <gfxWriteTextLineToFrameBuffer>

}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000318 	.word	0x20000318
 80011fc:	080070ec 	.word	0x080070ec

08001200 <TetrisGame>:

void TetrisGame(u32 timePassed){
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

	const i32 twelveBitMax = 4096;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	61bb      	str	r3, [r7, #24]
	u16 x, y;
	ReadAnalogStick(&hadc2,&x,&y);
 800120e:	f107 020a 	add.w	r2, r7, #10
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4619      	mov	r1, r3
 8001218:	4848      	ldr	r0, [pc, #288]	; (800133c <TetrisGame+0x13c>)
 800121a:	f7ff f831 	bl	8000280 <ReadAnalogStick>
	i32 analogXChange = (x - (twelveBitMax/2));
 800121e:	89bb      	ldrh	r3, [r7, #12]
 8001220:	4619      	mov	r1, r3
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	0fda      	lsrs	r2, r3, #31
 8001226:	4413      	add	r3, r2
 8001228:	105b      	asrs	r3, r3, #1
 800122a:	425b      	negs	r3, r3
 800122c:	440b      	add	r3, r1
 800122e:	617b      	str	r3, [r7, #20]
	i32 analogYChange = (y - (twelveBitMax/2));
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	4619      	mov	r1, r3
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	0fda      	lsrs	r2, r3, #31
 8001238:	4413      	add	r3, r2
 800123a:	105b      	asrs	r3, r3, #1
 800123c:	425b      	negs	r3, r3
 800123e:	440b      	add	r3, r1
 8001240:	613b      	str	r3, [r7, #16]
	bool movingDown = true;
 8001242:	2301      	movs	r3, #1
 8001244:	77fb      	strb	r3, [r7, #31]
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8001246:	2101      	movs	r1, #1
 8001248:	483d      	ldr	r0, [pc, #244]	; (8001340 <TetrisGame+0x140>)
 800124a:	f002 f8b3 	bl	80033b4 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
	if(analogXChange > (twelveBitMax/3)){
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4a3b      	ldr	r2, [pc, #236]	; (8001344 <TetrisGame+0x144>)
 8001256:	fb82 1203 	smull	r1, r2, r2, r3
 800125a:	17db      	asrs	r3, r3, #31
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	429a      	cmp	r2, r3
 8001262:	dd02      	ble.n	800126a <TetrisGame+0x6a>
		Tetris_MoveRight();
 8001264:	f7ff fedc 	bl	8001020 <Tetris_MoveRight>
 8001268:	e01c      	b.n	80012a4 <TetrisGame+0xa4>
	}
	else if(analogXChange < -(twelveBitMax/3)){
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4a35      	ldr	r2, [pc, #212]	; (8001344 <TetrisGame+0x144>)
 800126e:	fb82 1203 	smull	r1, r2, r2, r3
 8001272:	17db      	asrs	r3, r3, #31
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	429a      	cmp	r2, r3
 800127a:	da02      	bge.n	8001282 <TetrisGame+0x82>
		Tetris_MoveLeft();
 800127c:	f7ff feb2 	bl	8000fe4 <Tetris_MoveLeft>
 8001280:	e010      	b.n	80012a4 <TetrisGame+0xa4>
	}
	else if(analogYChange > (twelveBitMax/3)){
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <TetrisGame+0x144>)
 8001286:	fb82 1203 	smull	r1, r2, r2, r3
 800128a:	17db      	asrs	r3, r3, #31
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	dd07      	ble.n	80012a4 <TetrisGame+0xa4>
		_movingDownResult = Tetris_MoveDown();
 8001294:	f7ff fe60 	bl	8000f58 <Tetris_MoveDown>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <TetrisGame+0x148>)
 800129e:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 80012a0:	2300      	movs	r3, #0
 80012a2:	77fb      	strb	r3, [r7, #31]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d105      	bne.n	80012b6 <TetrisGame+0xb6>
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <TetrisGame+0x14c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <TetrisGame+0xb6>
		Tetris_Rotate();
 80012b2:	f7ff fe2b 	bl	8000f0c <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 80012b6:	4a25      	ldr	r2, [pc, #148]	; (800134c <TetrisGame+0x14c>)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 80012bc:	7ffb      	ldrb	r3, [r7, #31]
 80012be:	4619      	mov	r1, r3
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff5d 	bl	8001180 <IncrementTetrisTimer>

	gfxClearFrameBuffer();
 80012c6:	f7ff f847 	bl	8000358 <gfxClearFrameBuffer>


	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <TetrisGame+0x148>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d003      	beq.n	80012da <TetrisGame+0xda>
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <TetrisGame+0x148>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d101      	bne.n	80012de <TetrisGame+0xde>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <TetrisGame+0xe0>
 80012de:	2300      	movs	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fc12 	bl	8000b0c <Tetris_DrawTetrisBoard>

	WriteScoreToFrameBuffer();
 80012e8:	f7ff ff72 	bl	80011d0 <WriteScoreToFrameBuffer>


	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 80012ec:	2325      	movs	r3, #37	; 0x25
 80012ee:	2204      	movs	r2, #4
 80012f0:	2105      	movs	r1, #5
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff f878 	bl	80003e8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <TetrisGame+0x148>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d003      	beq.n	8001308 <TetrisGame+0x108>
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <TetrisGame+0x148>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d105      	bne.n	8001314 <TetrisGame+0x114>
		/* update the area where the next block is shown */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 8001308:	2335      	movs	r3, #53	; 0x35
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff f86a 	bl	80003e8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay == true){
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <TetrisGame+0x150>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d108      	bne.n	800132e <TetrisGame+0x12e>
		/* Update the new area of the screen with the new score.
		 * TODO: get actual length of score string instead of using 84 */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 800131c:	2354      	movs	r3, #84	; 0x54
 800131e:	2200      	movs	r2, #0
 8001320:	2101      	movs	r1, #1
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff f860 	bl	80003e8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <TetrisGame+0x150>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <TetrisGame+0x154>)
 8001330:	f7ff f982 	bl	8000638 <gfxFinishDrawing>

}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000730 	.word	0x20000730
 8001340:	48000400 	.word	0x48000400
 8001344:	55555556 	.word	0x55555556
 8001348:	20000025 	.word	0x20000025
 800134c:	20000314 	.word	0x20000314
 8001350:	20000024 	.word	0x20000024
 8001354:	20000514 	.word	0x20000514

08001358 <TetrisGame_Init>:

void TetrisGame_Init(){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af02      	add	r7, sp, #8
	Tetris_Init(
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <TetrisGame_Init+0x20>)
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <TetrisGame_Init+0x24>)
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <TetrisGame_Init+0x28>)
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <TetrisGame_Init+0x2c>)
 800136a:	4907      	ldr	r1, [pc, #28]	; (8001388 <TetrisGame_Init+0x30>)
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <TetrisGame_Init+0x2c>)
 800136e:	f7ff fca3 	bl	8000cb8 <Tetris_Init>
			&gfxDrawAxisAlignedRect,
			&GetRandomNumberBetweenZeroAndSix,
			&OnLinesCleared,
			&OnGameOver);

}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	08001155 	.word	0x08001155
 800137c:	080010c9 	.word	0x080010c9
 8001380:	0800105d 	.word	0x0800105d
 8001384:	0800089d 	.word	0x0800089d
 8001388:	08001089 	.word	0x08001089

0800138c <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 8001394:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001398:	2100      	movs	r1, #0
 800139a:	481e      	ldr	r0, [pc, #120]	; (8001414 <LCD_PCD8544_init+0x88>)
 800139c:	f004 fc2a 	bl	8005bf4 <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f976 	bl	800169a <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f98e 	bl	80016d0 <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f9ab 	bl	8001710 <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	7bb9      	ldrb	r1, [r7, #14]
 80013be:	2301      	movs	r3, #1
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f8ae 	bl	8001522 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 80013c6:	2103      	movs	r1, #3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f939 	bl	8001640 <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f94e 	bl	8001672 <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 80013d6:	2102      	movs	r1, #2
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f918 	bl	800160e <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	7bb9      	ldrb	r1, [r7, #14]
 80013e2:	2300      	movs	r3, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f89c 	bl	8001522 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2101      	movs	r1, #1
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f8c7 	bl	8001582 <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f8e5 	bl	80015c8 <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f996 	bl	8001730 <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f845 	bl	8001494 <LCD_PCD8544_clear_ram>
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000031c 	.word	0x2000031c

08001418 <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	72fb      	strb	r3, [r7, #11]
 8001426:	4613      	mov	r3, r2
 8001428:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 f94c 	bl	80016d0 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f969 	bl	8001710 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 800143e:	7dfa      	ldrb	r2, [r7, #23]
 8001440:	7db9      	ldrb	r1, [r7, #22]
 8001442:	2300      	movs	r3, #0
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 f86c 	bl	8001522 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 800144a:	7abb      	ldrb	r3, [r7, #10]
 800144c:	461a      	mov	r2, r3
 800144e:	0052      	lsls	r2, r2, #1
 8001450:	4413      	add	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	7afb      	ldrb	r3, [r7, #11]
 8001458:	4619      	mov	r1, r3
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 f8b4 	bl	80015c8 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 f965 	bl	8001730 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f942 	bl	80016f0 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 f94f 	bl	8001710 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8001472:	8c3b      	ldrh	r3, [r7, #32]
 8001474:	461a      	mov	r2, r3
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 f81f 	bl	80014bc <LCD_PCD8544_LL_send_data>
 800147e:	4603      	mov	r3, r0
 8001480:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f954 	bl	8001730 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8001488:	7d7b      	ldrb	r3, [r7, #21]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af02      	add	r7, sp, #8
 800149a:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 800149c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <LCD_PCD8544_clear_ram+0x24>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffb5 	bl	8001418 <LCD_PCD8544_write_bytes>
 80014ae:	4603      	mov	r3, r0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000031c 	.word	0x2000031c

080014bc <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	4613      	mov	r3, r2
 80014c8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	88fa      	ldrh	r2, [r7, #6]
 80014d0:	2302      	movs	r3, #2
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	f003 fb8b 	bl	8004bee <HAL_SPI_Transmit>
 80014d8:	4603      	mov	r3, r0
 80014da:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	69d8      	ldr	r0, [r3, #28]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8c1b      	ldrh	r3, [r3, #32]
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	f001 ff79 	bl	80033e4 <HAL_GPIO_WritePin>
	}
	return stat;
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 800150c:	89fa      	ldrh	r2, [r7, #14]
 800150e:	1cfb      	adds	r3, r7, #3
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffd2 	bl	80014bc <LCD_PCD8544_LL_send_data>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	4608      	mov	r0, r1
 800152c:	4611      	mov	r1, r2
 800152e:	461a      	mov	r2, r3
 8001530:	4603      	mov	r3, r0
 8001532:	70fb      	strb	r3, [r7, #3]
 8001534:	460b      	mov	r3, r1
 8001536:	70bb      	strb	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	b25b      	sxtb	r3, r3
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	b25b      	sxtb	r3, r3
 8001548:	f043 0320 	orr.w	r3, r3, #32
 800154c:	b25a      	sxtb	r2, r3
 800154e:	78bb      	ldrb	r3, [r7, #2]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	b25b      	sxtb	r3, r3
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	b25b      	sxtb	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b25a      	sxtb	r2, r3
 800155e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	b25b      	sxtb	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b25b      	sxtb	r3, r3
 800156c:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffc2 	bl	80014fc <LCD_PCD8544_LL_send_byte>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	70fb      	strb	r3, [r7, #3]
 800158e:	4613      	mov	r3, r2
 8001590:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	b25b      	sxtb	r3, r3
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	b25b      	sxtb	r3, r3
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff9f 	bl	80014fc <LCD_PCD8544_LL_send_byte>
 80015be:	4603      	mov	r3, r0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
 80015d4:	4613      	mov	r3, r2
 80015d6:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 80015d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 80015ec:	78bb      	ldrb	r3, [r7, #2]
 80015ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	2202      	movs	r2, #2
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff5c 	bl	80014bc <LCD_PCD8544_LL_send_data>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 800161a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	b25b      	sxtb	r3, r3
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	b25b      	sxtb	r3, r3
 800162a:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	4619      	mov	r1, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff63 	bl	80014fc <LCD_PCD8544_LL_send_byte>
 8001636:	4603      	mov	r3, r0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 800164c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	b25b      	sxtb	r3, r3
 800165c:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff4a 	bl	80014fc <LCD_PCD8544_LL_send_byte>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001684:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff36 	bl	80014fc <LCD_PCD8544_LL_send_byte>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6858      	ldr	r0, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	891b      	ldrh	r3, [r3, #8]
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	f001 fe99 	bl	80033e4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 fce2 	bl	800207c <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6858      	ldr	r0, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	891b      	ldrh	r3, [r3, #8]
 80016c0:	2201      	movs	r2, #1
 80016c2:	4619      	mov	r1, r3
 80016c4:	f001 fe8e 	bl	80033e4 <HAL_GPIO_WritePin>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6958      	ldr	r0, [r3, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8b1b      	ldrh	r3, [r3, #24]
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	f001 fe7e 	bl	80033e4 <HAL_GPIO_WritePin>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6958      	ldr	r0, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8b1b      	ldrh	r3, [r3, #24]
 8001700:	2201      	movs	r2, #1
 8001702:	4619      	mov	r1, r3
 8001704:	f001 fe6e 	bl	80033e4 <HAL_GPIO_WritePin>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68d8      	ldr	r0, [r3, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	8a1b      	ldrh	r3, [r3, #16]
 8001720:	2200      	movs	r2, #0
 8001722:	4619      	mov	r1, r3
 8001724:	f001 fe5e 	bl	80033e4 <HAL_GPIO_WritePin>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68d8      	ldr	r0, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	8a1b      	ldrh	r3, [r3, #16]
 8001740:	2201      	movs	r2, #1
 8001742:	4619      	mov	r1, r3
 8001744:	f001 fe4e 	bl	80033e4 <HAL_GPIO_WritePin>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001754:	f000 fc2c 	bl	8001fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001758:	f000 f83e 	bl	80017d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175c:	f000 f996 	bl	8001a8c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001760:	f000 f900 	bl	8001964 <MX_SPI1_Init>
  MX_ADC2_Init();
 8001764:	f000 f890 	bl	8001888 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001768:	f000 f93a 	bl	80019e0 <MX_TIM2_Init>
  //HAL_ADCEx_Calibration_Start(&hadc2);



  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <main+0x7c>)
 800176e:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <main+0x80>)
 8001770:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <main+0x7c>)
 8001774:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001778:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <main+0x7c>)
 800177c:	2208      	movs	r2, #8
 800177e:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <main+0x7c>)
 8001782:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001786:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <main+0x7c>)
 800178a:	2202      	movs	r2, #2
 800178c:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <main+0x7c>)
 8001790:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001794:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <main+0x7c>)
 8001798:	2210      	movs	r2, #16
 800179a:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <main+0x7c>)
 800179e:	f7ff fdf5 	bl	800138c <LCD_PCD8544_init>

    // LCD - welcome screen
  //static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80017a2:	2100      	movs	r1, #0
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <main+0x84>)
 80017a6:	f000 ffb0 	bl	800270a <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   srand(time(NULL));   // Initialization, should only be called once.
 80017aa:	2000      	movs	r0, #0
 80017ac:	f004 fab6 	bl	8005d1c <time>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f004 fa26 	bl	8005c04 <srand>
   TetrisGame_Init();
 80017b8:	f7ff fdce 	bl	8001358 <TetrisGame_Init>



  while (1)
  {
	  TetrisGame(125);
 80017bc:	207d      	movs	r0, #125	; 0x7d
 80017be:	f7ff fd1f 	bl	8001200 <TetrisGame>


	  HAL_Delay(125);
 80017c2:	207d      	movs	r0, #125	; 0x7d
 80017c4:	f000 fc5a 	bl	800207c <HAL_Delay>
	  TetrisGame(125);
 80017c8:	e7f8      	b.n	80017bc <main+0x6c>
 80017ca:	bf00      	nop
 80017cc:	20000514 	.word	0x20000514
 80017d0:	20000780 	.word	0x20000780
 80017d4:	20000730 	.word	0x20000730

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b096      	sub	sp, #88	; 0x58
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e2:	2228      	movs	r2, #40	; 0x28
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 fa04 	bl	8005bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800180c:	2302      	movs	r3, #2
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001814:	2310      	movs	r3, #16
 8001816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001818:	2302      	movs	r3, #2
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800181c:	2300      	movs	r3, #0
 800181e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001820:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001824:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800182a:	4618      	mov	r0, r3
 800182c:	f001 fdf2 	bl	8003414 <HAL_RCC_OscConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001836:	f000 f9a5 	bl	8001b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183a:	230f      	movs	r3, #15
 800183c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fe1b 	bl	8004490 <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001860:	f000 f990 	bl	8001b84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fff3 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800187c:	f000 f982 	bl	8001b84 <Error_Handler>
  }
}
 8001880:	bf00      	nop
 8001882:	3758      	adds	r7, #88	; 0x58
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800188e:	463b      	mov	r3, r7
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800189e:	4b2f      	ldr	r3, [pc, #188]	; (800195c <MX_ADC2_Init+0xd4>)
 80018a0:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <MX_ADC2_Init+0xd8>)
 80018a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <MX_ADC2_Init+0xd4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <MX_ADC2_Init+0xd4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018b0:	4b2a      	ldr	r3, [pc, #168]	; (800195c <MX_ADC2_Init+0xd4>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <MX_ADC2_Init+0xd4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <MX_ADC2_Init+0xd4>)
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <MX_ADC2_Init+0xd4>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <MX_ADC2_Init+0xd4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <MX_ADC2_Init+0xd4>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <MX_ADC2_Init+0xd4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <MX_ADC2_Init+0xd4>)
 80018de:	2202      	movs	r2, #2
 80018e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_ADC2_Init+0xd4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <MX_ADC2_Init+0xd4>)
 80018ec:	2204      	movs	r2, #4
 80018ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_ADC2_Init+0xd4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <MX_ADC2_Init+0xd4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018fc:	4817      	ldr	r0, [pc, #92]	; (800195c <MX_ADC2_Init+0xd4>)
 80018fe:	f000 fbe1 	bl	80020c4 <HAL_ADC_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001908:	f000 f93c 	bl	8001b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800190c:	2302      	movs	r3, #2
 800190e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001910:	2301      	movs	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	4619      	mov	r1, r3
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <MX_ADC2_Init+0xd4>)
 800192a:	f000 ff61 	bl	80027f0 <HAL_ADC_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001934:	f000 f926 	bl	8001b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001938:	2303      	movs	r3, #3
 800193a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800193c:	2302      	movs	r3, #2
 800193e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001940:	463b      	mov	r3, r7
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_ADC2_Init+0xd4>)
 8001946:	f000 ff53 	bl	80027f0 <HAL_ADC_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8001950:	f000 f918 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000730 	.word	0x20000730
 8001960:	50000100 	.word	0x50000100

08001964 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <MX_SPI1_Init+0x74>)
 800196a:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <MX_SPI1_Init+0x78>)
 800196c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <MX_SPI1_Init+0x74>)
 8001970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <MX_SPI1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <MX_SPI1_Init+0x74>)
 800197e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001982:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_SPI1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <MX_SPI1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_SPI1_Init+0x74>)
 8001992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001996:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_SPI1_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_SPI1_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_SPI1_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_SPI1_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_SPI1_Init+0x74>)
 80019b2:	2207      	movs	r2, #7
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_SPI1_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_SPI1_Init+0x74>)
 80019be:	2208      	movs	r2, #8
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_SPI1_Init+0x74>)
 80019c4:	f003 f870 	bl	8004aa8 <HAL_SPI_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019ce:	f000 f8d9 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000780 	.word	0x20000780
 80019dc:	40013000 	.word	0x40013000

080019e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <MX_TIM2_Init+0xa8>)
 8001a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <MX_TIM2_Init+0xa8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_TIM2_Init+0xa8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_TIM2_Init+0xa8>)
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <MX_TIM2_Init+0xa8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_TIM2_Init+0xa8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a2c:	4816      	ldr	r0, [pc, #88]	; (8001a88 <MX_TIM2_Init+0xa8>)
 8001a2e:	f003 fbb1 	bl	8005194 <HAL_TIM_PWM_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a38:	f000 f8a4 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480f      	ldr	r0, [pc, #60]	; (8001a88 <MX_TIM2_Init+0xa8>)
 8001a4c:	f004 f82c 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a56:	f000 f895 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5a:	2360      	movs	r3, #96	; 0x60
 8001a5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_TIM2_Init+0xa8>)
 8001a72:	f003 fbe7 	bl	8005244 <HAL_TIM_PWM_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001a7c:	f000 f882 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200007e4 	.word	0x200007e4

08001a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <MX_GPIO_Init+0xf0>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a35      	ldr	r2, [pc, #212]	; (8001b7c <MX_GPIO_Init+0xf0>)
 8001aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aac:	6153      	str	r3, [r2, #20]
 8001aae:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <MX_GPIO_Init+0xf0>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <MX_GPIO_Init+0xf0>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a2f      	ldr	r2, [pc, #188]	; (8001b7c <MX_GPIO_Init+0xf0>)
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	6153      	str	r3, [r2, #20]
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <MX_GPIO_Init+0xf0>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <MX_GPIO_Init+0xf0>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <MX_GPIO_Init+0xf0>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6153      	str	r3, [r2, #20]
 8001ade:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <MX_GPIO_Init+0xf0>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8001aea:	2201      	movs	r2, #1
 8001aec:	210a      	movs	r1, #10
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af2:	f001 fc77 	bl	80033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2110      	movs	r1, #16
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afe:	f001 fc71 	bl	80033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8001b02:	231a      	movs	r3, #26
 8001b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4619      	mov	r1, r3
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1c:	f001 fad8 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001b20:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b32:	2307      	movs	r3, #7
 8001b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f001 fac6 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 8001b44:	2301      	movs	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	480a      	ldr	r0, [pc, #40]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001b58:	f001 faba 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = ANALOGUE_STICK_BUTTON_Pin;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANALOGUE_STICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001b70:	f001 faae 	bl	80030d0 <HAL_GPIO_Init>

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000400 	.word	0x48000400

08001b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <Error_Handler+0x8>
	...

08001b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_MspInit+0x4c>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <HAL_MspInit+0x4c>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6193      	str	r3, [r2, #24]
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_MspInit+0x4c>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	210f      	movs	r1, #15
 8001bca:	f06f 0001 	mvn.w	r0, #1
 8001bce:	f001 fa56 	bl	800307e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <HAL_ADC_MspInit+0x74>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d124      	bne.n	8001c4c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_ADC_MspInit+0x78>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <HAL_ADC_MspInit+0x78>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6153      	str	r3, [r2, #20]
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_ADC_MspInit+0x78>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_ADC_MspInit+0x78>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <HAL_ADC_MspInit+0x78>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_ADC_MspInit+0x78>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 8001c32:	2360      	movs	r3, #96	; 0x60
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c36:	2303      	movs	r3, #3
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c48:	f001 fa42 	bl	80030d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	50000100 	.word	0x50000100
 8001c58:	40021000 	.word	0x40021000

08001c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <HAL_SPI_MspInit+0xb4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d144      	bne.n	8001d08 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <HAL_SPI_MspInit+0xb8>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a24      	ldr	r2, [pc, #144]	; (8001d14 <HAL_SPI_MspInit+0xb8>)
 8001c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <HAL_SPI_MspInit+0xb8>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_SPI_MspInit+0xb8>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_SPI_MspInit+0xb8>)
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_SPI_MspInit+0xb8>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_SPI_MspInit+0xb8>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <HAL_SPI_MspInit+0xb8>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	6153      	str	r3, [r2, #20]
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_SPI_MspInit+0xb8>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce4:	f001 f9f4 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <HAL_SPI_MspInit+0xbc>)
 8001d04:	f001 f9e4 	bl	80030d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40013000 	.word	0x40013000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400

08001d1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2c:	d10b      	bne.n	8001d46 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_TIM_PWM_MspInit+0x38>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_TIM_PWM_MspInit+0x38>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_TIM_PWM_MspInit+0x38>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0x4>

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da4:	f000 f94a 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
	return 1;
 8001db0:	2301      	movs	r3, #1
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_kill>:

int _kill(int pid, int sig)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dc6:	f003 fedd 	bl	8005b84 <__errno>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2216      	movs	r2, #22
 8001dce:	601a      	str	r2, [r3, #0]
	return -1;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_exit>:

void _exit (int status)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ffe7 	bl	8001dbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dee:	e7fe      	b.n	8001dee <_exit+0x12>

08001df0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e00a      	b.n	8001e18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e02:	f3af 8000 	nop.w
 8001e06:	4601      	mov	r1, r0
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	60ba      	str	r2, [r7, #8]
 8001e0e:	b2ca      	uxtb	r2, r1
 8001e10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dbf0      	blt.n	8001e02 <_read+0x12>
	}

return len;
 8001e20:	687b      	ldr	r3, [r7, #4]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e009      	b.n	8001e50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	60ba      	str	r2, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbf1      	blt.n	8001e3c <_write+0x12>
	}
	return len;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_close>:

int _close(int file)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
	return -1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_isatty>:

int _isatty(int file)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
	return 0;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed4:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <_sbrk+0x5c>)
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <_sbrk+0x60>)
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <_sbrk+0x64>)
 8001eea:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <_sbrk+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <_sbrk+0x64>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d207      	bcs.n	8001f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001efc:	f003 fe42 	bl	8005b84 <__errno>
 8001f00:	4603      	mov	r3, r0
 8001f02:	220c      	movs	r2, #12
 8001f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	e009      	b.n	8001f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <_sbrk+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <_sbrk+0x64>)
 8001f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20003000 	.word	0x20003000
 8001f2c:	00000400 	.word	0x00000400
 8001f30:	20000830 	.word	0x20000830
 8001f34:	20000848 	.word	0x20000848

08001f38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <SystemInit+0x20>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <SystemInit+0x20>)
 8001f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f62:	490e      	ldr	r1, [pc, #56]	; (8001f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <LoopForever+0xe>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f78:	4c0b      	ldr	r4, [pc, #44]	; (8001fa8 <LoopForever+0x16>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f86:	f7ff ffd7 	bl	8001f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f003 fe01 	bl	8005b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f8e:	f7ff fbdf 	bl	8001750 <main>

08001f92 <LoopForever>:

LoopForever:
    b LoopForever
 8001f92:	e7fe      	b.n	8001f92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f94:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f9c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001fa0:	080078ec 	.word	0x080078ec
  ldr r2, =_sbss
 8001fa4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001fa8:	20000848 	.word	0x20000848

08001fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fac:	e7fe      	b.n	8001fac <ADC1_2_IRQHandler>
	...

08001fb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_Init+0x28>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_Init+0x28>)
 8001fba:	f043 0310 	orr.w	r3, r3, #16
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f001 f851 	bl	8003068 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f000 f808 	bl	8001fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fcc:	f7ff fde0 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x54>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x58>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 f85b 	bl	80030b6 <HAL_SYSTICK_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00e      	b.n	8002028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d80a      	bhi.n	8002026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f001 f831 	bl	800307e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <HAL_InitTick+0x5c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000028 	.word	0x20000028
 8002034:	20000030 	.word	0x20000030
 8002038:	2000002c 	.word	0x2000002c

0800203c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x20>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x24>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_IncTick+0x24>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000030 	.word	0x20000030
 8002060:	20000834 	.word	0x20000834

08002064 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;  
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_GetTick+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000834 	.word	0x20000834

0800207c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff ffee 	bl	8002064 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_Delay+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffde 	bl	8002064 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000030 	.word	0x20000030

080020c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b09a      	sub	sp, #104	; 0x68
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e172      	b.n	80023ca <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d176      	bne.n	80021e4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d152      	bne.n	80021a4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fd61 	bl	8001be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d13b      	bne.n	80021a4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fe83 	bl	8002e38 <ADC_Disable>
 8002132:	4603      	mov	r3, r0
 8002134:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	d12f      	bne.n	80021a4 <HAL_ADC_Init+0xe0>
 8002144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002148:	2b00      	cmp	r3, #0
 800214a:	d12b      	bne.n	80021a4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002154:	f023 0302 	bic.w	r3, r3, #2
 8002158:	f043 0202 	orr.w	r2, r3, #2
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800216e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800217e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002180:	4b94      	ldr	r3, [pc, #592]	; (80023d4 <HAL_ADC_Init+0x310>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a94      	ldr	r2, [pc, #592]	; (80023d8 <HAL_ADC_Init+0x314>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9a      	lsrs	r2, r3, #18
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002196:	e002      	b.n	800219e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3b01      	subs	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f9      	bne.n	8002198 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021c0:	d110      	bne.n	80021e4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f023 0312 	bic.w	r3, r3, #18
 80021ca:	f043 0210 	orr.w	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f040 80df 	bne.w	80023b0 <HAL_ADC_Init+0x2ec>
 80021f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 80da 	bne.w	80023b0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 80d2 	bne.w	80023b0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002214:	f043 0202 	orr.w	r2, r3, #2
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800221c:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <HAL_ADC_Init+0x318>)
 800221e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002228:	d102      	bne.n	8002230 <HAL_ADC_Init+0x16c>
 800222a:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <HAL_ADC_Init+0x31c>)
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e002      	b.n	8002236 <HAL_ADC_Init+0x172>
 8002230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002234:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d108      	bne.n	8002256 <HAL_ADC_Init+0x192>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Init+0x192>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_ADC_Init+0x194>
 8002256:	2300      	movs	r3, #0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11c      	bne.n	8002296 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800225c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_ADC_Init+0x1ba>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADC_Init+0x1ba>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_ADC_Init+0x1bc>
 800227e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002280:	2b00      	cmp	r3, #0
 8002282:	d108      	bne.n	8002296 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	431a      	orrs	r2, r3
 8002292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002294:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7e5b      	ldrb	r3, [r3, #25]
 800229a:	035b      	lsls	r3, r3, #13
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022a0:	2a01      	cmp	r2, #1
 80022a2:	d002      	beq.n	80022aa <HAL_ADC_Init+0x1e6>
 80022a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a8:	e000      	b.n	80022ac <HAL_ADC_Init+0x1e8>
 80022aa:	2200      	movs	r2, #0
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022bc:	4313      	orrs	r3, r2
 80022be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d11b      	bne.n	8002302 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7e5b      	ldrb	r3, [r3, #25]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	3b01      	subs	r3, #1
 80022d8:	045a      	lsls	r2, r3, #17
 80022da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022dc:	4313      	orrs	r3, r2
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	663b      	str	r3, [r7, #96]	; 0x60
 80022e4:	e00d      	b.n	8002302 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022ee:	f043 0220 	orr.w	r2, r3, #32
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	2b01      	cmp	r3, #1
 8002308:	d007      	beq.n	800231a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	4313      	orrs	r3, r2
 8002314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002316:	4313      	orrs	r3, r2
 8002318:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b00      	cmp	r3, #0
 8002326:	d114      	bne.n	8002352 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002336:	f023 0302 	bic.w	r3, r3, #2
 800233a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
 8002340:	039a      	lsls	r2, r3, #14
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4313      	orrs	r3, r2
 800234c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800234e:	4313      	orrs	r3, r2
 8002350:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_ADC_Init+0x320>)
 800235a:	4013      	ands	r3, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002362:	430b      	orrs	r3, r1
 8002364:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10c      	bne.n	8002388 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f023 010f 	bic.w	r1, r3, #15
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	1e5a      	subs	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
 8002386:	e007      	b.n	8002398 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 020f 	bic.w	r2, r2, #15
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
 80023ae:	e00a      	b.n	80023c6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f023 0312 	bic.w	r3, r3, #18
 80023b8:	f043 0210 	orr.w	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3768      	adds	r7, #104	; 0x68
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000028 	.word	0x20000028
 80023d8:	431bde83 	.word	0x431bde83
 80023dc:	50000300 	.word	0x50000300
 80023e0:	50000100 	.word	0x50000100
 80023e4:	fff0c007 	.word	0xfff0c007

080023e8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 809c 	bne.w	800253c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Start+0x2a>
 800240e:	2302      	movs	r3, #2
 8002410:	e097      	b.n	8002542 <HAL_ADC_Start+0x15a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fca8 	bl	8002d70 <ADC_Enable>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 8083 	bne.w	8002532 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002440:	4b42      	ldr	r3, [pc, #264]	; (800254c <HAL_ADC_Start+0x164>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <HAL_ADC_Start+0x6e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002454:	d115      	bne.n	8002482 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d027      	beq.n	80024c0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002478:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002480:	e01e      	b.n	80024c0 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_Start+0xba>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2c      	ldr	r2, [pc, #176]	; (8002550 <HAL_ADC_Start+0x168>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10e      	bne.n	80024c0 <HAL_ADC_Start+0xd8>
 80024a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024cc:	d106      	bne.n	80024dc <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f023 0206 	bic.w	r2, r3, #6
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
 80024da:	e002      	b.n	80024e2 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	221c      	movs	r2, #28
 80024f0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <HAL_ADC_Start+0x164>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <HAL_ADC_Start+0x138>
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_ADC_Start+0x164>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2b05      	cmp	r3, #5
 8002508:	d00a      	beq.n	8002520 <HAL_ADC_Start+0x138>
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_ADC_Start+0x164>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2b09      	cmp	r3, #9
 8002514:	d004      	beq.n	8002520 <HAL_ADC_Start+0x138>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800251e:	d10f      	bne.n	8002540 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0204 	orr.w	r2, r2, #4
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e006      	b.n	8002540 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800253a:	e001      	b.n	8002540 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800253c:	2302      	movs	r3, #2
 800253e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	50000300 	.word	0x50000300
 8002550:	50000100 	.word	0x50000100

08002554 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b08      	cmp	r3, #8
 8002568:	d102      	bne.n	8002570 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800256a:	2308      	movs	r3, #8
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e02e      	b.n	80025ce <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_ADC_PollForConversion+0x198>)
 8002572:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2b00      	cmp	r3, #0
 800257e:	d112      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d11d      	bne.n	80025ca <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f043 0220 	orr.w	r2, r3, #32
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e09d      	b.n	80026e2 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f043 0220 	orr.w	r2, r3, #32
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e08b      	b.n	80026e2 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80025ca:	230c      	movs	r3, #12
 80025cc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_ADC_PollForConversion+0x198>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <HAL_ADC_PollForConversion+0x90>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e2:	d104      	bne.n	80025ee <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80025ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80025f6:	f7ff fd35 	bl	8002064 <HAL_GetTick>
 80025fa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80025fc:	e021      	b.n	8002642 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d01d      	beq.n	8002642 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_ADC_PollForConversion+0xc8>
 800260c:	f7ff fd2a 	bl	8002064 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d212      	bcs.n	8002642 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0204 	orr.w	r2, r3, #4
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e04f      	b.n	80026e2 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0d6      	beq.n	80025fe <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002666:	2b00      	cmp	r3, #0
 8002668:	d131      	bne.n	80026ce <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002670:	2b00      	cmp	r3, #0
 8002672:	d12c      	bne.n	80026ce <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b08      	cmp	r3, #8
 8002680:	d125      	bne.n	80026ce <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d112      	bne.n	80026b6 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d112      	bne.n	80026ce <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
 80026b4:	e00b      	b.n	80026ce <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f043 0220 	orr.w	r2, r3, #32
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d103      	bne.n	80026e0 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	50000300 	.word	0x50000300

080026f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_ADCEx_Calibration_Start+0x1c>
 8002722:	2302      	movs	r3, #2
 8002724:	e05f      	b.n	80027e6 <HAL_ADCEx_Calibration_Start+0xdc>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fb82 	bl	8002e38 <ADC_Disable>
 8002734:	4603      	mov	r3, r0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d14e      	bne.n	80027dc <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002752:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002768:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002778:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800277a:	f7ff fc73 	bl	8002064 <HAL_GetTick>
 800277e:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002780:	e01c      	b.n	80027bc <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002782:	f7ff fc6f 	bl	8002064 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b0a      	cmp	r3, #10
 800278e:	d915      	bls.n	80027bc <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800279a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800279e:	d10d      	bne.n	80027bc <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f023 0312 	bic.w	r3, r3, #18
 80027a8:	f043 0210 	orr.w	r2, r3, #16
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e014      	b.n	80027e6 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ca:	d0da      	beq.n	8002782 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f023 0303 	bic.w	r3, r3, #3
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b09b      	sub	sp, #108	; 0x6c
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x22>
 800280e:	2302      	movs	r3, #2
 8002810:	e2a4      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x56c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 8288 	bne.w	8002d3a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b04      	cmp	r3, #4
 8002830:	d81c      	bhi.n	800286c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	461a      	mov	r2, r3
 8002846:	231f      	movs	r3, #31
 8002848:	4093      	lsls	r3, r2
 800284a:	43db      	mvns	r3, r3
 800284c:	4019      	ands	r1, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa00 f203 	lsl.w	r2, r0, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
 800286a:	e063      	b.n	8002934 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b09      	cmp	r3, #9
 8002872:	d81e      	bhi.n	80028b2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	3b1e      	subs	r3, #30
 8002888:	221f      	movs	r2, #31
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	4019      	ands	r1, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	3b1e      	subs	r3, #30
 80028a4:	fa00 f203 	lsl.w	r2, r0, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34
 80028b0:	e040      	b.n	8002934 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b0e      	cmp	r3, #14
 80028b8:	d81e      	bhi.n	80028f8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	3b3c      	subs	r3, #60	; 0x3c
 80028ce:	221f      	movs	r2, #31
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	4019      	ands	r1, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	3b3c      	subs	r3, #60	; 0x3c
 80028ea:	fa00 f203 	lsl.w	r2, r0, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
 80028f6:	e01d      	b.n	8002934 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	3b5a      	subs	r3, #90	; 0x5a
 800290c:	221f      	movs	r2, #31
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	4019      	ands	r1, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	3b5a      	subs	r3, #90	; 0x5a
 8002928:	fa00 f203 	lsl.w	r2, r0, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 80e5 	bne.w	8002b0e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b09      	cmp	r3, #9
 800294a:	d91c      	bls.n	8002986 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6999      	ldr	r1, [r3, #24]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	3b1e      	subs	r3, #30
 800295e:	2207      	movs	r2, #7
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	4019      	ands	r1, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6898      	ldr	r0, [r3, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	3b1e      	subs	r3, #30
 8002978:	fa00 f203 	lsl.w	r2, r0, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	619a      	str	r2, [r3, #24]
 8002984:	e019      	b.n	80029ba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6959      	ldr	r1, [r3, #20]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	2207      	movs	r2, #7
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	4019      	ands	r1, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6898      	ldr	r0, [r3, #8]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	fa00 f203 	lsl.w	r2, r0, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d84f      	bhi.n	8002a7c <HAL_ADC_ConfigChannel+0x28c>
 80029dc:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <HAL_ADC_ConfigChannel+0x1f4>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	08002a17 	.word	0x08002a17
 80029ec:	08002a39 	.word	0x08002a39
 80029f0:	08002a5b 	.word	0x08002a5b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029fa:	4b94      	ldr	r3, [pc, #592]	; (8002c4c <HAL_ADC_ConfigChannel+0x45c>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	0691      	lsls	r1, r2, #26
 8002a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a06:	430a      	orrs	r2, r1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a12:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a14:	e07e      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a1c:	4b8b      	ldr	r3, [pc, #556]	; (8002c4c <HAL_ADC_ConfigChannel+0x45c>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	0691      	lsls	r1, r2, #26
 8002a26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a34:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a36:	e06d      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a3e:	4b83      	ldr	r3, [pc, #524]	; (8002c4c <HAL_ADC_ConfigChannel+0x45c>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	0691      	lsls	r1, r2, #26
 8002a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a56:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a58:	e05c      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a60:	4b7a      	ldr	r3, [pc, #488]	; (8002c4c <HAL_ADC_ConfigChannel+0x45c>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	0691      	lsls	r1, r2, #26
 8002a6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a78:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a7a:	e04b      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	069b      	lsls	r3, r3, #26
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d107      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a9e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	069b      	lsls	r3, r3, #26
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d107      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ac2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	069b      	lsls	r3, r3, #26
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d107      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ae6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	069b      	lsls	r3, r3, #26
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d10a      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b0a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b0c:	e001      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002b12:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d108      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x344>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x344>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x346>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 810a 	bne.w	8002d50 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d00f      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2201      	movs	r2, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b62:	e049      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	409a      	lsls	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b09      	cmp	r3, #9
 8002b84:	d91c      	bls.n	8002bc0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6999      	ldr	r1, [r3, #24]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	3b1b      	subs	r3, #27
 8002b98:	2207      	movs	r2, #7
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	4019      	ands	r1, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6898      	ldr	r0, [r3, #8]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	3b1b      	subs	r3, #27
 8002bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	619a      	str	r2, [r3, #24]
 8002bbe:	e01b      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6959      	ldr	r1, [r3, #20]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	4019      	ands	r1, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6898      	ldr	r0, [r3, #8]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	4613      	mov	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4413      	add	r3, r2
 8002bec:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_ADC_ConfigChannel+0x460>)
 8002bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c14:	2b11      	cmp	r3, #17
 8002c16:	d105      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00b      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c28:	2b12      	cmp	r3, #18
 8002c2a:	f040 8091 	bne.w	8002d50 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 808a 	bne.w	8002d50 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c44:	d108      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x468>
 8002c46:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_ADC_ConfigChannel+0x464>)
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e008      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x46e>
 8002c4c:	83fff000 	.word	0x83fff000
 8002c50:	50000300 	.word	0x50000300
 8002c54:	50000100 	.word	0x50000100
 8002c58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c5c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d108      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x48e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x48e>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x490>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d150      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d010      	beq.n	8002cac <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x4b6>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x4b6>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x4b8>
 8002ca6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d13c      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d11d      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x500>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbc:	d118      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cca:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_ADC_ConfigChannel+0x578>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <HAL_ADC_ConfigChannel+0x57c>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	0c9a      	lsrs	r2, r3, #18
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ce0:	e002      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f9      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cee:	e02e      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b11      	cmp	r3, #17
 8002cf6:	d10b      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x520>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d00:	d106      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d0e:	e01e      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b12      	cmp	r3, #18
 8002d16:	d11a      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d22:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d24:	e013      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d38:	e00a      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f043 0220 	orr.w	r2, r3, #32
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d4c:	e000      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d4e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	376c      	adds	r7, #108	; 0x6c
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	20000028 	.word	0x20000028
 8002d6c:	431bde83 	.word	0x431bde83

08002d70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d108      	bne.n	8002d9c <ADC_Enable+0x2c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <ADC_Enable+0x2c>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <ADC_Enable+0x2e>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d143      	bne.n	8002e2a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <ADC_Enable+0xc4>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f043 0210 	orr.w	r2, r3, #16
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e02f      	b.n	8002e2c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002ddc:	f7ff f942 	bl	8002064 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002de2:	e01b      	b.n	8002e1c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002de4:	f7ff f93e 	bl	8002064 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d914      	bls.n	8002e1c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d00d      	beq.n	8002e1c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f043 0210 	orr.w	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f043 0201 	orr.w	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e007      	b.n	8002e2c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d1dc      	bne.n	8002de4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	8000003f 	.word	0x8000003f

08002e38 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <ADC_Disable+0x2c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <ADC_Disable+0x2c>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <ADC_Disable+0x2e>
 8002e64:	2300      	movs	r3, #0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d047      	beq.n	8002efa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030d 	and.w	r3, r3, #13
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10f      	bne.n	8002e98 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0202 	orr.w	r2, r2, #2
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e90:	f7ff f8e8 	bl	8002064 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e96:	e029      	b.n	8002eec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f043 0210 	orr.w	r2, r3, #16
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e023      	b.n	8002efc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eb4:	f7ff f8d6 	bl	8002064 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d914      	bls.n	8002eec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10d      	bne.n	8002eec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f043 0210 	orr.w	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e007      	b.n	8002efc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d0dc      	beq.n	8002eb4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <__NVIC_GetPriorityGrouping+0x18>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0307 	and.w	r3, r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db0a      	blt.n	8002f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	490c      	ldr	r1, [pc, #48]	; (8002fb4 <__NVIC_SetPriority+0x4c>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f90:	e00a      	b.n	8002fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <__NVIC_SetPriority+0x50>)
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	761a      	strb	r2, [r3, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f1c3 0307 	rsb	r3, r3, #7
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	bf28      	it	cs
 8002fda:	2304      	movcs	r3, #4
 8002fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d902      	bls.n	8002fec <NVIC_EncodePriority+0x30>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3b03      	subs	r3, #3
 8002fea:	e000      	b.n	8002fee <NVIC_EncodePriority+0x32>
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	401a      	ands	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003004:	f04f 31ff 	mov.w	r1, #4294967295
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43d9      	mvns	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	4313      	orrs	r3, r2
         );
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	; 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003034:	d301      	bcc.n	800303a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003036:	2301      	movs	r3, #1
 8003038:	e00f      	b.n	800305a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <SysTick_Config+0x40>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003042:	210f      	movs	r1, #15
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f7ff ff8e 	bl	8002f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <SysTick_Config+0x40>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <SysTick_Config+0x40>)
 8003054:	2207      	movs	r2, #7
 8003056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	e000e010 	.word	0xe000e010

08003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff47 	bl	8002f04 <__NVIC_SetPriorityGrouping>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003090:	f7ff ff5c 	bl	8002f4c <__NVIC_GetPriorityGrouping>
 8003094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f7ff ff8e 	bl	8002fbc <NVIC_EncodePriority>
 80030a0:	4602      	mov	r2, r0
 80030a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff5d 	bl	8002f68 <__NVIC_SetPriority>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ffb0 	bl	8003024 <SysTick_Config>
 80030c4:	4603      	mov	r3, r0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030de:	e14e      	b.n	800337e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8140 	beq.w	8003378 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d005      	beq.n	8003110 <HAL_GPIO_Init+0x40>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d130      	bne.n	8003172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003146:	2201      	movs	r2, #1
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	f003 0201 	and.w	r2, r3, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b03      	cmp	r3, #3
 800317c:	d017      	beq.n	80031ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	2203      	movs	r2, #3
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d123      	bne.n	8003202 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	08da      	lsrs	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3208      	adds	r2, #8
 80031c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	08da      	lsrs	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3208      	adds	r2, #8
 80031fc:	6939      	ldr	r1, [r7, #16]
 80031fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 809a 	beq.w	8003378 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003244:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_GPIO_Init+0x2cc>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4a54      	ldr	r2, [pc, #336]	; (800339c <HAL_GPIO_Init+0x2cc>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6193      	str	r3, [r2, #24]
 8003250:	4b52      	ldr	r3, [pc, #328]	; (800339c <HAL_GPIO_Init+0x2cc>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800325c:	4a50      	ldr	r2, [pc, #320]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	3302      	adds	r3, #2
 8003264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003286:	d013      	beq.n	80032b0 <HAL_GPIO_Init+0x1e0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a46      	ldr	r2, [pc, #280]	; (80033a4 <HAL_GPIO_Init+0x2d4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00d      	beq.n	80032ac <HAL_GPIO_Init+0x1dc>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a45      	ldr	r2, [pc, #276]	; (80033a8 <HAL_GPIO_Init+0x2d8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <HAL_GPIO_Init+0x1d8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a44      	ldr	r2, [pc, #272]	; (80033ac <HAL_GPIO_Init+0x2dc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_GPIO_Init+0x1d4>
 80032a0:	2303      	movs	r3, #3
 80032a2:	e006      	b.n	80032b2 <HAL_GPIO_Init+0x1e2>
 80032a4:	2305      	movs	r3, #5
 80032a6:	e004      	b.n	80032b2 <HAL_GPIO_Init+0x1e2>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e002      	b.n	80032b2 <HAL_GPIO_Init+0x1e2>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_GPIO_Init+0x1e2>
 80032b0:	2300      	movs	r3, #0
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	f002 0203 	and.w	r2, r2, #3
 80032b8:	0092      	lsls	r2, r2, #2
 80032ba:	4093      	lsls	r3, r2
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032c2:	4937      	ldr	r1, [pc, #220]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	3302      	adds	r3, #2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d0:	4b37      	ldr	r3, [pc, #220]	; (80033b0 <HAL_GPIO_Init+0x2e0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032f4:	4a2e      	ldr	r2, [pc, #184]	; (80033b0 <HAL_GPIO_Init+0x2e0>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_GPIO_Init+0x2e0>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800331e:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_GPIO_Init+0x2e0>)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_GPIO_Init+0x2e0>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003348:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <HAL_GPIO_Init+0x2e0>)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_GPIO_Init+0x2e0>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003372:	4a0f      	ldr	r2, [pc, #60]	; (80033b0 <HAL_GPIO_Init+0x2e0>)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3301      	adds	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	f47f aea9 	bne.w	80030e0 <HAL_GPIO_Init+0x10>
  }
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40021000 	.word	0x40021000
 80033a0:	40010000 	.word	0x40010000
 80033a4:	48000400 	.word	0x48000400
 80033a8:	48000800 	.word	0x48000800
 80033ac:	48000c00 	.word	0x48000c00
 80033b0:	40010400 	.word	0x40010400

080033b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e001      	b.n	80033d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
 80033f0:	4613      	mov	r3, r2
 80033f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f4:	787b      	ldrb	r3, [r7, #1]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003400:	e002      	b.n	8003408 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800341a:	af00      	add	r7, sp, #0
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003424:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f001 b823 	b.w	8004480 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 817d 	beq.w	800374a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003450:	4bbc      	ldr	r3, [pc, #752]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b04      	cmp	r3, #4
 800345a:	d00c      	beq.n	8003476 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800345c:	4bb9      	ldr	r3, [pc, #740]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d15c      	bne.n	8003522 <HAL_RCC_OscConfig+0x10e>
 8003468:	4bb6      	ldr	r3, [pc, #728]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d155      	bne.n	8003522 <HAL_RCC_OscConfig+0x10e>
 8003476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800347a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800348a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d102      	bne.n	80034a8 <HAL_RCC_OscConfig+0x94>
 80034a2:	4ba8      	ldr	r3, [pc, #672]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	e015      	b.n	80034d4 <HAL_RCC_OscConfig+0xc0>
 80034a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80034d0:	4b9c      	ldr	r3, [pc, #624]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034d8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80034dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80034e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80034ec:	fab2 f282 	clz	r2, r2
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f042 0220 	orr.w	r2, r2, #32
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f002 021f 	and.w	r2, r2, #31
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 811f 	beq.w	8003748 <HAL_RCC_OscConfig+0x334>
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 8116 	bne.w	8003748 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f000 bfaf 	b.w	8004480 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003526:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x12e>
 8003534:	4b83      	ldr	r3, [pc, #524]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a82      	ldr	r2, [pc, #520]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	e036      	b.n	80035b0 <HAL_RCC_OscConfig+0x19c>
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x158>
 8003552:	4b7c      	ldr	r3, [pc, #496]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7b      	ldr	r2, [pc, #492]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b79      	ldr	r3, [pc, #484]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a78      	ldr	r2, [pc, #480]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e021      	b.n	80035b0 <HAL_RCC_OscConfig+0x19c>
 800356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x184>
 800357e:	4b71      	ldr	r3, [pc, #452]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a70      	ldr	r2, [pc, #448]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b6e      	ldr	r3, [pc, #440]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6d      	ldr	r2, [pc, #436]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0x19c>
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a69      	ldr	r2, [pc, #420]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a66      	ldr	r2, [pc, #408]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 80035aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035b0:	4b64      	ldr	r3, [pc, #400]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	f023 020f 	bic.w	r2, r3, #15
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	495f      	ldr	r1, [pc, #380]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d059      	beq.n	800368e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fe fd43 	bl	8002064 <HAL_GetTick>
 80035de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fe fd3e 	bl	8002064 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	; 0x64
 80035f2:	d902      	bls.n	80035fa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	f000 bf43 	b.w	8004480 <HAL_RCC_OscConfig+0x106c>
 80035fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800360e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d102      	bne.n	800362c <HAL_RCC_OscConfig+0x218>
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	e015      	b.n	8003658 <HAL_RCC_OscConfig+0x244>
 800362c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003630:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003644:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003648:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003654:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800365c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003660:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003664:	fa92 f2a2 	rbit	r2, r2
 8003668:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800366c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003670:	fab2 f282 	clz	r2, r2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	f042 0220 	orr.w	r2, r2, #32
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	f002 021f 	and.w	r2, r2, #31
 8003680:	2101      	movs	r1, #1
 8003682:	fa01 f202 	lsl.w	r2, r1, r2
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ab      	beq.n	80035e4 <HAL_RCC_OscConfig+0x1d0>
 800368c:	e05d      	b.n	800374a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fce9 	bl	8002064 <HAL_GetTick>
 8003692:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003698:	f7fe fce4 	bl	8002064 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b64      	cmp	r3, #100	; 0x64
 80036a6:	d902      	bls.n	80036ae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	f000 bee9 	b.w	8004480 <HAL_RCC_OscConfig+0x106c>
 80036ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80036c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d102      	bne.n	80036e0 <HAL_RCC_OscConfig+0x2cc>
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e015      	b.n	800370c <HAL_RCC_OscConfig+0x2f8>
 80036e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80036f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80036fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <HAL_RCC_OscConfig+0x330>)
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003710:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003714:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003718:	fa92 f2a2 	rbit	r2, r2
 800371c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003720:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003724:	fab2 f282 	clz	r2, r2
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f042 0220 	orr.w	r2, r2, #32
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	f002 021f 	and.w	r2, r2, #31
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f202 	lsl.w	r2, r1, r2
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ab      	bne.n	8003698 <HAL_RCC_OscConfig+0x284>
 8003740:	e003      	b.n	800374a <HAL_RCC_OscConfig+0x336>
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 817d 	beq.w	8003a5a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003760:	4ba6      	ldr	r3, [pc, #664]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800376c:	4ba3      	ldr	r3, [pc, #652]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d172      	bne.n	800385e <HAL_RCC_OscConfig+0x44a>
 8003778:	4ba0      	ldr	r3, [pc, #640]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d16c      	bne.n	800385e <HAL_RCC_OscConfig+0x44a>
 8003784:	2302      	movs	r3, #2
 8003786:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003796:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	fab3 f383 	clz	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d102      	bne.n	80037b4 <HAL_RCC_OscConfig+0x3a0>
 80037ae:	4b93      	ldr	r3, [pc, #588]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	e013      	b.n	80037dc <HAL_RCC_OscConfig+0x3c8>
 80037b4:	2302      	movs	r3, #2
 80037b6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037c6:	2302      	movs	r3, #2
 80037c8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037d8:	4b88      	ldr	r3, [pc, #544]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2202      	movs	r2, #2
 80037de:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80037e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80037e6:	fa92 f2a2 	rbit	r2, r2
 80037ea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80037ee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80037f2:	fab2 f282 	clz	r2, r2
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	f042 0220 	orr.w	r2, r2, #32
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	f002 021f 	and.w	r2, r2, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCC_OscConfig+0x410>
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d002      	beq.n	8003824 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f000 be2e 	b.w	8004480 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003824:	4b75      	ldr	r3, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003830:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	21f8      	movs	r1, #248	; 0xf8
 800383a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003842:	fa91 f1a1 	rbit	r1, r1
 8003846:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800384a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800384e:	fab1 f181 	clz	r1, r1
 8003852:	b2c9      	uxtb	r1, r1
 8003854:	408b      	lsls	r3, r1
 8003856:	4969      	ldr	r1, [pc, #420]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385c:	e0fd      	b.n	8003a5a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8088 	beq.w	8003980 <HAL_RCC_OscConfig+0x56c>
 8003870:	2301      	movs	r3, #1
 8003872:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003882:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003890:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	461a      	mov	r2, r3
 8003898:	2301      	movs	r3, #1
 800389a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fe fbe2 	bl	8002064 <HAL_GetTick>
 80038a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fe fbdd 	bl	8002064 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	f000 bde2 	b.w	8004480 <HAL_RCC_OscConfig+0x106c>
 80038bc:	2302      	movs	r3, #2
 80038be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80038ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_OscConfig+0x4d8>
 80038e6:	4b45      	ldr	r3, [pc, #276]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	e013      	b.n	8003914 <HAL_RCC_OscConfig+0x500>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038fe:	2302      	movs	r3, #2
 8003900:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003904:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003910:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2202      	movs	r2, #2
 8003916:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800391a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800391e:	fa92 f2a2 	rbit	r2, r2
 8003922:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003926:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0af      	beq.n	80038a6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	21f8      	movs	r1, #248	; 0xf8
 800395c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003964:	fa91 f1a1 	rbit	r1, r1
 8003968:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800396c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003970:	fab1 f181 	clz	r1, r1
 8003974:	b2c9      	uxtb	r1, r1
 8003976:	408b      	lsls	r3, r1
 8003978:	4920      	ldr	r1, [pc, #128]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
 800397e:	e06c      	b.n	8003a5a <HAL_RCC_OscConfig+0x646>
 8003980:	2301      	movs	r3, #1
 8003982:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003992:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	461a      	mov	r2, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fb5a 	bl	8002064 <HAL_GetTick>
 80039b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fe fb55 	bl	8002064 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d902      	bls.n	80039cc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	f000 bd5a 	b.w	8004480 <HAL_RCC_OscConfig+0x106c>
 80039cc:	2302      	movs	r3, #2
 80039ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80039de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d104      	bne.n	8003a00 <HAL_RCC_OscConfig+0x5ec>
 80039f6:	4b01      	ldr	r3, [pc, #4]	; (80039fc <HAL_RCC_OscConfig+0x5e8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	e015      	b.n	8003a28 <HAL_RCC_OscConfig+0x614>
 80039fc:	40021000 	.word	0x40021000
 8003a00:	2302      	movs	r3, #2
 8003a02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a12:	2302      	movs	r3, #2
 8003a14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a24:	4bc8      	ldr	r3, [pc, #800]	; (8003d48 <HAL_RCC_OscConfig+0x934>)
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003a2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003a3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003a3e:	fab2 f282 	clz	r2, r2
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f042 0220 	orr.w	r2, r2, #32
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	f002 021f 	and.w	r2, r2, #31
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ad      	bne.n	80039b6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8110 	beq.w	8003c90 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d079      	beq.n	8003b74 <HAL_RCC_OscConfig+0x760>
 8003a80:	2301      	movs	r3, #1
 8003a82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4bab      	ldr	r3, [pc, #684]	; (8003d4c <HAL_RCC_OscConfig+0x938>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe fadb 	bl	8002064 <HAL_GetTick>
 8003aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7fe fad6 	bl	8002064 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d902      	bls.n	8003aca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	f000 bcdb 	b.w	8004480 <HAL_RCC_OscConfig+0x106c>
 8003aca:	2302      	movs	r3, #2
 8003acc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	fa93 f2a3 	rbit	r2, r3
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b08:	2202      	movs	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	fa93 f2a3 	rbit	r2, r3
 8003b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b24:	4b88      	ldr	r3, [pc, #544]	; (8003d48 <HAL_RCC_OscConfig+0x934>)
 8003b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b30:	2102      	movs	r1, #2
 8003b32:	6019      	str	r1, [r3, #0]
 8003b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	fa93 f1a3 	rbit	r1, r3
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b4a:	6019      	str	r1, [r3, #0]
  return result;
 8003b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b50:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0a0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x6a0>
 8003b72:	e08d      	b.n	8003c90 <HAL_RCC_OscConfig+0x87c>
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b96:	601a      	str	r2, [r3, #0]
  return result;
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ba0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b68      	ldr	r3, [pc, #416]	; (8003d4c <HAL_RCC_OscConfig+0x938>)
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe fa55 	bl	8002064 <HAL_GetTick>
 8003bba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc0:	f7fe fa50 	bl	8002064 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d902      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	f000 bc55 	b.w	8004480 <HAL_RCC_OscConfig+0x106c>
 8003bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003bde:	2202      	movs	r2, #2
 8003be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	fa93 f2a3 	rbit	r2, r3
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c02:	2202      	movs	r2, #2
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fa93 f2a3 	rbit	r2, r3
 8003c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_RCC_OscConfig+0x934>)
 8003c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c4e:	2102      	movs	r1, #2
 8003c50:	6019      	str	r1, [r3, #0]
 8003c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	fa93 f1a3 	rbit	r1, r3
 8003c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c68:	6019      	str	r1, [r3, #0]
  return result;
 8003c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d197      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 81a1 	beq.w	8003fe8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cac:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_RCC_OscConfig+0x934>)
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d116      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb8:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <HAL_RCC_OscConfig+0x934>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_RCC_OscConfig+0x934>)
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	61d3      	str	r3, [r2, #28]
 8003cc4:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCC_OscConfig+0x934>)
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cda:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cde:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCC_OscConfig+0x93c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11a      	bne.n	8003d28 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cf2:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <HAL_RCC_OscConfig+0x93c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <HAL_RCC_OscConfig+0x93c>)
 8003cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfe:	f7fe f9b1 	bl	8002064 <HAL_GetTick>
 8003d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	e009      	b.n	8003d1c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d08:	f7fe f9ac 	bl	8002064 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e3b1      	b.n	8004480 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <HAL_RCC_OscConfig+0x93c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ef      	beq.n	8003d08 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10d      	bne.n	8003d54 <HAL_RCC_OscConfig+0x940>
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <HAL_RCC_OscConfig+0x934>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4a02      	ldr	r2, [pc, #8]	; (8003d48 <HAL_RCC_OscConfig+0x934>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6213      	str	r3, [r2, #32]
 8003d44:	e03c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x9ac>
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	10908120 	.word	0x10908120
 8003d50:	40007000 	.word	0x40007000
 8003d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10c      	bne.n	8003d7e <HAL_RCC_OscConfig+0x96a>
 8003d64:	4bc1      	ldr	r3, [pc, #772]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4ac0      	ldr	r2, [pc, #768]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6213      	str	r3, [r2, #32]
 8003d70:	4bbe      	ldr	r3, [pc, #760]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	4abd      	ldr	r2, [pc, #756]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003d76:	f023 0304 	bic.w	r3, r3, #4
 8003d7a:	6213      	str	r3, [r2, #32]
 8003d7c:	e020      	b.n	8003dc0 <HAL_RCC_OscConfig+0x9ac>
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x994>
 8003d8e:	4bb7      	ldr	r3, [pc, #732]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4ab6      	ldr	r2, [pc, #728]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	6213      	str	r3, [r2, #32]
 8003d9a:	4bb4      	ldr	r3, [pc, #720]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4ab3      	ldr	r2, [pc, #716]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6213      	str	r3, [r2, #32]
 8003da6:	e00b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x9ac>
 8003da8:	4bb0      	ldr	r3, [pc, #704]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4aaf      	ldr	r2, [pc, #700]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	6213      	str	r3, [r2, #32]
 8003db4:	4bad      	ldr	r3, [pc, #692]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4aac      	ldr	r2, [pc, #688]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003dba:	f023 0304 	bic.w	r3, r3, #4
 8003dbe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8081 	beq.w	8003ed4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe f947 	bl	8002064 <HAL_GetTick>
 8003dd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ddc:	f7fe f942 	bl	8002064 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e345      	b.n	8004480 <HAL_RCC_OscConfig+0x106c>
 8003df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	fa93 f2a3 	rbit	r2, r3
 8003e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e12:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e20:	2202      	movs	r2, #2
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	fa93 f2a3 	rbit	r2, r3
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e3a:	601a      	str	r2, [r3, #0]
  return result;
 8003e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e40:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0xa4c>
 8003e5a:	4b84      	ldr	r3, [pc, #528]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	e013      	b.n	8003e88 <HAL_RCC_OscConfig+0xa74>
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e68:	2202      	movs	r2, #2
 8003e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	fa93 f2a3 	rbit	r2, r3
 8003e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	4b79      	ldr	r3, [pc, #484]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e8c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e90:	2102      	movs	r1, #2
 8003e92:	6011      	str	r1, [r2, #0]
 8003e94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	fa92 f1a2 	rbit	r1, r2
 8003ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ea6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003eaa:	6011      	str	r1, [r2, #0]
  return result;
 8003eac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eb0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	fab2 f282 	clz	r2, r2
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	f002 021f 	and.w	r2, r2, #31
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d084      	beq.n	8003ddc <HAL_RCC_OscConfig+0x9c8>
 8003ed2:	e07f      	b.n	8003fd4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed4:	f7fe f8c6 	bl	8002064 <HAL_GetTick>
 8003ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fe f8c1 	bl	8002064 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e2c4      	b.n	8004480 <HAL_RCC_OscConfig+0x106c>
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003efe:	2202      	movs	r2, #2
 8003f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f06:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	fa93 f2a3 	rbit	r2, r3
 8003f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f14:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f22:	2202      	movs	r2, #2
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	fa93 f2a3 	rbit	r2, r3
 8003f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f38:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f3c:	601a      	str	r2, [r3, #0]
  return result;
 8003f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f42:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f043 0302 	orr.w	r3, r3, #2
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d102      	bne.n	8003f62 <HAL_RCC_OscConfig+0xb4e>
 8003f5c:	4b43      	ldr	r3, [pc, #268]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	e013      	b.n	8003f8a <HAL_RCC_OscConfig+0xb76>
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f80:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f8e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f92:	2102      	movs	r1, #2
 8003f94:	6011      	str	r1, [r2, #0]
 8003f96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	fa92 f1a2 	rbit	r1, r2
 8003fa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fa8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fac:	6011      	str	r1, [r2, #0]
  return result;
 8003fae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fb2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	fab2 f282 	clz	r2, r2
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	f002 021f 	and.w	r2, r2, #31
 8003fc8:	2101      	movs	r1, #1
 8003fca:	fa01 f202 	lsl.w	r2, r1, r2
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d184      	bne.n	8003ede <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fd4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fdc:	4b23      	ldr	r3, [pc, #140]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8242 	beq.w	800447e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <HAL_RCC_OscConfig+0xc58>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b08      	cmp	r3, #8
 8004004:	f000 8213 	beq.w	800442e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b02      	cmp	r3, #2
 8004016:	f040 8162 	bne.w	80042de <HAL_RCC_OscConfig+0xeca>
 800401a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004022:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	fa93 f2a3 	rbit	r2, r3
 8004036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800403e:	601a      	str	r2, [r3, #0]
  return result;
 8004040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004044:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004048:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004054:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	461a      	mov	r2, r3
 800405c:	2300      	movs	r3, #0
 800405e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe f800 	bl	8002064 <HAL_GetTick>
 8004064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004068:	e00c      	b.n	8004084 <HAL_RCC_OscConfig+0xc70>
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004070:	f7fd fff8 	bl	8002064 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1fd      	b.n	8004480 <HAL_RCC_OscConfig+0x106c>
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800408c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004096:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	fa93 f2a3 	rbit	r2, r3
 80040a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80040a8:	601a      	str	r2, [r3, #0]
  return result;
 80040aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80040b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_OscConfig+0xcba>
 80040c8:	4bb0      	ldr	r3, [pc, #704]	; (800438c <HAL_RCC_OscConfig+0xf78>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	e027      	b.n	800411e <HAL_RCC_OscConfig+0xd0a>
 80040ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80040d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	fa93 f2a3 	rbit	r2, r3
 80040ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80040fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004106:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	fa93 f2a3 	rbit	r2, r3
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	4b9c      	ldr	r3, [pc, #624]	; (800438c <HAL_RCC_OscConfig+0xf78>)
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004122:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004126:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800412a:	6011      	str	r1, [r2, #0]
 800412c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004130:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	fa92 f1a2 	rbit	r1, r2
 800413a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800413e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004142:	6011      	str	r1, [r2, #0]
  return result;
 8004144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004148:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	fab2 f282 	clz	r2, r2
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	f042 0220 	orr.w	r2, r2, #32
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	f002 021f 	and.w	r2, r2, #31
 800415e:	2101      	movs	r1, #1
 8004160:	fa01 f202 	lsl.w	r2, r1, r2
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d182      	bne.n	8004070 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800416a:	4b88      	ldr	r3, [pc, #544]	; (800438c <HAL_RCC_OscConfig+0xf78>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800417e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	430b      	orrs	r3, r1
 800418c:	497f      	ldr	r1, [pc, #508]	; (800438c <HAL_RCC_OscConfig+0xf78>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
 8004192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004196:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800419a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800419e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	fa93 f2a3 	rbit	r2, r3
 80041ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041b6:	601a      	str	r2, [r3, #0]
  return result;
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	461a      	mov	r2, r3
 80041d4:	2301      	movs	r3, #1
 80041d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fd ff44 	bl	8002064 <HAL_GetTick>
 80041dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041e0:	e009      	b.n	80041f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e2:	f7fd ff3f 	bl	8002064 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e144      	b.n	8004480 <HAL_RCC_OscConfig+0x106c>
 80041f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80041fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004208:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	fa93 f2a3 	rbit	r2, r3
 8004212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004216:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800421a:	601a      	str	r2, [r3, #0]
  return result;
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004224:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d102      	bne.n	8004240 <HAL_RCC_OscConfig+0xe2c>
 800423a:	4b54      	ldr	r3, [pc, #336]	; (800438c <HAL_RCC_OscConfig+0xf78>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	e027      	b.n	8004290 <HAL_RCC_OscConfig+0xe7c>
 8004240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004244:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004248:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800424c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004252:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	fa93 f2a3 	rbit	r2, r3
 800425c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004260:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800426e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004278:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	fa93 f2a3 	rbit	r2, r3
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	4b3f      	ldr	r3, [pc, #252]	; (800438c <HAL_RCC_OscConfig+0xf78>)
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004294:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004298:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042a2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	fa92 f1a2 	rbit	r1, r2
 80042ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042b0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042b4:	6011      	str	r1, [r2, #0]
  return result;
 80042b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	fab2 f282 	clz	r2, r2
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f042 0220 	orr.w	r2, r2, #32
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	f002 021f 	and.w	r2, r2, #31
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f202 	lsl.w	r2, r1, r2
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d082      	beq.n	80041e2 <HAL_RCC_OscConfig+0xdce>
 80042dc:	e0cf      	b.n	800447e <HAL_RCC_OscConfig+0x106a>
 80042de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80042e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f2a3 	rbit	r2, r3
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004302:	601a      	str	r2, [r3, #0]
  return result;
 8004304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004308:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800430c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	461a      	mov	r2, r3
 8004320:	2300      	movs	r3, #0
 8004322:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fd fe9e 	bl	8002064 <HAL_GetTick>
 8004328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800432c:	e009      	b.n	8004342 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432e:	f7fd fe99 	bl	8002064 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e09e      	b.n	8004480 <HAL_RCC_OscConfig+0x106c>
 8004342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004346:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800434a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800434e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004354:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	fa93 f2a3 	rbit	r2, r3
 800435e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004362:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004366:	601a      	str	r2, [r3, #0]
  return result;
 8004368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004370:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d104      	bne.n	8004390 <HAL_RCC_OscConfig+0xf7c>
 8004386:	4b01      	ldr	r3, [pc, #4]	; (800438c <HAL_RCC_OscConfig+0xf78>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	e029      	b.n	80043e0 <HAL_RCC_OscConfig+0xfcc>
 800438c:	40021000 	.word	0x40021000
 8004390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004394:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004398:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800439c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	fa93 f2a3 	rbit	r2, r3
 80043ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	fa93 f2a3 	rbit	r2, r3
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_OscConfig+0x1078>)
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043e4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80043e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043ec:	6011      	str	r1, [r2, #0]
 80043ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043f2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	fa92 f1a2 	rbit	r1, r2
 80043fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004400:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004404:	6011      	str	r1, [r2, #0]
  return result;
 8004406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	fab2 f282 	clz	r2, r2
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	f042 0220 	orr.w	r2, r2, #32
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	f002 021f 	and.w	r2, r2, #31
 8004420:	2101      	movs	r1, #1
 8004422:	fa01 f202 	lsl.w	r2, r1, r2
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d180      	bne.n	800432e <HAL_RCC_OscConfig+0xf1a>
 800442c:	e027      	b.n	800447e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800442e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e01e      	b.n	8004480 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_RCC_OscConfig+0x1078>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800444a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800444e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004456:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	429a      	cmp	r2, r3
 8004460:	d10b      	bne.n	800447a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004462:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004466:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800446a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b09e      	sub	sp, #120	; 0x78
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e162      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b90      	ldr	r3, [pc, #576]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d910      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b8d      	ldr	r3, [pc, #564]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 0207 	bic.w	r2, r3, #7
 80044be:	498b      	ldr	r1, [pc, #556]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b89      	ldr	r3, [pc, #548]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e14a      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e4:	4b82      	ldr	r3, [pc, #520]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	497f      	ldr	r1, [pc, #508]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80dc 	beq.w	80046bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d13c      	bne.n	8004586 <HAL_RCC_ClockConfig+0xf6>
 800450c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004510:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_RCC_ClockConfig+0xa6>
 8004530:	4b6f      	ldr	r3, [pc, #444]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	e00f      	b.n	8004556 <HAL_RCC_ClockConfig+0xc6>
 8004536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800453a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	667b      	str	r3, [r7, #100]	; 0x64
 8004544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004548:	663b      	str	r3, [r7, #96]	; 0x60
 800454a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800455a:	65ba      	str	r2, [r7, #88]	; 0x58
 800455c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800455e:	fa92 f2a2 	rbit	r2, r2
 8004562:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004564:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004566:	fab2 f282 	clz	r2, r2
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	f042 0220 	orr.w	r2, r2, #32
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	f002 021f 	and.w	r2, r2, #31
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d17b      	bne.n	800467a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0f3      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d13c      	bne.n	8004608 <HAL_RCC_ClockConfig+0x178>
 800458e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004592:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d102      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x128>
 80045b2:	4b4f      	ldr	r3, [pc, #316]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	e00f      	b.n	80045d8 <HAL_RCC_ClockConfig+0x148>
 80045b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c0:	fa93 f3a3 	rbit	r3, r3
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
 80045c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ca:	643b      	str	r3, [r7, #64]	; 0x40
 80045cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	4b46      	ldr	r3, [pc, #280]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80045de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e0:	fa92 f2a2 	rbit	r2, r2
 80045e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80045e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d13a      	bne.n	800467a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0b2      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
 8004608:	2302      	movs	r3, #2
 800460a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b01      	cmp	r3, #1
 8004628:	d102      	bne.n	8004630 <HAL_RCC_ClockConfig+0x1a0>
 800462a:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	e00d      	b.n	800464c <HAL_RCC_ClockConfig+0x1bc>
 8004630:	2302      	movs	r3, #2
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
 800463c:	2302      	movs	r3, #2
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	fa93 f3a3 	rbit	r3, r3
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2202      	movs	r2, #2
 800464e:	61ba      	str	r2, [r7, #24]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	fa92 f2a2 	rbit	r2, r2
 8004656:	617a      	str	r2, [r7, #20]
  return result;
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	fab2 f282 	clz	r2, r2
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	f042 0220 	orr.w	r2, r2, #32
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	f002 021f 	and.w	r2, r2, #31
 800466a:	2101      	movs	r1, #1
 800466c:	fa01 f202 	lsl.w	r2, r1, r2
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e079      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	491a      	ldr	r1, [pc, #104]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800468c:	f7fd fcea 	bl	8002064 <HAL_GetTick>
 8004690:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fd fce6 	bl	8002064 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e061      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 020c 	and.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d1eb      	bne.n	8004694 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d214      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 0207 	bic.w	r2, r3, #7
 80046d2:	4906      	ldr	r1, [pc, #24]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <HAL_RCC_ClockConfig+0x25c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e040      	b.n	800476e <HAL_RCC_ClockConfig+0x2de>
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	491a      	ldr	r1, [pc, #104]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800471e:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4912      	ldr	r1, [pc, #72]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004732:	f000 f829 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004736:	4601      	mov	r1, r0
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCC_ClockConfig+0x2e8>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004740:	22f0      	movs	r2, #240	; 0xf0
 8004742:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	fa92 f2a2 	rbit	r2, r2
 800474a:	60fa      	str	r2, [r7, #12]
  return result;
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	fab2 f282 	clz	r2, r2
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	40d3      	lsrs	r3, r2
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x2ec>)
 8004758:	5cd3      	ldrb	r3, [r2, r3]
 800475a:	fa21 f303 	lsr.w	r3, r1, r3
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <HAL_RCC_ClockConfig+0x2f0>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_RCC_ClockConfig+0x2f4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fc38 	bl	8001fdc <HAL_InitTick>
  
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3778      	adds	r7, #120	; 0x78
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	0800776c 	.word	0x0800776c
 8004780:	20000028 	.word	0x20000028
 8004784:	2000002c 	.word	0x2000002c

08004788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b08b      	sub	sp, #44	; 0x2c
 800478c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80047a2:	4b29      	ldr	r3, [pc, #164]	; (8004848 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d002      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0x30>
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d003      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x36>
 80047b6:	e03c      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b8:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCC_GetSysClockFreq+0xc4>)
 80047ba:	623b      	str	r3, [r7, #32]
      break;
 80047bc:	e03c      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047c4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047c8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	fa92 f2a2 	rbit	r2, r2
 80047d0:	607a      	str	r2, [r7, #4]
  return result;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	fab2 f282 	clz	r2, r2
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	40d3      	lsrs	r3, r2
 80047dc:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc8>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047e2:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	220f      	movs	r2, #15
 80047ec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	fa92 f2a2 	rbit	r2, r2
 80047f4:	60fa      	str	r2, [r7, #12]
  return result;
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	fab2 f282 	clz	r2, r2
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	40d3      	lsrs	r3, r2
 8004800:	4a14      	ldr	r2, [pc, #80]	; (8004854 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004810:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	fbb2 f2f3 	udiv	r2, r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	e004      	b.n	800482c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	4a0c      	ldr	r2, [pc, #48]	; (8004858 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004826:	fb02 f303 	mul.w	r3, r2, r3
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	623b      	str	r3, [r7, #32]
      break;
 8004830:	e002      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004834:	623b      	str	r3, [r7, #32]
      break;
 8004836:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004838:	6a3b      	ldr	r3, [r7, #32]
}
 800483a:	4618      	mov	r0, r3
 800483c:	372c      	adds	r7, #44	; 0x2c
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	007a1200 	.word	0x007a1200
 8004850:	0800777c 	.word	0x0800777c
 8004854:	0800778c 	.word	0x0800778c
 8004858:	003d0900 	.word	0x003d0900

0800485c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b092      	sub	sp, #72	; 0x48
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80cd 	beq.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004880:	4b86      	ldr	r3, [pc, #536]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10e      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800488c:	4b83      	ldr	r3, [pc, #524]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	4a82      	ldr	r2, [pc, #520]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004896:	61d3      	str	r3, [r2, #28]
 8004898:	4b80      	ldr	r3, [pc, #512]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	4b7d      	ldr	r3, [pc, #500]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d118      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b6:	4b7a      	ldr	r3, [pc, #488]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a79      	ldr	r2, [pc, #484]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c2:	f7fd fbcf 	bl	8002064 <HAL_GetTick>
 80048c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	e008      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ca:	f7fd fbcb 	bl	8002064 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b64      	cmp	r3, #100	; 0x64
 80048d6:	d901      	bls.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e0db      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	4b70      	ldr	r3, [pc, #448]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048e8:	4b6c      	ldr	r3, [pc, #432]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d07d      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004902:	429a      	cmp	r2, r3
 8004904:	d076      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004906:	4b65      	ldr	r3, [pc, #404]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004920:	fab3 f383 	clz	r3, r3
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	4b5e      	ldr	r3, [pc, #376]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	461a      	mov	r2, r3
 8004930:	2301      	movs	r3, #1
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004944:	fab3 f383 	clz	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	4b55      	ldr	r3, [pc, #340]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	461a      	mov	r2, r3
 8004954:	2300      	movs	r3, #0
 8004956:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004958:	4a50      	ldr	r2, [pc, #320]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800495e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d045      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fd fb7c 	bl	8002064 <HAL_GetTick>
 800496c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496e:	e00a      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004970:	f7fd fb78 	bl	8002064 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	; 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e086      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004986:	2302      	movs	r3, #2
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	fa93 f3a3 	rbit	r3, r3
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	2302      	movs	r3, #2
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	fa93 f3a3 	rbit	r3, r3
 800499c:	61fb      	str	r3, [r7, #28]
  return result;
 800499e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a0:	fab3 f383 	clz	r3, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f043 0302 	orr.w	r3, r3, #2
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d102      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80049b4:	4b39      	ldr	r3, [pc, #228]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	e007      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80049ba:	2302      	movs	r3, #2
 80049bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	fa93 f3a3 	rbit	r3, r3
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	4b35      	ldr	r3, [pc, #212]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2202      	movs	r2, #2
 80049cc:	613a      	str	r2, [r7, #16]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	fa92 f2a2 	rbit	r2, r2
 80049d4:	60fa      	str	r2, [r7, #12]
  return result;
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	fab2 f282 	clz	r2, r2
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	f002 021f 	and.w	r2, r2, #31
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f202 	lsl.w	r2, r1, r2
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0bd      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049f4:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4926      	ldr	r1, [pc, #152]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0e:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4a22      	ldr	r2, [pc, #136]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a18:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a26:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	f023 0203 	bic.w	r2, r3, #3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	491a      	ldr	r1, [pc, #104]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a44:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f023 0210 	bic.w	r2, r3, #16
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4912      	ldr	r1, [pc, #72]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	490b      	ldr	r1, [pc, #44]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	4903      	ldr	r1, [pc, #12]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3748      	adds	r7, #72	; 0x48
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	10908100 	.word	0x10908100

08004aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e095      	b.n	8004be6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d108      	bne.n	8004ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aca:	d009      	beq.n	8004ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
 8004ad2:	e005      	b.n	8004ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fd f8ae 	bl	8001c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b20:	d902      	bls.n	8004b28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e002      	b.n	8004b2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b36:	d007      	beq.n	8004b48 <HAL_SPI_Init+0xa0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b40:	d002      	beq.n	8004b48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	ea42 0103 	orr.w	r1, r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	f003 0204 	and.w	r2, r3, #4
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bc4:	ea42 0103 	orr.w	r1, r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b088      	sub	sp, #32
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_SPI_Transmit+0x22>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e158      	b.n	8004ec2 <HAL_SPI_Transmit+0x2d4>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c18:	f7fd fa24 	bl	8002064 <HAL_GetTick>
 8004c1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c32:	e13d      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Transmit+0x52>
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c44:	e134      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d10f      	bne.n	8004cb2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d007      	beq.n	8004cd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cd8:	d94b      	bls.n	8004d72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_SPI_Transmit+0xfa>
 8004ce2:	8afb      	ldrh	r3, [r7, #22]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d13e      	bne.n	8004d66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	881a      	ldrh	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	1c9a      	adds	r2, r3, #2
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d0c:	e02b      	b.n	8004d66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d112      	bne.n	8004d42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	881a      	ldrh	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	1c9a      	adds	r2, r3, #2
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d40:	e011      	b.n	8004d66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d42:	f7fd f98f 	bl	8002064 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d803      	bhi.n	8004d5a <HAL_SPI_Transmit+0x16c>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d102      	bne.n	8004d60 <HAL_SPI_Transmit+0x172>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d64:	e0a4      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ce      	bne.n	8004d0e <HAL_SPI_Transmit+0x120>
 8004d70:	e07c      	b.n	8004e6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Transmit+0x192>
 8004d7a:	8afb      	ldrh	r3, [r7, #22]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d170      	bne.n	8004e62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d912      	bls.n	8004db0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b02      	subs	r3, #2
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dae:	e058      	b.n	8004e62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004dd6:	e044      	b.n	8004e62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d12b      	bne.n	8004e3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d912      	bls.n	8004e16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	881a      	ldrh	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b02      	subs	r3, #2
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e14:	e025      	b.n	8004e62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	7812      	ldrb	r2, [r2, #0]
 8004e22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e3c:	e011      	b.n	8004e62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e3e:	f7fd f911 	bl	8002064 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d803      	bhi.n	8004e56 <HAL_SPI_Transmit+0x268>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_Transmit+0x26e>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e60:	e026      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1b5      	bne.n	8004dd8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f949 	bl	8005108 <SPI_EndRxTxTransaction>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e000      	b.n	8004eb0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004edc:	f7fd f8c2 	bl	8002064 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eec:	f7fd f8ba 	bl	8002064 <HAL_GetTick>
 8004ef0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ef2:	4b39      	ldr	r3, [pc, #228]	; (8004fd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	015b      	lsls	r3, r3, #5
 8004ef8:	0d1b      	lsrs	r3, r3, #20
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f02:	e054      	b.n	8004fae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d050      	beq.n	8004fae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f0c:	f7fd f8aa 	bl	8002064 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d902      	bls.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d13d      	bne.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f3a:	d111      	bne.n	8004f60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f44:	d004      	beq.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4e:	d107      	bne.n	8004f60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f68:	d10f      	bne.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e017      	b.n	8004fce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d19b      	bne.n	8004f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000028 	.word	0x20000028

08004fdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fee:	f7fd f839 	bl	8002064 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004ffe:	f7fd f831 	bl	8002064 <HAL_GetTick>
 8005002:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800500c:	4b3d      	ldr	r3, [pc, #244]	; (8005104 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	00da      	lsls	r2, r3, #3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	0d1b      	lsrs	r3, r3, #20
 800501c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005024:	e060      	b.n	80050e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800502c:	d107      	bne.n	800503e <SPI_WaitFifoStateUntilTimeout+0x62>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800503c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d050      	beq.n	80050e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005046:	f7fd f80d 	bl	8002064 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005052:	429a      	cmp	r2, r3
 8005054:	d902      	bls.n	800505c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d13d      	bne.n	80050d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800506a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005074:	d111      	bne.n	800509a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507e:	d004      	beq.n	800508a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005088:	d107      	bne.n	800509a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005098:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a2:	d10f      	bne.n	80050c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e010      	b.n	80050fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d196      	bne.n	8005026 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3728      	adds	r7, #40	; 0x28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000028 	.word	0x20000028

08005108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2200      	movs	r2, #0
 800511c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff ff5b 	bl	8004fdc <SPI_WaitFifoStateUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005130:	f043 0220 	orr.w	r2, r3, #32
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e027      	b.n	800518c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2200      	movs	r2, #0
 8005144:	2180      	movs	r1, #128	; 0x80
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff fec0 	bl	8004ecc <SPI_WaitFlagStateUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e014      	b.n	800518c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2200      	movs	r2, #0
 800516a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff ff34 	bl	8004fdc <SPI_WaitFifoStateUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e000      	b.n	800518c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e049      	b.n	800523a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fc fdae 	bl	8001d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f000 f94a 	bl	800546c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800525e:	2302      	movs	r3, #2
 8005260:	e0ff      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b14      	cmp	r3, #20
 800526e:	f200 80f0 	bhi.w	8005452 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	080052cd 	.word	0x080052cd
 800527c:	08005453 	.word	0x08005453
 8005280:	08005453 	.word	0x08005453
 8005284:	08005453 	.word	0x08005453
 8005288:	0800530d 	.word	0x0800530d
 800528c:	08005453 	.word	0x08005453
 8005290:	08005453 	.word	0x08005453
 8005294:	08005453 	.word	0x08005453
 8005298:	0800534f 	.word	0x0800534f
 800529c:	08005453 	.word	0x08005453
 80052a0:	08005453 	.word	0x08005453
 80052a4:	08005453 	.word	0x08005453
 80052a8:	0800538f 	.word	0x0800538f
 80052ac:	08005453 	.word	0x08005453
 80052b0:	08005453 	.word	0x08005453
 80052b4:	08005453 	.word	0x08005453
 80052b8:	080053d1 	.word	0x080053d1
 80052bc:	08005453 	.word	0x08005453
 80052c0:	08005453 	.word	0x08005453
 80052c4:	08005453 	.word	0x08005453
 80052c8:	08005411 	.word	0x08005411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f942 	bl	800555c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0208 	orr.w	r2, r2, #8
 80052e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0204 	bic.w	r2, r2, #4
 80052f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6999      	ldr	r1, [r3, #24]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	619a      	str	r2, [r3, #24]
      break;
 800530a:	e0a5      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f9a8 	bl	8005668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6999      	ldr	r1, [r3, #24]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	021a      	lsls	r2, r3, #8
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	619a      	str	r2, [r3, #24]
      break;
 800534c:	e084      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fa07 	bl	8005768 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0208 	orr.w	r2, r2, #8
 8005368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0204 	bic.w	r2, r2, #4
 8005378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69d9      	ldr	r1, [r3, #28]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	61da      	str	r2, [r3, #28]
      break;
 800538c:	e064      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fa65 	bl	8005864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69d9      	ldr	r1, [r3, #28]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	021a      	lsls	r2, r3, #8
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	61da      	str	r2, [r3, #28]
      break;
 80053ce:	e043      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 faa8 	bl	800592c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0208 	orr.w	r2, r2, #8
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0204 	bic.w	r2, r2, #4
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800540e:	e023      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fae6 	bl	80059e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800542a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	021a      	lsls	r2, r3, #8
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005450:	e002      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	75fb      	strb	r3, [r7, #23]
      break;
 8005456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005460:	7dfb      	ldrb	r3, [r7, #23]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop

0800546c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a32      	ldr	r2, [pc, #200]	; (8005548 <TIM_Base_SetConfig+0xdc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d007      	beq.n	8005494 <TIM_Base_SetConfig+0x28>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d003      	beq.n	8005494 <TIM_Base_SetConfig+0x28>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a2f      	ldr	r2, [pc, #188]	; (800554c <TIM_Base_SetConfig+0xe0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d108      	bne.n	80054a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a27      	ldr	r2, [pc, #156]	; (8005548 <TIM_Base_SetConfig+0xdc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <TIM_Base_SetConfig+0x6a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b4:	d00f      	beq.n	80054d6 <TIM_Base_SetConfig+0x6a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a24      	ldr	r2, [pc, #144]	; (800554c <TIM_Base_SetConfig+0xe0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_Base_SetConfig+0x6a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a23      	ldr	r2, [pc, #140]	; (8005550 <TIM_Base_SetConfig+0xe4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_Base_SetConfig+0x6a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a22      	ldr	r2, [pc, #136]	; (8005554 <TIM_Base_SetConfig+0xe8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_Base_SetConfig+0x6a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a21      	ldr	r2, [pc, #132]	; (8005558 <TIM_Base_SetConfig+0xec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d108      	bne.n	80054e8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <TIM_Base_SetConfig+0xdc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_Base_SetConfig+0xc0>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a0e      	ldr	r2, [pc, #56]	; (8005550 <TIM_Base_SetConfig+0xe4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_Base_SetConfig+0xc0>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a0d      	ldr	r2, [pc, #52]	; (8005554 <TIM_Base_SetConfig+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0xc0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a0c      	ldr	r2, [pc, #48]	; (8005558 <TIM_Base_SetConfig+0xec>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d103      	bne.n	8005534 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	615a      	str	r2, [r3, #20]
}
 800553a:	bf00      	nop
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40000400 	.word	0x40000400
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800

0800555c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f023 0302 	bic.w	r3, r3, #2
 80055a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a28      	ldr	r2, [pc, #160]	; (8005658 <TIM_OC1_SetConfig+0xfc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00b      	beq.n	80055d4 <TIM_OC1_SetConfig+0x78>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a27      	ldr	r2, [pc, #156]	; (800565c <TIM_OC1_SetConfig+0x100>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <TIM_OC1_SetConfig+0x78>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a26      	ldr	r2, [pc, #152]	; (8005660 <TIM_OC1_SetConfig+0x104>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_OC1_SetConfig+0x78>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a25      	ldr	r2, [pc, #148]	; (8005664 <TIM_OC1_SetConfig+0x108>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d10c      	bne.n	80055ee <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0308 	bic.w	r3, r3, #8
 80055da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f023 0304 	bic.w	r3, r3, #4
 80055ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a19      	ldr	r2, [pc, #100]	; (8005658 <TIM_OC1_SetConfig+0xfc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00b      	beq.n	800560e <TIM_OC1_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a18      	ldr	r2, [pc, #96]	; (800565c <TIM_OC1_SetConfig+0x100>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d007      	beq.n	800560e <TIM_OC1_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a17      	ldr	r2, [pc, #92]	; (8005660 <TIM_OC1_SetConfig+0x104>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d003      	beq.n	800560e <TIM_OC1_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a16      	ldr	r2, [pc, #88]	; (8005664 <TIM_OC1_SetConfig+0x108>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d111      	bne.n	8005632 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800561c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	621a      	str	r2, [r3, #32]
}
 800564c:	bf00      	nop
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800

08005668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f023 0210 	bic.w	r2, r3, #16
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0320 	bic.w	r3, r3, #32
 80056b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a24      	ldr	r2, [pc, #144]	; (8005758 <TIM_OC2_SetConfig+0xf0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10d      	bne.n	80056e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <TIM_OC2_SetConfig+0xf0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00b      	beq.n	8005708 <TIM_OC2_SetConfig+0xa0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a1a      	ldr	r2, [pc, #104]	; (800575c <TIM_OC2_SetConfig+0xf4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <TIM_OC2_SetConfig+0xa0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a19      	ldr	r2, [pc, #100]	; (8005760 <TIM_OC2_SetConfig+0xf8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_OC2_SetConfig+0xa0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a18      	ldr	r2, [pc, #96]	; (8005764 <TIM_OC2_SetConfig+0xfc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d113      	bne.n	8005730 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800570e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005716:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800

08005768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0303 	bic.w	r3, r3, #3
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a23      	ldr	r2, [pc, #140]	; (8005854 <TIM_OC3_SetConfig+0xec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d10d      	bne.n	80057e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <TIM_OC3_SetConfig+0xec>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_OC3_SetConfig+0x9e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a19      	ldr	r2, [pc, #100]	; (8005858 <TIM_OC3_SetConfig+0xf0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_OC3_SetConfig+0x9e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a18      	ldr	r2, [pc, #96]	; (800585c <TIM_OC3_SetConfig+0xf4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_OC3_SetConfig+0x9e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a17      	ldr	r2, [pc, #92]	; (8005860 <TIM_OC3_SetConfig+0xf8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d113      	bne.n	800582e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	621a      	str	r2, [r3, #32]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800

08005864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	031b      	lsls	r3, r3, #12
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <TIM_OC4_SetConfig+0xb8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_OC4_SetConfig+0x7c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a15      	ldr	r2, [pc, #84]	; (8005920 <TIM_OC4_SetConfig+0xbc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_OC4_SetConfig+0x7c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a14      	ldr	r2, [pc, #80]	; (8005924 <TIM_OC4_SetConfig+0xc0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_OC4_SetConfig+0x7c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a13      	ldr	r2, [pc, #76]	; (8005928 <TIM_OC4_SetConfig+0xc4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d109      	bne.n	80058f4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	019b      	lsls	r3, r3, #6
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40014000 	.word	0x40014000
 8005924:	40014400 	.word	0x40014400
 8005928:	40014800 	.word	0x40014800

0800592c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005970:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	041b      	lsls	r3, r3, #16
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <TIM_OC5_SetConfig+0xac>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00b      	beq.n	800599e <TIM_OC5_SetConfig+0x72>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a14      	ldr	r2, [pc, #80]	; (80059dc <TIM_OC5_SetConfig+0xb0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d007      	beq.n	800599e <TIM_OC5_SetConfig+0x72>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a13      	ldr	r2, [pc, #76]	; (80059e0 <TIM_OC5_SetConfig+0xb4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <TIM_OC5_SetConfig+0x72>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <TIM_OC5_SetConfig+0xb8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d109      	bne.n	80059b2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	621a      	str	r2, [r3, #32]
}
 80059cc:	bf00      	nop
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40012c00 	.word	0x40012c00
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	051b      	lsls	r3, r3, #20
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <TIM_OC6_SetConfig+0xb0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <TIM_OC6_SetConfig+0x74>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a15      	ldr	r2, [pc, #84]	; (8005a9c <TIM_OC6_SetConfig+0xb4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <TIM_OC6_SetConfig+0x74>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <TIM_OC6_SetConfig+0xb8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_OC6_SetConfig+0x74>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a13      	ldr	r2, [pc, #76]	; (8005aa4 <TIM_OC6_SetConfig+0xbc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d109      	bne.n	8005a70 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800

08005aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e054      	b.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a24      	ldr	r2, [pc, #144]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d108      	bne.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005af0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b28:	d009      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a11      	ldr	r2, [pc, #68]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d10c      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40014000 	.word	0x40014000

08005b84 <__errno>:
 8005b84:	4b01      	ldr	r3, [pc, #4]	; (8005b8c <__errno+0x8>)
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000034 	.word	0x20000034

08005b90 <__libc_init_array>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	4d0d      	ldr	r5, [pc, #52]	; (8005bc8 <__libc_init_array+0x38>)
 8005b94:	4c0d      	ldr	r4, [pc, #52]	; (8005bcc <__libc_init_array+0x3c>)
 8005b96:	1b64      	subs	r4, r4, r5
 8005b98:	10a4      	asrs	r4, r4, #2
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	42a6      	cmp	r6, r4
 8005b9e:	d109      	bne.n	8005bb4 <__libc_init_array+0x24>
 8005ba0:	4d0b      	ldr	r5, [pc, #44]	; (8005bd0 <__libc_init_array+0x40>)
 8005ba2:	4c0c      	ldr	r4, [pc, #48]	; (8005bd4 <__libc_init_array+0x44>)
 8005ba4:	f001 fa96 	bl	80070d4 <_init>
 8005ba8:	1b64      	subs	r4, r4, r5
 8005baa:	10a4      	asrs	r4, r4, #2
 8005bac:	2600      	movs	r6, #0
 8005bae:	42a6      	cmp	r6, r4
 8005bb0:	d105      	bne.n	8005bbe <__libc_init_array+0x2e>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb8:	4798      	blx	r3
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7ee      	b.n	8005b9c <__libc_init_array+0xc>
 8005bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc2:	4798      	blx	r3
 8005bc4:	3601      	adds	r6, #1
 8005bc6:	e7f2      	b.n	8005bae <__libc_init_array+0x1e>
 8005bc8:	080078e4 	.word	0x080078e4
 8005bcc:	080078e4 	.word	0x080078e4
 8005bd0:	080078e4 	.word	0x080078e4
 8005bd4:	080078e8 	.word	0x080078e8

08005bd8 <memcpy>:
 8005bd8:	440a      	add	r2, r1
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005be0:	d100      	bne.n	8005be4 <memcpy+0xc>
 8005be2:	4770      	bx	lr
 8005be4:	b510      	push	{r4, lr}
 8005be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	d1f9      	bne.n	8005be6 <memcpy+0xe>
 8005bf2:	bd10      	pop	{r4, pc}

08005bf4 <memset>:
 8005bf4:	4402      	add	r2, r0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <memset+0xa>
 8005bfc:	4770      	bx	lr
 8005bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005c02:	e7f9      	b.n	8005bf8 <memset+0x4>

08005c04 <srand>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <srand+0x44>)
 8005c08:	681d      	ldr	r5, [r3, #0]
 8005c0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	b9b3      	cbnz	r3, 8005c3e <srand+0x3a>
 8005c10:	2018      	movs	r0, #24
 8005c12:	f000 f8df 	bl	8005dd4 <malloc>
 8005c16:	4602      	mov	r2, r0
 8005c18:	63a8      	str	r0, [r5, #56]	; 0x38
 8005c1a:	b920      	cbnz	r0, 8005c26 <srand+0x22>
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <srand+0x48>)
 8005c1e:	480c      	ldr	r0, [pc, #48]	; (8005c50 <srand+0x4c>)
 8005c20:	2142      	movs	r1, #66	; 0x42
 8005c22:	f000 f895 	bl	8005d50 <__assert_func>
 8005c26:	490b      	ldr	r1, [pc, #44]	; (8005c54 <srand+0x50>)
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <srand+0x54>)
 8005c2a:	e9c0 1300 	strd	r1, r3, [r0]
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <srand+0x58>)
 8005c30:	6083      	str	r3, [r0, #8]
 8005c32:	230b      	movs	r3, #11
 8005c34:	8183      	strh	r3, [r0, #12]
 8005c36:	2100      	movs	r1, #0
 8005c38:	2001      	movs	r0, #1
 8005c3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005c3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c40:	2200      	movs	r2, #0
 8005c42:	611c      	str	r4, [r3, #16]
 8005c44:	615a      	str	r2, [r3, #20]
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	20000034 	.word	0x20000034
 8005c4c:	080077a0 	.word	0x080077a0
 8005c50:	080077b7 	.word	0x080077b7
 8005c54:	abcd330e 	.word	0xabcd330e
 8005c58:	e66d1234 	.word	0xe66d1234
 8005c5c:	0005deec 	.word	0x0005deec

08005c60 <rand>:
 8005c60:	4b16      	ldr	r3, [pc, #88]	; (8005cbc <rand+0x5c>)
 8005c62:	b510      	push	{r4, lr}
 8005c64:	681c      	ldr	r4, [r3, #0]
 8005c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c68:	b9b3      	cbnz	r3, 8005c98 <rand+0x38>
 8005c6a:	2018      	movs	r0, #24
 8005c6c:	f000 f8b2 	bl	8005dd4 <malloc>
 8005c70:	63a0      	str	r0, [r4, #56]	; 0x38
 8005c72:	b928      	cbnz	r0, 8005c80 <rand+0x20>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <rand+0x60>)
 8005c78:	4812      	ldr	r0, [pc, #72]	; (8005cc4 <rand+0x64>)
 8005c7a:	214e      	movs	r1, #78	; 0x4e
 8005c7c:	f000 f868 	bl	8005d50 <__assert_func>
 8005c80:	4a11      	ldr	r2, [pc, #68]	; (8005cc8 <rand+0x68>)
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <rand+0x6c>)
 8005c84:	e9c0 2300 	strd	r2, r3, [r0]
 8005c88:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <rand+0x70>)
 8005c8a:	6083      	str	r3, [r0, #8]
 8005c8c:	230b      	movs	r3, #11
 8005c8e:	8183      	strh	r3, [r0, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	2300      	movs	r3, #0
 8005c94:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005c98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005c9a:	4a0e      	ldr	r2, [pc, #56]	; (8005cd4 <rand+0x74>)
 8005c9c:	6920      	ldr	r0, [r4, #16]
 8005c9e:	6963      	ldr	r3, [r4, #20]
 8005ca0:	490d      	ldr	r1, [pc, #52]	; (8005cd8 <rand+0x78>)
 8005ca2:	4342      	muls	r2, r0
 8005ca4:	fb01 2203 	mla	r2, r1, r3, r2
 8005ca8:	fba0 0101 	umull	r0, r1, r0, r1
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	eb42 0001 	adc.w	r0, r2, r1
 8005cb2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005cb6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cba:	bd10      	pop	{r4, pc}
 8005cbc:	20000034 	.word	0x20000034
 8005cc0:	080077a0 	.word	0x080077a0
 8005cc4:	080077b7 	.word	0x080077b7
 8005cc8:	abcd330e 	.word	0xabcd330e
 8005ccc:	e66d1234 	.word	0xe66d1234
 8005cd0:	0005deec 	.word	0x0005deec
 8005cd4:	5851f42d 	.word	0x5851f42d
 8005cd8:	4c957f2d 	.word	0x4c957f2d

08005cdc <siprintf>:
 8005cdc:	b40e      	push	{r1, r2, r3}
 8005cde:	b500      	push	{lr}
 8005ce0:	b09c      	sub	sp, #112	; 0x70
 8005ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ce4:	9002      	str	r0, [sp, #8]
 8005ce6:	9006      	str	r0, [sp, #24]
 8005ce8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cec:	4809      	ldr	r0, [pc, #36]	; (8005d14 <siprintf+0x38>)
 8005cee:	9107      	str	r1, [sp, #28]
 8005cf0:	9104      	str	r1, [sp, #16]
 8005cf2:	4909      	ldr	r1, [pc, #36]	; (8005d18 <siprintf+0x3c>)
 8005cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf8:	9105      	str	r1, [sp, #20]
 8005cfa:	6800      	ldr	r0, [r0, #0]
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	a902      	add	r1, sp, #8
 8005d00:	f000 f9ac 	bl	800605c <_svfiprintf_r>
 8005d04:	9b02      	ldr	r3, [sp, #8]
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	b01c      	add	sp, #112	; 0x70
 8005d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d10:	b003      	add	sp, #12
 8005d12:	4770      	bx	lr
 8005d14:	20000034 	.word	0x20000034
 8005d18:	ffff0208 	.word	0xffff0208

08005d1c <time>:
 8005d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <time+0x30>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	4669      	mov	r1, sp
 8005d24:	4604      	mov	r4, r0
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	f000 f842 	bl	8005db0 <_gettimeofday_r>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	bfbe      	ittt	lt
 8005d30:	f04f 32ff 	movlt.w	r2, #4294967295
 8005d34:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d38:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d40:	b10c      	cbz	r4, 8005d46 <time+0x2a>
 8005d42:	e9c4 0100 	strd	r0, r1, [r4]
 8005d46:	b004      	add	sp, #16
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000034 	.word	0x20000034

08005d50 <__assert_func>:
 8005d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d52:	4614      	mov	r4, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <__assert_func+0x2c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	68d8      	ldr	r0, [r3, #12]
 8005d5e:	b14c      	cbz	r4, 8005d74 <__assert_func+0x24>
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <__assert_func+0x30>)
 8005d62:	9100      	str	r1, [sp, #0]
 8005d64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d68:	4906      	ldr	r1, [pc, #24]	; (8005d84 <__assert_func+0x34>)
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	f000 f80e 	bl	8005d8c <fiprintf>
 8005d70:	f000 fe32 	bl	80069d8 <abort>
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <__assert_func+0x38>)
 8005d76:	461c      	mov	r4, r3
 8005d78:	e7f3      	b.n	8005d62 <__assert_func+0x12>
 8005d7a:	bf00      	nop
 8005d7c:	20000034 	.word	0x20000034
 8005d80:	08007812 	.word	0x08007812
 8005d84:	0800781f 	.word	0x0800781f
 8005d88:	0800784d 	.word	0x0800784d

08005d8c <fiprintf>:
 8005d8c:	b40e      	push	{r1, r2, r3}
 8005d8e:	b503      	push	{r0, r1, lr}
 8005d90:	4601      	mov	r1, r0
 8005d92:	ab03      	add	r3, sp, #12
 8005d94:	4805      	ldr	r0, [pc, #20]	; (8005dac <fiprintf+0x20>)
 8005d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	f000 fa87 	bl	80062b0 <_vfiprintf_r>
 8005da2:	b002      	add	sp, #8
 8005da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da8:	b003      	add	sp, #12
 8005daa:	4770      	bx	lr
 8005dac:	20000034 	.word	0x20000034

08005db0 <_gettimeofday_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d07      	ldr	r5, [pc, #28]	; (8005dd0 <_gettimeofday_r+0x20>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	4604      	mov	r4, r0
 8005db8:	4608      	mov	r0, r1
 8005dba:	4611      	mov	r1, r2
 8005dbc:	602b      	str	r3, [r5, #0]
 8005dbe:	f001 f981 	bl	80070c4 <_gettimeofday>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	d102      	bne.n	8005dcc <_gettimeofday_r+0x1c>
 8005dc6:	682b      	ldr	r3, [r5, #0]
 8005dc8:	b103      	cbz	r3, 8005dcc <_gettimeofday_r+0x1c>
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	bd38      	pop	{r3, r4, r5, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000840 	.word	0x20000840

08005dd4 <malloc>:
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <malloc+0xc>)
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f000 b86f 	b.w	8005ebc <_malloc_r>
 8005dde:	bf00      	nop
 8005de0:	20000034 	.word	0x20000034

08005de4 <_free_r>:
 8005de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005de6:	2900      	cmp	r1, #0
 8005de8:	d044      	beq.n	8005e74 <_free_r+0x90>
 8005dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dee:	9001      	str	r0, [sp, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f1a1 0404 	sub.w	r4, r1, #4
 8005df6:	bfb8      	it	lt
 8005df8:	18e4      	addlt	r4, r4, r3
 8005dfa:	f001 f82f 	bl	8006e5c <__malloc_lock>
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <_free_r+0x94>)
 8005e00:	9801      	ldr	r0, [sp, #4]
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	b933      	cbnz	r3, 8005e14 <_free_r+0x30>
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	6014      	str	r4, [r2, #0]
 8005e0a:	b003      	add	sp, #12
 8005e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e10:	f001 b82a 	b.w	8006e68 <__malloc_unlock>
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d908      	bls.n	8005e2a <_free_r+0x46>
 8005e18:	6825      	ldr	r5, [r4, #0]
 8005e1a:	1961      	adds	r1, r4, r5
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf01      	itttt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	1949      	addeq	r1, r1, r5
 8005e26:	6021      	streq	r1, [r4, #0]
 8005e28:	e7ed      	b.n	8005e06 <_free_r+0x22>
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b10b      	cbz	r3, 8005e34 <_free_r+0x50>
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d9fa      	bls.n	8005e2a <_free_r+0x46>
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	1855      	adds	r5, r2, r1
 8005e38:	42a5      	cmp	r5, r4
 8005e3a:	d10b      	bne.n	8005e54 <_free_r+0x70>
 8005e3c:	6824      	ldr	r4, [r4, #0]
 8005e3e:	4421      	add	r1, r4
 8005e40:	1854      	adds	r4, r2, r1
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	d1e0      	bne.n	8005e0a <_free_r+0x26>
 8005e48:	681c      	ldr	r4, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	6053      	str	r3, [r2, #4]
 8005e4e:	4421      	add	r1, r4
 8005e50:	6011      	str	r1, [r2, #0]
 8005e52:	e7da      	b.n	8005e0a <_free_r+0x26>
 8005e54:	d902      	bls.n	8005e5c <_free_r+0x78>
 8005e56:	230c      	movs	r3, #12
 8005e58:	6003      	str	r3, [r0, #0]
 8005e5a:	e7d6      	b.n	8005e0a <_free_r+0x26>
 8005e5c:	6825      	ldr	r5, [r4, #0]
 8005e5e:	1961      	adds	r1, r4, r5
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf04      	itt	eq
 8005e64:	6819      	ldreq	r1, [r3, #0]
 8005e66:	685b      	ldreq	r3, [r3, #4]
 8005e68:	6063      	str	r3, [r4, #4]
 8005e6a:	bf04      	itt	eq
 8005e6c:	1949      	addeq	r1, r1, r5
 8005e6e:	6021      	streq	r1, [r4, #0]
 8005e70:	6054      	str	r4, [r2, #4]
 8005e72:	e7ca      	b.n	8005e0a <_free_r+0x26>
 8005e74:	b003      	add	sp, #12
 8005e76:	bd30      	pop	{r4, r5, pc}
 8005e78:	20000838 	.word	0x20000838

08005e7c <sbrk_aligned>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4e0e      	ldr	r6, [pc, #56]	; (8005eb8 <sbrk_aligned+0x3c>)
 8005e80:	460c      	mov	r4, r1
 8005e82:	6831      	ldr	r1, [r6, #0]
 8005e84:	4605      	mov	r5, r0
 8005e86:	b911      	cbnz	r1, 8005e8e <sbrk_aligned+0x12>
 8005e88:	f000 fcd6 	bl	8006838 <_sbrk_r>
 8005e8c:	6030      	str	r0, [r6, #0]
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 fcd1 	bl	8006838 <_sbrk_r>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d00a      	beq.n	8005eb0 <sbrk_aligned+0x34>
 8005e9a:	1cc4      	adds	r4, r0, #3
 8005e9c:	f024 0403 	bic.w	r4, r4, #3
 8005ea0:	42a0      	cmp	r0, r4
 8005ea2:	d007      	beq.n	8005eb4 <sbrk_aligned+0x38>
 8005ea4:	1a21      	subs	r1, r4, r0
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f000 fcc6 	bl	8006838 <_sbrk_r>
 8005eac:	3001      	adds	r0, #1
 8005eae:	d101      	bne.n	8005eb4 <sbrk_aligned+0x38>
 8005eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	2000083c 	.word	0x2000083c

08005ebc <_malloc_r>:
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec0:	1ccd      	adds	r5, r1, #3
 8005ec2:	f025 0503 	bic.w	r5, r5, #3
 8005ec6:	3508      	adds	r5, #8
 8005ec8:	2d0c      	cmp	r5, #12
 8005eca:	bf38      	it	cc
 8005ecc:	250c      	movcc	r5, #12
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	db01      	blt.n	8005ed8 <_malloc_r+0x1c>
 8005ed4:	42a9      	cmp	r1, r5
 8005ed6:	d905      	bls.n	8005ee4 <_malloc_r+0x28>
 8005ed8:	230c      	movs	r3, #12
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	2600      	movs	r6, #0
 8005ede:	4630      	mov	r0, r6
 8005ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee4:	4e2e      	ldr	r6, [pc, #184]	; (8005fa0 <_malloc_r+0xe4>)
 8005ee6:	f000 ffb9 	bl	8006e5c <__malloc_lock>
 8005eea:	6833      	ldr	r3, [r6, #0]
 8005eec:	461c      	mov	r4, r3
 8005eee:	bb34      	cbnz	r4, 8005f3e <_malloc_r+0x82>
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	f7ff ffc2 	bl	8005e7c <sbrk_aligned>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	4604      	mov	r4, r0
 8005efc:	d14d      	bne.n	8005f9a <_malloc_r+0xde>
 8005efe:	6834      	ldr	r4, [r6, #0]
 8005f00:	4626      	mov	r6, r4
 8005f02:	2e00      	cmp	r6, #0
 8005f04:	d140      	bne.n	8005f88 <_malloc_r+0xcc>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	eb04 0803 	add.w	r8, r4, r3
 8005f10:	f000 fc92 	bl	8006838 <_sbrk_r>
 8005f14:	4580      	cmp	r8, r0
 8005f16:	d13a      	bne.n	8005f8e <_malloc_r+0xd2>
 8005f18:	6821      	ldr	r1, [r4, #0]
 8005f1a:	3503      	adds	r5, #3
 8005f1c:	1a6d      	subs	r5, r5, r1
 8005f1e:	f025 0503 	bic.w	r5, r5, #3
 8005f22:	3508      	adds	r5, #8
 8005f24:	2d0c      	cmp	r5, #12
 8005f26:	bf38      	it	cc
 8005f28:	250c      	movcc	r5, #12
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f7ff ffa5 	bl	8005e7c <sbrk_aligned>
 8005f32:	3001      	adds	r0, #1
 8005f34:	d02b      	beq.n	8005f8e <_malloc_r+0xd2>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	442b      	add	r3, r5
 8005f3a:	6023      	str	r3, [r4, #0]
 8005f3c:	e00e      	b.n	8005f5c <_malloc_r+0xa0>
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	1b52      	subs	r2, r2, r5
 8005f42:	d41e      	bmi.n	8005f82 <_malloc_r+0xc6>
 8005f44:	2a0b      	cmp	r2, #11
 8005f46:	d916      	bls.n	8005f76 <_malloc_r+0xba>
 8005f48:	1961      	adds	r1, r4, r5
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	6025      	str	r5, [r4, #0]
 8005f4e:	bf18      	it	ne
 8005f50:	6059      	strne	r1, [r3, #4]
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	bf08      	it	eq
 8005f56:	6031      	streq	r1, [r6, #0]
 8005f58:	5162      	str	r2, [r4, r5]
 8005f5a:	604b      	str	r3, [r1, #4]
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f104 060b 	add.w	r6, r4, #11
 8005f62:	f000 ff81 	bl	8006e68 <__malloc_unlock>
 8005f66:	f026 0607 	bic.w	r6, r6, #7
 8005f6a:	1d23      	adds	r3, r4, #4
 8005f6c:	1af2      	subs	r2, r6, r3
 8005f6e:	d0b6      	beq.n	8005ede <_malloc_r+0x22>
 8005f70:	1b9b      	subs	r3, r3, r6
 8005f72:	50a3      	str	r3, [r4, r2]
 8005f74:	e7b3      	b.n	8005ede <_malloc_r+0x22>
 8005f76:	6862      	ldr	r2, [r4, #4]
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	bf0c      	ite	eq
 8005f7c:	6032      	streq	r2, [r6, #0]
 8005f7e:	605a      	strne	r2, [r3, #4]
 8005f80:	e7ec      	b.n	8005f5c <_malloc_r+0xa0>
 8005f82:	4623      	mov	r3, r4
 8005f84:	6864      	ldr	r4, [r4, #4]
 8005f86:	e7b2      	b.n	8005eee <_malloc_r+0x32>
 8005f88:	4634      	mov	r4, r6
 8005f8a:	6876      	ldr	r6, [r6, #4]
 8005f8c:	e7b9      	b.n	8005f02 <_malloc_r+0x46>
 8005f8e:	230c      	movs	r3, #12
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	4638      	mov	r0, r7
 8005f94:	f000 ff68 	bl	8006e68 <__malloc_unlock>
 8005f98:	e7a1      	b.n	8005ede <_malloc_r+0x22>
 8005f9a:	6025      	str	r5, [r4, #0]
 8005f9c:	e7de      	b.n	8005f5c <_malloc_r+0xa0>
 8005f9e:	bf00      	nop
 8005fa0:	20000838 	.word	0x20000838

08005fa4 <__ssputs_r>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	688e      	ldr	r6, [r1, #8]
 8005faa:	429e      	cmp	r6, r3
 8005fac:	4682      	mov	sl, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4690      	mov	r8, r2
 8005fb2:	461f      	mov	r7, r3
 8005fb4:	d838      	bhi.n	8006028 <__ssputs_r+0x84>
 8005fb6:	898a      	ldrh	r2, [r1, #12]
 8005fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fbc:	d032      	beq.n	8006024 <__ssputs_r+0x80>
 8005fbe:	6825      	ldr	r5, [r4, #0]
 8005fc0:	6909      	ldr	r1, [r1, #16]
 8005fc2:	eba5 0901 	sub.w	r9, r5, r1
 8005fc6:	6965      	ldr	r5, [r4, #20]
 8005fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	444b      	add	r3, r9
 8005fd4:	106d      	asrs	r5, r5, #1
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	bf38      	it	cc
 8005fda:	461d      	movcc	r5, r3
 8005fdc:	0553      	lsls	r3, r2, #21
 8005fde:	d531      	bpl.n	8006044 <__ssputs_r+0xa0>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7ff ff6b 	bl	8005ebc <_malloc_r>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	b950      	cbnz	r0, 8006000 <__ssputs_r+0x5c>
 8005fea:	230c      	movs	r3, #12
 8005fec:	f8ca 3000 	str.w	r3, [sl]
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006000:	6921      	ldr	r1, [r4, #16]
 8006002:	464a      	mov	r2, r9
 8006004:	f7ff fde8 	bl	8005bd8 <memcpy>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800600e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006012:	81a3      	strh	r3, [r4, #12]
 8006014:	6126      	str	r6, [r4, #16]
 8006016:	6165      	str	r5, [r4, #20]
 8006018:	444e      	add	r6, r9
 800601a:	eba5 0509 	sub.w	r5, r5, r9
 800601e:	6026      	str	r6, [r4, #0]
 8006020:	60a5      	str	r5, [r4, #8]
 8006022:	463e      	mov	r6, r7
 8006024:	42be      	cmp	r6, r7
 8006026:	d900      	bls.n	800602a <__ssputs_r+0x86>
 8006028:	463e      	mov	r6, r7
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	4632      	mov	r2, r6
 800602e:	4641      	mov	r1, r8
 8006030:	f000 fefa 	bl	8006e28 <memmove>
 8006034:	68a3      	ldr	r3, [r4, #8]
 8006036:	1b9b      	subs	r3, r3, r6
 8006038:	60a3      	str	r3, [r4, #8]
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	4433      	add	r3, r6
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	2000      	movs	r0, #0
 8006042:	e7db      	b.n	8005ffc <__ssputs_r+0x58>
 8006044:	462a      	mov	r2, r5
 8006046:	f000 ff15 	bl	8006e74 <_realloc_r>
 800604a:	4606      	mov	r6, r0
 800604c:	2800      	cmp	r0, #0
 800604e:	d1e1      	bne.n	8006014 <__ssputs_r+0x70>
 8006050:	6921      	ldr	r1, [r4, #16]
 8006052:	4650      	mov	r0, sl
 8006054:	f7ff fec6 	bl	8005de4 <_free_r>
 8006058:	e7c7      	b.n	8005fea <__ssputs_r+0x46>
	...

0800605c <_svfiprintf_r>:
 800605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	4698      	mov	r8, r3
 8006062:	898b      	ldrh	r3, [r1, #12]
 8006064:	061b      	lsls	r3, r3, #24
 8006066:	b09d      	sub	sp, #116	; 0x74
 8006068:	4607      	mov	r7, r0
 800606a:	460d      	mov	r5, r1
 800606c:	4614      	mov	r4, r2
 800606e:	d50e      	bpl.n	800608e <_svfiprintf_r+0x32>
 8006070:	690b      	ldr	r3, [r1, #16]
 8006072:	b963      	cbnz	r3, 800608e <_svfiprintf_r+0x32>
 8006074:	2140      	movs	r1, #64	; 0x40
 8006076:	f7ff ff21 	bl	8005ebc <_malloc_r>
 800607a:	6028      	str	r0, [r5, #0]
 800607c:	6128      	str	r0, [r5, #16]
 800607e:	b920      	cbnz	r0, 800608a <_svfiprintf_r+0x2e>
 8006080:	230c      	movs	r3, #12
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	e0d1      	b.n	800622e <_svfiprintf_r+0x1d2>
 800608a:	2340      	movs	r3, #64	; 0x40
 800608c:	616b      	str	r3, [r5, #20]
 800608e:	2300      	movs	r3, #0
 8006090:	9309      	str	r3, [sp, #36]	; 0x24
 8006092:	2320      	movs	r3, #32
 8006094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006098:	f8cd 800c 	str.w	r8, [sp, #12]
 800609c:	2330      	movs	r3, #48	; 0x30
 800609e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006248 <_svfiprintf_r+0x1ec>
 80060a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060a6:	f04f 0901 	mov.w	r9, #1
 80060aa:	4623      	mov	r3, r4
 80060ac:	469a      	mov	sl, r3
 80060ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060b2:	b10a      	cbz	r2, 80060b8 <_svfiprintf_r+0x5c>
 80060b4:	2a25      	cmp	r2, #37	; 0x25
 80060b6:	d1f9      	bne.n	80060ac <_svfiprintf_r+0x50>
 80060b8:	ebba 0b04 	subs.w	fp, sl, r4
 80060bc:	d00b      	beq.n	80060d6 <_svfiprintf_r+0x7a>
 80060be:	465b      	mov	r3, fp
 80060c0:	4622      	mov	r2, r4
 80060c2:	4629      	mov	r1, r5
 80060c4:	4638      	mov	r0, r7
 80060c6:	f7ff ff6d 	bl	8005fa4 <__ssputs_r>
 80060ca:	3001      	adds	r0, #1
 80060cc:	f000 80aa 	beq.w	8006224 <_svfiprintf_r+0x1c8>
 80060d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d2:	445a      	add	r2, fp
 80060d4:	9209      	str	r2, [sp, #36]	; 0x24
 80060d6:	f89a 3000 	ldrb.w	r3, [sl]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80a2 	beq.w	8006224 <_svfiprintf_r+0x1c8>
 80060e0:	2300      	movs	r3, #0
 80060e2:	f04f 32ff 	mov.w	r2, #4294967295
 80060e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060ea:	f10a 0a01 	add.w	sl, sl, #1
 80060ee:	9304      	str	r3, [sp, #16]
 80060f0:	9307      	str	r3, [sp, #28]
 80060f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060f6:	931a      	str	r3, [sp, #104]	; 0x68
 80060f8:	4654      	mov	r4, sl
 80060fa:	2205      	movs	r2, #5
 80060fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006100:	4851      	ldr	r0, [pc, #324]	; (8006248 <_svfiprintf_r+0x1ec>)
 8006102:	f7fa f86d 	bl	80001e0 <memchr>
 8006106:	9a04      	ldr	r2, [sp, #16]
 8006108:	b9d8      	cbnz	r0, 8006142 <_svfiprintf_r+0xe6>
 800610a:	06d0      	lsls	r0, r2, #27
 800610c:	bf44      	itt	mi
 800610e:	2320      	movmi	r3, #32
 8006110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006114:	0711      	lsls	r1, r2, #28
 8006116:	bf44      	itt	mi
 8006118:	232b      	movmi	r3, #43	; 0x2b
 800611a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611e:	f89a 3000 	ldrb.w	r3, [sl]
 8006122:	2b2a      	cmp	r3, #42	; 0x2a
 8006124:	d015      	beq.n	8006152 <_svfiprintf_r+0xf6>
 8006126:	9a07      	ldr	r2, [sp, #28]
 8006128:	4654      	mov	r4, sl
 800612a:	2000      	movs	r0, #0
 800612c:	f04f 0c0a 	mov.w	ip, #10
 8006130:	4621      	mov	r1, r4
 8006132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006136:	3b30      	subs	r3, #48	; 0x30
 8006138:	2b09      	cmp	r3, #9
 800613a:	d94e      	bls.n	80061da <_svfiprintf_r+0x17e>
 800613c:	b1b0      	cbz	r0, 800616c <_svfiprintf_r+0x110>
 800613e:	9207      	str	r2, [sp, #28]
 8006140:	e014      	b.n	800616c <_svfiprintf_r+0x110>
 8006142:	eba0 0308 	sub.w	r3, r0, r8
 8006146:	fa09 f303 	lsl.w	r3, r9, r3
 800614a:	4313      	orrs	r3, r2
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	46a2      	mov	sl, r4
 8006150:	e7d2      	b.n	80060f8 <_svfiprintf_r+0x9c>
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	1d19      	adds	r1, r3, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	9103      	str	r1, [sp, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	bfbb      	ittet	lt
 800615e:	425b      	neglt	r3, r3
 8006160:	f042 0202 	orrlt.w	r2, r2, #2
 8006164:	9307      	strge	r3, [sp, #28]
 8006166:	9307      	strlt	r3, [sp, #28]
 8006168:	bfb8      	it	lt
 800616a:	9204      	strlt	r2, [sp, #16]
 800616c:	7823      	ldrb	r3, [r4, #0]
 800616e:	2b2e      	cmp	r3, #46	; 0x2e
 8006170:	d10c      	bne.n	800618c <_svfiprintf_r+0x130>
 8006172:	7863      	ldrb	r3, [r4, #1]
 8006174:	2b2a      	cmp	r3, #42	; 0x2a
 8006176:	d135      	bne.n	80061e4 <_svfiprintf_r+0x188>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	9203      	str	r2, [sp, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	bfb8      	it	lt
 8006184:	f04f 33ff 	movlt.w	r3, #4294967295
 8006188:	3402      	adds	r4, #2
 800618a:	9305      	str	r3, [sp, #20]
 800618c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006258 <_svfiprintf_r+0x1fc>
 8006190:	7821      	ldrb	r1, [r4, #0]
 8006192:	2203      	movs	r2, #3
 8006194:	4650      	mov	r0, sl
 8006196:	f7fa f823 	bl	80001e0 <memchr>
 800619a:	b140      	cbz	r0, 80061ae <_svfiprintf_r+0x152>
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	eba0 000a 	sub.w	r0, r0, sl
 80061a2:	fa03 f000 	lsl.w	r0, r3, r0
 80061a6:	9b04      	ldr	r3, [sp, #16]
 80061a8:	4303      	orrs	r3, r0
 80061aa:	3401      	adds	r4, #1
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b2:	4826      	ldr	r0, [pc, #152]	; (800624c <_svfiprintf_r+0x1f0>)
 80061b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b8:	2206      	movs	r2, #6
 80061ba:	f7fa f811 	bl	80001e0 <memchr>
 80061be:	2800      	cmp	r0, #0
 80061c0:	d038      	beq.n	8006234 <_svfiprintf_r+0x1d8>
 80061c2:	4b23      	ldr	r3, [pc, #140]	; (8006250 <_svfiprintf_r+0x1f4>)
 80061c4:	bb1b      	cbnz	r3, 800620e <_svfiprintf_r+0x1b2>
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	3307      	adds	r3, #7
 80061ca:	f023 0307 	bic.w	r3, r3, #7
 80061ce:	3308      	adds	r3, #8
 80061d0:	9303      	str	r3, [sp, #12]
 80061d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d4:	4433      	add	r3, r6
 80061d6:	9309      	str	r3, [sp, #36]	; 0x24
 80061d8:	e767      	b.n	80060aa <_svfiprintf_r+0x4e>
 80061da:	fb0c 3202 	mla	r2, ip, r2, r3
 80061de:	460c      	mov	r4, r1
 80061e0:	2001      	movs	r0, #1
 80061e2:	e7a5      	b.n	8006130 <_svfiprintf_r+0xd4>
 80061e4:	2300      	movs	r3, #0
 80061e6:	3401      	adds	r4, #1
 80061e8:	9305      	str	r3, [sp, #20]
 80061ea:	4619      	mov	r1, r3
 80061ec:	f04f 0c0a 	mov.w	ip, #10
 80061f0:	4620      	mov	r0, r4
 80061f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f6:	3a30      	subs	r2, #48	; 0x30
 80061f8:	2a09      	cmp	r2, #9
 80061fa:	d903      	bls.n	8006204 <_svfiprintf_r+0x1a8>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0c5      	beq.n	800618c <_svfiprintf_r+0x130>
 8006200:	9105      	str	r1, [sp, #20]
 8006202:	e7c3      	b.n	800618c <_svfiprintf_r+0x130>
 8006204:	fb0c 2101 	mla	r1, ip, r1, r2
 8006208:	4604      	mov	r4, r0
 800620a:	2301      	movs	r3, #1
 800620c:	e7f0      	b.n	80061f0 <_svfiprintf_r+0x194>
 800620e:	ab03      	add	r3, sp, #12
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	462a      	mov	r2, r5
 8006214:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <_svfiprintf_r+0x1f8>)
 8006216:	a904      	add	r1, sp, #16
 8006218:	4638      	mov	r0, r7
 800621a:	f3af 8000 	nop.w
 800621e:	1c42      	adds	r2, r0, #1
 8006220:	4606      	mov	r6, r0
 8006222:	d1d6      	bne.n	80061d2 <_svfiprintf_r+0x176>
 8006224:	89ab      	ldrh	r3, [r5, #12]
 8006226:	065b      	lsls	r3, r3, #25
 8006228:	f53f af2c 	bmi.w	8006084 <_svfiprintf_r+0x28>
 800622c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800622e:	b01d      	add	sp, #116	; 0x74
 8006230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	462a      	mov	r2, r5
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <_svfiprintf_r+0x1f8>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	4638      	mov	r0, r7
 8006240:	f000 f9d4 	bl	80065ec <_printf_i>
 8006244:	e7eb      	b.n	800621e <_svfiprintf_r+0x1c2>
 8006246:	bf00      	nop
 8006248:	0800784e 	.word	0x0800784e
 800624c:	08007858 	.word	0x08007858
 8006250:	00000000 	.word	0x00000000
 8006254:	08005fa5 	.word	0x08005fa5
 8006258:	08007854 	.word	0x08007854

0800625c <__sfputc_r>:
 800625c:	6893      	ldr	r3, [r2, #8]
 800625e:	3b01      	subs	r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	b410      	push	{r4}
 8006264:	6093      	str	r3, [r2, #8]
 8006266:	da08      	bge.n	800627a <__sfputc_r+0x1e>
 8006268:	6994      	ldr	r4, [r2, #24]
 800626a:	42a3      	cmp	r3, r4
 800626c:	db01      	blt.n	8006272 <__sfputc_r+0x16>
 800626e:	290a      	cmp	r1, #10
 8006270:	d103      	bne.n	800627a <__sfputc_r+0x1e>
 8006272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006276:	f000 baef 	b.w	8006858 <__swbuf_r>
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	1c58      	adds	r0, r3, #1
 800627e:	6010      	str	r0, [r2, #0]
 8006280:	7019      	strb	r1, [r3, #0]
 8006282:	4608      	mov	r0, r1
 8006284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006288:	4770      	bx	lr

0800628a <__sfputs_r>:
 800628a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628c:	4606      	mov	r6, r0
 800628e:	460f      	mov	r7, r1
 8006290:	4614      	mov	r4, r2
 8006292:	18d5      	adds	r5, r2, r3
 8006294:	42ac      	cmp	r4, r5
 8006296:	d101      	bne.n	800629c <__sfputs_r+0x12>
 8006298:	2000      	movs	r0, #0
 800629a:	e007      	b.n	80062ac <__sfputs_r+0x22>
 800629c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a0:	463a      	mov	r2, r7
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff ffda 	bl	800625c <__sfputc_r>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d1f3      	bne.n	8006294 <__sfputs_r+0xa>
 80062ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062b0 <_vfiprintf_r>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	460d      	mov	r5, r1
 80062b6:	b09d      	sub	sp, #116	; 0x74
 80062b8:	4614      	mov	r4, r2
 80062ba:	4698      	mov	r8, r3
 80062bc:	4606      	mov	r6, r0
 80062be:	b118      	cbz	r0, 80062c8 <_vfiprintf_r+0x18>
 80062c0:	6983      	ldr	r3, [r0, #24]
 80062c2:	b90b      	cbnz	r3, 80062c8 <_vfiprintf_r+0x18>
 80062c4:	f000 fcaa 	bl	8006c1c <__sinit>
 80062c8:	4b89      	ldr	r3, [pc, #548]	; (80064f0 <_vfiprintf_r+0x240>)
 80062ca:	429d      	cmp	r5, r3
 80062cc:	d11b      	bne.n	8006306 <_vfiprintf_r+0x56>
 80062ce:	6875      	ldr	r5, [r6, #4]
 80062d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062d2:	07d9      	lsls	r1, r3, #31
 80062d4:	d405      	bmi.n	80062e2 <_vfiprintf_r+0x32>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	059a      	lsls	r2, r3, #22
 80062da:	d402      	bmi.n	80062e2 <_vfiprintf_r+0x32>
 80062dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062de:	f000 fd3b 	bl	8006d58 <__retarget_lock_acquire_recursive>
 80062e2:	89ab      	ldrh	r3, [r5, #12]
 80062e4:	071b      	lsls	r3, r3, #28
 80062e6:	d501      	bpl.n	80062ec <_vfiprintf_r+0x3c>
 80062e8:	692b      	ldr	r3, [r5, #16]
 80062ea:	b9eb      	cbnz	r3, 8006328 <_vfiprintf_r+0x78>
 80062ec:	4629      	mov	r1, r5
 80062ee:	4630      	mov	r0, r6
 80062f0:	f000 fb04 	bl	80068fc <__swsetup_r>
 80062f4:	b1c0      	cbz	r0, 8006328 <_vfiprintf_r+0x78>
 80062f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f8:	07dc      	lsls	r4, r3, #31
 80062fa:	d50e      	bpl.n	800631a <_vfiprintf_r+0x6a>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	b01d      	add	sp, #116	; 0x74
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	4b7b      	ldr	r3, [pc, #492]	; (80064f4 <_vfiprintf_r+0x244>)
 8006308:	429d      	cmp	r5, r3
 800630a:	d101      	bne.n	8006310 <_vfiprintf_r+0x60>
 800630c:	68b5      	ldr	r5, [r6, #8]
 800630e:	e7df      	b.n	80062d0 <_vfiprintf_r+0x20>
 8006310:	4b79      	ldr	r3, [pc, #484]	; (80064f8 <_vfiprintf_r+0x248>)
 8006312:	429d      	cmp	r5, r3
 8006314:	bf08      	it	eq
 8006316:	68f5      	ldreq	r5, [r6, #12]
 8006318:	e7da      	b.n	80062d0 <_vfiprintf_r+0x20>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	0598      	lsls	r0, r3, #22
 800631e:	d4ed      	bmi.n	80062fc <_vfiprintf_r+0x4c>
 8006320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006322:	f000 fd1a 	bl	8006d5a <__retarget_lock_release_recursive>
 8006326:	e7e9      	b.n	80062fc <_vfiprintf_r+0x4c>
 8006328:	2300      	movs	r3, #0
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
 800632c:	2320      	movs	r3, #32
 800632e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006332:	f8cd 800c 	str.w	r8, [sp, #12]
 8006336:	2330      	movs	r3, #48	; 0x30
 8006338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064fc <_vfiprintf_r+0x24c>
 800633c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006340:	f04f 0901 	mov.w	r9, #1
 8006344:	4623      	mov	r3, r4
 8006346:	469a      	mov	sl, r3
 8006348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800634c:	b10a      	cbz	r2, 8006352 <_vfiprintf_r+0xa2>
 800634e:	2a25      	cmp	r2, #37	; 0x25
 8006350:	d1f9      	bne.n	8006346 <_vfiprintf_r+0x96>
 8006352:	ebba 0b04 	subs.w	fp, sl, r4
 8006356:	d00b      	beq.n	8006370 <_vfiprintf_r+0xc0>
 8006358:	465b      	mov	r3, fp
 800635a:	4622      	mov	r2, r4
 800635c:	4629      	mov	r1, r5
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ff93 	bl	800628a <__sfputs_r>
 8006364:	3001      	adds	r0, #1
 8006366:	f000 80aa 	beq.w	80064be <_vfiprintf_r+0x20e>
 800636a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800636c:	445a      	add	r2, fp
 800636e:	9209      	str	r2, [sp, #36]	; 0x24
 8006370:	f89a 3000 	ldrb.w	r3, [sl]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80a2 	beq.w	80064be <_vfiprintf_r+0x20e>
 800637a:	2300      	movs	r3, #0
 800637c:	f04f 32ff 	mov.w	r2, #4294967295
 8006380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006384:	f10a 0a01 	add.w	sl, sl, #1
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	9307      	str	r3, [sp, #28]
 800638c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006390:	931a      	str	r3, [sp, #104]	; 0x68
 8006392:	4654      	mov	r4, sl
 8006394:	2205      	movs	r2, #5
 8006396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639a:	4858      	ldr	r0, [pc, #352]	; (80064fc <_vfiprintf_r+0x24c>)
 800639c:	f7f9 ff20 	bl	80001e0 <memchr>
 80063a0:	9a04      	ldr	r2, [sp, #16]
 80063a2:	b9d8      	cbnz	r0, 80063dc <_vfiprintf_r+0x12c>
 80063a4:	06d1      	lsls	r1, r2, #27
 80063a6:	bf44      	itt	mi
 80063a8:	2320      	movmi	r3, #32
 80063aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ae:	0713      	lsls	r3, r2, #28
 80063b0:	bf44      	itt	mi
 80063b2:	232b      	movmi	r3, #43	; 0x2b
 80063b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063b8:	f89a 3000 	ldrb.w	r3, [sl]
 80063bc:	2b2a      	cmp	r3, #42	; 0x2a
 80063be:	d015      	beq.n	80063ec <_vfiprintf_r+0x13c>
 80063c0:	9a07      	ldr	r2, [sp, #28]
 80063c2:	4654      	mov	r4, sl
 80063c4:	2000      	movs	r0, #0
 80063c6:	f04f 0c0a 	mov.w	ip, #10
 80063ca:	4621      	mov	r1, r4
 80063cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063d0:	3b30      	subs	r3, #48	; 0x30
 80063d2:	2b09      	cmp	r3, #9
 80063d4:	d94e      	bls.n	8006474 <_vfiprintf_r+0x1c4>
 80063d6:	b1b0      	cbz	r0, 8006406 <_vfiprintf_r+0x156>
 80063d8:	9207      	str	r2, [sp, #28]
 80063da:	e014      	b.n	8006406 <_vfiprintf_r+0x156>
 80063dc:	eba0 0308 	sub.w	r3, r0, r8
 80063e0:	fa09 f303 	lsl.w	r3, r9, r3
 80063e4:	4313      	orrs	r3, r2
 80063e6:	9304      	str	r3, [sp, #16]
 80063e8:	46a2      	mov	sl, r4
 80063ea:	e7d2      	b.n	8006392 <_vfiprintf_r+0xe2>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	1d19      	adds	r1, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	9103      	str	r1, [sp, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfbb      	ittet	lt
 80063f8:	425b      	neglt	r3, r3
 80063fa:	f042 0202 	orrlt.w	r2, r2, #2
 80063fe:	9307      	strge	r3, [sp, #28]
 8006400:	9307      	strlt	r3, [sp, #28]
 8006402:	bfb8      	it	lt
 8006404:	9204      	strlt	r2, [sp, #16]
 8006406:	7823      	ldrb	r3, [r4, #0]
 8006408:	2b2e      	cmp	r3, #46	; 0x2e
 800640a:	d10c      	bne.n	8006426 <_vfiprintf_r+0x176>
 800640c:	7863      	ldrb	r3, [r4, #1]
 800640e:	2b2a      	cmp	r3, #42	; 0x2a
 8006410:	d135      	bne.n	800647e <_vfiprintf_r+0x1ce>
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	9203      	str	r2, [sp, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfb8      	it	lt
 800641e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006422:	3402      	adds	r4, #2
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800650c <_vfiprintf_r+0x25c>
 800642a:	7821      	ldrb	r1, [r4, #0]
 800642c:	2203      	movs	r2, #3
 800642e:	4650      	mov	r0, sl
 8006430:	f7f9 fed6 	bl	80001e0 <memchr>
 8006434:	b140      	cbz	r0, 8006448 <_vfiprintf_r+0x198>
 8006436:	2340      	movs	r3, #64	; 0x40
 8006438:	eba0 000a 	sub.w	r0, r0, sl
 800643c:	fa03 f000 	lsl.w	r0, r3, r0
 8006440:	9b04      	ldr	r3, [sp, #16]
 8006442:	4303      	orrs	r3, r0
 8006444:	3401      	adds	r4, #1
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800644c:	482c      	ldr	r0, [pc, #176]	; (8006500 <_vfiprintf_r+0x250>)
 800644e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006452:	2206      	movs	r2, #6
 8006454:	f7f9 fec4 	bl	80001e0 <memchr>
 8006458:	2800      	cmp	r0, #0
 800645a:	d03f      	beq.n	80064dc <_vfiprintf_r+0x22c>
 800645c:	4b29      	ldr	r3, [pc, #164]	; (8006504 <_vfiprintf_r+0x254>)
 800645e:	bb1b      	cbnz	r3, 80064a8 <_vfiprintf_r+0x1f8>
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	3307      	adds	r3, #7
 8006464:	f023 0307 	bic.w	r3, r3, #7
 8006468:	3308      	adds	r3, #8
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646e:	443b      	add	r3, r7
 8006470:	9309      	str	r3, [sp, #36]	; 0x24
 8006472:	e767      	b.n	8006344 <_vfiprintf_r+0x94>
 8006474:	fb0c 3202 	mla	r2, ip, r2, r3
 8006478:	460c      	mov	r4, r1
 800647a:	2001      	movs	r0, #1
 800647c:	e7a5      	b.n	80063ca <_vfiprintf_r+0x11a>
 800647e:	2300      	movs	r3, #0
 8006480:	3401      	adds	r4, #1
 8006482:	9305      	str	r3, [sp, #20]
 8006484:	4619      	mov	r1, r3
 8006486:	f04f 0c0a 	mov.w	ip, #10
 800648a:	4620      	mov	r0, r4
 800648c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006490:	3a30      	subs	r2, #48	; 0x30
 8006492:	2a09      	cmp	r2, #9
 8006494:	d903      	bls.n	800649e <_vfiprintf_r+0x1ee>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0c5      	beq.n	8006426 <_vfiprintf_r+0x176>
 800649a:	9105      	str	r1, [sp, #20]
 800649c:	e7c3      	b.n	8006426 <_vfiprintf_r+0x176>
 800649e:	fb0c 2101 	mla	r1, ip, r1, r2
 80064a2:	4604      	mov	r4, r0
 80064a4:	2301      	movs	r3, #1
 80064a6:	e7f0      	b.n	800648a <_vfiprintf_r+0x1da>
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	462a      	mov	r2, r5
 80064ae:	4b16      	ldr	r3, [pc, #88]	; (8006508 <_vfiprintf_r+0x258>)
 80064b0:	a904      	add	r1, sp, #16
 80064b2:	4630      	mov	r0, r6
 80064b4:	f3af 8000 	nop.w
 80064b8:	4607      	mov	r7, r0
 80064ba:	1c78      	adds	r0, r7, #1
 80064bc:	d1d6      	bne.n	800646c <_vfiprintf_r+0x1bc>
 80064be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064c0:	07d9      	lsls	r1, r3, #31
 80064c2:	d405      	bmi.n	80064d0 <_vfiprintf_r+0x220>
 80064c4:	89ab      	ldrh	r3, [r5, #12]
 80064c6:	059a      	lsls	r2, r3, #22
 80064c8:	d402      	bmi.n	80064d0 <_vfiprintf_r+0x220>
 80064ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064cc:	f000 fc45 	bl	8006d5a <__retarget_lock_release_recursive>
 80064d0:	89ab      	ldrh	r3, [r5, #12]
 80064d2:	065b      	lsls	r3, r3, #25
 80064d4:	f53f af12 	bmi.w	80062fc <_vfiprintf_r+0x4c>
 80064d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064da:	e711      	b.n	8006300 <_vfiprintf_r+0x50>
 80064dc:	ab03      	add	r3, sp, #12
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	462a      	mov	r2, r5
 80064e2:	4b09      	ldr	r3, [pc, #36]	; (8006508 <_vfiprintf_r+0x258>)
 80064e4:	a904      	add	r1, sp, #16
 80064e6:	4630      	mov	r0, r6
 80064e8:	f000 f880 	bl	80065ec <_printf_i>
 80064ec:	e7e4      	b.n	80064b8 <_vfiprintf_r+0x208>
 80064ee:	bf00      	nop
 80064f0:	080078a4 	.word	0x080078a4
 80064f4:	080078c4 	.word	0x080078c4
 80064f8:	08007884 	.word	0x08007884
 80064fc:	0800784e 	.word	0x0800784e
 8006500:	08007858 	.word	0x08007858
 8006504:	00000000 	.word	0x00000000
 8006508:	0800628b 	.word	0x0800628b
 800650c:	08007854 	.word	0x08007854

08006510 <_printf_common>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	4616      	mov	r6, r2
 8006516:	4699      	mov	r9, r3
 8006518:	688a      	ldr	r2, [r1, #8]
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006520:	4293      	cmp	r3, r2
 8006522:	bfb8      	it	lt
 8006524:	4613      	movlt	r3, r2
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800652c:	4607      	mov	r7, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b10a      	cbz	r2, 8006536 <_printf_common+0x26>
 8006532:	3301      	adds	r3, #1
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	0699      	lsls	r1, r3, #26
 800653a:	bf42      	ittt	mi
 800653c:	6833      	ldrmi	r3, [r6, #0]
 800653e:	3302      	addmi	r3, #2
 8006540:	6033      	strmi	r3, [r6, #0]
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	f015 0506 	ands.w	r5, r5, #6
 8006548:	d106      	bne.n	8006558 <_printf_common+0x48>
 800654a:	f104 0a19 	add.w	sl, r4, #25
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	6832      	ldr	r2, [r6, #0]
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc26      	bgt.n	80065a6 <_printf_common+0x96>
 8006558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800655c:	1e13      	subs	r3, r2, #0
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	bf18      	it	ne
 8006562:	2301      	movne	r3, #1
 8006564:	0692      	lsls	r2, r2, #26
 8006566:	d42b      	bmi.n	80065c0 <_printf_common+0xb0>
 8006568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800656c:	4649      	mov	r1, r9
 800656e:	4638      	mov	r0, r7
 8006570:	47c0      	blx	r8
 8006572:	3001      	adds	r0, #1
 8006574:	d01e      	beq.n	80065b4 <_printf_common+0xa4>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	68e5      	ldr	r5, [r4, #12]
 800657a:	6832      	ldr	r2, [r6, #0]
 800657c:	f003 0306 	and.w	r3, r3, #6
 8006580:	2b04      	cmp	r3, #4
 8006582:	bf08      	it	eq
 8006584:	1aad      	subeq	r5, r5, r2
 8006586:	68a3      	ldr	r3, [r4, #8]
 8006588:	6922      	ldr	r2, [r4, #16]
 800658a:	bf0c      	ite	eq
 800658c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006590:	2500      	movne	r5, #0
 8006592:	4293      	cmp	r3, r2
 8006594:	bfc4      	itt	gt
 8006596:	1a9b      	subgt	r3, r3, r2
 8006598:	18ed      	addgt	r5, r5, r3
 800659a:	2600      	movs	r6, #0
 800659c:	341a      	adds	r4, #26
 800659e:	42b5      	cmp	r5, r6
 80065a0:	d11a      	bne.n	80065d8 <_printf_common+0xc8>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e008      	b.n	80065b8 <_printf_common+0xa8>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4652      	mov	r2, sl
 80065aa:	4649      	mov	r1, r9
 80065ac:	4638      	mov	r0, r7
 80065ae:	47c0      	blx	r8
 80065b0:	3001      	adds	r0, #1
 80065b2:	d103      	bne.n	80065bc <_printf_common+0xac>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	3501      	adds	r5, #1
 80065be:	e7c6      	b.n	800654e <_printf_common+0x3e>
 80065c0:	18e1      	adds	r1, r4, r3
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	2030      	movs	r0, #48	; 0x30
 80065c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ca:	4422      	add	r2, r4
 80065cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d4:	3302      	adds	r3, #2
 80065d6:	e7c7      	b.n	8006568 <_printf_common+0x58>
 80065d8:	2301      	movs	r3, #1
 80065da:	4622      	mov	r2, r4
 80065dc:	4649      	mov	r1, r9
 80065de:	4638      	mov	r0, r7
 80065e0:	47c0      	blx	r8
 80065e2:	3001      	adds	r0, #1
 80065e4:	d0e6      	beq.n	80065b4 <_printf_common+0xa4>
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7d9      	b.n	800659e <_printf_common+0x8e>
	...

080065ec <_printf_i>:
 80065ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	7e0f      	ldrb	r7, [r1, #24]
 80065f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065f4:	2f78      	cmp	r7, #120	; 0x78
 80065f6:	4691      	mov	r9, r2
 80065f8:	4680      	mov	r8, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	469a      	mov	sl, r3
 80065fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006602:	d807      	bhi.n	8006614 <_printf_i+0x28>
 8006604:	2f62      	cmp	r7, #98	; 0x62
 8006606:	d80a      	bhi.n	800661e <_printf_i+0x32>
 8006608:	2f00      	cmp	r7, #0
 800660a:	f000 80d8 	beq.w	80067be <_printf_i+0x1d2>
 800660e:	2f58      	cmp	r7, #88	; 0x58
 8006610:	f000 80a3 	beq.w	800675a <_printf_i+0x16e>
 8006614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800661c:	e03a      	b.n	8006694 <_printf_i+0xa8>
 800661e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006622:	2b15      	cmp	r3, #21
 8006624:	d8f6      	bhi.n	8006614 <_printf_i+0x28>
 8006626:	a101      	add	r1, pc, #4	; (adr r1, 800662c <_printf_i+0x40>)
 8006628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800662c:	08006685 	.word	0x08006685
 8006630:	08006699 	.word	0x08006699
 8006634:	08006615 	.word	0x08006615
 8006638:	08006615 	.word	0x08006615
 800663c:	08006615 	.word	0x08006615
 8006640:	08006615 	.word	0x08006615
 8006644:	08006699 	.word	0x08006699
 8006648:	08006615 	.word	0x08006615
 800664c:	08006615 	.word	0x08006615
 8006650:	08006615 	.word	0x08006615
 8006654:	08006615 	.word	0x08006615
 8006658:	080067a5 	.word	0x080067a5
 800665c:	080066c9 	.word	0x080066c9
 8006660:	08006787 	.word	0x08006787
 8006664:	08006615 	.word	0x08006615
 8006668:	08006615 	.word	0x08006615
 800666c:	080067c7 	.word	0x080067c7
 8006670:	08006615 	.word	0x08006615
 8006674:	080066c9 	.word	0x080066c9
 8006678:	08006615 	.word	0x08006615
 800667c:	08006615 	.word	0x08006615
 8006680:	0800678f 	.word	0x0800678f
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	602a      	str	r2, [r5, #0]
 800668c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006694:	2301      	movs	r3, #1
 8006696:	e0a3      	b.n	80067e0 <_printf_i+0x1f4>
 8006698:	6820      	ldr	r0, [r4, #0]
 800669a:	6829      	ldr	r1, [r5, #0]
 800669c:	0606      	lsls	r6, r0, #24
 800669e:	f101 0304 	add.w	r3, r1, #4
 80066a2:	d50a      	bpl.n	80066ba <_printf_i+0xce>
 80066a4:	680e      	ldr	r6, [r1, #0]
 80066a6:	602b      	str	r3, [r5, #0]
 80066a8:	2e00      	cmp	r6, #0
 80066aa:	da03      	bge.n	80066b4 <_printf_i+0xc8>
 80066ac:	232d      	movs	r3, #45	; 0x2d
 80066ae:	4276      	negs	r6, r6
 80066b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b4:	485e      	ldr	r0, [pc, #376]	; (8006830 <_printf_i+0x244>)
 80066b6:	230a      	movs	r3, #10
 80066b8:	e019      	b.n	80066ee <_printf_i+0x102>
 80066ba:	680e      	ldr	r6, [r1, #0]
 80066bc:	602b      	str	r3, [r5, #0]
 80066be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066c2:	bf18      	it	ne
 80066c4:	b236      	sxthne	r6, r6
 80066c6:	e7ef      	b.n	80066a8 <_printf_i+0xbc>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	6820      	ldr	r0, [r4, #0]
 80066cc:	1d19      	adds	r1, r3, #4
 80066ce:	6029      	str	r1, [r5, #0]
 80066d0:	0601      	lsls	r1, r0, #24
 80066d2:	d501      	bpl.n	80066d8 <_printf_i+0xec>
 80066d4:	681e      	ldr	r6, [r3, #0]
 80066d6:	e002      	b.n	80066de <_printf_i+0xf2>
 80066d8:	0646      	lsls	r6, r0, #25
 80066da:	d5fb      	bpl.n	80066d4 <_printf_i+0xe8>
 80066dc:	881e      	ldrh	r6, [r3, #0]
 80066de:	4854      	ldr	r0, [pc, #336]	; (8006830 <_printf_i+0x244>)
 80066e0:	2f6f      	cmp	r7, #111	; 0x6f
 80066e2:	bf0c      	ite	eq
 80066e4:	2308      	moveq	r3, #8
 80066e6:	230a      	movne	r3, #10
 80066e8:	2100      	movs	r1, #0
 80066ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ee:	6865      	ldr	r5, [r4, #4]
 80066f0:	60a5      	str	r5, [r4, #8]
 80066f2:	2d00      	cmp	r5, #0
 80066f4:	bfa2      	ittt	ge
 80066f6:	6821      	ldrge	r1, [r4, #0]
 80066f8:	f021 0104 	bicge.w	r1, r1, #4
 80066fc:	6021      	strge	r1, [r4, #0]
 80066fe:	b90e      	cbnz	r6, 8006704 <_printf_i+0x118>
 8006700:	2d00      	cmp	r5, #0
 8006702:	d04d      	beq.n	80067a0 <_printf_i+0x1b4>
 8006704:	4615      	mov	r5, r2
 8006706:	fbb6 f1f3 	udiv	r1, r6, r3
 800670a:	fb03 6711 	mls	r7, r3, r1, r6
 800670e:	5dc7      	ldrb	r7, [r0, r7]
 8006710:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006714:	4637      	mov	r7, r6
 8006716:	42bb      	cmp	r3, r7
 8006718:	460e      	mov	r6, r1
 800671a:	d9f4      	bls.n	8006706 <_printf_i+0x11a>
 800671c:	2b08      	cmp	r3, #8
 800671e:	d10b      	bne.n	8006738 <_printf_i+0x14c>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	07de      	lsls	r6, r3, #31
 8006724:	d508      	bpl.n	8006738 <_printf_i+0x14c>
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	6861      	ldr	r1, [r4, #4]
 800672a:	4299      	cmp	r1, r3
 800672c:	bfde      	ittt	le
 800672e:	2330      	movle	r3, #48	; 0x30
 8006730:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006734:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006738:	1b52      	subs	r2, r2, r5
 800673a:	6122      	str	r2, [r4, #16]
 800673c:	f8cd a000 	str.w	sl, [sp]
 8006740:	464b      	mov	r3, r9
 8006742:	aa03      	add	r2, sp, #12
 8006744:	4621      	mov	r1, r4
 8006746:	4640      	mov	r0, r8
 8006748:	f7ff fee2 	bl	8006510 <_printf_common>
 800674c:	3001      	adds	r0, #1
 800674e:	d14c      	bne.n	80067ea <_printf_i+0x1fe>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	b004      	add	sp, #16
 8006756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675a:	4835      	ldr	r0, [pc, #212]	; (8006830 <_printf_i+0x244>)
 800675c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006760:	6829      	ldr	r1, [r5, #0]
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	f851 6b04 	ldr.w	r6, [r1], #4
 8006768:	6029      	str	r1, [r5, #0]
 800676a:	061d      	lsls	r5, r3, #24
 800676c:	d514      	bpl.n	8006798 <_printf_i+0x1ac>
 800676e:	07df      	lsls	r7, r3, #31
 8006770:	bf44      	itt	mi
 8006772:	f043 0320 	orrmi.w	r3, r3, #32
 8006776:	6023      	strmi	r3, [r4, #0]
 8006778:	b91e      	cbnz	r6, 8006782 <_printf_i+0x196>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f023 0320 	bic.w	r3, r3, #32
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	2310      	movs	r3, #16
 8006784:	e7b0      	b.n	80066e8 <_printf_i+0xfc>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f043 0320 	orr.w	r3, r3, #32
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	2378      	movs	r3, #120	; 0x78
 8006790:	4828      	ldr	r0, [pc, #160]	; (8006834 <_printf_i+0x248>)
 8006792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006796:	e7e3      	b.n	8006760 <_printf_i+0x174>
 8006798:	0659      	lsls	r1, r3, #25
 800679a:	bf48      	it	mi
 800679c:	b2b6      	uxthmi	r6, r6
 800679e:	e7e6      	b.n	800676e <_printf_i+0x182>
 80067a0:	4615      	mov	r5, r2
 80067a2:	e7bb      	b.n	800671c <_printf_i+0x130>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	6826      	ldr	r6, [r4, #0]
 80067a8:	6961      	ldr	r1, [r4, #20]
 80067aa:	1d18      	adds	r0, r3, #4
 80067ac:	6028      	str	r0, [r5, #0]
 80067ae:	0635      	lsls	r5, r6, #24
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	d501      	bpl.n	80067b8 <_printf_i+0x1cc>
 80067b4:	6019      	str	r1, [r3, #0]
 80067b6:	e002      	b.n	80067be <_printf_i+0x1d2>
 80067b8:	0670      	lsls	r0, r6, #25
 80067ba:	d5fb      	bpl.n	80067b4 <_printf_i+0x1c8>
 80067bc:	8019      	strh	r1, [r3, #0]
 80067be:	2300      	movs	r3, #0
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	4615      	mov	r5, r2
 80067c4:	e7ba      	b.n	800673c <_printf_i+0x150>
 80067c6:	682b      	ldr	r3, [r5, #0]
 80067c8:	1d1a      	adds	r2, r3, #4
 80067ca:	602a      	str	r2, [r5, #0]
 80067cc:	681d      	ldr	r5, [r3, #0]
 80067ce:	6862      	ldr	r2, [r4, #4]
 80067d0:	2100      	movs	r1, #0
 80067d2:	4628      	mov	r0, r5
 80067d4:	f7f9 fd04 	bl	80001e0 <memchr>
 80067d8:	b108      	cbz	r0, 80067de <_printf_i+0x1f2>
 80067da:	1b40      	subs	r0, r0, r5
 80067dc:	6060      	str	r0, [r4, #4]
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	2300      	movs	r3, #0
 80067e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e8:	e7a8      	b.n	800673c <_printf_i+0x150>
 80067ea:	6923      	ldr	r3, [r4, #16]
 80067ec:	462a      	mov	r2, r5
 80067ee:	4649      	mov	r1, r9
 80067f0:	4640      	mov	r0, r8
 80067f2:	47d0      	blx	sl
 80067f4:	3001      	adds	r0, #1
 80067f6:	d0ab      	beq.n	8006750 <_printf_i+0x164>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	079b      	lsls	r3, r3, #30
 80067fc:	d413      	bmi.n	8006826 <_printf_i+0x23a>
 80067fe:	68e0      	ldr	r0, [r4, #12]
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	4298      	cmp	r0, r3
 8006804:	bfb8      	it	lt
 8006806:	4618      	movlt	r0, r3
 8006808:	e7a4      	b.n	8006754 <_printf_i+0x168>
 800680a:	2301      	movs	r3, #1
 800680c:	4632      	mov	r2, r6
 800680e:	4649      	mov	r1, r9
 8006810:	4640      	mov	r0, r8
 8006812:	47d0      	blx	sl
 8006814:	3001      	adds	r0, #1
 8006816:	d09b      	beq.n	8006750 <_printf_i+0x164>
 8006818:	3501      	adds	r5, #1
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	9903      	ldr	r1, [sp, #12]
 800681e:	1a5b      	subs	r3, r3, r1
 8006820:	42ab      	cmp	r3, r5
 8006822:	dcf2      	bgt.n	800680a <_printf_i+0x21e>
 8006824:	e7eb      	b.n	80067fe <_printf_i+0x212>
 8006826:	2500      	movs	r5, #0
 8006828:	f104 0619 	add.w	r6, r4, #25
 800682c:	e7f5      	b.n	800681a <_printf_i+0x22e>
 800682e:	bf00      	nop
 8006830:	0800785f 	.word	0x0800785f
 8006834:	08007870 	.word	0x08007870

08006838 <_sbrk_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4d06      	ldr	r5, [pc, #24]	; (8006854 <_sbrk_r+0x1c>)
 800683c:	2300      	movs	r3, #0
 800683e:	4604      	mov	r4, r0
 8006840:	4608      	mov	r0, r1
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	f7fb fb42 	bl	8001ecc <_sbrk>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_sbrk_r+0x1a>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_sbrk_r+0x1a>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	20000840 	.word	0x20000840

08006858 <__swbuf_r>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	460e      	mov	r6, r1
 800685c:	4614      	mov	r4, r2
 800685e:	4605      	mov	r5, r0
 8006860:	b118      	cbz	r0, 800686a <__swbuf_r+0x12>
 8006862:	6983      	ldr	r3, [r0, #24]
 8006864:	b90b      	cbnz	r3, 800686a <__swbuf_r+0x12>
 8006866:	f000 f9d9 	bl	8006c1c <__sinit>
 800686a:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <__swbuf_r+0x98>)
 800686c:	429c      	cmp	r4, r3
 800686e:	d12b      	bne.n	80068c8 <__swbuf_r+0x70>
 8006870:	686c      	ldr	r4, [r5, #4]
 8006872:	69a3      	ldr	r3, [r4, #24]
 8006874:	60a3      	str	r3, [r4, #8]
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	071a      	lsls	r2, r3, #28
 800687a:	d52f      	bpl.n	80068dc <__swbuf_r+0x84>
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	b36b      	cbz	r3, 80068dc <__swbuf_r+0x84>
 8006880:	6923      	ldr	r3, [r4, #16]
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	1ac0      	subs	r0, r0, r3
 8006886:	6963      	ldr	r3, [r4, #20]
 8006888:	b2f6      	uxtb	r6, r6
 800688a:	4283      	cmp	r3, r0
 800688c:	4637      	mov	r7, r6
 800688e:	dc04      	bgt.n	800689a <__swbuf_r+0x42>
 8006890:	4621      	mov	r1, r4
 8006892:	4628      	mov	r0, r5
 8006894:	f000 f92e 	bl	8006af4 <_fflush_r>
 8006898:	bb30      	cbnz	r0, 80068e8 <__swbuf_r+0x90>
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	3b01      	subs	r3, #1
 800689e:	60a3      	str	r3, [r4, #8]
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	6022      	str	r2, [r4, #0]
 80068a6:	701e      	strb	r6, [r3, #0]
 80068a8:	6963      	ldr	r3, [r4, #20]
 80068aa:	3001      	adds	r0, #1
 80068ac:	4283      	cmp	r3, r0
 80068ae:	d004      	beq.n	80068ba <__swbuf_r+0x62>
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	07db      	lsls	r3, r3, #31
 80068b4:	d506      	bpl.n	80068c4 <__swbuf_r+0x6c>
 80068b6:	2e0a      	cmp	r6, #10
 80068b8:	d104      	bne.n	80068c4 <__swbuf_r+0x6c>
 80068ba:	4621      	mov	r1, r4
 80068bc:	4628      	mov	r0, r5
 80068be:	f000 f919 	bl	8006af4 <_fflush_r>
 80068c2:	b988      	cbnz	r0, 80068e8 <__swbuf_r+0x90>
 80068c4:	4638      	mov	r0, r7
 80068c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <__swbuf_r+0x9c>)
 80068ca:	429c      	cmp	r4, r3
 80068cc:	d101      	bne.n	80068d2 <__swbuf_r+0x7a>
 80068ce:	68ac      	ldr	r4, [r5, #8]
 80068d0:	e7cf      	b.n	8006872 <__swbuf_r+0x1a>
 80068d2:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <__swbuf_r+0xa0>)
 80068d4:	429c      	cmp	r4, r3
 80068d6:	bf08      	it	eq
 80068d8:	68ec      	ldreq	r4, [r5, #12]
 80068da:	e7ca      	b.n	8006872 <__swbuf_r+0x1a>
 80068dc:	4621      	mov	r1, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 f80c 	bl	80068fc <__swsetup_r>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d0cb      	beq.n	8006880 <__swbuf_r+0x28>
 80068e8:	f04f 37ff 	mov.w	r7, #4294967295
 80068ec:	e7ea      	b.n	80068c4 <__swbuf_r+0x6c>
 80068ee:	bf00      	nop
 80068f0:	080078a4 	.word	0x080078a4
 80068f4:	080078c4 	.word	0x080078c4
 80068f8:	08007884 	.word	0x08007884

080068fc <__swsetup_r>:
 80068fc:	4b32      	ldr	r3, [pc, #200]	; (80069c8 <__swsetup_r+0xcc>)
 80068fe:	b570      	push	{r4, r5, r6, lr}
 8006900:	681d      	ldr	r5, [r3, #0]
 8006902:	4606      	mov	r6, r0
 8006904:	460c      	mov	r4, r1
 8006906:	b125      	cbz	r5, 8006912 <__swsetup_r+0x16>
 8006908:	69ab      	ldr	r3, [r5, #24]
 800690a:	b913      	cbnz	r3, 8006912 <__swsetup_r+0x16>
 800690c:	4628      	mov	r0, r5
 800690e:	f000 f985 	bl	8006c1c <__sinit>
 8006912:	4b2e      	ldr	r3, [pc, #184]	; (80069cc <__swsetup_r+0xd0>)
 8006914:	429c      	cmp	r4, r3
 8006916:	d10f      	bne.n	8006938 <__swsetup_r+0x3c>
 8006918:	686c      	ldr	r4, [r5, #4]
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006920:	0719      	lsls	r1, r3, #28
 8006922:	d42c      	bmi.n	800697e <__swsetup_r+0x82>
 8006924:	06dd      	lsls	r5, r3, #27
 8006926:	d411      	bmi.n	800694c <__swsetup_r+0x50>
 8006928:	2309      	movs	r3, #9
 800692a:	6033      	str	r3, [r6, #0]
 800692c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
 8006936:	e03e      	b.n	80069b6 <__swsetup_r+0xba>
 8006938:	4b25      	ldr	r3, [pc, #148]	; (80069d0 <__swsetup_r+0xd4>)
 800693a:	429c      	cmp	r4, r3
 800693c:	d101      	bne.n	8006942 <__swsetup_r+0x46>
 800693e:	68ac      	ldr	r4, [r5, #8]
 8006940:	e7eb      	b.n	800691a <__swsetup_r+0x1e>
 8006942:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <__swsetup_r+0xd8>)
 8006944:	429c      	cmp	r4, r3
 8006946:	bf08      	it	eq
 8006948:	68ec      	ldreq	r4, [r5, #12]
 800694a:	e7e6      	b.n	800691a <__swsetup_r+0x1e>
 800694c:	0758      	lsls	r0, r3, #29
 800694e:	d512      	bpl.n	8006976 <__swsetup_r+0x7a>
 8006950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006952:	b141      	cbz	r1, 8006966 <__swsetup_r+0x6a>
 8006954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006958:	4299      	cmp	r1, r3
 800695a:	d002      	beq.n	8006962 <__swsetup_r+0x66>
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff fa41 	bl	8005de4 <_free_r>
 8006962:	2300      	movs	r3, #0
 8006964:	6363      	str	r3, [r4, #52]	; 0x34
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800696c:	81a3      	strh	r3, [r4, #12]
 800696e:	2300      	movs	r3, #0
 8006970:	6063      	str	r3, [r4, #4]
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f043 0308 	orr.w	r3, r3, #8
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	b94b      	cbnz	r3, 8006996 <__swsetup_r+0x9a>
 8006982:	89a3      	ldrh	r3, [r4, #12]
 8006984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698c:	d003      	beq.n	8006996 <__swsetup_r+0x9a>
 800698e:	4621      	mov	r1, r4
 8006990:	4630      	mov	r0, r6
 8006992:	f000 fa09 	bl	8006da8 <__smakebuf_r>
 8006996:	89a0      	ldrh	r0, [r4, #12]
 8006998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800699c:	f010 0301 	ands.w	r3, r0, #1
 80069a0:	d00a      	beq.n	80069b8 <__swsetup_r+0xbc>
 80069a2:	2300      	movs	r3, #0
 80069a4:	60a3      	str	r3, [r4, #8]
 80069a6:	6963      	ldr	r3, [r4, #20]
 80069a8:	425b      	negs	r3, r3
 80069aa:	61a3      	str	r3, [r4, #24]
 80069ac:	6923      	ldr	r3, [r4, #16]
 80069ae:	b943      	cbnz	r3, 80069c2 <__swsetup_r+0xc6>
 80069b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069b4:	d1ba      	bne.n	800692c <__swsetup_r+0x30>
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	0781      	lsls	r1, r0, #30
 80069ba:	bf58      	it	pl
 80069bc:	6963      	ldrpl	r3, [r4, #20]
 80069be:	60a3      	str	r3, [r4, #8]
 80069c0:	e7f4      	b.n	80069ac <__swsetup_r+0xb0>
 80069c2:	2000      	movs	r0, #0
 80069c4:	e7f7      	b.n	80069b6 <__swsetup_r+0xba>
 80069c6:	bf00      	nop
 80069c8:	20000034 	.word	0x20000034
 80069cc:	080078a4 	.word	0x080078a4
 80069d0:	080078c4 	.word	0x080078c4
 80069d4:	08007884 	.word	0x08007884

080069d8 <abort>:
 80069d8:	b508      	push	{r3, lr}
 80069da:	2006      	movs	r0, #6
 80069dc:	f000 faa2 	bl	8006f24 <raise>
 80069e0:	2001      	movs	r0, #1
 80069e2:	f7fb f9fb 	bl	8001ddc <_exit>
	...

080069e8 <__sflush_r>:
 80069e8:	898a      	ldrh	r2, [r1, #12]
 80069ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ee:	4605      	mov	r5, r0
 80069f0:	0710      	lsls	r0, r2, #28
 80069f2:	460c      	mov	r4, r1
 80069f4:	d458      	bmi.n	8006aa8 <__sflush_r+0xc0>
 80069f6:	684b      	ldr	r3, [r1, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	dc05      	bgt.n	8006a08 <__sflush_r+0x20>
 80069fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	dc02      	bgt.n	8006a08 <__sflush_r+0x20>
 8006a02:	2000      	movs	r0, #0
 8006a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	d0f9      	beq.n	8006a02 <__sflush_r+0x1a>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a14:	682f      	ldr	r7, [r5, #0]
 8006a16:	602b      	str	r3, [r5, #0]
 8006a18:	d032      	beq.n	8006a80 <__sflush_r+0x98>
 8006a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	075a      	lsls	r2, r3, #29
 8006a20:	d505      	bpl.n	8006a2e <__sflush_r+0x46>
 8006a22:	6863      	ldr	r3, [r4, #4]
 8006a24:	1ac0      	subs	r0, r0, r3
 8006a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a28:	b10b      	cbz	r3, 8006a2e <__sflush_r+0x46>
 8006a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a2c:	1ac0      	subs	r0, r0, r3
 8006a2e:	2300      	movs	r3, #0
 8006a30:	4602      	mov	r2, r0
 8006a32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a34:	6a21      	ldr	r1, [r4, #32]
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b0      	blx	r6
 8006a3a:	1c43      	adds	r3, r0, #1
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	d106      	bne.n	8006a4e <__sflush_r+0x66>
 8006a40:	6829      	ldr	r1, [r5, #0]
 8006a42:	291d      	cmp	r1, #29
 8006a44:	d82c      	bhi.n	8006aa0 <__sflush_r+0xb8>
 8006a46:	4a2a      	ldr	r2, [pc, #168]	; (8006af0 <__sflush_r+0x108>)
 8006a48:	40ca      	lsrs	r2, r1
 8006a4a:	07d6      	lsls	r6, r2, #31
 8006a4c:	d528      	bpl.n	8006aa0 <__sflush_r+0xb8>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	6062      	str	r2, [r4, #4]
 8006a52:	04d9      	lsls	r1, r3, #19
 8006a54:	6922      	ldr	r2, [r4, #16]
 8006a56:	6022      	str	r2, [r4, #0]
 8006a58:	d504      	bpl.n	8006a64 <__sflush_r+0x7c>
 8006a5a:	1c42      	adds	r2, r0, #1
 8006a5c:	d101      	bne.n	8006a62 <__sflush_r+0x7a>
 8006a5e:	682b      	ldr	r3, [r5, #0]
 8006a60:	b903      	cbnz	r3, 8006a64 <__sflush_r+0x7c>
 8006a62:	6560      	str	r0, [r4, #84]	; 0x54
 8006a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a66:	602f      	str	r7, [r5, #0]
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	d0ca      	beq.n	8006a02 <__sflush_r+0x1a>
 8006a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a70:	4299      	cmp	r1, r3
 8006a72:	d002      	beq.n	8006a7a <__sflush_r+0x92>
 8006a74:	4628      	mov	r0, r5
 8006a76:	f7ff f9b5 	bl	8005de4 <_free_r>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a7e:	e7c1      	b.n	8006a04 <__sflush_r+0x1c>
 8006a80:	6a21      	ldr	r1, [r4, #32]
 8006a82:	2301      	movs	r3, #1
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b0      	blx	r6
 8006a88:	1c41      	adds	r1, r0, #1
 8006a8a:	d1c7      	bne.n	8006a1c <__sflush_r+0x34>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0c4      	beq.n	8006a1c <__sflush_r+0x34>
 8006a92:	2b1d      	cmp	r3, #29
 8006a94:	d001      	beq.n	8006a9a <__sflush_r+0xb2>
 8006a96:	2b16      	cmp	r3, #22
 8006a98:	d101      	bne.n	8006a9e <__sflush_r+0xb6>
 8006a9a:	602f      	str	r7, [r5, #0]
 8006a9c:	e7b1      	b.n	8006a02 <__sflush_r+0x1a>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa4:	81a3      	strh	r3, [r4, #12]
 8006aa6:	e7ad      	b.n	8006a04 <__sflush_r+0x1c>
 8006aa8:	690f      	ldr	r7, [r1, #16]
 8006aaa:	2f00      	cmp	r7, #0
 8006aac:	d0a9      	beq.n	8006a02 <__sflush_r+0x1a>
 8006aae:	0793      	lsls	r3, r2, #30
 8006ab0:	680e      	ldr	r6, [r1, #0]
 8006ab2:	bf08      	it	eq
 8006ab4:	694b      	ldreq	r3, [r1, #20]
 8006ab6:	600f      	str	r7, [r1, #0]
 8006ab8:	bf18      	it	ne
 8006aba:	2300      	movne	r3, #0
 8006abc:	eba6 0807 	sub.w	r8, r6, r7
 8006ac0:	608b      	str	r3, [r1, #8]
 8006ac2:	f1b8 0f00 	cmp.w	r8, #0
 8006ac6:	dd9c      	ble.n	8006a02 <__sflush_r+0x1a>
 8006ac8:	6a21      	ldr	r1, [r4, #32]
 8006aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006acc:	4643      	mov	r3, r8
 8006ace:	463a      	mov	r2, r7
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b0      	blx	r6
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	dc06      	bgt.n	8006ae6 <__sflush_r+0xfe>
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ade:	81a3      	strh	r3, [r4, #12]
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	e78e      	b.n	8006a04 <__sflush_r+0x1c>
 8006ae6:	4407      	add	r7, r0
 8006ae8:	eba8 0800 	sub.w	r8, r8, r0
 8006aec:	e7e9      	b.n	8006ac2 <__sflush_r+0xda>
 8006aee:	bf00      	nop
 8006af0:	20400001 	.word	0x20400001

08006af4 <_fflush_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	690b      	ldr	r3, [r1, #16]
 8006af8:	4605      	mov	r5, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	b913      	cbnz	r3, 8006b04 <_fflush_r+0x10>
 8006afe:	2500      	movs	r5, #0
 8006b00:	4628      	mov	r0, r5
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	b118      	cbz	r0, 8006b0e <_fflush_r+0x1a>
 8006b06:	6983      	ldr	r3, [r0, #24]
 8006b08:	b90b      	cbnz	r3, 8006b0e <_fflush_r+0x1a>
 8006b0a:	f000 f887 	bl	8006c1c <__sinit>
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <_fflush_r+0x6c>)
 8006b10:	429c      	cmp	r4, r3
 8006b12:	d11b      	bne.n	8006b4c <_fflush_r+0x58>
 8006b14:	686c      	ldr	r4, [r5, #4]
 8006b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0ef      	beq.n	8006afe <_fflush_r+0xa>
 8006b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b20:	07d0      	lsls	r0, r2, #31
 8006b22:	d404      	bmi.n	8006b2e <_fflush_r+0x3a>
 8006b24:	0599      	lsls	r1, r3, #22
 8006b26:	d402      	bmi.n	8006b2e <_fflush_r+0x3a>
 8006b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b2a:	f000 f915 	bl	8006d58 <__retarget_lock_acquire_recursive>
 8006b2e:	4628      	mov	r0, r5
 8006b30:	4621      	mov	r1, r4
 8006b32:	f7ff ff59 	bl	80069e8 <__sflush_r>
 8006b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b38:	07da      	lsls	r2, r3, #31
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	d4e0      	bmi.n	8006b00 <_fflush_r+0xc>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	059b      	lsls	r3, r3, #22
 8006b42:	d4dd      	bmi.n	8006b00 <_fflush_r+0xc>
 8006b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b46:	f000 f908 	bl	8006d5a <__retarget_lock_release_recursive>
 8006b4a:	e7d9      	b.n	8006b00 <_fflush_r+0xc>
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <_fflush_r+0x70>)
 8006b4e:	429c      	cmp	r4, r3
 8006b50:	d101      	bne.n	8006b56 <_fflush_r+0x62>
 8006b52:	68ac      	ldr	r4, [r5, #8]
 8006b54:	e7df      	b.n	8006b16 <_fflush_r+0x22>
 8006b56:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <_fflush_r+0x74>)
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	bf08      	it	eq
 8006b5c:	68ec      	ldreq	r4, [r5, #12]
 8006b5e:	e7da      	b.n	8006b16 <_fflush_r+0x22>
 8006b60:	080078a4 	.word	0x080078a4
 8006b64:	080078c4 	.word	0x080078c4
 8006b68:	08007884 	.word	0x08007884

08006b6c <std>:
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	4604      	mov	r4, r0
 8006b72:	e9c0 3300 	strd	r3, r3, [r0]
 8006b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b7a:	6083      	str	r3, [r0, #8]
 8006b7c:	8181      	strh	r1, [r0, #12]
 8006b7e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b80:	81c2      	strh	r2, [r0, #14]
 8006b82:	6183      	str	r3, [r0, #24]
 8006b84:	4619      	mov	r1, r3
 8006b86:	2208      	movs	r2, #8
 8006b88:	305c      	adds	r0, #92	; 0x5c
 8006b8a:	f7ff f833 	bl	8005bf4 <memset>
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <std+0x38>)
 8006b90:	6263      	str	r3, [r4, #36]	; 0x24
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <std+0x3c>)
 8006b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b96:	4b05      	ldr	r3, [pc, #20]	; (8006bac <std+0x40>)
 8006b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b9a:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <std+0x44>)
 8006b9c:	6224      	str	r4, [r4, #32]
 8006b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8006ba0:	bd10      	pop	{r4, pc}
 8006ba2:	bf00      	nop
 8006ba4:	08006f5d 	.word	0x08006f5d
 8006ba8:	08006f7f 	.word	0x08006f7f
 8006bac:	08006fb7 	.word	0x08006fb7
 8006bb0:	08006fdb 	.word	0x08006fdb

08006bb4 <_cleanup_r>:
 8006bb4:	4901      	ldr	r1, [pc, #4]	; (8006bbc <_cleanup_r+0x8>)
 8006bb6:	f000 b8af 	b.w	8006d18 <_fwalk_reent>
 8006bba:	bf00      	nop
 8006bbc:	08006af5 	.word	0x08006af5

08006bc0 <__sfmoreglue>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	2268      	movs	r2, #104	; 0x68
 8006bc4:	1e4d      	subs	r5, r1, #1
 8006bc6:	4355      	muls	r5, r2
 8006bc8:	460e      	mov	r6, r1
 8006bca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bce:	f7ff f975 	bl	8005ebc <_malloc_r>
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	b140      	cbz	r0, 8006be8 <__sfmoreglue+0x28>
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	e9c0 1600 	strd	r1, r6, [r0]
 8006bdc:	300c      	adds	r0, #12
 8006bde:	60a0      	str	r0, [r4, #8]
 8006be0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006be4:	f7ff f806 	bl	8005bf4 <memset>
 8006be8:	4620      	mov	r0, r4
 8006bea:	bd70      	pop	{r4, r5, r6, pc}

08006bec <__sfp_lock_acquire>:
 8006bec:	4801      	ldr	r0, [pc, #4]	; (8006bf4 <__sfp_lock_acquire+0x8>)
 8006bee:	f000 b8b3 	b.w	8006d58 <__retarget_lock_acquire_recursive>
 8006bf2:	bf00      	nop
 8006bf4:	20000845 	.word	0x20000845

08006bf8 <__sfp_lock_release>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	; (8006c00 <__sfp_lock_release+0x8>)
 8006bfa:	f000 b8ae 	b.w	8006d5a <__retarget_lock_release_recursive>
 8006bfe:	bf00      	nop
 8006c00:	20000845 	.word	0x20000845

08006c04 <__sinit_lock_acquire>:
 8006c04:	4801      	ldr	r0, [pc, #4]	; (8006c0c <__sinit_lock_acquire+0x8>)
 8006c06:	f000 b8a7 	b.w	8006d58 <__retarget_lock_acquire_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	20000846 	.word	0x20000846

08006c10 <__sinit_lock_release>:
 8006c10:	4801      	ldr	r0, [pc, #4]	; (8006c18 <__sinit_lock_release+0x8>)
 8006c12:	f000 b8a2 	b.w	8006d5a <__retarget_lock_release_recursive>
 8006c16:	bf00      	nop
 8006c18:	20000846 	.word	0x20000846

08006c1c <__sinit>:
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	4604      	mov	r4, r0
 8006c20:	f7ff fff0 	bl	8006c04 <__sinit_lock_acquire>
 8006c24:	69a3      	ldr	r3, [r4, #24]
 8006c26:	b11b      	cbz	r3, 8006c30 <__sinit+0x14>
 8006c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2c:	f7ff bff0 	b.w	8006c10 <__sinit_lock_release>
 8006c30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c34:	6523      	str	r3, [r4, #80]	; 0x50
 8006c36:	4b13      	ldr	r3, [pc, #76]	; (8006c84 <__sinit+0x68>)
 8006c38:	4a13      	ldr	r2, [pc, #76]	; (8006c88 <__sinit+0x6c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	bf04      	itt	eq
 8006c42:	2301      	moveq	r3, #1
 8006c44:	61a3      	streq	r3, [r4, #24]
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f820 	bl	8006c8c <__sfp>
 8006c4c:	6060      	str	r0, [r4, #4]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 f81c 	bl	8006c8c <__sfp>
 8006c54:	60a0      	str	r0, [r4, #8]
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 f818 	bl	8006c8c <__sfp>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	60e0      	str	r0, [r4, #12]
 8006c60:	2104      	movs	r1, #4
 8006c62:	6860      	ldr	r0, [r4, #4]
 8006c64:	f7ff ff82 	bl	8006b6c <std>
 8006c68:	68a0      	ldr	r0, [r4, #8]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	2109      	movs	r1, #9
 8006c6e:	f7ff ff7d 	bl	8006b6c <std>
 8006c72:	68e0      	ldr	r0, [r4, #12]
 8006c74:	2202      	movs	r2, #2
 8006c76:	2112      	movs	r1, #18
 8006c78:	f7ff ff78 	bl	8006b6c <std>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	61a3      	str	r3, [r4, #24]
 8006c80:	e7d2      	b.n	8006c28 <__sinit+0xc>
 8006c82:	bf00      	nop
 8006c84:	0800779c 	.word	0x0800779c
 8006c88:	08006bb5 	.word	0x08006bb5

08006c8c <__sfp>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	4607      	mov	r7, r0
 8006c90:	f7ff ffac 	bl	8006bec <__sfp_lock_acquire>
 8006c94:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <__sfp+0x84>)
 8006c96:	681e      	ldr	r6, [r3, #0]
 8006c98:	69b3      	ldr	r3, [r6, #24]
 8006c9a:	b913      	cbnz	r3, 8006ca2 <__sfp+0x16>
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f7ff ffbd 	bl	8006c1c <__sinit>
 8006ca2:	3648      	adds	r6, #72	; 0x48
 8006ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	d503      	bpl.n	8006cb4 <__sfp+0x28>
 8006cac:	6833      	ldr	r3, [r6, #0]
 8006cae:	b30b      	cbz	r3, 8006cf4 <__sfp+0x68>
 8006cb0:	6836      	ldr	r6, [r6, #0]
 8006cb2:	e7f7      	b.n	8006ca4 <__sfp+0x18>
 8006cb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cb8:	b9d5      	cbnz	r5, 8006cf0 <__sfp+0x64>
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <__sfp+0x88>)
 8006cbc:	60e3      	str	r3, [r4, #12]
 8006cbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cc2:	6665      	str	r5, [r4, #100]	; 0x64
 8006cc4:	f000 f847 	bl	8006d56 <__retarget_lock_init_recursive>
 8006cc8:	f7ff ff96 	bl	8006bf8 <__sfp_lock_release>
 8006ccc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cd4:	6025      	str	r5, [r4, #0]
 8006cd6:	61a5      	str	r5, [r4, #24]
 8006cd8:	2208      	movs	r2, #8
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ce0:	f7fe ff88 	bl	8005bf4 <memset>
 8006ce4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ce8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cec:	4620      	mov	r0, r4
 8006cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cf0:	3468      	adds	r4, #104	; 0x68
 8006cf2:	e7d9      	b.n	8006ca8 <__sfp+0x1c>
 8006cf4:	2104      	movs	r1, #4
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	f7ff ff62 	bl	8006bc0 <__sfmoreglue>
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	6030      	str	r0, [r6, #0]
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d1d5      	bne.n	8006cb0 <__sfp+0x24>
 8006d04:	f7ff ff78 	bl	8006bf8 <__sfp_lock_release>
 8006d08:	230c      	movs	r3, #12
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	e7ee      	b.n	8006cec <__sfp+0x60>
 8006d0e:	bf00      	nop
 8006d10:	0800779c 	.word	0x0800779c
 8006d14:	ffff0001 	.word	0xffff0001

08006d18 <_fwalk_reent>:
 8006d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	4688      	mov	r8, r1
 8006d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d24:	2700      	movs	r7, #0
 8006d26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d2a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d2e:	d505      	bpl.n	8006d3c <_fwalk_reent+0x24>
 8006d30:	6824      	ldr	r4, [r4, #0]
 8006d32:	2c00      	cmp	r4, #0
 8006d34:	d1f7      	bne.n	8006d26 <_fwalk_reent+0xe>
 8006d36:	4638      	mov	r0, r7
 8006d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d3c:	89ab      	ldrh	r3, [r5, #12]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d907      	bls.n	8006d52 <_fwalk_reent+0x3a>
 8006d42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d46:	3301      	adds	r3, #1
 8006d48:	d003      	beq.n	8006d52 <_fwalk_reent+0x3a>
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	47c0      	blx	r8
 8006d50:	4307      	orrs	r7, r0
 8006d52:	3568      	adds	r5, #104	; 0x68
 8006d54:	e7e9      	b.n	8006d2a <_fwalk_reent+0x12>

08006d56 <__retarget_lock_init_recursive>:
 8006d56:	4770      	bx	lr

08006d58 <__retarget_lock_acquire_recursive>:
 8006d58:	4770      	bx	lr

08006d5a <__retarget_lock_release_recursive>:
 8006d5a:	4770      	bx	lr

08006d5c <__swhatbuf_r>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	460e      	mov	r6, r1
 8006d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d64:	2900      	cmp	r1, #0
 8006d66:	b096      	sub	sp, #88	; 0x58
 8006d68:	4614      	mov	r4, r2
 8006d6a:	461d      	mov	r5, r3
 8006d6c:	da08      	bge.n	8006d80 <__swhatbuf_r+0x24>
 8006d6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	602a      	str	r2, [r5, #0]
 8006d76:	061a      	lsls	r2, r3, #24
 8006d78:	d410      	bmi.n	8006d9c <__swhatbuf_r+0x40>
 8006d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d7e:	e00e      	b.n	8006d9e <__swhatbuf_r+0x42>
 8006d80:	466a      	mov	r2, sp
 8006d82:	f000 f951 	bl	8007028 <_fstat_r>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	dbf1      	blt.n	8006d6e <__swhatbuf_r+0x12>
 8006d8a:	9a01      	ldr	r2, [sp, #4]
 8006d8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d94:	425a      	negs	r2, r3
 8006d96:	415a      	adcs	r2, r3
 8006d98:	602a      	str	r2, [r5, #0]
 8006d9a:	e7ee      	b.n	8006d7a <__swhatbuf_r+0x1e>
 8006d9c:	2340      	movs	r3, #64	; 0x40
 8006d9e:	2000      	movs	r0, #0
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	b016      	add	sp, #88	; 0x58
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006da8 <__smakebuf_r>:
 8006da8:	898b      	ldrh	r3, [r1, #12]
 8006daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dac:	079d      	lsls	r5, r3, #30
 8006dae:	4606      	mov	r6, r0
 8006db0:	460c      	mov	r4, r1
 8006db2:	d507      	bpl.n	8006dc4 <__smakebuf_r+0x1c>
 8006db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	6163      	str	r3, [r4, #20]
 8006dc0:	b002      	add	sp, #8
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
 8006dc4:	ab01      	add	r3, sp, #4
 8006dc6:	466a      	mov	r2, sp
 8006dc8:	f7ff ffc8 	bl	8006d5c <__swhatbuf_r>
 8006dcc:	9900      	ldr	r1, [sp, #0]
 8006dce:	4605      	mov	r5, r0
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7ff f873 	bl	8005ebc <_malloc_r>
 8006dd6:	b948      	cbnz	r0, 8006dec <__smakebuf_r+0x44>
 8006dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ddc:	059a      	lsls	r2, r3, #22
 8006dde:	d4ef      	bmi.n	8006dc0 <__smakebuf_r+0x18>
 8006de0:	f023 0303 	bic.w	r3, r3, #3
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	81a3      	strh	r3, [r4, #12]
 8006dea:	e7e3      	b.n	8006db4 <__smakebuf_r+0xc>
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <__smakebuf_r+0x7c>)
 8006dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	6020      	str	r0, [r4, #0]
 8006df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df8:	81a3      	strh	r3, [r4, #12]
 8006dfa:	9b00      	ldr	r3, [sp, #0]
 8006dfc:	6163      	str	r3, [r4, #20]
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	6120      	str	r0, [r4, #16]
 8006e02:	b15b      	cbz	r3, 8006e1c <__smakebuf_r+0x74>
 8006e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f000 f91f 	bl	800704c <_isatty_r>
 8006e0e:	b128      	cbz	r0, 8006e1c <__smakebuf_r+0x74>
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	f023 0303 	bic.w	r3, r3, #3
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	81a3      	strh	r3, [r4, #12]
 8006e1c:	89a0      	ldrh	r0, [r4, #12]
 8006e1e:	4305      	orrs	r5, r0
 8006e20:	81a5      	strh	r5, [r4, #12]
 8006e22:	e7cd      	b.n	8006dc0 <__smakebuf_r+0x18>
 8006e24:	08006bb5 	.word	0x08006bb5

08006e28 <memmove>:
 8006e28:	4288      	cmp	r0, r1
 8006e2a:	b510      	push	{r4, lr}
 8006e2c:	eb01 0402 	add.w	r4, r1, r2
 8006e30:	d902      	bls.n	8006e38 <memmove+0x10>
 8006e32:	4284      	cmp	r4, r0
 8006e34:	4623      	mov	r3, r4
 8006e36:	d807      	bhi.n	8006e48 <memmove+0x20>
 8006e38:	1e43      	subs	r3, r0, #1
 8006e3a:	42a1      	cmp	r1, r4
 8006e3c:	d008      	beq.n	8006e50 <memmove+0x28>
 8006e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e46:	e7f8      	b.n	8006e3a <memmove+0x12>
 8006e48:	4402      	add	r2, r0
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	428a      	cmp	r2, r1
 8006e4e:	d100      	bne.n	8006e52 <memmove+0x2a>
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e5a:	e7f7      	b.n	8006e4c <memmove+0x24>

08006e5c <__malloc_lock>:
 8006e5c:	4801      	ldr	r0, [pc, #4]	; (8006e64 <__malloc_lock+0x8>)
 8006e5e:	f7ff bf7b 	b.w	8006d58 <__retarget_lock_acquire_recursive>
 8006e62:	bf00      	nop
 8006e64:	20000844 	.word	0x20000844

08006e68 <__malloc_unlock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <__malloc_unlock+0x8>)
 8006e6a:	f7ff bf76 	b.w	8006d5a <__retarget_lock_release_recursive>
 8006e6e:	bf00      	nop
 8006e70:	20000844 	.word	0x20000844

08006e74 <_realloc_r>:
 8006e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	4680      	mov	r8, r0
 8006e7a:	4614      	mov	r4, r2
 8006e7c:	460e      	mov	r6, r1
 8006e7e:	b921      	cbnz	r1, 8006e8a <_realloc_r+0x16>
 8006e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	4611      	mov	r1, r2
 8006e86:	f7ff b819 	b.w	8005ebc <_malloc_r>
 8006e8a:	b92a      	cbnz	r2, 8006e98 <_realloc_r+0x24>
 8006e8c:	f7fe ffaa 	bl	8005de4 <_free_r>
 8006e90:	4625      	mov	r5, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e98:	f000 f8fa 	bl	8007090 <_malloc_usable_size_r>
 8006e9c:	4284      	cmp	r4, r0
 8006e9e:	4607      	mov	r7, r0
 8006ea0:	d802      	bhi.n	8006ea8 <_realloc_r+0x34>
 8006ea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ea6:	d812      	bhi.n	8006ece <_realloc_r+0x5a>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4640      	mov	r0, r8
 8006eac:	f7ff f806 	bl	8005ebc <_malloc_r>
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d0ed      	beq.n	8006e92 <_realloc_r+0x1e>
 8006eb6:	42bc      	cmp	r4, r7
 8006eb8:	4622      	mov	r2, r4
 8006eba:	4631      	mov	r1, r6
 8006ebc:	bf28      	it	cs
 8006ebe:	463a      	movcs	r2, r7
 8006ec0:	f7fe fe8a 	bl	8005bd8 <memcpy>
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	f7fe ff8c 	bl	8005de4 <_free_r>
 8006ecc:	e7e1      	b.n	8006e92 <_realloc_r+0x1e>
 8006ece:	4635      	mov	r5, r6
 8006ed0:	e7df      	b.n	8006e92 <_realloc_r+0x1e>

08006ed2 <_raise_r>:
 8006ed2:	291f      	cmp	r1, #31
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	460d      	mov	r5, r1
 8006eda:	d904      	bls.n	8006ee6 <_raise_r+0x14>
 8006edc:	2316      	movs	r3, #22
 8006ede:	6003      	str	r3, [r0, #0]
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	bd38      	pop	{r3, r4, r5, pc}
 8006ee6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ee8:	b112      	cbz	r2, 8006ef0 <_raise_r+0x1e>
 8006eea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eee:	b94b      	cbnz	r3, 8006f04 <_raise_r+0x32>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 f831 	bl	8006f58 <_getpid_r>
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	4601      	mov	r1, r0
 8006efa:	4620      	mov	r0, r4
 8006efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f00:	f000 b818 	b.w	8006f34 <_kill_r>
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d00a      	beq.n	8006f1e <_raise_r+0x4c>
 8006f08:	1c59      	adds	r1, r3, #1
 8006f0a:	d103      	bne.n	8006f14 <_raise_r+0x42>
 8006f0c:	2316      	movs	r3, #22
 8006f0e:	6003      	str	r3, [r0, #0]
 8006f10:	2001      	movs	r0, #1
 8006f12:	e7e7      	b.n	8006ee4 <_raise_r+0x12>
 8006f14:	2400      	movs	r4, #0
 8006f16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	4798      	blx	r3
 8006f1e:	2000      	movs	r0, #0
 8006f20:	e7e0      	b.n	8006ee4 <_raise_r+0x12>
	...

08006f24 <raise>:
 8006f24:	4b02      	ldr	r3, [pc, #8]	; (8006f30 <raise+0xc>)
 8006f26:	4601      	mov	r1, r0
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	f7ff bfd2 	b.w	8006ed2 <_raise_r>
 8006f2e:	bf00      	nop
 8006f30:	20000034 	.word	0x20000034

08006f34 <_kill_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4d07      	ldr	r5, [pc, #28]	; (8006f54 <_kill_r+0x20>)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	4611      	mov	r1, r2
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	f7fa ff3b 	bl	8001dbc <_kill>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	d102      	bne.n	8006f50 <_kill_r+0x1c>
 8006f4a:	682b      	ldr	r3, [r5, #0]
 8006f4c:	b103      	cbz	r3, 8006f50 <_kill_r+0x1c>
 8006f4e:	6023      	str	r3, [r4, #0]
 8006f50:	bd38      	pop	{r3, r4, r5, pc}
 8006f52:	bf00      	nop
 8006f54:	20000840 	.word	0x20000840

08006f58 <_getpid_r>:
 8006f58:	f7fa bf28 	b.w	8001dac <_getpid>

08006f5c <__sread>:
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	460c      	mov	r4, r1
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	f000 f89c 	bl	80070a0 <_read_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	bfab      	itete	ge
 8006f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f70:	181b      	addge	r3, r3, r0
 8006f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f76:	bfac      	ite	ge
 8006f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f7a:	81a3      	strhlt	r3, [r4, #12]
 8006f7c:	bd10      	pop	{r4, pc}

08006f7e <__swrite>:
 8006f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f82:	461f      	mov	r7, r3
 8006f84:	898b      	ldrh	r3, [r1, #12]
 8006f86:	05db      	lsls	r3, r3, #23
 8006f88:	4605      	mov	r5, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	d505      	bpl.n	8006f9c <__swrite+0x1e>
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	2302      	movs	r3, #2
 8006f96:	2200      	movs	r2, #0
 8006f98:	f000 f868 	bl	800706c <_lseek_r>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	4628      	mov	r0, r5
 8006fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb2:	f000 b817 	b.w	8006fe4 <_write_r>

08006fb6 <__sseek>:
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	460c      	mov	r4, r1
 8006fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbe:	f000 f855 	bl	800706c <_lseek_r>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	bf15      	itete	ne
 8006fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fd2:	81a3      	strheq	r3, [r4, #12]
 8006fd4:	bf18      	it	ne
 8006fd6:	81a3      	strhne	r3, [r4, #12]
 8006fd8:	bd10      	pop	{r4, pc}

08006fda <__sclose>:
 8006fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fde:	f000 b813 	b.w	8007008 <_close_r>
	...

08006fe4 <_write_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	; (8007004 <_write_r+0x20>)
 8006fe8:	4604      	mov	r4, r0
 8006fea:	4608      	mov	r0, r1
 8006fec:	4611      	mov	r1, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	602a      	str	r2, [r5, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f7fa ff19 	bl	8001e2a <_write>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_write_r+0x1e>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_write_r+0x1e>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	20000840 	.word	0x20000840

08007008 <_close_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d06      	ldr	r5, [pc, #24]	; (8007024 <_close_r+0x1c>)
 800700c:	2300      	movs	r3, #0
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	f7fa ff25 	bl	8001e62 <_close>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_close_r+0x1a>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_close_r+0x1a>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	20000840 	.word	0x20000840

08007028 <_fstat_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d07      	ldr	r5, [pc, #28]	; (8007048 <_fstat_r+0x20>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	602b      	str	r3, [r5, #0]
 8007036:	f7fa ff20 	bl	8001e7a <_fstat>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	d102      	bne.n	8007044 <_fstat_r+0x1c>
 800703e:	682b      	ldr	r3, [r5, #0]
 8007040:	b103      	cbz	r3, 8007044 <_fstat_r+0x1c>
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	bd38      	pop	{r3, r4, r5, pc}
 8007046:	bf00      	nop
 8007048:	20000840 	.word	0x20000840

0800704c <_isatty_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4d06      	ldr	r5, [pc, #24]	; (8007068 <_isatty_r+0x1c>)
 8007050:	2300      	movs	r3, #0
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	f7fa ff1f 	bl	8001e9a <_isatty>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_isatty_r+0x1a>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_isatty_r+0x1a>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20000840 	.word	0x20000840

0800706c <_lseek_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d07      	ldr	r5, [pc, #28]	; (800708c <_lseek_r+0x20>)
 8007070:	4604      	mov	r4, r0
 8007072:	4608      	mov	r0, r1
 8007074:	4611      	mov	r1, r2
 8007076:	2200      	movs	r2, #0
 8007078:	602a      	str	r2, [r5, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	f7fa ff18 	bl	8001eb0 <_lseek>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_lseek_r+0x1e>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_lseek_r+0x1e>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20000840 	.word	0x20000840

08007090 <_malloc_usable_size_r>:
 8007090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007094:	1f18      	subs	r0, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfbc      	itt	lt
 800709a:	580b      	ldrlt	r3, [r1, r0]
 800709c:	18c0      	addlt	r0, r0, r3
 800709e:	4770      	bx	lr

080070a0 <_read_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4d07      	ldr	r5, [pc, #28]	; (80070c0 <_read_r+0x20>)
 80070a4:	4604      	mov	r4, r0
 80070a6:	4608      	mov	r0, r1
 80070a8:	4611      	mov	r1, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7fa fe9e 	bl	8001df0 <_read>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_read_r+0x1e>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_read_r+0x1e>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	20000840 	.word	0x20000840

080070c4 <_gettimeofday>:
 80070c4:	4b02      	ldr	r3, [pc, #8]	; (80070d0 <_gettimeofday+0xc>)
 80070c6:	2258      	movs	r2, #88	; 0x58
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	f04f 30ff 	mov.w	r0, #4294967295
 80070ce:	4770      	bx	lr
 80070d0:	20000840 	.word	0x20000840

080070d4 <_init>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr

080070e0 <_fini>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	bf00      	nop
 80070e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e6:	bc08      	pop	{r3}
 80070e8:	469e      	mov	lr, r3
 80070ea:	4770      	bx	lr
