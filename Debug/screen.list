
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  08008344  08008344  00018344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bec  08008bec  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08008bec  08008bec  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bec  08008bec  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bf0  08008bf0  00018bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08008bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          00000868  200000c8  200000c8  000200c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000930  20000930  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b1a  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bcc  00000000  00000000  00036c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  0003a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  0003baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed4a  00000000  00000000  0003cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001837c  00000000  00000000  0005b9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad143  00000000  00000000  00073d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00120e69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005864  00000000  00000000  00120ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800832c 	.word	0x0800832c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	0800832c 	.word	0x0800832c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStickChange>:

		*outputX = x;
		*outputY = y;
}

void ReadAnalogStickChange(ADC_HandleTypeDef* adc, i32* outputX, i32* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	//LCD_PCD8544_clear_ram(&gLcdScreen);
	HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f003 f8d7 	bl	8003440 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f003 f989 	bl	80035ac <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f003 fa54 	bl	8003748 <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002a6:	801a      	strh	r2, [r3, #0]
	uint16_t y = AD_RES;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

	// Start ADC Conversion
	HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f003 f8c6 	bl	8003440 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f003 f978 	bl	80035ac <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f003 fa43 	bl	8003748 <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002c8:	801a      	strh	r2, [r3, #0]
	uint16_t x = AD_RES;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
	x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]
	y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	613b      	str	r3, [r7, #16]
	*outputX = (x - (twelveBitMax/2));
 80002e6:	8aba      	ldrh	r2, [r7, #20]
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	0fd9      	lsrs	r1, r3, #31
 80002ec:	440b      	add	r3, r1
 80002ee:	105b      	asrs	r3, r3, #1
 80002f0:	425b      	negs	r3, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	601a      	str	r2, [r3, #0]
	*outputY = (y - (twelveBitMax/2));
 80002f8:	8afa      	ldrh	r2, [r7, #22]
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	0fd9      	lsrs	r1, r3, #31
 80002fe:	440b      	add	r3, r1
 8000300:	105b      	asrs	r3, r3, #1
 8000302:	425b      	negs	r3, r3
 8000304:	441a      	add	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200000e4 	.word	0x200000e4

08000318 <EmulateDPad>:


ANALOG_STICK_DPAD_RESULT EmulateDPad(ADC_HandleTypeDef* adc){
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	4619      	mov	r1, r3
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f7ff ffa8 	bl	8000280 <ReadAnalogStickChange>
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000330:	2300      	movs	r3, #0
 8000332:	75fb      	strb	r3, [r7, #23]
	const i32 twelveBitMax = 4096;
 8000334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000338:	613b      	str	r3, [r7, #16]
	if(analogYChange > (twelveBitMax/3)){
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	4a29      	ldr	r2, [pc, #164]	; (80003e4 <EmulateDPad+0xcc>)
 800033e:	fb82 1203 	smull	r1, r2, r2, r3
 8000342:	17db      	asrs	r3, r3, #31
 8000344:	1ad2      	subs	r2, r2, r3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	429a      	cmp	r2, r3
 800034a:	da09      	bge.n	8000360 <EmulateDPad+0x48>
		if(_isAnalogStickExtended == false){
 800034c:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <EmulateDPad+0xd0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d141      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <EmulateDPad+0xd0>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800035a:	2302      	movs	r3, #2
 800035c:	75fb      	strb	r3, [r7, #23]
 800035e:	e03b      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <EmulateDPad+0xcc>)
 8000364:	fb82 1203 	smull	r1, r2, r2, r3
 8000368:	17db      	asrs	r3, r3, #31
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	429a      	cmp	r2, r3
 8000370:	dd09      	ble.n	8000386 <EmulateDPad+0x6e>
		if(_isAnalogStickExtended == false){
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <EmulateDPad+0xd0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d12e      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <EmulateDPad+0xd0>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000380:	2301      	movs	r3, #1
 8000382:	75fb      	strb	r3, [r7, #23]
 8000384:	e028      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange > (twelveBitMax/3)){
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <EmulateDPad+0xcc>)
 800038a:	fb82 1203 	smull	r1, r2, r2, r3
 800038e:	17db      	asrs	r3, r3, #31
 8000390:	1ad2      	subs	r2, r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	429a      	cmp	r2, r3
 8000396:	da09      	bge.n	80003ac <EmulateDPad+0x94>
		if(_isAnalogStickExtended == false){
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <EmulateDPad+0xd0>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d11b      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <EmulateDPad+0xd0>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 80003a6:	2304      	movs	r3, #4
 80003a8:	75fb      	strb	r3, [r7, #23]
 80003aa:	e015      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <EmulateDPad+0xcc>)
 80003b0:	fb82 1203 	smull	r1, r2, r2, r3
 80003b4:	17db      	asrs	r3, r3, #31
 80003b6:	1a9a      	subs	r2, r3, r2
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	dd09      	ble.n	80003d2 <EmulateDPad+0xba>
		if(_isAnalogStickExtended == false){
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <EmulateDPad+0xd0>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d108      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <EmulateDPad+0xd0>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80003cc:	2303      	movs	r3, #3
 80003ce:	75fb      	strb	r3, [r7, #23]
 80003d0:	e002      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <EmulateDPad+0xd0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	55555556 	.word	0x55555556
 80003e8:	200000e6 	.word	0x200000e6

080003ec <EmulateDPadReturningXAndYChange>:


ANALOG_STICK_DPAD_RESULT EmulateDPadReturningXAndYChange(ADC_HandleTypeDef* adc, i32* rXChange, i32* rYChange){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 80003f8:	f107 0210 	add.w	r2, r7, #16
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	4619      	mov	r1, r3
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff3c 	bl	8000280 <ReadAnalogStickChange>
	*rXChange = analogXChange;
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	601a      	str	r2, [r3, #0]
	*rYChange = analogYChange;
 800040e:	693a      	ldr	r2, [r7, #16]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	601a      	str	r2, [r3, #0]
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000414:	2300      	movs	r3, #0
 8000416:	77fb      	strb	r3, [r7, #31]
	const i32 twelveBitMax = 4096;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	61bb      	str	r3, [r7, #24]
	if(analogYChange > (twelveBitMax/3)){
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000422:	fb82 1203 	smull	r1, r2, r2, r3
 8000426:	17db      	asrs	r3, r3, #31
 8000428:	1ad2      	subs	r2, r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	429a      	cmp	r2, r3
 800042e:	da09      	bge.n	8000444 <EmulateDPadReturningXAndYChange+0x58>
		if(_isAnalogStickExtended == false){
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d141      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800043e:	2302      	movs	r3, #2
 8000440:	77fb      	strb	r3, [r7, #31]
 8000442:	e03b      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}

	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000448:	fb82 1203 	smull	r1, r2, r2, r3
 800044c:	17db      	asrs	r3, r3, #31
 800044e:	1a9a      	subs	r2, r3, r2
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	429a      	cmp	r2, r3
 8000454:	dd09      	ble.n	800046a <EmulateDPadReturningXAndYChange+0x7e>
		if(_isAnalogStickExtended == false){
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d12e      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000464:	2301      	movs	r3, #1
 8000466:	77fb      	strb	r3, [r7, #31]
 8000468:	e028      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>

		}

	}
	else if(analogXChange > (twelveBitMax/3)){
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 800046e:	fb82 1203 	smull	r1, r2, r2, r3
 8000472:	17db      	asrs	r3, r3, #31
 8000474:	1ad2      	subs	r2, r2, r3
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	429a      	cmp	r2, r3
 800047a:	da09      	bge.n	8000490 <EmulateDPadReturningXAndYChange+0xa4>
		if(_isAnalogStickExtended == false){
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d11b      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 800048a:	2304      	movs	r3, #4
 800048c:	77fb      	strb	r3, [r7, #31]
 800048e:	e015      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000494:	fb82 1203 	smull	r1, r2, r2, r3
 8000498:	17db      	asrs	r3, r3, #31
 800049a:	1a9a      	subs	r2, r3, r2
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dd09      	ble.n	80004b6 <EmulateDPadReturningXAndYChange+0xca>
		if(_isAnalogStickExtended == false){
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d108      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80004b0:	2303      	movs	r3, #3
 80004b2:	77fb      	strb	r3, [r7, #31]
 80004b4:	e002      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80004bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	55555556 	.word	0x55555556
 80004cc:	200000e6 	.word	0x200000e6

080004d0 <gfxClearFrameBuffer>:
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
	}
}

void gfxClearFrameBuffer(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 80004d4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80004d8:	2100      	movs	r1, #0
 80004da:	4802      	ldr	r0, [pc, #8]	; (80004e4 <gfxClearFrameBuffer+0x14>)
 80004dc:	f006 fcea 	bl	8006eb4 <memset>
	//UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000e8 	.word	0x200000e8

080004e8 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b53      	cmp	r3, #83	; 0x53
 80004fc:	d825      	bhi.n	800054a <gfxPlotPixelInternal+0x62>
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	2b2e      	cmp	r3, #46	; 0x2e
 8000502:	d822      	bhi.n	800054a <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	08db      	lsrs	r3, r3, #3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	2354      	movs	r3, #84	; 0x54
 800050e:	fb03 f202 	mul.w	r2, r3, r2
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4413      	add	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800051e:	d215      	bcs.n	800054c <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <gfxPlotPixelInternal+0x70>)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b25a      	sxtb	r2, r3
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	f003 0307 	and.w	r3, r3, #7
 8000530:	2101      	movs	r1, #1
 8000532:	fa01 f303 	lsl.w	r3, r1, r3
 8000536:	b25b      	sxtb	r3, r3
 8000538:	4313      	orrs	r3, r2
 800053a:	b25b      	sxtb	r3, r3
 800053c:	b2d9      	uxtb	r1, r3
 800053e:	4a06      	ldr	r2, [pc, #24]	; (8000558 <gfxPlotPixelInternal+0x70>)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4413      	add	r3, r2
 8000544:	460a      	mov	r2, r1
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e000      	b.n	800054c <gfxPlotPixelInternal+0x64>
		return;
 800054a:	bf00      	nop
}
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200000e8 	.word	0x200000e8

0800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 800055c:	b490      	push	{r4, r7}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4604      	mov	r4, r0
 8000564:	4608      	mov	r0, r1
 8000566:	4611      	mov	r1, r2
 8000568:	461a      	mov	r2, r3
 800056a:	4623      	mov	r3, r4
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	4603      	mov	r3, r0
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	460b      	mov	r3, r1
 8000574:	717b      	strb	r3, [r7, #5]
 8000576:	4613      	mov	r3, r2
 8000578:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e01c      	b.n	80005ba <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 8000580:	4913      	ldr	r1, [pc, #76]	; (80005d0 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	4613      	mov	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	4413      	add	r3, r2
 800058a:	440b      	add	r3, r1
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 8000590:	490f      	ldr	r1, [pc, #60]	; (80005d0 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	4613      	mov	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4413      	add	r3, r2
 800059a:	440b      	add	r3, r1
 800059c:	3301      	adds	r3, #1
 800059e:	797a      	ldrb	r2, [r7, #5]
 80005a0:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 80005a2:	490b      	ldr	r1, [pc, #44]	; (80005d0 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	4613      	mov	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4413      	add	r3, r2
 80005ac:	440b      	add	r3, r1
 80005ae:	3302      	adds	r3, #2
 80005b0:	793a      	ldrb	r2, [r7, #4]
 80005b2:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	429a      	cmp	r2, r3
 80005c0:	ddde      	ble.n	8000580 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc90      	pop	{r4, r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	200002e0 	.word	0x200002e0

080005d4 <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b089      	sub	sp, #36	; 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4604      	mov	r4, r0
 80005dc:	4608      	mov	r0, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	461a      	mov	r2, r3
 80005e2:	4623      	mov	r3, r4
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	4603      	mov	r3, r0
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	460b      	mov	r3, r1
 80005ec:	717b      	strb	r3, [r7, #5]
 80005ee:	4613      	mov	r3, r2
 80005f0:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 80005f2:	797a      	ldrb	r2, [r7, #5]
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 80005fa:	793a      	ldrb	r2, [r7, #4]
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b00      	cmp	r3, #0
 800060a:	da05      	bge.n	8000618 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	425b      	negs	r3, r3
 8000616:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	005a      	lsls	r2, r3, #1
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e01e      	b.n	800066a <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff56 	bl	80004e8 <gfxPlotPixelInternal>
		if(D > 0){
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	2b00      	cmp	r3, #0
 8000640:	dd0b      	ble.n	800065a <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	4413      	add	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 800064a:	69fa      	ldr	r2, [r7, #28]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	697a      	ldr	r2, [r7, #20]
 8000654:	4413      	add	r3, r2
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e004      	b.n	8000664 <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	429a      	cmp	r2, r3
 8000670:	dddc      	ble.n	800062c <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3724      	adds	r7, #36	; 0x24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}

0800067c <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	4604      	mov	r4, r0
 8000684:	4608      	mov	r0, r1
 8000686:	4611      	mov	r1, r2
 8000688:	461a      	mov	r2, r3
 800068a:	4623      	mov	r3, r4
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	4603      	mov	r3, r0
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	460b      	mov	r3, r1
 8000694:	717b      	strb	r3, [r7, #5]
 8000696:	4613      	mov	r3, r2
 8000698:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800069a:	797a      	ldrb	r2, [r7, #5]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 80006a2:	793a      	ldrb	r2, [r7, #4]
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da04      	bge.n	80006be <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	425b      	negs	r3, r3
 80006bc:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	005a      	lsls	r2, r3, #1
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	e01e      	b.n	8000710 <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff03 	bl	80004e8 <gfxPlotPixelInternal>
		if(D > 0){
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dd0b      	ble.n	8000700 <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	4413      	add	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 80006f0:	69fa      	ldr	r2, [r7, #28]
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	4413      	add	r3, r2
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	e004      	b.n	800070a <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3301      	adds	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	793b      	ldrb	r3, [r7, #4]
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	dddc      	ble.n	80006d2 <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}

08000722 <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 8000722:	b590      	push	{r4, r7, lr}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	4604      	mov	r4, r0
 800072a:	4608      	mov	r0, r1
 800072c:	4611      	mov	r1, r2
 800072e:	461a      	mov	r2, r3
 8000730:	4623      	mov	r3, r4
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4603      	mov	r3, r0
 8000736:	71bb      	strb	r3, [r7, #6]
 8000738:	460b      	mov	r3, r1
 800073a:	717b      	strb	r3, [r7, #5]
 800073c:	4613      	mov	r3, r2
 800073e:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 8000740:	793a      	ldrb	r2, [r7, #4]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800074a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800074e:	7979      	ldrb	r1, [r7, #5]
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	1acb      	subs	r3, r1, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	bfb8      	it	lt
 8000758:	425b      	neglt	r3, r3
 800075a:	429a      	cmp	r2, r3
 800075c:	da11      	bge.n	8000782 <gfxDrawLine+0x60>
		if(x0 > x1){
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	797b      	ldrb	r3, [r7, #5]
 8000762:	429a      	cmp	r2, r3
 8000764:	d906      	bls.n	8000774 <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	7939      	ldrb	r1, [r7, #4]
 800076c:	7978      	ldrb	r0, [r7, #5]
 800076e:	f7ff ff31 	bl	80005d4 <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 8000772:	e017      	b.n	80007a4 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 8000774:	793b      	ldrb	r3, [r7, #4]
 8000776:	797a      	ldrb	r2, [r7, #5]
 8000778:	79b9      	ldrb	r1, [r7, #6]
 800077a:	79f8      	ldrb	r0, [r7, #7]
 800077c:	f7ff ff2a 	bl	80005d4 <gfxDrawLineBresenhamLow>
}
 8000780:	e010      	b.n	80007a4 <gfxDrawLine+0x82>
		if(y0 > y1){
 8000782:	79ba      	ldrb	r2, [r7, #6]
 8000784:	793b      	ldrb	r3, [r7, #4]
 8000786:	429a      	cmp	r2, r3
 8000788:	d906      	bls.n	8000798 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	7939      	ldrb	r1, [r7, #4]
 8000790:	7978      	ldrb	r0, [r7, #5]
 8000792:	f7ff ff73 	bl	800067c <gfxDrawLineBresenhamHigh>
}
 8000796:	e005      	b.n	80007a4 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 8000798:	793b      	ldrb	r3, [r7, #4]
 800079a:	797a      	ldrb	r2, [r7, #5]
 800079c:	79b9      	ldrb	r1, [r7, #6]
 800079e:	79f8      	ldrb	r0, [r7, #7]
 80007a0:	f7ff ff6c 	bl	800067c <gfxDrawLineBresenhamHigh>
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd90      	pop	{r4, r7, pc}

080007ac <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007b8:	e067      	b.n	800088a <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 80007ba:	4938      	ldr	r1, [pc, #224]	; (800089c <gfxFinishDrawing+0xf0>)
 80007bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d15b      	bne.n	8000884 <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 80007cc:	4933      	ldr	r1, [pc, #204]	; (800089c <gfxFinishDrawing+0xf0>)
 80007ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	3301      	adds	r3, #1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 80007e0:	492e      	ldr	r1, [pc, #184]	; (800089c <gfxFinishDrawing+0xf0>)
 80007e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	3302      	adds	r3, #2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 80007f4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80007f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d20b      	bcs.n	8000818 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 8000800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000804:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000808:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800080c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000810:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 8000818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081a:	2254      	movs	r2, #84	; 0x54
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	b2d9      	uxtb	r1, r3
 8000826:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082c:	4413      	add	r3, r2
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <gfxFinishDrawing+0xf4>)
 8000830:	1898      	adds	r0, r3, r2
 8000832:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000836:	b29a      	uxth	r2, r3
 8000838:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800083c:	b29b      	uxth	r3, r3
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b29b      	uxth	r3, r3
 8000842:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	4603      	mov	r3, r0
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 f82a 	bl	80008a4 <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 8000850:	4912      	ldr	r1, [pc, #72]	; (800089c <gfxFinishDrawing+0xf0>)
 8000852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	440b      	add	r3, r1
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 8000860:	490e      	ldr	r1, [pc, #56]	; (800089c <gfxFinishDrawing+0xf0>)
 8000862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	440b      	add	r3, r1
 800086c:	3301      	adds	r3, #1
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 8000872:	490a      	ldr	r1, [pc, #40]	; (800089c <gfxFinishDrawing+0xf0>)
 8000874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000876:	4613      	mov	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	440b      	add	r3, r1
 800087e:	3302      	adds	r3, #2
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 8000884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000886:	3301      	adds	r3, #1
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	2b05      	cmp	r3, #5
 800088e:	dd94      	ble.n	80007ba <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3730      	adds	r7, #48	; 0x30
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002e0 	.word	0x200002e0
 80008a0:	200000e8 	.word	0x200000e8

080008a4 <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	460b      	mov	r3, r1
 80008b0:	72fb      	strb	r3, [r7, #11]
 80008b2:	4613      	mov	r3, r2
 80008b4:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f001 ff3a 	bl	8002738 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f001 ff57 	bl	8002778 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 80008ca:	7dfa      	ldrb	r2, [r7, #23]
 80008cc:	7db9      	ldrb	r1, [r7, #22]
 80008ce:	2300      	movs	r3, #0
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f001 fe5a 	bl	800258a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 80008d6:	7aba      	ldrb	r2, [r7, #10]
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	4619      	mov	r1, r3
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f001 fea7 	bl	8002630 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f001 ff58 	bl	8002798 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f001 ff35 	bl	8002758 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f001 ff42 	bl	8002778 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 80008f4:	8c3b      	ldrh	r3, [r7, #32]
 80008f6:	461a      	mov	r2, r3
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f001 fe12 	bl	8002524 <LCD_PCD8544_LL_send_data>
 8000900:	4603      	mov	r3, r0
 8000902:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f001 ff47 	bl	8002798 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 800090a:	7d7b      	ldrb	r3, [r7, #21]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	; 0x70
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	603a      	str	r2, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	460b      	mov	r3, r1
 8000922:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f7ff fc53 	bl	80001d0 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 8000930:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	461a      	mov	r2, r3
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	4413      	add	r3, r2
 8000942:	2b54      	cmp	r3, #84	; 0x54
 8000944:	dd04      	ble.n	8000950 <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 8000946:	230e      	movs	r3, #14
 8000948:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2254      	movs	r2, #84	; 0x54
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f006 faab 	bl	8006eb4 <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 800095e:	2300      	movs	r3, #0
 8000960:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 8000964:	e029      	b.n	80009ba <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 8000966:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d029      	beq.n	80009c8 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 8000974:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 8000982:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000986:	4613      	mov	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	461a      	mov	r2, r3
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	1898      	adds	r0, r3, r2
 8000996:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800099a:	4613      	mov	r3, r2
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	4413      	add	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <gfxWriteTextLineToFrameBuffer+0xf4>)
 80009a6:	4413      	add	r3, r2
 80009a8:	2206      	movs	r2, #6
 80009aa:	4619      	mov	r1, r3
 80009ac:	f006 fa74 	bl	8006e98 <memcpy>
	for ( ; nChars<strLen; nChars++) {
 80009b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80009b4:	3301      	adds	r3, #1
 80009b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80009ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80009be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3cf      	bcc.n	8000966 <gfxWriteTextLineToFrameBuffer+0x52>
 80009c6:	e000      	b.n	80009ca <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 80009c8:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2254      	movs	r2, #84	; 0x54
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 80009d4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	0052      	lsls	r2, r2, #1
 80009de:	4413      	add	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009ea:	4413      	add	r3, r2
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <gfxWriteTextLineToFrameBuffer+0xf8>)
 80009ee:	4413      	add	r3, r2
 80009f0:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80009f4:	f107 010c 	add.w	r1, r7, #12
 80009f8:	4618      	mov	r0, r3
 80009fa:	f006 fa4d 	bl	8006e98 <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 80009fe:	bf00      	nop
 8000a00:	3770      	adds	r7, #112	; 0x70
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	08008394 	.word	0x08008394
 8000a0c:	200000e8 	.word	0x200000e8

08000a10 <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4604      	mov	r4, r0
 8000a18:	4608      	mov	r0, r1
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4623      	mov	r3, r4
 8000a20:	71fb      	strb	r3, [r7, #7]
 8000a22:	4603      	mov	r3, r0
 8000a24:	71bb      	strb	r3, [r7, #6]
 8000a26:	460b      	mov	r3, r1
 8000a28:	717b      	strb	r3, [r7, #5]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	797a      	ldrb	r2, [r7, #5]
 8000a32:	79b9      	ldrb	r1, [r7, #6]
 8000a34:	79f8      	ldrb	r0, [r7, #7]
 8000a36:	f7ff fe74 	bl	8000722 <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 8000a3a:	793b      	ldrb	r3, [r7, #4]
 8000a3c:	797a      	ldrb	r2, [r7, #5]
 8000a3e:	79b9      	ldrb	r1, [r7, #6]
 8000a40:	7978      	ldrb	r0, [r7, #5]
 8000a42:	f7ff fe6e 	bl	8000722 <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 8000a46:	793b      	ldrb	r3, [r7, #4]
 8000a48:	79fa      	ldrb	r2, [r7, #7]
 8000a4a:	7939      	ldrb	r1, [r7, #4]
 8000a4c:	7978      	ldrb	r0, [r7, #5]
 8000a4e:	f7ff fe68 	bl	8000722 <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	7939      	ldrb	r1, [r7, #4]
 8000a58:	79f8      	ldrb	r0, [r7, #7]
 8000a5a:	f7ff fe62 	bl	8000722 <gfxDrawLine>


}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd90      	pop	{r4, r7, pc}
	...

08000a68 <ClearUpdateRegions>:

void ClearUpdateRegions(){
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e01c      	b.n	8000aae <ClearUpdateRegions+0x46>
		gScreenRegionsToUpdate[i].updateColumnFinish = 0;
 8000a74:	4913      	ldr	r1, [pc, #76]	; (8000ac4 <ClearUpdateRegions+0x5c>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	3302      	adds	r3, #2
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000a86:	490f      	ldr	r1, [pc, #60]	; (8000ac4 <ClearUpdateRegions+0x5c>)
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	3301      	adds	r3, #1
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 0;
 8000a98:	490a      	ldr	r1, [pc, #40]	; (8000ac4 <ClearUpdateRegions+0x5c>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	4413      	add	r3, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	dddf      	ble.n	8000a74 <ClearUpdateRegions+0xc>


	}
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200002e0 	.word	0x200002e0

08000ac8 <ClearScreen>:


void ClearScreen(LCD_PCD8544_screen_t* scr){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	gfxClearFrameBuffer();
 8000ad0:	f7ff fcfe 	bl	80004d0 <gfxClearFrameBuffer>
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e01c      	b.n	8000b14 <ClearScreen+0x4c>
		gScreenRegionsToUpdate[i].updateColumnFinish = 83;
 8000ada:	4913      	ldr	r1, [pc, #76]	; (8000b28 <ClearScreen+0x60>)
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	2253      	movs	r2, #83	; 0x53
 8000aea:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000aec:	490e      	ldr	r1, [pc, #56]	; (8000b28 <ClearScreen+0x60>)
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	3301      	adds	r3, #1
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 1;
 8000afe:	490a      	ldr	r1, [pc, #40]	; (8000b28 <ClearScreen+0x60>)
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3301      	adds	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	dddf      	ble.n	8000ada <ClearScreen+0x12>
	}
	gfxFinishDrawing(scr);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fe46 	bl	80007ac <gfxFinishDrawing>

}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200002e0 	.word	0x200002e0

08000b2c <gfxClearFrameBufferRow>:


void gfxClearFrameBufferRow(u8 rowIndex, u8 colStart, u8 amount){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	460b      	mov	r3, r1
 8000b38:	71bb      	strb	r3, [r7, #6]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	717b      	strb	r3, [r7, #5]
	u8* frameBufferStartPtr = &gFrameBuffer[(rowIndex * PIXELS_WIDTH) + colStart];
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2254      	movs	r2, #84	; 0x54
 8000b42:	fb03 f202 	mul.w	r2, r3, r2
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <gfxClearFrameBufferRow+0x38>)
 8000b4c:	4413      	add	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]

	memset(frameBufferStartPtr, 0, amount);
 8000b50:	797b      	ldrb	r3, [r7, #5]
 8000b52:	461a      	mov	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f006 f9ac 	bl	8006eb4 <memset>

}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000e8 	.word	0x200000e8

08000b68 <GetStateAtXY>:
static u8* _TetrisPieces[NUM_TETRIS_PIECES]  = {_ZPieceOccupiedIndicies, _SPieceOccupiedIndicies,_OPieceOccupiedIndicies,_LPieceOccupiedIndicies,_TPieceOccupiedIndicies,_JPieceOccupiedIndicies,_IPieceOccupiedIndices, };




static BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	460a      	mov	r2, r1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	4613      	mov	r3, r2
 8000b76:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <GetStateAtXY+0x3c>)
 8000b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b80:	461a      	mov	r2, r3
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	fa42 f303 	asr.w	r3, r2, r3
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf14      	ite	ne
 8000b90:	2301      	movne	r3, #1
 8000b92:	2300      	moveq	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200002f4 	.word	0x200002f4

08000ba8 <SetStateAtXY>:

static void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000bba:	797b      	ldrb	r3, [r7, #5]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d111      	bne.n	8000be4 <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <SetStateAtXY+0x70>)
 8000bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	b291      	uxth	r1, r2
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <SetStateAtXY+0x70>)
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 8000be2:	e012      	b.n	8000c0a <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <SetStateAtXY+0x70>)
 8000be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	b291      	uxth	r1, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <SetStateAtXY+0x70>)
 8000c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200002f4 	.word	0x200002f4

08000c1c <Tetris_DrawCurentPiece>:




static void Tetris_DrawCurentPiece(){
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <Tetris_DrawCurentPiece+0xb8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <Tetris_DrawCurentPiece+0xb8>)
 8000c28:	7912      	ldrb	r2, [r2, #4]
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e045      	b.n	8000cc2 <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	0052      	lsls	r2, r2, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	0052      	lsls	r2, r2, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <Tetris_DrawCurentPiece+0xb8>)
 8000c60:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	0052      	lsls	r2, r2, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	4413      	add	r3, r2
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <Tetris_DrawCurentPiece+0xb8>)
 8000c78:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	797b      	ldrb	r3, [r7, #5]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db12      	blt.n	8000cbc <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <Tetris_DrawCurentPiece+0xbc>)
 8000c98:	681c      	ldr	r4, [r3, #0]
 8000c9a:	793a      	ldrb	r2, [r7, #4]
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <Tetris_DrawCurentPiece+0xc0>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b2d8      	uxtb	r0, r3
 8000ca4:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000ca6:	793a      	ldrb	r2, [r7, #4]
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <Tetris_DrawCurentPiece+0xc0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000cb0:	3303      	adds	r3, #3
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	3303      	adds	r3, #3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	ddb6      	ble.n	8000c36 <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd90      	pop	{r4, r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000032c 	.word	0x2000032c
 8000cd8:	20000318 	.word	0x20000318
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <Tetris_DrawNextPiece>:

static void Tetris_DrawNextPiece(){
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <Tetris_DrawNextPiece+0x94>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <Tetris_DrawNextPiece+0x94>)
 8000cec:	7912      	ldrb	r2, [r2, #4]
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	e033      	b.n	8000d62 <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	4413      	add	r3, r2
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	0052      	lsls	r2, r2, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	0052      	lsls	r2, r2, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	3321      	adds	r3, #33	; 0x21
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000d2a:	797b      	ldrb	r3, [r7, #5]
 8000d2c:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db12      	blt.n	8000d5c <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <Tetris_DrawNextPiece+0x98>)
 8000d38:	681c      	ldr	r4, [r3, #0]
 8000d3a:	793a      	ldrb	r2, [r7, #4]
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <Tetris_DrawNextPiece+0x9c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4413      	add	r3, r2
 8000d42:	b2d8      	uxtb	r0, r3
 8000d44:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000d46:	793a      	ldrb	r2, [r7, #4]
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <Tetris_DrawNextPiece+0x9c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000d50:	3303      	adds	r3, #3
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	3303      	adds	r3, #3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	ddc8      	ble.n	8000cfa <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000334 	.word	0x20000334
 8000d78:	20000318 	.word	0x20000318
 8000d7c:	20000000 	.word	0x20000000

08000d80 <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000d8a:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <Tetris_DrawTetrisBoard+0xe0>)
 8000d8c:	681c      	ldr	r4, [r3, #0]
 8000d8e:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <Tetris_DrawTetrisBoard+0xe4>)
 8000d90:	7818      	ldrb	r0, [r3, #0]
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <Tetris_DrawTetrisBoard+0xe8>)
 8000d94:	7819      	ldrb	r1, [r3, #0]
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <Tetris_DrawTetrisBoard+0xe4>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	331e      	adds	r3, #30
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <Tetris_DrawTetrisBoard+0xe8>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	332d      	adds	r3, #45	; 0x2d
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e049      	b.n	8000e42 <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e040      	b.n	8000e36 <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fed2 	bl	8000b68 <GetStateAtXY>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d132      	bne.n	8000e30 <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	0052      	lsls	r2, r2, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <Tetris_DrawTetrisBoard+0xe4>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	0052      	lsls	r2, r2, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <Tetris_DrawTetrisBoard+0xe8>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	0052      	lsls	r2, r2, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <Tetris_DrawTetrisBoard+0xe4>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3303      	adds	r3, #3
 8000e08:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	0052      	lsls	r2, r2, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <Tetris_DrawTetrisBoard+0xe8>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	3303      	adds	r3, #3
 8000e20:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <Tetris_DrawTetrisBoard+0xec>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	7b3b      	ldrb	r3, [r7, #12]
 8000e28:	7b7a      	ldrb	r2, [r7, #13]
 8000e2a:	7bb9      	ldrb	r1, [r7, #14]
 8000e2c:	7bf8      	ldrb	r0, [r7, #15]
 8000e2e:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	3301      	adds	r3, #1
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2b09      	cmp	r3, #9
 8000e3a:	ddbb      	ble.n	8000db4 <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2b0e      	cmp	r3, #14
 8000e46:	ddb2      	ble.n	8000dae <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 8000e48:	f7ff fee8 	bl	8000c1c <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d101      	bne.n	8000e56 <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8000e52:	f7ff ff45 	bl	8000ce0 <Tetris_DrawNextPiece>
	}
}
 8000e56:	bf00      	nop
 8000e58:	371c      	adds	r7, #28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000314 	.word	0x20000314
 8000e64:	20000000 	.word	0x20000000
 8000e68:	2000033c 	.word	0x2000033c
 8000e6c:	2000031c 	.word	0x2000031c

08000e70 <InitNewCurrentPiece>:

static void InitNewCurrentPiece(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <InitNewCurrentPiece+0x30>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <InitNewCurrentPiece+0x30>)
 8000e7c:	22fe      	movs	r2, #254	; 0xfe
 8000e7e:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <InitNewCurrentPiece+0x34>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4798      	blx	r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <InitNewCurrentPiece+0x38>)
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <InitNewCurrentPiece+0x30>)
 8000e92:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <InitNewCurrentPiece+0x30>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	711a      	strb	r2, [r3, #4]
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000032c 	.word	0x2000032c
 8000ea4:	20000320 	.word	0x20000320
 8000ea8:	20000004 	.word	0x20000004

08000eac <InitNewNextPiece>:

static void InitNewNextPiece(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <InitNewNextPiece+0x30>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <InitNewNextPiece+0x30>)
 8000eb8:	22fe      	movs	r2, #254	; 0xfe
 8000eba:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <InitNewNextPiece+0x34>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4798      	blx	r3
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <InitNewNextPiece+0x38>)
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <InitNewNextPiece+0x30>)
 8000ece:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <InitNewNextPiece+0x30>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	711a      	strb	r2, [r3, #4]
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000334 	.word	0x20000334
 8000ee0:	20000320 	.word	0x20000320
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <CopyNextPieceToCurrent>:

static void CopyNextPieceToCurrent(){
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <CopyNextPieceToCurrent+0x1c>)
 8000eee:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <CopyNextPieceToCurrent+0x20>)
 8000ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	2000032c 	.word	0x2000032c
 8000f08:	20000334 	.word	0x20000334

08000f0c <Tetris_ResetTetrisBoard>:

void Tetris_ResetTetrisBoard(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 8000f10:	221e      	movs	r2, #30
 8000f12:	2100      	movs	r1, #0
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <Tetris_ResetTetrisBoard+0x1c>)
 8000f16:	f005 ffcd 	bl	8006eb4 <memset>
	InitNewCurrentPiece();
 8000f1a:	f7ff ffa9 	bl	8000e70 <InitNewCurrentPiece>
	InitNewNextPiece();
 8000f1e:	f7ff ffc5 	bl	8000eac <InitNewNextPiece>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200002f4 	.word	0x200002f4

08000f2c <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <Tetris_Init+0x40>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <Tetris_Init+0x44>)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <Tetris_Init+0x48>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <Tetris_Init+0x4c>)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <Tetris_Init+0x50>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <Tetris_Init+0x54>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	6013      	str	r3, [r2, #0]
	//Tetris_ResetTetrisBoard();
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000314 	.word	0x20000314
 8000f70:	2000031c 	.word	0x2000031c
 8000f74:	20000318 	.word	0x20000318
 8000f78:	20000320 	.word	0x20000320
 8000f7c:	20000324 	.word	0x20000324
 8000f80:	20000328 	.word	0x20000328

08000f84 <IsBlockAllowedToBeHere>:

static bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8000f94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da09      	bge.n	8000fb0 <IsBlockAllowedToBeHere+0x2c>
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db05      	blt.n	8000fb0 <IsBlockAllowedToBeHere+0x2c>
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b09      	cmp	r3, #9
 8000faa:	dc01      	bgt.n	8000fb0 <IsBlockAllowedToBeHere+0x2c>
		return true;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e01b      	b.n	8000fe8 <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	79ba      	ldrb	r2, [r7, #6]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fdd6 	bl	8000b68 <GetStateAtXY>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <IsBlockAllowedToBeHere+0x42>
		return false;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e010      	b.n	8000fe8 <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b09      	cmp	r3, #9
 8000fcc:	dc03      	bgt.n	8000fd6 <IsBlockAllowedToBeHere+0x52>
 8000fce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fd2:	2b0e      	cmp	r3, #14
 8000fd4:	dd01      	ble.n	8000fda <IsBlockAllowedToBeHere+0x56>
		return false;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e006      	b.n	8000fe8 <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	da01      	bge.n	8000fe6 <IsBlockAllowedToBeHere+0x62>
		return false;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <WriteCurrentPieceToGameBoardArray>:

static bool WriteCurrentPieceToGameBoardArray(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000ffc:	7912      	ldrb	r2, [r2, #4]
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4413      	add	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e02e      	b.n	8001068 <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <WriteCurrentPieceToGameBoardArray+0x88>)
 8001024:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	4413      	add	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <WriteCurrentPieceToGameBoardArray+0x88>)
 8001034:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	797b      	ldrb	r3, [r7, #5]
 800103c:	4413      	add	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 8001042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001046:	2b00      	cmp	r3, #0
 8001048:	da01      	bge.n	800104e <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 800104a:	2301      	movs	r3, #1
 800104c:	e010      	b.n	8001070 <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 800104e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db05      	blt.n	8001062 <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 8001056:	793b      	ldrb	r3, [r7, #4]
 8001058:	78f9      	ldrb	r1, [r7, #3]
 800105a:	2201      	movs	r2, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fda3 	bl	8000ba8 <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b03      	cmp	r3, #3
 800106c:	ddcd      	ble.n	800100a <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000032c 	.word	0x2000032c

0800107c <IsMoveValid>:

static u8 IsMoveValid(){
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <IsMoveValid+0x84>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <IsMoveValid+0x84>)
 8001088:	7912      	ldrb	r2, [r2, #4]
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	4413      	add	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e02b      	b.n	80010ee <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <IsMoveValid+0x84>)
 80010b0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	4413      	add	r3, r2
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <IsMoveValid+0x84>)
 80010c0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	4413      	add	r3, r2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 80010ce:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80010d2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff53 	bl	8000f84 <IsBlockAllowedToBeHere>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <IsMoveValid+0x6c>
			return 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e006      	b.n	80010f6 <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	ddd0      	ble.n	8001096 <IsMoveValid+0x1a>
		}
	}
	return 1;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000032c 	.word	0x2000032c

08001104 <CheckForAndClearLines>:

static u8 CheckForAndClearLines(){
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 800110e:	2300      	movs	r3, #0
 8001110:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8001112:	230e      	movs	r3, #14
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	e027      	b.n	8001168 <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <CheckForAndClearLines+0x78>)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001120:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001124:	4293      	cmp	r3, r2
 8001126:	d105      	bne.n	8001134 <CheckForAndClearLines+0x30>
			linesToClear++;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	3301      	adds	r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 800112e:	2301      	movs	r3, #1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	e001      	b.n	8001138 <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 8001134:	2300      	movs	r3, #0
 8001136:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d011      	beq.n	8001162 <CheckForAndClearLines+0x5e>
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10e      	bne.n	8001162 <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	4413      	add	r3, r2
 800114a:	490c      	ldr	r1, [pc, #48]	; (800117c <CheckForAndClearLines+0x78>)
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <CheckForAndClearLines+0x78>)
 8001154:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 8001158:	4a08      	ldr	r2, [pc, #32]	; (800117c <CheckForAndClearLines+0x78>)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2100      	movs	r1, #0
 800115e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	3b01      	subs	r3, #1
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	dad4      	bge.n	8001118 <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 800116e:	79fb      	ldrb	r3, [r7, #7]
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	200002f4 	.word	0x200002f4

08001180 <Tetris_Rotate>:

void Tetris_Rotate(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <Tetris_Rotate+0x48>)
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	3301      	adds	r3, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <Tetris_Rotate+0x48>)
 800118e:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <Tetris_Rotate+0x48>)
 8001192:	791b      	ldrb	r3, [r3, #4]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d902      	bls.n	800119e <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <Tetris_Rotate+0x48>)
 800119a:	2200      	movs	r2, #0
 800119c:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 800119e:	f7ff ff6d 	bl	800107c <IsMoveValid>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10d      	bne.n	80011c4 <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <Tetris_Rotate+0x48>)
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <Tetris_Rotate+0x48>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 80011b6:	e005      	b.n	80011c4 <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <Tetris_Rotate+0x48>)
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	3b01      	subs	r3, #1
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b01      	ldr	r3, [pc, #4]	; (80011c8 <Tetris_Rotate+0x48>)
 80011c2:	711a      	strb	r2, [r3, #4]
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000032c 	.word	0x2000032c

080011cc <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <Tetris_MoveDown+0x80>)
 80011d4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	3301      	adds	r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	b25a      	sxtb	r2, r3
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <Tetris_MoveDown+0x80>)
 80011e2:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 80011e4:	f7ff ff4a 	bl	800107c <IsMoveValid>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d128      	bne.n	8001240 <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <Tetris_MoveDown+0x80>)
 80011f0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b25a      	sxtb	r2, r3
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <Tetris_MoveDown+0x80>)
 80011fe:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 8001200:	f7ff fef6 	bl	8000ff0 <WriteCurrentPieceToGameBoardArray>
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 8001208:	f7ff ff7c 	bl	8001104 <CheckForAndClearLines>
 800120c:	4603      	mov	r3, r0
 800120e:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 8001210:	f7ff fe6a 	bl	8000ee8 <CopyNextPieceToCurrent>
		InitNewNextPiece();
 8001214:	f7ff fe4a 	bl	8000eac <InitNewNextPiece>
		if(hasGameOverOccured == true){
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d106      	bne.n	800122c <Tetris_MoveDown+0x60>
			_onGameOver();
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <Tetris_MoveDown+0x84>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4798      	blx	r3
			Tetris_ResetTetrisBoard();
 8001224:	f7ff fe72 	bl	8000f0c <Tetris_ResetTetrisBoard>
			return MoveDownResultGameOver;
 8001228:	2303      	movs	r3, #3
 800122a:	e00a      	b.n	8001242 <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <Tetris_MoveDown+0x88>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	4610      	mov	r0, r2
 800123a:	4798      	blx	r3
		}
		return Settled;
 800123c:	2302      	movs	r3, #2
 800123e:	e000      	b.n	8001242 <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000032c 	.word	0x2000032c
 8001250:	20000328 	.word	0x20000328
 8001254:	20000324 	.word	0x20000324

08001258 <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <Tetris_MoveLeft+0x38>)
 800125e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3b01      	subs	r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	b25a      	sxtb	r2, r3
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <Tetris_MoveLeft+0x38>)
 800126c:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 800126e:	f7ff ff05 	bl	800107c <IsMoveValid>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d108      	bne.n	800128a <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <Tetris_MoveLeft+0x38>)
 800127a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	b25a      	sxtb	r2, r3
 8001286:	4b02      	ldr	r3, [pc, #8]	; (8001290 <Tetris_MoveLeft+0x38>)
 8001288:	715a      	strb	r2, [r3, #5]
	}
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000032c 	.word	0x2000032c

08001294 <Tetris_MoveRight>:

void Tetris_MoveRight(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <Tetris_MoveRight+0x38>)
 800129a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <Tetris_MoveRight+0x38>)
 80012a8:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 80012aa:	f7ff fee7 	bl	800107c <IsMoveValid>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d108      	bne.n	80012c6 <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <Tetris_MoveRight+0x38>)
 80012b6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3b01      	subs	r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	b25a      	sxtb	r2, r3
 80012c2:	4b02      	ldr	r3, [pc, #8]	; (80012cc <Tetris_MoveRight+0x38>)
 80012c4:	715a      	strb	r2, [r3, #5]
	}
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000032c 	.word	0x2000032c

080012d0 <WriteSingleHighScoreToFrameBuffer>:
static i8 _settingInitial = 0;
static u32 _blinkTimer = 0;
static bool _blinkState = true; /* True if the initial being set is currently drawn to frame buffer, false otherwise */
static bool _isAnalogStickExtended = false; /* Is the analog stick moved far enough in any one direction to count as "extended" */

static void WriteSingleHighScoreToFrameBuffer(const HighScore* highScore, u8 line){
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	char highScoreLineBuffer[10];
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
		highScore->Initials[0],
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80012e0:	4619      	mov	r1, r3
		highScore->Initials[1],
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	785b      	ldrb	r3, [r3, #1]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80012e6:	461c      	mov	r4, r3
		highScore->Initials[2],
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	789b      	ldrb	r3, [r3, #2]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f107 000c 	add.w	r0, r7, #12
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	4623      	mov	r3, r4
 80012fc:	460a      	mov	r2, r1
 80012fe:	4907      	ldr	r1, [pc, #28]	; (800131c <WriteSingleHighScoreToFrameBuffer+0x4c>)
 8001300:	f005 fe4c 	bl	8006f9c <siprintf>
		highScore->Score);
	gfxWriteTextLineToFrameBuffer(line,0,highScoreLineBuffer);
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb01 	bl	8000914 <gfxWriteTextLineToFrameBuffer>

}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	08008344 	.word	0x08008344

08001320 <DrawHighScoresToFrameBuffer>:

static void DrawHighScoresToFrameBuffer(){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	e010      	b.n	800134e <DrawHighScoresToFrameBuffer+0x2e>
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(i);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fd8b 	bl	8001e4c <TetrisHighScores_GetHighScoreAtIndex>
 8001336:	6038      	str	r0, [r7, #0]
		WriteSingleHighScoreToFrameBuffer(highScore, i+1);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	3301      	adds	r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4619      	mov	r1, r3
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff ffc4 	bl	80012d0 <WriteSingleHighScoreToFrameBuffer>
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3301      	adds	r3, #1
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d9eb      	bls.n	800132c <DrawHighScoresToFrameBuffer+0xc>
	}

}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <BlinkInitialBeingSet>:

static void BlinkInitialBeingSet(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
	if(_blinkState == true){
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <BlinkInitialBeingSet+0x8c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d11e      	bne.n	80013ac <BlinkInitialBeingSet+0x4c>
		_blinkState = false;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <BlinkInitialBeingSet+0x8c>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
		u8 colStart = _settingInitial * LCD_PCD8544_CHAR_WIDTH;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <BlinkInitialBeingSet+0x90>)
 8001376:	f993 3000 	ldrsb.w	r3, [r3]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	4413      	add	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	71fb      	strb	r3, [r7, #7]
		u8 row = _newHighScoreRank + 1;
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <BlinkInitialBeingSet+0x94>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	71bb      	strb	r3, [r7, #6]
		gfxClearFrameBufferRow(row,colStart,LCD_PCD8544_CHAR_WIDTH);
 800138e:	79f9      	ldrb	r1, [r7, #7]
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	2206      	movs	r2, #6
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fbc9 	bl	8000b2c <gfxClearFrameBufferRow>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,colStart + LCD_PCD8544_CHAR_WIDTH);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	3306      	adds	r3, #6
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	79b9      	ldrb	r1, [r7, #6]
 80013a2:	79b8      	ldrb	r0, [r7, #6]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f7ff f8d9 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
 80013aa:	e017      	b.n	80013dc <BlinkInitialBeingSet+0x7c>
	}
	else{
		_blinkState = true;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <BlinkInitialBeingSet+0x8c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
		u8 row = _newHighScoreRank + 1;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <BlinkInitialBeingSet+0x94>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <BlinkInitialBeingSet+0x94>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd44 	bl	8001e4c <TetrisHighScores_GetHighScoreAtIndex>
 80013c4:	60b8      	str	r0, [r7, #8]
		WriteSingleHighScoreToFrameBuffer(highScore, row);
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4619      	mov	r1, r3
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f7ff ff80 	bl	80012d0 <WriteSingleHighScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,LCD_PCD8544_CHAR_WIDTH*3);
 80013d0:	7bf9      	ldrb	r1, [r7, #15]
 80013d2:	7bf8      	ldrb	r0, [r7, #15]
 80013d4:	2312      	movs	r3, #18
 80013d6:	2200      	movs	r2, #0
 80013d8:	f7ff f8c0 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	}
	gfxFinishDrawing(&gLcdScreen);
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <BlinkInitialBeingSet+0x98>)
 80013de:	f7ff f9e5 	bl	80007ac <gfxFinishDrawing>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000020 	.word	0x20000020
 80013f0:	20000345 	.word	0x20000345
 80013f4:	20000344 	.word	0x20000344
 80013f8:	200005dc 	.word	0x200005dc

080013fc <TetrisEnterHighScore_Update>:

Tetris_Modes_StateTriggers TetrisEnterHighScore_Update(u32 timePassed){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	else{
		_isAnalogStickExtended = false;
	}
	*/
	HighScore* highScore;
	switch(EmulateDPad(&hadc2)){
 8001404:	4858      	ldr	r0, [pc, #352]	; (8001568 <TetrisEnterHighScore_Update+0x16c>)
 8001406:	f7fe ff87 	bl	8000318 <EmulateDPad>
 800140a:	4603      	mov	r3, r0
 800140c:	3b01      	subs	r3, #1
 800140e:	2b03      	cmp	r3, #3
 8001410:	f200 808a 	bhi.w	8001528 <TetrisEnterHighScore_Update+0x12c>
 8001414:	a201      	add	r2, pc, #4	; (adr r2, 800141c <TetrisEnterHighScore_Update+0x20>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	0800142d 	.word	0x0800142d
 8001420:	08001479 	.word	0x08001479
 8001424:	080014c5 	.word	0x080014c5
 8001428:	080014f7 	.word	0x080014f7
	case UP:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <TetrisEnterHighScore_Update+0x170>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fd0b 	bl	8001e4c <TetrisHighScores_GetHighScoreAtIndex>
 8001436:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]++;
 8001438:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 800143a:	f993 3000 	ldrsb.w	r3, [r3]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	5cd2      	ldrb	r2, [r2, r3]
 8001442:	3201      	adds	r2, #1
 8001444:	b2d1      	uxtb	r1, r2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] > 'Z'){
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 800144c:	f993 3000 	ldrsb.w	r3, [r3]
 8001450:	461a      	mov	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	5c9b      	ldrb	r3, [r3, r2]
 8001456:	2b5a      	cmp	r3, #90	; 0x5a
 8001458:	d906      	bls.n	8001468 <TetrisEnterHighScore_Update+0x6c>
			highScore->Initials[_settingInitial] = 'A';
 800145a:	4b45      	ldr	r3, [pc, #276]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 800145c:	f993 3000 	ldrsb.w	r3, [r3]
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2141      	movs	r1, #65	; 0x41
 8001466:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <TetrisEnterHighScore_Update+0x178>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001470:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001474:	601a      	str	r2, [r3, #0]
		break;
 8001476:	e057      	b.n	8001528 <TetrisEnterHighScore_Update+0x12c>
	case DOWN:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <TetrisEnterHighScore_Update+0x170>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fce5 	bl	8001e4c <TetrisHighScores_GetHighScoreAtIndex>
 8001482:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]--;
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 8001486:	f993 3000 	ldrsb.w	r3, [r3]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	5cd2      	ldrb	r2, [r2, r3]
 800148e:	3a01      	subs	r2, #1
 8001490:	b2d1      	uxtb	r1, r2
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] < 'A'){
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 8001498:	f993 3000 	ldrsb.w	r3, [r3]
 800149c:	461a      	mov	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	5c9b      	ldrb	r3, [r3, r2]
 80014a2:	2b40      	cmp	r3, #64	; 0x40
 80014a4:	d806      	bhi.n	80014b4 <TetrisEnterHighScore_Update+0xb8>
			highScore->Initials[_settingInitial] = 'Z';
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014a8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	215a      	movs	r1, #90	; 0x5a
 80014b2:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <TetrisEnterHighScore_Update+0x178>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80014ba:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 80014bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014c0:	601a      	str	r2, [r3, #0]
		break;
 80014c2:	e031      	b.n	8001528 <TetrisEnterHighScore_Update+0x12c>
	case LEFT:
		_settingInitial--;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014c6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014d4:	701a      	strb	r2, [r3, #0]
		if(_settingInitial < 0){
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014d8:	f993 3000 	ldrsb.w	r3, [r3]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da02      	bge.n	80014e6 <TetrisEnterHighScore_Update+0xea>
			_settingInitial = 2;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014e2:	2202      	movs	r2, #2
 80014e4:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <TetrisEnterHighScore_Update+0x178>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 80014ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014f2:	601a      	str	r2, [r3, #0]
		break;
 80014f4:	e018      	b.n	8001528 <TetrisEnterHighScore_Update+0x12c>
	case RIGHT:
		_settingInitial++;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b25a      	sxtb	r2, r3
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 8001506:	701a      	strb	r2, [r3, #0]
		if(_settingInitial >= 3){
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 800150a:	f993 3000 	ldrsb.w	r3, [r3]
 800150e:	2b02      	cmp	r3, #2
 8001510:	dd02      	ble.n	8001518 <TetrisEnterHighScore_Update+0x11c>
			_settingInitial = 0;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <TetrisEnterHighScore_Update+0x178>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001520:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001524:	601a      	str	r2, [r3, #0]
		break;
 8001526:	bf00      	nop
	}

	_blinkTimer += timePassed;
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001532:	6013      	str	r3, [r2, #0]
	if(_blinkTimer >= ENTER_INITIAL_BLINK_PERIOD){
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800153c:	d304      	bcc.n	8001548 <TetrisEnterHighScore_Update+0x14c>
		_blinkTimer = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
		BlinkInitialBeingSet();
 8001544:	f7ff ff0c 	bl	8001360 <BlinkInitialBeingSet>
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8001548:	2101      	movs	r1, #1
 800154a:	480c      	ldr	r0, [pc, #48]	; (800157c <TetrisEnterHighScore_Update+0x180>)
 800154c:	f003 f892 	bl	8004674 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	72fb      	strb	r3, [r7, #11]
	if(buttonBState == GPIO_PIN_SET){
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <TetrisEnterHighScore_Update+0x162>
		return HighScoreEntered;
 800155a:	2305      	movs	r3, #5
 800155c:	e000      	b.n	8001560 <TetrisEnterHighScore_Update+0x164>
	}

	return NoChange;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200007f8 	.word	0x200007f8
 800156c:	20000344 	.word	0x20000344
 8001570:	20000345 	.word	0x20000345
 8001574:	20000020 	.word	0x20000020
 8001578:	20000348 	.word	0x20000348
 800157c:	48000400 	.word	0x48000400

08001580 <TetrisEnterHighScore_OnEnter>:

void TetrisEnterHighScore_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
	_newHighScore = *((u32*)stateMachineDataPtr);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a24      	ldr	r2, [pc, #144]	; (8001624 <TetrisEnterHighScore_OnEnter+0xa4>)
 8001592:	6013      	str	r3, [r2, #0]
	_newHighScoreRank = TetrisHighScores_AddHighScore(_newHighScore);
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <TetrisEnterHighScore_OnEnter+0xa4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fc89 	bl	8001eb0 <TetrisHighScores_AddHighScore>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <TetrisEnterHighScore_OnEnter+0xa8>)
 80015a4:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 80015a6:	f7fe ff93 	bl	80004d0 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 80015aa:	f7ff fa5d 	bl	8000a68 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 80015ae:	2354      	movs	r3, #84	; 0x54
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7fe ffd1 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 80015ba:	2354      	movs	r3, #84	; 0x54
 80015bc:	2200      	movs	r2, #0
 80015be:	2101      	movs	r1, #1
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7fe ffcb 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 80015c6:	2354      	movs	r3, #84	; 0x54
 80015c8:	2200      	movs	r2, #0
 80015ca:	2102      	movs	r1, #2
 80015cc:	2002      	movs	r0, #2
 80015ce:	f7fe ffc5 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(3,3,0,84);
 80015d2:	2354      	movs	r3, #84	; 0x54
 80015d4:	2200      	movs	r2, #0
 80015d6:	2103      	movs	r1, #3
 80015d8:	2003      	movs	r0, #3
 80015da:	f7fe ffbf 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(4,4,0,84);
 80015de:	2354      	movs	r3, #84	; 0x54
 80015e0:	2200      	movs	r2, #0
 80015e2:	2104      	movs	r1, #4
 80015e4:	2004      	movs	r0, #4
 80015e6:	f7fe ffb9 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(5,5,0,84);
 80015ea:	2354      	movs	r3, #84	; 0x54
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	2005      	movs	r0, #5
 80015f2:	f7fe ffb3 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	gfxWriteTextLineToFrameBuffer(0,0,"High Score");
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <TetrisEnterHighScore_OnEnter+0xac>)
 80015f8:	2100      	movs	r1, #0
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff f98a 	bl	8000914 <gfxWriteTextLineToFrameBuffer>
	DrawHighScoresToFrameBuffer();
 8001600:	f7ff fe8e 	bl	8001320 <DrawHighScoresToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <TetrisEnterHighScore_OnEnter+0xb0>)
 8001606:	f7ff f8d1 	bl	80007ac <gfxFinishDrawing>
	_settingInitial = 0;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <TetrisEnterHighScore_OnEnter+0xb4>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
	_blinkTimer = 0;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <TetrisEnterHighScore_OnEnter+0xb8>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	_blinkState = true;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <TetrisEnterHighScore_OnEnter+0xbc>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]

}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000340 	.word	0x20000340
 8001628:	20000344 	.word	0x20000344
 800162c:	08008350 	.word	0x08008350
 8001630:	200005dc 	.word	0x200005dc
 8001634:	20000345 	.word	0x20000345
 8001638:	20000348 	.word	0x20000348
 800163c:	20000020 	.word	0x20000020

08001640 <TetrisEnterHighScore_OnExit>:

void TetrisEnterHighScore_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <TetrisEnterHighScore_OnExit+0x20>)
 800164e:	f7ff fa3b 	bl	8000ac8 <ClearScreen>
	TetrisPersistantData_SaveAllPersistantData();
 8001652:	f000 fe6b 	bl	800232c <TetrisPersistantData_SaveAllPersistantData>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200005dc 	.word	0x200005dc

08001664 <GetRandomNumberBetweenZeroAndSix>:

static u8 _currentLevel = 5;

static void InitCurrentLevelTetrisScores();

static u8 GetRandomNumberBetweenZeroAndSix(){
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 8001668:	f005 fc5a 	bl	8006f20 <rand>
 800166c:	4603      	mov	r3, r0
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <GetRandomNumberBetweenZeroAndSix+0x28>)
 8001672:	fba3 1302 	umull	r1, r3, r3, r2
 8001676:	1ad1      	subs	r1, r2, r3
 8001678:	0849      	lsrs	r1, r1, #1
 800167a:	440b      	add	r3, r1
 800167c:	0899      	lsrs	r1, r3, #2
 800167e:	460b      	mov	r3, r1
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	1a5b      	subs	r3, r3, r1
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	b2db      	uxtb	r3, r3
}
 8001688:	4618      	mov	r0, r3
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24924925 	.word	0x24924925

08001690 <DrawStationaryBlock>:


static void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4604      	mov	r4, r0
 8001698:	4608      	mov	r0, r1
 800169a:	4611      	mov	r1, r2
 800169c:	461a      	mov	r2, r3
 800169e:	4623      	mov	r3, r4
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	4603      	mov	r3, r0
 80016a4:	71bb      	strb	r3, [r7, #6]
 80016a6:	460b      	mov	r3, r1
 80016a8:	717b      	strb	r3, [r7, #5]
 80016aa:	4613      	mov	r3, r2
 80016ac:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 80016ae:	793b      	ldrb	r3, [r7, #4]
 80016b0:	797a      	ldrb	r2, [r7, #5]
 80016b2:	79b9      	ldrb	r1, [r7, #6]
 80016b4:	79f8      	ldrb	r0, [r7, #7]
 80016b6:	f7ff f9ab 	bl	8000a10 <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 80016ba:	793b      	ldrb	r3, [r7, #4]
 80016bc:	797a      	ldrb	r2, [r7, #5]
 80016be:	79b9      	ldrb	r1, [r7, #6]
 80016c0:	79f8      	ldrb	r0, [r7, #7]
 80016c2:	f7ff f82e 	bl	8000722 <gfxDrawLine>
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}
	...

080016d0 <WriteLevelToFrameBuffer>:

static void WriteLevelToFrameBuffer(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
	u8 levelBuffer[11];
	sprintf(levelBuffer, "Lvl: %lu",_currentLevel);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <WriteLevelToFrameBuffer+0x2c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <WriteLevelToFrameBuffer+0x30>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f005 fc5b 	bl	8006f9c <siprintf>
	gfxWriteTextLineToFrameBuffer(2,TETRIS_BOARD_RIGHT_EDGE_COL + 1,levelBuffer);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	461a      	mov	r2, r3
 80016ea:	2126      	movs	r1, #38	; 0x26
 80016ec:	2002      	movs	r0, #2
 80016ee:	f7ff f911 	bl	8000914 <gfxWriteTextLineToFrameBuffer>

}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000002b 	.word	0x2000002b
 8001700:	0800835c 	.word	0x0800835c

08001704 <SetLevel>:

static void SetLevel(u8 level){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	_currentLevel = level;
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <SetLevel+0x34>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	7013      	strb	r3, [r2, #0]
	_newLevelToDisplay = true;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <SetLevel+0x38>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
	_autoMoveInterval = _levelsMoveIntervals[_currentLevel];
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <SetLevel+0x34>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <SetLevel+0x3c>)
 8001722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <SetLevel+0x40>)
 8001728:	6013      	str	r3, [r2, #0]
	InitCurrentLevelTetrisScores();
 800172a:	f000 f963 	bl	80019f4 <InitCurrentLevelTetrisScores>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000002b 	.word	0x2000002b
 800173c:	20000029 	.word	0x20000029
 8001740:	08008a10 	.word	0x08008a10
 8001744:	20000024 	.word	0x20000024

08001748 <OnLinesCleared>:

static void OnLinesCleared(u8 numLinesCleared){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <OnLinesCleared+0xa4>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <OnLinesCleared+0xa4>)
 8001760:	801a      	strh	r2, [r3, #0]
	if(_linesCleared >= TETRIS_LINES_PER_LEVEL_UP){
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <OnLinesCleared+0xa4>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	2b09      	cmp	r3, #9
 8001768:	d909      	bls.n	800177e <OnLinesCleared+0x36>
		_linesCleared = 0;
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <OnLinesCleared+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	801a      	strh	r2, [r3, #0]
		SetLevel(_currentLevel + 1);
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <OnLinesCleared+0xa8>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ffc3 	bl	8001704 <SetLevel>
	}
	switch(numLinesCleared){
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	3b01      	subs	r3, #1
 8001782:	2b03      	cmp	r3, #3
 8001784:	d82a      	bhi.n	80017dc <OnLinesCleared+0x94>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <OnLinesCleared+0x44>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017ad 	.word	0x080017ad
 8001794:	080017bd 	.word	0x080017bd
 8001798:	080017cd 	.word	0x080017cd
	case 1:
		_score += _currentLevelTetrisScores[0];
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <OnLinesCleared+0xac>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <OnLinesCleared+0xb0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <OnLinesCleared+0xb0>)
 80017a8:	6013      	str	r3, [r2, #0]
		break;
 80017aa:	e017      	b.n	80017dc <OnLinesCleared+0x94>
	case 2:
		_score += _currentLevelTetrisScores[1];
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <OnLinesCleared+0xac>)
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <OnLinesCleared+0xb0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <OnLinesCleared+0xb0>)
 80017b8:	6013      	str	r3, [r2, #0]
		break;
 80017ba:	e00f      	b.n	80017dc <OnLinesCleared+0x94>
	case 3:
		_score += _currentLevelTetrisScores[2];
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <OnLinesCleared+0xac>)
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <OnLinesCleared+0xb0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <OnLinesCleared+0xb0>)
 80017c8:	6013      	str	r3, [r2, #0]
		break;
 80017ca:	e007      	b.n	80017dc <OnLinesCleared+0x94>
	case 4:
		_score += _currentLevelTetrisScores[3];
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <OnLinesCleared+0xac>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <OnLinesCleared+0xb0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <OnLinesCleared+0xb0>)
 80017d8:	6013      	str	r3, [r2, #0]
		break;
 80017da:	bf00      	nop
	}
	_newScoreToDisplay = true;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <OnLinesCleared+0xb4>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000352 	.word	0x20000352
 80017f0:	2000002b 	.word	0x2000002b
 80017f4:	2000035c 	.word	0x2000035c
 80017f8:	20000354 	.word	0x20000354
 80017fc:	20000028 	.word	0x20000028

08001800 <OnGameOver>:

static void OnGameOver(){
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	// Not used
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <IncrementTetrisTimer>:

static void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <IncrementTetrisTimer+0x44>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <IncrementTetrisTimer+0x44>)
 8001826:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <IncrementTetrisTimer+0x44>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <IncrementTetrisTimer+0x48>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d90b      	bls.n	800184c <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 800183a:	f7ff fcc7 	bl	80011cc <Tetris_MoveDown>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <IncrementTetrisTimer+0x4c>)
 8001844:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 8001846:	4b03      	ldr	r3, [pc, #12]	; (8001854 <IncrementTetrisTimer+0x44>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
	}
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	2000034c 	.word	0x2000034c
 8001858:	20000024 	.word	0x20000024
 800185c:	2000002a 	.word	0x2000002a

08001860 <WriteScoreToFrameBuffer>:

static void WriteScoreToFrameBuffer(){
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%lu",_score);
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <WriteScoreToFrameBuffer+0x28>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	463b      	mov	r3, r7
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <WriteScoreToFrameBuffer+0x2c>)
 800186e:	4618      	mov	r0, r3
 8001870:	f005 fb94 	bl	8006f9c <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 8001874:	463b      	mov	r3, r7
 8001876:	461a      	mov	r2, r3
 8001878:	2126      	movs	r1, #38	; 0x26
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff f84a 	bl	8000914 <gfxWriteTextLineToFrameBuffer>

}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000354 	.word	0x20000354
 800188c:	08008368 	.word	0x08008368

08001890 <UpdateTetrisGame>:


static void UpdateTetrisGame(u32 timePassed){
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 8001898:	f107 0208 	add.w	r2, r7, #8
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	4826      	ldr	r0, [pc, #152]	; (800193c <UpdateTetrisGame+0xac>)
 80018a4:	f7fe fcec 	bl	8000280 <ReadAnalogStickChange>

	bool movingDown = true;
 80018a8:	2301      	movs	r3, #1
 80018aa:	75fb      	strb	r3, [r7, #23]

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80018ac:	2101      	movs	r1, #1
 80018ae:	4824      	ldr	r0, [pc, #144]	; (8001940 <UpdateTetrisGame+0xb0>)
 80018b0:	f002 fee0 	bl	8004674 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	75bb      	strb	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	613b      	str	r3, [r7, #16]
	if(analogXChange > (twelveBitMax/3)){
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4a20      	ldr	r2, [pc, #128]	; (8001944 <UpdateTetrisGame+0xb4>)
 80018c2:	fb82 1203 	smull	r1, r2, r2, r3
 80018c6:	17db      	asrs	r3, r3, #31
 80018c8:	1ad2      	subs	r2, r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	da02      	bge.n	80018d6 <UpdateTetrisGame+0x46>
		Tetris_MoveRight();
 80018d0:	f7ff fce0 	bl	8001294 <Tetris_MoveRight>
 80018d4:	e01c      	b.n	8001910 <UpdateTetrisGame+0x80>
	}
	else if(analogXChange < -(twelveBitMax/3)){
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <UpdateTetrisGame+0xb4>)
 80018da:	fb82 1203 	smull	r1, r2, r2, r3
 80018de:	17db      	asrs	r3, r3, #31
 80018e0:	1a9a      	subs	r2, r3, r2
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dd02      	ble.n	80018ee <UpdateTetrisGame+0x5e>
		Tetris_MoveLeft();
 80018e8:	f7ff fcb6 	bl	8001258 <Tetris_MoveLeft>
 80018ec:	e010      	b.n	8001910 <UpdateTetrisGame+0x80>
	}
	else if(analogYChange > (twelveBitMax/3)){
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <UpdateTetrisGame+0xb4>)
 80018f2:	fb82 1203 	smull	r1, r2, r2, r3
 80018f6:	17db      	asrs	r3, r3, #31
 80018f8:	1ad2      	subs	r2, r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	da07      	bge.n	8001910 <UpdateTetrisGame+0x80>
		_movingDownResult = Tetris_MoveDown();
 8001900:	f7ff fc64 	bl	80011cc <Tetris_MoveDown>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <UpdateTetrisGame+0xb8>)
 800190a:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 8001910:	7dbb      	ldrb	r3, [r7, #22]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d105      	bne.n	8001922 <UpdateTetrisGame+0x92>
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <UpdateTetrisGame+0xbc>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <UpdateTetrisGame+0x92>
		Tetris_Rotate();
 800191e:	f7ff fc2f 	bl	8001180 <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <UpdateTetrisGame+0xbc>)
 8001924:	7dbb      	ldrb	r3, [r7, #22]
 8001926:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	4619      	mov	r1, r3
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff6f 	bl	8001810 <IncrementTetrisTimer>

}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200007f8 	.word	0x200007f8
 8001940:	48000400 	.word	0x48000400
 8001944:	55555556 	.word	0x55555556
 8001948:	2000002a 	.word	0x2000002a
 800194c:	20000350 	.word	0x20000350

08001950 <DrawTetrisGame>:

static void DrawTetrisGame(){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	gfxClearFrameBuffer();
 8001954:	f7fe fdbc 	bl	80004d0 <gfxClearFrameBuffer>

	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <DrawTetrisGame+0x94>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d003      	beq.n	8001968 <DrawTetrisGame+0x18>
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <DrawTetrisGame+0x94>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d101      	bne.n	800196c <DrawTetrisGame+0x1c>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <DrawTetrisGame+0x1e>
 800196c:	2300      	movs	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fa05 	bl	8000d80 <Tetris_DrawTetrisBoard>

	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 8001976:	2325      	movs	r3, #37	; 0x25
 8001978:	2204      	movs	r2, #4
 800197a:	2105      	movs	r1, #5
 800197c:	2000      	movs	r0, #0
 800197e:	f7fe fded 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <DrawTetrisGame+0x94>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d003      	beq.n	8001992 <DrawTetrisGame+0x42>
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <DrawTetrisGame+0x94>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d105      	bne.n	800199e <DrawTetrisGame+0x4e>
		/* update the area where the next block is shown */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 8001992:	2335      	movs	r3, #53	; 0x35
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	2000      	movs	r0, #0
 800199a:	f7fe fddf 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay == true){
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <DrawTetrisGame+0x98>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10a      	bne.n	80019bc <DrawTetrisGame+0x6c>
		/* Update the new area of the screen with the new score.
		 * TODO: get actual length of score string instead of using 84 */
		WriteScoreToFrameBuffer();
 80019a6:	f7ff ff5b 	bl	8001860 <WriteScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 80019aa:	2354      	movs	r3, #84	; 0x54
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7fe fdd3 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <DrawTetrisGame+0x98>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
	}
	if(_newLevelToDisplay){
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <DrawTetrisGame+0x9c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00a      	beq.n	80019da <DrawTetrisGame+0x8a>
		WriteLevelToFrameBuffer();
 80019c4:	f7ff fe84 	bl	80016d0 <WriteLevelToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 80019c8:	2354      	movs	r3, #84	; 0x54
 80019ca:	2200      	movs	r2, #0
 80019cc:	2102      	movs	r1, #2
 80019ce:	2002      	movs	r0, #2
 80019d0:	f7fe fdc4 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newLevelToDisplay = false;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <DrawTetrisGame+0x9c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <DrawTetrisGame+0xa0>)
 80019dc:	f7fe fee6 	bl	80007ac <gfxFinishDrawing>
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000002a 	.word	0x2000002a
 80019e8:	20000028 	.word	0x20000028
 80019ec:	20000029 	.word	0x20000029
 80019f0:	200005dc 	.word	0x200005dc

080019f4 <InitCurrentLevelTetrisScores>:

static void InitCurrentLevelTetrisScores(){
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	/* score setting function derived from information from https://tetris.fandom.com/wiki/Scoring */

	if(_currentLevel == 0){
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10e      	bne.n	8001a1e <InitCurrentLevelTetrisScores+0x2a>
		_currentLevelTetrisScores[0] = 40;
 8001a00:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a02:	2228      	movs	r2, #40	; 0x28
 8001a04:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100;
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a08:	2264      	movs	r2, #100	; 0x64
 8001a0a:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300;
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a12:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200;
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a16:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001a1a:	60da      	str	r2, [r3, #12]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);

	}
}
 8001a1c:	e066      	b.n	8001aec <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 1){
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10e      	bne.n	8001a44 <InitCurrentLevelTetrisScores+0x50>
		_currentLevelTetrisScores[0] = 80;
 8001a26:	4b35      	ldr	r3, [pc, #212]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a28:	2250      	movs	r2, #80	; 0x50
 8001a2a:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 200;
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a2e:	22c8      	movs	r2, #200	; 0xc8
 8001a30:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 600;
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a34:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001a38:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 2400;
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a3c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001a40:	60da      	str	r2, [r3, #12]
}
 8001a42:	e053      	b.n	8001aec <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel >=2 && _currentLevel < 9){
 8001a44:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d913      	bls.n	8001a74 <InitCurrentLevelTetrisScores+0x80>
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d80f      	bhi.n	8001a74 <InitCurrentLevelTetrisScores+0x80>
		_currentLevelTetrisScores[0] = 120;
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a56:	2278      	movs	r2, #120	; 0x78
 8001a58:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 300;
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a60:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 900;
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a64:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001a68:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 3600;
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a6c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001a70:	60da      	str	r2, [r3, #12]
}
 8001a72:	e03b      	b.n	8001aec <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 9){
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b09      	cmp	r3, #9
 8001a7a:	d110      	bne.n	8001a9e <InitCurrentLevelTetrisScores+0xaa>
		_currentLevelTetrisScores[0] = 400;
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a82:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 1000;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a8a:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 3000;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a8e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a92:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 12000;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a96:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001a9a:	60da      	str	r2, [r3, #12]
}
 8001a9c:	e026      	b.n	8001aec <InitCurrentLevelTetrisScores+0xf8>
		_currentLevelTetrisScores[0] = 40 * (_currentLevel + 1);
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001ab0:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	2264      	movs	r2, #100	; 0x64
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001ac2:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001ad6:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001aea:	60da      	str	r2, [r3, #12]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	2000002b 	.word	0x2000002b
 8001afc:	2000035c 	.word	0x2000035c

08001b00 <CheckForHighScore>:


Tetris_Modes_StateTriggers CheckForHighScore(){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	if(TetrisHighScores_IsNewHighScore(_score) == true){
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <CheckForHighScore+0x24>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f97f 	bl	8001e0c <TetrisHighScores_IsNewHighScore>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d104      	bne.n	8001b1e <CheckForHighScore+0x1e>
		TetrisMain_SetStateMachineDataPointer(&_score);
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <CheckForHighScore+0x24>)
 8001b16:	f000 fb03 	bl	8002120 <TetrisMain_SetStateMachineDataPointer>
		return GameOverNewHighScore;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e000      	b.n	8001b20 <CheckForHighScore+0x20>
	}
	else{
		return GameOver;
 8001b1e:	2302      	movs	r3, #2
	}
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000354 	.word	0x20000354

08001b28 <TetrisGame_Update>:


Tetris_Modes_StateTriggers TetrisGame_Update(u32 timePassed){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	UpdateTetrisGame(timePassed);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fead 	bl	8001890 <UpdateTetrisGame>
	DrawTetrisGame();
 8001b36:	f7ff ff0b 	bl	8001950 <DrawTetrisGame>
	if(_movingDownResult == MoveDownResultGameOver){
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <TetrisGame_Update+0x2c>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d103      	bne.n	8001b4a <TetrisGame_Update+0x22>
		return CheckForHighScore();
 8001b42:	f7ff ffdd 	bl	8001b00 <CheckForHighScore>
 8001b46:	4603      	mov	r3, r0
 8001b48:	e000      	b.n	8001b4c <TetrisGame_Update+0x24>
	}
	return NoChange;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000002a 	.word	0x2000002a

08001b58 <TetrisGame_Init>:



void TetrisGame_Init(){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af02      	add	r7, sp, #8
	Tetris_Init(
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <TetrisGame_Init+0x20>)
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <TetrisGame_Init+0x24>)
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <TetrisGame_Init+0x28>)
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <TetrisGame_Init+0x2c>)
 8001b6a:	4907      	ldr	r1, [pc, #28]	; (8001b88 <TetrisGame_Init+0x30>)
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <TetrisGame_Init+0x2c>)
 8001b6e:	f7ff f9dd 	bl	8000f2c <Tetris_Init>
			&DrawStationaryBlock,
			&gfxDrawAxisAlignedRect,
			&GetRandomNumberBetweenZeroAndSix,
			&OnLinesCleared,
			&OnGameOver);
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	08001801 	.word	0x08001801
 8001b7c:	08001749 	.word	0x08001749
 8001b80:	08001665 	.word	0x08001665
 8001b84:	08000a11 	.word	0x08000a11
 8001b88:	08001691 	.word	0x08001691

08001b8c <TetrisGame_OnEnter>:

void TetrisGame_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
	if(previousState == LevelSelect || previousState == NoState){
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <TetrisGame_OnEnter+0x18>
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d103      	bne.n	8001bac <TetrisGame_OnEnter+0x20>
		_startLevel = *((u8*)stateMachineDataPtr);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <TetrisGame_OnEnter+0x54>)
 8001baa:	701a      	strb	r2, [r3, #0]
	}
	SetLevel(_startLevel);
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <TetrisGame_OnEnter+0x54>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fda7 	bl	8001704 <SetLevel>
	Tetris_ResetTetrisBoard();
 8001bb6:	f7ff f9a9 	bl	8000f0c <Tetris_ResetTetrisBoard>
	InitCurrentLevelTetrisScores();
 8001bba:	f7ff ff1b 	bl	80019f4 <InitCurrentLevelTetrisScores>
	_movingDownResult = Settled;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <TetrisGame_OnEnter+0x58>)
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	701a      	strb	r2, [r3, #0]
	_score = 0;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <TetrisGame_OnEnter+0x5c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
	_newScoreToDisplay = true;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <TetrisGame_OnEnter+0x60>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
	_newLevelToDisplay = true;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <TetrisGame_OnEnter+0x64>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000358 	.word	0x20000358
 8001be4:	2000002a 	.word	0x2000002a
 8001be8:	20000354 	.word	0x20000354
 8001bec:	20000028 	.word	0x20000028
 8001bf0:	20000029 	.word	0x20000029

08001bf4 <TetrisGame_OnExit>:



void TetrisGame_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <TetrisGame_OnExit+0x1c>)
 8001c02:	f7fe ff61 	bl	8000ac8 <ClearScreen>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200005dc 	.word	0x200005dc

08001c14 <SetHighScoreCellSize>:
		{{'c','p','u'}, 2500},
};
static u32 _highScoreCellSize = 0;
static u32 _nextHighScoreSaveAddress = 0;

static void SetHighScoreCellSize(){
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
	u32 size = sizeof(HighScore);
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	607b      	str	r3, [r7, #4]
	_highScoreCellSize = size;
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <SetHighScoreCellSize+0x38>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6013      	str	r3, [r2, #0]

	while(_highScoreCellSize % 4 != 0)
 8001c24:	e004      	b.n	8001c30 <SetHighScoreCellSize+0x1c>
		_highScoreCellSize++;
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <SetHighScoreCellSize+0x38>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <SetHighScoreCellSize+0x38>)
 8001c2e:	6013      	str	r3, [r2, #0]
	while(_highScoreCellSize % 4 != 0)
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <SetHighScoreCellSize+0x38>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f4      	bne.n	8001c26 <SetHighScoreCellSize+0x12>

}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000036c 	.word	0x2000036c

08001c50 <LoadHighScores>:
static void LoadHighScores(HighScore* output, u32 startAddress){
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e026      	b.n	8001cae <LoadHighScores+0x5e>
		HighScore* hs = startAddress + (i * _highScoreCellSize);
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <LoadHighScores+0x74>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	fb03 f202 	mul.w	r2, r3, r2
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
		output[i].Initials[0] = hs->Initials[0];
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	7812      	ldrb	r2, [r2, #0]
 8001c7c:	701a      	strb	r2, [r3, #0]
		output[i].Initials[1] = hs->Initials[1];
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	7852      	ldrb	r2, [r2, #1]
 8001c8a:	705a      	strb	r2, [r3, #1]
		output[i].Initials[2] = hs->Initials[2];
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	7892      	ldrb	r2, [r2, #2]
 8001c98:	709a      	strb	r2, [r3, #2]
		output[i].Score = hs->Score;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	6852      	ldr	r2, [r2, #4]
 8001ca6:	605a      	str	r2, [r3, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3301      	adds	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d9d5      	bls.n	8001c60 <LoadHighScores+0x10>
	}

}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000036c 	.word	0x2000036c

08001cc8 <SaveSingleHighScore>:

static void SaveSingleHighScore(HighScore* input, u32 address){
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e016      	b.n	8001d06 <SaveSingleHighScore+0x3e>
		u32 wordToWrite = *((u32*)input + i);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address + (i*4), wordToWrite);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	18d1      	adds	r1, r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	4615      	mov	r5, r2
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	462b      	mov	r3, r5
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f002 fa14 	bl	8004128 <HAL_FLASH_Program>
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SaveSingleHighScore+0x54>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	089a      	lsrs	r2, r3, #2
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d8e2      	bhi.n	8001cd8 <SaveSingleHighScore+0x10>
	}
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	2000036c 	.word	0x2000036c

08001d20 <SaveHighScores>:

static void SaveHighScores(HighScore* input, u32 addressToWrite){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e00f      	b.n	8001d50 <SaveHighScores+0x30>
		SaveSingleHighScore(&input[i], addressToWrite);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ffc4 	bl	8001cc8 <SaveSingleHighScore>
		addressToWrite += _highScoreCellSize;
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <SaveHighScores+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	603b      	str	r3, [r7, #0]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d9ec      	bls.n	8001d30 <SaveHighScores+0x10>
	}

}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000036c 	.word	0x2000036c

08001d64 <SeekLatestHighScoresStartAddress>:

u32 SeekLatestHighScoresStartAddress(){
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
	if(_highScoreCellSize == 0){
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <SeekLatestHighScoresStartAddress+0x4c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <SeekLatestHighScoresStartAddress+0x12>
		return 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e016      	b.n	8001da4 <SeekLatestHighScoresStartAddress+0x40>
	}
	u32 rval = FINAL_PAGE_START_ADDRESS;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <SeekLatestHighScoresStartAddress+0x50>)
 8001d78:	607b      	str	r3, [r7, #4]
	do{
		rval += (NUM_HIGHSCORES_SAVED * _highScoreCellSize);
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <SeekLatestHighScoresStartAddress+0x4c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	607b      	str	r3, [r7, #4]

	}
	while(*(((u32*)(rval))+ 1) != 0xFFFFFFFF);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d1f1      	bne.n	8001d7a <SeekLatestHighScoresStartAddress+0x16>

	return (rval - (NUM_HIGHSCORES_SAVED * _highScoreCellSize));
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <SeekLatestHighScoresStartAddress+0x4c>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	1ad3      	subs	r3, r2, r3

}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	2000036c 	.word	0x2000036c
 8001db4:	0800f800 	.word	0x0800f800

08001db8 <TetrisHighScores_Load>:


u32 TetrisHighScores_Load(){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0

	SetHighScoreCellSize();
 8001dbe:	f7ff ff29 	bl	8001c14 <SetHighScoreCellSize>
	u32 finalPage = FINAL_PAGE_START_ADDRESS;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <TetrisHighScores_Load+0x44>)
 8001dc4:	607b      	str	r3, [r7, #4]
	u32 startAddress = SeekLatestHighScoresStartAddress();
 8001dc6:	f7ff ffcd 	bl	8001d64 <SeekLatestHighScoresStartAddress>
 8001dca:	6038      	str	r0, [r7, #0]
	_nextHighScoreSaveAddress = startAddress + (NUM_HIGHSCORES_SAVED * _highScoreCellSize);
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <TetrisHighScores_Load+0x48>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	441a      	add	r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <TetrisHighScores_Load+0x4c>)
 8001ddc:	6013      	str	r3, [r2, #0]
	LoadHighScores(_highScores, startAddress);
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <TetrisHighScores_Load+0x50>)
 8001de2:	f7ff ff35 	bl	8001c50 <LoadHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <TetrisHighScores_Load+0x48>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	441a      	add	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4413      	add	r3, r2
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	0800f800 	.word	0x0800f800
 8001e00:	2000036c 	.word	0x2000036c
 8001e04:	20000370 	.word	0x20000370
 8001e08:	2000002c 	.word	0x2000002c

08001e0c <TetrisHighScores_IsNewHighScore>:


bool TetrisHighScores_IsNewHighScore(u32 potentialHighScore){
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e00c      	b.n	8001e34 <TetrisHighScores_IsNewHighScore+0x28>
		if(potentialHighScore > _highScores[i].Score){
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <TetrisHighScores_IsNewHighScore+0x3c>)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d901      	bls.n	8001e2e <TetrisHighScores_IsNewHighScore+0x22>
			return true;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e006      	b.n	8001e3c <TetrisHighScores_IsNewHighScore+0x30>
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3301      	adds	r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d9ef      	bls.n	8001e1a <TetrisHighScores_IsNewHighScore+0xe>
		}
	}
	return false;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	2000002c 	.word	0x2000002c

08001e4c <TetrisHighScores_GetHighScoreAtIndex>:

HighScore* TetrisHighScores_GetHighScoreAtIndex(u8 atIndex){
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	return &_highScores[atIndex];
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <TetrisHighScores_GetHighScoreAtIndex+0x20>)
 8001e5c:	4413      	add	r3, r2
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000002c 	.word	0x2000002c

08001e70 <TetrisHighScores_Save>:


u32 TetrisHighScores_Save(u32 startAddress){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	//SetHighScoreCellSize();

	SaveHighScores(_highScores, _nextHighScoreSaveAddress);
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <TetrisHighScores_Save+0x34>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480a      	ldr	r0, [pc, #40]	; (8001ea8 <TetrisHighScores_Save+0x38>)
 8001e80:	f7ff ff4e 	bl	8001d20 <SaveHighScores>
	//LoadHighScores(_highScores, _nextHighScoreSaveAddress);
	_nextHighScoreSaveAddress += (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <TetrisHighScores_Save+0x3c>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	441a      	add	r2, r3
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <TetrisHighScores_Save+0x34>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a03      	ldr	r2, [pc, #12]	; (8001ea4 <TetrisHighScores_Save+0x34>)
 8001e96:	6013      	str	r3, [r2, #0]
	//TetrisHighScores_Load();
	return _nextHighScoreSaveAddress;
 8001e98:	4b02      	ldr	r3, [pc, #8]	; (8001ea4 <TetrisHighScores_Save+0x34>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000370 	.word	0x20000370
 8001ea8:	2000002c 	.word	0x2000002c
 8001eac:	2000036c 	.word	0x2000036c

08001eb0 <TetrisHighScores_AddHighScore>:

u8 TetrisHighScores_AddHighScore(u32 highScore){
 8001eb0:	b480      	push	{r7}
 8001eb2:	b08b      	sub	sp, #44	; 0x2c
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

	u8 rval = 255;
 8001eb8:	23ff      	movs	r3, #255	; 0xff
 8001eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HighScore cachedHighScore;
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	e046      	b.n	8001f52 <TetrisHighScores_AddHighScore+0xa2>
		HighScore* thisHighScore = &_highScores[i];
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4a27      	ldr	r2, [pc, #156]	; (8001f68 <TetrisHighScores_AddHighScore+0xb8>)
 8001eca:	4413      	add	r3, r2
 8001ecc:	61fb      	str	r3, [r7, #28]

		if(highScore > thisHighScore->Score && rval == 255){
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d919      	bls.n	8001f0c <TetrisHighScores_AddHighScore+0x5c>
 8001ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001edc:	2bff      	cmp	r3, #255	; 0xff
 8001ede:	d115      	bne.n	8001f0c <TetrisHighScores_AddHighScore+0x5c>
			cachedHighScore = *thisHighScore;
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eea:	e883 0003 	stmia.w	r3, {r0, r1}
			rval = i;
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			thisHighScore->Score = highScore;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = 'A';
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	2241      	movs	r2, #65	; 0x41
 8001efe:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = 'A';
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2241      	movs	r2, #65	; 0x41
 8001f04:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = 'A';
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	2241      	movs	r2, #65	; 0x41
 8001f0a:	709a      	strb	r2, [r3, #2]

		}
		if(i > rval){
 8001f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f10:	6a3a      	ldr	r2, [r7, #32]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d91a      	bls.n	8001f4c <TetrisHighScores_AddHighScore+0x9c>
			HighScore cachedHighScore2 = *thisHighScore;
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f20:	e883 0003 	stmia.w	r3, {r0, r1}
			thisHighScore->Score = cachedHighScore.Score;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = cachedHighScore.Initials[0];
 8001f2a:	7d3a      	ldrb	r2, [r7, #20]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = cachedHighScore.Initials[1];
 8001f30:	7d7a      	ldrb	r2, [r7, #21]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = cachedHighScore.Initials[2];
 8001f36:	7dba      	ldrb	r2, [r7, #22]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	709a      	strb	r2, [r3, #2]
			cachedHighScore = cachedHighScore2;
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	f107 020c 	add.w	r2, r7, #12
 8001f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f48:	e883 0003 	stmia.w	r3, {r0, r1}
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	623b      	str	r3, [r7, #32]
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d9b5      	bls.n	8001ec4 <TetrisHighScores_AddHighScore+0x14>

		}

	}
	return rval;
 8001f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	372c      	adds	r7, #44	; 0x2c
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	2000002c 	.word	0x2000002c

08001f6c <WriteStartLevelToFrameBuffer>:
static i8 _startLevel = 3;
static bool _isAnalogStickExtended = false;

u32 randomSeed = 0;

void WriteStartLevelToFrameBuffer(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
	u8 stringBuffer[11];
	sprintf(stringBuffer,"Level: %lu",_startLevel);
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <WriteStartLevelToFrameBuffer+0x38>)
 8001f74:	f993 3000 	ldrsb.w	r3, [r3]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <WriteStartLevelToFrameBuffer+0x3c>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f005 f80c 	bl	8006f9c <siprintf>
	gfxClearFrameBufferRow(2,0,LCD_PCD8544_CHAR_WIDTH*11);
 8001f84:	2242      	movs	r2, #66	; 0x42
 8001f86:	2100      	movs	r1, #0
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f7fe fdcf 	bl	8000b2c <gfxClearFrameBufferRow>
	gfxWriteTextLineToFrameBuffer(2,0,stringBuffer);
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	461a      	mov	r2, r3
 8001f92:	2100      	movs	r1, #0
 8001f94:	2002      	movs	r0, #2
 8001f96:	f7fe fcbd 	bl	8000914 <gfxWriteTextLineToFrameBuffer>
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000054 	.word	0x20000054
 8001fa8:	0800836c 	.word	0x0800836c

08001fac <ChangeCurrentLevelUpOrDown>:

void ChangeCurrentLevelUpOrDown(i8 incOrDec){
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
	_startLevel += incOrDec;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	b25a      	sxtb	r2, r3
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001fc8:	701a      	strb	r2, [r3, #0]
	if(incOrDec < 0){
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	da08      	bge.n	8001fe4 <ChangeCurrentLevelUpOrDown+0x38>
		if(_startLevel < 0){
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001fd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da0f      	bge.n	8001ffc <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 15;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001fde:	220f      	movs	r2, #15
 8001fe0:	701a      	strb	r2, [r3, #0]
		}
	}
	else{

	}
}
 8001fe2:	e00b      	b.n	8001ffc <ChangeCurrentLevelUpOrDown+0x50>
	else if(incOrDec > 0){
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	dd07      	ble.n	8001ffc <ChangeCurrentLevelUpOrDown+0x50>
		if(_startLevel > 15){
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001fee:	f993 3000 	ldrsb.w	r3, [r3]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	dd02      	ble.n	8001ffc <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 0;
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	20000054 	.word	0x20000054

0800200c <TetrisLevelSelect_Update>:

Tetris_Modes_StateTriggers TetrisLevelSelect_Update(u32 TimePassed){
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	randomSeed += TimePassed;
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <TetrisLevelSelect_Update+0x9c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <TetrisLevelSelect_Update+0x9c>)
 800201e:	6013      	str	r3, [r2, #0]
	i32 analogYChange, analogXChange;
	ANALOG_STICK_DPAD_RESULT res = EmulateDPadReturningXAndYChange(&hadc2,&analogXChange,&analogYChange);
 8002020:	f107 0210 	add.w	r2, r7, #16
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4619      	mov	r1, r3
 800202a:	4820      	ldr	r0, [pc, #128]	; (80020ac <TetrisLevelSelect_Update+0xa0>)
 800202c:	f7fe f9de 	bl	80003ec <EmulateDPadReturningXAndYChange>
 8002030:	4603      	mov	r3, r0
 8002032:	75fb      	strb	r3, [r7, #23]
	switch(res){
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d002      	beq.n	8002040 <TetrisLevelSelect_Update+0x34>
 800203a:	2b02      	cmp	r3, #2
 800203c:	d00a      	beq.n	8002054 <TetrisLevelSelect_Update+0x48>
 800203e:	e014      	b.n	800206a <TetrisLevelSelect_Update+0x5e>
	case UP:
		ChangeCurrentLevelUpOrDown(1);
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff ffb3 	bl	8001fac <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <TetrisLevelSelect_Update+0x9c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <TetrisLevelSelect_Update+0x9c>)
 8002050:	6013      	str	r3, [r2, #0]
		break;
 8002052:	e00a      	b.n	800206a <TetrisLevelSelect_Update+0x5e>
	case DOWN:
		ChangeCurrentLevelUpOrDown(-1);
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f7ff ffa8 	bl	8001fac <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <TetrisLevelSelect_Update+0x9c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <TetrisLevelSelect_Update+0x9c>)
 8002066:	6013      	str	r3, [r2, #0]
		break;
 8002068:	bf00      	nop
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 800206a:	2101      	movs	r1, #1
 800206c:	4810      	ldr	r0, [pc, #64]	; (80020b0 <TetrisLevelSelect_Update+0xa4>)
 800206e:	f002 fb01 	bl	8004674 <HAL_GPIO_ReadPin>
 8002072:	4603      	mov	r3, r0
 8002074:	75bb      	strb	r3, [r7, #22]
	if(buttonBState == GPIO_PIN_SET){
 8002076:	7dbb      	ldrb	r3, [r7, #22]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d104      	bne.n	8002086 <TetrisLevelSelect_Update+0x7a>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <TetrisLevelSelect_Update+0xa8>)
 800207e:	f000 f84f 	bl	8002120 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 8002082:	2301      	movs	r3, #1
 8002084:	e00b      	b.n	800209e <TetrisLevelSelect_Update+0x92>
	}

	WriteStartLevelToFrameBuffer();
 8002086:	f7ff ff71 	bl	8001f6c <WriteStartLevelToFrameBuffer>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 800208a:	2354      	movs	r3, #84	; 0x54
 800208c:	2200      	movs	r2, #0
 800208e:	2102      	movs	r1, #2
 8002090:	2002      	movs	r0, #2
 8002092:	f7fe fa63 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <TetrisLevelSelect_Update+0xac>)
 8002098:	f7fe fb88 	bl	80007ac <gfxFinishDrawing>



	return NoChange;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000374 	.word	0x20000374
 80020ac:	200007f8 	.word	0x200007f8
 80020b0:	48000400 	.word	0x48000400
 80020b4:	20000054 	.word	0x20000054
 80020b8:	200005dc 	.word	0x200005dc

080020bc <TetrisLevelSelect_OnEnter>:

void TetrisLevelSelect_Init(){

}

void TetrisLevelSelect_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]
	gfxWriteTextLineToFrameBuffer(0,0,"Select Level");
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <TetrisLevelSelect_OnEnter+0x38>)
 80020ca:	2100      	movs	r1, #0
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7fe fc21 	bl	8000914 <gfxWriteTextLineToFrameBuffer>
	gfxClearFrameBuffer();
 80020d2:	f7fe f9fd 	bl	80004d0 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 80020d6:	f7fe fcc7 	bl	8000a68 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 80020da:	2354      	movs	r3, #84	; 0x54
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7fe fa3b 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 80020e6:	4804      	ldr	r0, [pc, #16]	; (80020f8 <TetrisLevelSelect_OnEnter+0x3c>)
 80020e8:	f7fe fb60 	bl	80007ac <gfxFinishDrawing>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	08008378 	.word	0x08008378
 80020f8:	200005dc 	.word	0x200005dc

080020fc <TetrisLevelSelect_OnExit>:

void TetrisLevelSelect_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
	srand(randomSeed);
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <TetrisLevelSelect_OnExit+0x20>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f004 fed9 	bl	8006ec4 <srand>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000374 	.word	0x20000374

08002120 <TetrisMain_SetStateMachineDataPointer>:
#define ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS 1


static void* _stateMachineDataPointer = 0;

void TetrisMain_SetStateMachineDataPointer(void* dataPtr){
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	_stateMachineDataPointer = dataPtr;
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <TetrisMain_SetStateMachineDataPointer+0x1c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000378 	.word	0x20000378

08002140 <TetrisMain_Init>:

static State _states[NumStates];
static Tetris_Modes_States _currentState = LevelSelect;


void TetrisMain_Init(){
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	/* Setup the state machines states */
	TetrisPersistantData_LoadAllPeristantData();
 8002146:	f000 f8e7 	bl	8002318 <TetrisPersistantData_LoadAllPeristantData>
	//TetrisPersistantData_SaveAllPersistantData();
	TetrisGame_Init();
 800214a:	f7ff fd05 	bl	8001b58 <TetrisGame_Init>
	u8 startLevel = 5;
 800214e:	2305      	movs	r3, #5
 8002150:	71fb      	strb	r3, [r7, #7]
	/* Lead-in to the first state */
	//TetrisGame_OnEnter(&startLevel,NoState);
	TetrisLevelSelect_OnEnter(0,NoState);
 8002152:	2104      	movs	r1, #4
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff ffb1 	bl	80020bc <TetrisLevelSelect_OnEnter>

	_states[Playing].NumTransitions = PLAYING_NUM_TRANSITIONS;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <TetrisMain_Init+0xa0>)
 800215c:	2202      	movs	r2, #2
 800215e:	f883 2020 	strb.w	r2, [r3, #32]
	_states[Playing].Transitions = _playingTransitions;
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <TetrisMain_Init+0xa0>)
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <TetrisMain_Init+0xa4>)
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
	_states[Playing].UpdateFunction = &TetrisGame_Update;
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <TetrisMain_Init+0xa0>)
 800216a:	4a1f      	ldr	r2, [pc, #124]	; (80021e8 <TetrisMain_Init+0xa8>)
 800216c:	615a      	str	r2, [r3, #20]
	_states[Playing].OnEnterFunction = &TetrisGame_OnEnter;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <TetrisMain_Init+0xa0>)
 8002170:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <TetrisMain_Init+0xac>)
 8002172:	619a      	str	r2, [r3, #24]
	_states[Playing].OnExitFunction = &TetrisGame_OnExit;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <TetrisMain_Init+0xa0>)
 8002176:	4a1e      	ldr	r2, [pc, #120]	; (80021f0 <TetrisMain_Init+0xb0>)
 8002178:	61da      	str	r2, [r3, #28]

	_states[LevelSelect].NumTransitions = LEVEL_SELECT_NUM_TRANSITIONS;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <TetrisMain_Init+0xa0>)
 800217c:	2201      	movs	r2, #1
 800217e:	731a      	strb	r2, [r3, #12]
	_states[LevelSelect].Transitions = _levelSelectTransitions;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <TetrisMain_Init+0xa0>)
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <TetrisMain_Init+0xb4>)
 8002184:	611a      	str	r2, [r3, #16]
	_states[LevelSelect].UpdateFunction = &TetrisLevelSelect_Update;
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <TetrisMain_Init+0xa0>)
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <TetrisMain_Init+0xb8>)
 800218a:	601a      	str	r2, [r3, #0]
	_states[LevelSelect].OnEnterFunction = &TetrisLevelSelect_OnEnter;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <TetrisMain_Init+0xa0>)
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <TetrisMain_Init+0xbc>)
 8002190:	605a      	str	r2, [r3, #4]
	_states[LevelSelect].OnExitFunction = &TetrisLevelSelect_OnExit;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <TetrisMain_Init+0xa0>)
 8002194:	4a1a      	ldr	r2, [pc, #104]	; (8002200 <TetrisMain_Init+0xc0>)
 8002196:	609a      	str	r2, [r3, #8]

	_states[PlayAgainDialogue].NumTransitions = PLAY_AGAIN_SCREEN_NUM_TRANSITIONS;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <TetrisMain_Init+0xa0>)
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	_states[PlayAgainDialogue].Transitions = _playAgainScreenTransitions;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <TetrisMain_Init+0xa0>)
 80021a2:	4a18      	ldr	r2, [pc, #96]	; (8002204 <TetrisMain_Init+0xc4>)
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
	_states[PlayAgainDialogue].UpdateFunction = &TetrisPlayAgain_Update;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <TetrisMain_Init+0xa0>)
 80021a8:	4a17      	ldr	r2, [pc, #92]	; (8002208 <TetrisMain_Init+0xc8>)
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
	_states[PlayAgainDialogue].OnEnterFunction = &TetrisPlayAgain_OnEnter;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <TetrisMain_Init+0xa0>)
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <TetrisMain_Init+0xcc>)
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
	_states[PlayAgainDialogue].OnExitFunction = &TetrisPlayAgain_OnExit;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <TetrisMain_Init+0xa0>)
 80021b4:	4a16      	ldr	r2, [pc, #88]	; (8002210 <TetrisMain_Init+0xd0>)
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30

	_states[EnterNewHighScoreScreen].NumTransitions = ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <TetrisMain_Init+0xa0>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	_states[EnterNewHighScoreScreen].Transitions = _enterNewHighScoreScreenTransitions;
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <TetrisMain_Init+0xa0>)
 80021c2:	4a14      	ldr	r2, [pc, #80]	; (8002214 <TetrisMain_Init+0xd4>)
 80021c4:	64da      	str	r2, [r3, #76]	; 0x4c
	_states[EnterNewHighScoreScreen].UpdateFunction = &TetrisEnterHighScore_Update;
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <TetrisMain_Init+0xa0>)
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <TetrisMain_Init+0xd8>)
 80021ca:	63da      	str	r2, [r3, #60]	; 0x3c
	_states[EnterNewHighScoreScreen].OnEnterFunction = &TetrisEnterHighScore_OnEnter;
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <TetrisMain_Init+0xa0>)
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <TetrisMain_Init+0xdc>)
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
	_states[EnterNewHighScoreScreen].OnExitFunction = &TetrisEnterHighScore_OnExit;
 80021d2:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <TetrisMain_Init+0xa0>)
 80021d4:	4a12      	ldr	r2, [pc, #72]	; (8002220 <TetrisMain_Init+0xe0>)
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44


}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000037c 	.word	0x2000037c
 80021e4:	08008a68 	.word	0x08008a68
 80021e8:	08001b29 	.word	0x08001b29
 80021ec:	08001b8d 	.word	0x08001b8d
 80021f0:	08001bf5 	.word	0x08001bf5
 80021f4:	08008a64 	.word	0x08008a64
 80021f8:	0800200d 	.word	0x0800200d
 80021fc:	080020bd 	.word	0x080020bd
 8002200:	080020fd 	.word	0x080020fd
 8002204:	08008a6c 	.word	0x08008a6c
 8002208:	08002351 	.word	0x08002351
 800220c:	08002389 	.word	0x08002389
 8002210:	080023d5 	.word	0x080023d5
 8002214:	08008a70 	.word	0x08008a70
 8002218:	080013fd 	.word	0x080013fd
 800221c:	08001581 	.word	0x08001581
 8002220:	08001641 	.word	0x08001641

08002224 <TetrisMain_Update>:

void TetrisMain_Update(u32 timePassed){
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	/* Call update on the current state, the return value of update will determine there should be a change to a new state */
	Tetris_Modes_StateTriggers updateResult = _states[_currentState].UpdateFunction(timePassed);
 800222c:	4b37      	ldr	r3, [pc, #220]	; (800230c <TetrisMain_Update+0xe8>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	4a37      	ldr	r2, [pc, #220]	; (8002310 <TetrisMain_Update+0xec>)
 8002234:	460b      	mov	r3, r1
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	4603      	mov	r3, r0
 8002246:	76fb      	strb	r3, [r7, #27]
	if(updateResult == NoChange){
 8002248:	7efb      	ldrb	r3, [r7, #27]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d059      	beq.n	8002302 <TetrisMain_Update+0xde>
		return;
	}
	/* If we're at this point there should be a change in state */
	u32 numTransitions = _states[_currentState].NumTransitions;
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <TetrisMain_Update+0xe8>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <TetrisMain_Update+0xec>)
 8002256:	460b      	mov	r3, r1
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	330c      	adds	r3, #12
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	617b      	str	r3, [r7, #20]
	Transition* transitions = _states[_currentState].Transitions;
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <TetrisMain_Update+0xe8>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	4619      	mov	r1, r3
 800226c:	4a28      	ldr	r2, [pc, #160]	; (8002310 <TetrisMain_Update+0xec>)
 800226e:	460b      	mov	r3, r1
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	3310      	adds	r3, #16
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	613b      	str	r3, [r7, #16]
	/* Find the transition for the state change trigger returned by update */
	for(i32 i=0; i<numTransitions; i++){
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e039      	b.n	80022f8 <TetrisMain_Update+0xd4>
		if(transitions[i].trigger == updateResult){
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	7efa      	ldrb	r2, [r7, #27]
 8002290:	429a      	cmp	r2, r3
 8002292:	d12e      	bne.n	80022f2 <TetrisMain_Update+0xce>
			/* Change state and call enter and exit functions for the transition */
			Tetris_Modes_States last = _currentState;
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <TetrisMain_Update+0xe8>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	73fb      	strb	r3, [r7, #15]
			_states[_currentState].OnExitFunction(_stateMachineDataPointer, transitions[i].destination);
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <TetrisMain_Update+0xe8>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <TetrisMain_Update+0xec>)
 80022a2:	460b      	mov	r3, r1
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3308      	adds	r3, #8
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a18      	ldr	r2, [pc, #96]	; (8002314 <TetrisMain_Update+0xf0>)
 80022b2:	6810      	ldr	r0, [r2, #0]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	0052      	lsls	r2, r2, #1
 80022b8:	6939      	ldr	r1, [r7, #16]
 80022ba:	440a      	add	r2, r1
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	4611      	mov	r1, r2
 80022c0:	4798      	blx	r3
			_currentState = transitions[i].destination;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <TetrisMain_Update+0xe8>)
 80022ce:	701a      	strb	r2, [r3, #0]
			_states[_currentState].OnEnterFunction(_stateMachineDataPointer, last);
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <TetrisMain_Update+0xe8>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <TetrisMain_Update+0xec>)
 80022d8:	460b      	mov	r3, r1
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3304      	adds	r3, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <TetrisMain_Update+0xf0>)
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	7bf9      	ldrb	r1, [r7, #15]
 80022ec:	4610      	mov	r0, r2
 80022ee:	4798      	blx	r3
			return;
 80022f0:	e008      	b.n	8002304 <TetrisMain_Update+0xe0>
	for(i32 i=0; i<numTransitions; i++){
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d8c1      	bhi.n	8002284 <TetrisMain_Update+0x60>
 8002300:	e000      	b.n	8002304 <TetrisMain_Update+0xe0>
		return;
 8002302:	bf00      	nop
		}
	}
}
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200003e0 	.word	0x200003e0
 8002310:	2000037c 	.word	0x2000037c
 8002314:	20000378 	.word	0x20000378

08002318 <TetrisPersistantData_LoadAllPeristantData>:
#include "TetrisPersistantData.h"
#include "TetrisHighScores.h"
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

void TetrisPersistantData_LoadAllPeristantData(){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
	u32 nextAddress = TetrisHighScores_Load();
 800231e:	f7ff fd4b 	bl	8001db8 <TetrisHighScores_Load>
 8002322:	6078      	str	r0, [r7, #4]

}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <TetrisPersistantData_SaveAllPersistantData>:
void TetrisPersistantData_SaveAllPersistantData(){
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002332:	f001 ff69 	bl	8004208 <HAL_FLASH_Unlock>

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
	*/

	u32 nextAddress = TetrisHighScores_Save(FINAL_PAGE_START_ADDRESS);
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <TetrisPersistantData_SaveAllPersistantData+0x20>)
 8002338:	f7ff fd9a 	bl	8001e70 <TetrisHighScores_Save>
 800233c:	6078      	str	r0, [r7, #4]

	HAL_FLASH_Lock();
 800233e:	f001 ff89 	bl	8004254 <HAL_FLASH_Lock>

}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	0800f800 	.word	0x0800f800

08002350 <TetrisPlayAgain_Update>:
extern LCD_PCD8544_screen_t gLcdScreen;

static u8 _startLevel;


Tetris_Modes_StateTriggers TetrisPlayAgain_Update(u32 TimePassed){
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

	/* Will have option to go back to main menu.  67 */
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8002358:	2101      	movs	r1, #1
 800235a:	4809      	ldr	r0, [pc, #36]	; (8002380 <TetrisPlayAgain_Update+0x30>)
 800235c:	f002 f98a 	bl	8004674 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
	if(buttonBState == GPIO_PIN_SET){
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d104      	bne.n	8002374 <TetrisPlayAgain_Update+0x24>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <TetrisPlayAgain_Update+0x34>)
 800236c:	f7ff fed8 	bl	8002120 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <TetrisPlayAgain_Update+0x26>
	}

	return NoChange;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	48000400 	.word	0x48000400
 8002384:	200003e1 	.word	0x200003e1

08002388 <TetrisPlayAgain_OnEnter>:

void TetrisPlayAgain_Init(){

}

void TetrisPlayAgain_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
	_startLevel = *((u8*)stateMachineDataPtr);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <TetrisPlayAgain_OnEnter+0x40>)
 800239a:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 800239c:	f7fe f898 	bl	80004d0 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 80023a0:	f7fe fb62 	bl	8000a68 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 80023a4:	2354      	movs	r3, #84	; 0x54
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7fe f8d6 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxWriteTextLineToFrameBuffer(0,0,"Play Again?");
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <TetrisPlayAgain_OnEnter+0x44>)
 80023b2:	2100      	movs	r1, #0
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe faad 	bl	8000914 <gfxWriteTextLineToFrameBuffer>

	gfxFinishDrawing(&gLcdScreen);
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <TetrisPlayAgain_OnEnter+0x48>)
 80023bc:	f7fe f9f6 	bl	80007ac <gfxFinishDrawing>

}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200003e1 	.word	0x200003e1
 80023cc:	08008388 	.word	0x08008388
 80023d0:	200005dc 	.word	0x200005dc

080023d4 <TetrisPlayAgain_OnExit>:

void TetrisPlayAgain_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <TetrisPlayAgain_OnExit+0x1c>)
 80023e2:	f7fe fb71 	bl	8000ac8 <ClearScreen>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200005dc 	.word	0x200005dc

080023f4 <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 80023fc:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002400:	2100      	movs	r1, #0
 8002402:	481e      	ldr	r0, [pc, #120]	; (800247c <LCD_PCD8544_init+0x88>)
 8002404:	f004 fd56 	bl	8006eb4 <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f976 	bl	8002702 <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f98e 	bl	8002738 <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f9ab 	bl	8002778 <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	7bb9      	ldrb	r1, [r7, #14]
 8002426:	2301      	movs	r3, #1
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f8ae 	bl	800258a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 800242e:	2103      	movs	r1, #3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f939 	bl	80026a8 <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 8002436:	2140      	movs	r1, #64	; 0x40
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f94e 	bl	80026da <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 800243e:	2102      	movs	r1, #2
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f918 	bl	8002676 <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	7bb9      	ldrb	r1, [r7, #14]
 800244a:	2300      	movs	r3, #0
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f89c 	bl	800258a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8c7 	bl	80025ea <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	2100      	movs	r1, #0
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f8e5 	bl	8002630 <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f996 	bl	8002798 <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f845 	bl	80024fc <LCD_PCD8544_clear_ram>
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200003e4 	.word	0x200003e4

08002480 <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	72fb      	strb	r3, [r7, #11]
 800248e:	4613      	mov	r3, r2
 8002490:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f94c 	bl	8002738 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f969 	bl	8002778 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 80024a6:	7dfa      	ldrb	r2, [r7, #23]
 80024a8:	7db9      	ldrb	r1, [r7, #22]
 80024aa:	2300      	movs	r3, #0
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f86c 	bl	800258a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 80024b2:	7abb      	ldrb	r3, [r7, #10]
 80024b4:	461a      	mov	r2, r3
 80024b6:	0052      	lsls	r2, r2, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	4619      	mov	r1, r3
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f8b4 	bl	8002630 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f965 	bl	8002798 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f942 	bl	8002758 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f94f 	bl	8002778 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 80024da:	8c3b      	ldrh	r3, [r7, #32]
 80024dc:	461a      	mov	r2, r3
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f81f 	bl	8002524 <LCD_PCD8544_LL_send_data>
 80024e6:	4603      	mov	r3, r0
 80024e8:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f954 	bl	8002798 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 80024f0:	7d7b      	ldrb	r3, [r7, #21]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af02      	add	r7, sp, #8
 8002502:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 8002504:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <LCD_PCD8544_clear_ram+0x24>)
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ffb5 	bl	8002480 <LCD_PCD8544_write_bytes>
 8002516:	4603      	mov	r3, r0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200003e4 	.word	0x200003e4

08002524 <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	2302      	movs	r3, #2
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	f003 fcb7 	bl	8005eae <HAL_SPI_Transmit>
 8002540:	4603      	mov	r3, r0
 8002542:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	69d8      	ldr	r0, [r3, #28]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8c1b      	ldrh	r3, [r3, #32]
 8002552:	2200      	movs	r2, #0
 8002554:	4619      	mov	r1, r3
 8002556:	f002 f8a5 	bl	80046a4 <HAL_GPIO_WritePin>
	}
	return stat;
 800255a:	7dfb      	ldrb	r3, [r7, #23]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 8002570:	2301      	movs	r3, #1
 8002572:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8002574:	89fa      	ldrh	r2, [r7, #14]
 8002576:	1cfb      	adds	r3, r7, #3
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffd2 	bl	8002524 <LCD_PCD8544_LL_send_data>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	4608      	mov	r0, r1
 8002594:	4611      	mov	r1, r2
 8002596:	461a      	mov	r2, r3
 8002598:	4603      	mov	r3, r0
 800259a:	70fb      	strb	r3, [r7, #3]
 800259c:	460b      	mov	r3, r1
 800259e:	70bb      	strb	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	f043 0320 	orr.w	r3, r3, #32
 80025b4:	b25a      	sxtb	r2, r3
 80025b6:	78bb      	ldrb	r3, [r7, #2]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	b25b      	sxtb	r3, r3
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	4313      	orrs	r3, r2
 80025c4:	b25a      	sxtb	r2, r3
 80025c6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ffc2 	bl	8002564 <LCD_PCD8544_LL_send_byte>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70fb      	strb	r3, [r7, #3]
 80025f6:	4613      	mov	r3, r2
 80025f8:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	b25b      	sxtb	r3, r3
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	b25a      	sxtb	r2, r3
 800260c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	b25b      	sxtb	r3, r3
 8002616:	4313      	orrs	r3, r2
 8002618:	b25b      	sxtb	r3, r3
 800261a:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff9f 	bl	8002564 <LCD_PCD8544_LL_send_byte>
 8002626:	4603      	mov	r3, r0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	70fb      	strb	r3, [r7, #3]
 800263c:	4613      	mov	r3, r2
 800263e:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 8002640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	b25b      	sxtb	r3, r3
 800264a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264e:	b25b      	sxtb	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 8002654:	78bb      	ldrb	r3, [r7, #2]
 8002656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800265a:	b2db      	uxtb	r3, r3
 800265c:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	2202      	movs	r2, #2
 8002664:	4619      	mov	r1, r3
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff5c 	bl	8002524 <LCD_PCD8544_LL_send_data>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 8002682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	b25b      	sxtb	r3, r3
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	b25b      	sxtb	r3, r3
 8002692:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	4619      	mov	r1, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff63 	bl	8002564 <LCD_PCD8544_LL_send_byte>
 800269e:	4603      	mov	r3, r0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 80026b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f043 0310 	orr.w	r3, r3, #16
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ff4a 	bl	8002564 <LCD_PCD8544_LL_send_byte>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026ec:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff36 	bl	8002564 <LCD_PCD8544_LL_send_byte>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6858      	ldr	r0, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	891b      	ldrh	r3, [r3, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	4619      	mov	r1, r3
 8002716:	f001 ffc5 	bl	80046a4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 800271a:	2001      	movs	r0, #1
 800271c:	f000 fcda 	bl	80030d4 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6858      	ldr	r0, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	891b      	ldrh	r3, [r3, #8]
 8002728:	2201      	movs	r2, #1
 800272a:	4619      	mov	r1, r3
 800272c:	f001 ffba 	bl	80046a4 <HAL_GPIO_WritePin>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6958      	ldr	r0, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8b1b      	ldrh	r3, [r3, #24]
 8002748:	2200      	movs	r2, #0
 800274a:	4619      	mov	r1, r3
 800274c:	f001 ffaa 	bl	80046a4 <HAL_GPIO_WritePin>
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6958      	ldr	r0, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	8b1b      	ldrh	r3, [r3, #24]
 8002768:	2201      	movs	r2, #1
 800276a:	4619      	mov	r1, r3
 800276c:	f001 ff9a 	bl	80046a4 <HAL_GPIO_WritePin>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68d8      	ldr	r0, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8a1b      	ldrh	r3, [r3, #16]
 8002788:	2200      	movs	r2, #0
 800278a:	4619      	mov	r1, r3
 800278c:	f001 ff8a 	bl	80046a4 <HAL_GPIO_WritePin>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68d8      	ldr	r0, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	8a1b      	ldrh	r3, [r3, #16]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4619      	mov	r1, r3
 80027ac:	f001 ff7a 	bl	80046a4 <HAL_GPIO_WritePin>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027bc:	f000 fc24 	bl	8003008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027c0:	f000 f836 	bl	8002830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027c4:	f000 f98e 	bl	8002ae4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80027c8:	f000 f8f8 	bl	80029bc <MX_SPI1_Init>
  MX_ADC2_Init();
 80027cc:	f000 f888 	bl	80028e0 <MX_ADC2_Init>
  MX_TIM2_Init();
 80027d0:	f000 f932 	bl	8002a38 <MX_TIM2_Init>
  //HAL_ADCEx_Calibration_Start(&hadc2);



  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <main+0x6c>)
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <main+0x70>)
 80027d8:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <main+0x6c>)
 80027dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80027e0:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <main+0x6c>)
 80027e4:	2208      	movs	r2, #8
 80027e6:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <main+0x6c>)
 80027ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80027ee:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <main+0x6c>)
 80027f2:	2202      	movs	r2, #2
 80027f4:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <main+0x6c>)
 80027f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80027fc:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <main+0x6c>)
 8002800:	2210      	movs	r2, #16
 8002802:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 8002804:	4807      	ldr	r0, [pc, #28]	; (8002824 <main+0x6c>)
 8002806:	f7ff fdf5 	bl	80023f4 <LCD_PCD8544_init>

    // LCD - welcome screen
  //static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800280a:	2100      	movs	r1, #0
 800280c:	4807      	ldr	r0, [pc, #28]	; (800282c <main+0x74>)
 800280e:	f000 ffa8 	bl	8003762 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   TetrisMain_Init();
 8002812:	f7ff fc95 	bl	8002140 <TetrisMain_Init>



  while (1)
  {
	  TetrisMain_Update(50);
 8002816:	2032      	movs	r0, #50	; 0x32
 8002818:	f7ff fd04 	bl	8002224 <TetrisMain_Update>
	  HAL_Delay(50);
 800281c:	2032      	movs	r0, #50	; 0x32
 800281e:	f000 fc59 	bl	80030d4 <HAL_Delay>
	  TetrisMain_Update(50);
 8002822:	e7f8      	b.n	8002816 <main+0x5e>
 8002824:	200005dc 	.word	0x200005dc
 8002828:	20000848 	.word	0x20000848
 800282c:	200007f8 	.word	0x200007f8

08002830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b096      	sub	sp, #88	; 0x58
 8002834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002836:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800283a:	2228      	movs	r2, #40	; 0x28
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f004 fb38 	bl	8006eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002864:	2302      	movs	r3, #2
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002868:	2301      	movs	r3, #1
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800286c:	2310      	movs	r3, #16
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002870:	2302      	movs	r3, #2
 8002872:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002874:	2300      	movs	r3, #0
 8002876:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002878:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800287c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800287e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002882:	4618      	mov	r0, r3
 8002884:	f001 ff26 	bl	80046d4 <HAL_RCC_OscConfig>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800288e:	f000 f9a5 	bl	8002bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002892:	230f      	movs	r3, #15
 8002894:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028a2:	2300      	movs	r3, #0
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f002 ff4f 	bl	8005750 <HAL_RCC_ClockConfig>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80028b8:	f000 f990 	bl	8002bdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80028c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 f927 	bl	8005b1c <HAL_RCCEx_PeriphCLKConfig>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80028d4:	f000 f982 	bl	8002bdc <Error_Handler>
  }
}
 80028d8:	bf00      	nop
 80028da:	3758      	adds	r7, #88	; 0x58
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028e6:	463b      	mov	r3, r7
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
 80028f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80028f6:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <MX_ADC2_Init+0xd4>)
 80028f8:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <MX_ADC2_Init+0xd8>)
 80028fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <MX_ADC2_Init+0xd4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <MX_ADC2_Init+0xd4>)
 800290a:	2201      	movs	r2, #1
 800290c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002910:	2200      	movs	r2, #0
 8002912:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <MX_ADC2_Init+0xd4>)
 800291e:	2201      	movs	r2, #1
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002924:	2200      	movs	r2, #0
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <MX_ADC2_Init+0xd4>)
 800292a:	2201      	movs	r2, #1
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800292e:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002936:	2202      	movs	r2, #2
 8002938:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <MX_ADC2_Init+0xd4>)
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002944:	2204      	movs	r2, #4
 8002946:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <MX_ADC2_Init+0xd4>)
 800294a:	2200      	movs	r2, #0
 800294c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002950:	2200      	movs	r2, #0
 8002952:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002954:	4817      	ldr	r0, [pc, #92]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002956:	f000 fbe1 	bl	800311c <HAL_ADC_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8002960:	f000 f93c 	bl	8002bdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002964:	2302      	movs	r3, #2
 8002966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002968:	2301      	movs	r3, #1
 800296a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800297c:	463b      	mov	r3, r7
 800297e:	4619      	mov	r1, r3
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <MX_ADC2_Init+0xd4>)
 8002982:	f000 ff61 	bl	8003848 <HAL_ADC_ConfigChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 800298c:	f000 f926 	bl	8002bdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002990:	2303      	movs	r3, #3
 8002992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002994:	2302      	movs	r3, #2
 8002996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002998:	463b      	mov	r3, r7
 800299a:	4619      	mov	r1, r3
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <MX_ADC2_Init+0xd4>)
 800299e:	f000 ff53 	bl	8003848 <HAL_ADC_ConfigChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80029a8:	f000 f918 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80029ac:	bf00      	nop
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200007f8 	.word	0x200007f8
 80029b8:	50000100 	.word	0x50000100

080029bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <MX_SPI1_Init+0x78>)
 80029c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <MX_SPI1_Init+0x74>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <MX_SPI1_Init+0x74>)
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <MX_SPI1_Init+0x74>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_SPI1_Init+0x74>)
 8002a16:	2208      	movs	r2, #8
 8002a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <MX_SPI1_Init+0x74>)
 8002a1c:	f003 f9a4 	bl	8005d68 <HAL_SPI_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a26:	f000 f8d9 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000848 	.word	0x20000848
 8002a34:	40013000 	.word	0x40013000

08002a38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3e:	f107 031c 	add.w	r3, r7, #28
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
 8002a58:	615a      	str	r2, [r3, #20]
 8002a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a5c:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <MX_TIM2_Init+0xa8>)
 8002a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <MX_TIM2_Init+0xa8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <MX_TIM2_Init+0xa8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <MX_TIM2_Init+0xa8>)
 8002a72:	f04f 32ff 	mov.w	r2, #4294967295
 8002a76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <MX_TIM2_Init+0xa8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MX_TIM2_Init+0xa8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a84:	4816      	ldr	r0, [pc, #88]	; (8002ae0 <MX_TIM2_Init+0xa8>)
 8002a86:	f003 fce5 	bl	8006454 <HAL_TIM_PWM_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002a90:	f000 f8a4 	bl	8002bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <MX_TIM2_Init+0xa8>)
 8002aa4:	f004 f960 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002aae:	f000 f895 	bl	8002bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ab2:	2360      	movs	r3, #96	; 0x60
 8002ab4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_TIM2_Init+0xa8>)
 8002aca:	f003 fd1b 	bl	8006504 <HAL_TIM_PWM_ConfigChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002ad4:	f000 f882 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200008ac 	.word	0x200008ac

08002ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
 8002af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002afa:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <MX_GPIO_Init+0xf0>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <MX_GPIO_Init+0xf0>)
 8002b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b04:	6153      	str	r3, [r2, #20]
 8002b06:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <MX_GPIO_Init+0xf0>)
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b12:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <MX_GPIO_Init+0xf0>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4a2f      	ldr	r2, [pc, #188]	; (8002bd4 <MX_GPIO_Init+0xf0>)
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	6153      	str	r3, [r2, #20]
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <MX_GPIO_Init+0xf0>)
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <MX_GPIO_Init+0xf0>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4a29      	ldr	r2, [pc, #164]	; (8002bd4 <MX_GPIO_Init+0xf0>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b34:	6153      	str	r3, [r2, #20]
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <MX_GPIO_Init+0xf0>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8002b42:	2201      	movs	r2, #1
 8002b44:	210a      	movs	r1, #10
 8002b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4a:	f001 fdab 	bl	80046a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2110      	movs	r1, #16
 8002b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b56:	f001 fda5 	bl	80046a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8002b5a:	231a      	movs	r3, #26
 8002b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b74:	f001 fc0c 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b78:	f248 0304 	movw	r3, #32772	; 0x8004
 8002b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b86:	2303      	movs	r3, #3
 8002b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	4619      	mov	r1, r3
 8002b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b98:	f001 fbfa 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	4619      	mov	r1, r3
 8002bae:	480a      	ldr	r0, [pc, #40]	; (8002bd8 <MX_GPIO_Init+0xf4>)
 8002bb0:	f001 fbee 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = ANALOGUE_STICK_BUTTON_Pin;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANALOGUE_STICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4804      	ldr	r0, [pc, #16]	; (8002bd8 <MX_GPIO_Init+0xf4>)
 8002bc8:	f001 fbe2 	bl	8004390 <HAL_GPIO_Init>

}
 8002bcc:	bf00      	nop
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	48000400 	.word	0x48000400

08002bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
}
 8002be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <Error_Handler+0x8>
	...

08002be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_MspInit+0x4c>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	4a10      	ldr	r2, [pc, #64]	; (8002c34 <HAL_MspInit+0x4c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6193      	str	r3, [r2, #24]
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_MspInit+0x4c>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_MspInit+0x4c>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <HAL_MspInit+0x4c>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	61d3      	str	r3, [r2, #28]
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_MspInit+0x4c>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	210f      	movs	r1, #15
 8002c22:	f06f 0001 	mvn.w	r0, #1
 8002c26:	f001 fa56 	bl	80040d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000

08002c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a15      	ldr	r2, [pc, #84]	; (8002cac <HAL_ADC_MspInit+0x74>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d124      	bne.n	8002ca4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_ADC_MspInit+0x78>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4a14      	ldr	r2, [pc, #80]	; (8002cb0 <HAL_ADC_MspInit+0x78>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6153      	str	r3, [r2, #20]
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_ADC_MspInit+0x78>)
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_ADC_MspInit+0x78>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <HAL_ADC_MspInit+0x78>)
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	6153      	str	r3, [r2, #20]
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <HAL_ADC_MspInit+0x78>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 8002c8a:	2360      	movs	r3, #96	; 0x60
 8002c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca0:	f001 fb76 	bl	8004390 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002ca4:	bf00      	nop
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	50000100 	.word	0x50000100
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <HAL_SPI_MspInit+0xb4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d144      	bne.n	8002d60 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cd6:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <HAL_SPI_MspInit+0xb8>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	4a24      	ldr	r2, [pc, #144]	; (8002d6c <HAL_SPI_MspInit+0xb8>)
 8002cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ce0:	6193      	str	r3, [r2, #24]
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_SPI_MspInit+0xb8>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_SPI_MspInit+0xb8>)
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <HAL_SPI_MspInit+0xb8>)
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	6153      	str	r3, [r2, #20]
 8002cfa:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <HAL_SPI_MspInit+0xb8>)
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_SPI_MspInit+0xb8>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <HAL_SPI_MspInit+0xb8>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	6153      	str	r3, [r2, #20]
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <HAL_SPI_MspInit+0xb8>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d2e:	2305      	movs	r3, #5
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4619      	mov	r1, r3
 8002d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3c:	f001 fb28 	bl	8004390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d40:	2308      	movs	r3, #8
 8002d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d50:	2305      	movs	r3, #5
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_SPI_MspInit+0xbc>)
 8002d5c:	f001 fb18 	bl	8004390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d60:	bf00      	nop
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40013000 	.word	0x40013000
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	48000400 	.word	0x48000400

08002d74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d10b      	bne.n	8002d9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_TIM_PWM_MspInit+0x38>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4a08      	ldr	r2, [pc, #32]	; (8002dac <HAL_TIM_PWM_MspInit+0x38>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	61d3      	str	r3, [r2, #28]
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_TIM_PWM_MspInit+0x38>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000

08002db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <NMI_Handler+0x4>

08002db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dba:	e7fe      	b.n	8002dba <HardFault_Handler+0x4>

08002dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <MemManage_Handler+0x4>

08002dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <BusFault_Handler+0x4>

08002dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <UsageFault_Handler+0x4>

08002dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dfc:	f000 f94a 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
	return 1;
 8002e08:	2301      	movs	r3, #1
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <_kill>:

int _kill(int pid, int sig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e1e:	f004 f811 	bl	8006e44 <__errno>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2216      	movs	r2, #22
 8002e26:	601a      	str	r2, [r3, #0]
	return -1;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_exit>:

void _exit (int status)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ffe7 	bl	8002e14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e46:	e7fe      	b.n	8002e46 <_exit+0x12>

08002e48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e00a      	b.n	8002e70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e5a:	f3af 8000 	nop.w
 8002e5e:	4601      	mov	r1, r0
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	60ba      	str	r2, [r7, #8]
 8002e66:	b2ca      	uxtb	r2, r1
 8002e68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	dbf0      	blt.n	8002e5a <_read+0x12>
	}

return len;
 8002e78:	687b      	ldr	r3, [r7, #4]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e009      	b.n	8002ea8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	60ba      	str	r2, [r7, #8]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	dbf1      	blt.n	8002e94 <_write+0x12>
	}
	return len;
 8002eb0:	687b      	ldr	r3, [r7, #4]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <_close>:

int _close(int file)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ee2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_isatty>:

int _isatty(int file)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
	return 1;
 8002efa:	2301      	movs	r3, #1
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
	return 0;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f2c:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <_sbrk+0x5c>)
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <_sbrk+0x60>)
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <_sbrk+0x64>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <_sbrk+0x68>)
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <_sbrk+0x64>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d207      	bcs.n	8002f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f54:	f003 ff76 	bl	8006e44 <__errno>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	e009      	b.n	8002f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <_sbrk+0x64>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <_sbrk+0x64>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <_sbrk+0x64>)
 8002f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20003000 	.word	0x20003000
 8002f84:	00000400 	.word	0x00000400
 8002f88:	200008f8 	.word	0x200008f8
 8002f8c:	20000930 	.word	0x20000930

08002f90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <SystemInit+0x20>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <SystemInit+0x20>)
 8002f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fb8:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fba:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fbc:	4a0e      	ldr	r2, [pc, #56]	; (8002ff8 <LoopForever+0xe>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc0:	e002      	b.n	8002fc8 <LoopCopyDataInit>

08002fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc6:	3304      	adds	r3, #4

08002fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fcc:	d3f9      	bcc.n	8002fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fce:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fd0:	4c0b      	ldr	r4, [pc, #44]	; (8003000 <LoopForever+0x16>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd4:	e001      	b.n	8002fda <LoopFillZerobss>

08002fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd8:	3204      	adds	r2, #4

08002fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fdc:	d3fb      	bcc.n	8002fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fde:	f7ff ffd7 	bl	8002f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fe2:	f003 ff35 	bl	8006e50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fe6:	f7ff fbe7 	bl	80027b8 <main>

08002fea <LoopForever>:

LoopForever:
    b LoopForever
 8002fea:	e7fe      	b.n	8002fea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fec:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002ff8:	08008bf4 	.word	0x08008bf4
  ldr r2, =_sbss
 8002ffc:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8003000:	20000930 	.word	0x20000930

08003004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003004:	e7fe      	b.n	8003004 <ADC1_2_IRQHandler>
	...

08003008 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_Init+0x28>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_Init+0x28>)
 8003012:	f043 0310 	orr.w	r3, r3, #16
 8003016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003018:	2003      	movs	r0, #3
 800301a:	f001 f851 	bl	80040c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301e:	2000      	movs	r0, #0
 8003020:	f000 f808 	bl	8003034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003024:	f7ff fde0 	bl	8002be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40022000 	.word	0x40022000

08003034 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_InitTick+0x54>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_InitTick+0x58>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4619      	mov	r1, r3
 8003046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304a:	fbb3 f3f1 	udiv	r3, r3, r1
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	4618      	mov	r0, r3
 8003054:	f001 f85b 	bl	800410e <HAL_SYSTICK_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e00e      	b.n	8003080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d80a      	bhi.n	800307e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003068:	2200      	movs	r2, #0
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f001 f831 	bl	80040d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003074:	4a06      	ldr	r2, [pc, #24]	; (8003090 <HAL_InitTick+0x5c>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000058 	.word	0x20000058
 800308c:	20000060 	.word	0x20000060
 8003090:	2000005c 	.word	0x2000005c

08003094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_IncTick+0x20>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_IncTick+0x24>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <HAL_IncTick+0x24>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000060 	.word	0x20000060
 80030b8:	200008fc 	.word	0x200008fc

080030bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;  
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_GetTick+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	200008fc 	.word	0x200008fc

080030d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff ffee 	bl	80030bc <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d005      	beq.n	80030fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_Delay+0x44>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030fa:	bf00      	nop
 80030fc:	f7ff ffde 	bl	80030bc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d8f7      	bhi.n	80030fc <HAL_Delay+0x28>
  {
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000060 	.word	0x20000060

0800311c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b09a      	sub	sp, #104	; 0x68
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e172      	b.n	8003422 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d176      	bne.n	800323c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d152      	bne.n	80031fc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fd61 	bl	8002c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d13b      	bne.n	80031fc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fe83 	bl	8003e90 <ADC_Disable>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d12f      	bne.n	80031fc <HAL_ADC_Init+0xe0>
 800319c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d12b      	bne.n	80031fc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ac:	f023 0302 	bic.w	r3, r3, #2
 80031b0:	f043 0202 	orr.w	r2, r3, #2
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031c6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031d8:	4b94      	ldr	r3, [pc, #592]	; (800342c <HAL_ADC_Init+0x310>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a94      	ldr	r2, [pc, #592]	; (8003430 <HAL_ADC_Init+0x314>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0c9a      	lsrs	r2, r3, #18
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031ee:	e002      	b.n	80031f6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f9      	bne.n	80031f0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003218:	d110      	bne.n	800323c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f023 0312 	bic.w	r3, r3, #18
 8003222:	f043 0210 	orr.w	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f043 0201 	orr.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 80df 	bne.w	8003408 <HAL_ADC_Init+0x2ec>
 800324a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 80da 	bne.w	8003408 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80d2 	bne.w	8003408 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800326c:	f043 0202 	orr.w	r2, r3, #2
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003274:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_ADC_Init+0x318>)
 8003276:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003280:	d102      	bne.n	8003288 <HAL_ADC_Init+0x16c>
 8003282:	4b6d      	ldr	r3, [pc, #436]	; (8003438 <HAL_ADC_Init+0x31c>)
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e002      	b.n	800328e <HAL_ADC_Init+0x172>
 8003288:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800328c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_ADC_Init+0x192>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_Init+0x192>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_ADC_Init+0x194>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11c      	bne.n	80032ee <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d010      	beq.n	80032dc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_ADC_Init+0x1ba>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_Init+0x1ba>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_ADC_Init+0x1bc>
 80032d6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d108      	bne.n	80032ee <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80032dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7e5b      	ldrb	r3, [r3, #25]
 80032f2:	035b      	lsls	r3, r3, #13
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032f8:	2a01      	cmp	r2, #1
 80032fa:	d002      	beq.n	8003302 <HAL_ADC_Init+0x1e6>
 80032fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003300:	e000      	b.n	8003304 <HAL_ADC_Init+0x1e8>
 8003302:	2200      	movs	r2, #0
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4313      	orrs	r3, r2
 8003312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003314:	4313      	orrs	r3, r2
 8003316:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d11b      	bne.n	800335a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7e5b      	ldrb	r3, [r3, #25]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	3b01      	subs	r3, #1
 8003330:	045a      	lsls	r2, r3, #17
 8003332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003334:	4313      	orrs	r3, r2
 8003336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333a:	663b      	str	r3, [r7, #96]	; 0x60
 800333c:	e00d      	b.n	800335a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	2b01      	cmp	r3, #1
 8003360:	d007      	beq.n	8003372 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	4313      	orrs	r3, r2
 800336c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800336e:	4313      	orrs	r3, r2
 8003370:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b00      	cmp	r3, #0
 800337e:	d114      	bne.n	80033aa <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338e:	f023 0302 	bic.w	r3, r3, #2
 8003392:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7e1b      	ldrb	r3, [r3, #24]
 8003398:	039a      	lsls	r2, r3, #14
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4313      	orrs	r3, r2
 80033a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033a6:	4313      	orrs	r3, r2
 80033a8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b22      	ldr	r3, [pc, #136]	; (800343c <HAL_ADC_Init+0x320>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80033ba:	430b      	orrs	r3, r1
 80033bc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10c      	bne.n	80033e0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f023 010f 	bic.w	r1, r3, #15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	1e5a      	subs	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
 80033de:	e007      	b.n	80033f0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 020f 	bic.w	r2, r2, #15
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	f043 0201 	orr.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
 8003406:	e00a      	b.n	800341e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f023 0312 	bic.w	r3, r3, #18
 8003410:	f043 0210 	orr.w	r2, r3, #16
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003418:	2301      	movs	r3, #1
 800341a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800341e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003422:	4618      	mov	r0, r3
 8003424:	3768      	adds	r7, #104	; 0x68
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000058 	.word	0x20000058
 8003430:	431bde83 	.word	0x431bde83
 8003434:	50000300 	.word	0x50000300
 8003438:	50000100 	.word	0x50000100
 800343c:	fff0c007 	.word	0xfff0c007

08003440 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 809c 	bne.w	8003594 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADC_Start+0x2a>
 8003466:	2302      	movs	r3, #2
 8003468:	e097      	b.n	800359a <HAL_ADC_Start+0x15a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fca8 	bl	8003dc8 <ADC_Enable>
 8003478:	4603      	mov	r3, r0
 800347a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 8083 	bne.w	800358a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003498:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <HAL_ADC_Start+0x164>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d004      	beq.n	80034ae <HAL_ADC_Start+0x6e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ac:	d115      	bne.n	80034da <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d027      	beq.n	8003518 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80034d8:	e01e      	b.n	8003518 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ee:	d004      	beq.n	80034fa <HAL_ADC_Start+0xba>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2c      	ldr	r2, [pc, #176]	; (80035a8 <HAL_ADC_Start+0x168>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10e      	bne.n	8003518 <HAL_ADC_Start+0xd8>
 80034fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003510:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003524:	d106      	bne.n	8003534 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f023 0206 	bic.w	r2, r3, #6
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
 8003532:	e002      	b.n	800353a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	221c      	movs	r2, #28
 8003548:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800354a:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <HAL_ADC_Start+0x164>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_ADC_Start+0x138>
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_ADC_Start+0x164>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2b05      	cmp	r3, #5
 8003560:	d00a      	beq.n	8003578 <HAL_ADC_Start+0x138>
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_ADC_Start+0x164>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2b09      	cmp	r3, #9
 800356c:	d004      	beq.n	8003578 <HAL_ADC_Start+0x138>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003576:	d10f      	bne.n	8003598 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0204 	orr.w	r2, r2, #4
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	e006      	b.n	8003598 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003592:	e001      	b.n	8003598 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	50000300 	.word	0x50000300
 80035a8:	50000100 	.word	0x50000100

080035ac <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d102      	bne.n	80035c8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80035c2:	2308      	movs	r3, #8
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e02e      	b.n	8003626 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035c8:	4b5e      	ldr	r3, [pc, #376]	; (8003744 <HAL_ADC_PollForConversion+0x198>)
 80035ca:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d112      	bne.n	80035fe <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d11d      	bne.n	8003622 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e09d      	b.n	800373a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f043 0220 	orr.w	r2, r3, #32
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e08b      	b.n	800373a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003622:	230c      	movs	r3, #12
 8003624:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_ADC_PollForConversion+0x198>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <HAL_ADC_PollForConversion+0x90>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800363a:	d104      	bne.n	8003646 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	e003      	b.n	800364e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003646:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800364e:	f7ff fd35 	bl	80030bc <HAL_GetTick>
 8003652:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003654:	e021      	b.n	800369a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d01d      	beq.n	800369a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_ADC_PollForConversion+0xc8>
 8003664:	f7ff fd2a 	bl	80030bc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d212      	bcs.n	800369a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10b      	bne.n	800369a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e04f      	b.n	800373a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0d6      	beq.n	8003656 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d131      	bne.n	8003726 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d12c      	bne.n	8003726 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d125      	bne.n	8003726 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d112      	bne.n	800370e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d112      	bne.n	8003726 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
 800370c:	e00b      	b.n	8003726 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	50000300 	.word	0x50000300

08003748 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_ADCEx_Calibration_Start+0x1c>
 800377a:	2302      	movs	r3, #2
 800377c:	e05f      	b.n	800383e <HAL_ADCEx_Calibration_Start+0xdc>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fb82 	bl	8003e90 <ADC_Disable>
 800378c:	4603      	mov	r3, r0
 800378e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d14e      	bne.n	8003834 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80037aa:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037c0:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037d0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80037d2:	f7ff fc73 	bl	80030bc <HAL_GetTick>
 80037d6:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80037d8:	e01c      	b.n	8003814 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80037da:	f7ff fc6f 	bl	80030bc <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b0a      	cmp	r3, #10
 80037e6:	d915      	bls.n	8003814 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037f6:	d10d      	bne.n	8003814 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f023 0312 	bic.w	r3, r3, #18
 8003800:	f043 0210 	orr.w	r2, r3, #16
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e014      	b.n	800383e <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800381e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003822:	d0da      	beq.n	80037da <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	f023 0303 	bic.w	r3, r3, #3
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003848:	b480      	push	{r7}
 800384a:	b09b      	sub	sp, #108	; 0x6c
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x22>
 8003866:	2302      	movs	r3, #2
 8003868:	e2a4      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x56c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 8288 	bne.w	8003d92 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d81c      	bhi.n	80038c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	461a      	mov	r2, r3
 800389e:	231f      	movs	r3, #31
 80038a0:	4093      	lsls	r3, r2
 80038a2:	43db      	mvns	r3, r3
 80038a4:	4019      	ands	r1, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fa00 f203 	lsl.w	r2, r0, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
 80038c2:	e063      	b.n	800398c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d81e      	bhi.n	800390a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	3b1e      	subs	r3, #30
 80038e0:	221f      	movs	r2, #31
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	4019      	ands	r1, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	3b1e      	subs	r3, #30
 80038fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	635a      	str	r2, [r3, #52]	; 0x34
 8003908:	e040      	b.n	800398c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b0e      	cmp	r3, #14
 8003910:	d81e      	bhi.n	8003950 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	3b3c      	subs	r3, #60	; 0x3c
 8003926:	221f      	movs	r2, #31
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	4019      	ands	r1, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	3b3c      	subs	r3, #60	; 0x3c
 8003942:	fa00 f203 	lsl.w	r2, r0, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
 800394e:	e01d      	b.n	800398c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	3b5a      	subs	r3, #90	; 0x5a
 8003964:	221f      	movs	r2, #31
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	4019      	ands	r1, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	3b5a      	subs	r3, #90	; 0x5a
 8003980:	fa00 f203 	lsl.w	r2, r0, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 80e5 	bne.w	8003b66 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	d91c      	bls.n	80039de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	3b1e      	subs	r3, #30
 80039b6:	2207      	movs	r2, #7
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	4019      	ands	r1, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6898      	ldr	r0, [r3, #8]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4413      	add	r3, r2
 80039ce:	3b1e      	subs	r3, #30
 80039d0:	fa00 f203 	lsl.w	r2, r0, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	619a      	str	r2, [r3, #24]
 80039dc:	e019      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6959      	ldr	r1, [r3, #20]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4413      	add	r3, r2
 80039ee:	2207      	movs	r2, #7
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	4019      	ands	r1, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6898      	ldr	r0, [r3, #8]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4413      	add	r3, r2
 8003a06:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	08db      	lsrs	r3, r3, #3
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d84f      	bhi.n	8003ad4 <HAL_ADC_ConfigChannel+0x28c>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_ADC_ConfigChannel+0x1f4>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a6f 	.word	0x08003a6f
 8003a44:	08003a91 	.word	0x08003a91
 8003a48:	08003ab3 	.word	0x08003ab3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a52:	4b94      	ldr	r3, [pc, #592]	; (8003ca4 <HAL_ADC_ConfigChannel+0x45c>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	0691      	lsls	r1, r2, #26
 8003a5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a6a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a6c:	e07e      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a74:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <HAL_ADC_ConfigChannel+0x45c>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	0691      	lsls	r1, r2, #26
 8003a7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a80:	430a      	orrs	r2, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a8c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a8e:	e06d      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a96:	4b83      	ldr	r3, [pc, #524]	; (8003ca4 <HAL_ADC_ConfigChannel+0x45c>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	0691      	lsls	r1, r2, #26
 8003aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003aae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ab0:	e05c      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ab8:	4b7a      	ldr	r3, [pc, #488]	; (8003ca4 <HAL_ADC_ConfigChannel+0x45c>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	0691      	lsls	r1, r2, #26
 8003ac2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ad0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ad2:	e04b      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	069b      	lsls	r3, r3, #26
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	069b      	lsls	r3, r3, #26
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d107      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b1a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	069b      	lsls	r3, r3, #26
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d107      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b3e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	069b      	lsls	r3, r3, #26
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d10a      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b62:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003b64:	e001      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x324>
      break;
 8003b6a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d108      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x344>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x344>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_ADC_ConfigChannel+0x346>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 810a 	bne.w	8003da8 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d00f      	beq.n	8003bbc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003bba:	e049      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b09      	cmp	r3, #9
 8003bdc:	d91c      	bls.n	8003c18 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6999      	ldr	r1, [r3, #24]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	3b1b      	subs	r3, #27
 8003bf0:	2207      	movs	r2, #7
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	4019      	ands	r1, r3
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6898      	ldr	r0, [r3, #8]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	3b1b      	subs	r3, #27
 8003c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	619a      	str	r2, [r3, #24]
 8003c16:	e01b      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6959      	ldr	r1, [r3, #20]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	4019      	ands	r1, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6898      	ldr	r0, [r3, #8]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	fa00 f203 	lsl.w	r2, r0, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c50:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <HAL_ADC_ConfigChannel+0x460>)
 8003c52:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d105      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c6c:	2b11      	cmp	r3, #17
 8003c6e:	d105      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c80:	2b12      	cmp	r3, #18
 8003c82:	f040 8091 	bne.w	8003da8 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 808a 	bne.w	8003da8 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9c:	d108      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x468>
 8003c9e:	4b03      	ldr	r3, [pc, #12]	; (8003cac <HAL_ADC_ConfigChannel+0x464>)
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e008      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x46e>
 8003ca4:	83fff000 	.word	0x83fff000
 8003ca8:	50000300 	.word	0x50000300
 8003cac:	50000100 	.word	0x50000100
 8003cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cb4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d108      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x48e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x48e>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x490>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d150      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003cdc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d010      	beq.n	8003d04 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d107      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x4b6>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x4b6>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x4b8>
 8003cfe:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d13c      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d11d      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x500>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d14:	d118      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d20:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d22:	4b27      	ldr	r3, [pc, #156]	; (8003dc0 <HAL_ADC_ConfigChannel+0x578>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <HAL_ADC_ConfigChannel+0x57c>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	0c9a      	lsrs	r2, r3, #18
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d38:	e002      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f9      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d46:	e02e      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b11      	cmp	r3, #17
 8003d4e:	d10b      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x520>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d58:	d106      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d64:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d66:	e01e      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b12      	cmp	r3, #18
 8003d6e:	d11a      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d7a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d7c:	e013      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d90:	e00a      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003da4:	e000      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003da6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003db0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	376c      	adds	r7, #108	; 0x6c
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	20000058 	.word	0x20000058
 8003dc4:	431bde83 	.word	0x431bde83

08003dc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d108      	bne.n	8003df4 <ADC_Enable+0x2c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <ADC_Enable+0x2c>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <ADC_Enable+0x2e>
 8003df4:	2300      	movs	r3, #0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d143      	bne.n	8003e82 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <ADC_Enable+0xc4>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00d      	beq.n	8003e24 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f043 0210 	orr.w	r2, r3, #16
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e02f      	b.n	8003e84 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003e34:	f7ff f942 	bl	80030bc <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e3a:	e01b      	b.n	8003e74 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e3c:	f7ff f93e 	bl	80030bc <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d914      	bls.n	8003e74 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d00d      	beq.n	8003e74 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f043 0210 	orr.w	r2, r3, #16
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e007      	b.n	8003e84 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d1dc      	bne.n	8003e3c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	8000003f 	.word	0x8000003f

08003e90 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d108      	bne.n	8003ebc <ADC_Disable+0x2c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <ADC_Disable+0x2c>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <ADC_Disable+0x2e>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d047      	beq.n	8003f52 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030d 	and.w	r3, r3, #13
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10f      	bne.n	8003ef0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0202 	orr.w	r2, r2, #2
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003ee8:	f7ff f8e8 	bl	80030bc <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003eee:	e029      	b.n	8003f44 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f043 0210 	orr.w	r2, r3, #16
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	f043 0201 	orr.w	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e023      	b.n	8003f54 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f0c:	f7ff f8d6 	bl	80030bc <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d914      	bls.n	8003f44 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d10d      	bne.n	8003f44 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e007      	b.n	8003f54 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d0dc      	beq.n	8003f0c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f8e:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	60d3      	str	r3, [r2, #12]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <__NVIC_GetPriorityGrouping+0x18>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	f003 0307 	and.w	r3, r3, #7
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	6039      	str	r1, [r7, #0]
 8003fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	db0a      	blt.n	8003fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	490c      	ldr	r1, [pc, #48]	; (800400c <__NVIC_SetPriority+0x4c>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	0112      	lsls	r2, r2, #4
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fe8:	e00a      	b.n	8004000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4908      	ldr	r1, [pc, #32]	; (8004010 <__NVIC_SetPriority+0x50>)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	3b04      	subs	r3, #4
 8003ff8:	0112      	lsls	r2, r2, #4
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	761a      	strb	r2, [r3, #24]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000e100 	.word	0xe000e100
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f1c3 0307 	rsb	r3, r3, #7
 800402e:	2b04      	cmp	r3, #4
 8004030:	bf28      	it	cs
 8004032:	2304      	movcs	r3, #4
 8004034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3304      	adds	r3, #4
 800403a:	2b06      	cmp	r3, #6
 800403c:	d902      	bls.n	8004044 <NVIC_EncodePriority+0x30>
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3b03      	subs	r3, #3
 8004042:	e000      	b.n	8004046 <NVIC_EncodePriority+0x32>
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	401a      	ands	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800405c:	f04f 31ff 	mov.w	r1, #4294967295
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43d9      	mvns	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	4313      	orrs	r3, r2
         );
}
 800406e:	4618      	mov	r0, r3
 8004070:	3724      	adds	r7, #36	; 0x24
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3b01      	subs	r3, #1
 8004088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800408c:	d301      	bcc.n	8004092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800408e:	2301      	movs	r3, #1
 8004090:	e00f      	b.n	80040b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004092:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <SysTick_Config+0x40>)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3b01      	subs	r3, #1
 8004098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800409a:	210f      	movs	r1, #15
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	f7ff ff8e 	bl	8003fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <SysTick_Config+0x40>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <SysTick_Config+0x40>)
 80040ac:	2207      	movs	r2, #7
 80040ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	e000e010 	.word	0xe000e010

080040c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff47 	bl	8003f5c <__NVIC_SetPriorityGrouping>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e8:	f7ff ff5c 	bl	8003fa4 <__NVIC_GetPriorityGrouping>
 80040ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7ff ff8e 	bl	8004014 <NVIC_EncodePriority>
 80040f8:	4602      	mov	r2, r0
 80040fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff5d 	bl	8003fc0 <__NVIC_SetPriority>
}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff ffb0 	bl	800407c <SysTick_Config>
 800411c:	4603      	mov	r3, r0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004142:	4b2f      	ldr	r3, [pc, #188]	; (8004200 <HAL_FLASH_Program+0xd8>)
 8004144:	7e1b      	ldrb	r3, [r3, #24]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_FLASH_Program+0x26>
 800414a:	2302      	movs	r3, #2
 800414c:	e054      	b.n	80041f8 <HAL_FLASH_Program+0xd0>
 800414e:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <HAL_FLASH_Program+0xd8>)
 8004150:	2201      	movs	r2, #1
 8004152:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004154:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004158:	f000 f8a8 	bl	80042ac <FLASH_WaitForLastOperation>
 800415c:	4603      	mov	r3, r0
 800415e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004160:	7dfb      	ldrb	r3, [r7, #23]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d144      	bne.n	80041f0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d102      	bne.n	8004172 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800416c:	2301      	movs	r3, #1
 800416e:	757b      	strb	r3, [r7, #21]
 8004170:	e007      	b.n	8004182 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d102      	bne.n	800417e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004178:	2302      	movs	r3, #2
 800417a:	757b      	strb	r3, [r7, #21]
 800417c:	e001      	b.n	8004182 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800417e:	2304      	movs	r3, #4
 8004180:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004182:	2300      	movs	r3, #0
 8004184:	75bb      	strb	r3, [r7, #22]
 8004186:	e02d      	b.n	80041e4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004188:	7dbb      	ldrb	r3, [r7, #22]
 800418a:	005a      	lsls	r2, r3, #1
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	eb02 0c03 	add.w	ip, r2, r3
 8004192:	7dbb      	ldrb	r3, [r7, #22]
 8004194:	0119      	lsls	r1, r3, #4
 8004196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800419a:	f1c1 0620 	rsb	r6, r1, #32
 800419e:	f1a1 0020 	sub.w	r0, r1, #32
 80041a2:	fa22 f401 	lsr.w	r4, r2, r1
 80041a6:	fa03 f606 	lsl.w	r6, r3, r6
 80041aa:	4334      	orrs	r4, r6
 80041ac:	fa23 f000 	lsr.w	r0, r3, r0
 80041b0:	4304      	orrs	r4, r0
 80041b2:	fa23 f501 	lsr.w	r5, r3, r1
 80041b6:	b2a3      	uxth	r3, r4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4660      	mov	r0, ip
 80041bc:	f000 f85a 	bl	8004274 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041c4:	f000 f872 	bl	80042ac <FLASH_WaitForLastOperation>
 80041c8:	4603      	mov	r3, r0
 80041ca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_FLASH_Program+0xdc>)
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	4a0c      	ldr	r2, [pc, #48]	; (8004204 <HAL_FLASH_Program+0xdc>)
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80041de:	7dbb      	ldrb	r3, [r7, #22]
 80041e0:	3301      	adds	r3, #1
 80041e2:	75bb      	strb	r3, [r7, #22]
 80041e4:	7dba      	ldrb	r2, [r7, #22]
 80041e6:	7d7b      	ldrb	r3, [r7, #21]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d3cd      	bcc.n	8004188 <HAL_FLASH_Program+0x60>
 80041ec:	e000      	b.n	80041f0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80041ee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <HAL_FLASH_Program+0xd8>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	761a      	strb	r2, [r3, #24]

  return status;
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004200:	20000900 	.word	0x20000900
 8004204:	40022000 	.word	0x40022000

08004208 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <HAL_FLASH_Unlock+0x40>)
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <HAL_FLASH_Unlock+0x40>)
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_FLASH_Unlock+0x44>)
 8004222:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_FLASH_Unlock+0x40>)
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <HAL_FLASH_Unlock+0x48>)
 8004228:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_FLASH_Unlock+0x40>)
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800423a:	79fb      	ldrb	r3, [r7, #7]
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40022000 	.word	0x40022000
 800424c:	45670123 	.word	0x45670123
 8004250:	cdef89ab 	.word	0xcdef89ab

08004254 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_FLASH_Lock+0x1c>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	4a04      	ldr	r2, [pc, #16]	; (8004270 <HAL_FLASH_Lock+0x1c>)
 800425e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004262:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40022000 	.word	0x40022000

08004274 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004280:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <FLASH_Program_HalfWord+0x30>)
 8004282:	2200      	movs	r2, #0
 8004284:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <FLASH_Program_HalfWord+0x34>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <FLASH_Program_HalfWord+0x34>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	887a      	ldrh	r2, [r7, #2]
 8004296:	801a      	strh	r2, [r3, #0]
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	20000900 	.word	0x20000900
 80042a8:	40022000 	.word	0x40022000

080042ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80042b4:	f7fe ff02 	bl	80030bc <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042ba:	e010      	b.n	80042de <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d00c      	beq.n	80042de <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <FLASH_WaitForLastOperation+0x2e>
 80042ca:	f7fe fef7 	bl	80030bc <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d201      	bcs.n	80042de <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e01f      	b.n	800431e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <FLASH_WaitForLastOperation+0x7c>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d0e8      	beq.n	80042bc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <FLASH_WaitForLastOperation+0x7c>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d102      	bne.n	80042fc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <FLASH_WaitForLastOperation+0x7c>)
 80042f8:	2220      	movs	r2, #32
 80042fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <FLASH_WaitForLastOperation+0x7c>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b10      	cmp	r3, #16
 8004306:	d005      	beq.n	8004314 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <FLASH_WaitForLastOperation+0x7c>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004310:	2b04      	cmp	r3, #4
 8004312:	d103      	bne.n	800431c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004314:	f000 f80a 	bl	800432c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40022000 	.word	0x40022000

0800432c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <FLASH_SetErrorCode+0x5c>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b10      	cmp	r3, #16
 8004340:	d109      	bne.n	8004356 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <FLASH_SetErrorCode+0x60>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f043 0302 	orr.w	r3, r3, #2
 800434a:	4a10      	ldr	r2, [pc, #64]	; (800438c <FLASH_SetErrorCode+0x60>)
 800434c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f043 0310 	orr.w	r3, r3, #16
 8004354:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <FLASH_SetErrorCode+0x5c>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b04      	cmp	r3, #4
 8004360:	d109      	bne.n	8004376 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <FLASH_SetErrorCode+0x60>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	4a08      	ldr	r2, [pc, #32]	; (800438c <FLASH_SetErrorCode+0x60>)
 800436c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004376:	4a04      	ldr	r2, [pc, #16]	; (8004388 <FLASH_SetErrorCode+0x5c>)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60d3      	str	r3, [r2, #12]
}  
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40022000 	.word	0x40022000
 800438c:	20000900 	.word	0x20000900

08004390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800439e:	e14e      	b.n	800463e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8140 	beq.w	8004638 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d005      	beq.n	80043d0 <HAL_GPIO_Init+0x40>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d130      	bne.n	8004432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2203      	movs	r2, #3
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004406:	2201      	movs	r2, #1
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 0201 	and.w	r2, r3, #1
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b03      	cmp	r3, #3
 800443c:	d017      	beq.n	800446e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	2203      	movs	r2, #3
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d123      	bne.n	80044c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	08da      	lsrs	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3208      	adds	r2, #8
 8004482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	220f      	movs	r2, #15
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	08da      	lsrs	r2, r3, #3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3208      	adds	r2, #8
 80044bc:	6939      	ldr	r1, [r7, #16]
 80044be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	2203      	movs	r2, #3
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0203 	and.w	r2, r3, #3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 809a 	beq.w	8004638 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004504:	4b55      	ldr	r3, [pc, #340]	; (800465c <HAL_GPIO_Init+0x2cc>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	4a54      	ldr	r2, [pc, #336]	; (800465c <HAL_GPIO_Init+0x2cc>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6193      	str	r3, [r2, #24]
 8004510:	4b52      	ldr	r3, [pc, #328]	; (800465c <HAL_GPIO_Init+0x2cc>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800451c:	4a50      	ldr	r2, [pc, #320]	; (8004660 <HAL_GPIO_Init+0x2d0>)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	3302      	adds	r3, #2
 8004524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	220f      	movs	r2, #15
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004546:	d013      	beq.n	8004570 <HAL_GPIO_Init+0x1e0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a46      	ldr	r2, [pc, #280]	; (8004664 <HAL_GPIO_Init+0x2d4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00d      	beq.n	800456c <HAL_GPIO_Init+0x1dc>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a45      	ldr	r2, [pc, #276]	; (8004668 <HAL_GPIO_Init+0x2d8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d007      	beq.n	8004568 <HAL_GPIO_Init+0x1d8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a44      	ldr	r2, [pc, #272]	; (800466c <HAL_GPIO_Init+0x2dc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d101      	bne.n	8004564 <HAL_GPIO_Init+0x1d4>
 8004560:	2303      	movs	r3, #3
 8004562:	e006      	b.n	8004572 <HAL_GPIO_Init+0x1e2>
 8004564:	2305      	movs	r3, #5
 8004566:	e004      	b.n	8004572 <HAL_GPIO_Init+0x1e2>
 8004568:	2302      	movs	r3, #2
 800456a:	e002      	b.n	8004572 <HAL_GPIO_Init+0x1e2>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <HAL_GPIO_Init+0x1e2>
 8004570:	2300      	movs	r3, #0
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	f002 0203 	and.w	r2, r2, #3
 8004578:	0092      	lsls	r2, r2, #2
 800457a:	4093      	lsls	r3, r2
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004582:	4937      	ldr	r1, [pc, #220]	; (8004660 <HAL_GPIO_Init+0x2d0>)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	3302      	adds	r3, #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004590:	4b37      	ldr	r3, [pc, #220]	; (8004670 <HAL_GPIO_Init+0x2e0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	43db      	mvns	r3, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4013      	ands	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045b4:	4a2e      	ldr	r2, [pc, #184]	; (8004670 <HAL_GPIO_Init+0x2e0>)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_GPIO_Init+0x2e0>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80045de:	4a24      	ldr	r2, [pc, #144]	; (8004670 <HAL_GPIO_Init+0x2e0>)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045e4:	4b22      	ldr	r3, [pc, #136]	; (8004670 <HAL_GPIO_Init+0x2e0>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004608:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_GPIO_Init+0x2e0>)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800460e:	4b18      	ldr	r3, [pc, #96]	; (8004670 <HAL_GPIO_Init+0x2e0>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	43db      	mvns	r3, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004632:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <HAL_GPIO_Init+0x2e0>)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3301      	adds	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f aea9 	bne.w	80043a0 <HAL_GPIO_Init+0x10>
  }
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40021000 	.word	0x40021000
 8004660:	40010000 	.word	0x40010000
 8004664:	48000400 	.word	0x48000400
 8004668:	48000800 	.word	0x48000800
 800466c:	48000c00 	.word	0x48000c00
 8004670:	40010400 	.word	0x40010400

08004674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	e001      	b.n	8004696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
 80046b0:	4613      	mov	r3, r2
 80046b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046b4:	787b      	ldrb	r3, [r7, #1]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ba:	887a      	ldrh	r2, [r7, #2]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046c0:	e002      	b.n	80046c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80046da:	af00      	add	r7, sp, #0
 80046dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f001 b823 	b.w	8005740 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 817d 	beq.w	8004a0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004710:	4bbc      	ldr	r3, [pc, #752]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b04      	cmp	r3, #4
 800471a:	d00c      	beq.n	8004736 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800471c:	4bb9      	ldr	r3, [pc, #740]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b08      	cmp	r3, #8
 8004726:	d15c      	bne.n	80047e2 <HAL_RCC_OscConfig+0x10e>
 8004728:	4bb6      	ldr	r3, [pc, #728]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	d155      	bne.n	80047e2 <HAL_RCC_OscConfig+0x10e>
 8004736:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800473a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800474a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d102      	bne.n	8004768 <HAL_RCC_OscConfig+0x94>
 8004762:	4ba8      	ldr	r3, [pc, #672]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	e015      	b.n	8004794 <HAL_RCC_OscConfig+0xc0>
 8004768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800476c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004774:	fa93 f3a3 	rbit	r3, r3
 8004778:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800477c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004780:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004784:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004790:	4b9c      	ldr	r3, [pc, #624]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004798:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800479c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80047a0:	fa92 f2a2 	rbit	r2, r2
 80047a4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80047a8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80047ac:	fab2 f282 	clz	r2, r2
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	f042 0220 	orr.w	r2, r2, #32
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	f002 021f 	and.w	r2, r2, #31
 80047bc:	2101      	movs	r1, #1
 80047be:	fa01 f202 	lsl.w	r2, r1, r2
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 811f 	beq.w	8004a08 <HAL_RCC_OscConfig+0x334>
 80047ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 8116 	bne.w	8004a08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f000 bfaf 	b.w	8005740 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x12e>
 80047f4:	4b83      	ldr	r3, [pc, #524]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a82      	ldr	r2, [pc, #520]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 80047fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	e036      	b.n	8004870 <HAL_RCC_OscConfig+0x19c>
 8004802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x158>
 8004812:	4b7c      	ldr	r3, [pc, #496]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a7b      	ldr	r2, [pc, #492]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b79      	ldr	r3, [pc, #484]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a78      	ldr	r2, [pc, #480]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e021      	b.n	8004870 <HAL_RCC_OscConfig+0x19c>
 800482c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004830:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x184>
 800483e:	4b71      	ldr	r3, [pc, #452]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a70      	ldr	r2, [pc, #448]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	4b6e      	ldr	r3, [pc, #440]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a6d      	ldr	r2, [pc, #436]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e00b      	b.n	8004870 <HAL_RCC_OscConfig+0x19c>
 8004858:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a69      	ldr	r2, [pc, #420]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 800485e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	4b67      	ldr	r3, [pc, #412]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a66      	ldr	r2, [pc, #408]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 800486a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004870:	4b64      	ldr	r3, [pc, #400]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	f023 020f 	bic.w	r2, r3, #15
 8004878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	495f      	ldr	r1, [pc, #380]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004886:	4313      	orrs	r3, r2
 8004888:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800488a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d059      	beq.n	800494e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489a:	f7fe fc0f 	bl	80030bc <HAL_GetTick>
 800489e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fe fc0a 	bl	80030bc <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b64      	cmp	r3, #100	; 0x64
 80048b2:	d902      	bls.n	80048ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	f000 bf43 	b.w	8005740 <HAL_RCC_OscConfig+0x106c>
 80048ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048be:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80048c6:	fa93 f3a3 	rbit	r3, r3
 80048ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80048ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d2:	fab3 f383 	clz	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_RCC_OscConfig+0x218>
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	e015      	b.n	8004918 <HAL_RCC_OscConfig+0x244>
 80048ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048f0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004904:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004908:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004914:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800491c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004920:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004924:	fa92 f2a2 	rbit	r2, r2
 8004928:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800492c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004930:	fab2 f282 	clz	r2, r2
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	f042 0220 	orr.w	r2, r2, #32
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	f002 021f 	and.w	r2, r2, #31
 8004940:	2101      	movs	r1, #1
 8004942:	fa01 f202 	lsl.w	r2, r1, r2
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ab      	beq.n	80048a4 <HAL_RCC_OscConfig+0x1d0>
 800494c:	e05d      	b.n	8004a0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494e:	f7fe fbb5 	bl	80030bc <HAL_GetTick>
 8004952:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004958:	f7fe fbb0 	bl	80030bc <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b64      	cmp	r3, #100	; 0x64
 8004966:	d902      	bls.n	800496e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	f000 bee9 	b.w	8005740 <HAL_RCC_OscConfig+0x106c>
 800496e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004972:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004982:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d102      	bne.n	80049a0 <HAL_RCC_OscConfig+0x2cc>
 800499a:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	e015      	b.n	80049cc <HAL_RCC_OscConfig+0x2f8>
 80049a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049a4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80049ac:	fa93 f3a3 	rbit	r3, r3
 80049b0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80049b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049b8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80049bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80049c0:	fa93 f3a3 	rbit	r3, r3
 80049c4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_RCC_OscConfig+0x330>)
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049d0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80049d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80049d8:	fa92 f2a2 	rbit	r2, r2
 80049dc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80049e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80049e4:	fab2 f282 	clz	r2, r2
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	f042 0220 	orr.w	r2, r2, #32
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	f002 021f 	and.w	r2, r2, #31
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f202 	lsl.w	r2, r1, r2
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ab      	bne.n	8004958 <HAL_RCC_OscConfig+0x284>
 8004a00:	e003      	b.n	8004a0a <HAL_RCC_OscConfig+0x336>
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 817d 	beq.w	8004d1a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a20:	4ba6      	ldr	r3, [pc, #664]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a2c:	4ba3      	ldr	r3, [pc, #652]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d172      	bne.n	8004b1e <HAL_RCC_OscConfig+0x44a>
 8004a38:	4ba0      	ldr	r3, [pc, #640]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d16c      	bne.n	8004b1e <HAL_RCC_OscConfig+0x44a>
 8004a44:	2302      	movs	r3, #2
 8004a46:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a4e:	fa93 f3a3 	rbit	r3, r3
 8004a52:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004a56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_OscConfig+0x3a0>
 8004a6e:	4b93      	ldr	r3, [pc, #588]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	e013      	b.n	8004a9c <HAL_RCC_OscConfig+0x3c8>
 8004a74:	2302      	movs	r3, #2
 8004a76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004a86:	2302      	movs	r3, #2
 8004a88:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004a8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004a98:	4b88      	ldr	r3, [pc, #544]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004aa2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004aa6:	fa92 f2a2 	rbit	r2, r2
 8004aaa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004aae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004ab2:	fab2 f282 	clz	r2, r2
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	f042 0220 	orr.w	r2, r2, #32
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	f002 021f 	and.w	r2, r2, #31
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x410>
 8004ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d002      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f000 be2e 	b.w	8005740 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae4:	4b75      	ldr	r3, [pc, #468]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	21f8      	movs	r1, #248	; 0xf8
 8004afa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b02:	fa91 f1a1 	rbit	r1, r1
 8004b06:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004b0a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b0e:	fab1 f181 	clz	r1, r1
 8004b12:	b2c9      	uxtb	r1, r1
 8004b14:	408b      	lsls	r3, r1
 8004b16:	4969      	ldr	r1, [pc, #420]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1c:	e0fd      	b.n	8004d1a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8088 	beq.w	8004c40 <HAL_RCC_OscConfig+0x56c>
 8004b30:	2301      	movs	r3, #1
 8004b32:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b3a:	fa93 f3a3 	rbit	r3, r3
 8004b3e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004b42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b46:	fab3 f383 	clz	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	461a      	mov	r2, r3
 8004b58:	2301      	movs	r3, #1
 8004b5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5c:	f7fe faae 	bl	80030bc <HAL_GetTick>
 8004b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fe faa9 	bl	80030bc <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d902      	bls.n	8004b7c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	f000 bde2 	b.w	8005740 <HAL_RCC_OscConfig+0x106c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004b8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d102      	bne.n	8004bac <HAL_RCC_OscConfig+0x4d8>
 8004ba6:	4b45      	ldr	r3, [pc, #276]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	e013      	b.n	8004bd4 <HAL_RCC_OscConfig+0x500>
 8004bac:	2302      	movs	r3, #2
 8004bae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004bb6:	fa93 f3a3 	rbit	r3, r3
 8004bba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004bc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004bc8:	fa93 f3a3 	rbit	r3, r3
 8004bcc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004bd0:	4b3a      	ldr	r3, [pc, #232]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004bda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004bde:	fa92 f2a2 	rbit	r2, r2
 8004be2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004be6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004bea:	fab2 f282 	clz	r2, r2
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	f042 0220 	orr.w	r2, r2, #32
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	f002 021f 	and.w	r2, r2, #31
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0af      	beq.n	8004b66 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c06:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	21f8      	movs	r1, #248	; 0xf8
 8004c1c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c24:	fa91 f1a1 	rbit	r1, r1
 8004c28:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004c2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c30:	fab1 f181 	clz	r1, r1
 8004c34:	b2c9      	uxtb	r1, r1
 8004c36:	408b      	lsls	r3, r1
 8004c38:	4920      	ldr	r1, [pc, #128]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	600b      	str	r3, [r1, #0]
 8004c3e:	e06c      	b.n	8004d1a <HAL_RCC_OscConfig+0x646>
 8004c40:	2301      	movs	r3, #1
 8004c42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004c52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c56:	fab3 f383 	clz	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	461a      	mov	r2, r3
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fe fa26 	bl	80030bc <HAL_GetTick>
 8004c70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c76:	f7fe fa21 	bl	80030bc <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d902      	bls.n	8004c8c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	f000 bd5a 	b.w	8005740 <HAL_RCC_OscConfig+0x106c>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c96:	fa93 f3a3 	rbit	r3, r3
 8004c9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	fab3 f383 	clz	r3, r3
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d104      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x5ec>
 8004cb6:	4b01      	ldr	r3, [pc, #4]	; (8004cbc <HAL_RCC_OscConfig+0x5e8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	e015      	b.n	8004ce8 <HAL_RCC_OscConfig+0x614>
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004cd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ce4:	4bc8      	ldr	r3, [pc, #800]	; (8005008 <HAL_RCC_OscConfig+0x934>)
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004cee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004cf2:	fa92 f2a2 	rbit	r2, r2
 8004cf6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004cfa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004cfe:	fab2 f282 	clz	r2, r2
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	f042 0220 	orr.w	r2, r2, #32
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	f002 021f 	and.w	r2, r2, #31
 8004d0e:	2101      	movs	r1, #1
 8004d10:	fa01 f202 	lsl.w	r2, r1, r2
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ad      	bne.n	8004c76 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8110 	beq.w	8004f50 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d079      	beq.n	8004e34 <HAL_RCC_OscConfig+0x760>
 8004d40:	2301      	movs	r3, #1
 8004d42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d4a:	fa93 f3a3 	rbit	r3, r3
 8004d4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4bab      	ldr	r3, [pc, #684]	; (800500c <HAL_RCC_OscConfig+0x938>)
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	461a      	mov	r2, r3
 8004d66:	2301      	movs	r3, #1
 8004d68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6a:	f7fe f9a7 	bl	80030bc <HAL_GetTick>
 8004d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d74:	f7fe f9a2 	bl	80030bc <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d902      	bls.n	8004d8a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	f000 bcdb 	b.w	8005740 <HAL_RCC_OscConfig+0x106c>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d94:	fa93 f3a3 	rbit	r3, r3
 8004d98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004da4:	2202      	movs	r2, #2
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	fa93 f2a3 	rbit	r2, r3
 8004db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc8:	2202      	movs	r2, #2
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	fa93 f2a3 	rbit	r2, r3
 8004dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004de2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de4:	4b88      	ldr	r3, [pc, #544]	; (8005008 <HAL_RCC_OscConfig+0x934>)
 8004de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004df0:	2102      	movs	r1, #2
 8004df2:	6019      	str	r1, [r3, #0]
 8004df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	fa93 f1a3 	rbit	r1, r3
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e0a:	6019      	str	r1, [r3, #0]
  return result;
 8004e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2101      	movs	r1, #1
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0a0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x6a0>
 8004e32:	e08d      	b.n	8004f50 <HAL_RCC_OscConfig+0x87c>
 8004e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	fa93 f2a3 	rbit	r2, r3
 8004e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e56:	601a      	str	r2, [r3, #0]
  return result;
 8004e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b68      	ldr	r3, [pc, #416]	; (800500c <HAL_RCC_OscConfig+0x938>)
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	461a      	mov	r2, r3
 8004e72:	2300      	movs	r3, #0
 8004e74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e76:	f7fe f921 	bl	80030bc <HAL_GetTick>
 8004e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e80:	f7fe f91c 	bl	80030bc <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d902      	bls.n	8004e96 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	f000 bc55 	b.w	8005740 <HAL_RCC_OscConfig+0x106c>
 8004e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	fa93 f2a3 	rbit	r2, r3
 8004eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	fa93 f2a3 	rbit	r2, r3
 8004ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	fa93 f2a3 	rbit	r2, r3
 8004ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004f00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f02:	4b41      	ldr	r3, [pc, #260]	; (8005008 <HAL_RCC_OscConfig+0x934>)
 8004f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f0e:	2102      	movs	r1, #2
 8004f10:	6019      	str	r1, [r3, #0]
 8004f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	fa93 f1a3 	rbit	r1, r3
 8004f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f28:	6019      	str	r1, [r3, #0]
  return result;
 8004f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d197      	bne.n	8004e80 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 81a1 	beq.w	80052a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f66:	2300      	movs	r3, #0
 8004f68:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f6c:	4b26      	ldr	r3, [pc, #152]	; (8005008 <HAL_RCC_OscConfig+0x934>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d116      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f78:	4b23      	ldr	r3, [pc, #140]	; (8005008 <HAL_RCC_OscConfig+0x934>)
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	4a22      	ldr	r2, [pc, #136]	; (8005008 <HAL_RCC_OscConfig+0x934>)
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f82:	61d3      	str	r3, [r2, #28]
 8004f84:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_RCC_OscConfig+0x934>)
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f90:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004f9e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <HAL_RCC_OscConfig+0x93c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11a      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <HAL_RCC_OscConfig+0x93c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a16      	ldr	r2, [pc, #88]	; (8005010 <HAL_RCC_OscConfig+0x93c>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fbe:	f7fe f87d 	bl	80030bc <HAL_GetTick>
 8004fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc6:	e009      	b.n	8004fdc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc8:	f7fe f878 	bl	80030bc <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b64      	cmp	r3, #100	; 0x64
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e3b1      	b.n	8005740 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <HAL_RCC_OscConfig+0x93c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ef      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCC_OscConfig+0x940>
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_RCC_OscConfig+0x934>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4a02      	ldr	r2, [pc, #8]	; (8005008 <HAL_RCC_OscConfig+0x934>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6213      	str	r3, [r2, #32]
 8005004:	e03c      	b.n	8005080 <HAL_RCC_OscConfig+0x9ac>
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
 800500c:	10908120 	.word	0x10908120
 8005010:	40007000 	.word	0x40007000
 8005014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005018:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10c      	bne.n	800503e <HAL_RCC_OscConfig+0x96a>
 8005024:	4bc1      	ldr	r3, [pc, #772]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	4ac0      	ldr	r2, [pc, #768]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	6213      	str	r3, [r2, #32]
 8005030:	4bbe      	ldr	r3, [pc, #760]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	4abd      	ldr	r2, [pc, #756]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 8005036:	f023 0304 	bic.w	r3, r3, #4
 800503a:	6213      	str	r3, [r2, #32]
 800503c:	e020      	b.n	8005080 <HAL_RCC_OscConfig+0x9ac>
 800503e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x994>
 800504e:	4bb7      	ldr	r3, [pc, #732]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4ab6      	ldr	r2, [pc, #728]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	6213      	str	r3, [r2, #32]
 800505a:	4bb4      	ldr	r3, [pc, #720]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	4ab3      	ldr	r2, [pc, #716]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6213      	str	r3, [r2, #32]
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0x9ac>
 8005068:	4bb0      	ldr	r3, [pc, #704]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	4aaf      	ldr	r2, [pc, #700]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	6213      	str	r3, [r2, #32]
 8005074:	4bad      	ldr	r3, [pc, #692]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	4aac      	ldr	r2, [pc, #688]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 800507a:	f023 0304 	bic.w	r3, r3, #4
 800507e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8081 	beq.w	8005194 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005092:	f7fe f813 	bl	80030bc <HAL_GetTick>
 8005096:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509a:	e00b      	b.n	80050b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fe f80e 	bl	80030bc <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e345      	b.n	8005740 <HAL_RCC_OscConfig+0x106c>
 80050b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80050bc:	2202      	movs	r2, #2
 80050be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	fa93 f2a3 	rbit	r2, r3
 80050ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80050e0:	2202      	movs	r2, #2
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	fa93 f2a3 	rbit	r2, r3
 80050f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80050fa:	601a      	str	r2, [r3, #0]
  return result;
 80050fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005100:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005104:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005106:	fab3 f383 	clz	r3, r3
 800510a:	b2db      	uxtb	r3, r3
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f043 0302 	orr.w	r3, r3, #2
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d102      	bne.n	8005120 <HAL_RCC_OscConfig+0xa4c>
 800511a:	4b84      	ldr	r3, [pc, #528]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	e013      	b.n	8005148 <HAL_RCC_OscConfig+0xa74>
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005128:	2202      	movs	r2, #2
 800512a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005130:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	fa93 f2a3 	rbit	r2, r3
 800513a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	4b79      	ldr	r3, [pc, #484]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800514c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005150:	2102      	movs	r1, #2
 8005152:	6011      	str	r1, [r2, #0]
 8005154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005158:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	fa92 f1a2 	rbit	r1, r2
 8005162:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005166:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800516a:	6011      	str	r1, [r2, #0]
  return result;
 800516c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005170:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	fab2 f282 	clz	r2, r2
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	f002 021f 	and.w	r2, r2, #31
 8005186:	2101      	movs	r1, #1
 8005188:	fa01 f202 	lsl.w	r2, r1, r2
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d084      	beq.n	800509c <HAL_RCC_OscConfig+0x9c8>
 8005192:	e07f      	b.n	8005294 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fd ff92 	bl	80030bc <HAL_GetTick>
 8005198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519c:	e00b      	b.n	80051b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fd ff8d 	bl	80030bc <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e2c4      	b.n	8005740 <HAL_RCC_OscConfig+0x106c>
 80051b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80051be:	2202      	movs	r2, #2
 80051c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	fa93 f2a3 	rbit	r2, r3
 80051d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80051e2:	2202      	movs	r2, #2
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	fa93 f2a3 	rbit	r2, r3
 80051f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80051fc:	601a      	str	r2, [r3, #0]
  return result;
 80051fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005202:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005206:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005208:	fab3 f383 	clz	r3, r3
 800520c:	b2db      	uxtb	r3, r3
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f043 0302 	orr.w	r3, r3, #2
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d102      	bne.n	8005222 <HAL_RCC_OscConfig+0xb4e>
 800521c:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	e013      	b.n	800524a <HAL_RCC_OscConfig+0xb76>
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800522a:	2202      	movs	r2, #2
 800522c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005232:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	fa93 f2a3 	rbit	r2, r3
 800523c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005240:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	4b39      	ldr	r3, [pc, #228]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800524e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005252:	2102      	movs	r1, #2
 8005254:	6011      	str	r1, [r2, #0]
 8005256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800525a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	fa92 f1a2 	rbit	r1, r2
 8005264:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005268:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800526c:	6011      	str	r1, [r2, #0]
  return result;
 800526e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005272:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	fab2 f282 	clz	r2, r2
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	f002 021f 	and.w	r2, r2, #31
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f202 	lsl.w	r2, r1, r2
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d184      	bne.n	800519e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005294:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800529c:	4b23      	ldr	r3, [pc, #140]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4a22      	ldr	r2, [pc, #136]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 80052a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8242 	beq.w	800573e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ba:	4b1c      	ldr	r3, [pc, #112]	; (800532c <HAL_RCC_OscConfig+0xc58>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	f000 8213 	beq.w	80056ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	f040 8162 	bne.w	800559e <HAL_RCC_OscConfig+0xeca>
 80052da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80052e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	fa93 f2a3 	rbit	r2, r3
 80052f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80052fe:	601a      	str	r2, [r3, #0]
  return result;
 8005300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005304:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005308:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530a:	fab3 f383 	clz	r3, r3
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	461a      	mov	r2, r3
 800531c:	2300      	movs	r3, #0
 800531e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005320:	f7fd fecc 	bl	80030bc <HAL_GetTick>
 8005324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005328:	e00c      	b.n	8005344 <HAL_RCC_OscConfig+0xc70>
 800532a:	bf00      	nop
 800532c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005330:	f7fd fec4 	bl	80030bc <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e1fd      	b.n	8005740 <HAL_RCC_OscConfig+0x106c>
 8005344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005348:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800534c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005356:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	fa93 f2a3 	rbit	r2, r3
 8005360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005364:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005368:	601a      	str	r2, [r3, #0]
  return result;
 800536a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800536e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005372:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005374:	fab3 f383 	clz	r3, r3
 8005378:	b2db      	uxtb	r3, r3
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d102      	bne.n	800538e <HAL_RCC_OscConfig+0xcba>
 8005388:	4bb0      	ldr	r3, [pc, #704]	; (800564c <HAL_RCC_OscConfig+0xf78>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	e027      	b.n	80053de <HAL_RCC_OscConfig+0xd0a>
 800538e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005392:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800539a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	fa93 f2a3 	rbit	r2, r3
 80053aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80053bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	fa93 f2a3 	rbit	r2, r3
 80053d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	4b9c      	ldr	r3, [pc, #624]	; (800564c <HAL_RCC_OscConfig+0xf78>)
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053e2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80053e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053ea:	6011      	str	r1, [r2, #0]
 80053ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053f0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	fa92 f1a2 	rbit	r1, r2
 80053fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005402:	6011      	str	r1, [r2, #0]
  return result;
 8005404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005408:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	fab2 f282 	clz	r2, r2
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	f042 0220 	orr.w	r2, r2, #32
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	f002 021f 	and.w	r2, r2, #31
 800541e:	2101      	movs	r1, #1
 8005420:	fa01 f202 	lsl.w	r2, r1, r2
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d182      	bne.n	8005330 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800542a:	4b88      	ldr	r3, [pc, #544]	; (800564c <HAL_RCC_OscConfig+0xf78>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800543e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	430b      	orrs	r3, r1
 800544c:	497f      	ldr	r1, [pc, #508]	; (800564c <HAL_RCC_OscConfig+0xf78>)
 800544e:	4313      	orrs	r3, r2
 8005450:	604b      	str	r3, [r1, #4]
 8005452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005456:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800545a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800545e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005464:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	fa93 f2a3 	rbit	r2, r3
 800546e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005472:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005476:	601a      	str	r2, [r3, #0]
  return result;
 8005478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005480:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800548c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	461a      	mov	r2, r3
 8005494:	2301      	movs	r3, #1
 8005496:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fd fe10 	bl	80030bc <HAL_GetTick>
 800549c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054a0:	e009      	b.n	80054b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a2:	f7fd fe0b 	bl	80030bc <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e144      	b.n	8005740 <HAL_RCC_OscConfig+0x106c>
 80054b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80054be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	fa93 f2a3 	rbit	r2, r3
 80054d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80054da:	601a      	str	r2, [r3, #0]
  return result;
 80054dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80054e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054e6:	fab3 f383 	clz	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d102      	bne.n	8005500 <HAL_RCC_OscConfig+0xe2c>
 80054fa:	4b54      	ldr	r3, [pc, #336]	; (800564c <HAL_RCC_OscConfig+0xf78>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	e027      	b.n	8005550 <HAL_RCC_OscConfig+0xe7c>
 8005500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005504:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800550c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005512:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	fa93 f2a3 	rbit	r2, r3
 800551c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005520:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800552e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005538:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	fa93 f2a3 	rbit	r2, r3
 8005542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005546:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	4b3f      	ldr	r3, [pc, #252]	; (800564c <HAL_RCC_OscConfig+0xf78>)
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005554:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005558:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800555c:	6011      	str	r1, [r2, #0]
 800555e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005562:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	fa92 f1a2 	rbit	r1, r2
 800556c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005570:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005574:	6011      	str	r1, [r2, #0]
  return result;
 8005576:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800557a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	fab2 f282 	clz	r2, r2
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	f042 0220 	orr.w	r2, r2, #32
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	f002 021f 	and.w	r2, r2, #31
 8005590:	2101      	movs	r1, #1
 8005592:	fa01 f202 	lsl.w	r2, r1, r2
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d082      	beq.n	80054a2 <HAL_RCC_OscConfig+0xdce>
 800559c:	e0cf      	b.n	800573e <HAL_RCC_OscConfig+0x106a>
 800559e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80055a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	fa93 f2a3 	rbit	r2, r3
 80055ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80055c2:	601a      	str	r2, [r3, #0]
  return result;
 80055c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80055cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	461a      	mov	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e4:	f7fd fd6a 	bl	80030bc <HAL_GetTick>
 80055e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ec:	e009      	b.n	8005602 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fd fd65 	bl	80030bc <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e09e      	b.n	8005740 <HAL_RCC_OscConfig+0x106c>
 8005602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005606:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800560a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800560e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005614:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	fa93 f2a3 	rbit	r2, r3
 800561e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005622:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005626:	601a      	str	r2, [r3, #0]
  return result;
 8005628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005630:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005632:	fab3 f383 	clz	r3, r3
 8005636:	b2db      	uxtb	r3, r3
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b01      	cmp	r3, #1
 8005644:	d104      	bne.n	8005650 <HAL_RCC_OscConfig+0xf7c>
 8005646:	4b01      	ldr	r3, [pc, #4]	; (800564c <HAL_RCC_OscConfig+0xf78>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	e029      	b.n	80056a0 <HAL_RCC_OscConfig+0xfcc>
 800564c:	40021000 	.word	0x40021000
 8005650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005654:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800565c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005662:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	fa93 f2a3 	rbit	r2, r3
 800566c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005670:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800567e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005688:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	fa93 f2a3 	rbit	r2, r3
 8005692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005696:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <HAL_RCC_OscConfig+0x1078>)
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056a4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80056a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056ac:	6011      	str	r1, [r2, #0]
 80056ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056b2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	fa92 f1a2 	rbit	r1, r2
 80056bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056c0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80056c4:	6011      	str	r1, [r2, #0]
  return result;
 80056c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056ca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	fab2 f282 	clz	r2, r2
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	f042 0220 	orr.w	r2, r2, #32
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	f002 021f 	and.w	r2, r2, #31
 80056e0:	2101      	movs	r1, #1
 80056e2:	fa01 f202 	lsl.w	r2, r1, r2
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d180      	bne.n	80055ee <HAL_RCC_OscConfig+0xf1a>
 80056ec:	e027      	b.n	800573e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e01e      	b.n	8005740 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_RCC_OscConfig+0x1078>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800570a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800570e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	429a      	cmp	r2, r3
 8005720:	d10b      	bne.n	800573a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005722:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800572a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005736:	429a      	cmp	r2, r3
 8005738:	d001      	beq.n	800573e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000

08005750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b09e      	sub	sp, #120	; 0x78
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e162      	b.n	8005a2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005768:	4b90      	ldr	r3, [pc, #576]	; (80059ac <HAL_RCC_ClockConfig+0x25c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d910      	bls.n	8005798 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005776:	4b8d      	ldr	r3, [pc, #564]	; (80059ac <HAL_RCC_ClockConfig+0x25c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f023 0207 	bic.w	r2, r3, #7
 800577e:	498b      	ldr	r1, [pc, #556]	; (80059ac <HAL_RCC_ClockConfig+0x25c>)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	4b89      	ldr	r3, [pc, #548]	; (80059ac <HAL_RCC_ClockConfig+0x25c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e14a      	b.n	8005a2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a4:	4b82      	ldr	r3, [pc, #520]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	497f      	ldr	r1, [pc, #508]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80dc 	beq.w	800597c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d13c      	bne.n	8005846 <HAL_RCC_ClockConfig+0xf6>
 80057cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057d4:	fa93 f3a3 	rbit	r3, r3
 80057d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80057da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057dc:	fab3 f383 	clz	r3, r3
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d102      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xa6>
 80057f0:	4b6f      	ldr	r3, [pc, #444]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	e00f      	b.n	8005816 <HAL_RCC_ClockConfig+0xc6>
 80057f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057fe:	fa93 f3a3 	rbit	r3, r3
 8005802:	667b      	str	r3, [r7, #100]	; 0x64
 8005804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005808:	663b      	str	r3, [r7, #96]	; 0x60
 800580a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800580c:	fa93 f3a3 	rbit	r3, r3
 8005810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005812:	4b67      	ldr	r3, [pc, #412]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800581a:	65ba      	str	r2, [r7, #88]	; 0x58
 800581c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800581e:	fa92 f2a2 	rbit	r2, r2
 8005822:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005824:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005826:	fab2 f282 	clz	r2, r2
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	f042 0220 	orr.w	r2, r2, #32
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	f002 021f 	and.w	r2, r2, #31
 8005836:	2101      	movs	r1, #1
 8005838:	fa01 f202 	lsl.w	r2, r1, r2
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d17b      	bne.n	800593a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e0f3      	b.n	8005a2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d13c      	bne.n	80058c8 <HAL_RCC_ClockConfig+0x178>
 800584e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005852:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d102      	bne.n	8005878 <HAL_RCC_ClockConfig+0x128>
 8005872:	4b4f      	ldr	r3, [pc, #316]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	e00f      	b.n	8005898 <HAL_RCC_ClockConfig+0x148>
 8005878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800587c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005880:	fa93 f3a3 	rbit	r3, r3
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
 8005886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800588a:	643b      	str	r3, [r7, #64]	; 0x40
 800588c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588e:	fa93 f3a3 	rbit	r3, r3
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005894:	4b46      	ldr	r3, [pc, #280]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800589c:	63ba      	str	r2, [r7, #56]	; 0x38
 800589e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a0:	fa92 f2a2 	rbit	r2, r2
 80058a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80058a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a8:	fab2 f282 	clz	r2, r2
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	f042 0220 	orr.w	r2, r2, #32
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	f002 021f 	and.w	r2, r2, #31
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f202 	lsl.w	r2, r1, r2
 80058be:	4013      	ands	r3, r2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d13a      	bne.n	800593a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0b2      	b.n	8005a2e <HAL_RCC_ClockConfig+0x2de>
 80058c8:	2302      	movs	r3, #2
 80058ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	fa93 f3a3 	rbit	r3, r3
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80058d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d6:	fab3 f383 	clz	r3, r3
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d102      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x1a0>
 80058ea:	4b31      	ldr	r3, [pc, #196]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	e00d      	b.n	800590c <HAL_RCC_ClockConfig+0x1bc>
 80058f0:	2302      	movs	r3, #2
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	fa93 f3a3 	rbit	r3, r3
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
 80058fc:	2302      	movs	r3, #2
 80058fe:	623b      	str	r3, [r7, #32]
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	fa93 f3a3 	rbit	r3, r3
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	4b29      	ldr	r3, [pc, #164]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2202      	movs	r2, #2
 800590e:	61ba      	str	r2, [r7, #24]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	fa92 f2a2 	rbit	r2, r2
 8005916:	617a      	str	r2, [r7, #20]
  return result;
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	fab2 f282 	clz	r2, r2
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	f042 0220 	orr.w	r2, r2, #32
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	f002 021f 	and.w	r2, r2, #31
 800592a:	2101      	movs	r1, #1
 800592c:	fa01 f202 	lsl.w	r2, r1, r2
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e079      	b.n	8005a2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593a:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f023 0203 	bic.w	r2, r3, #3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	491a      	ldr	r1, [pc, #104]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 8005948:	4313      	orrs	r3, r2
 800594a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800594c:	f7fd fbb6 	bl	80030bc <HAL_GetTick>
 8005950:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005952:	e00a      	b.n	800596a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005954:	f7fd fbb2 	bl	80030bc <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e061      	b.n	8005a2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f003 020c 	and.w	r2, r3, #12
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	429a      	cmp	r2, r3
 800597a:	d1eb      	bne.n	8005954 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_RCC_ClockConfig+0x25c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d214      	bcs.n	80059b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598a:	4b08      	ldr	r3, [pc, #32]	; (80059ac <HAL_RCC_ClockConfig+0x25c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 0207 	bic.w	r2, r3, #7
 8005992:	4906      	ldr	r1, [pc, #24]	; (80059ac <HAL_RCC_ClockConfig+0x25c>)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	4b04      	ldr	r3, [pc, #16]	; (80059ac <HAL_RCC_ClockConfig+0x25c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e040      	b.n	8005a2e <HAL_RCC_ClockConfig+0x2de>
 80059ac:	40022000 	.word	0x40022000
 80059b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c0:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <HAL_RCC_ClockConfig+0x2e8>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	491a      	ldr	r1, [pc, #104]	; (8005a38 <HAL_RCC_ClockConfig+0x2e8>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059de:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <HAL_RCC_ClockConfig+0x2e8>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	4912      	ldr	r1, [pc, #72]	; (8005a38 <HAL_RCC_ClockConfig+0x2e8>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80059f2:	f000 f829 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 80059f6:	4601      	mov	r1, r0
 80059f8:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <HAL_RCC_ClockConfig+0x2e8>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a00:	22f0      	movs	r2, #240	; 0xf0
 8005a02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	fa92 f2a2 	rbit	r2, r2
 8005a0a:	60fa      	str	r2, [r7, #12]
  return result;
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	fab2 f282 	clz	r2, r2
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	40d3      	lsrs	r3, r2
 8005a16:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <HAL_RCC_ClockConfig+0x2ec>)
 8005a18:	5cd3      	ldrb	r3, [r2, r3]
 8005a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8005a1e:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <HAL_RCC_ClockConfig+0x2f0>)
 8005a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <HAL_RCC_ClockConfig+0x2f4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fd fb04 	bl	8003034 <HAL_InitTick>
  
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3778      	adds	r7, #120	; 0x78
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	08008a74 	.word	0x08008a74
 8005a40:	20000058 	.word	0x20000058
 8005a44:	2000005c 	.word	0x2000005c

08005a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b08b      	sub	sp, #44	; 0x2c
 8005a4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d002      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x30>
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d003      	beq.n	8005a7e <HAL_RCC_GetSysClockFreq+0x36>
 8005a76:	e03c      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a78:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a7a:	623b      	str	r3, [r7, #32]
      break;
 8005a7c:	e03c      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005a84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005a88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	fa92 f2a2 	rbit	r2, r2
 8005a90:	607a      	str	r2, [r7, #4]
  return result;
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	fab2 f282 	clz	r2, r2
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	40d3      	lsrs	r3, r2
 8005a9c:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a9e:	5cd3      	ldrb	r3, [r2, r3]
 8005aa0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005aa2:	4b19      	ldr	r3, [pc, #100]	; (8005b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	220f      	movs	r2, #15
 8005aac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	fa92 f2a2 	rbit	r2, r2
 8005ab4:	60fa      	str	r2, [r7, #12]
  return result;
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	fab2 f282 	clz	r2, r2
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	40d3      	lsrs	r3, r2
 8005ac0:	4a14      	ldr	r2, [pc, #80]	; (8005b14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005ac2:	5cd3      	ldrb	r3, [r2, r3]
 8005ac4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ad0:	4a0e      	ldr	r2, [pc, #56]	; (8005b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae0:	e004      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	4a0c      	ldr	r2, [pc, #48]	; (8005b18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ae6:	fb02 f303 	mul.w	r3, r2, r3
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	623b      	str	r3, [r7, #32]
      break;
 8005af0:	e002      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005af4:	623b      	str	r3, [r7, #32]
      break;
 8005af6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005af8:	6a3b      	ldr	r3, [r7, #32]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	372c      	adds	r7, #44	; 0x2c
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	007a1200 	.word	0x007a1200
 8005b10:	08008a84 	.word	0x08008a84
 8005b14:	08008a94 	.word	0x08008a94
 8005b18:	003d0900 	.word	0x003d0900

08005b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b092      	sub	sp, #72	; 0x48
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80cd 	beq.w	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b40:	4b86      	ldr	r3, [pc, #536]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10e      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b4c:	4b83      	ldr	r3, [pc, #524]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	4a82      	ldr	r2, [pc, #520]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	61d3      	str	r3, [r2, #28]
 8005b58:	4b80      	ldr	r3, [pc, #512]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6a:	4b7d      	ldr	r3, [pc, #500]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d118      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b76:	4b7a      	ldr	r3, [pc, #488]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a79      	ldr	r2, [pc, #484]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b82:	f7fd fa9b 	bl	80030bc <HAL_GetTick>
 8005b86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b88:	e008      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8a:	f7fd fa97 	bl	80030bc <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b64      	cmp	r3, #100	; 0x64
 8005b96:	d901      	bls.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0db      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9c:	4b70      	ldr	r3, [pc, #448]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ba8:	4b6c      	ldr	r3, [pc, #432]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d07d      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d076      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bc6:	4b65      	ldr	r3, [pc, #404]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bd4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	fa93 f3a3 	rbit	r3, r3
 8005bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005be0:	fab3 f383 	clz	r3, r3
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	fa93 f3a3 	rbit	r3, r3
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c04:	fab3 f383 	clz	r3, r3
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4b55      	ldr	r3, [pc, #340]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	461a      	mov	r2, r3
 8005c14:	2300      	movs	r3, #0
 8005c16:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c18:	4a50      	ldr	r2, [pc, #320]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d045      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fd fa48 	bl	80030bc <HAL_GetTick>
 8005c2c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2e:	e00a      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c30:	f7fd fa44 	bl	80030bc <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e086      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005c46:	2302      	movs	r3, #2
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	fa93 f3a3 	rbit	r3, r3
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
 8005c52:	2302      	movs	r3, #2
 8005c54:	623b      	str	r3, [r7, #32]
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	fa93 f3a3 	rbit	r3, r3
 8005c5c:	61fb      	str	r3, [r7, #28]
  return result;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c60:	fab3 f383 	clz	r3, r3
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	f043 0302 	orr.w	r3, r3, #2
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d102      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005c74:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	e007      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	fa93 f3a3 	rbit	r3, r3
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	4b35      	ldr	r3, [pc, #212]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	613a      	str	r2, [r7, #16]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	fa92 f2a2 	rbit	r2, r2
 8005c94:	60fa      	str	r2, [r7, #12]
  return result;
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	fab2 f282 	clz	r2, r2
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	f002 021f 	and.w	r2, r2, #31
 8005ca8:	2101      	movs	r1, #1
 8005caa:	fa01 f202 	lsl.w	r2, r1, r2
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0bd      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005cb4:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4926      	ldr	r1, [pc, #152]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d105      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cce:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	4a22      	ldr	r2, [pc, #136]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d008      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ce6:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	f023 0203 	bic.w	r2, r3, #3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	491a      	ldr	r1, [pc, #104]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d04:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	f023 0210 	bic.w	r2, r3, #16
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4912      	ldr	r1, [pc, #72]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d22:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	490b      	ldr	r1, [pc, #44]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	4903      	ldr	r1, [pc, #12]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3748      	adds	r7, #72	; 0x48
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	40007000 	.word	0x40007000
 8005d64:	10908100 	.word	0x10908100

08005d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e095      	b.n	8005ea6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d108      	bne.n	8005d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d8a:	d009      	beq.n	8005da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	61da      	str	r2, [r3, #28]
 8005d92:	e005      	b.n	8005da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc ff7a 	bl	8002cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005de0:	d902      	bls.n	8005de8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e002      	b.n	8005dee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005df6:	d007      	beq.n	8005e08 <HAL_SPI_Init+0xa0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	ea42 0103 	orr.w	r1, r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	f003 0204 	and.w	r2, r3, #4
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e84:	ea42 0103 	orr.w	r1, r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b088      	sub	sp, #32
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	603b      	str	r3, [r7, #0]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_SPI_Transmit+0x22>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e158      	b.n	8006182 <HAL_SPI_Transmit+0x2d4>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ed8:	f7fd f8f0 	bl	80030bc <HAL_GetTick>
 8005edc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d002      	beq.n	8005ef4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ef2:	e13d      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_SPI_Transmit+0x52>
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f04:	e134      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2203      	movs	r2, #3
 8005f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	88fa      	ldrh	r2, [r7, #6]
 8005f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f50:	d10f      	bne.n	8005f72 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b40      	cmp	r3, #64	; 0x40
 8005f7e:	d007      	beq.n	8005f90 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f98:	d94b      	bls.n	8006032 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_Transmit+0xfa>
 8005fa2:	8afb      	ldrh	r3, [r7, #22]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d13e      	bne.n	8006026 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	881a      	ldrh	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	1c9a      	adds	r2, r3, #2
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fcc:	e02b      	b.n	8006026 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d112      	bne.n	8006002 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	881a      	ldrh	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	1c9a      	adds	r2, r3, #2
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006000:	e011      	b.n	8006026 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006002:	f7fd f85b 	bl	80030bc <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d803      	bhi.n	800601a <HAL_SPI_Transmit+0x16c>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d102      	bne.n	8006020 <HAL_SPI_Transmit+0x172>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006024:	e0a4      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1ce      	bne.n	8005fce <HAL_SPI_Transmit+0x120>
 8006030:	e07c      	b.n	800612c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_SPI_Transmit+0x192>
 800603a:	8afb      	ldrh	r3, [r7, #22]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d170      	bne.n	8006122 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d912      	bls.n	8006070 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b02      	subs	r3, #2
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800606e:	e058      	b.n	8006122 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006096:	e044      	b.n	8006122 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d12b      	bne.n	80060fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d912      	bls.n	80060d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	881a      	ldrh	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	1c9a      	adds	r2, r3, #2
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b02      	subs	r3, #2
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060d4:	e025      	b.n	8006122 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060fc:	e011      	b.n	8006122 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fe:	f7fc ffdd 	bl	80030bc <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d803      	bhi.n	8006116 <HAL_SPI_Transmit+0x268>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d102      	bne.n	800611c <HAL_SPI_Transmit+0x26e>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006120:	e026      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1b5      	bne.n	8006098 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f949 	bl	80063c8 <SPI_EndRxTxTransaction>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	77fb      	strb	r3, [r7, #31]
 800616c:	e000      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800616e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006180:	7ffb      	ldrb	r3, [r7, #31]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800619c:	f7fc ff8e 	bl	80030bc <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	4413      	add	r3, r2
 80061aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061ac:	f7fc ff86 	bl	80030bc <HAL_GetTick>
 80061b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061b2:	4b39      	ldr	r3, [pc, #228]	; (8006298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	015b      	lsls	r3, r3, #5
 80061b8:	0d1b      	lsrs	r3, r3, #20
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061c2:	e054      	b.n	800626e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d050      	beq.n	800626e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061cc:	f7fc ff76 	bl	80030bc <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d902      	bls.n	80061e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d13d      	bne.n	800625e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061fa:	d111      	bne.n	8006220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006204:	d004      	beq.n	8006210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620e:	d107      	bne.n	8006220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800621e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006228:	d10f      	bne.n	800624a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e017      	b.n	800628e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	3b01      	subs	r3, #1
 800626c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4013      	ands	r3, r2
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	bf0c      	ite	eq
 800627e:	2301      	moveq	r3, #1
 8006280:	2300      	movne	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	429a      	cmp	r2, r3
 800628a:	d19b      	bne.n	80061c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20000058 	.word	0x20000058

0800629c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062ae:	f7fc ff05 	bl	80030bc <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	1a9b      	subs	r3, r3, r2
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	4413      	add	r3, r2
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062be:	f7fc fefd 	bl	80030bc <HAL_GetTick>
 80062c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062cc:	4b3d      	ldr	r3, [pc, #244]	; (80063c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	00da      	lsls	r2, r3, #3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	0d1b      	lsrs	r3, r3, #20
 80062dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062de:	fb02 f303 	mul.w	r3, r2, r3
 80062e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062e4:	e060      	b.n	80063a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062ec:	d107      	bne.n	80062fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d050      	beq.n	80063a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006306:	f7fc fed9 	bl	80030bc <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006312:	429a      	cmp	r2, r3
 8006314:	d902      	bls.n	800631c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	2b00      	cmp	r3, #0
 800631a:	d13d      	bne.n	8006398 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800632a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006334:	d111      	bne.n	800635a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800633e:	d004      	beq.n	800634a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006348:	d107      	bne.n	800635a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006358:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006362:	d10f      	bne.n	8006384 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006382:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e010      	b.n	80063ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4013      	ands	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d196      	bne.n	80062e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3728      	adds	r7, #40	; 0x28
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000058 	.word	0x20000058

080063c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2200      	movs	r2, #0
 80063dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff ff5b 	bl	800629c <SPI_WaitFifoStateUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f0:	f043 0220 	orr.w	r2, r3, #32
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e027      	b.n	800644c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2200      	movs	r2, #0
 8006404:	2180      	movs	r1, #128	; 0x80
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff fec0 	bl	800618c <SPI_WaitFlagStateUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006416:	f043 0220 	orr.w	r2, r3, #32
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e014      	b.n	800644c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2200      	movs	r2, #0
 800642a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7ff ff34 	bl	800629c <SPI_WaitFifoStateUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e000      	b.n	800644c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e049      	b.n	80064fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fc fc7a 	bl	8002d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f000 f94a 	bl	800672c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800651e:	2302      	movs	r3, #2
 8006520:	e0ff      	b.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b14      	cmp	r3, #20
 800652e:	f200 80f0 	bhi.w	8006712 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	0800658d 	.word	0x0800658d
 800653c:	08006713 	.word	0x08006713
 8006540:	08006713 	.word	0x08006713
 8006544:	08006713 	.word	0x08006713
 8006548:	080065cd 	.word	0x080065cd
 800654c:	08006713 	.word	0x08006713
 8006550:	08006713 	.word	0x08006713
 8006554:	08006713 	.word	0x08006713
 8006558:	0800660f 	.word	0x0800660f
 800655c:	08006713 	.word	0x08006713
 8006560:	08006713 	.word	0x08006713
 8006564:	08006713 	.word	0x08006713
 8006568:	0800664f 	.word	0x0800664f
 800656c:	08006713 	.word	0x08006713
 8006570:	08006713 	.word	0x08006713
 8006574:	08006713 	.word	0x08006713
 8006578:	08006691 	.word	0x08006691
 800657c:	08006713 	.word	0x08006713
 8006580:	08006713 	.word	0x08006713
 8006584:	08006713 	.word	0x08006713
 8006588:	080066d1 	.word	0x080066d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 f942 	bl	800681c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0208 	orr.w	r2, r2, #8
 80065a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0204 	bic.w	r2, r2, #4
 80065b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6999      	ldr	r1, [r3, #24]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	619a      	str	r2, [r3, #24]
      break;
 80065ca:	e0a5      	b.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f9a8 	bl	8006928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6999      	ldr	r1, [r3, #24]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	021a      	lsls	r2, r3, #8
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	619a      	str	r2, [r3, #24]
      break;
 800660c:	e084      	b.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fa07 	bl	8006a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0208 	orr.w	r2, r2, #8
 8006628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0204 	bic.w	r2, r2, #4
 8006638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69d9      	ldr	r1, [r3, #28]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	61da      	str	r2, [r3, #28]
      break;
 800664c:	e064      	b.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fa65 	bl	8006b24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69d9      	ldr	r1, [r3, #28]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	021a      	lsls	r2, r3, #8
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	61da      	str	r2, [r3, #28]
      break;
 800668e:	e043      	b.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 faa8 	bl	8006bec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0208 	orr.w	r2, r2, #8
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0204 	bic.w	r2, r2, #4
 80066ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066ce:	e023      	b.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fae6 	bl	8006ca8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	021a      	lsls	r2, r3, #8
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006710:	e002      	b.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	75fb      	strb	r3, [r7, #23]
      break;
 8006716:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006720:	7dfb      	ldrb	r3, [r7, #23]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop

0800672c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a32      	ldr	r2, [pc, #200]	; (8006808 <TIM_Base_SetConfig+0xdc>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d007      	beq.n	8006754 <TIM_Base_SetConfig+0x28>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800674a:	d003      	beq.n	8006754 <TIM_Base_SetConfig+0x28>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a2f      	ldr	r2, [pc, #188]	; (800680c <TIM_Base_SetConfig+0xe0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d108      	bne.n	8006766 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a27      	ldr	r2, [pc, #156]	; (8006808 <TIM_Base_SetConfig+0xdc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <TIM_Base_SetConfig+0x6a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006774:	d00f      	beq.n	8006796 <TIM_Base_SetConfig+0x6a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a24      	ldr	r2, [pc, #144]	; (800680c <TIM_Base_SetConfig+0xe0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00b      	beq.n	8006796 <TIM_Base_SetConfig+0x6a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a23      	ldr	r2, [pc, #140]	; (8006810 <TIM_Base_SetConfig+0xe4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d007      	beq.n	8006796 <TIM_Base_SetConfig+0x6a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a22      	ldr	r2, [pc, #136]	; (8006814 <TIM_Base_SetConfig+0xe8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_Base_SetConfig+0x6a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a21      	ldr	r2, [pc, #132]	; (8006818 <TIM_Base_SetConfig+0xec>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d108      	bne.n	80067a8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a0e      	ldr	r2, [pc, #56]	; (8006808 <TIM_Base_SetConfig+0xdc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00b      	beq.n	80067ec <TIM_Base_SetConfig+0xc0>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a0e      	ldr	r2, [pc, #56]	; (8006810 <TIM_Base_SetConfig+0xe4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d007      	beq.n	80067ec <TIM_Base_SetConfig+0xc0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a0d      	ldr	r2, [pc, #52]	; (8006814 <TIM_Base_SetConfig+0xe8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_Base_SetConfig+0xc0>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a0c      	ldr	r2, [pc, #48]	; (8006818 <TIM_Base_SetConfig+0xec>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d103      	bne.n	80067f4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	615a      	str	r2, [r3, #20]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40000400 	.word	0x40000400
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800

0800681c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f023 0201 	bic.w	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f023 0302 	bic.w	r3, r3, #2
 8006868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a28      	ldr	r2, [pc, #160]	; (8006918 <TIM_OC1_SetConfig+0xfc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00b      	beq.n	8006894 <TIM_OC1_SetConfig+0x78>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a27      	ldr	r2, [pc, #156]	; (800691c <TIM_OC1_SetConfig+0x100>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_OC1_SetConfig+0x78>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a26      	ldr	r2, [pc, #152]	; (8006920 <TIM_OC1_SetConfig+0x104>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_OC1_SetConfig+0x78>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a25      	ldr	r2, [pc, #148]	; (8006924 <TIM_OC1_SetConfig+0x108>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d10c      	bne.n	80068ae <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 0308 	bic.w	r3, r3, #8
 800689a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 0304 	bic.w	r3, r3, #4
 80068ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a19      	ldr	r2, [pc, #100]	; (8006918 <TIM_OC1_SetConfig+0xfc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00b      	beq.n	80068ce <TIM_OC1_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a18      	ldr	r2, [pc, #96]	; (800691c <TIM_OC1_SetConfig+0x100>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d007      	beq.n	80068ce <TIM_OC1_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a17      	ldr	r2, [pc, #92]	; (8006920 <TIM_OC1_SetConfig+0x104>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d003      	beq.n	80068ce <TIM_OC1_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a16      	ldr	r2, [pc, #88]	; (8006924 <TIM_OC1_SetConfig+0x108>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d111      	bne.n	80068f2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	621a      	str	r2, [r3, #32]
}
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f023 0210 	bic.w	r2, r3, #16
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0320 	bic.w	r3, r3, #32
 8006976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a24      	ldr	r2, [pc, #144]	; (8006a18 <TIM_OC2_SetConfig+0xf0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d10d      	bne.n	80069a8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a1b      	ldr	r2, [pc, #108]	; (8006a18 <TIM_OC2_SetConfig+0xf0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <TIM_OC2_SetConfig+0xa0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a1a      	ldr	r2, [pc, #104]	; (8006a1c <TIM_OC2_SetConfig+0xf4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_OC2_SetConfig+0xa0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <TIM_OC2_SetConfig+0xf8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC2_SetConfig+0xa0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a18      	ldr	r2, [pc, #96]	; (8006a24 <TIM_OC2_SetConfig+0xfc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d113      	bne.n	80069f0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069ce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069d6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	40014400 	.word	0x40014400
 8006a24:	40014800 	.word	0x40014800

08006a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0303 	bic.w	r3, r3, #3
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a23      	ldr	r2, [pc, #140]	; (8006b14 <TIM_OC3_SetConfig+0xec>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d10d      	bne.n	8006aa6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aa4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a1a      	ldr	r2, [pc, #104]	; (8006b14 <TIM_OC3_SetConfig+0xec>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00b      	beq.n	8006ac6 <TIM_OC3_SetConfig+0x9e>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <TIM_OC3_SetConfig+0xf0>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d007      	beq.n	8006ac6 <TIM_OC3_SetConfig+0x9e>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	; (8006b1c <TIM_OC3_SetConfig+0xf4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d003      	beq.n	8006ac6 <TIM_OC3_SetConfig+0x9e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a17      	ldr	r2, [pc, #92]	; (8006b20 <TIM_OC3_SetConfig+0xf8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d113      	bne.n	8006aee <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	621a      	str	r2, [r3, #32]
}
 8006b08:	bf00      	nop
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	40014400 	.word	0x40014400
 8006b20:	40014800 	.word	0x40014800

08006b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	031b      	lsls	r3, r3, #12
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <TIM_OC4_SetConfig+0xb8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00b      	beq.n	8006ba0 <TIM_OC4_SetConfig+0x7c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <TIM_OC4_SetConfig+0xbc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d007      	beq.n	8006ba0 <TIM_OC4_SetConfig+0x7c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <TIM_OC4_SetConfig+0xc0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_OC4_SetConfig+0x7c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <TIM_OC4_SetConfig+0xc4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d109      	bne.n	8006bb4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	019b      	lsls	r3, r3, #6
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	041b      	lsls	r3, r3, #16
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <TIM_OC5_SetConfig+0xac>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_OC5_SetConfig+0x72>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a14      	ldr	r2, [pc, #80]	; (8006c9c <TIM_OC5_SetConfig+0xb0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_OC5_SetConfig+0x72>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <TIM_OC5_SetConfig+0xb4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_OC5_SetConfig+0x72>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a12      	ldr	r2, [pc, #72]	; (8006ca4 <TIM_OC5_SetConfig+0xb8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d109      	bne.n	8006c72 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	621a      	str	r2, [r3, #32]
}
 8006c8c:	bf00      	nop
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800

08006ca8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	051b      	lsls	r3, r3, #20
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <TIM_OC6_SetConfig+0xb0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00b      	beq.n	8006d1c <TIM_OC6_SetConfig+0x74>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <TIM_OC6_SetConfig+0xb4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <TIM_OC6_SetConfig+0x74>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a14      	ldr	r2, [pc, #80]	; (8006d60 <TIM_OC6_SetConfig+0xb8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_OC6_SetConfig+0x74>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a13      	ldr	r2, [pc, #76]	; (8006d64 <TIM_OC6_SetConfig+0xbc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d109      	bne.n	8006d30 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	029b      	lsls	r3, r3, #10
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40012c00 	.word	0x40012c00
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800

08006d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e054      	b.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a24      	ldr	r2, [pc, #144]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d108      	bne.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006db0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a17      	ldr	r2, [pc, #92]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de8:	d009      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a11      	ldr	r2, [pc, #68]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d10c      	bne.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40000400 	.word	0x40000400
 8006e40:	40014000 	.word	0x40014000

08006e44 <__errno>:
 8006e44:	4b01      	ldr	r3, [pc, #4]	; (8006e4c <__errno+0x8>)
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000064 	.word	0x20000064

08006e50 <__libc_init_array>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	4d0d      	ldr	r5, [pc, #52]	; (8006e88 <__libc_init_array+0x38>)
 8006e54:	4c0d      	ldr	r4, [pc, #52]	; (8006e8c <__libc_init_array+0x3c>)
 8006e56:	1b64      	subs	r4, r4, r5
 8006e58:	10a4      	asrs	r4, r4, #2
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	42a6      	cmp	r6, r4
 8006e5e:	d109      	bne.n	8006e74 <__libc_init_array+0x24>
 8006e60:	4d0b      	ldr	r5, [pc, #44]	; (8006e90 <__libc_init_array+0x40>)
 8006e62:	4c0c      	ldr	r4, [pc, #48]	; (8006e94 <__libc_init_array+0x44>)
 8006e64:	f001 fa62 	bl	800832c <_init>
 8006e68:	1b64      	subs	r4, r4, r5
 8006e6a:	10a4      	asrs	r4, r4, #2
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	42a6      	cmp	r6, r4
 8006e70:	d105      	bne.n	8006e7e <__libc_init_array+0x2e>
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e78:	4798      	blx	r3
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7ee      	b.n	8006e5c <__libc_init_array+0xc>
 8006e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e82:	4798      	blx	r3
 8006e84:	3601      	adds	r6, #1
 8006e86:	e7f2      	b.n	8006e6e <__libc_init_array+0x1e>
 8006e88:	08008bec 	.word	0x08008bec
 8006e8c:	08008bec 	.word	0x08008bec
 8006e90:	08008bec 	.word	0x08008bec
 8006e94:	08008bf0 	.word	0x08008bf0

08006e98 <memcpy>:
 8006e98:	440a      	add	r2, r1
 8006e9a:	4291      	cmp	r1, r2
 8006e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ea0:	d100      	bne.n	8006ea4 <memcpy+0xc>
 8006ea2:	4770      	bx	lr
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eae:	4291      	cmp	r1, r2
 8006eb0:	d1f9      	bne.n	8006ea6 <memcpy+0xe>
 8006eb2:	bd10      	pop	{r4, pc}

08006eb4 <memset>:
 8006eb4:	4402      	add	r2, r0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d100      	bne.n	8006ebe <memset+0xa>
 8006ebc:	4770      	bx	lr
 8006ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ec2:	e7f9      	b.n	8006eb8 <memset+0x4>

08006ec4 <srand>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <srand+0x44>)
 8006ec8:	681d      	ldr	r5, [r3, #0]
 8006eca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006ecc:	4604      	mov	r4, r0
 8006ece:	b9b3      	cbnz	r3, 8006efe <srand+0x3a>
 8006ed0:	2018      	movs	r0, #24
 8006ed2:	f000 f8b3 	bl	800703c <malloc>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	63a8      	str	r0, [r5, #56]	; 0x38
 8006eda:	b920      	cbnz	r0, 8006ee6 <srand+0x22>
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <srand+0x48>)
 8006ede:	480c      	ldr	r0, [pc, #48]	; (8006f10 <srand+0x4c>)
 8006ee0:	2142      	movs	r1, #66	; 0x42
 8006ee2:	f000 f87b 	bl	8006fdc <__assert_func>
 8006ee6:	490b      	ldr	r1, [pc, #44]	; (8006f14 <srand+0x50>)
 8006ee8:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <srand+0x54>)
 8006eea:	e9c0 1300 	strd	r1, r3, [r0]
 8006eee:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <srand+0x58>)
 8006ef0:	6083      	str	r3, [r0, #8]
 8006ef2:	230b      	movs	r3, #11
 8006ef4:	8183      	strh	r3, [r0, #12]
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	2001      	movs	r0, #1
 8006efa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006efe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006f00:	2200      	movs	r2, #0
 8006f02:	611c      	str	r4, [r3, #16]
 8006f04:	615a      	str	r2, [r3, #20]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	20000064 	.word	0x20000064
 8006f0c:	08008aa8 	.word	0x08008aa8
 8006f10:	08008abf 	.word	0x08008abf
 8006f14:	abcd330e 	.word	0xabcd330e
 8006f18:	e66d1234 	.word	0xe66d1234
 8006f1c:	0005deec 	.word	0x0005deec

08006f20 <rand>:
 8006f20:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <rand+0x5c>)
 8006f22:	b510      	push	{r4, lr}
 8006f24:	681c      	ldr	r4, [r3, #0]
 8006f26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f28:	b9b3      	cbnz	r3, 8006f58 <rand+0x38>
 8006f2a:	2018      	movs	r0, #24
 8006f2c:	f000 f886 	bl	800703c <malloc>
 8006f30:	63a0      	str	r0, [r4, #56]	; 0x38
 8006f32:	b928      	cbnz	r0, 8006f40 <rand+0x20>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <rand+0x60>)
 8006f38:	4812      	ldr	r0, [pc, #72]	; (8006f84 <rand+0x64>)
 8006f3a:	214e      	movs	r1, #78	; 0x4e
 8006f3c:	f000 f84e 	bl	8006fdc <__assert_func>
 8006f40:	4a11      	ldr	r2, [pc, #68]	; (8006f88 <rand+0x68>)
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <rand+0x6c>)
 8006f44:	e9c0 2300 	strd	r2, r3, [r0]
 8006f48:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <rand+0x70>)
 8006f4a:	6083      	str	r3, [r0, #8]
 8006f4c:	230b      	movs	r3, #11
 8006f4e:	8183      	strh	r3, [r0, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	2300      	movs	r3, #0
 8006f54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006f58:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006f5a:	4a0e      	ldr	r2, [pc, #56]	; (8006f94 <rand+0x74>)
 8006f5c:	6920      	ldr	r0, [r4, #16]
 8006f5e:	6963      	ldr	r3, [r4, #20]
 8006f60:	490d      	ldr	r1, [pc, #52]	; (8006f98 <rand+0x78>)
 8006f62:	4342      	muls	r2, r0
 8006f64:	fb01 2203 	mla	r2, r1, r3, r2
 8006f68:	fba0 0101 	umull	r0, r1, r0, r1
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	eb42 0001 	adc.w	r0, r2, r1
 8006f72:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006f76:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006f7a:	bd10      	pop	{r4, pc}
 8006f7c:	20000064 	.word	0x20000064
 8006f80:	08008aa8 	.word	0x08008aa8
 8006f84:	08008abf 	.word	0x08008abf
 8006f88:	abcd330e 	.word	0xabcd330e
 8006f8c:	e66d1234 	.word	0xe66d1234
 8006f90:	0005deec 	.word	0x0005deec
 8006f94:	5851f42d 	.word	0x5851f42d
 8006f98:	4c957f2d 	.word	0x4c957f2d

08006f9c <siprintf>:
 8006f9c:	b40e      	push	{r1, r2, r3}
 8006f9e:	b500      	push	{lr}
 8006fa0:	b09c      	sub	sp, #112	; 0x70
 8006fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8006fa4:	9002      	str	r0, [sp, #8]
 8006fa6:	9006      	str	r0, [sp, #24]
 8006fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fac:	4809      	ldr	r0, [pc, #36]	; (8006fd4 <siprintf+0x38>)
 8006fae:	9107      	str	r1, [sp, #28]
 8006fb0:	9104      	str	r1, [sp, #16]
 8006fb2:	4909      	ldr	r1, [pc, #36]	; (8006fd8 <siprintf+0x3c>)
 8006fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb8:	9105      	str	r1, [sp, #20]
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	a902      	add	r1, sp, #8
 8006fc0:	f000 f980 	bl	80072c4 <_svfiprintf_r>
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	b01c      	add	sp, #112	; 0x70
 8006fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fd0:	b003      	add	sp, #12
 8006fd2:	4770      	bx	lr
 8006fd4:	20000064 	.word	0x20000064
 8006fd8:	ffff0208 	.word	0xffff0208

08006fdc <__assert_func>:
 8006fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fde:	4614      	mov	r4, r2
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4b09      	ldr	r3, [pc, #36]	; (8007008 <__assert_func+0x2c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	68d8      	ldr	r0, [r3, #12]
 8006fea:	b14c      	cbz	r4, 8007000 <__assert_func+0x24>
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <__assert_func+0x30>)
 8006fee:	9100      	str	r1, [sp, #0]
 8006ff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ff4:	4906      	ldr	r1, [pc, #24]	; (8007010 <__assert_func+0x34>)
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	f000 f80e 	bl	8007018 <fiprintf>
 8006ffc:	f000 fe20 	bl	8007c40 <abort>
 8007000:	4b04      	ldr	r3, [pc, #16]	; (8007014 <__assert_func+0x38>)
 8007002:	461c      	mov	r4, r3
 8007004:	e7f3      	b.n	8006fee <__assert_func+0x12>
 8007006:	bf00      	nop
 8007008:	20000064 	.word	0x20000064
 800700c:	08008b1a 	.word	0x08008b1a
 8007010:	08008b27 	.word	0x08008b27
 8007014:	08008b55 	.word	0x08008b55

08007018 <fiprintf>:
 8007018:	b40e      	push	{r1, r2, r3}
 800701a:	b503      	push	{r0, r1, lr}
 800701c:	4601      	mov	r1, r0
 800701e:	ab03      	add	r3, sp, #12
 8007020:	4805      	ldr	r0, [pc, #20]	; (8007038 <fiprintf+0x20>)
 8007022:	f853 2b04 	ldr.w	r2, [r3], #4
 8007026:	6800      	ldr	r0, [r0, #0]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	f000 fa75 	bl	8007518 <_vfiprintf_r>
 800702e:	b002      	add	sp, #8
 8007030:	f85d eb04 	ldr.w	lr, [sp], #4
 8007034:	b003      	add	sp, #12
 8007036:	4770      	bx	lr
 8007038:	20000064 	.word	0x20000064

0800703c <malloc>:
 800703c:	4b02      	ldr	r3, [pc, #8]	; (8007048 <malloc+0xc>)
 800703e:	4601      	mov	r1, r0
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	f000 b86f 	b.w	8007124 <_malloc_r>
 8007046:	bf00      	nop
 8007048:	20000064 	.word	0x20000064

0800704c <_free_r>:
 800704c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800704e:	2900      	cmp	r1, #0
 8007050:	d044      	beq.n	80070dc <_free_r+0x90>
 8007052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007056:	9001      	str	r0, [sp, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f1a1 0404 	sub.w	r4, r1, #4
 800705e:	bfb8      	it	lt
 8007060:	18e4      	addlt	r4, r4, r3
 8007062:	f001 f82f 	bl	80080c4 <__malloc_lock>
 8007066:	4a1e      	ldr	r2, [pc, #120]	; (80070e0 <_free_r+0x94>)
 8007068:	9801      	ldr	r0, [sp, #4]
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	b933      	cbnz	r3, 800707c <_free_r+0x30>
 800706e:	6063      	str	r3, [r4, #4]
 8007070:	6014      	str	r4, [r2, #0]
 8007072:	b003      	add	sp, #12
 8007074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007078:	f001 b82a 	b.w	80080d0 <__malloc_unlock>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d908      	bls.n	8007092 <_free_r+0x46>
 8007080:	6825      	ldr	r5, [r4, #0]
 8007082:	1961      	adds	r1, r4, r5
 8007084:	428b      	cmp	r3, r1
 8007086:	bf01      	itttt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	1949      	addeq	r1, r1, r5
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	e7ed      	b.n	800706e <_free_r+0x22>
 8007092:	461a      	mov	r2, r3
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b10b      	cbz	r3, 800709c <_free_r+0x50>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x46>
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	1855      	adds	r5, r2, r1
 80070a0:	42a5      	cmp	r5, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x70>
 80070a4:	6824      	ldr	r4, [r4, #0]
 80070a6:	4421      	add	r1, r4
 80070a8:	1854      	adds	r4, r2, r1
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	d1e0      	bne.n	8007072 <_free_r+0x26>
 80070b0:	681c      	ldr	r4, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	6053      	str	r3, [r2, #4]
 80070b6:	4421      	add	r1, r4
 80070b8:	6011      	str	r1, [r2, #0]
 80070ba:	e7da      	b.n	8007072 <_free_r+0x26>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x78>
 80070be:	230c      	movs	r3, #12
 80070c0:	6003      	str	r3, [r0, #0]
 80070c2:	e7d6      	b.n	8007072 <_free_r+0x26>
 80070c4:	6825      	ldr	r5, [r4, #0]
 80070c6:	1961      	adds	r1, r4, r5
 80070c8:	428b      	cmp	r3, r1
 80070ca:	bf04      	itt	eq
 80070cc:	6819      	ldreq	r1, [r3, #0]
 80070ce:	685b      	ldreq	r3, [r3, #4]
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	bf04      	itt	eq
 80070d4:	1949      	addeq	r1, r1, r5
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	6054      	str	r4, [r2, #4]
 80070da:	e7ca      	b.n	8007072 <_free_r+0x26>
 80070dc:	b003      	add	sp, #12
 80070de:	bd30      	pop	{r4, r5, pc}
 80070e0:	20000920 	.word	0x20000920

080070e4 <sbrk_aligned>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4e0e      	ldr	r6, [pc, #56]	; (8007120 <sbrk_aligned+0x3c>)
 80070e8:	460c      	mov	r4, r1
 80070ea:	6831      	ldr	r1, [r6, #0]
 80070ec:	4605      	mov	r5, r0
 80070ee:	b911      	cbnz	r1, 80070f6 <sbrk_aligned+0x12>
 80070f0:	f000 fcd6 	bl	8007aa0 <_sbrk_r>
 80070f4:	6030      	str	r0, [r6, #0]
 80070f6:	4621      	mov	r1, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	f000 fcd1 	bl	8007aa0 <_sbrk_r>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d00a      	beq.n	8007118 <sbrk_aligned+0x34>
 8007102:	1cc4      	adds	r4, r0, #3
 8007104:	f024 0403 	bic.w	r4, r4, #3
 8007108:	42a0      	cmp	r0, r4
 800710a:	d007      	beq.n	800711c <sbrk_aligned+0x38>
 800710c:	1a21      	subs	r1, r4, r0
 800710e:	4628      	mov	r0, r5
 8007110:	f000 fcc6 	bl	8007aa0 <_sbrk_r>
 8007114:	3001      	adds	r0, #1
 8007116:	d101      	bne.n	800711c <sbrk_aligned+0x38>
 8007118:	f04f 34ff 	mov.w	r4, #4294967295
 800711c:	4620      	mov	r0, r4
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	20000924 	.word	0x20000924

08007124 <_malloc_r>:
 8007124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007128:	1ccd      	adds	r5, r1, #3
 800712a:	f025 0503 	bic.w	r5, r5, #3
 800712e:	3508      	adds	r5, #8
 8007130:	2d0c      	cmp	r5, #12
 8007132:	bf38      	it	cc
 8007134:	250c      	movcc	r5, #12
 8007136:	2d00      	cmp	r5, #0
 8007138:	4607      	mov	r7, r0
 800713a:	db01      	blt.n	8007140 <_malloc_r+0x1c>
 800713c:	42a9      	cmp	r1, r5
 800713e:	d905      	bls.n	800714c <_malloc_r+0x28>
 8007140:	230c      	movs	r3, #12
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	2600      	movs	r6, #0
 8007146:	4630      	mov	r0, r6
 8007148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800714c:	4e2e      	ldr	r6, [pc, #184]	; (8007208 <_malloc_r+0xe4>)
 800714e:	f000 ffb9 	bl	80080c4 <__malloc_lock>
 8007152:	6833      	ldr	r3, [r6, #0]
 8007154:	461c      	mov	r4, r3
 8007156:	bb34      	cbnz	r4, 80071a6 <_malloc_r+0x82>
 8007158:	4629      	mov	r1, r5
 800715a:	4638      	mov	r0, r7
 800715c:	f7ff ffc2 	bl	80070e4 <sbrk_aligned>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	4604      	mov	r4, r0
 8007164:	d14d      	bne.n	8007202 <_malloc_r+0xde>
 8007166:	6834      	ldr	r4, [r6, #0]
 8007168:	4626      	mov	r6, r4
 800716a:	2e00      	cmp	r6, #0
 800716c:	d140      	bne.n	80071f0 <_malloc_r+0xcc>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	4631      	mov	r1, r6
 8007172:	4638      	mov	r0, r7
 8007174:	eb04 0803 	add.w	r8, r4, r3
 8007178:	f000 fc92 	bl	8007aa0 <_sbrk_r>
 800717c:	4580      	cmp	r8, r0
 800717e:	d13a      	bne.n	80071f6 <_malloc_r+0xd2>
 8007180:	6821      	ldr	r1, [r4, #0]
 8007182:	3503      	adds	r5, #3
 8007184:	1a6d      	subs	r5, r5, r1
 8007186:	f025 0503 	bic.w	r5, r5, #3
 800718a:	3508      	adds	r5, #8
 800718c:	2d0c      	cmp	r5, #12
 800718e:	bf38      	it	cc
 8007190:	250c      	movcc	r5, #12
 8007192:	4629      	mov	r1, r5
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ffa5 	bl	80070e4 <sbrk_aligned>
 800719a:	3001      	adds	r0, #1
 800719c:	d02b      	beq.n	80071f6 <_malloc_r+0xd2>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	442b      	add	r3, r5
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	e00e      	b.n	80071c4 <_malloc_r+0xa0>
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	1b52      	subs	r2, r2, r5
 80071aa:	d41e      	bmi.n	80071ea <_malloc_r+0xc6>
 80071ac:	2a0b      	cmp	r2, #11
 80071ae:	d916      	bls.n	80071de <_malloc_r+0xba>
 80071b0:	1961      	adds	r1, r4, r5
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	6025      	str	r5, [r4, #0]
 80071b6:	bf18      	it	ne
 80071b8:	6059      	strne	r1, [r3, #4]
 80071ba:	6863      	ldr	r3, [r4, #4]
 80071bc:	bf08      	it	eq
 80071be:	6031      	streq	r1, [r6, #0]
 80071c0:	5162      	str	r2, [r4, r5]
 80071c2:	604b      	str	r3, [r1, #4]
 80071c4:	4638      	mov	r0, r7
 80071c6:	f104 060b 	add.w	r6, r4, #11
 80071ca:	f000 ff81 	bl	80080d0 <__malloc_unlock>
 80071ce:	f026 0607 	bic.w	r6, r6, #7
 80071d2:	1d23      	adds	r3, r4, #4
 80071d4:	1af2      	subs	r2, r6, r3
 80071d6:	d0b6      	beq.n	8007146 <_malloc_r+0x22>
 80071d8:	1b9b      	subs	r3, r3, r6
 80071da:	50a3      	str	r3, [r4, r2]
 80071dc:	e7b3      	b.n	8007146 <_malloc_r+0x22>
 80071de:	6862      	ldr	r2, [r4, #4]
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	bf0c      	ite	eq
 80071e4:	6032      	streq	r2, [r6, #0]
 80071e6:	605a      	strne	r2, [r3, #4]
 80071e8:	e7ec      	b.n	80071c4 <_malloc_r+0xa0>
 80071ea:	4623      	mov	r3, r4
 80071ec:	6864      	ldr	r4, [r4, #4]
 80071ee:	e7b2      	b.n	8007156 <_malloc_r+0x32>
 80071f0:	4634      	mov	r4, r6
 80071f2:	6876      	ldr	r6, [r6, #4]
 80071f4:	e7b9      	b.n	800716a <_malloc_r+0x46>
 80071f6:	230c      	movs	r3, #12
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4638      	mov	r0, r7
 80071fc:	f000 ff68 	bl	80080d0 <__malloc_unlock>
 8007200:	e7a1      	b.n	8007146 <_malloc_r+0x22>
 8007202:	6025      	str	r5, [r4, #0]
 8007204:	e7de      	b.n	80071c4 <_malloc_r+0xa0>
 8007206:	bf00      	nop
 8007208:	20000920 	.word	0x20000920

0800720c <__ssputs_r>:
 800720c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007210:	688e      	ldr	r6, [r1, #8]
 8007212:	429e      	cmp	r6, r3
 8007214:	4682      	mov	sl, r0
 8007216:	460c      	mov	r4, r1
 8007218:	4690      	mov	r8, r2
 800721a:	461f      	mov	r7, r3
 800721c:	d838      	bhi.n	8007290 <__ssputs_r+0x84>
 800721e:	898a      	ldrh	r2, [r1, #12]
 8007220:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007224:	d032      	beq.n	800728c <__ssputs_r+0x80>
 8007226:	6825      	ldr	r5, [r4, #0]
 8007228:	6909      	ldr	r1, [r1, #16]
 800722a:	eba5 0901 	sub.w	r9, r5, r1
 800722e:	6965      	ldr	r5, [r4, #20]
 8007230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007234:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007238:	3301      	adds	r3, #1
 800723a:	444b      	add	r3, r9
 800723c:	106d      	asrs	r5, r5, #1
 800723e:	429d      	cmp	r5, r3
 8007240:	bf38      	it	cc
 8007242:	461d      	movcc	r5, r3
 8007244:	0553      	lsls	r3, r2, #21
 8007246:	d531      	bpl.n	80072ac <__ssputs_r+0xa0>
 8007248:	4629      	mov	r1, r5
 800724a:	f7ff ff6b 	bl	8007124 <_malloc_r>
 800724e:	4606      	mov	r6, r0
 8007250:	b950      	cbnz	r0, 8007268 <__ssputs_r+0x5c>
 8007252:	230c      	movs	r3, #12
 8007254:	f8ca 3000 	str.w	r3, [sl]
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	f04f 30ff 	mov.w	r0, #4294967295
 8007264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007268:	6921      	ldr	r1, [r4, #16]
 800726a:	464a      	mov	r2, r9
 800726c:	f7ff fe14 	bl	8006e98 <memcpy>
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727a:	81a3      	strh	r3, [r4, #12]
 800727c:	6126      	str	r6, [r4, #16]
 800727e:	6165      	str	r5, [r4, #20]
 8007280:	444e      	add	r6, r9
 8007282:	eba5 0509 	sub.w	r5, r5, r9
 8007286:	6026      	str	r6, [r4, #0]
 8007288:	60a5      	str	r5, [r4, #8]
 800728a:	463e      	mov	r6, r7
 800728c:	42be      	cmp	r6, r7
 800728e:	d900      	bls.n	8007292 <__ssputs_r+0x86>
 8007290:	463e      	mov	r6, r7
 8007292:	6820      	ldr	r0, [r4, #0]
 8007294:	4632      	mov	r2, r6
 8007296:	4641      	mov	r1, r8
 8007298:	f000 fefa 	bl	8008090 <memmove>
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	1b9b      	subs	r3, r3, r6
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	4433      	add	r3, r6
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	2000      	movs	r0, #0
 80072aa:	e7db      	b.n	8007264 <__ssputs_r+0x58>
 80072ac:	462a      	mov	r2, r5
 80072ae:	f000 ff15 	bl	80080dc <_realloc_r>
 80072b2:	4606      	mov	r6, r0
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d1e1      	bne.n	800727c <__ssputs_r+0x70>
 80072b8:	6921      	ldr	r1, [r4, #16]
 80072ba:	4650      	mov	r0, sl
 80072bc:	f7ff fec6 	bl	800704c <_free_r>
 80072c0:	e7c7      	b.n	8007252 <__ssputs_r+0x46>
	...

080072c4 <_svfiprintf_r>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	4698      	mov	r8, r3
 80072ca:	898b      	ldrh	r3, [r1, #12]
 80072cc:	061b      	lsls	r3, r3, #24
 80072ce:	b09d      	sub	sp, #116	; 0x74
 80072d0:	4607      	mov	r7, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	4614      	mov	r4, r2
 80072d6:	d50e      	bpl.n	80072f6 <_svfiprintf_r+0x32>
 80072d8:	690b      	ldr	r3, [r1, #16]
 80072da:	b963      	cbnz	r3, 80072f6 <_svfiprintf_r+0x32>
 80072dc:	2140      	movs	r1, #64	; 0x40
 80072de:	f7ff ff21 	bl	8007124 <_malloc_r>
 80072e2:	6028      	str	r0, [r5, #0]
 80072e4:	6128      	str	r0, [r5, #16]
 80072e6:	b920      	cbnz	r0, 80072f2 <_svfiprintf_r+0x2e>
 80072e8:	230c      	movs	r3, #12
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295
 80072f0:	e0d1      	b.n	8007496 <_svfiprintf_r+0x1d2>
 80072f2:	2340      	movs	r3, #64	; 0x40
 80072f4:	616b      	str	r3, [r5, #20]
 80072f6:	2300      	movs	r3, #0
 80072f8:	9309      	str	r3, [sp, #36]	; 0x24
 80072fa:	2320      	movs	r3, #32
 80072fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007300:	f8cd 800c 	str.w	r8, [sp, #12]
 8007304:	2330      	movs	r3, #48	; 0x30
 8007306:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074b0 <_svfiprintf_r+0x1ec>
 800730a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800730e:	f04f 0901 	mov.w	r9, #1
 8007312:	4623      	mov	r3, r4
 8007314:	469a      	mov	sl, r3
 8007316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800731a:	b10a      	cbz	r2, 8007320 <_svfiprintf_r+0x5c>
 800731c:	2a25      	cmp	r2, #37	; 0x25
 800731e:	d1f9      	bne.n	8007314 <_svfiprintf_r+0x50>
 8007320:	ebba 0b04 	subs.w	fp, sl, r4
 8007324:	d00b      	beq.n	800733e <_svfiprintf_r+0x7a>
 8007326:	465b      	mov	r3, fp
 8007328:	4622      	mov	r2, r4
 800732a:	4629      	mov	r1, r5
 800732c:	4638      	mov	r0, r7
 800732e:	f7ff ff6d 	bl	800720c <__ssputs_r>
 8007332:	3001      	adds	r0, #1
 8007334:	f000 80aa 	beq.w	800748c <_svfiprintf_r+0x1c8>
 8007338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800733a:	445a      	add	r2, fp
 800733c:	9209      	str	r2, [sp, #36]	; 0x24
 800733e:	f89a 3000 	ldrb.w	r3, [sl]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 80a2 	beq.w	800748c <_svfiprintf_r+0x1c8>
 8007348:	2300      	movs	r3, #0
 800734a:	f04f 32ff 	mov.w	r2, #4294967295
 800734e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007352:	f10a 0a01 	add.w	sl, sl, #1
 8007356:	9304      	str	r3, [sp, #16]
 8007358:	9307      	str	r3, [sp, #28]
 800735a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800735e:	931a      	str	r3, [sp, #104]	; 0x68
 8007360:	4654      	mov	r4, sl
 8007362:	2205      	movs	r2, #5
 8007364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007368:	4851      	ldr	r0, [pc, #324]	; (80074b0 <_svfiprintf_r+0x1ec>)
 800736a:	f7f8 ff39 	bl	80001e0 <memchr>
 800736e:	9a04      	ldr	r2, [sp, #16]
 8007370:	b9d8      	cbnz	r0, 80073aa <_svfiprintf_r+0xe6>
 8007372:	06d0      	lsls	r0, r2, #27
 8007374:	bf44      	itt	mi
 8007376:	2320      	movmi	r3, #32
 8007378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800737c:	0711      	lsls	r1, r2, #28
 800737e:	bf44      	itt	mi
 8007380:	232b      	movmi	r3, #43	; 0x2b
 8007382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007386:	f89a 3000 	ldrb.w	r3, [sl]
 800738a:	2b2a      	cmp	r3, #42	; 0x2a
 800738c:	d015      	beq.n	80073ba <_svfiprintf_r+0xf6>
 800738e:	9a07      	ldr	r2, [sp, #28]
 8007390:	4654      	mov	r4, sl
 8007392:	2000      	movs	r0, #0
 8007394:	f04f 0c0a 	mov.w	ip, #10
 8007398:	4621      	mov	r1, r4
 800739a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800739e:	3b30      	subs	r3, #48	; 0x30
 80073a0:	2b09      	cmp	r3, #9
 80073a2:	d94e      	bls.n	8007442 <_svfiprintf_r+0x17e>
 80073a4:	b1b0      	cbz	r0, 80073d4 <_svfiprintf_r+0x110>
 80073a6:	9207      	str	r2, [sp, #28]
 80073a8:	e014      	b.n	80073d4 <_svfiprintf_r+0x110>
 80073aa:	eba0 0308 	sub.w	r3, r0, r8
 80073ae:	fa09 f303 	lsl.w	r3, r9, r3
 80073b2:	4313      	orrs	r3, r2
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	46a2      	mov	sl, r4
 80073b8:	e7d2      	b.n	8007360 <_svfiprintf_r+0x9c>
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	1d19      	adds	r1, r3, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	9103      	str	r1, [sp, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bfbb      	ittet	lt
 80073c6:	425b      	neglt	r3, r3
 80073c8:	f042 0202 	orrlt.w	r2, r2, #2
 80073cc:	9307      	strge	r3, [sp, #28]
 80073ce:	9307      	strlt	r3, [sp, #28]
 80073d0:	bfb8      	it	lt
 80073d2:	9204      	strlt	r2, [sp, #16]
 80073d4:	7823      	ldrb	r3, [r4, #0]
 80073d6:	2b2e      	cmp	r3, #46	; 0x2e
 80073d8:	d10c      	bne.n	80073f4 <_svfiprintf_r+0x130>
 80073da:	7863      	ldrb	r3, [r4, #1]
 80073dc:	2b2a      	cmp	r3, #42	; 0x2a
 80073de:	d135      	bne.n	800744c <_svfiprintf_r+0x188>
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	1d1a      	adds	r2, r3, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	9203      	str	r2, [sp, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bfb8      	it	lt
 80073ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80073f0:	3402      	adds	r4, #2
 80073f2:	9305      	str	r3, [sp, #20]
 80073f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074c0 <_svfiprintf_r+0x1fc>
 80073f8:	7821      	ldrb	r1, [r4, #0]
 80073fa:	2203      	movs	r2, #3
 80073fc:	4650      	mov	r0, sl
 80073fe:	f7f8 feef 	bl	80001e0 <memchr>
 8007402:	b140      	cbz	r0, 8007416 <_svfiprintf_r+0x152>
 8007404:	2340      	movs	r3, #64	; 0x40
 8007406:	eba0 000a 	sub.w	r0, r0, sl
 800740a:	fa03 f000 	lsl.w	r0, r3, r0
 800740e:	9b04      	ldr	r3, [sp, #16]
 8007410:	4303      	orrs	r3, r0
 8007412:	3401      	adds	r4, #1
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741a:	4826      	ldr	r0, [pc, #152]	; (80074b4 <_svfiprintf_r+0x1f0>)
 800741c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007420:	2206      	movs	r2, #6
 8007422:	f7f8 fedd 	bl	80001e0 <memchr>
 8007426:	2800      	cmp	r0, #0
 8007428:	d038      	beq.n	800749c <_svfiprintf_r+0x1d8>
 800742a:	4b23      	ldr	r3, [pc, #140]	; (80074b8 <_svfiprintf_r+0x1f4>)
 800742c:	bb1b      	cbnz	r3, 8007476 <_svfiprintf_r+0x1b2>
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	3307      	adds	r3, #7
 8007432:	f023 0307 	bic.w	r3, r3, #7
 8007436:	3308      	adds	r3, #8
 8007438:	9303      	str	r3, [sp, #12]
 800743a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743c:	4433      	add	r3, r6
 800743e:	9309      	str	r3, [sp, #36]	; 0x24
 8007440:	e767      	b.n	8007312 <_svfiprintf_r+0x4e>
 8007442:	fb0c 3202 	mla	r2, ip, r2, r3
 8007446:	460c      	mov	r4, r1
 8007448:	2001      	movs	r0, #1
 800744a:	e7a5      	b.n	8007398 <_svfiprintf_r+0xd4>
 800744c:	2300      	movs	r3, #0
 800744e:	3401      	adds	r4, #1
 8007450:	9305      	str	r3, [sp, #20]
 8007452:	4619      	mov	r1, r3
 8007454:	f04f 0c0a 	mov.w	ip, #10
 8007458:	4620      	mov	r0, r4
 800745a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800745e:	3a30      	subs	r2, #48	; 0x30
 8007460:	2a09      	cmp	r2, #9
 8007462:	d903      	bls.n	800746c <_svfiprintf_r+0x1a8>
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0c5      	beq.n	80073f4 <_svfiprintf_r+0x130>
 8007468:	9105      	str	r1, [sp, #20]
 800746a:	e7c3      	b.n	80073f4 <_svfiprintf_r+0x130>
 800746c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007470:	4604      	mov	r4, r0
 8007472:	2301      	movs	r3, #1
 8007474:	e7f0      	b.n	8007458 <_svfiprintf_r+0x194>
 8007476:	ab03      	add	r3, sp, #12
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	462a      	mov	r2, r5
 800747c:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <_svfiprintf_r+0x1f8>)
 800747e:	a904      	add	r1, sp, #16
 8007480:	4638      	mov	r0, r7
 8007482:	f3af 8000 	nop.w
 8007486:	1c42      	adds	r2, r0, #1
 8007488:	4606      	mov	r6, r0
 800748a:	d1d6      	bne.n	800743a <_svfiprintf_r+0x176>
 800748c:	89ab      	ldrh	r3, [r5, #12]
 800748e:	065b      	lsls	r3, r3, #25
 8007490:	f53f af2c 	bmi.w	80072ec <_svfiprintf_r+0x28>
 8007494:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007496:	b01d      	add	sp, #116	; 0x74
 8007498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749c:	ab03      	add	r3, sp, #12
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	462a      	mov	r2, r5
 80074a2:	4b06      	ldr	r3, [pc, #24]	; (80074bc <_svfiprintf_r+0x1f8>)
 80074a4:	a904      	add	r1, sp, #16
 80074a6:	4638      	mov	r0, r7
 80074a8:	f000 f9d4 	bl	8007854 <_printf_i>
 80074ac:	e7eb      	b.n	8007486 <_svfiprintf_r+0x1c2>
 80074ae:	bf00      	nop
 80074b0:	08008b56 	.word	0x08008b56
 80074b4:	08008b60 	.word	0x08008b60
 80074b8:	00000000 	.word	0x00000000
 80074bc:	0800720d 	.word	0x0800720d
 80074c0:	08008b5c 	.word	0x08008b5c

080074c4 <__sfputc_r>:
 80074c4:	6893      	ldr	r3, [r2, #8]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	b410      	push	{r4}
 80074cc:	6093      	str	r3, [r2, #8]
 80074ce:	da08      	bge.n	80074e2 <__sfputc_r+0x1e>
 80074d0:	6994      	ldr	r4, [r2, #24]
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	db01      	blt.n	80074da <__sfputc_r+0x16>
 80074d6:	290a      	cmp	r1, #10
 80074d8:	d103      	bne.n	80074e2 <__sfputc_r+0x1e>
 80074da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074de:	f000 baef 	b.w	8007ac0 <__swbuf_r>
 80074e2:	6813      	ldr	r3, [r2, #0]
 80074e4:	1c58      	adds	r0, r3, #1
 80074e6:	6010      	str	r0, [r2, #0]
 80074e8:	7019      	strb	r1, [r3, #0]
 80074ea:	4608      	mov	r0, r1
 80074ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <__sfputs_r>:
 80074f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f4:	4606      	mov	r6, r0
 80074f6:	460f      	mov	r7, r1
 80074f8:	4614      	mov	r4, r2
 80074fa:	18d5      	adds	r5, r2, r3
 80074fc:	42ac      	cmp	r4, r5
 80074fe:	d101      	bne.n	8007504 <__sfputs_r+0x12>
 8007500:	2000      	movs	r0, #0
 8007502:	e007      	b.n	8007514 <__sfputs_r+0x22>
 8007504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007508:	463a      	mov	r2, r7
 800750a:	4630      	mov	r0, r6
 800750c:	f7ff ffda 	bl	80074c4 <__sfputc_r>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d1f3      	bne.n	80074fc <__sfputs_r+0xa>
 8007514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007518 <_vfiprintf_r>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	460d      	mov	r5, r1
 800751e:	b09d      	sub	sp, #116	; 0x74
 8007520:	4614      	mov	r4, r2
 8007522:	4698      	mov	r8, r3
 8007524:	4606      	mov	r6, r0
 8007526:	b118      	cbz	r0, 8007530 <_vfiprintf_r+0x18>
 8007528:	6983      	ldr	r3, [r0, #24]
 800752a:	b90b      	cbnz	r3, 8007530 <_vfiprintf_r+0x18>
 800752c:	f000 fcaa 	bl	8007e84 <__sinit>
 8007530:	4b89      	ldr	r3, [pc, #548]	; (8007758 <_vfiprintf_r+0x240>)
 8007532:	429d      	cmp	r5, r3
 8007534:	d11b      	bne.n	800756e <_vfiprintf_r+0x56>
 8007536:	6875      	ldr	r5, [r6, #4]
 8007538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800753a:	07d9      	lsls	r1, r3, #31
 800753c:	d405      	bmi.n	800754a <_vfiprintf_r+0x32>
 800753e:	89ab      	ldrh	r3, [r5, #12]
 8007540:	059a      	lsls	r2, r3, #22
 8007542:	d402      	bmi.n	800754a <_vfiprintf_r+0x32>
 8007544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007546:	f000 fd3b 	bl	8007fc0 <__retarget_lock_acquire_recursive>
 800754a:	89ab      	ldrh	r3, [r5, #12]
 800754c:	071b      	lsls	r3, r3, #28
 800754e:	d501      	bpl.n	8007554 <_vfiprintf_r+0x3c>
 8007550:	692b      	ldr	r3, [r5, #16]
 8007552:	b9eb      	cbnz	r3, 8007590 <_vfiprintf_r+0x78>
 8007554:	4629      	mov	r1, r5
 8007556:	4630      	mov	r0, r6
 8007558:	f000 fb04 	bl	8007b64 <__swsetup_r>
 800755c:	b1c0      	cbz	r0, 8007590 <_vfiprintf_r+0x78>
 800755e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007560:	07dc      	lsls	r4, r3, #31
 8007562:	d50e      	bpl.n	8007582 <_vfiprintf_r+0x6a>
 8007564:	f04f 30ff 	mov.w	r0, #4294967295
 8007568:	b01d      	add	sp, #116	; 0x74
 800756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756e:	4b7b      	ldr	r3, [pc, #492]	; (800775c <_vfiprintf_r+0x244>)
 8007570:	429d      	cmp	r5, r3
 8007572:	d101      	bne.n	8007578 <_vfiprintf_r+0x60>
 8007574:	68b5      	ldr	r5, [r6, #8]
 8007576:	e7df      	b.n	8007538 <_vfiprintf_r+0x20>
 8007578:	4b79      	ldr	r3, [pc, #484]	; (8007760 <_vfiprintf_r+0x248>)
 800757a:	429d      	cmp	r5, r3
 800757c:	bf08      	it	eq
 800757e:	68f5      	ldreq	r5, [r6, #12]
 8007580:	e7da      	b.n	8007538 <_vfiprintf_r+0x20>
 8007582:	89ab      	ldrh	r3, [r5, #12]
 8007584:	0598      	lsls	r0, r3, #22
 8007586:	d4ed      	bmi.n	8007564 <_vfiprintf_r+0x4c>
 8007588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800758a:	f000 fd1a 	bl	8007fc2 <__retarget_lock_release_recursive>
 800758e:	e7e9      	b.n	8007564 <_vfiprintf_r+0x4c>
 8007590:	2300      	movs	r3, #0
 8007592:	9309      	str	r3, [sp, #36]	; 0x24
 8007594:	2320      	movs	r3, #32
 8007596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800759a:	f8cd 800c 	str.w	r8, [sp, #12]
 800759e:	2330      	movs	r3, #48	; 0x30
 80075a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007764 <_vfiprintf_r+0x24c>
 80075a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075a8:	f04f 0901 	mov.w	r9, #1
 80075ac:	4623      	mov	r3, r4
 80075ae:	469a      	mov	sl, r3
 80075b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b4:	b10a      	cbz	r2, 80075ba <_vfiprintf_r+0xa2>
 80075b6:	2a25      	cmp	r2, #37	; 0x25
 80075b8:	d1f9      	bne.n	80075ae <_vfiprintf_r+0x96>
 80075ba:	ebba 0b04 	subs.w	fp, sl, r4
 80075be:	d00b      	beq.n	80075d8 <_vfiprintf_r+0xc0>
 80075c0:	465b      	mov	r3, fp
 80075c2:	4622      	mov	r2, r4
 80075c4:	4629      	mov	r1, r5
 80075c6:	4630      	mov	r0, r6
 80075c8:	f7ff ff93 	bl	80074f2 <__sfputs_r>
 80075cc:	3001      	adds	r0, #1
 80075ce:	f000 80aa 	beq.w	8007726 <_vfiprintf_r+0x20e>
 80075d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d4:	445a      	add	r2, fp
 80075d6:	9209      	str	r2, [sp, #36]	; 0x24
 80075d8:	f89a 3000 	ldrb.w	r3, [sl]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 80a2 	beq.w	8007726 <_vfiprintf_r+0x20e>
 80075e2:	2300      	movs	r3, #0
 80075e4:	f04f 32ff 	mov.w	r2, #4294967295
 80075e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ec:	f10a 0a01 	add.w	sl, sl, #1
 80075f0:	9304      	str	r3, [sp, #16]
 80075f2:	9307      	str	r3, [sp, #28]
 80075f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075f8:	931a      	str	r3, [sp, #104]	; 0x68
 80075fa:	4654      	mov	r4, sl
 80075fc:	2205      	movs	r2, #5
 80075fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007602:	4858      	ldr	r0, [pc, #352]	; (8007764 <_vfiprintf_r+0x24c>)
 8007604:	f7f8 fdec 	bl	80001e0 <memchr>
 8007608:	9a04      	ldr	r2, [sp, #16]
 800760a:	b9d8      	cbnz	r0, 8007644 <_vfiprintf_r+0x12c>
 800760c:	06d1      	lsls	r1, r2, #27
 800760e:	bf44      	itt	mi
 8007610:	2320      	movmi	r3, #32
 8007612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007616:	0713      	lsls	r3, r2, #28
 8007618:	bf44      	itt	mi
 800761a:	232b      	movmi	r3, #43	; 0x2b
 800761c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007620:	f89a 3000 	ldrb.w	r3, [sl]
 8007624:	2b2a      	cmp	r3, #42	; 0x2a
 8007626:	d015      	beq.n	8007654 <_vfiprintf_r+0x13c>
 8007628:	9a07      	ldr	r2, [sp, #28]
 800762a:	4654      	mov	r4, sl
 800762c:	2000      	movs	r0, #0
 800762e:	f04f 0c0a 	mov.w	ip, #10
 8007632:	4621      	mov	r1, r4
 8007634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007638:	3b30      	subs	r3, #48	; 0x30
 800763a:	2b09      	cmp	r3, #9
 800763c:	d94e      	bls.n	80076dc <_vfiprintf_r+0x1c4>
 800763e:	b1b0      	cbz	r0, 800766e <_vfiprintf_r+0x156>
 8007640:	9207      	str	r2, [sp, #28]
 8007642:	e014      	b.n	800766e <_vfiprintf_r+0x156>
 8007644:	eba0 0308 	sub.w	r3, r0, r8
 8007648:	fa09 f303 	lsl.w	r3, r9, r3
 800764c:	4313      	orrs	r3, r2
 800764e:	9304      	str	r3, [sp, #16]
 8007650:	46a2      	mov	sl, r4
 8007652:	e7d2      	b.n	80075fa <_vfiprintf_r+0xe2>
 8007654:	9b03      	ldr	r3, [sp, #12]
 8007656:	1d19      	adds	r1, r3, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	9103      	str	r1, [sp, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	bfbb      	ittet	lt
 8007660:	425b      	neglt	r3, r3
 8007662:	f042 0202 	orrlt.w	r2, r2, #2
 8007666:	9307      	strge	r3, [sp, #28]
 8007668:	9307      	strlt	r3, [sp, #28]
 800766a:	bfb8      	it	lt
 800766c:	9204      	strlt	r2, [sp, #16]
 800766e:	7823      	ldrb	r3, [r4, #0]
 8007670:	2b2e      	cmp	r3, #46	; 0x2e
 8007672:	d10c      	bne.n	800768e <_vfiprintf_r+0x176>
 8007674:	7863      	ldrb	r3, [r4, #1]
 8007676:	2b2a      	cmp	r3, #42	; 0x2a
 8007678:	d135      	bne.n	80076e6 <_vfiprintf_r+0x1ce>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	1d1a      	adds	r2, r3, #4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	9203      	str	r2, [sp, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	bfb8      	it	lt
 8007686:	f04f 33ff 	movlt.w	r3, #4294967295
 800768a:	3402      	adds	r4, #2
 800768c:	9305      	str	r3, [sp, #20]
 800768e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007774 <_vfiprintf_r+0x25c>
 8007692:	7821      	ldrb	r1, [r4, #0]
 8007694:	2203      	movs	r2, #3
 8007696:	4650      	mov	r0, sl
 8007698:	f7f8 fda2 	bl	80001e0 <memchr>
 800769c:	b140      	cbz	r0, 80076b0 <_vfiprintf_r+0x198>
 800769e:	2340      	movs	r3, #64	; 0x40
 80076a0:	eba0 000a 	sub.w	r0, r0, sl
 80076a4:	fa03 f000 	lsl.w	r0, r3, r0
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	4303      	orrs	r3, r0
 80076ac:	3401      	adds	r4, #1
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b4:	482c      	ldr	r0, [pc, #176]	; (8007768 <_vfiprintf_r+0x250>)
 80076b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ba:	2206      	movs	r2, #6
 80076bc:	f7f8 fd90 	bl	80001e0 <memchr>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d03f      	beq.n	8007744 <_vfiprintf_r+0x22c>
 80076c4:	4b29      	ldr	r3, [pc, #164]	; (800776c <_vfiprintf_r+0x254>)
 80076c6:	bb1b      	cbnz	r3, 8007710 <_vfiprintf_r+0x1f8>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	3307      	adds	r3, #7
 80076cc:	f023 0307 	bic.w	r3, r3, #7
 80076d0:	3308      	adds	r3, #8
 80076d2:	9303      	str	r3, [sp, #12]
 80076d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d6:	443b      	add	r3, r7
 80076d8:	9309      	str	r3, [sp, #36]	; 0x24
 80076da:	e767      	b.n	80075ac <_vfiprintf_r+0x94>
 80076dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80076e0:	460c      	mov	r4, r1
 80076e2:	2001      	movs	r0, #1
 80076e4:	e7a5      	b.n	8007632 <_vfiprintf_r+0x11a>
 80076e6:	2300      	movs	r3, #0
 80076e8:	3401      	adds	r4, #1
 80076ea:	9305      	str	r3, [sp, #20]
 80076ec:	4619      	mov	r1, r3
 80076ee:	f04f 0c0a 	mov.w	ip, #10
 80076f2:	4620      	mov	r0, r4
 80076f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f8:	3a30      	subs	r2, #48	; 0x30
 80076fa:	2a09      	cmp	r2, #9
 80076fc:	d903      	bls.n	8007706 <_vfiprintf_r+0x1ee>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0c5      	beq.n	800768e <_vfiprintf_r+0x176>
 8007702:	9105      	str	r1, [sp, #20]
 8007704:	e7c3      	b.n	800768e <_vfiprintf_r+0x176>
 8007706:	fb0c 2101 	mla	r1, ip, r1, r2
 800770a:	4604      	mov	r4, r0
 800770c:	2301      	movs	r3, #1
 800770e:	e7f0      	b.n	80076f2 <_vfiprintf_r+0x1da>
 8007710:	ab03      	add	r3, sp, #12
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	462a      	mov	r2, r5
 8007716:	4b16      	ldr	r3, [pc, #88]	; (8007770 <_vfiprintf_r+0x258>)
 8007718:	a904      	add	r1, sp, #16
 800771a:	4630      	mov	r0, r6
 800771c:	f3af 8000 	nop.w
 8007720:	4607      	mov	r7, r0
 8007722:	1c78      	adds	r0, r7, #1
 8007724:	d1d6      	bne.n	80076d4 <_vfiprintf_r+0x1bc>
 8007726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007728:	07d9      	lsls	r1, r3, #31
 800772a:	d405      	bmi.n	8007738 <_vfiprintf_r+0x220>
 800772c:	89ab      	ldrh	r3, [r5, #12]
 800772e:	059a      	lsls	r2, r3, #22
 8007730:	d402      	bmi.n	8007738 <_vfiprintf_r+0x220>
 8007732:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007734:	f000 fc45 	bl	8007fc2 <__retarget_lock_release_recursive>
 8007738:	89ab      	ldrh	r3, [r5, #12]
 800773a:	065b      	lsls	r3, r3, #25
 800773c:	f53f af12 	bmi.w	8007564 <_vfiprintf_r+0x4c>
 8007740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007742:	e711      	b.n	8007568 <_vfiprintf_r+0x50>
 8007744:	ab03      	add	r3, sp, #12
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	462a      	mov	r2, r5
 800774a:	4b09      	ldr	r3, [pc, #36]	; (8007770 <_vfiprintf_r+0x258>)
 800774c:	a904      	add	r1, sp, #16
 800774e:	4630      	mov	r0, r6
 8007750:	f000 f880 	bl	8007854 <_printf_i>
 8007754:	e7e4      	b.n	8007720 <_vfiprintf_r+0x208>
 8007756:	bf00      	nop
 8007758:	08008bac 	.word	0x08008bac
 800775c:	08008bcc 	.word	0x08008bcc
 8007760:	08008b8c 	.word	0x08008b8c
 8007764:	08008b56 	.word	0x08008b56
 8007768:	08008b60 	.word	0x08008b60
 800776c:	00000000 	.word	0x00000000
 8007770:	080074f3 	.word	0x080074f3
 8007774:	08008b5c 	.word	0x08008b5c

08007778 <_printf_common>:
 8007778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800777c:	4616      	mov	r6, r2
 800777e:	4699      	mov	r9, r3
 8007780:	688a      	ldr	r2, [r1, #8]
 8007782:	690b      	ldr	r3, [r1, #16]
 8007784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007788:	4293      	cmp	r3, r2
 800778a:	bfb8      	it	lt
 800778c:	4613      	movlt	r3, r2
 800778e:	6033      	str	r3, [r6, #0]
 8007790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007794:	4607      	mov	r7, r0
 8007796:	460c      	mov	r4, r1
 8007798:	b10a      	cbz	r2, 800779e <_printf_common+0x26>
 800779a:	3301      	adds	r3, #1
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	0699      	lsls	r1, r3, #26
 80077a2:	bf42      	ittt	mi
 80077a4:	6833      	ldrmi	r3, [r6, #0]
 80077a6:	3302      	addmi	r3, #2
 80077a8:	6033      	strmi	r3, [r6, #0]
 80077aa:	6825      	ldr	r5, [r4, #0]
 80077ac:	f015 0506 	ands.w	r5, r5, #6
 80077b0:	d106      	bne.n	80077c0 <_printf_common+0x48>
 80077b2:	f104 0a19 	add.w	sl, r4, #25
 80077b6:	68e3      	ldr	r3, [r4, #12]
 80077b8:	6832      	ldr	r2, [r6, #0]
 80077ba:	1a9b      	subs	r3, r3, r2
 80077bc:	42ab      	cmp	r3, r5
 80077be:	dc26      	bgt.n	800780e <_printf_common+0x96>
 80077c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077c4:	1e13      	subs	r3, r2, #0
 80077c6:	6822      	ldr	r2, [r4, #0]
 80077c8:	bf18      	it	ne
 80077ca:	2301      	movne	r3, #1
 80077cc:	0692      	lsls	r2, r2, #26
 80077ce:	d42b      	bmi.n	8007828 <_printf_common+0xb0>
 80077d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d4:	4649      	mov	r1, r9
 80077d6:	4638      	mov	r0, r7
 80077d8:	47c0      	blx	r8
 80077da:	3001      	adds	r0, #1
 80077dc:	d01e      	beq.n	800781c <_printf_common+0xa4>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	68e5      	ldr	r5, [r4, #12]
 80077e2:	6832      	ldr	r2, [r6, #0]
 80077e4:	f003 0306 	and.w	r3, r3, #6
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	bf08      	it	eq
 80077ec:	1aad      	subeq	r5, r5, r2
 80077ee:	68a3      	ldr	r3, [r4, #8]
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	bf0c      	ite	eq
 80077f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f8:	2500      	movne	r5, #0
 80077fa:	4293      	cmp	r3, r2
 80077fc:	bfc4      	itt	gt
 80077fe:	1a9b      	subgt	r3, r3, r2
 8007800:	18ed      	addgt	r5, r5, r3
 8007802:	2600      	movs	r6, #0
 8007804:	341a      	adds	r4, #26
 8007806:	42b5      	cmp	r5, r6
 8007808:	d11a      	bne.n	8007840 <_printf_common+0xc8>
 800780a:	2000      	movs	r0, #0
 800780c:	e008      	b.n	8007820 <_printf_common+0xa8>
 800780e:	2301      	movs	r3, #1
 8007810:	4652      	mov	r2, sl
 8007812:	4649      	mov	r1, r9
 8007814:	4638      	mov	r0, r7
 8007816:	47c0      	blx	r8
 8007818:	3001      	adds	r0, #1
 800781a:	d103      	bne.n	8007824 <_printf_common+0xac>
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007824:	3501      	adds	r5, #1
 8007826:	e7c6      	b.n	80077b6 <_printf_common+0x3e>
 8007828:	18e1      	adds	r1, r4, r3
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	2030      	movs	r0, #48	; 0x30
 800782e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007832:	4422      	add	r2, r4
 8007834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800783c:	3302      	adds	r3, #2
 800783e:	e7c7      	b.n	80077d0 <_printf_common+0x58>
 8007840:	2301      	movs	r3, #1
 8007842:	4622      	mov	r2, r4
 8007844:	4649      	mov	r1, r9
 8007846:	4638      	mov	r0, r7
 8007848:	47c0      	blx	r8
 800784a:	3001      	adds	r0, #1
 800784c:	d0e6      	beq.n	800781c <_printf_common+0xa4>
 800784e:	3601      	adds	r6, #1
 8007850:	e7d9      	b.n	8007806 <_printf_common+0x8e>
	...

08007854 <_printf_i>:
 8007854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	7e0f      	ldrb	r7, [r1, #24]
 800785a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800785c:	2f78      	cmp	r7, #120	; 0x78
 800785e:	4691      	mov	r9, r2
 8007860:	4680      	mov	r8, r0
 8007862:	460c      	mov	r4, r1
 8007864:	469a      	mov	sl, r3
 8007866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800786a:	d807      	bhi.n	800787c <_printf_i+0x28>
 800786c:	2f62      	cmp	r7, #98	; 0x62
 800786e:	d80a      	bhi.n	8007886 <_printf_i+0x32>
 8007870:	2f00      	cmp	r7, #0
 8007872:	f000 80d8 	beq.w	8007a26 <_printf_i+0x1d2>
 8007876:	2f58      	cmp	r7, #88	; 0x58
 8007878:	f000 80a3 	beq.w	80079c2 <_printf_i+0x16e>
 800787c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007884:	e03a      	b.n	80078fc <_printf_i+0xa8>
 8007886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800788a:	2b15      	cmp	r3, #21
 800788c:	d8f6      	bhi.n	800787c <_printf_i+0x28>
 800788e:	a101      	add	r1, pc, #4	; (adr r1, 8007894 <_printf_i+0x40>)
 8007890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007894:	080078ed 	.word	0x080078ed
 8007898:	08007901 	.word	0x08007901
 800789c:	0800787d 	.word	0x0800787d
 80078a0:	0800787d 	.word	0x0800787d
 80078a4:	0800787d 	.word	0x0800787d
 80078a8:	0800787d 	.word	0x0800787d
 80078ac:	08007901 	.word	0x08007901
 80078b0:	0800787d 	.word	0x0800787d
 80078b4:	0800787d 	.word	0x0800787d
 80078b8:	0800787d 	.word	0x0800787d
 80078bc:	0800787d 	.word	0x0800787d
 80078c0:	08007a0d 	.word	0x08007a0d
 80078c4:	08007931 	.word	0x08007931
 80078c8:	080079ef 	.word	0x080079ef
 80078cc:	0800787d 	.word	0x0800787d
 80078d0:	0800787d 	.word	0x0800787d
 80078d4:	08007a2f 	.word	0x08007a2f
 80078d8:	0800787d 	.word	0x0800787d
 80078dc:	08007931 	.word	0x08007931
 80078e0:	0800787d 	.word	0x0800787d
 80078e4:	0800787d 	.word	0x0800787d
 80078e8:	080079f7 	.word	0x080079f7
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	602a      	str	r2, [r5, #0]
 80078f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0a3      	b.n	8007a48 <_printf_i+0x1f4>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	6829      	ldr	r1, [r5, #0]
 8007904:	0606      	lsls	r6, r0, #24
 8007906:	f101 0304 	add.w	r3, r1, #4
 800790a:	d50a      	bpl.n	8007922 <_printf_i+0xce>
 800790c:	680e      	ldr	r6, [r1, #0]
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	2e00      	cmp	r6, #0
 8007912:	da03      	bge.n	800791c <_printf_i+0xc8>
 8007914:	232d      	movs	r3, #45	; 0x2d
 8007916:	4276      	negs	r6, r6
 8007918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800791c:	485e      	ldr	r0, [pc, #376]	; (8007a98 <_printf_i+0x244>)
 800791e:	230a      	movs	r3, #10
 8007920:	e019      	b.n	8007956 <_printf_i+0x102>
 8007922:	680e      	ldr	r6, [r1, #0]
 8007924:	602b      	str	r3, [r5, #0]
 8007926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800792a:	bf18      	it	ne
 800792c:	b236      	sxthne	r6, r6
 800792e:	e7ef      	b.n	8007910 <_printf_i+0xbc>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	6820      	ldr	r0, [r4, #0]
 8007934:	1d19      	adds	r1, r3, #4
 8007936:	6029      	str	r1, [r5, #0]
 8007938:	0601      	lsls	r1, r0, #24
 800793a:	d501      	bpl.n	8007940 <_printf_i+0xec>
 800793c:	681e      	ldr	r6, [r3, #0]
 800793e:	e002      	b.n	8007946 <_printf_i+0xf2>
 8007940:	0646      	lsls	r6, r0, #25
 8007942:	d5fb      	bpl.n	800793c <_printf_i+0xe8>
 8007944:	881e      	ldrh	r6, [r3, #0]
 8007946:	4854      	ldr	r0, [pc, #336]	; (8007a98 <_printf_i+0x244>)
 8007948:	2f6f      	cmp	r7, #111	; 0x6f
 800794a:	bf0c      	ite	eq
 800794c:	2308      	moveq	r3, #8
 800794e:	230a      	movne	r3, #10
 8007950:	2100      	movs	r1, #0
 8007952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007956:	6865      	ldr	r5, [r4, #4]
 8007958:	60a5      	str	r5, [r4, #8]
 800795a:	2d00      	cmp	r5, #0
 800795c:	bfa2      	ittt	ge
 800795e:	6821      	ldrge	r1, [r4, #0]
 8007960:	f021 0104 	bicge.w	r1, r1, #4
 8007964:	6021      	strge	r1, [r4, #0]
 8007966:	b90e      	cbnz	r6, 800796c <_printf_i+0x118>
 8007968:	2d00      	cmp	r5, #0
 800796a:	d04d      	beq.n	8007a08 <_printf_i+0x1b4>
 800796c:	4615      	mov	r5, r2
 800796e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007972:	fb03 6711 	mls	r7, r3, r1, r6
 8007976:	5dc7      	ldrb	r7, [r0, r7]
 8007978:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800797c:	4637      	mov	r7, r6
 800797e:	42bb      	cmp	r3, r7
 8007980:	460e      	mov	r6, r1
 8007982:	d9f4      	bls.n	800796e <_printf_i+0x11a>
 8007984:	2b08      	cmp	r3, #8
 8007986:	d10b      	bne.n	80079a0 <_printf_i+0x14c>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	07de      	lsls	r6, r3, #31
 800798c:	d508      	bpl.n	80079a0 <_printf_i+0x14c>
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	6861      	ldr	r1, [r4, #4]
 8007992:	4299      	cmp	r1, r3
 8007994:	bfde      	ittt	le
 8007996:	2330      	movle	r3, #48	; 0x30
 8007998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800799c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079a0:	1b52      	subs	r2, r2, r5
 80079a2:	6122      	str	r2, [r4, #16]
 80079a4:	f8cd a000 	str.w	sl, [sp]
 80079a8:	464b      	mov	r3, r9
 80079aa:	aa03      	add	r2, sp, #12
 80079ac:	4621      	mov	r1, r4
 80079ae:	4640      	mov	r0, r8
 80079b0:	f7ff fee2 	bl	8007778 <_printf_common>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d14c      	bne.n	8007a52 <_printf_i+0x1fe>
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	b004      	add	sp, #16
 80079be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c2:	4835      	ldr	r0, [pc, #212]	; (8007a98 <_printf_i+0x244>)
 80079c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079c8:	6829      	ldr	r1, [r5, #0]
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80079d0:	6029      	str	r1, [r5, #0]
 80079d2:	061d      	lsls	r5, r3, #24
 80079d4:	d514      	bpl.n	8007a00 <_printf_i+0x1ac>
 80079d6:	07df      	lsls	r7, r3, #31
 80079d8:	bf44      	itt	mi
 80079da:	f043 0320 	orrmi.w	r3, r3, #32
 80079de:	6023      	strmi	r3, [r4, #0]
 80079e0:	b91e      	cbnz	r6, 80079ea <_printf_i+0x196>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	f023 0320 	bic.w	r3, r3, #32
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	2310      	movs	r3, #16
 80079ec:	e7b0      	b.n	8007950 <_printf_i+0xfc>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	f043 0320 	orr.w	r3, r3, #32
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	2378      	movs	r3, #120	; 0x78
 80079f8:	4828      	ldr	r0, [pc, #160]	; (8007a9c <_printf_i+0x248>)
 80079fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079fe:	e7e3      	b.n	80079c8 <_printf_i+0x174>
 8007a00:	0659      	lsls	r1, r3, #25
 8007a02:	bf48      	it	mi
 8007a04:	b2b6      	uxthmi	r6, r6
 8007a06:	e7e6      	b.n	80079d6 <_printf_i+0x182>
 8007a08:	4615      	mov	r5, r2
 8007a0a:	e7bb      	b.n	8007984 <_printf_i+0x130>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	6826      	ldr	r6, [r4, #0]
 8007a10:	6961      	ldr	r1, [r4, #20]
 8007a12:	1d18      	adds	r0, r3, #4
 8007a14:	6028      	str	r0, [r5, #0]
 8007a16:	0635      	lsls	r5, r6, #24
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	d501      	bpl.n	8007a20 <_printf_i+0x1cc>
 8007a1c:	6019      	str	r1, [r3, #0]
 8007a1e:	e002      	b.n	8007a26 <_printf_i+0x1d2>
 8007a20:	0670      	lsls	r0, r6, #25
 8007a22:	d5fb      	bpl.n	8007a1c <_printf_i+0x1c8>
 8007a24:	8019      	strh	r1, [r3, #0]
 8007a26:	2300      	movs	r3, #0
 8007a28:	6123      	str	r3, [r4, #16]
 8007a2a:	4615      	mov	r5, r2
 8007a2c:	e7ba      	b.n	80079a4 <_printf_i+0x150>
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	1d1a      	adds	r2, r3, #4
 8007a32:	602a      	str	r2, [r5, #0]
 8007a34:	681d      	ldr	r5, [r3, #0]
 8007a36:	6862      	ldr	r2, [r4, #4]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f7f8 fbd0 	bl	80001e0 <memchr>
 8007a40:	b108      	cbz	r0, 8007a46 <_printf_i+0x1f2>
 8007a42:	1b40      	subs	r0, r0, r5
 8007a44:	6060      	str	r0, [r4, #4]
 8007a46:	6863      	ldr	r3, [r4, #4]
 8007a48:	6123      	str	r3, [r4, #16]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a50:	e7a8      	b.n	80079a4 <_printf_i+0x150>
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	462a      	mov	r2, r5
 8007a56:	4649      	mov	r1, r9
 8007a58:	4640      	mov	r0, r8
 8007a5a:	47d0      	blx	sl
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d0ab      	beq.n	80079b8 <_printf_i+0x164>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	079b      	lsls	r3, r3, #30
 8007a64:	d413      	bmi.n	8007a8e <_printf_i+0x23a>
 8007a66:	68e0      	ldr	r0, [r4, #12]
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	4298      	cmp	r0, r3
 8007a6c:	bfb8      	it	lt
 8007a6e:	4618      	movlt	r0, r3
 8007a70:	e7a4      	b.n	80079bc <_printf_i+0x168>
 8007a72:	2301      	movs	r3, #1
 8007a74:	4632      	mov	r2, r6
 8007a76:	4649      	mov	r1, r9
 8007a78:	4640      	mov	r0, r8
 8007a7a:	47d0      	blx	sl
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d09b      	beq.n	80079b8 <_printf_i+0x164>
 8007a80:	3501      	adds	r5, #1
 8007a82:	68e3      	ldr	r3, [r4, #12]
 8007a84:	9903      	ldr	r1, [sp, #12]
 8007a86:	1a5b      	subs	r3, r3, r1
 8007a88:	42ab      	cmp	r3, r5
 8007a8a:	dcf2      	bgt.n	8007a72 <_printf_i+0x21e>
 8007a8c:	e7eb      	b.n	8007a66 <_printf_i+0x212>
 8007a8e:	2500      	movs	r5, #0
 8007a90:	f104 0619 	add.w	r6, r4, #25
 8007a94:	e7f5      	b.n	8007a82 <_printf_i+0x22e>
 8007a96:	bf00      	nop
 8007a98:	08008b67 	.word	0x08008b67
 8007a9c:	08008b78 	.word	0x08008b78

08007aa0 <_sbrk_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	; (8007abc <_sbrk_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7fb fa3a 	bl	8002f24 <_sbrk>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_sbrk_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_sbrk_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	2000092c 	.word	0x2000092c

08007ac0 <__swbuf_r>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	460e      	mov	r6, r1
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b118      	cbz	r0, 8007ad2 <__swbuf_r+0x12>
 8007aca:	6983      	ldr	r3, [r0, #24]
 8007acc:	b90b      	cbnz	r3, 8007ad2 <__swbuf_r+0x12>
 8007ace:	f000 f9d9 	bl	8007e84 <__sinit>
 8007ad2:	4b21      	ldr	r3, [pc, #132]	; (8007b58 <__swbuf_r+0x98>)
 8007ad4:	429c      	cmp	r4, r3
 8007ad6:	d12b      	bne.n	8007b30 <__swbuf_r+0x70>
 8007ad8:	686c      	ldr	r4, [r5, #4]
 8007ada:	69a3      	ldr	r3, [r4, #24]
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	071a      	lsls	r2, r3, #28
 8007ae2:	d52f      	bpl.n	8007b44 <__swbuf_r+0x84>
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	b36b      	cbz	r3, 8007b44 <__swbuf_r+0x84>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	1ac0      	subs	r0, r0, r3
 8007aee:	6963      	ldr	r3, [r4, #20]
 8007af0:	b2f6      	uxtb	r6, r6
 8007af2:	4283      	cmp	r3, r0
 8007af4:	4637      	mov	r7, r6
 8007af6:	dc04      	bgt.n	8007b02 <__swbuf_r+0x42>
 8007af8:	4621      	mov	r1, r4
 8007afa:	4628      	mov	r0, r5
 8007afc:	f000 f92e 	bl	8007d5c <_fflush_r>
 8007b00:	bb30      	cbnz	r0, 8007b50 <__swbuf_r+0x90>
 8007b02:	68a3      	ldr	r3, [r4, #8]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	60a3      	str	r3, [r4, #8]
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	701e      	strb	r6, [r3, #0]
 8007b10:	6963      	ldr	r3, [r4, #20]
 8007b12:	3001      	adds	r0, #1
 8007b14:	4283      	cmp	r3, r0
 8007b16:	d004      	beq.n	8007b22 <__swbuf_r+0x62>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	07db      	lsls	r3, r3, #31
 8007b1c:	d506      	bpl.n	8007b2c <__swbuf_r+0x6c>
 8007b1e:	2e0a      	cmp	r6, #10
 8007b20:	d104      	bne.n	8007b2c <__swbuf_r+0x6c>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 f919 	bl	8007d5c <_fflush_r>
 8007b2a:	b988      	cbnz	r0, 8007b50 <__swbuf_r+0x90>
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <__swbuf_r+0x9c>)
 8007b32:	429c      	cmp	r4, r3
 8007b34:	d101      	bne.n	8007b3a <__swbuf_r+0x7a>
 8007b36:	68ac      	ldr	r4, [r5, #8]
 8007b38:	e7cf      	b.n	8007ada <__swbuf_r+0x1a>
 8007b3a:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <__swbuf_r+0xa0>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	bf08      	it	eq
 8007b40:	68ec      	ldreq	r4, [r5, #12]
 8007b42:	e7ca      	b.n	8007ada <__swbuf_r+0x1a>
 8007b44:	4621      	mov	r1, r4
 8007b46:	4628      	mov	r0, r5
 8007b48:	f000 f80c 	bl	8007b64 <__swsetup_r>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d0cb      	beq.n	8007ae8 <__swbuf_r+0x28>
 8007b50:	f04f 37ff 	mov.w	r7, #4294967295
 8007b54:	e7ea      	b.n	8007b2c <__swbuf_r+0x6c>
 8007b56:	bf00      	nop
 8007b58:	08008bac 	.word	0x08008bac
 8007b5c:	08008bcc 	.word	0x08008bcc
 8007b60:	08008b8c 	.word	0x08008b8c

08007b64 <__swsetup_r>:
 8007b64:	4b32      	ldr	r3, [pc, #200]	; (8007c30 <__swsetup_r+0xcc>)
 8007b66:	b570      	push	{r4, r5, r6, lr}
 8007b68:	681d      	ldr	r5, [r3, #0]
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	b125      	cbz	r5, 8007b7a <__swsetup_r+0x16>
 8007b70:	69ab      	ldr	r3, [r5, #24]
 8007b72:	b913      	cbnz	r3, 8007b7a <__swsetup_r+0x16>
 8007b74:	4628      	mov	r0, r5
 8007b76:	f000 f985 	bl	8007e84 <__sinit>
 8007b7a:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <__swsetup_r+0xd0>)
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	d10f      	bne.n	8007ba0 <__swsetup_r+0x3c>
 8007b80:	686c      	ldr	r4, [r5, #4]
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b88:	0719      	lsls	r1, r3, #28
 8007b8a:	d42c      	bmi.n	8007be6 <__swsetup_r+0x82>
 8007b8c:	06dd      	lsls	r5, r3, #27
 8007b8e:	d411      	bmi.n	8007bb4 <__swsetup_r+0x50>
 8007b90:	2309      	movs	r3, #9
 8007b92:	6033      	str	r3, [r6, #0]
 8007b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9e:	e03e      	b.n	8007c1e <__swsetup_r+0xba>
 8007ba0:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <__swsetup_r+0xd4>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d101      	bne.n	8007baa <__swsetup_r+0x46>
 8007ba6:	68ac      	ldr	r4, [r5, #8]
 8007ba8:	e7eb      	b.n	8007b82 <__swsetup_r+0x1e>
 8007baa:	4b24      	ldr	r3, [pc, #144]	; (8007c3c <__swsetup_r+0xd8>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	bf08      	it	eq
 8007bb0:	68ec      	ldreq	r4, [r5, #12]
 8007bb2:	e7e6      	b.n	8007b82 <__swsetup_r+0x1e>
 8007bb4:	0758      	lsls	r0, r3, #29
 8007bb6:	d512      	bpl.n	8007bde <__swsetup_r+0x7a>
 8007bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bba:	b141      	cbz	r1, 8007bce <__swsetup_r+0x6a>
 8007bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc0:	4299      	cmp	r1, r3
 8007bc2:	d002      	beq.n	8007bca <__swsetup_r+0x66>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7ff fa41 	bl	800704c <_free_r>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f043 0308 	orr.w	r3, r3, #8
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	b94b      	cbnz	r3, 8007bfe <__swsetup_r+0x9a>
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf4:	d003      	beq.n	8007bfe <__swsetup_r+0x9a>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 fa09 	bl	8008010 <__smakebuf_r>
 8007bfe:	89a0      	ldrh	r0, [r4, #12]
 8007c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c04:	f010 0301 	ands.w	r3, r0, #1
 8007c08:	d00a      	beq.n	8007c20 <__swsetup_r+0xbc>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	6963      	ldr	r3, [r4, #20]
 8007c10:	425b      	negs	r3, r3
 8007c12:	61a3      	str	r3, [r4, #24]
 8007c14:	6923      	ldr	r3, [r4, #16]
 8007c16:	b943      	cbnz	r3, 8007c2a <__swsetup_r+0xc6>
 8007c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c1c:	d1ba      	bne.n	8007b94 <__swsetup_r+0x30>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	0781      	lsls	r1, r0, #30
 8007c22:	bf58      	it	pl
 8007c24:	6963      	ldrpl	r3, [r4, #20]
 8007c26:	60a3      	str	r3, [r4, #8]
 8007c28:	e7f4      	b.n	8007c14 <__swsetup_r+0xb0>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e7f7      	b.n	8007c1e <__swsetup_r+0xba>
 8007c2e:	bf00      	nop
 8007c30:	20000064 	.word	0x20000064
 8007c34:	08008bac 	.word	0x08008bac
 8007c38:	08008bcc 	.word	0x08008bcc
 8007c3c:	08008b8c 	.word	0x08008b8c

08007c40 <abort>:
 8007c40:	b508      	push	{r3, lr}
 8007c42:	2006      	movs	r0, #6
 8007c44:	f000 faa2 	bl	800818c <raise>
 8007c48:	2001      	movs	r0, #1
 8007c4a:	f7fb f8f3 	bl	8002e34 <_exit>
	...

08007c50 <__sflush_r>:
 8007c50:	898a      	ldrh	r2, [r1, #12]
 8007c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c56:	4605      	mov	r5, r0
 8007c58:	0710      	lsls	r0, r2, #28
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	d458      	bmi.n	8007d10 <__sflush_r+0xc0>
 8007c5e:	684b      	ldr	r3, [r1, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dc05      	bgt.n	8007c70 <__sflush_r+0x20>
 8007c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dc02      	bgt.n	8007c70 <__sflush_r+0x20>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c72:	2e00      	cmp	r6, #0
 8007c74:	d0f9      	beq.n	8007c6a <__sflush_r+0x1a>
 8007c76:	2300      	movs	r3, #0
 8007c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c7c:	682f      	ldr	r7, [r5, #0]
 8007c7e:	602b      	str	r3, [r5, #0]
 8007c80:	d032      	beq.n	8007ce8 <__sflush_r+0x98>
 8007c82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	075a      	lsls	r2, r3, #29
 8007c88:	d505      	bpl.n	8007c96 <__sflush_r+0x46>
 8007c8a:	6863      	ldr	r3, [r4, #4]
 8007c8c:	1ac0      	subs	r0, r0, r3
 8007c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c90:	b10b      	cbz	r3, 8007c96 <__sflush_r+0x46>
 8007c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c94:	1ac0      	subs	r0, r0, r3
 8007c96:	2300      	movs	r3, #0
 8007c98:	4602      	mov	r2, r0
 8007c9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c9c:	6a21      	ldr	r1, [r4, #32]
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b0      	blx	r6
 8007ca2:	1c43      	adds	r3, r0, #1
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	d106      	bne.n	8007cb6 <__sflush_r+0x66>
 8007ca8:	6829      	ldr	r1, [r5, #0]
 8007caa:	291d      	cmp	r1, #29
 8007cac:	d82c      	bhi.n	8007d08 <__sflush_r+0xb8>
 8007cae:	4a2a      	ldr	r2, [pc, #168]	; (8007d58 <__sflush_r+0x108>)
 8007cb0:	40ca      	lsrs	r2, r1
 8007cb2:	07d6      	lsls	r6, r2, #31
 8007cb4:	d528      	bpl.n	8007d08 <__sflush_r+0xb8>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	6062      	str	r2, [r4, #4]
 8007cba:	04d9      	lsls	r1, r3, #19
 8007cbc:	6922      	ldr	r2, [r4, #16]
 8007cbe:	6022      	str	r2, [r4, #0]
 8007cc0:	d504      	bpl.n	8007ccc <__sflush_r+0x7c>
 8007cc2:	1c42      	adds	r2, r0, #1
 8007cc4:	d101      	bne.n	8007cca <__sflush_r+0x7a>
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	b903      	cbnz	r3, 8007ccc <__sflush_r+0x7c>
 8007cca:	6560      	str	r0, [r4, #84]	; 0x54
 8007ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cce:	602f      	str	r7, [r5, #0]
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	d0ca      	beq.n	8007c6a <__sflush_r+0x1a>
 8007cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd8:	4299      	cmp	r1, r3
 8007cda:	d002      	beq.n	8007ce2 <__sflush_r+0x92>
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f7ff f9b5 	bl	800704c <_free_r>
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ce6:	e7c1      	b.n	8007c6c <__sflush_r+0x1c>
 8007ce8:	6a21      	ldr	r1, [r4, #32]
 8007cea:	2301      	movs	r3, #1
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b0      	blx	r6
 8007cf0:	1c41      	adds	r1, r0, #1
 8007cf2:	d1c7      	bne.n	8007c84 <__sflush_r+0x34>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0c4      	beq.n	8007c84 <__sflush_r+0x34>
 8007cfa:	2b1d      	cmp	r3, #29
 8007cfc:	d001      	beq.n	8007d02 <__sflush_r+0xb2>
 8007cfe:	2b16      	cmp	r3, #22
 8007d00:	d101      	bne.n	8007d06 <__sflush_r+0xb6>
 8007d02:	602f      	str	r7, [r5, #0]
 8007d04:	e7b1      	b.n	8007c6a <__sflush_r+0x1a>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0c:	81a3      	strh	r3, [r4, #12]
 8007d0e:	e7ad      	b.n	8007c6c <__sflush_r+0x1c>
 8007d10:	690f      	ldr	r7, [r1, #16]
 8007d12:	2f00      	cmp	r7, #0
 8007d14:	d0a9      	beq.n	8007c6a <__sflush_r+0x1a>
 8007d16:	0793      	lsls	r3, r2, #30
 8007d18:	680e      	ldr	r6, [r1, #0]
 8007d1a:	bf08      	it	eq
 8007d1c:	694b      	ldreq	r3, [r1, #20]
 8007d1e:	600f      	str	r7, [r1, #0]
 8007d20:	bf18      	it	ne
 8007d22:	2300      	movne	r3, #0
 8007d24:	eba6 0807 	sub.w	r8, r6, r7
 8007d28:	608b      	str	r3, [r1, #8]
 8007d2a:	f1b8 0f00 	cmp.w	r8, #0
 8007d2e:	dd9c      	ble.n	8007c6a <__sflush_r+0x1a>
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d34:	4643      	mov	r3, r8
 8007d36:	463a      	mov	r2, r7
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b0      	blx	r6
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	dc06      	bgt.n	8007d4e <__sflush_r+0xfe>
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d46:	81a3      	strh	r3, [r4, #12]
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	e78e      	b.n	8007c6c <__sflush_r+0x1c>
 8007d4e:	4407      	add	r7, r0
 8007d50:	eba8 0800 	sub.w	r8, r8, r0
 8007d54:	e7e9      	b.n	8007d2a <__sflush_r+0xda>
 8007d56:	bf00      	nop
 8007d58:	20400001 	.word	0x20400001

08007d5c <_fflush_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	690b      	ldr	r3, [r1, #16]
 8007d60:	4605      	mov	r5, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	b913      	cbnz	r3, 8007d6c <_fflush_r+0x10>
 8007d66:	2500      	movs	r5, #0
 8007d68:	4628      	mov	r0, r5
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	b118      	cbz	r0, 8007d76 <_fflush_r+0x1a>
 8007d6e:	6983      	ldr	r3, [r0, #24]
 8007d70:	b90b      	cbnz	r3, 8007d76 <_fflush_r+0x1a>
 8007d72:	f000 f887 	bl	8007e84 <__sinit>
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <_fflush_r+0x6c>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	d11b      	bne.n	8007db4 <_fflush_r+0x58>
 8007d7c:	686c      	ldr	r4, [r5, #4]
 8007d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0ef      	beq.n	8007d66 <_fflush_r+0xa>
 8007d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d88:	07d0      	lsls	r0, r2, #31
 8007d8a:	d404      	bmi.n	8007d96 <_fflush_r+0x3a>
 8007d8c:	0599      	lsls	r1, r3, #22
 8007d8e:	d402      	bmi.n	8007d96 <_fflush_r+0x3a>
 8007d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d92:	f000 f915 	bl	8007fc0 <__retarget_lock_acquire_recursive>
 8007d96:	4628      	mov	r0, r5
 8007d98:	4621      	mov	r1, r4
 8007d9a:	f7ff ff59 	bl	8007c50 <__sflush_r>
 8007d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007da0:	07da      	lsls	r2, r3, #31
 8007da2:	4605      	mov	r5, r0
 8007da4:	d4e0      	bmi.n	8007d68 <_fflush_r+0xc>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	059b      	lsls	r3, r3, #22
 8007daa:	d4dd      	bmi.n	8007d68 <_fflush_r+0xc>
 8007dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dae:	f000 f908 	bl	8007fc2 <__retarget_lock_release_recursive>
 8007db2:	e7d9      	b.n	8007d68 <_fflush_r+0xc>
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <_fflush_r+0x70>)
 8007db6:	429c      	cmp	r4, r3
 8007db8:	d101      	bne.n	8007dbe <_fflush_r+0x62>
 8007dba:	68ac      	ldr	r4, [r5, #8]
 8007dbc:	e7df      	b.n	8007d7e <_fflush_r+0x22>
 8007dbe:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <_fflush_r+0x74>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	bf08      	it	eq
 8007dc4:	68ec      	ldreq	r4, [r5, #12]
 8007dc6:	e7da      	b.n	8007d7e <_fflush_r+0x22>
 8007dc8:	08008bac 	.word	0x08008bac
 8007dcc:	08008bcc 	.word	0x08008bcc
 8007dd0:	08008b8c 	.word	0x08008b8c

08007dd4 <std>:
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	4604      	mov	r4, r0
 8007dda:	e9c0 3300 	strd	r3, r3, [r0]
 8007dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007de2:	6083      	str	r3, [r0, #8]
 8007de4:	8181      	strh	r1, [r0, #12]
 8007de6:	6643      	str	r3, [r0, #100]	; 0x64
 8007de8:	81c2      	strh	r2, [r0, #14]
 8007dea:	6183      	str	r3, [r0, #24]
 8007dec:	4619      	mov	r1, r3
 8007dee:	2208      	movs	r2, #8
 8007df0:	305c      	adds	r0, #92	; 0x5c
 8007df2:	f7ff f85f 	bl	8006eb4 <memset>
 8007df6:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <std+0x38>)
 8007df8:	6263      	str	r3, [r4, #36]	; 0x24
 8007dfa:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <std+0x3c>)
 8007dfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <std+0x40>)
 8007e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <std+0x44>)
 8007e04:	6224      	str	r4, [r4, #32]
 8007e06:	6323      	str	r3, [r4, #48]	; 0x30
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	bf00      	nop
 8007e0c:	080081c5 	.word	0x080081c5
 8007e10:	080081e7 	.word	0x080081e7
 8007e14:	0800821f 	.word	0x0800821f
 8007e18:	08008243 	.word	0x08008243

08007e1c <_cleanup_r>:
 8007e1c:	4901      	ldr	r1, [pc, #4]	; (8007e24 <_cleanup_r+0x8>)
 8007e1e:	f000 b8af 	b.w	8007f80 <_fwalk_reent>
 8007e22:	bf00      	nop
 8007e24:	08007d5d 	.word	0x08007d5d

08007e28 <__sfmoreglue>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	2268      	movs	r2, #104	; 0x68
 8007e2c:	1e4d      	subs	r5, r1, #1
 8007e2e:	4355      	muls	r5, r2
 8007e30:	460e      	mov	r6, r1
 8007e32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e36:	f7ff f975 	bl	8007124 <_malloc_r>
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	b140      	cbz	r0, 8007e50 <__sfmoreglue+0x28>
 8007e3e:	2100      	movs	r1, #0
 8007e40:	e9c0 1600 	strd	r1, r6, [r0]
 8007e44:	300c      	adds	r0, #12
 8007e46:	60a0      	str	r0, [r4, #8]
 8007e48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e4c:	f7ff f832 	bl	8006eb4 <memset>
 8007e50:	4620      	mov	r0, r4
 8007e52:	bd70      	pop	{r4, r5, r6, pc}

08007e54 <__sfp_lock_acquire>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__sfp_lock_acquire+0x8>)
 8007e56:	f000 b8b3 	b.w	8007fc0 <__retarget_lock_acquire_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	20000929 	.word	0x20000929

08007e60 <__sfp_lock_release>:
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__sfp_lock_release+0x8>)
 8007e62:	f000 b8ae 	b.w	8007fc2 <__retarget_lock_release_recursive>
 8007e66:	bf00      	nop
 8007e68:	20000929 	.word	0x20000929

08007e6c <__sinit_lock_acquire>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	; (8007e74 <__sinit_lock_acquire+0x8>)
 8007e6e:	f000 b8a7 	b.w	8007fc0 <__retarget_lock_acquire_recursive>
 8007e72:	bf00      	nop
 8007e74:	2000092a 	.word	0x2000092a

08007e78 <__sinit_lock_release>:
 8007e78:	4801      	ldr	r0, [pc, #4]	; (8007e80 <__sinit_lock_release+0x8>)
 8007e7a:	f000 b8a2 	b.w	8007fc2 <__retarget_lock_release_recursive>
 8007e7e:	bf00      	nop
 8007e80:	2000092a 	.word	0x2000092a

08007e84 <__sinit>:
 8007e84:	b510      	push	{r4, lr}
 8007e86:	4604      	mov	r4, r0
 8007e88:	f7ff fff0 	bl	8007e6c <__sinit_lock_acquire>
 8007e8c:	69a3      	ldr	r3, [r4, #24]
 8007e8e:	b11b      	cbz	r3, 8007e98 <__sinit+0x14>
 8007e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e94:	f7ff bff0 	b.w	8007e78 <__sinit_lock_release>
 8007e98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e9c:	6523      	str	r3, [r4, #80]	; 0x50
 8007e9e:	4b13      	ldr	r3, [pc, #76]	; (8007eec <__sinit+0x68>)
 8007ea0:	4a13      	ldr	r2, [pc, #76]	; (8007ef0 <__sinit+0x6c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	bf04      	itt	eq
 8007eaa:	2301      	moveq	r3, #1
 8007eac:	61a3      	streq	r3, [r4, #24]
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 f820 	bl	8007ef4 <__sfp>
 8007eb4:	6060      	str	r0, [r4, #4]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 f81c 	bl	8007ef4 <__sfp>
 8007ebc:	60a0      	str	r0, [r4, #8]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 f818 	bl	8007ef4 <__sfp>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	60e0      	str	r0, [r4, #12]
 8007ec8:	2104      	movs	r1, #4
 8007eca:	6860      	ldr	r0, [r4, #4]
 8007ecc:	f7ff ff82 	bl	8007dd4 <std>
 8007ed0:	68a0      	ldr	r0, [r4, #8]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	2109      	movs	r1, #9
 8007ed6:	f7ff ff7d 	bl	8007dd4 <std>
 8007eda:	68e0      	ldr	r0, [r4, #12]
 8007edc:	2202      	movs	r2, #2
 8007ede:	2112      	movs	r1, #18
 8007ee0:	f7ff ff78 	bl	8007dd4 <std>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	61a3      	str	r3, [r4, #24]
 8007ee8:	e7d2      	b.n	8007e90 <__sinit+0xc>
 8007eea:	bf00      	nop
 8007eec:	08008aa4 	.word	0x08008aa4
 8007ef0:	08007e1d 	.word	0x08007e1d

08007ef4 <__sfp>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	f7ff ffac 	bl	8007e54 <__sfp_lock_acquire>
 8007efc:	4b1e      	ldr	r3, [pc, #120]	; (8007f78 <__sfp+0x84>)
 8007efe:	681e      	ldr	r6, [r3, #0]
 8007f00:	69b3      	ldr	r3, [r6, #24]
 8007f02:	b913      	cbnz	r3, 8007f0a <__sfp+0x16>
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7ff ffbd 	bl	8007e84 <__sinit>
 8007f0a:	3648      	adds	r6, #72	; 0x48
 8007f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	d503      	bpl.n	8007f1c <__sfp+0x28>
 8007f14:	6833      	ldr	r3, [r6, #0]
 8007f16:	b30b      	cbz	r3, 8007f5c <__sfp+0x68>
 8007f18:	6836      	ldr	r6, [r6, #0]
 8007f1a:	e7f7      	b.n	8007f0c <__sfp+0x18>
 8007f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f20:	b9d5      	cbnz	r5, 8007f58 <__sfp+0x64>
 8007f22:	4b16      	ldr	r3, [pc, #88]	; (8007f7c <__sfp+0x88>)
 8007f24:	60e3      	str	r3, [r4, #12]
 8007f26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f2a:	6665      	str	r5, [r4, #100]	; 0x64
 8007f2c:	f000 f847 	bl	8007fbe <__retarget_lock_init_recursive>
 8007f30:	f7ff ff96 	bl	8007e60 <__sfp_lock_release>
 8007f34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f3c:	6025      	str	r5, [r4, #0]
 8007f3e:	61a5      	str	r5, [r4, #24]
 8007f40:	2208      	movs	r2, #8
 8007f42:	4629      	mov	r1, r5
 8007f44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f48:	f7fe ffb4 	bl	8006eb4 <memset>
 8007f4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f54:	4620      	mov	r0, r4
 8007f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f58:	3468      	adds	r4, #104	; 0x68
 8007f5a:	e7d9      	b.n	8007f10 <__sfp+0x1c>
 8007f5c:	2104      	movs	r1, #4
 8007f5e:	4638      	mov	r0, r7
 8007f60:	f7ff ff62 	bl	8007e28 <__sfmoreglue>
 8007f64:	4604      	mov	r4, r0
 8007f66:	6030      	str	r0, [r6, #0]
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d1d5      	bne.n	8007f18 <__sfp+0x24>
 8007f6c:	f7ff ff78 	bl	8007e60 <__sfp_lock_release>
 8007f70:	230c      	movs	r3, #12
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	e7ee      	b.n	8007f54 <__sfp+0x60>
 8007f76:	bf00      	nop
 8007f78:	08008aa4 	.word	0x08008aa4
 8007f7c:	ffff0001 	.word	0xffff0001

08007f80 <_fwalk_reent>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	4606      	mov	r6, r0
 8007f86:	4688      	mov	r8, r1
 8007f88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f8c:	2700      	movs	r7, #0
 8007f8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f92:	f1b9 0901 	subs.w	r9, r9, #1
 8007f96:	d505      	bpl.n	8007fa4 <_fwalk_reent+0x24>
 8007f98:	6824      	ldr	r4, [r4, #0]
 8007f9a:	2c00      	cmp	r4, #0
 8007f9c:	d1f7      	bne.n	8007f8e <_fwalk_reent+0xe>
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa4:	89ab      	ldrh	r3, [r5, #12]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d907      	bls.n	8007fba <_fwalk_reent+0x3a>
 8007faa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	d003      	beq.n	8007fba <_fwalk_reent+0x3a>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	47c0      	blx	r8
 8007fb8:	4307      	orrs	r7, r0
 8007fba:	3568      	adds	r5, #104	; 0x68
 8007fbc:	e7e9      	b.n	8007f92 <_fwalk_reent+0x12>

08007fbe <__retarget_lock_init_recursive>:
 8007fbe:	4770      	bx	lr

08007fc0 <__retarget_lock_acquire_recursive>:
 8007fc0:	4770      	bx	lr

08007fc2 <__retarget_lock_release_recursive>:
 8007fc2:	4770      	bx	lr

08007fc4 <__swhatbuf_r>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	460e      	mov	r6, r1
 8007fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fcc:	2900      	cmp	r1, #0
 8007fce:	b096      	sub	sp, #88	; 0x58
 8007fd0:	4614      	mov	r4, r2
 8007fd2:	461d      	mov	r5, r3
 8007fd4:	da08      	bge.n	8007fe8 <__swhatbuf_r+0x24>
 8007fd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	061a      	lsls	r2, r3, #24
 8007fe0:	d410      	bmi.n	8008004 <__swhatbuf_r+0x40>
 8007fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe6:	e00e      	b.n	8008006 <__swhatbuf_r+0x42>
 8007fe8:	466a      	mov	r2, sp
 8007fea:	f000 f951 	bl	8008290 <_fstat_r>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	dbf1      	blt.n	8007fd6 <__swhatbuf_r+0x12>
 8007ff2:	9a01      	ldr	r2, [sp, #4]
 8007ff4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ff8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ffc:	425a      	negs	r2, r3
 8007ffe:	415a      	adcs	r2, r3
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	e7ee      	b.n	8007fe2 <__swhatbuf_r+0x1e>
 8008004:	2340      	movs	r3, #64	; 0x40
 8008006:	2000      	movs	r0, #0
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	b016      	add	sp, #88	; 0x58
 800800c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008010 <__smakebuf_r>:
 8008010:	898b      	ldrh	r3, [r1, #12]
 8008012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008014:	079d      	lsls	r5, r3, #30
 8008016:	4606      	mov	r6, r0
 8008018:	460c      	mov	r4, r1
 800801a:	d507      	bpl.n	800802c <__smakebuf_r+0x1c>
 800801c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	6123      	str	r3, [r4, #16]
 8008024:	2301      	movs	r3, #1
 8008026:	6163      	str	r3, [r4, #20]
 8008028:	b002      	add	sp, #8
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	ab01      	add	r3, sp, #4
 800802e:	466a      	mov	r2, sp
 8008030:	f7ff ffc8 	bl	8007fc4 <__swhatbuf_r>
 8008034:	9900      	ldr	r1, [sp, #0]
 8008036:	4605      	mov	r5, r0
 8008038:	4630      	mov	r0, r6
 800803a:	f7ff f873 	bl	8007124 <_malloc_r>
 800803e:	b948      	cbnz	r0, 8008054 <__smakebuf_r+0x44>
 8008040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008044:	059a      	lsls	r2, r3, #22
 8008046:	d4ef      	bmi.n	8008028 <__smakebuf_r+0x18>
 8008048:	f023 0303 	bic.w	r3, r3, #3
 800804c:	f043 0302 	orr.w	r3, r3, #2
 8008050:	81a3      	strh	r3, [r4, #12]
 8008052:	e7e3      	b.n	800801c <__smakebuf_r+0xc>
 8008054:	4b0d      	ldr	r3, [pc, #52]	; (800808c <__smakebuf_r+0x7c>)
 8008056:	62b3      	str	r3, [r6, #40]	; 0x28
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	6020      	str	r0, [r4, #0]
 800805c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	9b00      	ldr	r3, [sp, #0]
 8008064:	6163      	str	r3, [r4, #20]
 8008066:	9b01      	ldr	r3, [sp, #4]
 8008068:	6120      	str	r0, [r4, #16]
 800806a:	b15b      	cbz	r3, 8008084 <__smakebuf_r+0x74>
 800806c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008070:	4630      	mov	r0, r6
 8008072:	f000 f91f 	bl	80082b4 <_isatty_r>
 8008076:	b128      	cbz	r0, 8008084 <__smakebuf_r+0x74>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	f023 0303 	bic.w	r3, r3, #3
 800807e:	f043 0301 	orr.w	r3, r3, #1
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	89a0      	ldrh	r0, [r4, #12]
 8008086:	4305      	orrs	r5, r0
 8008088:	81a5      	strh	r5, [r4, #12]
 800808a:	e7cd      	b.n	8008028 <__smakebuf_r+0x18>
 800808c:	08007e1d 	.word	0x08007e1d

08008090 <memmove>:
 8008090:	4288      	cmp	r0, r1
 8008092:	b510      	push	{r4, lr}
 8008094:	eb01 0402 	add.w	r4, r1, r2
 8008098:	d902      	bls.n	80080a0 <memmove+0x10>
 800809a:	4284      	cmp	r4, r0
 800809c:	4623      	mov	r3, r4
 800809e:	d807      	bhi.n	80080b0 <memmove+0x20>
 80080a0:	1e43      	subs	r3, r0, #1
 80080a2:	42a1      	cmp	r1, r4
 80080a4:	d008      	beq.n	80080b8 <memmove+0x28>
 80080a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080ae:	e7f8      	b.n	80080a2 <memmove+0x12>
 80080b0:	4402      	add	r2, r0
 80080b2:	4601      	mov	r1, r0
 80080b4:	428a      	cmp	r2, r1
 80080b6:	d100      	bne.n	80080ba <memmove+0x2a>
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080c2:	e7f7      	b.n	80080b4 <memmove+0x24>

080080c4 <__malloc_lock>:
 80080c4:	4801      	ldr	r0, [pc, #4]	; (80080cc <__malloc_lock+0x8>)
 80080c6:	f7ff bf7b 	b.w	8007fc0 <__retarget_lock_acquire_recursive>
 80080ca:	bf00      	nop
 80080cc:	20000928 	.word	0x20000928

080080d0 <__malloc_unlock>:
 80080d0:	4801      	ldr	r0, [pc, #4]	; (80080d8 <__malloc_unlock+0x8>)
 80080d2:	f7ff bf76 	b.w	8007fc2 <__retarget_lock_release_recursive>
 80080d6:	bf00      	nop
 80080d8:	20000928 	.word	0x20000928

080080dc <_realloc_r>:
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e0:	4680      	mov	r8, r0
 80080e2:	4614      	mov	r4, r2
 80080e4:	460e      	mov	r6, r1
 80080e6:	b921      	cbnz	r1, 80080f2 <_realloc_r+0x16>
 80080e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ec:	4611      	mov	r1, r2
 80080ee:	f7ff b819 	b.w	8007124 <_malloc_r>
 80080f2:	b92a      	cbnz	r2, 8008100 <_realloc_r+0x24>
 80080f4:	f7fe ffaa 	bl	800704c <_free_r>
 80080f8:	4625      	mov	r5, r4
 80080fa:	4628      	mov	r0, r5
 80080fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008100:	f000 f8fa 	bl	80082f8 <_malloc_usable_size_r>
 8008104:	4284      	cmp	r4, r0
 8008106:	4607      	mov	r7, r0
 8008108:	d802      	bhi.n	8008110 <_realloc_r+0x34>
 800810a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800810e:	d812      	bhi.n	8008136 <_realloc_r+0x5a>
 8008110:	4621      	mov	r1, r4
 8008112:	4640      	mov	r0, r8
 8008114:	f7ff f806 	bl	8007124 <_malloc_r>
 8008118:	4605      	mov	r5, r0
 800811a:	2800      	cmp	r0, #0
 800811c:	d0ed      	beq.n	80080fa <_realloc_r+0x1e>
 800811e:	42bc      	cmp	r4, r7
 8008120:	4622      	mov	r2, r4
 8008122:	4631      	mov	r1, r6
 8008124:	bf28      	it	cs
 8008126:	463a      	movcs	r2, r7
 8008128:	f7fe feb6 	bl	8006e98 <memcpy>
 800812c:	4631      	mov	r1, r6
 800812e:	4640      	mov	r0, r8
 8008130:	f7fe ff8c 	bl	800704c <_free_r>
 8008134:	e7e1      	b.n	80080fa <_realloc_r+0x1e>
 8008136:	4635      	mov	r5, r6
 8008138:	e7df      	b.n	80080fa <_realloc_r+0x1e>

0800813a <_raise_r>:
 800813a:	291f      	cmp	r1, #31
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4604      	mov	r4, r0
 8008140:	460d      	mov	r5, r1
 8008142:	d904      	bls.n	800814e <_raise_r+0x14>
 8008144:	2316      	movs	r3, #22
 8008146:	6003      	str	r3, [r0, #0]
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008150:	b112      	cbz	r2, 8008158 <_raise_r+0x1e>
 8008152:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008156:	b94b      	cbnz	r3, 800816c <_raise_r+0x32>
 8008158:	4620      	mov	r0, r4
 800815a:	f000 f831 	bl	80081c0 <_getpid_r>
 800815e:	462a      	mov	r2, r5
 8008160:	4601      	mov	r1, r0
 8008162:	4620      	mov	r0, r4
 8008164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008168:	f000 b818 	b.w	800819c <_kill_r>
 800816c:	2b01      	cmp	r3, #1
 800816e:	d00a      	beq.n	8008186 <_raise_r+0x4c>
 8008170:	1c59      	adds	r1, r3, #1
 8008172:	d103      	bne.n	800817c <_raise_r+0x42>
 8008174:	2316      	movs	r3, #22
 8008176:	6003      	str	r3, [r0, #0]
 8008178:	2001      	movs	r0, #1
 800817a:	e7e7      	b.n	800814c <_raise_r+0x12>
 800817c:	2400      	movs	r4, #0
 800817e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008182:	4628      	mov	r0, r5
 8008184:	4798      	blx	r3
 8008186:	2000      	movs	r0, #0
 8008188:	e7e0      	b.n	800814c <_raise_r+0x12>
	...

0800818c <raise>:
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <raise+0xc>)
 800818e:	4601      	mov	r1, r0
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	f7ff bfd2 	b.w	800813a <_raise_r>
 8008196:	bf00      	nop
 8008198:	20000064 	.word	0x20000064

0800819c <_kill_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d07      	ldr	r5, [pc, #28]	; (80081bc <_kill_r+0x20>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	4611      	mov	r1, r2
 80081a8:	602b      	str	r3, [r5, #0]
 80081aa:	f7fa fe33 	bl	8002e14 <_kill>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d102      	bne.n	80081b8 <_kill_r+0x1c>
 80081b2:	682b      	ldr	r3, [r5, #0]
 80081b4:	b103      	cbz	r3, 80081b8 <_kill_r+0x1c>
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	bd38      	pop	{r3, r4, r5, pc}
 80081ba:	bf00      	nop
 80081bc:	2000092c 	.word	0x2000092c

080081c0 <_getpid_r>:
 80081c0:	f7fa be20 	b.w	8002e04 <_getpid>

080081c4 <__sread>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	460c      	mov	r4, r1
 80081c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081cc:	f000 f89c 	bl	8008308 <_read_r>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	bfab      	itete	ge
 80081d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081d6:	89a3      	ldrhlt	r3, [r4, #12]
 80081d8:	181b      	addge	r3, r3, r0
 80081da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081de:	bfac      	ite	ge
 80081e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80081e2:	81a3      	strhlt	r3, [r4, #12]
 80081e4:	bd10      	pop	{r4, pc}

080081e6 <__swrite>:
 80081e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ea:	461f      	mov	r7, r3
 80081ec:	898b      	ldrh	r3, [r1, #12]
 80081ee:	05db      	lsls	r3, r3, #23
 80081f0:	4605      	mov	r5, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	4616      	mov	r6, r2
 80081f6:	d505      	bpl.n	8008204 <__swrite+0x1e>
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	2302      	movs	r3, #2
 80081fe:	2200      	movs	r2, #0
 8008200:	f000 f868 	bl	80082d4 <_lseek_r>
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800820a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800820e:	81a3      	strh	r3, [r4, #12]
 8008210:	4632      	mov	r2, r6
 8008212:	463b      	mov	r3, r7
 8008214:	4628      	mov	r0, r5
 8008216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800821a:	f000 b817 	b.w	800824c <_write_r>

0800821e <__sseek>:
 800821e:	b510      	push	{r4, lr}
 8008220:	460c      	mov	r4, r1
 8008222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008226:	f000 f855 	bl	80082d4 <_lseek_r>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	bf15      	itete	ne
 8008230:	6560      	strne	r0, [r4, #84]	; 0x54
 8008232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800823a:	81a3      	strheq	r3, [r4, #12]
 800823c:	bf18      	it	ne
 800823e:	81a3      	strhne	r3, [r4, #12]
 8008240:	bd10      	pop	{r4, pc}

08008242 <__sclose>:
 8008242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008246:	f000 b813 	b.w	8008270 <_close_r>
	...

0800824c <_write_r>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	4d07      	ldr	r5, [pc, #28]	; (800826c <_write_r+0x20>)
 8008250:	4604      	mov	r4, r0
 8008252:	4608      	mov	r0, r1
 8008254:	4611      	mov	r1, r2
 8008256:	2200      	movs	r2, #0
 8008258:	602a      	str	r2, [r5, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	f7fa fe11 	bl	8002e82 <_write>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_write_r+0x1e>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_write_r+0x1e>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	2000092c 	.word	0x2000092c

08008270 <_close_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d06      	ldr	r5, [pc, #24]	; (800828c <_close_r+0x1c>)
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	f7fa fe1d 	bl	8002eba <_close>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_close_r+0x1a>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_close_r+0x1a>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	2000092c 	.word	0x2000092c

08008290 <_fstat_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d07      	ldr	r5, [pc, #28]	; (80082b0 <_fstat_r+0x20>)
 8008294:	2300      	movs	r3, #0
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	4611      	mov	r1, r2
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	f7fa fe18 	bl	8002ed2 <_fstat>
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	d102      	bne.n	80082ac <_fstat_r+0x1c>
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	b103      	cbz	r3, 80082ac <_fstat_r+0x1c>
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	bd38      	pop	{r3, r4, r5, pc}
 80082ae:	bf00      	nop
 80082b0:	2000092c 	.word	0x2000092c

080082b4 <_isatty_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	; (80082d0 <_isatty_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7fa fe17 	bl	8002ef2 <_isatty>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_isatty_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_isatty_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	2000092c 	.word	0x2000092c

080082d4 <_lseek_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d07      	ldr	r5, [pc, #28]	; (80082f4 <_lseek_r+0x20>)
 80082d8:	4604      	mov	r4, r0
 80082da:	4608      	mov	r0, r1
 80082dc:	4611      	mov	r1, r2
 80082de:	2200      	movs	r2, #0
 80082e0:	602a      	str	r2, [r5, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f7fa fe10 	bl	8002f08 <_lseek>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_lseek_r+0x1e>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_lseek_r+0x1e>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	2000092c 	.word	0x2000092c

080082f8 <_malloc_usable_size_r>:
 80082f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082fc:	1f18      	subs	r0, r3, #4
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bfbc      	itt	lt
 8008302:	580b      	ldrlt	r3, [r1, r0]
 8008304:	18c0      	addlt	r0, r0, r3
 8008306:	4770      	bx	lr

08008308 <_read_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d07      	ldr	r5, [pc, #28]	; (8008328 <_read_r+0x20>)
 800830c:	4604      	mov	r4, r0
 800830e:	4608      	mov	r0, r1
 8008310:	4611      	mov	r1, r2
 8008312:	2200      	movs	r2, #0
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f7fa fd96 	bl	8002e48 <_read>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_read_r+0x1e>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_read_r+0x1e>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	2000092c 	.word	0x2000092c

0800832c <_init>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr

08008338 <_fini>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr
