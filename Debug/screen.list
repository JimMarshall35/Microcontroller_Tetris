
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000996c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5b0  0800a5b0  00020370  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5b0  0800a5b0  00020370  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5b0  0800a5b0  00020370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b0  0800a5b0  0001a5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  0800a5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020370  2**0
                  CONTENTS
 10 .bss          00000930  20000370  20000370  00020370  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000ca0  20000ca0  00020370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019352  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004373  00000000  00000000  000396f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0003da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f8  00000000  00000000  0003ef30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f227  00000000  00000000  00040228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fc2  00000000  00000000  0005f44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adb2a  00000000  00000000  00079411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126f3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ef0  00000000  00000000  00126f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ae4 	.word	0x08009ae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	08009ae4 	.word	0x08009ae4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStickChange>:

		*outputX = x;
		*outputY = y;
}

void ReadAnalogStickChange(ADC_HandleTypeDef* adc, i32* outputX, i32* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	//LCD_PCD8544_clear_ram(&gLcdScreen);
	HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f003 fe01 	bl	8003e94 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f003 feb3 	bl	8004000 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f003 ff7e 	bl	800419c <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002a6:	801a      	strh	r2, [r3, #0]
	uint16_t y = AD_RES;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

	// Start ADC Conversion
	HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f003 fdf0 	bl	8003e94 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f003 fea2 	bl	8004000 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f003 ff6d 	bl	800419c <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002c8:	801a      	strh	r2, [r3, #0]
	uint16_t x = AD_RES;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
	x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]
	y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	613b      	str	r3, [r7, #16]
	*outputX = (x - (twelveBitMax/2));
 80002e6:	8aba      	ldrh	r2, [r7, #20]
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	0fd9      	lsrs	r1, r3, #31
 80002ec:	440b      	add	r3, r1
 80002ee:	105b      	asrs	r3, r3, #1
 80002f0:	425b      	negs	r3, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	601a      	str	r2, [r3, #0]
	*outputY = (y - (twelveBitMax/2));
 80002f8:	8afa      	ldrh	r2, [r7, #22]
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	0fd9      	lsrs	r1, r3, #31
 80002fe:	440b      	add	r3, r1
 8000300:	105b      	asrs	r3, r3, #1
 8000302:	425b      	negs	r3, r3
 8000304:	441a      	add	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000038c 	.word	0x2000038c

08000318 <EmulateDPad>:


ANALOG_STICK_DPAD_RESULT EmulateDPad(ADC_HandleTypeDef* adc){
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	4619      	mov	r1, r3
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f7ff ffa8 	bl	8000280 <ReadAnalogStickChange>
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000330:	2300      	movs	r3, #0
 8000332:	75fb      	strb	r3, [r7, #23]
	const i32 twelveBitMax = 4096;
 8000334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000338:	613b      	str	r3, [r7, #16]
	if(analogYChange > (twelveBitMax/3)){
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	4a29      	ldr	r2, [pc, #164]	; (80003e4 <EmulateDPad+0xcc>)
 800033e:	fb82 1203 	smull	r1, r2, r2, r3
 8000342:	17db      	asrs	r3, r3, #31
 8000344:	1ad2      	subs	r2, r2, r3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	429a      	cmp	r2, r3
 800034a:	da09      	bge.n	8000360 <EmulateDPad+0x48>
		if(_isAnalogStickExtended == false){
 800034c:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <EmulateDPad+0xd0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d141      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <EmulateDPad+0xd0>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800035a:	2302      	movs	r3, #2
 800035c:	75fb      	strb	r3, [r7, #23]
 800035e:	e03b      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <EmulateDPad+0xcc>)
 8000364:	fb82 1203 	smull	r1, r2, r2, r3
 8000368:	17db      	asrs	r3, r3, #31
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	429a      	cmp	r2, r3
 8000370:	dd09      	ble.n	8000386 <EmulateDPad+0x6e>
		if(_isAnalogStickExtended == false){
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <EmulateDPad+0xd0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d12e      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <EmulateDPad+0xd0>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000380:	2301      	movs	r3, #1
 8000382:	75fb      	strb	r3, [r7, #23]
 8000384:	e028      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange > (twelveBitMax/3)){
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <EmulateDPad+0xcc>)
 800038a:	fb82 1203 	smull	r1, r2, r2, r3
 800038e:	17db      	asrs	r3, r3, #31
 8000390:	1ad2      	subs	r2, r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	429a      	cmp	r2, r3
 8000396:	da09      	bge.n	80003ac <EmulateDPad+0x94>
		if(_isAnalogStickExtended == false){
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <EmulateDPad+0xd0>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d11b      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <EmulateDPad+0xd0>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 80003a6:	2304      	movs	r3, #4
 80003a8:	75fb      	strb	r3, [r7, #23]
 80003aa:	e015      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <EmulateDPad+0xcc>)
 80003b0:	fb82 1203 	smull	r1, r2, r2, r3
 80003b4:	17db      	asrs	r3, r3, #31
 80003b6:	1a9a      	subs	r2, r3, r2
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	dd09      	ble.n	80003d2 <EmulateDPad+0xba>
		if(_isAnalogStickExtended == false){
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <EmulateDPad+0xd0>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d108      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <EmulateDPad+0xd0>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80003cc:	2303      	movs	r3, #3
 80003ce:	75fb      	strb	r3, [r7, #23]
 80003d0:	e002      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <EmulateDPad+0xd0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	55555556 	.word	0x55555556
 80003e8:	2000038e 	.word	0x2000038e

080003ec <EmulateDPadReturningXAndYChange>:


ANALOG_STICK_DPAD_RESULT EmulateDPadReturningXAndYChange(ADC_HandleTypeDef* adc, i32* rXChange, i32* rYChange){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 80003f8:	f107 0210 	add.w	r2, r7, #16
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	4619      	mov	r1, r3
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff3c 	bl	8000280 <ReadAnalogStickChange>
	*rXChange = analogXChange;
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	601a      	str	r2, [r3, #0]
	*rYChange = analogYChange;
 800040e:	693a      	ldr	r2, [r7, #16]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	601a      	str	r2, [r3, #0]
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000414:	2300      	movs	r3, #0
 8000416:	77fb      	strb	r3, [r7, #31]
	const i32 twelveBitMax = 4096;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	61bb      	str	r3, [r7, #24]
	if(analogYChange > (twelveBitMax/3)){
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000422:	fb82 1203 	smull	r1, r2, r2, r3
 8000426:	17db      	asrs	r3, r3, #31
 8000428:	1ad2      	subs	r2, r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	429a      	cmp	r2, r3
 800042e:	da09      	bge.n	8000444 <EmulateDPadReturningXAndYChange+0x58>
		if(_isAnalogStickExtended == false){
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d141      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800043e:	2302      	movs	r3, #2
 8000440:	77fb      	strb	r3, [r7, #31]
 8000442:	e03b      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}

	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000448:	fb82 1203 	smull	r1, r2, r2, r3
 800044c:	17db      	asrs	r3, r3, #31
 800044e:	1a9a      	subs	r2, r3, r2
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	429a      	cmp	r2, r3
 8000454:	dd09      	ble.n	800046a <EmulateDPadReturningXAndYChange+0x7e>
		if(_isAnalogStickExtended == false){
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d12e      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000464:	2301      	movs	r3, #1
 8000466:	77fb      	strb	r3, [r7, #31]
 8000468:	e028      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>

		}

	}
	else if(analogXChange > (twelveBitMax/3)){
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 800046e:	fb82 1203 	smull	r1, r2, r2, r3
 8000472:	17db      	asrs	r3, r3, #31
 8000474:	1ad2      	subs	r2, r2, r3
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	429a      	cmp	r2, r3
 800047a:	da09      	bge.n	8000490 <EmulateDPadReturningXAndYChange+0xa4>
		if(_isAnalogStickExtended == false){
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d11b      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 800048a:	2304      	movs	r3, #4
 800048c:	77fb      	strb	r3, [r7, #31]
 800048e:	e015      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000494:	fb82 1203 	smull	r1, r2, r2, r3
 8000498:	17db      	asrs	r3, r3, #31
 800049a:	1a9a      	subs	r2, r3, r2
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dd09      	ble.n	80004b6 <EmulateDPadReturningXAndYChange+0xca>
		if(_isAnalogStickExtended == false){
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d108      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80004b0:	2303      	movs	r3, #3
 80004b2:	77fb      	strb	r3, [r7, #31]
 80004b4:	e002      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80004bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	55555556 	.word	0x55555556
 80004cc:	2000038e 	.word	0x2000038e

080004d0 <Buzzer_Init>:
		505,
		477

};

void Buzzer_Init(TIM_HandleTypeDef* timer){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Start(timer,TIM_CHANNEL_1);
 80004d8:	2100      	movs	r1, #0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f006 feca 	bl	8007274 <HAL_TIM_OC_Start>
	_timer = timer;
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <Buzzer_Init+0x30>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(_timer,0);
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <Buzzer_Init+0x30>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <Buzzer_Init+0x30>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000390 	.word	0x20000390

08000504 <Buzzer_Note>:

void Buzzer_Note(Note note){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(_timer,_notesBuzzerTimerAutoReloadValues[note]);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <Buzzer_Note+0x34>)
 8000512:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <Buzzer_Note+0x38>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <Buzzer_Note+0x34>)
 8000522:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <Buzzer_Note+0x38>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60da      	str	r2, [r3, #12]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000000 	.word	0x20000000
 800053c:	20000390 	.word	0x20000390

08000540 <gfxClearFrameBuffer>:
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
	}
}

void gfxClearFrameBuffer(){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 8000544:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000548:	2100      	movs	r1, #0
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <gfxClearFrameBuffer+0x14>)
 800054c:	f008 f88e 	bl	800866c <memset>
	//UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000394 	.word	0x20000394

08000558 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b53      	cmp	r3, #83	; 0x53
 800056c:	d825      	bhi.n	80005ba <gfxPlotPixelInternal+0x62>
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	2b2e      	cmp	r3, #46	; 0x2e
 8000572:	d822      	bhi.n	80005ba <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2354      	movs	r3, #84	; 0x54
 800057e:	fb03 f202 	mul.w	r2, r3, r2
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4413      	add	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800058e:	d215      	bcs.n	80005bc <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <gfxPlotPixelInternal+0x70>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b25a      	sxtb	r2, r3
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	f003 0307 	and.w	r3, r3, #7
 80005a0:	2101      	movs	r1, #1
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	b2d9      	uxtb	r1, r3
 80005ae:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <gfxPlotPixelInternal+0x70>)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4413      	add	r3, r2
 80005b4:	460a      	mov	r2, r1
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e000      	b.n	80005bc <gfxPlotPixelInternal+0x64>
		return;
 80005ba:	bf00      	nop
}
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000394 	.word	0x20000394

080005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 80005cc:	b490      	push	{r4, r7}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4604      	mov	r4, r0
 80005d4:	4608      	mov	r0, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	461a      	mov	r2, r3
 80005da:	4623      	mov	r3, r4
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	4603      	mov	r3, r0
 80005e0:	71bb      	strb	r3, [r7, #6]
 80005e2:	460b      	mov	r3, r1
 80005e4:	717b      	strb	r3, [r7, #5]
 80005e6:	4613      	mov	r3, r2
 80005e8:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e01c      	b.n	800062a <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 80005f0:	4913      	ldr	r1, [pc, #76]	; (8000640 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 8000600:	490f      	ldr	r1, [pc, #60]	; (8000640 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	4613      	mov	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	440b      	add	r3, r1
 800060c:	3301      	adds	r3, #1
 800060e:	797a      	ldrb	r2, [r7, #5]
 8000610:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 8000612:	490b      	ldr	r1, [pc, #44]	; (8000640 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4613      	mov	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4413      	add	r3, r2
 800061c:	440b      	add	r3, r1
 800061e:	3302      	adds	r3, #2
 8000620:	793a      	ldrb	r2, [r7, #4]
 8000622:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	429a      	cmp	r2, r3
 8000630:	ddde      	ble.n	80005f0 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bc90      	pop	{r4, r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2000058c 	.word	0x2000058c

08000644 <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	4604      	mov	r4, r0
 800064c:	4608      	mov	r0, r1
 800064e:	4611      	mov	r1, r2
 8000650:	461a      	mov	r2, r3
 8000652:	4623      	mov	r3, r4
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	4603      	mov	r3, r0
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	460b      	mov	r3, r1
 800065c:	717b      	strb	r3, [r7, #5]
 800065e:	4613      	mov	r3, r2
 8000660:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 8000662:	797a      	ldrb	r2, [r7, #5]
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 800066a:	793a      	ldrb	r2, [r7, #4]
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da05      	bge.n	8000688 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	425b      	negs	r3, r3
 8000686:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	005a      	lsls	r2, r3, #1
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e01e      	b.n	80006da <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff56 	bl	8000558 <gfxPlotPixelInternal>
		if(D > 0){
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	dd0b      	ble.n	80006ca <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	4413      	add	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 80006ba:	69fa      	ldr	r2, [r7, #28]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	4413      	add	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e004      	b.n	80006d4 <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	4413      	add	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	797b      	ldrb	r3, [r7, #5]
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dddc      	ble.n	800069c <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3724      	adds	r7, #36	; 0x24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd90      	pop	{r4, r7, pc}

080006ec <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4604      	mov	r4, r0
 80006f4:	4608      	mov	r0, r1
 80006f6:	4611      	mov	r1, r2
 80006f8:	461a      	mov	r2, r3
 80006fa:	4623      	mov	r3, r4
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	4603      	mov	r3, r0
 8000700:	71bb      	strb	r3, [r7, #6]
 8000702:	460b      	mov	r3, r1
 8000704:	717b      	strb	r3, [r7, #5]
 8000706:	4613      	mov	r3, r2
 8000708:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800070a:	797a      	ldrb	r2, [r7, #5]
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 8000712:	793a      	ldrb	r2, [r7, #4]
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	2b00      	cmp	r3, #0
 8000722:	da04      	bge.n	800072e <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	425b      	negs	r3, r3
 800072c:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	005a      	lsls	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e01e      	b.n	8000780 <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff03 	bl	8000558 <gfxPlotPixelInternal>
		if(D > 0){
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b00      	cmp	r3, #0
 8000756:	dd0b      	ble.n	8000770 <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	4413      	add	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	e004      	b.n	800077a <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	4413      	add	r3, r2
 8000778:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	793b      	ldrb	r3, [r7, #4]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	dddc      	ble.n	8000742 <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}

08000792 <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 8000792:	b590      	push	{r4, r7, lr}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	4604      	mov	r4, r0
 800079a:	4608      	mov	r0, r1
 800079c:	4611      	mov	r1, r2
 800079e:	461a      	mov	r2, r3
 80007a0:	4623      	mov	r3, r4
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4603      	mov	r3, r0
 80007a6:	71bb      	strb	r3, [r7, #6]
 80007a8:	460b      	mov	r3, r1
 80007aa:	717b      	strb	r3, [r7, #5]
 80007ac:	4613      	mov	r3, r2
 80007ae:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 80007b0:	793a      	ldrb	r2, [r7, #4]
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007be:	7979      	ldrb	r1, [r7, #5]
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	1acb      	subs	r3, r1, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	bfb8      	it	lt
 80007c8:	425b      	neglt	r3, r3
 80007ca:	429a      	cmp	r2, r3
 80007cc:	da11      	bge.n	80007f2 <gfxDrawLine+0x60>
		if(x0 > x1){
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	797b      	ldrb	r3, [r7, #5]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d906      	bls.n	80007e4 <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	7939      	ldrb	r1, [r7, #4]
 80007dc:	7978      	ldrb	r0, [r7, #5]
 80007de:	f7ff ff31 	bl	8000644 <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 80007e2:	e017      	b.n	8000814 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	797a      	ldrb	r2, [r7, #5]
 80007e8:	79b9      	ldrb	r1, [r7, #6]
 80007ea:	79f8      	ldrb	r0, [r7, #7]
 80007ec:	f7ff ff2a 	bl	8000644 <gfxDrawLineBresenhamLow>
}
 80007f0:	e010      	b.n	8000814 <gfxDrawLine+0x82>
		if(y0 > y1){
 80007f2:	79ba      	ldrb	r2, [r7, #6]
 80007f4:	793b      	ldrb	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d906      	bls.n	8000808 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	7939      	ldrb	r1, [r7, #4]
 8000800:	7978      	ldrb	r0, [r7, #5]
 8000802:	f7ff ff73 	bl	80006ec <gfxDrawLineBresenhamHigh>
}
 8000806:	e005      	b.n	8000814 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 8000808:	793b      	ldrb	r3, [r7, #4]
 800080a:	797a      	ldrb	r2, [r7, #5]
 800080c:	79b9      	ldrb	r1, [r7, #6]
 800080e:	79f8      	ldrb	r0, [r7, #7]
 8000810:	f7ff ff6c 	bl	80006ec <gfxDrawLineBresenhamHigh>
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}

0800081c <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000828:	e067      	b.n	80008fa <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 800082a:	4938      	ldr	r1, [pc, #224]	; (800090c <gfxFinishDrawing+0xf0>)
 800082c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	440b      	add	r3, r1
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d15b      	bne.n	80008f4 <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 800083c:	4933      	ldr	r1, [pc, #204]	; (800090c <gfxFinishDrawing+0xf0>)
 800083e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	440b      	add	r3, r1
 8000848:	3301      	adds	r3, #1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 8000850:	492e      	ldr	r1, [pc, #184]	; (800090c <gfxFinishDrawing+0xf0>)
 8000852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	440b      	add	r3, r1
 800085c:	3302      	adds	r3, #2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 8000864:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800086c:	429a      	cmp	r2, r3
 800086e:	d20b      	bcs.n	8000888 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 8000870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000874:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000878:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800087c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000880:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000884:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 8000888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088a:	2254      	movs	r2, #84	; 0x54
 800088c:	fb02 f303 	mul.w	r3, r2, r3
 8000890:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 8000892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000894:	b2d9      	uxtb	r1, r3
 8000896:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	4413      	add	r3, r2
 800089e:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <gfxFinishDrawing+0xf4>)
 80008a0:	1898      	adds	r0, r3, r2
 80008a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4603      	mov	r3, r0
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f82a 	bl	8000914 <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 80008c0:	4912      	ldr	r1, [pc, #72]	; (800090c <gfxFinishDrawing+0xf0>)
 80008c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 80008d0:	490e      	ldr	r1, [pc, #56]	; (800090c <gfxFinishDrawing+0xf0>)
 80008d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	440b      	add	r3, r1
 80008dc:	3301      	adds	r3, #1
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 80008e2:	490a      	ldr	r1, [pc, #40]	; (800090c <gfxFinishDrawing+0xf0>)
 80008e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	3302      	adds	r3, #2
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80008f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f6:	3301      	adds	r3, #1
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fc:	2b05      	cmp	r3, #5
 80008fe:	dd94      	ble.n	800082a <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	; 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000058c 	.word	0x2000058c
 8000910:	20000394 	.word	0x20000394

08000914 <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	460b      	mov	r3, r1
 8000920:	72fb      	strb	r3, [r7, #11]
 8000922:	4613      	mov	r3, r2
 8000924:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f002 fa7e 	bl	8002e30 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f002 fa9b 	bl	8002e70 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 800093a:	7dfa      	ldrb	r2, [r7, #23]
 800093c:	7db9      	ldrb	r1, [r7, #22]
 800093e:	2300      	movs	r3, #0
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f002 f99e 	bl	8002c82 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 8000946:	7aba      	ldrb	r2, [r7, #10]
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f002 f9eb 	bl	8002d28 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f002 fa9c 	bl	8002e90 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f002 fa79 	bl	8002e50 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f002 fa86 	bl	8002e70 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8000964:	8c3b      	ldrh	r3, [r7, #32]
 8000966:	461a      	mov	r2, r3
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f002 f956 	bl	8002c1c <LCD_PCD8544_LL_send_data>
 8000970:	4603      	mov	r3, r0
 8000972:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f002 fa8b 	bl	8002e90 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 800097a:	7d7b      	ldrb	r3, [r7, #21]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	; 0x70
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	603a      	str	r2, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	460b      	mov	r3, r1
 8000992:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f7ff fc1b 	bl	80001d0 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 80009a0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	461a      	mov	r2, r3
 80009ae:	79bb      	ldrb	r3, [r7, #6]
 80009b0:	4413      	add	r3, r2
 80009b2:	2b54      	cmp	r3, #84	; 0x54
 80009b4:	dd04      	ble.n	80009c0 <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 80009b6:	230e      	movs	r3, #14
 80009b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2254      	movs	r2, #84	; 0x54
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f007 fe4f 	bl	800866c <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 80009d4:	e029      	b.n	8000a2a <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 80009d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d029      	beq.n	8000a38 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 80009e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 80009f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	461a      	mov	r2, r3
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	1898      	adds	r0, r3, r2
 8000a06:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <gfxWriteTextLineToFrameBuffer+0xf4>)
 8000a16:	4413      	add	r3, r2
 8000a18:	2206      	movs	r2, #6
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f007 fe18 	bl	8008650 <memcpy>
	for ( ; nChars<strLen; nChars++) {
 8000a20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000a24:	3301      	adds	r3, #1
 8000a26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000a2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000a2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3cf      	bcc.n	80009d6 <gfxWriteTextLineToFrameBuffer+0x52>
 8000a36:	e000      	b.n	8000a3a <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 8000a38:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2254      	movs	r2, #84	; 0x54
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 8000a44:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	0052      	lsls	r2, r2, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 8000a56:	79ba      	ldrb	r2, [r7, #6]
 8000a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <gfxWriteTextLineToFrameBuffer+0xf8>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000a64:	f107 010c 	add.w	r1, r7, #12
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f007 fdf1 	bl	8008650 <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 8000a6e:	bf00      	nop
 8000a70:	3770      	adds	r7, #112	; 0x70
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08009d58 	.word	0x08009d58
 8000a7c:	20000394 	.word	0x20000394

08000a80 <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4604      	mov	r4, r0
 8000a88:	4608      	mov	r0, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4623      	mov	r3, r4
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	4603      	mov	r3, r0
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	460b      	mov	r3, r1
 8000a98:	717b      	strb	r3, [r7, #5]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	797a      	ldrb	r2, [r7, #5]
 8000aa2:	79b9      	ldrb	r1, [r7, #6]
 8000aa4:	79f8      	ldrb	r0, [r7, #7]
 8000aa6:	f7ff fe74 	bl	8000792 <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 8000aaa:	793b      	ldrb	r3, [r7, #4]
 8000aac:	797a      	ldrb	r2, [r7, #5]
 8000aae:	79b9      	ldrb	r1, [r7, #6]
 8000ab0:	7978      	ldrb	r0, [r7, #5]
 8000ab2:	f7ff fe6e 	bl	8000792 <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 8000ab6:	793b      	ldrb	r3, [r7, #4]
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	7939      	ldrb	r1, [r7, #4]
 8000abc:	7978      	ldrb	r0, [r7, #5]
 8000abe:	f7ff fe68 	bl	8000792 <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	7939      	ldrb	r1, [r7, #4]
 8000ac8:	79f8      	ldrb	r0, [r7, #7]
 8000aca:	f7ff fe62 	bl	8000792 <gfxDrawLine>


}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
	...

08000ad8 <ClearUpdateRegions>:

void ClearUpdateRegions(){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	e01c      	b.n	8000b1e <ClearUpdateRegions+0x46>
		gScreenRegionsToUpdate[i].updateColumnFinish = 0;
 8000ae4:	4913      	ldr	r1, [pc, #76]	; (8000b34 <ClearUpdateRegions+0x5c>)
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	3302      	adds	r3, #2
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000af6:	490f      	ldr	r1, [pc, #60]	; (8000b34 <ClearUpdateRegions+0x5c>)
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	3301      	adds	r3, #1
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 0;
 8000b08:	490a      	ldr	r1, [pc, #40]	; (8000b34 <ClearUpdateRegions+0x5c>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	dddf      	ble.n	8000ae4 <ClearUpdateRegions+0xc>


	}
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	2000058c 	.word	0x2000058c

08000b38 <ClearScreen>:


void ClearScreen(LCD_PCD8544_screen_t* scr){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	gfxClearFrameBuffer();
 8000b40:	f7ff fcfe 	bl	8000540 <gfxClearFrameBuffer>
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e01c      	b.n	8000b84 <ClearScreen+0x4c>
		gScreenRegionsToUpdate[i].updateColumnFinish = 83;
 8000b4a:	4913      	ldr	r1, [pc, #76]	; (8000b98 <ClearScreen+0x60>)
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	3302      	adds	r3, #2
 8000b58:	2253      	movs	r2, #83	; 0x53
 8000b5a:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000b5c:	490e      	ldr	r1, [pc, #56]	; (8000b98 <ClearScreen+0x60>)
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	3301      	adds	r3, #1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 1;
 8000b6e:	490a      	ldr	r1, [pc, #40]	; (8000b98 <ClearScreen+0x60>)
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3301      	adds	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b05      	cmp	r3, #5
 8000b88:	dddf      	ble.n	8000b4a <ClearScreen+0x12>
	}
	gfxFinishDrawing(scr);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fe46 	bl	800081c <gfxFinishDrawing>

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000058c 	.word	0x2000058c

08000b9c <gfxClearFrameBufferRow>:


void gfxClearFrameBufferRow(u8 rowIndex, u8 colStart, u8 amount){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	4613      	mov	r3, r2
 8000bac:	717b      	strb	r3, [r7, #5]
	u8* frameBufferStartPtr = &gFrameBuffer[(rowIndex * PIXELS_WIDTH) + colStart];
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2254      	movs	r2, #84	; 0x54
 8000bb2:	fb03 f202 	mul.w	r2, r3, r2
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <gfxClearFrameBufferRow+0x38>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

	memset(frameBufferStartPtr, 0, amount);
 8000bc0:	797b      	ldrb	r3, [r7, #5]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f007 fd50 	bl	800866c <memset>

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000394 	.word	0x20000394

08000bd8 <MusicPlayer_StartTune>:

void MusicPlayer_Init(TIM_HandleTypeDef* timer){

}

void MusicPlayer_StartTune(MusicNote* notes, u32 numNotes){
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	if(_musicPlayerState != STOPPED){
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MusicPlayer_StartTune+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d112      	bne.n	8000c10 <MusicPlayer_StartTune+0x38>
		return;
	}
	_currentTune = notes;
 8000bea:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <MusicPlayer_StartTune+0x48>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6013      	str	r3, [r2, #0]
	_currentTuneNumNotes = numNotes;
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <MusicPlayer_StartTune+0x4c>)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	6013      	str	r3, [r2, #0]
	_musicPlayerState = PLAYING;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MusicPlayer_StartTune+0x44>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
	_thisNoteTimer = 0;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MusicPlayer_StartTune+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
	_tuneTimer = 0;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MusicPlayer_StartTune+0x54>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
	_thisNoteStarted = false;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MusicPlayer_StartTune+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e000      	b.n	8000c12 <MusicPlayer_StartTune+0x3a>
		return;
 8000c10:	bf00      	nop
}
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	200005ac 	.word	0x200005ac
 8000c20:	200005a0 	.word	0x200005a0
 8000c24:	200005a4 	.word	0x200005a4
 8000c28:	200005b4 	.word	0x200005b4
 8000c2c:	200005b0 	.word	0x200005b0
 8000c30:	200005b8 	.word	0x200005b8

08000c34 <MusicPlayer_TimerISR>:

void MusicPlayer_TimerISR(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	if(_musicPlayerState != PLAYING){
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <MusicPlayer_TimerISR+0xb4>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d14d      	bne.n	8000cde <MusicPlayer_TimerISR+0xaa>
		return;
	}
	_tuneTimer += MUSIC_SEQUENCER_INTERVAL_MILLISECONDS;
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <MusicPlayer_TimerISR+0xb8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	330a      	adds	r3, #10
 8000c48:	4a28      	ldr	r2, [pc, #160]	; (8000cec <MusicPlayer_TimerISR+0xb8>)
 8000c4a:	6013      	str	r3, [r2, #0]



	if(_thisNoteStarted == false){
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MusicPlayer_TimerISR+0xbc>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d119      	bne.n	8000c88 <MusicPlayer_TimerISR+0x54>
		Buzzer_Note(_currentTune[_currentTunePosition++].note);
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MusicPlayer_TimerISR+0xc0>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <MusicPlayer_TimerISR+0xc4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1c59      	adds	r1, r3, #1
 8000c5e:	4826      	ldr	r0, [pc, #152]	; (8000cf8 <MusicPlayer_TimerISR+0xc4>)
 8000c60:	6001      	str	r1, [r0, #0]
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc4b 	bl	8000504 <Buzzer_Note>
		if(_currentTunePosition == _currentTuneNumNotes){
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MusicPlayer_TimerISR+0xc4>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MusicPlayer_TimerISR+0xc8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d102      	bne.n	8000c80 <MusicPlayer_TimerISR+0x4c>
			_currentTunePosition = 0;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MusicPlayer_TimerISR+0xc4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
		}
		_thisNoteStarted = true;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MusicPlayer_TimerISR+0xbc>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e02b      	b.n	8000ce0 <MusicPlayer_TimerISR+0xac>
	}
	else{
		u32 duration = _currentTunePosition == 0 ?
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MusicPlayer_TimerISR+0xc4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
				_currentTune[_currentTuneNumNotes - 1].duration :
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10a      	bne.n	8000ca6 <MusicPlayer_TimerISR+0x72>
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MusicPlayer_TimerISR+0xc0>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MusicPlayer_TimerISR+0xc8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	e009      	b.n	8000cba <MusicPlayer_TimerISR+0x86>
				_currentTune[_currentTunePosition - 1].duration;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MusicPlayer_TimerISR+0xc0>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MusicPlayer_TimerISR+0xc4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	4413      	add	r3, r2
				_currentTune[_currentTuneNumNotes - 1].duration :
 8000cb8:	685b      	ldr	r3, [r3, #4]
		u32 duration = _currentTunePosition == 0 ?
 8000cba:	607b      	str	r3, [r7, #4]
		if(_thisNoteTimer > duration){
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MusicPlayer_TimerISR+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d205      	bcs.n	8000cd2 <MusicPlayer_TimerISR+0x9e>
			_thisNoteStarted = false;
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <MusicPlayer_TimerISR+0xbc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
			_thisNoteTimer = 0;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MusicPlayer_TimerISR+0xcc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		}
		_thisNoteTimer += MUSIC_SEQUENCER_INTERVAL_MILLISECONDS;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MusicPlayer_TimerISR+0xcc>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	330a      	adds	r3, #10
 8000cd8:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <MusicPlayer_TimerISR+0xcc>)
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e000      	b.n	8000ce0 <MusicPlayer_TimerISR+0xac>
		return;
 8000cde:	bf00      	nop
	}

}
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200005ac 	.word	0x200005ac
 8000cec:	200005b0 	.word	0x200005b0
 8000cf0:	200005b8 	.word	0x200005b8
 8000cf4:	200005a0 	.word	0x200005a0
 8000cf8:	200005a8 	.word	0x200005a8
 8000cfc:	200005a4 	.word	0x200005a4
 8000d00:	200005b4 	.word	0x200005b4

08000d04 <MusicPlayer_PauseTune>:
	if(_musicPlayerState == PLAYING){
		_musicPlayerState = STOPPED;
	}
}

void MusicPlayer_PauseTune(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	if(_musicPlayerState == PLAYING){
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <MusicPlayer_PauseTune+0x1c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d105      	bne.n	8000d1c <MusicPlayer_PauseTune+0x18>
		_musicPlayerState = PAUSED;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <MusicPlayer_PauseTune+0x1c>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	701a      	strb	r2, [r3, #0]
		Buzzer_Note(0);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fbf4 	bl	8000504 <Buzzer_Note>
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200005ac 	.word	0x200005ac

08000d24 <MusicPlayer_UnPauseTune>:

void MusicPlayer_UnPauseTune(){
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	if(_musicPlayerState == PAUSED){
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <MusicPlayer_UnPauseTune+0x1c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d102      	bne.n	8000d36 <MusicPlayer_UnPauseTune+0x12>
		_musicPlayerState = PLAYING;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <MusicPlayer_UnPauseTune+0x1c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
	}
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	200005ac 	.word	0x200005ac

08000d44 <MusicPlayer_GetState>:

PlayerState MusicPlayer_GetState(){
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	return _musicPlayerState;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <MusicPlayer_GetState+0x14>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200005ac 	.word	0x200005ac

08000d5c <GetStateAtXY>:
static u8* _TetrisPieces[NUM_TETRIS_PIECES]  = {_ZPieceOccupiedIndicies, _SPieceOccupiedIndicies,_OPieceOccupiedIndicies,_LPieceOccupiedIndicies,_TPieceOccupiedIndicies,_JPieceOccupiedIndicies,_IPieceOccupiedIndices, };




static BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <GetStateAtXY+0x3c>)
 8000d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d74:	461a      	mov	r2, r3
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	fa42 f303 	asr.w	r3, r2, r3
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200005bc 	.word	0x200005bc

08000d9c <SetStateAtXY>:

static void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	460b      	mov	r3, r1
 8000da8:	71bb      	strb	r3, [r7, #6]
 8000daa:	4613      	mov	r3, r2
 8000dac:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000dae:	797b      	ldrb	r3, [r7, #5]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d111      	bne.n	8000dd8 <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	4a15      	ldr	r2, [pc, #84]	; (8000e0c <SetStateAtXY+0x70>)
 8000db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	b291      	uxth	r1, r2
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <SetStateAtXY+0x70>)
 8000dd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 8000dd6:	e012      	b.n	8000dfe <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <SetStateAtXY+0x70>)
 8000ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2101      	movs	r1, #1
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	b291      	uxth	r1, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <SetStateAtXY+0x70>)
 8000dfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200005bc 	.word	0x200005bc

08000e10 <Tetris_DrawCurentPiece>:




static void Tetris_DrawCurentPiece(){
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <Tetris_DrawCurentPiece+0xb8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a2b      	ldr	r2, [pc, #172]	; (8000ec8 <Tetris_DrawCurentPiece+0xb8>)
 8000e1c:	7912      	ldrb	r2, [r2, #4]
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	e045      	b.n	8000eb6 <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	0052      	lsls	r2, r2, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	0052      	lsls	r2, r2, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <Tetris_DrawCurentPiece+0xb8>)
 8000e54:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	0052      	lsls	r2, r2, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	79bb      	ldrb	r3, [r7, #6]
 8000e64:	4413      	add	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <Tetris_DrawCurentPiece+0xb8>)
 8000e6c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	0052      	lsls	r2, r2, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	797b      	ldrb	r3, [r7, #5]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db12      	blt.n	8000eb0 <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <Tetris_DrawCurentPiece+0xbc>)
 8000e8c:	681c      	ldr	r4, [r3, #0]
 8000e8e:	793a      	ldrb	r2, [r7, #4]
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <Tetris_DrawCurentPiece+0xc0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	b2d8      	uxtb	r0, r3
 8000e98:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000e9a:	793a      	ldrb	r2, [r7, #4]
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <Tetris_DrawCurentPiece+0xc0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	3303      	adds	r3, #3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	ddb6      	ble.n	8000e2a <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200005f4 	.word	0x200005f4
 8000ecc:	200005e0 	.word	0x200005e0
 8000ed0:	20000070 	.word	0x20000070

08000ed4 <Tetris_DrawNextPiece>:

static void Tetris_DrawNextPiece(){
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <Tetris_DrawNextPiece+0x94>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <Tetris_DrawNextPiece+0x94>)
 8000ee0:	7912      	ldrb	r2, [r2, #4]
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e033      	b.n	8000f56 <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	0052      	lsls	r2, r2, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	0052      	lsls	r2, r2, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	3321      	adds	r3, #33	; 0x21
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000f1e:	797b      	ldrb	r3, [r7, #5]
 8000f20:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db12      	blt.n	8000f50 <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <Tetris_DrawNextPiece+0x98>)
 8000f2c:	681c      	ldr	r4, [r3, #0]
 8000f2e:	793a      	ldrb	r2, [r7, #4]
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <Tetris_DrawNextPiece+0x9c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	b2d8      	uxtb	r0, r3
 8000f38:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000f3a:	793a      	ldrb	r2, [r7, #4]
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <Tetris_DrawNextPiece+0x9c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4413      	add	r3, r2
 8000f42:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000f44:	3303      	adds	r3, #3
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	ddc8      	ble.n	8000eee <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200005fc 	.word	0x200005fc
 8000f6c:	200005e0 	.word	0x200005e0
 8000f70:	20000070 	.word	0x20000070

08000f74 <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <Tetris_DrawTetrisBoard+0xe0>)
 8000f80:	681c      	ldr	r4, [r3, #0]
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <Tetris_DrawTetrisBoard+0xe4>)
 8000f84:	7818      	ldrb	r0, [r3, #0]
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <Tetris_DrawTetrisBoard+0xe8>)
 8000f88:	7819      	ldrb	r1, [r3, #0]
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <Tetris_DrawTetrisBoard+0xe4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	331e      	adds	r3, #30
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <Tetris_DrawTetrisBoard+0xe8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	332d      	adds	r3, #45	; 0x2d
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e049      	b.n	8001036 <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	e040      	b.n	800102a <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fed2 	bl	8000d5c <GetStateAtXY>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d132      	bne.n	8001024 <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	0052      	lsls	r2, r2, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <Tetris_DrawTetrisBoard+0xe4>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	0052      	lsls	r2, r2, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <Tetris_DrawTetrisBoard+0xe8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	0052      	lsls	r2, r2, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <Tetris_DrawTetrisBoard+0xe4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3303      	adds	r3, #3
 8000ffc:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	0052      	lsls	r2, r2, #1
 8001006:	4413      	add	r3, r2
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <Tetris_DrawTetrisBoard+0xe8>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3303      	adds	r3, #3
 8001014:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <Tetris_DrawTetrisBoard+0xec>)
 8001018:	681c      	ldr	r4, [r3, #0]
 800101a:	7b3b      	ldrb	r3, [r7, #12]
 800101c:	7b7a      	ldrb	r2, [r7, #13]
 800101e:	7bb9      	ldrb	r1, [r7, #14]
 8001020:	7bf8      	ldrb	r0, [r7, #15]
 8001022:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	3301      	adds	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	2b09      	cmp	r3, #9
 800102e:	ddbb      	ble.n	8000fa8 <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b0e      	cmp	r3, #14
 800103a:	ddb2      	ble.n	8000fa2 <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 800103c:	f7ff fee8 	bl	8000e10 <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8001046:	f7ff ff45 	bl	8000ed4 <Tetris_DrawNextPiece>
	}
}
 800104a:	bf00      	nop
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	bf00      	nop
 8001054:	200005dc 	.word	0x200005dc
 8001058:	20000070 	.word	0x20000070
 800105c:	20000604 	.word	0x20000604
 8001060:	200005e4 	.word	0x200005e4

08001064 <InitNewCurrentPiece>:

static void InitNewCurrentPiece(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <InitNewCurrentPiece+0x30>)
 800106a:	2202      	movs	r2, #2
 800106c:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <InitNewCurrentPiece+0x30>)
 8001070:	22fe      	movs	r2, #254	; 0xfe
 8001072:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <InitNewCurrentPiece+0x34>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4798      	blx	r3
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <InitNewCurrentPiece+0x38>)
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	4a03      	ldr	r2, [pc, #12]	; (8001094 <InitNewCurrentPiece+0x30>)
 8001086:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <InitNewCurrentPiece+0x30>)
 800108a:	2200      	movs	r2, #0
 800108c:	711a      	strb	r2, [r3, #4]
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200005f4 	.word	0x200005f4
 8001098:	200005e8 	.word	0x200005e8
 800109c:	20000074 	.word	0x20000074

080010a0 <InitNewNextPiece>:

static void InitNewNextPiece(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <InitNewNextPiece+0x30>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <InitNewNextPiece+0x30>)
 80010ac:	22fe      	movs	r2, #254	; 0xfe
 80010ae:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <InitNewNextPiece+0x34>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4798      	blx	r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <InitNewNextPiece+0x38>)
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <InitNewNextPiece+0x30>)
 80010c2:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <InitNewNextPiece+0x30>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	711a      	strb	r2, [r3, #4]
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200005fc 	.word	0x200005fc
 80010d4:	200005e8 	.word	0x200005e8
 80010d8:	20000074 	.word	0x20000074

080010dc <CopyNextPieceToCurrent>:

static void CopyNextPieceToCurrent(){
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <CopyNextPieceToCurrent+0x1c>)
 80010e2:	4a06      	ldr	r2, [pc, #24]	; (80010fc <CopyNextPieceToCurrent+0x20>)
 80010e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200005f4 	.word	0x200005f4
 80010fc:	200005fc 	.word	0x200005fc

08001100 <Tetris_ResetTetrisBoard>:

void Tetris_ResetTetrisBoard(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 8001104:	221e      	movs	r2, #30
 8001106:	2100      	movs	r1, #0
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <Tetris_ResetTetrisBoard+0x1c>)
 800110a:	f007 faaf 	bl	800866c <memset>
	InitNewCurrentPiece();
 800110e:	f7ff ffa9 	bl	8001064 <InitNewCurrentPiece>
	InitNewNextPiece();
 8001112:	f7ff ffc5 	bl	80010a0 <InitNewNextPiece>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200005bc 	.word	0x200005bc

08001120 <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 800112e:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <Tetris_Init+0x40>)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 8001134:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <Tetris_Init+0x44>)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <Tetris_Init+0x48>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <Tetris_Init+0x4c>)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <Tetris_Init+0x50>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <Tetris_Init+0x54>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	6013      	str	r3, [r2, #0]
	//Tetris_ResetTetrisBoard();
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200005dc 	.word	0x200005dc
 8001164:	200005e4 	.word	0x200005e4
 8001168:	200005e0 	.word	0x200005e0
 800116c:	200005e8 	.word	0x200005e8
 8001170:	200005ec 	.word	0x200005ec
 8001174:	200005f0 	.word	0x200005f0

08001178 <IsBlockAllowedToBeHere>:

static bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8001188:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800118c:	2b00      	cmp	r3, #0
 800118e:	da09      	bge.n	80011a4 <IsBlockAllowedToBeHere+0x2c>
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db05      	blt.n	80011a4 <IsBlockAllowedToBeHere+0x2c>
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b09      	cmp	r3, #9
 800119e:	dc01      	bgt.n	80011a4 <IsBlockAllowedToBeHere+0x2c>
		return true;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e01b      	b.n	80011dc <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	79ba      	ldrb	r2, [r7, #6]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fdd6 	bl	8000d5c <GetStateAtXY>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <IsBlockAllowedToBeHere+0x42>
		return false;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e010      	b.n	80011dc <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b09      	cmp	r3, #9
 80011c0:	dc03      	bgt.n	80011ca <IsBlockAllowedToBeHere+0x52>
 80011c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011c6:	2b0e      	cmp	r3, #14
 80011c8:	dd01      	ble.n	80011ce <IsBlockAllowedToBeHere+0x56>
		return false;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e006      	b.n	80011dc <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da01      	bge.n	80011da <IsBlockAllowedToBeHere+0x62>
		return false;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <WriteCurrentPieceToGameBoardArray>:

static bool WriteCurrentPieceToGameBoardArray(){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <WriteCurrentPieceToGameBoardArray+0x88>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1f      	ldr	r2, [pc, #124]	; (800126c <WriteCurrentPieceToGameBoardArray+0x88>)
 80011f0:	7912      	ldrb	r2, [r2, #4]
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	e02e      	b.n	800125c <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <WriteCurrentPieceToGameBoardArray+0x88>)
 8001218:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	4413      	add	r3, r2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <WriteCurrentPieceToGameBoardArray+0x88>)
 8001228:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	797b      	ldrb	r3, [r7, #5]
 8001230:	4413      	add	r3, r2
 8001232:	b2db      	uxtb	r3, r3
 8001234:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 8001236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800123a:	2b00      	cmp	r3, #0
 800123c:	da01      	bge.n	8001242 <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 800123e:	2301      	movs	r3, #1
 8001240:	e010      	b.n	8001264 <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 8001242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db05      	blt.n	8001256 <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 800124a:	793b      	ldrb	r3, [r7, #4]
 800124c:	78f9      	ldrb	r1, [r7, #3]
 800124e:	2201      	movs	r2, #1
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fda3 	bl	8000d9c <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3301      	adds	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b03      	cmp	r3, #3
 8001260:	ddcd      	ble.n	80011fe <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200005f4 	.word	0x200005f4

08001270 <IsMoveValid>:

static u8 IsMoveValid(){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <IsMoveValid+0x84>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <IsMoveValid+0x84>)
 800127c:	7912      	ldrb	r2, [r2, #4]
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4413      	add	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e02b      	b.n	80012e2 <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <IsMoveValid+0x84>)
 80012a4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <IsMoveValid+0x84>)
 80012b4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	797b      	ldrb	r3, [r7, #5]
 80012bc:	4413      	add	r3, r2
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 80012c2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80012c6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff53 	bl	8001178 <IsBlockAllowedToBeHere>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <IsMoveValid+0x6c>
			return 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	e006      	b.n	80012ea <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	ddd0      	ble.n	800128a <IsMoveValid+0x1a>
		}
	}
	return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200005f4 	.word	0x200005f4

080012f8 <CheckForAndClearLines>:

static u8 CheckForAndClearLines(){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 8001302:	2300      	movs	r3, #0
 8001304:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8001306:	230e      	movs	r3, #14
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	e027      	b.n	800135c <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 800130c:	4a18      	ldr	r2, [pc, #96]	; (8001370 <CheckForAndClearLines+0x78>)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001314:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001318:	4293      	cmp	r3, r2
 800131a:	d105      	bne.n	8001328 <CheckForAndClearLines+0x30>
			linesToClear++;
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	3301      	adds	r3, #1
 8001320:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 8001322:	2301      	movs	r3, #1
 8001324:	71bb      	strb	r3, [r7, #6]
 8001326:	e001      	b.n	800132c <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 8001328:	2300      	movs	r3, #0
 800132a:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d011      	beq.n	8001356 <CheckForAndClearLines+0x5e>
 8001332:	79bb      	ldrb	r3, [r7, #6]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10e      	bne.n	8001356 <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	490c      	ldr	r1, [pc, #48]	; (8001370 <CheckForAndClearLines+0x78>)
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <CheckForAndClearLines+0x78>)
 8001348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <CheckForAndClearLines+0x78>)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2100      	movs	r1, #0
 8001352:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3b01      	subs	r3, #1
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	dad4      	bge.n	800130c <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 8001362:	79fb      	ldrb	r3, [r7, #7]
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	200005bc 	.word	0x200005bc

08001374 <Tetris_Rotate>:

void Tetris_Rotate(){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <Tetris_Rotate+0x48>)
 800137a:	791b      	ldrb	r3, [r3, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <Tetris_Rotate+0x48>)
 8001382:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <Tetris_Rotate+0x48>)
 8001386:	791b      	ldrb	r3, [r3, #4]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d902      	bls.n	8001392 <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <Tetris_Rotate+0x48>)
 800138e:	2200      	movs	r2, #0
 8001390:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 8001392:	f7ff ff6d 	bl	8001270 <IsMoveValid>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10d      	bne.n	80013b8 <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <Tetris_Rotate+0x48>)
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <Tetris_Rotate+0x48>)
 80013a6:	2203      	movs	r2, #3
 80013a8:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 80013aa:	e005      	b.n	80013b8 <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <Tetris_Rotate+0x48>)
 80013ae:	791b      	ldrb	r3, [r3, #4]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b01      	ldr	r3, [pc, #4]	; (80013bc <Tetris_Rotate+0x48>)
 80013b6:	711a      	strb	r2, [r3, #4]
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200005f4 	.word	0x200005f4

080013c0 <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <Tetris_MoveDown+0x80>)
 80013c8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	3301      	adds	r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	b25a      	sxtb	r2, r3
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <Tetris_MoveDown+0x80>)
 80013d6:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 80013d8:	f7ff ff4a 	bl	8001270 <IsMoveValid>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d128      	bne.n	8001434 <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <Tetris_MoveDown+0x80>)
 80013e4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	3b01      	subs	r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	b25a      	sxtb	r2, r3
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <Tetris_MoveDown+0x80>)
 80013f2:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 80013f4:	f7ff fef6 	bl	80011e4 <WriteCurrentPieceToGameBoardArray>
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 80013fc:	f7ff ff7c 	bl	80012f8 <CheckForAndClearLines>
 8001400:	4603      	mov	r3, r0
 8001402:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 8001404:	f7ff fe6a 	bl	80010dc <CopyNextPieceToCurrent>
		InitNewNextPiece();
 8001408:	f7ff fe4a 	bl	80010a0 <InitNewNextPiece>
		if(hasGameOverOccured == true){
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d106      	bne.n	8001420 <Tetris_MoveDown+0x60>
			_onGameOver();
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <Tetris_MoveDown+0x84>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4798      	blx	r3
			Tetris_ResetTetrisBoard();
 8001418:	f7ff fe72 	bl	8001100 <Tetris_ResetTetrisBoard>
			return MoveDownResultGameOver;
 800141c:	2303      	movs	r3, #3
 800141e:	e00a      	b.n	8001436 <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <Tetris_MoveDown+0x88>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	79ba      	ldrb	r2, [r7, #6]
 800142c:	4610      	mov	r0, r2
 800142e:	4798      	blx	r3
		}
		return Settled;
 8001430:	2302      	movs	r3, #2
 8001432:	e000      	b.n	8001436 <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200005f4 	.word	0x200005f4
 8001444:	200005f0 	.word	0x200005f0
 8001448:	200005ec 	.word	0x200005ec

0800144c <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <Tetris_MoveLeft+0x38>)
 8001452:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	3b01      	subs	r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	b25a      	sxtb	r2, r3
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <Tetris_MoveLeft+0x38>)
 8001460:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8001462:	f7ff ff05 	bl	8001270 <IsMoveValid>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d108      	bne.n	800147e <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <Tetris_MoveLeft+0x38>)
 800146e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3301      	adds	r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b25a      	sxtb	r2, r3
 800147a:	4b02      	ldr	r3, [pc, #8]	; (8001484 <Tetris_MoveLeft+0x38>)
 800147c:	715a      	strb	r2, [r3, #5]
	}
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200005f4 	.word	0x200005f4

08001488 <Tetris_MoveRight>:

void Tetris_MoveRight(){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <Tetris_MoveRight+0x38>)
 800148e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	3301      	adds	r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b25a      	sxtb	r2, r3
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <Tetris_MoveRight+0x38>)
 800149c:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 800149e:	f7ff fee7 	bl	8001270 <IsMoveValid>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d108      	bne.n	80014ba <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <Tetris_MoveRight+0x38>)
 80014aa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <Tetris_MoveRight+0x38>)
 80014b8:	715a      	strb	r2, [r3, #5]
	}
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200005f4 	.word	0x200005f4

080014c4 <WriteSingleHighScoreToFrameBuffer>:
static i8 _settingInitial = 0;
static u32 _blinkTimer = 0;
static bool _blinkState = true; /* True if the initial being set is currently drawn to frame buffer, false otherwise */
static bool _isAnalogStickExtended = false; /* Is the analog stick moved far enough in any one direction to count as "extended" */

static void WriteSingleHighScoreToFrameBuffer(const HighScore* highScore, u8 line){
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
	char highScoreLineBuffer[10];
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
		highScore->Initials[0],
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80014d4:	4619      	mov	r1, r3
		highScore->Initials[1],
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	785b      	ldrb	r3, [r3, #1]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80014da:	461c      	mov	r4, r3
		highScore->Initials[2],
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	789b      	ldrb	r3, [r3, #2]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f107 000c 	add.w	r0, r7, #12
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	9200      	str	r2, [sp, #0]
 80014ee:	4623      	mov	r3, r4
 80014f0:	460a      	mov	r2, r1
 80014f2:	4907      	ldr	r1, [pc, #28]	; (8001510 <WriteSingleHighScoreToFrameBuffer+0x4c>)
 80014f4:	f007 f92e 	bl	8008754 <siprintf>
		highScore->Score);
	gfxWriteTextLineToFrameBuffer(line,0,highScoreLineBuffer);
 80014f8:	f107 020c 	add.w	r2, r7, #12
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fa3f 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 8001506:	bf00      	nop
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	08009afc 	.word	0x08009afc

08001514 <DrawHighScoresToFrameBuffer>:

static void DrawHighScoresToFrameBuffer(){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e010      	b.n	8001542 <DrawHighScoresToFrameBuffer+0x2e>
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(i);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fda9 	bl	800207c <TetrisHighScores_GetHighScoreAtIndex>
 800152a:	6038      	str	r0, [r7, #0]
		WriteSingleHighScoreToFrameBuffer(highScore, i+1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3301      	adds	r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4619      	mov	r1, r3
 8001536:	6838      	ldr	r0, [r7, #0]
 8001538:	f7ff ffc4 	bl	80014c4 <WriteSingleHighScoreToFrameBuffer>
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3301      	adds	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d9eb      	bls.n	8001520 <DrawHighScoresToFrameBuffer+0xc>
	}

}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <BlinkInitialBeingSet>:

static void BlinkInitialBeingSet(){
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
	if(_blinkState == true){
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <BlinkInitialBeingSet+0x8c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d11e      	bne.n	80015a0 <BlinkInitialBeingSet+0x4c>
		_blinkState = false;
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <BlinkInitialBeingSet+0x8c>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
		u8 colStart = _settingInitial * LCD_PCD8544_CHAR_WIDTH;
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <BlinkInitialBeingSet+0x90>)
 800156a:	f993 3000 	ldrsb.w	r3, [r3]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	71fb      	strb	r3, [r7, #7]
		u8 row = _newHighScoreRank + 1;
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <BlinkInitialBeingSet+0x94>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	71bb      	strb	r3, [r7, #6]
		gfxClearFrameBufferRow(row,colStart,LCD_PCD8544_CHAR_WIDTH);
 8001582:	79f9      	ldrb	r1, [r7, #7]
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2206      	movs	r2, #6
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fb07 	bl	8000b9c <gfxClearFrameBufferRow>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,colStart + LCD_PCD8544_CHAR_WIDTH);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	3306      	adds	r3, #6
 8001592:	b2db      	uxtb	r3, r3
 8001594:	79b9      	ldrb	r1, [r7, #6]
 8001596:	79b8      	ldrb	r0, [r7, #6]
 8001598:	2200      	movs	r2, #0
 800159a:	f7ff f817 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
 800159e:	e017      	b.n	80015d0 <BlinkInitialBeingSet+0x7c>
	}
	else{
		_blinkState = true;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <BlinkInitialBeingSet+0x8c>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
		u8 row = _newHighScoreRank + 1;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <BlinkInitialBeingSet+0x94>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <BlinkInitialBeingSet+0x94>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fd62 	bl	800207c <TetrisHighScores_GetHighScoreAtIndex>
 80015b8:	60b8      	str	r0, [r7, #8]
		WriteSingleHighScoreToFrameBuffer(highScore, row);
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	4619      	mov	r1, r3
 80015be:	68b8      	ldr	r0, [r7, #8]
 80015c0:	f7ff ff80 	bl	80014c4 <WriteSingleHighScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,LCD_PCD8544_CHAR_WIDTH*3);
 80015c4:	7bf9      	ldrb	r1, [r7, #15]
 80015c6:	7bf8      	ldrb	r0, [r7, #15]
 80015c8:	2312      	movs	r3, #18
 80015ca:	2200      	movs	r2, #0
 80015cc:	f7fe fffe 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	}
	gfxFinishDrawing(&gLcdScreen);
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <BlinkInitialBeingSet+0x98>)
 80015d2:	f7ff f923 	bl	800081c <gfxFinishDrawing>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000090 	.word	0x20000090
 80015e4:	2000060d 	.word	0x2000060d
 80015e8:	2000060c 	.word	0x2000060c
 80015ec:	200008b4 	.word	0x200008b4

080015f0 <TetrisEnterHighScore_Update>:

Tetris_Modes_StateTriggers TetrisEnterHighScore_Update(u32 timePassed){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

	HighScore* highScore;
	switch(EmulateDPad(&hadc2)){
 80015f8:	4858      	ldr	r0, [pc, #352]	; (800175c <TetrisEnterHighScore_Update+0x16c>)
 80015fa:	f7fe fe8d 	bl	8000318 <EmulateDPad>
 80015fe:	4603      	mov	r3, r0
 8001600:	3b01      	subs	r3, #1
 8001602:	2b03      	cmp	r3, #3
 8001604:	f200 808a 	bhi.w	800171c <TetrisEnterHighScore_Update+0x12c>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <TetrisEnterHighScore_Update+0x20>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001621 	.word	0x08001621
 8001614:	0800166d 	.word	0x0800166d
 8001618:	080016b9 	.word	0x080016b9
 800161c:	080016eb 	.word	0x080016eb
	case UP:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 8001620:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <TetrisEnterHighScore_Update+0x170>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fd29 	bl	800207c <TetrisHighScores_GetHighScoreAtIndex>
 800162a:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]++;
 800162c:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 800162e:	f993 3000 	ldrsb.w	r3, [r3]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	5cd2      	ldrb	r2, [r2, r3]
 8001636:	3201      	adds	r2, #1
 8001638:	b2d1      	uxtb	r1, r2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] > 'Z'){
 800163e:	4b49      	ldr	r3, [pc, #292]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 8001640:	f993 3000 	ldrsb.w	r3, [r3]
 8001644:	461a      	mov	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	5c9b      	ldrb	r3, [r3, r2]
 800164a:	2b5a      	cmp	r3, #90	; 0x5a
 800164c:	d906      	bls.n	800165c <TetrisEnterHighScore_Update+0x6c>
			highScore->Initials[_settingInitial] = 'A';
 800164e:	4b45      	ldr	r3, [pc, #276]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 8001650:	f993 3000 	ldrsb.w	r3, [r3]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2141      	movs	r1, #65	; 0x41
 800165a:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 800165c:	4b42      	ldr	r3, [pc, #264]	; (8001768 <TetrisEnterHighScore_Update+0x178>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <TetrisEnterHighScore_Update+0x17c>)
 8001664:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001668:	601a      	str	r2, [r3, #0]
		break;
 800166a:	e057      	b.n	800171c <TetrisEnterHighScore_Update+0x12c>
	case DOWN:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <TetrisEnterHighScore_Update+0x170>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fd03 	bl	800207c <TetrisHighScores_GetHighScoreAtIndex>
 8001676:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]--;
 8001678:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 800167a:	f993 3000 	ldrsb.w	r3, [r3]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	5cd2      	ldrb	r2, [r2, r3]
 8001682:	3a01      	subs	r2, #1
 8001684:	b2d1      	uxtb	r1, r2
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] < 'A'){
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 800168c:	f993 3000 	ldrsb.w	r3, [r3]
 8001690:	461a      	mov	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	5c9b      	ldrb	r3, [r3, r2]
 8001696:	2b40      	cmp	r3, #64	; 0x40
 8001698:	d806      	bhi.n	80016a8 <TetrisEnterHighScore_Update+0xb8>
			highScore->Initials[_settingInitial] = 'Z';
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 800169c:	f993 3000 	ldrsb.w	r3, [r3]
 80016a0:	461a      	mov	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	215a      	movs	r1, #90	; 0x5a
 80016a6:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <TetrisEnterHighScore_Update+0x178>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <TetrisEnterHighScore_Update+0x17c>)
 80016b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016b4:	601a      	str	r2, [r3, #0]
		break;
 80016b6:	e031      	b.n	800171c <TetrisEnterHighScore_Update+0x12c>
	case LEFT:
		_settingInitial--;
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 80016ba:	f993 3000 	ldrsb.w	r3, [r3]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	b25a      	sxtb	r2, r3
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 80016c8:	701a      	strb	r2, [r3, #0]
		if(_settingInitial < 0){
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 80016cc:	f993 3000 	ldrsb.w	r3, [r3]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da02      	bge.n	80016da <TetrisEnterHighScore_Update+0xea>
			_settingInitial = 2;
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <TetrisEnterHighScore_Update+0x178>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <TetrisEnterHighScore_Update+0x17c>)
 80016e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016e6:	601a      	str	r2, [r3, #0]
		break;
 80016e8:	e018      	b.n	800171c <TetrisEnterHighScore_Update+0x12c>
	case RIGHT:
		_settingInitial++;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 80016ec:	f993 3000 	ldrsb.w	r3, [r3]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 80016fa:	701a      	strb	r2, [r3, #0]
		if(_settingInitial >= 3){
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 80016fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001702:	2b02      	cmp	r3, #2
 8001704:	dd02      	ble.n	800170c <TetrisEnterHighScore_Update+0x11c>
			_settingInitial = 0;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <TetrisEnterHighScore_Update+0x174>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <TetrisEnterHighScore_Update+0x178>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <TetrisEnterHighScore_Update+0x17c>)
 8001714:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001718:	601a      	str	r2, [r3, #0]
		break;
 800171a:	bf00      	nop
	}

	_blinkTimer += timePassed;
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <TetrisEnterHighScore_Update+0x17c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	4a11      	ldr	r2, [pc, #68]	; (800176c <TetrisEnterHighScore_Update+0x17c>)
 8001726:	6013      	str	r3, [r2, #0]
	if(_blinkTimer >= ENTER_INITIAL_BLINK_PERIOD){
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <TetrisEnterHighScore_Update+0x17c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001730:	d304      	bcc.n	800173c <TetrisEnterHighScore_Update+0x14c>
		_blinkTimer = 0;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <TetrisEnterHighScore_Update+0x17c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
		BlinkInitialBeingSet();
 8001738:	f7ff ff0c 	bl	8001554 <BlinkInitialBeingSet>
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 800173c:	2101      	movs	r1, #1
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <TetrisEnterHighScore_Update+0x180>)
 8001740:	f003 fd92 	bl	8005268 <HAL_GPIO_ReadPin>
 8001744:	4603      	mov	r3, r0
 8001746:	72fb      	strb	r3, [r7, #11]
	if(buttonBState == GPIO_PIN_SET){
 8001748:	7afb      	ldrb	r3, [r7, #11]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <TetrisEnterHighScore_Update+0x162>
		return HighScoreEntered;
 800174e:	2305      	movs	r3, #5
 8001750:	e000      	b.n	8001754 <TetrisEnterHighScore_Update+0x164>
	}

	return NoChange;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000ad0 	.word	0x20000ad0
 8001760:	2000060c 	.word	0x2000060c
 8001764:	2000060d 	.word	0x2000060d
 8001768:	20000090 	.word	0x20000090
 800176c:	20000610 	.word	0x20000610
 8001770:	48000400 	.word	0x48000400

08001774 <TetrisEnterHighScore_OnEnter>:

void TetrisEnterHighScore_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
	_newHighScore = *((u32*)stateMachineDataPtr);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <TetrisEnterHighScore_OnEnter+0xa4>)
 8001786:	6013      	str	r3, [r2, #0]
	_newHighScoreRank = TetrisHighScores_AddHighScore(_newHighScore);
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <TetrisEnterHighScore_OnEnter+0xa4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fcb7 	bl	8002100 <TetrisHighScores_AddHighScore>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <TetrisEnterHighScore_OnEnter+0xa8>)
 8001798:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 800179a:	f7fe fed1 	bl	8000540 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 800179e:	f7ff f99b 	bl	8000ad8 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 80017a2:	2354      	movs	r3, #84	; 0x54
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7fe ff0f 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 80017ae:	2354      	movs	r3, #84	; 0x54
 80017b0:	2200      	movs	r2, #0
 80017b2:	2101      	movs	r1, #1
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7fe ff09 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 80017ba:	2354      	movs	r3, #84	; 0x54
 80017bc:	2200      	movs	r2, #0
 80017be:	2102      	movs	r1, #2
 80017c0:	2002      	movs	r0, #2
 80017c2:	f7fe ff03 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(3,3,0,84);
 80017c6:	2354      	movs	r3, #84	; 0x54
 80017c8:	2200      	movs	r2, #0
 80017ca:	2103      	movs	r1, #3
 80017cc:	2003      	movs	r0, #3
 80017ce:	f7fe fefd 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(4,4,0,84);
 80017d2:	2354      	movs	r3, #84	; 0x54
 80017d4:	2200      	movs	r2, #0
 80017d6:	2104      	movs	r1, #4
 80017d8:	2004      	movs	r0, #4
 80017da:	f7fe fef7 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(5,5,0,84);
 80017de:	2354      	movs	r3, #84	; 0x54
 80017e0:	2200      	movs	r2, #0
 80017e2:	2105      	movs	r1, #5
 80017e4:	2005      	movs	r0, #5
 80017e6:	f7fe fef1 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	gfxWriteTextLineToFrameBuffer(0,0,"High Score");
 80017ea:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <TetrisEnterHighScore_OnEnter+0xac>)
 80017ec:	2100      	movs	r1, #0
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff f8c8 	bl	8000984 <gfxWriteTextLineToFrameBuffer>
	DrawHighScoresToFrameBuffer();
 80017f4:	f7ff fe8e 	bl	8001514 <DrawHighScoresToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 80017f8:	480a      	ldr	r0, [pc, #40]	; (8001824 <TetrisEnterHighScore_OnEnter+0xb0>)
 80017fa:	f7ff f80f 	bl	800081c <gfxFinishDrawing>
	_settingInitial = 0;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <TetrisEnterHighScore_OnEnter+0xb4>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
	_blinkTimer = 0;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <TetrisEnterHighScore_OnEnter+0xb8>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
	_blinkState = true;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <TetrisEnterHighScore_OnEnter+0xbc>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]

}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000608 	.word	0x20000608
 800181c:	2000060c 	.word	0x2000060c
 8001820:	08009b08 	.word	0x08009b08
 8001824:	200008b4 	.word	0x200008b4
 8001828:	2000060d 	.word	0x2000060d
 800182c:	20000610 	.word	0x20000610
 8001830:	20000090 	.word	0x20000090

08001834 <TetrisEnterHighScore_OnExit>:

void TetrisEnterHighScore_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <TetrisEnterHighScore_OnExit+0x20>)
 8001842:	f7ff f979 	bl	8000b38 <ClearScreen>
	TetrisPersistantData_SaveAllPersistantData();
 8001846:	f001 f82f 	bl	80028a8 <TetrisPersistantData_SaveAllPersistantData>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200008b4 	.word	0x200008b4

08001858 <GetRandomNumberBetweenZeroAndSix>:

static u8 _currentLevel = 5;

static void InitCurrentLevelTetrisScores();

static u8 GetRandomNumberBetweenZeroAndSix(){
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 800185c:	f006 ff3c 	bl	80086d8 <rand>
 8001860:	4603      	mov	r3, r0
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <GetRandomNumberBetweenZeroAndSix+0x28>)
 8001866:	fba3 1302 	umull	r1, r3, r3, r2
 800186a:	1ad1      	subs	r1, r2, r3
 800186c:	0849      	lsrs	r1, r1, #1
 800186e:	440b      	add	r3, r1
 8001870:	0899      	lsrs	r1, r3, #2
 8001872:	460b      	mov	r3, r1
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	1a5b      	subs	r3, r3, r1
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b2db      	uxtb	r3, r3
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}
 8001880:	24924925 	.word	0x24924925

08001884 <DrawStationaryBlock>:


static void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4623      	mov	r3, r4
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	4603      	mov	r3, r0
 8001898:	71bb      	strb	r3, [r7, #6]
 800189a:	460b      	mov	r3, r1
 800189c:	717b      	strb	r3, [r7, #5]
 800189e:	4613      	mov	r3, r2
 80018a0:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 80018a2:	793b      	ldrb	r3, [r7, #4]
 80018a4:	797a      	ldrb	r2, [r7, #5]
 80018a6:	79b9      	ldrb	r1, [r7, #6]
 80018a8:	79f8      	ldrb	r0, [r7, #7]
 80018aa:	f7ff f8e9 	bl	8000a80 <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 80018ae:	793b      	ldrb	r3, [r7, #4]
 80018b0:	797a      	ldrb	r2, [r7, #5]
 80018b2:	79b9      	ldrb	r1, [r7, #6]
 80018b4:	79f8      	ldrb	r0, [r7, #7]
 80018b6:	f7fe ff6c 	bl	8000792 <gfxDrawLine>
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd90      	pop	{r4, r7, pc}
	...

080018c4 <WriteLevelToFrameBuffer>:

static void WriteLevelToFrameBuffer(){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
	u8 levelBuffer[11];
	sprintf(levelBuffer, "Lvl: %lu",_currentLevel);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <WriteLevelToFrameBuffer+0x2c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <WriteLevelToFrameBuffer+0x30>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f006 ff3d 	bl	8008754 <siprintf>
	gfxWriteTextLineToFrameBuffer(2,TETRIS_BOARD_RIGHT_EDGE_COL + 1,levelBuffer);
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	461a      	mov	r2, r3
 80018de:	2126      	movs	r1, #38	; 0x26
 80018e0:	2002      	movs	r0, #2
 80018e2:	f7ff f84f 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000009b 	.word	0x2000009b
 80018f4:	08009b14 	.word	0x08009b14

080018f8 <SetLevel>:

static void SetLevel(u8 level){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
	_currentLevel = level;
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SetLevel+0x34>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	7013      	strb	r3, [r2, #0]
	_newLevelToDisplay = true;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <SetLevel+0x38>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
	_autoMoveInterval = _levelsMoveIntervals[_currentLevel];
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <SetLevel+0x34>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <SetLevel+0x3c>)
 8001916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <SetLevel+0x40>)
 800191c:	6013      	str	r3, [r2, #0]
	InitCurrentLevelTetrisScores();
 800191e:	f000 f963 	bl	8001be8 <InitCurrentLevelTetrisScores>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000009b 	.word	0x2000009b
 8001930:	20000099 	.word	0x20000099
 8001934:	0800a3d4 	.word	0x0800a3d4
 8001938:	20000094 	.word	0x20000094

0800193c <OnLinesCleared>:

static void OnLinesCleared(u8 numLinesCleared){
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <OnLinesCleared+0xa4>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <OnLinesCleared+0xa4>)
 8001954:	801a      	strh	r2, [r3, #0]
	if(_linesCleared >= TETRIS_LINES_PER_LEVEL_UP){
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <OnLinesCleared+0xa4>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	2b09      	cmp	r3, #9
 800195c:	d909      	bls.n	8001972 <OnLinesCleared+0x36>
		_linesCleared = 0;
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <OnLinesCleared+0xa4>)
 8001960:	2200      	movs	r2, #0
 8001962:	801a      	strh	r2, [r3, #0]
		SetLevel(_currentLevel + 1);
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <OnLinesCleared+0xa8>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ffc3 	bl	80018f8 <SetLevel>
	}
	switch(numLinesCleared){
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	3b01      	subs	r3, #1
 8001976:	2b03      	cmp	r3, #3
 8001978:	d82a      	bhi.n	80019d0 <OnLinesCleared+0x94>
 800197a:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <OnLinesCleared+0x44>)
 800197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001980:	08001991 	.word	0x08001991
 8001984:	080019a1 	.word	0x080019a1
 8001988:	080019b1 	.word	0x080019b1
 800198c:	080019c1 	.word	0x080019c1
	case 1:
		_score += _currentLevelTetrisScores[0];
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <OnLinesCleared+0xac>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <OnLinesCleared+0xb0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4413      	add	r3, r2
 800199a:	4a14      	ldr	r2, [pc, #80]	; (80019ec <OnLinesCleared+0xb0>)
 800199c:	6013      	str	r3, [r2, #0]
		break;
 800199e:	e017      	b.n	80019d0 <OnLinesCleared+0x94>
	case 2:
		_score += _currentLevelTetrisScores[1];
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <OnLinesCleared+0xac>)
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <OnLinesCleared+0xb0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <OnLinesCleared+0xb0>)
 80019ac:	6013      	str	r3, [r2, #0]
		break;
 80019ae:	e00f      	b.n	80019d0 <OnLinesCleared+0x94>
	case 3:
		_score += _currentLevelTetrisScores[2];
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <OnLinesCleared+0xac>)
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <OnLinesCleared+0xb0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <OnLinesCleared+0xb0>)
 80019bc:	6013      	str	r3, [r2, #0]
		break;
 80019be:	e007      	b.n	80019d0 <OnLinesCleared+0x94>
	case 4:
		_score += _currentLevelTetrisScores[3];
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <OnLinesCleared+0xac>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <OnLinesCleared+0xb0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <OnLinesCleared+0xb0>)
 80019cc:	6013      	str	r3, [r2, #0]
		break;
 80019ce:	bf00      	nop
	}
	_newScoreToDisplay = true;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <OnLinesCleared+0xb4>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000061a 	.word	0x2000061a
 80019e4:	2000009b 	.word	0x2000009b
 80019e8:	20000624 	.word	0x20000624
 80019ec:	2000061c 	.word	0x2000061c
 80019f0:	20000098 	.word	0x20000098

080019f4 <OnGameOver>:

static void OnGameOver(){
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	// Not used
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <IncrementTetrisTimer>:

static void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <IncrementTetrisTimer+0x44>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <IncrementTetrisTimer+0x44>)
 8001a1a:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <IncrementTetrisTimer+0x44>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <IncrementTetrisTimer+0x48>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d90b      	bls.n	8001a40 <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 8001a2e:	f7ff fcc7 	bl	80013c0 <Tetris_MoveDown>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <IncrementTetrisTimer+0x4c>)
 8001a38:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 8001a3a:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <IncrementTetrisTimer+0x44>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
	}
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000614 	.word	0x20000614
 8001a4c:	20000094 	.word	0x20000094
 8001a50:	2000009a 	.word	0x2000009a

08001a54 <WriteScoreToFrameBuffer>:

static void WriteScoreToFrameBuffer(){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%lu",_score);
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <WriteScoreToFrameBuffer+0x28>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <WriteScoreToFrameBuffer+0x2c>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f006 fe76 	bl	8008754 <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 8001a68:	463b      	mov	r3, r7
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2126      	movs	r1, #38	; 0x26
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f7fe ff88 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000061c 	.word	0x2000061c
 8001a80:	08009b20 	.word	0x08009b20

08001a84 <UpdateTetrisGame>:


static void UpdateTetrisGame(u32 timePassed){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 8001a8c:	f107 0208 	add.w	r2, r7, #8
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	4619      	mov	r1, r3
 8001a96:	4826      	ldr	r0, [pc, #152]	; (8001b30 <UpdateTetrisGame+0xac>)
 8001a98:	f7fe fbf2 	bl	8000280 <ReadAnalogStickChange>

	bool movingDown = true;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	75fb      	strb	r3, [r7, #23]

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4824      	ldr	r0, [pc, #144]	; (8001b34 <UpdateTetrisGame+0xb0>)
 8001aa4:	f003 fbe0 	bl	8005268 <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	75bb      	strb	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	613b      	str	r3, [r7, #16]
	if(analogXChange > (twelveBitMax/3)){
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <UpdateTetrisGame+0xb4>)
 8001ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aba:	17db      	asrs	r3, r3, #31
 8001abc:	1ad2      	subs	r2, r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	da02      	bge.n	8001aca <UpdateTetrisGame+0x46>
		Tetris_MoveRight();
 8001ac4:	f7ff fce0 	bl	8001488 <Tetris_MoveRight>
 8001ac8:	e01c      	b.n	8001b04 <UpdateTetrisGame+0x80>
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <UpdateTetrisGame+0xb4>)
 8001ace:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad2:	17db      	asrs	r3, r3, #31
 8001ad4:	1a9a      	subs	r2, r3, r2
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dd02      	ble.n	8001ae2 <UpdateTetrisGame+0x5e>
		Tetris_MoveLeft();
 8001adc:	f7ff fcb6 	bl	800144c <Tetris_MoveLeft>
 8001ae0:	e010      	b.n	8001b04 <UpdateTetrisGame+0x80>
	}
	else if(analogYChange > (twelveBitMax/3)){
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <UpdateTetrisGame+0xb4>)
 8001ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aea:	17db      	asrs	r3, r3, #31
 8001aec:	1ad2      	subs	r2, r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	da07      	bge.n	8001b04 <UpdateTetrisGame+0x80>
		_movingDownResult = Tetris_MoveDown();
 8001af4:	f7ff fc64 	bl	80013c0 <Tetris_MoveDown>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <UpdateTetrisGame+0xb8>)
 8001afe:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 8001b00:	2300      	movs	r3, #0
 8001b02:	75fb      	strb	r3, [r7, #23]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 8001b04:	7dbb      	ldrb	r3, [r7, #22]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d105      	bne.n	8001b16 <UpdateTetrisGame+0x92>
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <UpdateTetrisGame+0xbc>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <UpdateTetrisGame+0x92>
		Tetris_Rotate();
 8001b12:	f7ff fc2f 	bl	8001374 <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <UpdateTetrisGame+0xbc>)
 8001b18:	7dbb      	ldrb	r3, [r7, #22]
 8001b1a:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff6f 	bl	8001a04 <IncrementTetrisTimer>

}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000ad0 	.word	0x20000ad0
 8001b34:	48000400 	.word	0x48000400
 8001b38:	55555556 	.word	0x55555556
 8001b3c:	2000009a 	.word	0x2000009a
 8001b40:	20000618 	.word	0x20000618

08001b44 <DrawTetrisGame>:

static void DrawTetrisGame(){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	gfxClearFrameBuffer();
 8001b48:	f7fe fcfa 	bl	8000540 <gfxClearFrameBuffer>

	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <DrawTetrisGame+0x94>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d003      	beq.n	8001b5c <DrawTetrisGame+0x18>
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <DrawTetrisGame+0x94>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d101      	bne.n	8001b60 <DrawTetrisGame+0x1c>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <DrawTetrisGame+0x1e>
 8001b60:	2300      	movs	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fa05 	bl	8000f74 <Tetris_DrawTetrisBoard>

	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 8001b6a:	2325      	movs	r3, #37	; 0x25
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	2105      	movs	r1, #5
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7fe fd2b 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <DrawTetrisGame+0x94>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d003      	beq.n	8001b86 <DrawTetrisGame+0x42>
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <DrawTetrisGame+0x94>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d105      	bne.n	8001b92 <DrawTetrisGame+0x4e>
		/* update the area where the next block is shown */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 8001b86:	2335      	movs	r3, #53	; 0x35
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7fe fd1d 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay == true){
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <DrawTetrisGame+0x98>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10a      	bne.n	8001bb0 <DrawTetrisGame+0x6c>
		/* Update the new area of the screen with the new score.
		 * TODO: get actual length of score string instead of using 84 */
		WriteScoreToFrameBuffer();
 8001b9a:	f7ff ff5b 	bl	8001a54 <WriteScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 8001b9e:	2354      	movs	r3, #84	; 0x54
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7fe fd11 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <DrawTetrisGame+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
	}
	if(_newLevelToDisplay){
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <DrawTetrisGame+0x9c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00a      	beq.n	8001bce <DrawTetrisGame+0x8a>
		WriteLevelToFrameBuffer();
 8001bb8:	f7ff fe84 	bl	80018c4 <WriteLevelToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 8001bbc:	2354      	movs	r3, #84	; 0x54
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f7fe fd02 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newLevelToDisplay = false;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <DrawTetrisGame+0x9c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <DrawTetrisGame+0xa0>)
 8001bd0:	f7fe fe24 	bl	800081c <gfxFinishDrawing>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000009a 	.word	0x2000009a
 8001bdc:	20000098 	.word	0x20000098
 8001be0:	20000099 	.word	0x20000099
 8001be4:	200008b4 	.word	0x200008b4

08001be8 <InitCurrentLevelTetrisScores>:

static void InitCurrentLevelTetrisScores(){
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
	/* score setting function derived from information from https://tetris.fandom.com/wiki/Scoring */

	if(_currentLevel == 0){
 8001bec:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <InitCurrentLevelTetrisScores+0x104>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10e      	bne.n	8001c12 <InitCurrentLevelTetrisScores+0x2a>
		_currentLevelTetrisScores[0] = 40;
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001bf6:	2228      	movs	r2, #40	; 0x28
 8001bf8:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100;
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001bfc:	2264      	movs	r2, #100	; 0x64
 8001bfe:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300;
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c06:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200;
 8001c08:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c0a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001c0e:	60da      	str	r2, [r3, #12]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);

	}
}
 8001c10:	e066      	b.n	8001ce0 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 1){
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <InitCurrentLevelTetrisScores+0x104>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10e      	bne.n	8001c38 <InitCurrentLevelTetrisScores+0x50>
		_currentLevelTetrisScores[0] = 80;
 8001c1a:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c1c:	2250      	movs	r2, #80	; 0x50
 8001c1e:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 200;
 8001c20:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c22:	22c8      	movs	r2, #200	; 0xc8
 8001c24:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 600;
 8001c26:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c28:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c2c:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 2400;
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c30:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001c34:	60da      	str	r2, [r3, #12]
}
 8001c36:	e053      	b.n	8001ce0 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel >=2 && _currentLevel < 9){
 8001c38:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <InitCurrentLevelTetrisScores+0x104>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d913      	bls.n	8001c68 <InitCurrentLevelTetrisScores+0x80>
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <InitCurrentLevelTetrisScores+0x104>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d80f      	bhi.n	8001c68 <InitCurrentLevelTetrisScores+0x80>
		_currentLevelTetrisScores[0] = 120;
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c4a:	2278      	movs	r2, #120	; 0x78
 8001c4c:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 300;
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c50:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c54:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 900;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c58:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001c5c:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 3600;
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c60:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001c64:	60da      	str	r2, [r3, #12]
}
 8001c66:	e03b      	b.n	8001ce0 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 9){
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <InitCurrentLevelTetrisScores+0x104>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	d110      	bne.n	8001c92 <InitCurrentLevelTetrisScores+0xaa>
		_currentLevelTetrisScores[0] = 400;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c76:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 1000;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c7e:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 3000;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c82:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c86:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 12000;
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001c8a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001c8e:	60da      	str	r2, [r3, #12]
}
 8001c90:	e026      	b.n	8001ce0 <InitCurrentLevelTetrisScores+0xf8>
		_currentLevelTetrisScores[0] = 40 * (_currentLevel + 1);
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <InitCurrentLevelTetrisScores+0x104>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001ca4:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <InitCurrentLevelTetrisScores+0x104>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	2264      	movs	r2, #100	; 0x64
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001cb6:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <InitCurrentLevelTetrisScores+0x104>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001cca:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <InitCurrentLevelTetrisScores+0x104>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <InitCurrentLevelTetrisScores+0x108>)
 8001cde:	60da      	str	r2, [r3, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	2000009b 	.word	0x2000009b
 8001cf0:	20000624 	.word	0x20000624

08001cf4 <CheckForHighScore>:


Tetris_Modes_StateTriggers CheckForHighScore(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	if(TetrisHighScores_IsNewHighScore(_score) == true){
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <CheckForHighScore+0x24>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f99d 	bl	800203c <TetrisHighScores_IsNewHighScore>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d104      	bne.n	8001d12 <CheckForHighScore+0x1e>
		TetrisMain_SetStateMachineDataPointer(&_score);
 8001d08:	4803      	ldr	r0, [pc, #12]	; (8001d18 <CheckForHighScore+0x24>)
 8001d0a:	f000 fcc7 	bl	800269c <TetrisMain_SetStateMachineDataPointer>
		return GameOverNewHighScore;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e000      	b.n	8001d14 <CheckForHighScore+0x20>
	}
	else{
		return GameOver;
 8001d12:	2302      	movs	r3, #2
	}
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000061c 	.word	0x2000061c

08001d1c <TetrisGame_Update>:


Tetris_Modes_StateTriggers TetrisGame_Update(u32 timePassed){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	UpdateTetrisGame(timePassed);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fead 	bl	8001a84 <UpdateTetrisGame>
	DrawTetrisGame();
 8001d2a:	f7ff ff0b 	bl	8001b44 <DrawTetrisGame>
	if(_movingDownResult == MoveDownResultGameOver){
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <TetrisGame_Update+0x2c>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d103      	bne.n	8001d3e <TetrisGame_Update+0x22>
		return CheckForHighScore();
 8001d36:	f7ff ffdd 	bl	8001cf4 <CheckForHighScore>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	e000      	b.n	8001d40 <TetrisGame_Update+0x24>
	}
	return NoChange;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	2000009a 	.word	0x2000009a

08001d4c <TetrisGame_Init>:



void TetrisGame_Init(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af02      	add	r7, sp, #8
	Tetris_Init(
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <TetrisGame_Init+0x20>)
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <TetrisGame_Init+0x24>)
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <TetrisGame_Init+0x28>)
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <TetrisGame_Init+0x2c>)
 8001d5e:	4907      	ldr	r1, [pc, #28]	; (8001d7c <TetrisGame_Init+0x30>)
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <TetrisGame_Init+0x2c>)
 8001d62:	f7ff f9dd 	bl	8001120 <Tetris_Init>
			&DrawStationaryBlock,
			&gfxDrawAxisAlignedRect,
			&GetRandomNumberBetweenZeroAndSix,
			&OnLinesCleared,
			&OnGameOver);
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	080019f5 	.word	0x080019f5
 8001d70:	0800193d 	.word	0x0800193d
 8001d74:	08001859 	.word	0x08001859
 8001d78:	08000a81 	.word	0x08000a81
 8001d7c:	08001885 	.word	0x08001885

08001d80 <TetrisGame_OnEnter>:

void TetrisGame_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
	if(previousState == LevelSelect || previousState == NoState){
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <TetrisGame_OnEnter+0x18>
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d103      	bne.n	8001da0 <TetrisGame_OnEnter+0x20>
		_startLevel = *((u8*)stateMachineDataPtr);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <TetrisGame_OnEnter+0x54>)
 8001d9e:	701a      	strb	r2, [r3, #0]
	}
	SetLevel(_startLevel);
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <TetrisGame_OnEnter+0x54>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fda7 	bl	80018f8 <SetLevel>
	Tetris_ResetTetrisBoard();
 8001daa:	f7ff f9a9 	bl	8001100 <Tetris_ResetTetrisBoard>
	InitCurrentLevelTetrisScores();
 8001dae:	f7ff ff1b 	bl	8001be8 <InitCurrentLevelTetrisScores>
	_movingDownResult = Settled;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <TetrisGame_OnEnter+0x58>)
 8001db4:	2202      	movs	r2, #2
 8001db6:	701a      	strb	r2, [r3, #0]
	_score = 0;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <TetrisGame_OnEnter+0x5c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
	_newScoreToDisplay = true;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <TetrisGame_OnEnter+0x60>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
	_newLevelToDisplay = true;
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <TetrisGame_OnEnter+0x64>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000620 	.word	0x20000620
 8001dd8:	2000009a 	.word	0x2000009a
 8001ddc:	2000061c 	.word	0x2000061c
 8001de0:	20000098 	.word	0x20000098
 8001de4:	20000099 	.word	0x20000099

08001de8 <TetrisGame_OnExit>:



void TetrisGame_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <TetrisGame_OnExit+0x1c>)
 8001df6:	f7fe fe9f 	bl	8000b38 <ClearScreen>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200008b4 	.word	0x200008b4

08001e08 <SetHighScoreCellSize>:
		{{'c','p','u'}, 2500},
};
static u32 _highScoreCellSize = 0;
static u32 _nextHighScoreSaveAddress = 0;

static void SetHighScoreCellSize(){
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
	u32 size = sizeof(HighScore);
 8001e0e:	2308      	movs	r3, #8
 8001e10:	607b      	str	r3, [r7, #4]
	_highScoreCellSize = size;
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <SetHighScoreCellSize+0x38>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6013      	str	r3, [r2, #0]

	while(_highScoreCellSize % 4 != 0)
 8001e18:	e004      	b.n	8001e24 <SetHighScoreCellSize+0x1c>
		_highScoreCellSize++;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <SetHighScoreCellSize+0x38>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <SetHighScoreCellSize+0x38>)
 8001e22:	6013      	str	r3, [r2, #0]
	while(_highScoreCellSize % 4 != 0)
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <SetHighScoreCellSize+0x38>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f4      	bne.n	8001e1a <SetHighScoreCellSize+0x12>

}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000634 	.word	0x20000634

08001e44 <LoadHighScores>:
static void LoadHighScores(HighScore* output, u32 startAddress){
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e026      	b.n	8001ea2 <LoadHighScores+0x5e>
		HighScore* hs = startAddress + (i * _highScoreCellSize);
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <LoadHighScores+0x74>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	fb03 f202 	mul.w	r2, r3, r2
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
		output[i].Initials[0] = hs->Initials[0];
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	7812      	ldrb	r2, [r2, #0]
 8001e70:	701a      	strb	r2, [r3, #0]
		output[i].Initials[1] = hs->Initials[1];
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	7852      	ldrb	r2, [r2, #1]
 8001e7e:	705a      	strb	r2, [r3, #1]
		output[i].Initials[2] = hs->Initials[2];
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	7892      	ldrb	r2, [r2, #2]
 8001e8c:	709a      	strb	r2, [r3, #2]
		output[i].Score = hs->Score;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	6852      	ldr	r2, [r2, #4]
 8001e9a:	605a      	str	r2, [r3, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d9d5      	bls.n	8001e54 <LoadHighScores+0x10>
	}

}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000634 	.word	0x20000634

08001ebc <SaveSingleHighScore>:

static void SaveSingleHighScore(HighScore* input, u32 address){
 8001ebc:	b5b0      	push	{r4, r5, r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	e016      	b.n	8001efa <SaveSingleHighScore+0x3e>
		u32 wordToWrite = *((u32*)input + i);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address + (i*4), wordToWrite);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	461a      	mov	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	18d1      	adds	r1, r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	461c      	mov	r4, r3
 8001ee8:	4615      	mov	r5, r2
 8001eea:	4622      	mov	r2, r4
 8001eec:	462b      	mov	r3, r5
 8001eee:	2002      	movs	r0, #2
 8001ef0:	f002 fe70 	bl	8004bd4 <HAL_FLASH_Program>
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <SaveSingleHighScore+0x54>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	089a      	lsrs	r2, r3, #2
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d8e2      	bhi.n	8001ecc <SaveSingleHighScore+0x10>
	}
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f10:	20000634 	.word	0x20000634

08001f14 <SaveHighScores>:

static void SaveHighScores(HighScore* input, u32 addressToWrite){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e00f      	b.n	8001f44 <SaveHighScores+0x30>
		SaveSingleHighScore(&input[i], addressToWrite);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ffc4 	bl	8001ebc <SaveSingleHighScore>
		addressToWrite += _highScoreCellSize;
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <SaveHighScores+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	603b      	str	r3, [r7, #0]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3301      	adds	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d9ec      	bls.n	8001f24 <SaveHighScores+0x10>
	}

}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000634 	.word	0x20000634

08001f58 <ErasePagePreservingHighScores>:

static void ErasePagePreservingHighScores(){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
	eraseInit.PageAddress = FINAL_PAGE_START_ADDRESS;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <ErasePagePreservingHighScores+0x34>)
 8001f64:	60bb      	str	r3, [r7, #8]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
 8001f6a:	463a      	mov	r2, r7
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 ff63 	bl	8004e3c <HAL_FLASHEx_Erase>
	SaveHighScores(_highScores,FINAL_PAGE_START_ADDRESS);
 8001f76:	4905      	ldr	r1, [pc, #20]	; (8001f8c <ErasePagePreservingHighScores+0x34>)
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <ErasePagePreservingHighScores+0x38>)
 8001f7a:	f7ff ffcb 	bl	8001f14 <SaveHighScores>
	TetrisHighScores_Load();
 8001f7e:	f000 f833 	bl	8001fe8 <TetrisHighScores_Load>
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	0800f800 	.word	0x0800f800
 8001f90:	2000009c 	.word	0x2000009c

08001f94 <SeekLatestHighScoresStartAddress>:

static u32 SeekLatestHighScoresStartAddress(){
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
	if(_highScoreCellSize == 0){
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <SeekLatestHighScoresStartAddress+0x4c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <SeekLatestHighScoresStartAddress+0x12>
		return 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e016      	b.n	8001fd4 <SeekLatestHighScoresStartAddress+0x40>
	}
	u32 rval = FINAL_PAGE_START_ADDRESS;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <SeekLatestHighScoresStartAddress+0x50>)
 8001fa8:	607b      	str	r3, [r7, #4]
	do{
		rval += (NUM_HIGHSCORES_SAVED * _highScoreCellSize);
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <SeekLatestHighScoresStartAddress+0x4c>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	607b      	str	r3, [r7, #4]

	}
	while(*(((u32*)rval)+ 1) != 0xFFFFFFFF);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d1f1      	bne.n	8001faa <SeekLatestHighScoresStartAddress+0x16>


	return (rval - (NUM_HIGHSCORES_SAVED * _highScoreCellSize));
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <SeekLatestHighScoresStartAddress+0x4c>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	1ad3      	subs	r3, r2, r3

}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	20000634 	.word	0x20000634
 8001fe4:	0800f800 	.word	0x0800f800

08001fe8 <TetrisHighScores_Load>:


u32 TetrisHighScores_Load(){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0

	SetHighScoreCellSize();
 8001fee:	f7ff ff0b 	bl	8001e08 <SetHighScoreCellSize>
	u32 finalPage = FINAL_PAGE_START_ADDRESS;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <TetrisHighScores_Load+0x44>)
 8001ff4:	607b      	str	r3, [r7, #4]
	u32 startAddress = SeekLatestHighScoresStartAddress();
 8001ff6:	f7ff ffcd 	bl	8001f94 <SeekLatestHighScoresStartAddress>
 8001ffa:	6038      	str	r0, [r7, #0]
	_nextHighScoreSaveAddress = startAddress + (NUM_HIGHSCORES_SAVED * _highScoreCellSize);
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <TetrisHighScores_Load+0x48>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	441a      	add	r2, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	4413      	add	r3, r2
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <TetrisHighScores_Load+0x4c>)
 800200c:	6013      	str	r3, [r2, #0]
	LoadHighScores(_highScores, startAddress);
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	4809      	ldr	r0, [pc, #36]	; (8002038 <TetrisHighScores_Load+0x50>)
 8002012:	f7ff ff17 	bl	8001e44 <LoadHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <TetrisHighScores_Load+0x48>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	441a      	add	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4413      	add	r3, r2
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	0800f800 	.word	0x0800f800
 8002030:	20000634 	.word	0x20000634
 8002034:	20000638 	.word	0x20000638
 8002038:	2000009c 	.word	0x2000009c

0800203c <TetrisHighScores_IsNewHighScore>:


bool TetrisHighScores_IsNewHighScore(u32 potentialHighScore){
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e00c      	b.n	8002064 <TetrisHighScores_IsNewHighScore+0x28>
		if(potentialHighScore > _highScores[i].Score){
 800204a:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <TetrisHighScores_IsNewHighScore+0x3c>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	d901      	bls.n	800205e <TetrisHighScores_IsNewHighScore+0x22>
			return true;
 800205a:	2301      	movs	r3, #1
 800205c:	e006      	b.n	800206c <TetrisHighScores_IsNewHighScore+0x30>
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d9ef      	bls.n	800204a <TetrisHighScores_IsNewHighScore+0xe>
		}
	}
	return false;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	2000009c 	.word	0x2000009c

0800207c <TetrisHighScores_GetHighScoreAtIndex>:

HighScore* TetrisHighScores_GetHighScoreAtIndex(u8 atIndex){
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
	return &_highScores[atIndex];
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <TetrisHighScores_GetHighScoreAtIndex+0x20>)
 800208c:	4413      	add	r3, r2
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	2000009c 	.word	0x2000009c

080020a0 <TetrisHighScores_Save>:


u32 TetrisHighScores_Save(u32 startAddress){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	//SetHighScoreCellSize();
	if((_nextHighScoreSaveAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED)) <= FINAL_PAGE_END_ADDRESS){
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <TetrisHighScores_Save+0x50>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <TetrisHighScores_Save+0x54>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <TetrisHighScores_Save+0x58>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d810      	bhi.n	80020e0 <TetrisHighScores_Save+0x40>
		SaveHighScores(_highScores, _nextHighScoreSaveAddress);
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <TetrisHighScores_Save+0x54>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <TetrisHighScores_Save+0x5c>)
 80020c6:	f7ff ff25 	bl	8001f14 <SaveHighScores>
		//LoadHighScores(_highScores, _nextHighScoreSaveAddress);
		_nextHighScoreSaveAddress += (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <TetrisHighScores_Save+0x50>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	441a      	add	r2, r3
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <TetrisHighScores_Save+0x54>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <TetrisHighScores_Save+0x54>)
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e001      	b.n	80020e4 <TetrisHighScores_Save+0x44>

	}
	else{
		ErasePagePreservingHighScores();
 80020e0:	f7ff ff3a 	bl	8001f58 <ErasePagePreservingHighScores>
	}


	//TetrisHighScores_Load();
	return _nextHighScoreSaveAddress;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <TetrisHighScores_Save+0x54>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000634 	.word	0x20000634
 80020f4:	20000638 	.word	0x20000638
 80020f8:	08010000 	.word	0x08010000
 80020fc:	2000009c 	.word	0x2000009c

08002100 <TetrisHighScores_AddHighScore>:

u8 TetrisHighScores_AddHighScore(u32 highScore){
 8002100:	b480      	push	{r7}
 8002102:	b08b      	sub	sp, #44	; 0x2c
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

	u8 rval = 255;
 8002108:	23ff      	movs	r3, #255	; 0xff
 800210a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HighScore cachedHighScore;
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
 8002112:	e046      	b.n	80021a2 <TetrisHighScores_AddHighScore+0xa2>
		HighScore* thisHighScore = &_highScores[i];
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4a27      	ldr	r2, [pc, #156]	; (80021b8 <TetrisHighScores_AddHighScore+0xb8>)
 800211a:	4413      	add	r3, r2
 800211c:	61fb      	str	r3, [r7, #28]

		if(highScore > thisHighScore->Score && rval == 255){
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	d919      	bls.n	800215c <TetrisHighScores_AddHighScore+0x5c>
 8002128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800212c:	2bff      	cmp	r3, #255	; 0xff
 800212e:	d115      	bne.n	800215c <TetrisHighScores_AddHighScore+0x5c>
			cachedHighScore = *thisHighScore;
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	e892 0003 	ldmia.w	r2, {r0, r1}
 800213a:	e883 0003 	stmia.w	r3, {r0, r1}
			rval = i;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			thisHighScore->Score = highScore;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = 'A';
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2241      	movs	r2, #65	; 0x41
 800214e:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = 'A';
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2241      	movs	r2, #65	; 0x41
 8002154:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = 'A';
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2241      	movs	r2, #65	; 0x41
 800215a:	709a      	strb	r2, [r3, #2]

		}
		if(i > rval){
 800215c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	429a      	cmp	r2, r3
 8002164:	d91a      	bls.n	800219c <TetrisHighScores_AddHighScore+0x9c>
			HighScore cachedHighScore2 = *thisHighScore;
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002170:	e883 0003 	stmia.w	r3, {r0, r1}
			thisHighScore->Score = cachedHighScore.Score;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = cachedHighScore.Initials[0];
 800217a:	7d3a      	ldrb	r2, [r7, #20]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = cachedHighScore.Initials[1];
 8002180:	7d7a      	ldrb	r2, [r7, #21]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = cachedHighScore.Initials[2];
 8002186:	7dba      	ldrb	r2, [r7, #22]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	709a      	strb	r2, [r3, #2]
			cachedHighScore = cachedHighScore2;
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	f107 020c 	add.w	r2, r7, #12
 8002194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002198:	e883 0003 	stmia.w	r3, {r0, r1}
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	3301      	adds	r3, #1
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d9b5      	bls.n	8002114 <TetrisHighScores_AddHighScore+0x14>

		}

	}
	return rval;
 80021a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	372c      	adds	r7, #44	; 0x2c
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	2000009c 	.word	0x2000009c

080021bc <GetSelectLevelRowStartString>:

static u8 title[504] = { 255, 255, 3, 3, 243, 243, 3, 3, 255, 255, 3, 3, 243, 243, 3, 3, 255, 255, 3, 3, 255, 255, 3, 3, 243, 243, 255, 255, 3, 3, 243, 243, 51, 51, 51, 51, 51, 51, 255, 255, 12, 12, 12, 140, 252, 252, 12, 204, 236, 108, 108, 104, 224, 192, 0, 128, 192, 192, 192, 224, 240, 248, 152, 0, 0, 128, 192, 224, 224, 224, 224, 224, 230, 79, 15, 134, 192, 224, 224, 224, 224, 224, 224, 224, 255, 255, 192, 192, 255, 255, 192, 192, 207, 207, 192, 192, 255, 255, 192, 192, 255, 255, 192, 192, 255, 255, 192, 192, 207, 207, 255, 255, 192, 192, 255, 255, 192, 192, 207, 207, 192, 192, 255, 255, 0, 48, 120, 127, 31, 3, 0, 31, 63, 51, 51, 51, 51, 17, 0, 56, 61, 127, 103, 97, 97, 97, 64, 0, 31, 63, 31, 1, 112, 248, 252, 222, 14, 0, 112, 243, 231, 207, 206, 206, 206, 254, 124, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
extern unsigned char gFrameBuffer[];


static const char* GetSelectLevelRowStartString(){
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
	if(_blinkState == false || _selectedRow != SelectLevel){
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <GetSelectLevelRowStartString+0x28>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <GetSelectLevelRowStartString+0x14>
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <GetSelectLevelRowStartString+0x2c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <GetSelectLevelRowStartString+0x1a>
		return _selectLevelStartString_WithoutArrow;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <GetSelectLevelRowStartString+0x30>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	e001      	b.n	80021da <GetSelectLevelRowStartString+0x1e>
	}
	else{
		return _selectLevelStartString_WithArrow;
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <GetSelectLevelRowStartString+0x34>)
 80021d8:	681b      	ldr	r3, [r3, #0]
	}
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	200000f0 	.word	0x200000f0
 80021e8:	20000644 	.word	0x20000644
 80021ec:	200000cc 	.word	0x200000cc
 80021f0:	200000c8 	.word	0x200000c8

080021f4 <GetSelectLevelRowEndString>:

static const char* GetSelectLevelRowEndString(){
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	if(_blinkState == false || _selectedRow != SelectLevel){
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <GetSelectLevelRowEndString+0x48>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <GetSelectLevelRowEndString+0x14>
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <GetSelectLevelRowEndString+0x4c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <GetSelectLevelRowEndString+0x2a>
		return _startLevel > 9 ? _selectLevelEndString_TwoDigit_withoutArrow : _selectLevelEndString_OneDigit_withoutArrow;
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <GetSelectLevelRowEndString+0x50>)
 800220a:	f993 3000 	ldrsb.w	r3, [r3]
 800220e:	2b09      	cmp	r3, #9
 8002210:	dd02      	ble.n	8002218 <GetSelectLevelRowEndString+0x24>
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <GetSelectLevelRowEndString+0x54>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e00c      	b.n	8002232 <GetSelectLevelRowEndString+0x3e>
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <GetSelectLevelRowEndString+0x58>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	e009      	b.n	8002232 <GetSelectLevelRowEndString+0x3e>

	}
	else{
		return _startLevel > 9 ? _selectLevelEndString_TwoDigit_withArrow : _selectLevelEndString_OneDigit_withArrow;
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <GetSelectLevelRowEndString+0x50>)
 8002220:	f993 3000 	ldrsb.w	r3, [r3]
 8002224:	2b09      	cmp	r3, #9
 8002226:	dd02      	ble.n	800222e <GetSelectLevelRowEndString+0x3a>
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <GetSelectLevelRowEndString+0x5c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	e001      	b.n	8002232 <GetSelectLevelRowEndString+0x3e>
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <GetSelectLevelRowEndString+0x60>)
 8002230:	681b      	ldr	r3, [r3, #0]

	}
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	200000f0 	.word	0x200000f0
 8002240:	20000644 	.word	0x20000644
 8002244:	200000c4 	.word	0x200000c4
 8002248:	200000dc 	.word	0x200000dc
 800224c:	200000d8 	.word	0x200000d8
 8002250:	200000d4 	.word	0x200000d4
 8002254:	200000d0 	.word	0x200000d0

08002258 <GetMusicOnOffRowStartString>:

static const char* GetMusicOnOffRowStartString(){
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
	if(_blinkState == false || _selectedRow != MusicOnOff){
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <GetMusicOnOffRowStartString+0x28>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <GetMusicOnOffRowStartString+0x14>
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <GetMusicOnOffRowStartString+0x2c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d002      	beq.n	8002272 <GetMusicOnOffRowStartString+0x1a>
		return _musicOnOffStartString_WithoutArrow;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <GetMusicOnOffRowStartString+0x30>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	e001      	b.n	8002276 <GetMusicOnOffRowStartString+0x1e>
	}
	else{
		return _musicOnOffStartString_WithArrow;
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <GetMusicOnOffRowStartString+0x34>)
 8002274:	681b      	ldr	r3, [r3, #0]
	}
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	200000f0 	.word	0x200000f0
 8002284:	20000644 	.word	0x20000644
 8002288:	200000e4 	.word	0x200000e4
 800228c:	200000e0 	.word	0x200000e0

08002290 <GetMusicOnOffEndString>:

static const char* GetMusicOnOffEndString(){
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
	if(_blinkState == false || _selectedRow != MusicOnOff){
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <GetMusicOnOffEndString+0x28>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <GetMusicOnOffEndString+0x14>
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <GetMusicOnOffEndString+0x2c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d002      	beq.n	80022aa <GetMusicOnOffEndString+0x1a>
		return _musicOnOffEndString_withoutArrow;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <GetMusicOnOffEndString+0x30>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	e001      	b.n	80022ae <GetMusicOnOffEndString+0x1e>
	}
	else{
		return _musicOnOffEndString_withArrow;
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <GetMusicOnOffEndString+0x34>)
 80022ac:	681b      	ldr	r3, [r3, #0]
	}
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	200000f0 	.word	0x200000f0
 80022bc:	20000644 	.word	0x20000644
 80022c0:	200000ec 	.word	0x200000ec
 80022c4:	200000e8 	.word	0x200000e8

080022c8 <WriteStartLevelToFrameBuffer>:

static void WriteStartLevelToFrameBuffer(){
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af02      	add	r7, sp, #8
	u8 stringBuffer[15];
	sprintf(stringBuffer,"%sLevel: %lu%s",GetSelectLevelRowStartString(), _startLevel, GetSelectLevelRowEndString());
 80022ce:	f7ff ff75 	bl	80021bc <GetSelectLevelRowStartString>
 80022d2:	4604      	mov	r4, r0
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <WriteStartLevelToFrameBuffer+0x48>)
 80022d6:	f993 3000 	ldrsb.w	r3, [r3]
 80022da:	461d      	mov	r5, r3
 80022dc:	f7ff ff8a 	bl	80021f4 <GetSelectLevelRowEndString>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4638      	mov	r0, r7
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	462b      	mov	r3, r5
 80022e8:	4622      	mov	r2, r4
 80022ea:	490a      	ldr	r1, [pc, #40]	; (8002314 <WriteStartLevelToFrameBuffer+0x4c>)
 80022ec:	f006 fa32 	bl	8008754 <siprintf>

	gfxClearFrameBufferRow(2,0,LCD_PCD8544_CHAR_WIDTH*14);
 80022f0:	2254      	movs	r2, #84	; 0x54
 80022f2:	2100      	movs	r1, #0
 80022f4:	2002      	movs	r0, #2
 80022f6:	f7fe fc51 	bl	8000b9c <gfxClearFrameBufferRow>
	gfxWriteTextLineToFrameBuffer(2,0,stringBuffer);
 80022fa:	463b      	mov	r3, r7
 80022fc:	461a      	mov	r2, r3
 80022fe:	2100      	movs	r1, #0
 8002300:	2002      	movs	r0, #2
 8002302:	f7fe fb3f 	bl	8000984 <gfxWriteTextLineToFrameBuffer>
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bdb0      	pop	{r4, r5, r7, pc}
 800230e:	bf00      	nop
 8002310:	200000c4 	.word	0x200000c4
 8002314:	08009b3c 	.word	0x08009b3c

08002318 <WriteMusicOnOffToFrameBuffer>:

static void WriteMusicOnOffToFrameBuffer(){
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af02      	add	r7, sp, #8
	u8 stringBuffer[15];
	sprintf(stringBuffer,"%sMusic: %s%s",GetMusicOnOffRowStartString(),
 800231e:	f7ff ff9b 	bl	8002258 <GetMusicOnOffRowStartString>
 8002322:	4605      	mov	r5, r0
			_musicState == PLAYING ? "on " : "off",
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <WriteMusicOnOffToFrameBuffer+0x4c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
	sprintf(stringBuffer,"%sMusic: %s%s",GetMusicOnOffRowStartString(),
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <WriteMusicOnOffToFrameBuffer+0x18>
 800232c:	4c0e      	ldr	r4, [pc, #56]	; (8002368 <WriteMusicOnOffToFrameBuffer+0x50>)
 800232e:	e000      	b.n	8002332 <WriteMusicOnOffToFrameBuffer+0x1a>
 8002330:	4c0e      	ldr	r4, [pc, #56]	; (800236c <WriteMusicOnOffToFrameBuffer+0x54>)
 8002332:	f7ff ffad 	bl	8002290 <GetMusicOnOffEndString>
 8002336:	4603      	mov	r3, r0
 8002338:	4638      	mov	r0, r7
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4623      	mov	r3, r4
 800233e:	462a      	mov	r2, r5
 8002340:	490b      	ldr	r1, [pc, #44]	; (8002370 <WriteMusicOnOffToFrameBuffer+0x58>)
 8002342:	f006 fa07 	bl	8008754 <siprintf>
					GetMusicOnOffEndString());

	gfxClearFrameBufferRow(3,0,LCD_PCD8544_CHAR_WIDTH*14);
 8002346:	2254      	movs	r2, #84	; 0x54
 8002348:	2100      	movs	r1, #0
 800234a:	2003      	movs	r0, #3
 800234c:	f7fe fc26 	bl	8000b9c <gfxClearFrameBufferRow>
	gfxWriteTextLineToFrameBuffer(3,0,stringBuffer);
 8002350:	463b      	mov	r3, r7
 8002352:	461a      	mov	r2, r3
 8002354:	2100      	movs	r1, #0
 8002356:	2003      	movs	r0, #3
 8002358:	f7fe fb14 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bdb0      	pop	{r4, r5, r7, pc}
 8002364:	200000c5 	.word	0x200000c5
 8002368:	08009b4c 	.word	0x08009b4c
 800236c:	08009b50 	.word	0x08009b50
 8002370:	08009b54 	.word	0x08009b54

08002374 <ChangeCurrentLevelUpOrDown>:


void ChangeCurrentLevelUpOrDown(i8 incOrDec){
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
	_startLevel += incOrDec;
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <ChangeCurrentLevelUpOrDown+0x5c>)
 8002380:	f993 3000 	ldrsb.w	r3, [r3]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	4413      	add	r3, r2
 800238a:	b2db      	uxtb	r3, r3
 800238c:	b25a      	sxtb	r2, r3
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <ChangeCurrentLevelUpOrDown+0x5c>)
 8002390:	701a      	strb	r2, [r3, #0]
	if(incOrDec < 0){
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	da08      	bge.n	80023ac <ChangeCurrentLevelUpOrDown+0x38>
		if(_startLevel < 0){
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <ChangeCurrentLevelUpOrDown+0x5c>)
 800239c:	f993 3000 	ldrsb.w	r3, [r3]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da0f      	bge.n	80023c4 <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 15;
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <ChangeCurrentLevelUpOrDown+0x5c>)
 80023a6:	220f      	movs	r2, #15
 80023a8:	701a      	strb	r2, [r3, #0]
		}
	}
	else{

	}
}
 80023aa:	e00b      	b.n	80023c4 <ChangeCurrentLevelUpOrDown+0x50>
	else if(incOrDec > 0){
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	dd07      	ble.n	80023c4 <ChangeCurrentLevelUpOrDown+0x50>
		if(_startLevel > 15){
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <ChangeCurrentLevelUpOrDown+0x5c>)
 80023b6:	f993 3000 	ldrsb.w	r3, [r3]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	dd02      	ble.n	80023c4 <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 0;
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <ChangeCurrentLevelUpOrDown+0x5c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	200000c4 	.word	0x200000c4

080023d4 <IncrementBlinkTimer>:

static void IncrementBlinkTimer(u32 TimePassed){
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	_blinkTimer += TimePassed;
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <IncrementBlinkTimer+0x44>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <IncrementBlinkTimer+0x44>)
 80023e6:	6013      	str	r3, [r2, #0]
	if(_blinkTimer >= CHANGE_BLINK_STATE_AFTER_MS){
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <IncrementBlinkTimer+0x44>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023f0:	d30c      	bcc.n	800240c <IncrementBlinkTimer+0x38>
		TOGGLE_BOOL(_blinkState);
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <IncrementBlinkTimer+0x48>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	bf14      	ite	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	2300      	moveq	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <IncrementBlinkTimer+0x48>)
 8002404:	701a      	strb	r2, [r3, #0]
		_blinkTimer = 0;
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <IncrementBlinkTimer+0x44>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
	}
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000640 	.word	0x20000640
 800241c:	200000f0 	.word	0x200000f0

08002420 <TogglePlayerState>:

static void TogglePlayerState(){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	switch(_musicState){
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <TogglePlayerState+0x30>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d002      	beq.n	8002432 <TogglePlayerState+0x12>
 800242c:	2b02      	cmp	r3, #2
 800242e:	d003      	beq.n	8002438 <TogglePlayerState+0x18>
 8002430:	e005      	b.n	800243e <TogglePlayerState+0x1e>
	case PLAYING:
		MusicPlayer_PauseTune();
 8002432:	f7fe fc67 	bl	8000d04 <MusicPlayer_PauseTune>
		break;
 8002436:	e002      	b.n	800243e <TogglePlayerState+0x1e>
	case PAUSED:
		MusicPlayer_UnPauseTune();
 8002438:	f7fe fc74 	bl	8000d24 <MusicPlayer_UnPauseTune>
		break;
 800243c:	bf00      	nop
	}
	_musicState = MusicPlayer_GetState();
 800243e:	f7fe fc81 	bl	8000d44 <MusicPlayer_GetState>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <TogglePlayerState+0x30>)
 8002448:	701a      	strb	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200000c5 	.word	0x200000c5

08002454 <ChangeRowUpOrDown>:

static void ChangeRowUpOrDown(i8 incOrDec){
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	_selectedRow += incOrDec;
 800245e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <ChangeRowUpOrDown+0x44>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <ChangeRowUpOrDown+0x44>)
 800246a:	6013      	str	r3, [r2, #0]
	if(_selectedRow >= NumMenuRows){
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <ChangeRowUpOrDown+0x44>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	dd03      	ble.n	800247c <ChangeRowUpOrDown+0x28>
		_selectedRow = 0;
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <ChangeRowUpOrDown+0x44>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
	}
	else if(_selectedRow < 0){
		_selectedRow = NumMenuRows - 1;
	}
}
 800247a:	e006      	b.n	800248a <ChangeRowUpOrDown+0x36>
	else if(_selectedRow < 0){
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <ChangeRowUpOrDown+0x44>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	da02      	bge.n	800248a <ChangeRowUpOrDown+0x36>
		_selectedRow = NumMenuRows - 1;
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <ChangeRowUpOrDown+0x44>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000644 	.word	0x20000644

0800249c <HandleRowLeft>:

static void HandleRowLeft(){
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
	switch(_selectedRow){
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HandleRowLeft+0x28>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HandleRowLeft+0x12>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d005      	beq.n	80024b8 <HandleRowLeft+0x1c>
		break;
	case MusicOnOff:
		TogglePlayerState();
		break;
	}
}
 80024ac:	e007      	b.n	80024be <HandleRowLeft+0x22>
		ChangeCurrentLevelUpOrDown(-1);
 80024ae:	f04f 30ff 	mov.w	r0, #4294967295
 80024b2:	f7ff ff5f 	bl	8002374 <ChangeCurrentLevelUpOrDown>
		break;
 80024b6:	e002      	b.n	80024be <HandleRowLeft+0x22>
		TogglePlayerState();
 80024b8:	f7ff ffb2 	bl	8002420 <TogglePlayerState>
		break;
 80024bc:	bf00      	nop
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000644 	.word	0x20000644

080024c8 <HandleRowRight>:

static void HandleRowRight(){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	switch(_selectedRow){
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HandleRowRight+0x24>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HandleRowRight+0x12>
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d004      	beq.n	80024e2 <HandleRowRight+0x1a>
		break;
	case MusicOnOff:
		TogglePlayerState();
		break;
	}
}
 80024d8:	e006      	b.n	80024e8 <HandleRowRight+0x20>
		ChangeCurrentLevelUpOrDown(1);
 80024da:	2001      	movs	r0, #1
 80024dc:	f7ff ff4a 	bl	8002374 <ChangeCurrentLevelUpOrDown>
		break;
 80024e0:	e002      	b.n	80024e8 <HandleRowRight+0x20>
		TogglePlayerState();
 80024e2:	f7ff ff9d 	bl	8002420 <TogglePlayerState>
		break;
 80024e6:	bf00      	nop
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000644 	.word	0x20000644

080024f0 <TetrisLevelSelect_Update>:

Tetris_Modes_StateTriggers TetrisLevelSelect_Update(u32 TimePassed){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80024f8:	2101      	movs	r1, #1
 80024fa:	4835      	ldr	r0, [pc, #212]	; (80025d0 <TetrisLevelSelect_Update+0xe0>)
 80024fc:	f002 feb4 	bl	8005268 <HAL_GPIO_ReadPin>
 8002500:	4603      	mov	r3, r0
 8002502:	75fb      	strb	r3, [r7, #23]

	if(_buttonReleasedSinceEnteringState == false){
 8002504:	4b33      	ldr	r3, [pc, #204]	; (80025d4 <TetrisLevelSelect_Update+0xe4>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <TetrisLevelSelect_Update+0x28>
		if(buttonBState == GPIO_PIN_RESET){
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <TetrisLevelSelect_Update+0x28>
			_buttonReleasedSinceEnteringState = true;
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <TetrisLevelSelect_Update+0xe4>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
		}
	}
	IncrementBlinkTimer(TimePassed);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff5b 	bl	80023d4 <IncrementBlinkTimer>
	_randomSeed += TimePassed;
 800251e:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <TetrisLevelSelect_Update+0xe8>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	4a2c      	ldr	r2, [pc, #176]	; (80025d8 <TetrisLevelSelect_Update+0xe8>)
 8002528:	6013      	str	r3, [r2, #0]
	i32 analogYChange, analogXChange;
	ANALOG_STICK_DPAD_RESULT res = EmulateDPadReturningXAndYChange(&hadc2,&analogXChange,&analogYChange);
 800252a:	f107 0210 	add.w	r2, r7, #16
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	4619      	mov	r1, r3
 8002534:	4829      	ldr	r0, [pc, #164]	; (80025dc <TetrisLevelSelect_Update+0xec>)
 8002536:	f7fd ff59 	bl	80003ec <EmulateDPadReturningXAndYChange>
 800253a:	4603      	mov	r3, r0
 800253c:	75bb      	strb	r3, [r7, #22]
	switch(res){
 800253e:	7dbb      	ldrb	r3, [r7, #22]
 8002540:	3b01      	subs	r3, #1
 8002542:	2b03      	cmp	r3, #3
 8002544:	d825      	bhi.n	8002592 <TetrisLevelSelect_Update+0xa2>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <TetrisLevelSelect_Update+0x5c>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	08002581 	.word	0x08002581
 8002550:	08002589 	.word	0x08002589
 8002554:	0800256f 	.word	0x0800256f
 8002558:	0800255d 	.word	0x0800255d
	case RIGHT:
		HandleRowRight();
 800255c:	f7ff ffb4 	bl	80024c8 <HandleRowRight>
		_randomSeed += analogYChange;
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <TetrisLevelSelect_Update+0xe8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <TetrisLevelSelect_Update+0xe8>)
 800256a:	6013      	str	r3, [r2, #0]
		break;
 800256c:	e011      	b.n	8002592 <TetrisLevelSelect_Update+0xa2>
	case LEFT:
		HandleRowLeft();
 800256e:	f7ff ff95 	bl	800249c <HandleRowLeft>
		_randomSeed += analogYChange;
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <TetrisLevelSelect_Update+0xe8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <TetrisLevelSelect_Update+0xe8>)
 800257c:	6013      	str	r3, [r2, #0]
		break;
 800257e:	e008      	b.n	8002592 <TetrisLevelSelect_Update+0xa2>
	case UP:
		ChangeRowUpOrDown(1);
 8002580:	2001      	movs	r0, #1
 8002582:	f7ff ff67 	bl	8002454 <ChangeRowUpOrDown>
		break;
 8002586:	e004      	b.n	8002592 <TetrisLevelSelect_Update+0xa2>
	case DOWN:
		ChangeRowUpOrDown(-1);
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f7ff ff62 	bl	8002454 <ChangeRowUpOrDown>
		break;
 8002590:	bf00      	nop
	}



	WriteStartLevelToFrameBuffer();
 8002592:	f7ff fe99 	bl	80022c8 <WriteStartLevelToFrameBuffer>
	WriteMusicOnOffToFrameBuffer();
 8002596:	f7ff febf 	bl	8002318 <WriteMusicOnOffToFrameBuffer>

	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,3,0,84);
 800259a:	2354      	movs	r3, #84	; 0x54
 800259c:	2200      	movs	r2, #0
 800259e:	2103      	movs	r1, #3
 80025a0:	2002      	movs	r0, #2
 80025a2:	f7fe f813 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	gfxFinishDrawing(&gLcdScreen);
 80025a6:	480e      	ldr	r0, [pc, #56]	; (80025e0 <TetrisLevelSelect_Update+0xf0>)
 80025a8:	f7fe f938 	bl	800081c <gfxFinishDrawing>


	if(buttonBState == GPIO_PIN_SET && (_buttonReleasedSinceEnteringState == true)){
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <TetrisLevelSelect_Update+0xd4>
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <TetrisLevelSelect_Update+0xe4>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d104      	bne.n	80025c4 <TetrisLevelSelect_Update+0xd4>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 80025ba:	480a      	ldr	r0, [pc, #40]	; (80025e4 <TetrisLevelSelect_Update+0xf4>)
 80025bc:	f000 f86e 	bl	800269c <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <TetrisLevelSelect_Update+0xd6>
	}

	return NoChange;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	48000400 	.word	0x48000400
 80025d4:	20000648 	.word	0x20000648
 80025d8:	2000063c 	.word	0x2000063c
 80025dc:	20000ad0 	.word	0x20000ad0
 80025e0:	200008b4 	.word	0x200008b4
 80025e4:	200000c4 	.word	0x200000c4

080025e8 <TetrisLevelSelect_OnEnter>:

void TetrisLevelSelect_Init(){

}

void TetrisLevelSelect_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
	gfxClearFrameBuffer();
 80025f4:	f7fd ffa4 	bl	8000540 <gfxClearFrameBuffer>
	memcpy(gFrameBuffer,title,504);
 80025f8:	4a16      	ldr	r2, [pc, #88]	; (8002654 <TetrisLevelSelect_OnEnter+0x6c>)
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <TetrisLevelSelect_OnEnter+0x70>)
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8002604:	461a      	mov	r2, r3
 8002606:	f006 f823 	bl	8008650 <memcpy>

	ClearUpdateRegions();
 800260a:	f7fe fa65 	bl	8000ad8 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,2,0,84);
 800260e:	2354      	movs	r3, #84	; 0x54
 8002610:	2200      	movs	r2, #0
 8002612:	2102      	movs	r1, #2
 8002614:	2000      	movs	r0, #0
 8002616:	f7fd ffd9 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 800261a:	4810      	ldr	r0, [pc, #64]	; (800265c <TetrisLevelSelect_OnEnter+0x74>)
 800261c:	f7fe f8fe 	bl	800081c <gfxFinishDrawing>
	_musicState = MusicPlayer_GetState();
 8002620:	f7fe fb90 	bl	8000d44 <MusicPlayer_GetState>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <TetrisLevelSelect_OnEnter+0x78>)
 800262a:	701a      	strb	r2, [r3, #0]
	_blinkState = true;
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <TetrisLevelSelect_OnEnter+0x7c>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
	_buttonReleasedSinceEnteringState =
			HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin) == GPIO_PIN_RESET ? true : false;
 8002632:	2101      	movs	r1, #1
 8002634:	480c      	ldr	r0, [pc, #48]	; (8002668 <TetrisLevelSelect_OnEnter+0x80>)
 8002636:	f002 fe17 	bl	8005268 <HAL_GPIO_ReadPin>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
	_buttonReleasedSinceEnteringState =
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <TetrisLevelSelect_OnEnter+0x84>)
 800264a:	701a      	strb	r2, [r3, #0]

}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000394 	.word	0x20000394
 8002658:	200000f4 	.word	0x200000f4
 800265c:	200008b4 	.word	0x200008b4
 8002660:	200000c5 	.word	0x200000c5
 8002664:	200000f0 	.word	0x200000f0
 8002668:	48000400 	.word	0x48000400
 800266c:	20000648 	.word	0x20000648

08002670 <TetrisLevelSelect_OnExit>:

void TetrisLevelSelect_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 800267c:	4805      	ldr	r0, [pc, #20]	; (8002694 <TetrisLevelSelect_OnExit+0x24>)
 800267e:	f7fe fa5b 	bl	8000b38 <ClearScreen>
	srand(_randomSeed);
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <TetrisLevelSelect_OnExit+0x28>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f005 fff8 	bl	800867c <srand>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	200008b4 	.word	0x200008b4
 8002698:	2000063c 	.word	0x2000063c

0800269c <TetrisMain_SetStateMachineDataPointer>:
#define ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS 1


static void* _stateMachineDataPointer = 0;

void TetrisMain_SetStateMachineDataPointer(void* dataPtr){
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	_stateMachineDataPointer = dataPtr;
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <TetrisMain_SetStateMachineDataPointer+0x1c>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	2000064c 	.word	0x2000064c

080026bc <TetrisMain_Init>:

static State _states[NumStates];
static Tetris_Modes_States _currentState = LevelSelect;


void TetrisMain_Init(){
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
	/* Setup the state machines states */
	TetrisPersistantData_LoadAllPeristantData();
 80026c2:	f000 f8e7 	bl	8002894 <TetrisPersistantData_LoadAllPeristantData>
	//TetrisPersistantData_SaveAllPersistantData();
	TetrisGame_Init();
 80026c6:	f7ff fb41 	bl	8001d4c <TetrisGame_Init>
	u8 startLevel = 5;
 80026ca:	2305      	movs	r3, #5
 80026cc:	71fb      	strb	r3, [r7, #7]
	/* Lead-in to the first state */
	//TetrisGame_OnEnter(&startLevel,NoState);
	TetrisLevelSelect_OnEnter(0,NoState);
 80026ce:	2104      	movs	r1, #4
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7ff ff89 	bl	80025e8 <TetrisLevelSelect_OnEnter>

	_states[Playing].NumTransitions = PLAYING_NUM_TRANSITIONS;
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <TetrisMain_Init+0xa0>)
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 2020 	strb.w	r2, [r3, #32]
	_states[Playing].Transitions = _playingTransitions;
 80026de:	4b1f      	ldr	r3, [pc, #124]	; (800275c <TetrisMain_Init+0xa0>)
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <TetrisMain_Init+0xa4>)
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
	_states[Playing].UpdateFunction = &TetrisGame_Update;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <TetrisMain_Init+0xa0>)
 80026e6:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <TetrisMain_Init+0xa8>)
 80026e8:	615a      	str	r2, [r3, #20]
	_states[Playing].OnEnterFunction = &TetrisGame_OnEnter;
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <TetrisMain_Init+0xa0>)
 80026ec:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <TetrisMain_Init+0xac>)
 80026ee:	619a      	str	r2, [r3, #24]
	_states[Playing].OnExitFunction = &TetrisGame_OnExit;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <TetrisMain_Init+0xa0>)
 80026f2:	4a1e      	ldr	r2, [pc, #120]	; (800276c <TetrisMain_Init+0xb0>)
 80026f4:	61da      	str	r2, [r3, #28]

	_states[LevelSelect].NumTransitions = LEVEL_SELECT_NUM_TRANSITIONS;
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <TetrisMain_Init+0xa0>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	731a      	strb	r2, [r3, #12]
	_states[LevelSelect].Transitions = _levelSelectTransitions;
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <TetrisMain_Init+0xa0>)
 80026fe:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <TetrisMain_Init+0xb4>)
 8002700:	611a      	str	r2, [r3, #16]
	_states[LevelSelect].UpdateFunction = &TetrisLevelSelect_Update;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <TetrisMain_Init+0xa0>)
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <TetrisMain_Init+0xb8>)
 8002706:	601a      	str	r2, [r3, #0]
	_states[LevelSelect].OnEnterFunction = &TetrisLevelSelect_OnEnter;
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <TetrisMain_Init+0xa0>)
 800270a:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <TetrisMain_Init+0xbc>)
 800270c:	605a      	str	r2, [r3, #4]
	_states[LevelSelect].OnExitFunction = &TetrisLevelSelect_OnExit;
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <TetrisMain_Init+0xa0>)
 8002710:	4a1a      	ldr	r2, [pc, #104]	; (800277c <TetrisMain_Init+0xc0>)
 8002712:	609a      	str	r2, [r3, #8]

	_states[PlayAgainDialogue].NumTransitions = PLAY_AGAIN_SCREEN_NUM_TRANSITIONS;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <TetrisMain_Init+0xa0>)
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	_states[PlayAgainDialogue].Transitions = _playAgainScreenTransitions;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <TetrisMain_Init+0xa0>)
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <TetrisMain_Init+0xc4>)
 8002720:	639a      	str	r2, [r3, #56]	; 0x38
	_states[PlayAgainDialogue].UpdateFunction = &TetrisPlayAgain_Update;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <TetrisMain_Init+0xa0>)
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <TetrisMain_Init+0xc8>)
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
	_states[PlayAgainDialogue].OnEnterFunction = &TetrisPlayAgain_OnEnter;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <TetrisMain_Init+0xa0>)
 800272a:	4a17      	ldr	r2, [pc, #92]	; (8002788 <TetrisMain_Init+0xcc>)
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c
	_states[PlayAgainDialogue].OnExitFunction = &TetrisPlayAgain_OnExit;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <TetrisMain_Init+0xa0>)
 8002730:	4a16      	ldr	r2, [pc, #88]	; (800278c <TetrisMain_Init+0xd0>)
 8002732:	631a      	str	r2, [r3, #48]	; 0x30

	_states[EnterNewHighScoreScreen].NumTransitions = ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <TetrisMain_Init+0xa0>)
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	_states[EnterNewHighScoreScreen].Transitions = _enterNewHighScoreScreenTransitions;
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <TetrisMain_Init+0xa0>)
 800273e:	4a14      	ldr	r2, [pc, #80]	; (8002790 <TetrisMain_Init+0xd4>)
 8002740:	64da      	str	r2, [r3, #76]	; 0x4c
	_states[EnterNewHighScoreScreen].UpdateFunction = &TetrisEnterHighScore_Update;
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <TetrisMain_Init+0xa0>)
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <TetrisMain_Init+0xd8>)
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c
	_states[EnterNewHighScoreScreen].OnEnterFunction = &TetrisEnterHighScore_OnEnter;
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <TetrisMain_Init+0xa0>)
 800274a:	4a13      	ldr	r2, [pc, #76]	; (8002798 <TetrisMain_Init+0xdc>)
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
	_states[EnterNewHighScoreScreen].OnExitFunction = &TetrisEnterHighScore_OnExit;
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <TetrisMain_Init+0xa0>)
 8002750:	4a12      	ldr	r2, [pc, #72]	; (800279c <TetrisMain_Init+0xe0>)
 8002752:	645a      	str	r2, [r3, #68]	; 0x44


}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000650 	.word	0x20000650
 8002760:	0800a42c 	.word	0x0800a42c
 8002764:	08001d1d 	.word	0x08001d1d
 8002768:	08001d81 	.word	0x08001d81
 800276c:	08001de9 	.word	0x08001de9
 8002770:	0800a428 	.word	0x0800a428
 8002774:	080024f1 	.word	0x080024f1
 8002778:	080025e9 	.word	0x080025e9
 800277c:	08002671 	.word	0x08002671
 8002780:	0800a430 	.word	0x0800a430
 8002784:	080029cd 	.word	0x080029cd
 8002788:	08002a61 	.word	0x08002a61
 800278c:	08002acd 	.word	0x08002acd
 8002790:	0800a434 	.word	0x0800a434
 8002794:	080015f1 	.word	0x080015f1
 8002798:	08001775 	.word	0x08001775
 800279c:	08001835 	.word	0x08001835

080027a0 <TetrisMain_Update>:

void TetrisMain_Update(u32 timePassed){
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	/* Call update on the current state, the return value of update will determine there should be a change to a new state */
	Tetris_Modes_StateTriggers updateResult = _states[_currentState].UpdateFunction(timePassed);
 80027a8:	4b37      	ldr	r3, [pc, #220]	; (8002888 <TetrisMain_Update+0xe8>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4a37      	ldr	r2, [pc, #220]	; (800288c <TetrisMain_Update+0xec>)
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
 80027c0:	4603      	mov	r3, r0
 80027c2:	76fb      	strb	r3, [r7, #27]
	if(updateResult == NoChange){
 80027c4:	7efb      	ldrb	r3, [r7, #27]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d059      	beq.n	800287e <TetrisMain_Update+0xde>
		return;
	}
	/* If we're at this point there should be a change in state */
	u32 numTransitions = _states[_currentState].NumTransitions;
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <TetrisMain_Update+0xe8>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	4a2e      	ldr	r2, [pc, #184]	; (800288c <TetrisMain_Update+0xec>)
 80027d2:	460b      	mov	r3, r1
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	330c      	adds	r3, #12
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	617b      	str	r3, [r7, #20]
	Transition* transitions = _states[_currentState].Transitions;
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <TetrisMain_Update+0xe8>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <TetrisMain_Update+0xec>)
 80027ea:	460b      	mov	r3, r1
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	3310      	adds	r3, #16
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	613b      	str	r3, [r7, #16]
	/* Find the transition for the state change trigger returned by update */
	for(i32 i=0; i<numTransitions; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e039      	b.n	8002874 <TetrisMain_Update+0xd4>
		if(transitions[i].trigger == updateResult){
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	785b      	ldrb	r3, [r3, #1]
 800280a:	7efa      	ldrb	r2, [r7, #27]
 800280c:	429a      	cmp	r2, r3
 800280e:	d12e      	bne.n	800286e <TetrisMain_Update+0xce>
			/* Change state and call enter and exit functions for the transition */
			Tetris_Modes_States last = _currentState;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <TetrisMain_Update+0xe8>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	73fb      	strb	r3, [r7, #15]
			_states[_currentState].OnExitFunction(_stateMachineDataPointer, transitions[i].destination);
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <TetrisMain_Update+0xe8>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4a1b      	ldr	r2, [pc, #108]	; (800288c <TetrisMain_Update+0xec>)
 800281e:	460b      	mov	r3, r1
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	3308      	adds	r3, #8
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a18      	ldr	r2, [pc, #96]	; (8002890 <TetrisMain_Update+0xf0>)
 800282e:	6810      	ldr	r0, [r2, #0]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	0052      	lsls	r2, r2, #1
 8002834:	6939      	ldr	r1, [r7, #16]
 8002836:	440a      	add	r2, r1
 8002838:	7812      	ldrb	r2, [r2, #0]
 800283a:	4611      	mov	r1, r2
 800283c:	4798      	blx	r3
			_currentState = transitions[i].destination;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	781a      	ldrb	r2, [r3, #0]
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <TetrisMain_Update+0xe8>)
 800284a:	701a      	strb	r2, [r3, #0]
			_states[_currentState].OnEnterFunction(_stateMachineDataPointer, last);
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <TetrisMain_Update+0xe8>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <TetrisMain_Update+0xec>)
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	3304      	adds	r3, #4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <TetrisMain_Update+0xf0>)
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	7bf9      	ldrb	r1, [r7, #15]
 8002868:	4610      	mov	r0, r2
 800286a:	4798      	blx	r3
			return;
 800286c:	e008      	b.n	8002880 <TetrisMain_Update+0xe0>
	for(i32 i=0; i<numTransitions; i++){
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3301      	adds	r3, #1
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d8c1      	bhi.n	8002800 <TetrisMain_Update+0x60>
 800287c:	e000      	b.n	8002880 <TetrisMain_Update+0xe0>
		return;
 800287e:	bf00      	nop
		}
	}
}
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200006b4 	.word	0x200006b4
 800288c:	20000650 	.word	0x20000650
 8002890:	2000064c 	.word	0x2000064c

08002894 <TetrisPersistantData_LoadAllPeristantData>:
#include "TetrisPersistantData.h"
#include "TetrisHighScores.h"
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

void TetrisPersistantData_LoadAllPeristantData(){
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
	u32 nextAddress = TetrisHighScores_Load();
 800289a:	f7ff fba5 	bl	8001fe8 <TetrisHighScores_Load>
 800289e:	6078      	str	r0, [r7, #4]

}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <TetrisPersistantData_SaveAllPersistantData>:
void TetrisPersistantData_SaveAllPersistantData(){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80028ae:	f002 fa01 	bl	8004cb4 <HAL_FLASH_Unlock>

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
	*/

	u32 nextAddress = TetrisHighScores_Save(FINAL_PAGE_START_ADDRESS);
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <TetrisPersistantData_SaveAllPersistantData+0x20>)
 80028b4:	f7ff fbf4 	bl	80020a0 <TetrisHighScores_Save>
 80028b8:	6078      	str	r0, [r7, #4]

	HAL_FLASH_Lock();
 80028ba:	f002 fa21 	bl	8004d00 <HAL_FLASH_Lock>

}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	0800f800 	.word	0x0800f800

080028cc <GetPlayAgainChoiceStartString>:
static const char* EndString_WithArrows   = "     >";

static const char* StartString_WithoutArrows = "     ";
static const char* EndString_WithoutArrows   = "      ";

static const char* GetPlayAgainChoiceStartString(){
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
	return _blinkState == true ? StartString_WithArrows : StartString_WithoutArrows;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <GetPlayAgainChoiceStartString+0x20>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <GetPlayAgainChoiceStartString+0x12>
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <GetPlayAgainChoiceStartString+0x24>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e001      	b.n	80028e2 <GetPlayAgainChoiceStartString+0x16>
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <GetPlayAgainChoiceStartString+0x28>)
 80028e0:	681b      	ldr	r3, [r3, #0]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	200002ed 	.word	0x200002ed
 80028f0:	200002f0 	.word	0x200002f0
 80028f4:	200002f8 	.word	0x200002f8

080028f8 <GetPlayAgainChoiceEndString>:

static const char* GetPlayAgainChoiceEndString(){
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
	return _blinkState == true ? EndString_WithArrows : EndString_WithoutArrows;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <GetPlayAgainChoiceEndString+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d102      	bne.n	800290a <GetPlayAgainChoiceEndString+0x12>
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <GetPlayAgainChoiceEndString+0x24>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	e001      	b.n	800290e <GetPlayAgainChoiceEndString+0x16>
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <GetPlayAgainChoiceEndString+0x28>)
 800290c:	681b      	ldr	r3, [r3, #0]
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	200002ed 	.word	0x200002ed
 800291c:	200002f4 	.word	0x200002f4
 8002920:	200002fc 	.word	0x200002fc

08002924 <IncrementBlinkTimer>:

static void IncrementBlinkTimer(u32 TimePassed){
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	_blinkTimer += TimePassed;
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <IncrementBlinkTimer+0x44>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <IncrementBlinkTimer+0x44>)
 8002936:	6013      	str	r3, [r2, #0]
	if(_blinkTimer >= CHANGE_BLINK_STATE_AFTER_MS){
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <IncrementBlinkTimer+0x44>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002940:	d30c      	bcc.n	800295c <IncrementBlinkTimer+0x38>
		TOGGLE_BOOL(_blinkState);
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <IncrementBlinkTimer+0x48>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b01      	cmp	r3, #1
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <IncrementBlinkTimer+0x48>)
 8002954:	701a      	strb	r2, [r3, #0]
		_blinkTimer = 0;
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <IncrementBlinkTimer+0x44>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
	}
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	200006b8 	.word	0x200006b8
 800296c:	200002ed 	.word	0x200002ed

08002970 <WritePlayAgainChoicetoFrameBuffer>:

static void WritePlayAgainChoicetoFrameBuffer(){
 8002970:	b5b0      	push	{r4, r5, r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af02      	add	r7, sp, #8
	u8 stringBuffer[15];

	sprintf(stringBuffer,"%s%s%s",
 8002976:	f7ff ffa9 	bl	80028cc <GetPlayAgainChoiceStartString>
 800297a:	4605      	mov	r5, r0
			GetPlayAgainChoiceStartString(),
			_playAgain == true ? "yes" : "no ",
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <WritePlayAgainChoicetoFrameBuffer+0x4c>)
 800297e:	781b      	ldrb	r3, [r3, #0]
	sprintf(stringBuffer,"%s%s%s",
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <WritePlayAgainChoicetoFrameBuffer+0x18>
 8002984:	4c0e      	ldr	r4, [pc, #56]	; (80029c0 <WritePlayAgainChoicetoFrameBuffer+0x50>)
 8002986:	e000      	b.n	800298a <WritePlayAgainChoicetoFrameBuffer+0x1a>
 8002988:	4c0e      	ldr	r4, [pc, #56]	; (80029c4 <WritePlayAgainChoicetoFrameBuffer+0x54>)
 800298a:	f7ff ffb5 	bl	80028f8 <GetPlayAgainChoiceEndString>
 800298e:	4603      	mov	r3, r0
 8002990:	4638      	mov	r0, r7
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4623      	mov	r3, r4
 8002996:	462a      	mov	r2, r5
 8002998:	490b      	ldr	r1, [pc, #44]	; (80029c8 <WritePlayAgainChoicetoFrameBuffer+0x58>)
 800299a:	f005 fedb 	bl	8008754 <siprintf>
			GetPlayAgainChoiceEndString());

	gfxClearFrameBufferRow(1,0,LCD_PCD8544_CHAR_WIDTH*14);
 800299e:	2254      	movs	r2, #84	; 0x54
 80029a0:	2100      	movs	r1, #0
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7fe f8fa 	bl	8000b9c <gfxClearFrameBufferRow>
	gfxWriteTextLineToFrameBuffer(1,0,stringBuffer);
 80029a8:	463b      	mov	r3, r7
 80029aa:	461a      	mov	r2, r3
 80029ac:	2100      	movs	r1, #0
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7fd ffe8 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdb0      	pop	{r4, r5, r7, pc}
 80029bc:	200002ec 	.word	0x200002ec
 80029c0:	08009b84 	.word	0x08009b84
 80029c4:	08009b88 	.word	0x08009b88
 80029c8:	08009b8c 	.word	0x08009b8c

080029cc <TetrisPlayAgain_Update>:

Tetris_Modes_StateTriggers TetrisPlayAgain_Update(u32 timePassed){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

	/* Will have option to go back to main menu.  67 */
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80029d4:	2101      	movs	r1, #1
 80029d6:	481e      	ldr	r0, [pc, #120]	; (8002a50 <TetrisPlayAgain_Update+0x84>)
 80029d8:	f002 fc46 	bl	8005268 <HAL_GPIO_ReadPin>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]

	IncrementBlinkTimer(timePassed);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff9f 	bl	8002924 <IncrementBlinkTimer>

	i32 analogYChange, analogXChange;

	ANALOG_STICK_DPAD_RESULT res = EmulateDPadReturningXAndYChange(&hadc2,&analogXChange,&analogYChange);
 80029e6:	f107 0210 	add.w	r2, r7, #16
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	4619      	mov	r1, r3
 80029f0:	4818      	ldr	r0, [pc, #96]	; (8002a54 <TetrisPlayAgain_Update+0x88>)
 80029f2:	f7fd fcfb 	bl	80003ec <EmulateDPadReturningXAndYChange>
 80029f6:	4603      	mov	r3, r0
 80029f8:	75bb      	strb	r3, [r7, #22]
	switch(res){
 80029fa:	7dbb      	ldrb	r3, [r7, #22]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d80a      	bhi.n	8002a18 <TetrisPlayAgain_Update+0x4c>
	case RIGHT:
	case LEFT:
		TOGGLE_BOOL(_playAgain);
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <TetrisPlayAgain_Update+0x8c>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <TetrisPlayAgain_Update+0x8c>)
 8002a14:	701a      	strb	r2, [r3, #0]
		break;
 8002a16:	bf00      	nop
	}

	WritePlayAgainChoicetoFrameBuffer();
 8002a18:	f7ff ffaa 	bl	8002970 <WritePlayAgainChoicetoFrameBuffer>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 8002a1c:	2354      	movs	r3, #84	; 0x54
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2101      	movs	r1, #1
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7fd fdd2 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 8002a28:	480c      	ldr	r0, [pc, #48]	; (8002a5c <TetrisPlayAgain_Update+0x90>)
 8002a2a:	f7fd fef7 	bl	800081c <gfxFinishDrawing>


	if(buttonBState == GPIO_PIN_SET){
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <TetrisPlayAgain_Update+0x78>
		//TetrisMain_SetStateMachineDataPointer(&_startLevel);
		return _playAgain == true  ? StartPlaying : GoToLevelSelectScreen;
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <TetrisPlayAgain_Update+0x8c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <TetrisPlayAgain_Update+0x74>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e002      	b.n	8002a46 <TetrisPlayAgain_Update+0x7a>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e000      	b.n	8002a46 <TetrisPlayAgain_Update+0x7a>
	}

	return NoChange;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	48000400 	.word	0x48000400
 8002a54:	20000ad0 	.word	0x20000ad0
 8002a58:	200002ec 	.word	0x200002ec
 8002a5c:	200008b4 	.word	0x200008b4

08002a60 <TetrisPlayAgain_OnEnter>:

void TetrisPlayAgain_Init(){

}

void TetrisPlayAgain_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]
	_startLevel = *((u8*)stateMachineDataPtr);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	781a      	ldrb	r2, [r3, #0]
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <TetrisPlayAgain_OnEnter+0x54>)
 8002a72:	701a      	strb	r2, [r3, #0]
	_playAgain = true;
 8002a74:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <TetrisPlayAgain_OnEnter+0x58>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
	_blinkTimer = 0;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <TetrisPlayAgain_OnEnter+0x5c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
	_blinkState = true;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <TetrisPlayAgain_OnEnter+0x60>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]

	gfxClearFrameBuffer();
 8002a86:	f7fd fd5b 	bl	8000540 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 8002a8a:	f7fe f825 	bl	8000ad8 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8002a8e:	2354      	movs	r3, #84	; 0x54
 8002a90:	2200      	movs	r2, #0
 8002a92:	2100      	movs	r1, #0
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7fd fd99 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxWriteTextLineToFrameBuffer(0,0,"Play Again?");
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <TetrisPlayAgain_OnEnter+0x64>)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fd ff70 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

	gfxFinishDrawing(&gLcdScreen);
 8002aa4:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <TetrisPlayAgain_OnEnter+0x68>)
 8002aa6:	f7fd feb9 	bl	800081c <gfxFinishDrawing>

}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200006b5 	.word	0x200006b5
 8002ab8:	200002ec 	.word	0x200002ec
 8002abc:	200006b8 	.word	0x200006b8
 8002ac0:	200002ed 	.word	0x200002ed
 8002ac4:	08009b94 	.word	0x08009b94
 8002ac8:	200008b4 	.word	0x200008b4

08002acc <TetrisPlayAgain_OnExit>:

void TetrisPlayAgain_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8002ad8:	4803      	ldr	r0, [pc, #12]	; (8002ae8 <TetrisPlayAgain_OnExit+0x1c>)
 8002ada:	f7fe f82d 	bl	8000b38 <ClearScreen>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200008b4 	.word	0x200008b4

08002aec <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 8002af4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002af8:	2100      	movs	r1, #0
 8002afa:	481e      	ldr	r0, [pc, #120]	; (8002b74 <LCD_PCD8544_init+0x88>)
 8002afc:	f005 fdb6 	bl	800866c <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f976 	bl	8002dfa <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f98e 	bl	8002e30 <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f9ab 	bl	8002e70 <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	7bb9      	ldrb	r1, [r7, #14]
 8002b1e:	2301      	movs	r3, #1
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f8ae 	bl	8002c82 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 8002b26:	2103      	movs	r1, #3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f939 	bl	8002da0 <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 8002b2e:	2140      	movs	r1, #64	; 0x40
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f94e 	bl	8002dd2 <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 8002b36:	2102      	movs	r1, #2
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f918 	bl	8002d6e <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	7bb9      	ldrb	r1, [r7, #14]
 8002b42:	2300      	movs	r3, #0
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f89c 	bl	8002c82 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8c7 	bl	8002ce2 <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2100      	movs	r1, #0
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f8e5 	bl	8002d28 <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f996 	bl	8002e90 <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f845 	bl	8002bf4 <LCD_PCD8544_clear_ram>
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200006bc 	.word	0x200006bc

08002b78 <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	72fb      	strb	r3, [r7, #11]
 8002b86:	4613      	mov	r3, r2
 8002b88:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f94c 	bl	8002e30 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f969 	bl	8002e70 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002b9e:	7dfa      	ldrb	r2, [r7, #23]
 8002ba0:	7db9      	ldrb	r1, [r7, #22]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f86c 	bl	8002c82 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 8002baa:	7abb      	ldrb	r3, [r7, #10]
 8002bac:	461a      	mov	r2, r3
 8002bae:	0052      	lsls	r2, r2, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	7afb      	ldrb	r3, [r7, #11]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f8b4 	bl	8002d28 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f965 	bl	8002e90 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f942 	bl	8002e50 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f94f 	bl	8002e70 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8002bd2:	8c3b      	ldrh	r3, [r7, #32]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f81f 	bl	8002c1c <LCD_PCD8544_LL_send_data>
 8002bde:	4603      	mov	r3, r0
 8002be0:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f954 	bl	8002e90 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8002be8:	7d7b      	ldrb	r3, [r7, #21]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 8002bfc:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <LCD_PCD8544_clear_ram+0x24>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	2100      	movs	r1, #0
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffb5 	bl	8002b78 <LCD_PCD8544_write_bytes>
 8002c0e:	4603      	mov	r3, r0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200006bc 	.word	0x200006bc

08002c1c <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	2302      	movs	r3, #2
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	f003 ff35 	bl	8006aa2 <HAL_SPI_Transmit>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	69d8      	ldr	r0, [r3, #28]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8c1b      	ldrh	r3, [r3, #32]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f002 fb23 	bl	8005298 <HAL_GPIO_WritePin>
	}
	return stat;
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8002c6c:	89fa      	ldrh	r2, [r7, #14]
 8002c6e:	1cfb      	adds	r3, r7, #3
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff ffd2 	bl	8002c1c <LCD_PCD8544_LL_send_data>
 8002c78:	4603      	mov	r3, r0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	4608      	mov	r0, r1
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4603      	mov	r3, r0
 8002c92:	70fb      	strb	r3, [r7, #3]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70bb      	strb	r3, [r7, #2]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	f043 0320 	orr.w	r3, r3, #32
 8002cac:	b25a      	sxtb	r2, r3
 8002cae:	78bb      	ldrb	r3, [r7, #2]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	b25b      	sxtb	r3, r3
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	b25a      	sxtb	r2, r3
 8002cbe:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b25b      	sxtb	r3, r3
 8002ccc:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffc2 	bl	8002c5c <LCD_PCD8544_LL_send_byte>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	70fb      	strb	r3, [r7, #3]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	b25b      	sxtb	r3, r3
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	f043 0308 	orr.w	r3, r3, #8
 8002d02:	b25a      	sxtb	r2, r3
 8002d04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff9f 	bl	8002c5c <LCD_PCD8544_LL_send_byte>
 8002d1e:	4603      	mov	r3, r0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
 8002d34:	4613      	mov	r3, r2
 8002d36:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 8002d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 8002d4c:	78bb      	ldrb	r3, [r7, #2]
 8002d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ff5c 	bl	8002c1c <LCD_PCD8544_LL_send_data>
 8002d64:	4603      	mov	r3, r0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 8002d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	b25b      	sxtb	r3, r3
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff63 	bl	8002c5c <LCD_PCD8544_LL_send_byte>
 8002d96:	4603      	mov	r3, r0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 8002dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	f043 0310 	orr.w	r3, r3, #16
 8002dba:	b25b      	sxtb	r3, r3
 8002dbc:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff4a 	bl	8002c5c <LCD_PCD8544_LL_send_byte>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002de4:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	4619      	mov	r1, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ff36 	bl	8002c5c <LCD_PCD8544_LL_send_byte>
 8002df0:	4603      	mov	r3, r0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6858      	ldr	r0, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	891b      	ldrh	r3, [r3, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f002 fa43 	bl	8005298 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 8002e12:	2001      	movs	r0, #1
 8002e14:	f000 fe88 	bl	8003b28 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6858      	ldr	r0, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	891b      	ldrh	r3, [r3, #8]
 8002e20:	2201      	movs	r2, #1
 8002e22:	4619      	mov	r1, r3
 8002e24:	f002 fa38 	bl	8005298 <HAL_GPIO_WritePin>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6958      	ldr	r0, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8b1b      	ldrh	r3, [r3, #24]
 8002e40:	2200      	movs	r2, #0
 8002e42:	4619      	mov	r1, r3
 8002e44:	f002 fa28 	bl	8005298 <HAL_GPIO_WritePin>
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6958      	ldr	r0, [r3, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8b1b      	ldrh	r3, [r3, #24]
 8002e60:	2201      	movs	r2, #1
 8002e62:	4619      	mov	r1, r3
 8002e64:	f002 fa18 	bl	8005298 <HAL_GPIO_WritePin>
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68d8      	ldr	r0, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8a1b      	ldrh	r3, [r3, #16]
 8002e80:	2200      	movs	r2, #0
 8002e82:	4619      	mov	r1, r3
 8002e84:	f002 fa08 	bl	8005298 <HAL_GPIO_WritePin>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68d8      	ldr	r0, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8a1b      	ldrh	r3, [r3, #16]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f002 f9f8 	bl	8005298 <HAL_GPIO_WritePin>
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b0ee      	sub	sp, #440	; 0x1b8
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eb6:	f000 fdd1 	bl	8003a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eba:	f000 f857 	bl	8002f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ebe:	f000 faaf 	bl	8003420 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ec2:	f000 f91d 	bl	8003100 <MX_SPI1_Init>
  MX_ADC2_Init();
 8002ec6:	f000 f8ad 	bl	8003024 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002eca:	f000 fa05 	bl	80032d8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002ece:	f000 f955 	bl	800317c <MX_TIM1_Init>
  MX_TIM3_Init();
 8002ed2:	f000 fa57 	bl	8003384 <MX_TIM3_Init>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  // Calibrate The ADC On Power-Up For Better Accuracy
  //HAL_ADCEx_Calibration_Start(&hadc2);
  //HAL_TIM_Base_Start(&htim1);

  Buzzer_Init(&htim1);
 8002ed6:	481f      	ldr	r0, [pc, #124]	; (8002f54 <main+0xa4>)
 8002ed8:	f7fd fafa 	bl	80004d0 <Buzzer_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8002edc:	481e      	ldr	r0, [pc, #120]	; (8002f58 <main+0xa8>)
 8002ede:	f004 f90b 	bl	80070f8 <HAL_TIM_Base_Start_IT>


  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <main+0xac>)
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <main+0xb0>)
 8002ee6:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <main+0xac>)
 8002eea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002eee:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <main+0xac>)
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <main+0xac>)
 8002ef8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002efc:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 8002efe:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <main+0xac>)
 8002f00:	2202      	movs	r2, #2
 8002f02:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <main+0xac>)
 8002f06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002f0a:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <main+0xac>)
 8002f0e:	2210      	movs	r2, #16
 8002f10:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 8002f12:	4812      	ldr	r0, [pc, #72]	; (8002f5c <main+0xac>)
 8002f14:	f7ff fdea 	bl	8002aec <LCD_PCD8544_init>

    // LCD - welcome screen
  //static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4812      	ldr	r0, [pc, #72]	; (8002f64 <main+0xb4>)
 8002f1c:	f001 f94b 	bl	80041b6 <HAL_ADCEx_Calibration_Start>

   //HAL_TIM_RegisterCallback(&htim3,HAL_TIM_PERIOD_ELAPSED_CB_ID,&MusicPlayer_TimerISR);

#define TEST_TUNE_LENGTH 55
#define TEMPO_MODIFIER 3
   MusicNote tetrisTune[TEST_TUNE_LENGTH] = {
 8002f20:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002f24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f28:	4a0f      	ldr	r2, [pc, #60]	; (8002f68 <main+0xb8>)
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8002f32:	461a      	mov	r2, r3
 8002f34:	f005 fb8c 	bl	8008650 <memcpy>
		   {A4,2026/TEMPO_MODIFIER},
		   {GSHARP4,4090/TEMPO_MODIFIER},

   };

   MusicPlayer_StartTune(&tetrisTune[0],TEST_TUNE_LENGTH);
 8002f38:	463b      	mov	r3, r7
 8002f3a:	2137      	movs	r1, #55	; 0x37
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fe4b 	bl	8000bd8 <MusicPlayer_StartTune>

   TetrisMain_Init();
 8002f42:	f7ff fbbb 	bl	80026bc <TetrisMain_Init>

   while (1)
   {
	   TetrisMain_Update(50);
 8002f46:	2032      	movs	r0, #50	; 0x32
 8002f48:	f7ff fc2a 	bl	80027a0 <TetrisMain_Update>
	   HAL_Delay(50);
 8002f4c:	2032      	movs	r0, #50	; 0x32
 8002f4e:	f000 fdeb 	bl	8003b28 <HAL_Delay>
	   TetrisMain_Update(50);
 8002f52:	e7f8      	b.n	8002f46 <main+0x96>
 8002f54:	20000b84 	.word	0x20000b84
 8002f58:	20000c1c 	.word	0x20000c1c
 8002f5c:	200008b4 	.word	0x200008b4
 8002f60:	20000b20 	.word	0x20000b20
 8002f64:	20000ad0 	.word	0x20000ad0
 8002f68:	08009ba0 	.word	0x08009ba0

08002f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b096      	sub	sp, #88	; 0x58
 8002f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f76:	2228      	movs	r2, #40	; 0x28
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f005 fb76 	bl	800866c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f80:	f107 031c 	add.w	r3, r7, #28
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	611a      	str	r2, [r3, #16]
 8002f9e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fa8:	2310      	movs	r3, #16
 8002faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fac:	2302      	movs	r3, #2
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002fb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002fb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f002 f982 	bl	80052c8 <HAL_RCC_OscConfig>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002fca:	f000 fab5 	bl	8003538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fce:	230f      	movs	r3, #15
 8002fd0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002fda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fe4:	f107 031c 	add.w	r3, r7, #28
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 f9aa 	bl	8006344 <HAL_RCC_ClockConfig>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002ff6:	f000 fa9f 	bl	8003538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8002ffa:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8002ffe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003004:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	4618      	mov	r0, r3
 800300e:	f003 fb7f 	bl	8006710 <HAL_RCCEx_PeriphCLKConfig>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003018:	f000 fa8e 	bl	8003538 <Error_Handler>
  }
}
 800301c:	bf00      	nop
 800301e:	3758      	adds	r7, #88	; 0x58
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800302a:	463b      	mov	r3, r7
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
 8003038:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800303a:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <MX_ADC2_Init+0xd4>)
 800303c:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <MX_ADC2_Init+0xd8>)
 800303e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <MX_ADC2_Init+0xd4>)
 8003042:	2200      	movs	r2, #0
 8003044:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <MX_ADC2_Init+0xd4>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <MX_ADC2_Init+0xd4>)
 800304e:	2201      	movs	r2, #1
 8003050:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003052:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <MX_ADC2_Init+0xd4>)
 8003054:	2200      	movs	r2, #0
 8003056:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <MX_ADC2_Init+0xd4>)
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <MX_ADC2_Init+0xd4>)
 8003062:	2201      	movs	r2, #1
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <MX_ADC2_Init+0xd4>)
 8003068:	2200      	movs	r2, #0
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800306c:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <MX_ADC2_Init+0xd4>)
 800306e:	2201      	movs	r2, #1
 8003070:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <MX_ADC2_Init+0xd4>)
 8003074:	2200      	movs	r2, #0
 8003076:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8003078:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <MX_ADC2_Init+0xd4>)
 800307a:	2202      	movs	r2, #2
 800307c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800307e:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <MX_ADC2_Init+0xd4>)
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <MX_ADC2_Init+0xd4>)
 8003088:	2204      	movs	r2, #4
 800308a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800308c:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <MX_ADC2_Init+0xd4>)
 800308e:	2200      	movs	r2, #0
 8003090:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <MX_ADC2_Init+0xd4>)
 8003094:	2200      	movs	r2, #0
 8003096:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003098:	4817      	ldr	r0, [pc, #92]	; (80030f8 <MX_ADC2_Init+0xd4>)
 800309a:	f000 fd69 	bl	8003b70 <HAL_ADC_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80030a4:	f000 fa48 	bl	8003538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80030a8:	2302      	movs	r3, #2
 80030aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030ac:	2301      	movs	r3, #1
 80030ae:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030c0:	463b      	mov	r3, r7
 80030c2:	4619      	mov	r1, r3
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <MX_ADC2_Init+0xd4>)
 80030c6:	f001 f8e9 	bl	800429c <HAL_ADC_ConfigChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80030d0:	f000 fa32 	bl	8003538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80030d4:	2303      	movs	r3, #3
 80030d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80030d8:	2302      	movs	r3, #2
 80030da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030dc:	463b      	mov	r3, r7
 80030de:	4619      	mov	r1, r3
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <MX_ADC2_Init+0xd4>)
 80030e2:	f001 f8db 	bl	800429c <HAL_ADC_ConfigChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80030ec:	f000 fa24 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000ad0 	.word	0x20000ad0
 80030fc:	50000100 	.word	0x50000100

08003100 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <MX_SPI1_Init+0x74>)
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <MX_SPI1_Init+0x78>)
 8003108:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <MX_SPI1_Init+0x74>)
 800310c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003110:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <MX_SPI1_Init+0x74>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <MX_SPI1_Init+0x74>)
 800311a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800311e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <MX_SPI1_Init+0x74>)
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <MX_SPI1_Init+0x74>)
 8003128:	2200      	movs	r2, #0
 800312a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <MX_SPI1_Init+0x74>)
 800312e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003132:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <MX_SPI1_Init+0x74>)
 8003136:	2200      	movs	r2, #0
 8003138:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <MX_SPI1_Init+0x74>)
 800313c:	2200      	movs	r2, #0
 800313e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <MX_SPI1_Init+0x74>)
 8003142:	2200      	movs	r2, #0
 8003144:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <MX_SPI1_Init+0x74>)
 8003148:	2200      	movs	r2, #0
 800314a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <MX_SPI1_Init+0x74>)
 800314e:	2207      	movs	r2, #7
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <MX_SPI1_Init+0x74>)
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <MX_SPI1_Init+0x74>)
 800315a:	2208      	movs	r2, #8
 800315c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800315e:	4805      	ldr	r0, [pc, #20]	; (8003174 <MX_SPI1_Init+0x74>)
 8003160:	f003 fbfc 	bl	800695c <HAL_SPI_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800316a:	f000 f9e5 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000b20 	.word	0x20000b20
 8003178:	40013000 	.word	0x40013000

0800317c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b09a      	sub	sp, #104	; 0x68
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003182:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003190:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800319c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
 80031ac:	615a      	str	r2, [r3, #20]
 80031ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	222c      	movs	r2, #44	; 0x2c
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f005 fa58 	bl	800866c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031bc:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <MX_TIM1_Init+0x154>)
 80031be:	4a45      	ldr	r2, [pc, #276]	; (80032d4 <MX_TIM1_Init+0x158>)
 80031c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031c2:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <MX_TIM1_Init+0x154>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c8:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <MX_TIM1_Init+0x154>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4600;
 80031ce:	4b40      	ldr	r3, [pc, #256]	; (80032d0 <MX_TIM1_Init+0x154>)
 80031d0:	f241 12f8 	movw	r2, #4600	; 0x11f8
 80031d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d6:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <MX_TIM1_Init+0x154>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031dc:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <MX_TIM1_Init+0x154>)
 80031de:	2200      	movs	r2, #0
 80031e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <MX_TIM1_Init+0x154>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031e8:	4839      	ldr	r0, [pc, #228]	; (80032d0 <MX_TIM1_Init+0x154>)
 80031ea:	f003 ff2d 	bl	8007048 <HAL_TIM_Base_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80031f4:	f000 f9a0 	bl	8003538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031fc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003202:	4619      	mov	r1, r3
 8003204:	4832      	ldr	r0, [pc, #200]	; (80032d0 <MX_TIM1_Init+0x154>)
 8003206:	f004 fc25 	bl	8007a54 <HAL_TIM_ConfigClockSource>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003210:	f000 f992 	bl	8003538 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003214:	482e      	ldr	r0, [pc, #184]	; (80032d0 <MX_TIM1_Init+0x154>)
 8003216:	f003 ffcb 	bl	80071b0 <HAL_TIM_OC_Init>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003220:	f000 f98a 	bl	8003538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003230:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003234:	4619      	mov	r1, r3
 8003236:	4826      	ldr	r0, [pc, #152]	; (80032d0 <MX_TIM1_Init+0x154>)
 8003238:	f005 f8dc 	bl	80083f4 <HAL_TIMEx_MasterConfigSynchronization>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003242:	f000 f979 	bl	8003538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003246:	2330      	movs	r3, #48	; 0x30
 8003248:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2300;
 800324a:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003250:	2300      	movs	r3, #0
 8003252:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003254:	2300      	movs	r3, #0
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003264:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003268:	2200      	movs	r2, #0
 800326a:	4619      	mov	r1, r3
 800326c:	4818      	ldr	r0, [pc, #96]	; (80032d0 <MX_TIM1_Init+0x154>)
 800326e:	f004 fa63 	bl	8007738 <HAL_TIM_OC_ConfigChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003278:	f000 f95e 	bl	8003538 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003294:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800329e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032ac:	1d3b      	adds	r3, r7, #4
 80032ae:	4619      	mov	r1, r3
 80032b0:	4807      	ldr	r0, [pc, #28]	; (80032d0 <MX_TIM1_Init+0x154>)
 80032b2:	f005 f90d 	bl	80084d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80032bc:	f000 f93c 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032c0:	4803      	ldr	r0, [pc, #12]	; (80032d0 <MX_TIM1_Init+0x154>)
 80032c2:	f000 fa5d 	bl	8003780 <HAL_TIM_MspPostInit>

}
 80032c6:	bf00      	nop
 80032c8:	3768      	adds	r7, #104	; 0x68
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000b84 	.word	0x20000b84
 80032d4:	40012c00 	.word	0x40012c00

080032d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032de:	f107 031c 	add.w	r3, r7, #28
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ea:	463b      	mov	r3, r7
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
 80032f8:	615a      	str	r2, [r3, #20]
 80032fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <MX_TIM2_Init+0xa8>)
 80032fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <MX_TIM2_Init+0xa8>)
 8003306:	2200      	movs	r2, #0
 8003308:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <MX_TIM2_Init+0xa8>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <MX_TIM2_Init+0xa8>)
 8003312:	f04f 32ff 	mov.w	r2, #4294967295
 8003316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <MX_TIM2_Init+0xa8>)
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <MX_TIM2_Init+0xa8>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003324:	4816      	ldr	r0, [pc, #88]	; (8003380 <MX_TIM2_Init+0xa8>)
 8003326:	f004 f891 	bl	800744c <HAL_TIM_PWM_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003330:	f000 f902 	bl	8003538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800333c:	f107 031c 	add.w	r3, r7, #28
 8003340:	4619      	mov	r1, r3
 8003342:	480f      	ldr	r0, [pc, #60]	; (8003380 <MX_TIM2_Init+0xa8>)
 8003344:	f005 f856 	bl	80083f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800334e:	f000 f8f3 	bl	8003538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003352:	2360      	movs	r3, #96	; 0x60
 8003354:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003362:	463b      	mov	r3, r7
 8003364:	2204      	movs	r2, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4805      	ldr	r0, [pc, #20]	; (8003380 <MX_TIM2_Init+0xa8>)
 800336a:	f004 fa5f 	bl	800782c <HAL_TIM_PWM_ConfigChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003374:	f000 f8e0 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003378:	bf00      	nop
 800337a:	3728      	adds	r7, #40	; 0x28
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000bd0 	.word	0x20000bd0

08003384 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800338a:	f107 0310 	add.w	r3, r7, #16
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <MX_TIM3_Init+0x94>)
 80033a4:	4a1d      	ldr	r2, [pc, #116]	; (800341c <MX_TIM3_Init+0x98>)
 80033a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <MX_TIM3_Init+0x94>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <MX_TIM3_Init+0x94>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80033b4:	4b18      	ldr	r3, [pc, #96]	; (8003418 <MX_TIM3_Init+0x94>)
 80033b6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80033ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <MX_TIM3_Init+0x94>)
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <MX_TIM3_Init+0x94>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033c8:	4813      	ldr	r0, [pc, #76]	; (8003418 <MX_TIM3_Init+0x94>)
 80033ca:	f003 fe3d 	bl	8007048 <HAL_TIM_Base_Init>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80033d4:	f000 f8b0 	bl	8003538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033de:	f107 0310 	add.w	r3, r7, #16
 80033e2:	4619      	mov	r1, r3
 80033e4:	480c      	ldr	r0, [pc, #48]	; (8003418 <MX_TIM3_Init+0x94>)
 80033e6:	f004 fb35 	bl	8007a54 <HAL_TIM_ConfigClockSource>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80033f0:	f000 f8a2 	bl	8003538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f4:	2300      	movs	r3, #0
 80033f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4805      	ldr	r0, [pc, #20]	; (8003418 <MX_TIM3_Init+0x94>)
 8003402:	f004 fff7 	bl	80083f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800340c:	f000 f894 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003410:	bf00      	nop
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000c1c 	.word	0x20000c1c
 800341c:	40000400 	.word	0x40000400

08003420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003426:	f107 030c 	add.w	r3, r7, #12
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <MX_GPIO_Init+0xf0>)
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	4a35      	ldr	r2, [pc, #212]	; (8003510 <MX_GPIO_Init+0xf0>)
 800343c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003440:	6153      	str	r3, [r2, #20]
 8003442:	4b33      	ldr	r3, [pc, #204]	; (8003510 <MX_GPIO_Init+0xf0>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	4b30      	ldr	r3, [pc, #192]	; (8003510 <MX_GPIO_Init+0xf0>)
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4a2f      	ldr	r2, [pc, #188]	; (8003510 <MX_GPIO_Init+0xf0>)
 8003454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003458:	6153      	str	r3, [r2, #20]
 800345a:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <MX_GPIO_Init+0xf0>)
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <MX_GPIO_Init+0xf0>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4a29      	ldr	r2, [pc, #164]	; (8003510 <MX_GPIO_Init+0xf0>)
 800346c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003470:	6153      	str	r3, [r2, #20]
 8003472:	4b27      	ldr	r3, [pc, #156]	; (8003510 <MX_GPIO_Init+0xf0>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 800347e:	2201      	movs	r2, #1
 8003480:	210a      	movs	r1, #10
 8003482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003486:	f001 ff07 	bl	8005298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800348a:	2200      	movs	r2, #0
 800348c:	2110      	movs	r1, #16
 800348e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003492:	f001 ff01 	bl	8005298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8003496:	231a      	movs	r3, #26
 8003498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349a:	2301      	movs	r3, #1
 800349c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a6:	f107 030c 	add.w	r3, r7, #12
 80034aa:	4619      	mov	r1, r3
 80034ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b0:	f001 fd68 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80034b4:	f248 0304 	movw	r3, #32772	; 0x8004
 80034b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034c6:	2307      	movs	r3, #7
 80034c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	f107 030c 	add.w	r3, r7, #12
 80034ce:	4619      	mov	r1, r3
 80034d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d4:	f001 fd56 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 80034d8:	2301      	movs	r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034e0:	2302      	movs	r3, #2
 80034e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	4619      	mov	r1, r3
 80034ea:	480a      	ldr	r0, [pc, #40]	; (8003514 <MX_GPIO_Init+0xf4>)
 80034ec:	f001 fd4a 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = ANALOGUE_STICK_BUTTON_Pin;
 80034f0:	2302      	movs	r3, #2
 80034f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANALOGUE_STICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80034fc:	f107 030c 	add.w	r3, r7, #12
 8003500:	4619      	mov	r1, r3
 8003502:	4804      	ldr	r0, [pc, #16]	; (8003514 <MX_GPIO_Init+0xf4>)
 8003504:	f001 fd3e 	bl	8004f84 <HAL_GPIO_Init>

}
 8003508:	bf00      	nop
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	48000400 	.word	0x48000400

08003518 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_TIM_PeriodElapsedCallback+0x14>
		MusicPlayer_TimerISR();
 8003528:	f7fd fb84 	bl	8000c34 <MusicPlayer_TimerISR>
	}
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000c1c 	.word	0x20000c1c

08003538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800353c:	b672      	cpsid	i
}
 800353e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003540:	e7fe      	b.n	8003540 <Error_Handler+0x8>
	...

08003544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_MspInit+0x4c>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	4a10      	ldr	r2, [pc, #64]	; (8003590 <HAL_MspInit+0x4c>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6193      	str	r3, [r2, #24]
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_MspInit+0x4c>)
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_MspInit+0x4c>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <HAL_MspInit+0x4c>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	61d3      	str	r3, [r2, #28]
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_MspInit+0x4c>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	210f      	movs	r1, #15
 800357e:	f06f 0001 	mvn.w	r0, #1
 8003582:	f001 faf0 	bl	8004b66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a15      	ldr	r2, [pc, #84]	; (8003608 <HAL_ADC_MspInit+0x74>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d124      	bne.n	8003600 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_ADC_MspInit+0x78>)
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4a14      	ldr	r2, [pc, #80]	; (800360c <HAL_ADC_MspInit+0x78>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6153      	str	r3, [r2, #20]
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_ADC_MspInit+0x78>)
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_ADC_MspInit+0x78>)
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	4a0e      	ldr	r2, [pc, #56]	; (800360c <HAL_ADC_MspInit+0x78>)
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	6153      	str	r3, [r2, #20]
 80035da:	4b0c      	ldr	r3, [pc, #48]	; (800360c <HAL_ADC_MspInit+0x78>)
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 80035e6:	2360      	movs	r3, #96	; 0x60
 80035e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ea:	2303      	movs	r3, #3
 80035ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035fc:	f001 fcc2 	bl	8004f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003600:	bf00      	nop
 8003602:	3728      	adds	r7, #40	; 0x28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	50000100 	.word	0x50000100
 800360c:	40021000 	.word	0x40021000

08003610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <HAL_SPI_MspInit+0xb4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d144      	bne.n	80036bc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_SPI_MspInit+0xb8>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <HAL_SPI_MspInit+0xb8>)
 8003638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800363c:	6193      	str	r3, [r2, #24]
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_SPI_MspInit+0xb8>)
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <HAL_SPI_MspInit+0xb8>)
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_SPI_MspInit+0xb8>)
 8003650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003654:	6153      	str	r3, [r2, #20]
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_SPI_MspInit+0xb8>)
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_SPI_MspInit+0xb8>)
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_SPI_MspInit+0xb8>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366c:	6153      	str	r3, [r2, #20]
 800366e:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_SPI_MspInit+0xb8>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	2302      	movs	r3, #2
 8003680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003686:	2303      	movs	r3, #3
 8003688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800368a:	2305      	movs	r3, #5
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368e:	f107 0314 	add.w	r3, r7, #20
 8003692:	4619      	mov	r1, r3
 8003694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003698:	f001 fc74 	bl	8004f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800369c:	2308      	movs	r3, #8
 800369e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a0:	2302      	movs	r3, #2
 80036a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036a8:	2303      	movs	r3, #3
 80036aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036ac:	2305      	movs	r3, #5
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4619      	mov	r1, r3
 80036b6:	4805      	ldr	r0, [pc, #20]	; (80036cc <HAL_SPI_MspInit+0xbc>)
 80036b8:	f001 fc64 	bl	8004f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036bc:	bf00      	nop
 80036be:	3728      	adds	r7, #40	; 0x28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40013000 	.word	0x40013000
 80036c8:	40021000 	.word	0x40021000
 80036cc:	48000400 	.word	0x48000400

080036d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_TIM_Base_MspInit+0x68>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10c      	bne.n	80036fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_TIM_Base_MspInit+0x6c>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_TIM_Base_MspInit+0x6c>)
 80036e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ec:	6193      	str	r3, [r2, #24]
 80036ee:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_TIM_Base_MspInit+0x6c>)
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80036fa:	e018      	b.n	800372e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0f      	ldr	r2, [pc, #60]	; (8003740 <HAL_TIM_Base_MspInit+0x70>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d113      	bne.n	800372e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_TIM_Base_MspInit+0x6c>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_TIM_Base_MspInit+0x6c>)
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	61d3      	str	r3, [r2, #28]
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_TIM_Base_MspInit+0x6c>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2100      	movs	r1, #0
 8003722:	201d      	movs	r0, #29
 8003724:	f001 fa1f 	bl	8004b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003728:	201d      	movs	r0, #29
 800372a:	f001 fa38 	bl	8004b9e <HAL_NVIC_EnableIRQ>
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40000400 	.word	0x40000400

08003744 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d10b      	bne.n	800376e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_TIM_PWM_MspInit+0x38>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_TIM_PWM_MspInit+0x38>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	61d3      	str	r3, [r2, #28]
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_TIM_PWM_MspInit+0x38>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000

08003780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <HAL_TIM_MspPostInit+0x68>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d11d      	bne.n	80037de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_TIM_MspPostInit+0x6c>)
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_TIM_MspPostInit+0x6c>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	6153      	str	r3, [r2, #20]
 80037ae:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <HAL_TIM_MspPostInit+0x6c>)
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80037cc:	2306      	movs	r3, #6
 80037ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	4619      	mov	r1, r3
 80037d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037da:	f001 fbd3 	bl	8004f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037de:	bf00      	nop
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40021000 	.word	0x40021000

080037f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037f4:	e7fe      	b.n	80037f4 <NMI_Handler+0x4>

080037f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fa:	e7fe      	b.n	80037fa <HardFault_Handler+0x4>

080037fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <MemManage_Handler+0x4>

08003802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <BusFault_Handler+0x4>

08003808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <UsageFault_Handler+0x4>

0800380e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383c:	f000 f954 	bl	8003ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}

08003844 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <TIM3_IRQHandler+0x10>)
 800384a:	f003 fe56 	bl	80074fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000c1c 	.word	0x20000c1c

08003858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
	return 1;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_kill>:

int _kill(int pid, int sig)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003872:	f004 fec3 	bl	80085fc <__errno>
 8003876:	4603      	mov	r3, r0
 8003878:	2216      	movs	r2, #22
 800387a:	601a      	str	r2, [r3, #0]
	return -1;
 800387c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_exit>:

void _exit (int status)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003890:	f04f 31ff 	mov.w	r1, #4294967295
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ffe7 	bl	8003868 <_kill>
	while (1) {}		/* Make sure we hang here */
 800389a:	e7fe      	b.n	800389a <_exit+0x12>

0800389c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e00a      	b.n	80038c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038ae:	f3af 8000 	nop.w
 80038b2:	4601      	mov	r1, r0
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	60ba      	str	r2, [r7, #8]
 80038ba:	b2ca      	uxtb	r2, r1
 80038bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3301      	adds	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	dbf0      	blt.n	80038ae <_read+0x12>
	}

return len;
 80038cc:	687b      	ldr	r3, [r7, #4]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	e009      	b.n	80038fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	60ba      	str	r2, [r7, #8]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	3301      	adds	r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	dbf1      	blt.n	80038e8 <_write+0x12>
	}
	return len;
 8003904:	687b      	ldr	r3, [r7, #4]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_close>:

int _close(int file)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
	return -1;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003936:	605a      	str	r2, [r3, #4]
	return 0;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_isatty>:

int _isatty(int file)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
	return 1;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
	return 0;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003980:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <_sbrk+0x5c>)
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <_sbrk+0x60>)
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <_sbrk+0x64>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003994:	4b11      	ldr	r3, [pc, #68]	; (80039dc <_sbrk+0x64>)
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <_sbrk+0x68>)
 8003998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <_sbrk+0x64>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d207      	bcs.n	80039b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039a8:	f004 fe28 	bl	80085fc <__errno>
 80039ac:	4603      	mov	r3, r0
 80039ae:	220c      	movs	r2, #12
 80039b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	e009      	b.n	80039cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <_sbrk+0x64>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <_sbrk+0x64>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	4a05      	ldr	r2, [pc, #20]	; (80039dc <_sbrk+0x64>)
 80039c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ca:	68fb      	ldr	r3, [r7, #12]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20003000 	.word	0x20003000
 80039d8:	00000400 	.word	0x00000400
 80039dc:	20000c68 	.word	0x20000c68
 80039e0:	20000ca0 	.word	0x20000ca0

080039e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <SystemInit+0x20>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	4a05      	ldr	r2, [pc, #20]	; (8003a04 <SystemInit+0x20>)
 80039f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a0c:	480d      	ldr	r0, [pc, #52]	; (8003a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a0e:	490e      	ldr	r1, [pc, #56]	; (8003a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a10:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <LoopForever+0xe>)
  movs r3, #0
 8003a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a14:	e002      	b.n	8003a1c <LoopCopyDataInit>

08003a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a1a:	3304      	adds	r3, #4

08003a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a20:	d3f9      	bcc.n	8003a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a22:	4a0b      	ldr	r2, [pc, #44]	; (8003a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a24:	4c0b      	ldr	r4, [pc, #44]	; (8003a54 <LoopForever+0x16>)
  movs r3, #0
 8003a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a28:	e001      	b.n	8003a2e <LoopFillZerobss>

08003a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a2c:	3204      	adds	r2, #4

08003a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a30:	d3fb      	bcc.n	8003a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a32:	f7ff ffd7 	bl	80039e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a36:	f004 fde7 	bl	8008608 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a3a:	f7ff fa39 	bl	8002eb0 <main>

08003a3e <LoopForever>:

LoopForever:
    b LoopForever
 8003a3e:	e7fe      	b.n	8003a3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a40:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a48:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8003a4c:	0800a5b8 	.word	0x0800a5b8
  ldr r2, =_sbss
 8003a50:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8003a54:	20000ca0 	.word	0x20000ca0

08003a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a58:	e7fe      	b.n	8003a58 <ADC1_2_IRQHandler>
	...

08003a5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_Init+0x28>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <HAL_Init+0x28>)
 8003a66:	f043 0310 	orr.w	r3, r3, #16
 8003a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a6c:	2003      	movs	r0, #3
 8003a6e:	f001 f86f 	bl	8004b50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a72:	2000      	movs	r0, #0
 8003a74:	f000 f808 	bl	8003a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a78:	f7ff fd64 	bl	8003544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40022000 	.word	0x40022000

08003a88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_InitTick+0x54>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_InitTick+0x58>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f001 f887 	bl	8004bba <HAL_SYSTICK_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00e      	b.n	8003ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d80a      	bhi.n	8003ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003abc:	2200      	movs	r2, #0
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f001 f84f 	bl	8004b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ac8:	4a06      	ldr	r2, [pc, #24]	; (8003ae4 <HAL_InitTick+0x5c>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000300 	.word	0x20000300
 8003ae0:	20000308 	.word	0x20000308
 8003ae4:	20000304 	.word	0x20000304

08003ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_IncTick+0x20>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_IncTick+0x24>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <HAL_IncTick+0x24>)
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000308 	.word	0x20000308
 8003b0c:	20000c6c 	.word	0x20000c6c

08003b10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return uwTick;  
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <HAL_GetTick+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000c6c 	.word	0x20000c6c

08003b28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7ff ffee 	bl	8003b10 <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d005      	beq.n	8003b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_Delay+0x44>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003b4e:	bf00      	nop
 8003b50:	f7ff ffde 	bl	8003b10 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d8f7      	bhi.n	8003b50 <HAL_Delay+0x28>
  {
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000308 	.word	0x20000308

08003b70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b09a      	sub	sp, #104	; 0x68
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e172      	b.n	8003e76 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d176      	bne.n	8003c90 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d152      	bne.n	8003c50 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fce5 	bl	8003594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13b      	bne.n	8003c50 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fe83 	bl	80048e4 <ADC_Disable>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d12f      	bne.n	8003c50 <HAL_ADC_Init+0xe0>
 8003bf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d12b      	bne.n	8003c50 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c00:	f023 0302 	bic.w	r3, r3, #2
 8003c04:	f043 0202 	orr.w	r2, r3, #2
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c1a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c2c:	4b94      	ldr	r3, [pc, #592]	; (8003e80 <HAL_ADC_Init+0x310>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a94      	ldr	r2, [pc, #592]	; (8003e84 <HAL_ADC_Init+0x314>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	0c9a      	lsrs	r2, r3, #18
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c42:	e002      	b.n	8003c4a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f9      	bne.n	8003c44 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6c:	d110      	bne.n	8003c90 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f023 0312 	bic.w	r3, r3, #18
 8003c76:	f043 0210 	orr.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	f043 0201 	orr.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f040 80df 	bne.w	8003e5c <HAL_ADC_Init+0x2ec>
 8003c9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 80da 	bne.w	8003e5c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f040 80d2 	bne.w	8003e5c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003cc0:	f043 0202 	orr.w	r2, r3, #2
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cc8:	4b6f      	ldr	r3, [pc, #444]	; (8003e88 <HAL_ADC_Init+0x318>)
 8003cca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd4:	d102      	bne.n	8003cdc <HAL_ADC_Init+0x16c>
 8003cd6:	4b6d      	ldr	r3, [pc, #436]	; (8003e8c <HAL_ADC_Init+0x31c>)
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e002      	b.n	8003ce2 <HAL_ADC_Init+0x172>
 8003cdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ce0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d108      	bne.n	8003d02 <HAL_ADC_Init+0x192>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_Init+0x192>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_ADC_Init+0x194>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11c      	bne.n	8003d42 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d010      	beq.n	8003d30 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_ADC_Init+0x1ba>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_Init+0x1ba>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_ADC_Init+0x1bc>
 8003d2a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d108      	bne.n	8003d42 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d40:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7e5b      	ldrb	r3, [r3, #25]
 8003d46:	035b      	lsls	r3, r3, #13
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d4c:	2a01      	cmp	r2, #1
 8003d4e:	d002      	beq.n	8003d56 <HAL_ADC_Init+0x1e6>
 8003d50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d54:	e000      	b.n	8003d58 <HAL_ADC_Init+0x1e8>
 8003d56:	2200      	movs	r2, #0
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d11b      	bne.n	8003dae <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7e5b      	ldrb	r3, [r3, #25]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	3b01      	subs	r3, #1
 8003d84:	045a      	lsls	r2, r3, #17
 8003d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d90:	e00d      	b.n	8003dae <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d9a:	f043 0220 	orr.w	r2, r3, #32
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f043 0201 	orr.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d007      	beq.n	8003dc6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d114      	bne.n	8003dfe <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de2:	f023 0302 	bic.w	r3, r3, #2
 8003de6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	7e1b      	ldrb	r3, [r3, #24]
 8003dec:	039a      	lsls	r2, r3, #14
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <HAL_ADC_Init+0x320>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d10c      	bne.n	8003e34 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	f023 010f 	bic.w	r1, r3, #15
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	1e5a      	subs	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
 8003e32:	e007      	b.n	8003e44 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 020f 	bic.w	r2, r2, #15
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
 8003e5a:	e00a      	b.n	8003e72 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f023 0312 	bic.w	r3, r3, #18
 8003e64:	f043 0210 	orr.w	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3768      	adds	r7, #104	; 0x68
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000300 	.word	0x20000300
 8003e84:	431bde83 	.word	0x431bde83
 8003e88:	50000300 	.word	0x50000300
 8003e8c:	50000100 	.word	0x50000100
 8003e90:	fff0c007 	.word	0xfff0c007

08003e94 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f040 809c 	bne.w	8003fe8 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Start+0x2a>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e097      	b.n	8003fee <HAL_ADC_Start+0x15a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fca8 	bl	800481c <ADC_Enable>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 8083 	bne.w	8003fde <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003eec:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <HAL_ADC_Start+0x164>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_ADC_Start+0x6e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f00:	d115      	bne.n	8003f2e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d027      	beq.n	8003f6c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003f2c:	e01e      	b.n	8003f6c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f42:	d004      	beq.n	8003f4e <HAL_ADC_Start+0xba>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2c      	ldr	r2, [pc, #176]	; (8003ffc <HAL_ADC_Start+0x168>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10e      	bne.n	8003f6c <HAL_ADC_Start+0xd8>
 8003f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f78:	d106      	bne.n	8003f88 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f023 0206 	bic.w	r2, r3, #6
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
 8003f86:	e002      	b.n	8003f8e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	221c      	movs	r2, #28
 8003f9c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_ADC_Start+0x164>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d010      	beq.n	8003fcc <HAL_ADC_Start+0x138>
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_ADC_Start+0x164>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d00a      	beq.n	8003fcc <HAL_ADC_Start+0x138>
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_ADC_Start+0x164>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2b09      	cmp	r3, #9
 8003fc0:	d004      	beq.n	8003fcc <HAL_ADC_Start+0x138>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fca:	d10f      	bne.n	8003fec <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0204 	orr.w	r2, r2, #4
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	e006      	b.n	8003fec <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fe6:	e001      	b.n	8003fec <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	50000300 	.word	0x50000300
 8003ffc:	50000100 	.word	0x50000100

08004000 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d102      	bne.n	800401c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004016:	2308      	movs	r3, #8
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e02e      	b.n	800407a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800401c:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_ADC_PollForConversion+0x198>)
 800401e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	2b00      	cmp	r3, #0
 800402a:	d112      	bne.n	8004052 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b01      	cmp	r3, #1
 8004038:	d11d      	bne.n	8004076 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e09d      	b.n	800418e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f043 0220 	orr.w	r2, r3, #32
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e08b      	b.n	800418e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004076:	230c      	movs	r3, #12
 8004078:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_ADC_PollForConversion+0x198>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <HAL_ADC_PollForConversion+0x90>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800408e:	d104      	bne.n	800409a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e003      	b.n	80040a2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800409a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80040a2:	f7ff fd35 	bl	8003b10 <HAL_GetTick>
 80040a6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80040a8:	e021      	b.n	80040ee <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d01d      	beq.n	80040ee <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_ADC_PollForConversion+0xc8>
 80040b8:	f7ff fd2a 	bl	8003b10 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d212      	bcs.n	80040ee <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e04f      	b.n	800418e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0d6      	beq.n	80040aa <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004112:	2b00      	cmp	r3, #0
 8004114:	d131      	bne.n	800417a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800411c:	2b00      	cmp	r3, #0
 800411e:	d12c      	bne.n	800417a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b08      	cmp	r3, #8
 800412c:	d125      	bne.n	800417a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d112      	bne.n	8004162 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d112      	bne.n	800417a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f043 0201 	orr.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
 8004160:	e00b      	b.n	800417a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d103      	bne.n	800418c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	50000300 	.word	0x50000300

0800419c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_ADCEx_Calibration_Start+0x1c>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e05f      	b.n	8004292 <HAL_ADCEx_Calibration_Start+0xdc>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fb82 	bl	80048e4 <ADC_Disable>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d14e      	bne.n	8004288 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80041fe:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d107      	bne.n	8004216 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004214:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004224:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004226:	f7ff fc73 	bl	8003b10 <HAL_GetTick>
 800422a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800422c:	e01c      	b.n	8004268 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800422e:	f7ff fc6f 	bl	8003b10 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b0a      	cmp	r3, #10
 800423a:	d915      	bls.n	8004268 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800424a:	d10d      	bne.n	8004268 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	f023 0312 	bic.w	r3, r3, #18
 8004254:	f043 0210 	orr.w	r2, r3, #16
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e014      	b.n	8004292 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004276:	d0da      	beq.n	800422e <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f023 0303 	bic.w	r3, r3, #3
 8004280:	f043 0201 	orr.w	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800429c:	b480      	push	{r7}
 800429e:	b09b      	sub	sp, #108	; 0x6c
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_ADC_ConfigChannel+0x22>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e2a4      	b.n	8004808 <HAL_ADC_ConfigChannel+0x56c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 8288 	bne.w	80047e6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d81c      	bhi.n	8004318 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	461a      	mov	r2, r3
 80042f2:	231f      	movs	r3, #31
 80042f4:	4093      	lsls	r3, r2
 80042f6:	43db      	mvns	r3, r3
 80042f8:	4019      	ands	r1, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4413      	add	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fa00 f203 	lsl.w	r2, r0, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
 8004316:	e063      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b09      	cmp	r3, #9
 800431e:	d81e      	bhi.n	800435e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	3b1e      	subs	r3, #30
 8004334:	221f      	movs	r2, #31
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	4019      	ands	r1, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	4413      	add	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	3b1e      	subs	r3, #30
 8004350:	fa00 f203 	lsl.w	r2, r0, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	635a      	str	r2, [r3, #52]	; 0x34
 800435c:	e040      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b0e      	cmp	r3, #14
 8004364:	d81e      	bhi.n	80043a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	3b3c      	subs	r3, #60	; 0x3c
 800437a:	221f      	movs	r2, #31
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	4019      	ands	r1, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	3b3c      	subs	r3, #60	; 0x3c
 8004396:	fa00 f203 	lsl.w	r2, r0, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
 80043a2:	e01d      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	3b5a      	subs	r3, #90	; 0x5a
 80043b8:	221f      	movs	r2, #31
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	4019      	ands	r1, r3
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	4413      	add	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	3b5a      	subs	r3, #90	; 0x5a
 80043d4:	fa00 f203 	lsl.w	r2, r0, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f040 80e5 	bne.w	80045ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b09      	cmp	r3, #9
 80043f6:	d91c      	bls.n	8004432 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6999      	ldr	r1, [r3, #24]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	3b1e      	subs	r3, #30
 800440a:	2207      	movs	r2, #7
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	4019      	ands	r1, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6898      	ldr	r0, [r3, #8]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	3b1e      	subs	r3, #30
 8004424:	fa00 f203 	lsl.w	r2, r0, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	619a      	str	r2, [r3, #24]
 8004430:	e019      	b.n	8004466 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6959      	ldr	r1, [r3, #20]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	2207      	movs	r2, #7
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	4019      	ands	r1, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6898      	ldr	r0, [r3, #8]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	fa00 f203 	lsl.w	r2, r0, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	08db      	lsrs	r3, r3, #3
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	3b01      	subs	r3, #1
 8004484:	2b03      	cmp	r3, #3
 8004486:	d84f      	bhi.n	8004528 <HAL_ADC_ConfigChannel+0x28c>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <HAL_ADC_ConfigChannel+0x1f4>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044a1 	.word	0x080044a1
 8004494:	080044c3 	.word	0x080044c3
 8004498:	080044e5 	.word	0x080044e5
 800449c:	08004507 	.word	0x08004507
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044a6:	4b94      	ldr	r3, [pc, #592]	; (80046f8 <HAL_ADC_ConfigChannel+0x45c>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	0691      	lsls	r1, r2, #26
 80044b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044b2:	430a      	orrs	r2, r1
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044c0:	e07e      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044c8:	4b8b      	ldr	r3, [pc, #556]	; (80046f8 <HAL_ADC_ConfigChannel+0x45c>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	0691      	lsls	r1, r2, #26
 80044d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044d4:	430a      	orrs	r2, r1
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044e2:	e06d      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044ea:	4b83      	ldr	r3, [pc, #524]	; (80046f8 <HAL_ADC_ConfigChannel+0x45c>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	0691      	lsls	r1, r2, #26
 80044f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044f6:	430a      	orrs	r2, r1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004502:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004504:	e05c      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800450c:	4b7a      	ldr	r3, [pc, #488]	; (80046f8 <HAL_ADC_ConfigChannel+0x45c>)
 800450e:	4013      	ands	r3, r2
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	0691      	lsls	r1, r2, #26
 8004516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004518:	430a      	orrs	r2, r1
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004524:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004526:	e04b      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	069b      	lsls	r3, r3, #26
 8004538:	429a      	cmp	r2, r3
 800453a:	d107      	bne.n	800454c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800454a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	069b      	lsls	r3, r3, #26
 800455c:	429a      	cmp	r2, r3
 800455e:	d107      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800456e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	069b      	lsls	r3, r3, #26
 8004580:	429a      	cmp	r2, r3
 8004582:	d107      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004592:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800459a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	069b      	lsls	r3, r3, #26
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d10a      	bne.n	80045be <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80045b8:	e001      	b.n	80045be <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80045be:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d108      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x344>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x344>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x346>
 80045e0:	2300      	movs	r3, #0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 810a 	bne.w	80047fc <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d00f      	beq.n	8004610 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43da      	mvns	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	400a      	ands	r2, r1
 800460a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800460e:	e049      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	409a      	lsls	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b09      	cmp	r3, #9
 8004630:	d91c      	bls.n	800466c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6999      	ldr	r1, [r3, #24]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	3b1b      	subs	r3, #27
 8004644:	2207      	movs	r2, #7
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	4019      	ands	r1, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6898      	ldr	r0, [r3, #8]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	3b1b      	subs	r3, #27
 800465e:	fa00 f203 	lsl.w	r2, r0, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	619a      	str	r2, [r3, #24]
 800466a:	e01b      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6959      	ldr	r1, [r3, #20]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	2207      	movs	r2, #7
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	43db      	mvns	r3, r3
 8004686:	4019      	ands	r1, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6898      	ldr	r0, [r3, #8]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	4613      	mov	r3, r2
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	4413      	add	r3, r2
 8004698:	fa00 f203 	lsl.w	r2, r0, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046a4:	4b15      	ldr	r3, [pc, #84]	; (80046fc <HAL_ADC_ConfigChannel+0x460>)
 80046a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d105      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80046b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80046c0:	2b11      	cmp	r3, #17
 80046c2:	d105      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00b      	beq.n	80046e8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80046d4:	2b12      	cmp	r3, #18
 80046d6:	f040 8091 	bne.w	80047fc <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80046da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 808a 	bne.w	80047fc <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f0:	d108      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x468>
 80046f2:	4b03      	ldr	r3, [pc, #12]	; (8004700 <HAL_ADC_ConfigChannel+0x464>)
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e008      	b.n	800470a <HAL_ADC_ConfigChannel+0x46e>
 80046f8:	83fff000 	.word	0x83fff000
 80046fc:	50000300 	.word	0x50000300
 8004700:	50000100 	.word	0x50000100
 8004704:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004708:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d108      	bne.n	800472a <HAL_ADC_ConfigChannel+0x48e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_ADC_ConfigChannel+0x48e>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_ADC_ConfigChannel+0x490>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d150      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004730:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b01      	cmp	r3, #1
 8004740:	d107      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x4b6>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x4b6>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_ADC_ConfigChannel+0x4b8>
 8004752:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004754:	2b00      	cmp	r3, #0
 8004756:	d13c      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b10      	cmp	r3, #16
 800475e:	d11d      	bne.n	800479c <HAL_ADC_ConfigChannel+0x500>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004768:	d118      	bne.n	800479c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800476a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004774:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004776:	4b27      	ldr	r3, [pc, #156]	; (8004814 <HAL_ADC_ConfigChannel+0x578>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a27      	ldr	r2, [pc, #156]	; (8004818 <HAL_ADC_ConfigChannel+0x57c>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	0c9a      	lsrs	r2, r3, #18
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800478c:	e002      	b.n	8004794 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3b01      	subs	r3, #1
 8004792:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f9      	bne.n	800478e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800479a:	e02e      	b.n	80047fa <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b11      	cmp	r3, #17
 80047a2:	d10b      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x520>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ac:	d106      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80047ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80047b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047ba:	e01e      	b.n	80047fa <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b12      	cmp	r3, #18
 80047c2:	d11a      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80047c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80047cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047d0:	e013      	b.n	80047fa <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047e4:	e00a      	b.n	80047fc <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047f8:	e000      	b.n	80047fc <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047fa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004804:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004808:	4618      	mov	r0, r3
 800480a:	376c      	adds	r7, #108	; 0x6c
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	20000300 	.word	0x20000300
 8004818:	431bde83 	.word	0x431bde83

0800481c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d108      	bne.n	8004848 <ADC_Enable+0x2c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <ADC_Enable+0x2c>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <ADC_Enable+0x2e>
 8004848:	2300      	movs	r3, #0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d143      	bne.n	80048d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <ADC_Enable+0xc4>)
 8004856:	4013      	ands	r3, r2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f043 0210 	orr.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e02f      	b.n	80048d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004888:	f7ff f942 	bl	8003b10 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800488e:	e01b      	b.n	80048c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004890:	f7ff f93e 	bl	8003b10 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d914      	bls.n	80048c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d00d      	beq.n	80048c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	f043 0210 	orr.w	r2, r3, #16
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	f043 0201 	orr.w	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e007      	b.n	80048d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d1dc      	bne.n	8004890 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	8000003f 	.word	0x8000003f

080048e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d108      	bne.n	8004910 <ADC_Disable+0x2c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <ADC_Disable+0x2c>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <ADC_Disable+0x2e>
 8004910:	2300      	movs	r3, #0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d047      	beq.n	80049a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 030d 	and.w	r3, r3, #13
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10f      	bne.n	8004944 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0202 	orr.w	r2, r2, #2
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2203      	movs	r2, #3
 800493a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800493c:	f7ff f8e8 	bl	8003b10 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004942:	e029      	b.n	8004998 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f043 0210 	orr.w	r2, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004954:	f043 0201 	orr.w	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e023      	b.n	80049a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004960:	f7ff f8d6 	bl	8003b10 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d914      	bls.n	8004998 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	d10d      	bne.n	8004998 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f043 0210 	orr.w	r2, r3, #16
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e007      	b.n	80049a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d0dc      	beq.n	8004960 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <__NVIC_SetPriorityGrouping+0x44>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049cc:	4013      	ands	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049e2:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <__NVIC_SetPriorityGrouping+0x44>)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	60d3      	str	r3, [r2, #12]
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <__NVIC_GetPriorityGrouping+0x18>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	f003 0307 	and.w	r3, r3, #7
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	db0b      	blt.n	8004a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	f003 021f 	and.w	r2, r3, #31
 8004a2c:	4907      	ldr	r1, [pc, #28]	; (8004a4c <__NVIC_EnableIRQ+0x38>)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	2001      	movs	r0, #1
 8004a36:	fa00 f202 	lsl.w	r2, r0, r2
 8004a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000e100 	.word	0xe000e100

08004a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	6039      	str	r1, [r7, #0]
 8004a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	db0a      	blt.n	8004a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	490c      	ldr	r1, [pc, #48]	; (8004a9c <__NVIC_SetPriority+0x4c>)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	440b      	add	r3, r1
 8004a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a78:	e00a      	b.n	8004a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4908      	ldr	r1, [pc, #32]	; (8004aa0 <__NVIC_SetPriority+0x50>)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3b04      	subs	r3, #4
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	761a      	strb	r2, [r3, #24]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	e000e100 	.word	0xe000e100
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f1c3 0307 	rsb	r3, r3, #7
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	bf28      	it	cs
 8004ac2:	2304      	movcs	r3, #4
 8004ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2b06      	cmp	r3, #6
 8004acc:	d902      	bls.n	8004ad4 <NVIC_EncodePriority+0x30>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3b03      	subs	r3, #3
 8004ad2:	e000      	b.n	8004ad6 <NVIC_EncodePriority+0x32>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aec:	f04f 31ff 	mov.w	r1, #4294967295
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	43d9      	mvns	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004afc:	4313      	orrs	r3, r2
         );
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3724      	adds	r7, #36	; 0x24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b1c:	d301      	bcc.n	8004b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e00f      	b.n	8004b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <SysTick_Config+0x40>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b2a:	210f      	movs	r1, #15
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	f7ff ff8e 	bl	8004a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <SysTick_Config+0x40>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b3a:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <SysTick_Config+0x40>)
 8004b3c:	2207      	movs	r2, #7
 8004b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	e000e010 	.word	0xe000e010

08004b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ff29 	bl	80049b0 <__NVIC_SetPriorityGrouping>
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b78:	f7ff ff3e 	bl	80049f8 <__NVIC_GetPriorityGrouping>
 8004b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7ff ff8e 	bl	8004aa4 <NVIC_EncodePriority>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff5d 	bl	8004a50 <__NVIC_SetPriority>
}
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff ff31 	bl	8004a14 <__NVIC_EnableIRQ>
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff ffa2 	bl	8004b0c <SysTick_Config>
 8004bc8:	4603      	mov	r3, r0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bee:	4b2f      	ldr	r3, [pc, #188]	; (8004cac <HAL_FLASH_Program+0xd8>)
 8004bf0:	7e1b      	ldrb	r3, [r3, #24]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_FLASH_Program+0x26>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e054      	b.n	8004ca4 <HAL_FLASH_Program+0xd0>
 8004bfa:	4b2c      	ldr	r3, [pc, #176]	; (8004cac <HAL_FLASH_Program+0xd8>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c04:	f000 f8a8 	bl	8004d58 <FLASH_WaitForLastOperation>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d144      	bne.n	8004c9c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d102      	bne.n	8004c1e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	757b      	strb	r3, [r7, #21]
 8004c1c:	e007      	b.n	8004c2e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d102      	bne.n	8004c2a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004c24:	2302      	movs	r3, #2
 8004c26:	757b      	strb	r3, [r7, #21]
 8004c28:	e001      	b.n	8004c2e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75bb      	strb	r3, [r7, #22]
 8004c32:	e02d      	b.n	8004c90 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004c34:	7dbb      	ldrb	r3, [r7, #22]
 8004c36:	005a      	lsls	r2, r3, #1
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	eb02 0c03 	add.w	ip, r2, r3
 8004c3e:	7dbb      	ldrb	r3, [r7, #22]
 8004c40:	0119      	lsls	r1, r3, #4
 8004c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c46:	f1c1 0620 	rsb	r6, r1, #32
 8004c4a:	f1a1 0020 	sub.w	r0, r1, #32
 8004c4e:	fa22 f401 	lsr.w	r4, r2, r1
 8004c52:	fa03 f606 	lsl.w	r6, r3, r6
 8004c56:	4334      	orrs	r4, r6
 8004c58:	fa23 f000 	lsr.w	r0, r3, r0
 8004c5c:	4304      	orrs	r4, r0
 8004c5e:	fa23 f501 	lsr.w	r5, r3, r1
 8004c62:	b2a3      	uxth	r3, r4
 8004c64:	4619      	mov	r1, r3
 8004c66:	4660      	mov	r0, ip
 8004c68:	f000 f85a 	bl	8004d20 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c70:	f000 f872 	bl	8004d58 <FLASH_WaitForLastOperation>
 8004c74:	4603      	mov	r3, r0
 8004c76:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004c78:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <HAL_FLASH_Program+0xdc>)
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <HAL_FLASH_Program+0xdc>)
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d107      	bne.n	8004c9a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004c8a:	7dbb      	ldrb	r3, [r7, #22]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	75bb      	strb	r3, [r7, #22]
 8004c90:	7dba      	ldrb	r2, [r7, #22]
 8004c92:	7d7b      	ldrb	r3, [r7, #21]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d3cd      	bcc.n	8004c34 <HAL_FLASH_Program+0x60>
 8004c98:	e000      	b.n	8004c9c <HAL_FLASH_Program+0xc8>
      {
        break;
 8004c9a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <HAL_FLASH_Program+0xd8>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	761a      	strb	r2, [r3, #24]

  return status;
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cac:	20000c70 	.word	0x20000c70
 8004cb0:	40022000 	.word	0x40022000

08004cb4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <HAL_FLASH_Unlock+0x40>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_FLASH_Unlock+0x40>)
 8004ccc:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <HAL_FLASH_Unlock+0x44>)
 8004cce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004cd0:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <HAL_FLASH_Unlock+0x40>)
 8004cd2:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <HAL_FLASH_Unlock+0x48>)
 8004cd4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <HAL_FLASH_Unlock+0x40>)
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40022000 	.word	0x40022000
 8004cf8:	45670123 	.word	0x45670123
 8004cfc:	cdef89ab 	.word	0xcdef89ab

08004d00 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_FLASH_Lock+0x1c>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <HAL_FLASH_Lock+0x1c>)
 8004d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40022000 	.word	0x40022000

08004d20 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <FLASH_Program_HalfWord+0x30>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <FLASH_Program_HalfWord+0x34>)
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <FLASH_Program_HalfWord+0x34>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	887a      	ldrh	r2, [r7, #2]
 8004d42:	801a      	strh	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000c70 	.word	0x20000c70
 8004d54:	40022000 	.word	0x40022000

08004d58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004d60:	f7fe fed6 	bl	8003b10 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004d66:	e010      	b.n	8004d8a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d00c      	beq.n	8004d8a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <FLASH_WaitForLastOperation+0x2e>
 8004d76:	f7fe fecb 	bl	8003b10 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d201      	bcs.n	8004d8a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e01f      	b.n	8004dca <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <FLASH_WaitForLastOperation+0x7c>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d0e8      	beq.n	8004d68 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004d96:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <FLASH_WaitForLastOperation+0x7c>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d102      	bne.n	8004da8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <FLASH_WaitForLastOperation+0x7c>)
 8004da4:	2220      	movs	r2, #32
 8004da6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004da8:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <FLASH_WaitForLastOperation+0x7c>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d005      	beq.n	8004dc0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <FLASH_WaitForLastOperation+0x7c>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d103      	bne.n	8004dc8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004dc0:	f000 f80a 	bl	8004dd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40022000 	.word	0x40022000

08004dd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <FLASH_SetErrorCode+0x5c>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d109      	bne.n	8004e02 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <FLASH_SetErrorCode+0x60>)
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f043 0302 	orr.w	r3, r3, #2
 8004df6:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <FLASH_SetErrorCode+0x60>)
 8004df8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f043 0310 	orr.w	r3, r3, #16
 8004e00:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004e02:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <FLASH_SetErrorCode+0x5c>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d109      	bne.n	8004e22 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <FLASH_SetErrorCode+0x60>)
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <FLASH_SetErrorCode+0x60>)
 8004e18:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f043 0304 	orr.w	r3, r3, #4
 8004e20:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004e22:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <FLASH_SetErrorCode+0x5c>)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	60d3      	str	r3, [r2, #12]
}  
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	40022000 	.word	0x40022000
 8004e38:	20000c70 	.word	0x20000c70

08004e3c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e4e:	4b2e      	ldr	r3, [pc, #184]	; (8004f08 <HAL_FLASHEx_Erase+0xcc>)
 8004e50:	7e1b      	ldrb	r3, [r3, #24]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_FLASHEx_Erase+0x1e>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e052      	b.n	8004f00 <HAL_FLASHEx_Erase+0xc4>
 8004e5a:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_FLASHEx_Erase+0xcc>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d115      	bne.n	8004e94 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004e68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e6c:	f7ff ff74 	bl	8004d58 <FLASH_WaitForLastOperation>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d140      	bne.n	8004ef8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004e76:	f000 f84b 	bl	8004f10 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e7e:	f7ff ff6b 	bl	8004d58 <FLASH_WaitForLastOperation>
 8004e82:	4603      	mov	r3, r0
 8004e84:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004e86:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <HAL_FLASHEx_Erase+0xd0>)
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <HAL_FLASHEx_Erase+0xd0>)
 8004e8c:	f023 0304 	bic.w	r3, r3, #4
 8004e90:	6113      	str	r3, [r2, #16]
 8004e92:	e031      	b.n	8004ef8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004e94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e98:	f7ff ff5e 	bl	8004d58 <FLASH_WaitForLastOperation>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d12a      	bne.n	8004ef8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	e019      	b.n	8004ee6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004eb2:	68b8      	ldr	r0, [r7, #8]
 8004eb4:	f000 f846 	bl	8004f44 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004eb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ebc:	f7ff ff4c 	bl	8004d58 <FLASH_WaitForLastOperation>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <HAL_FLASHEx_Erase+0xd0>)
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <HAL_FLASHEx_Erase+0xd0>)
 8004eca:	f023 0302 	bic.w	r3, r3, #2
 8004ece:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	601a      	str	r2, [r3, #0]
            break;
 8004edc:	e00c      	b.n	8004ef8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	02da      	lsls	r2, r3, #11
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d3dc      	bcc.n	8004eb2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <HAL_FLASHEx_Erase+0xcc>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	761a      	strb	r2, [r3, #24]

  return status;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000c70 	.word	0x20000c70
 8004f0c:	40022000 	.word	0x40022000

08004f10 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <FLASH_MassErase+0x2c>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <FLASH_MassErase+0x30>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <FLASH_MassErase+0x30>)
 8004f20:	f043 0304 	orr.w	r3, r3, #4
 8004f24:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <FLASH_MassErase+0x30>)
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	4a05      	ldr	r2, [pc, #20]	; (8004f40 <FLASH_MassErase+0x30>)
 8004f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f30:	6113      	str	r3, [r2, #16]
}
 8004f32:	bf00      	nop
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20000c70 	.word	0x20000c70
 8004f40:	40022000 	.word	0x40022000

08004f44 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <FLASH_PageErase+0x38>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <FLASH_PageErase+0x3c>)
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	4a0a      	ldr	r2, [pc, #40]	; (8004f80 <FLASH_PageErase+0x3c>)
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <FLASH_PageErase+0x3c>)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <FLASH_PageErase+0x3c>)
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	4a05      	ldr	r2, [pc, #20]	; (8004f80 <FLASH_PageErase+0x3c>)
 8004f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f6e:	6113      	str	r3, [r2, #16]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000c70 	.word	0x20000c70
 8004f80:	40022000 	.word	0x40022000

08004f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f92:	e14e      	b.n	8005232 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2101      	movs	r1, #1
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8140 	beq.w	800522c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d005      	beq.n	8004fc4 <HAL_GPIO_Init+0x40>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d130      	bne.n	8005026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	2203      	movs	r2, #3
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43db      	mvns	r3, r3
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4013      	ands	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	f003 0201 	and.w	r2, r3, #1
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b03      	cmp	r3, #3
 8005030:	d017      	beq.n	8005062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	2203      	movs	r2, #3
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d123      	bne.n	80050b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	08da      	lsrs	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3208      	adds	r2, #8
 8005076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	220f      	movs	r2, #15
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4013      	ands	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	08da      	lsrs	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3208      	adds	r2, #8
 80050b0:	6939      	ldr	r1, [r7, #16]
 80050b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	2203      	movs	r2, #3
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4013      	ands	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0203 	and.w	r2, r3, #3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 809a 	beq.w	800522c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f8:	4b55      	ldr	r3, [pc, #340]	; (8005250 <HAL_GPIO_Init+0x2cc>)
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	4a54      	ldr	r2, [pc, #336]	; (8005250 <HAL_GPIO_Init+0x2cc>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	6193      	str	r3, [r2, #24]
 8005104:	4b52      	ldr	r3, [pc, #328]	; (8005250 <HAL_GPIO_Init+0x2cc>)
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005110:	4a50      	ldr	r2, [pc, #320]	; (8005254 <HAL_GPIO_Init+0x2d0>)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	3302      	adds	r3, #2
 8005118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	220f      	movs	r2, #15
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4013      	ands	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800513a:	d013      	beq.n	8005164 <HAL_GPIO_Init+0x1e0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a46      	ldr	r2, [pc, #280]	; (8005258 <HAL_GPIO_Init+0x2d4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00d      	beq.n	8005160 <HAL_GPIO_Init+0x1dc>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a45      	ldr	r2, [pc, #276]	; (800525c <HAL_GPIO_Init+0x2d8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d007      	beq.n	800515c <HAL_GPIO_Init+0x1d8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a44      	ldr	r2, [pc, #272]	; (8005260 <HAL_GPIO_Init+0x2dc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d101      	bne.n	8005158 <HAL_GPIO_Init+0x1d4>
 8005154:	2303      	movs	r3, #3
 8005156:	e006      	b.n	8005166 <HAL_GPIO_Init+0x1e2>
 8005158:	2305      	movs	r3, #5
 800515a:	e004      	b.n	8005166 <HAL_GPIO_Init+0x1e2>
 800515c:	2302      	movs	r3, #2
 800515e:	e002      	b.n	8005166 <HAL_GPIO_Init+0x1e2>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_GPIO_Init+0x1e2>
 8005164:	2300      	movs	r3, #0
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	f002 0203 	and.w	r2, r2, #3
 800516c:	0092      	lsls	r2, r2, #2
 800516e:	4093      	lsls	r3, r2
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005176:	4937      	ldr	r1, [pc, #220]	; (8005254 <HAL_GPIO_Init+0x2d0>)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	089b      	lsrs	r3, r3, #2
 800517c:	3302      	adds	r3, #2
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005184:	4b37      	ldr	r3, [pc, #220]	; (8005264 <HAL_GPIO_Init+0x2e0>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	43db      	mvns	r3, r3
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4013      	ands	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80051a8:	4a2e      	ldr	r2, [pc, #184]	; (8005264 <HAL_GPIO_Init+0x2e0>)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051ae:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <HAL_GPIO_Init+0x2e0>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80051d2:	4a24      	ldr	r2, [pc, #144]	; (8005264 <HAL_GPIO_Init+0x2e0>)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051d8:	4b22      	ldr	r3, [pc, #136]	; (8005264 <HAL_GPIO_Init+0x2e0>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4013      	ands	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80051fc:	4a19      	ldr	r2, [pc, #100]	; (8005264 <HAL_GPIO_Init+0x2e0>)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005202:	4b18      	ldr	r3, [pc, #96]	; (8005264 <HAL_GPIO_Init+0x2e0>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	43db      	mvns	r3, r3
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4013      	ands	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005226:	4a0f      	ldr	r2, [pc, #60]	; (8005264 <HAL_GPIO_Init+0x2e0>)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3301      	adds	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	f47f aea9 	bne.w	8004f94 <HAL_GPIO_Init+0x10>
  }
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40021000 	.word	0x40021000
 8005254:	40010000 	.word	0x40010000
 8005258:	48000400 	.word	0x48000400
 800525c:	48000800 	.word	0x48000800
 8005260:	48000c00 	.word	0x48000c00
 8005264:	40010400 	.word	0x40010400

08005268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	887b      	ldrh	r3, [r7, #2]
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	e001      	b.n	800528a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
 80052a4:	4613      	mov	r3, r2
 80052a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052a8:	787b      	ldrb	r3, [r7, #1]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052ae:	887a      	ldrh	r2, [r7, #2]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052b4:	e002      	b.n	80052bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052b6:	887a      	ldrh	r2, [r7, #2]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052d8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f001 b823 	b.w	8006334 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 817d 	beq.w	80055fe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005304:	4bbc      	ldr	r3, [pc, #752]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 030c 	and.w	r3, r3, #12
 800530c:	2b04      	cmp	r3, #4
 800530e:	d00c      	beq.n	800532a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005310:	4bb9      	ldr	r3, [pc, #740]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f003 030c 	and.w	r3, r3, #12
 8005318:	2b08      	cmp	r3, #8
 800531a:	d15c      	bne.n	80053d6 <HAL_RCC_OscConfig+0x10e>
 800531c:	4bb6      	ldr	r3, [pc, #728]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005328:	d155      	bne.n	80053d6 <HAL_RCC_OscConfig+0x10e>
 800532a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800532e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800533e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	d102      	bne.n	800535c <HAL_RCC_OscConfig+0x94>
 8005356:	4ba8      	ldr	r3, [pc, #672]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	e015      	b.n	8005388 <HAL_RCC_OscConfig+0xc0>
 800535c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005360:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005364:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005368:	fa93 f3a3 	rbit	r3, r3
 800536c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005374:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005378:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800537c:	fa93 f3a3 	rbit	r3, r3
 8005380:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005384:	4b9c      	ldr	r3, [pc, #624]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800538c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005390:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005394:	fa92 f2a2 	rbit	r2, r2
 8005398:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800539c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80053a0:	fab2 f282 	clz	r2, r2
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	f042 0220 	orr.w	r2, r2, #32
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	f002 021f 	and.w	r2, r2, #31
 80053b0:	2101      	movs	r1, #1
 80053b2:	fa01 f202 	lsl.w	r2, r1, r2
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 811f 	beq.w	80055fc <HAL_RCC_OscConfig+0x334>
 80053be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f040 8116 	bne.w	80055fc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f000 bfaf 	b.w	8006334 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e6:	d106      	bne.n	80053f6 <HAL_RCC_OscConfig+0x12e>
 80053e8:	4b83      	ldr	r3, [pc, #524]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a82      	ldr	r2, [pc, #520]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 80053ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	e036      	b.n	8005464 <HAL_RCC_OscConfig+0x19c>
 80053f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10c      	bne.n	8005420 <HAL_RCC_OscConfig+0x158>
 8005406:	4b7c      	ldr	r3, [pc, #496]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a7b      	ldr	r2, [pc, #492]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 800540c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	4b79      	ldr	r3, [pc, #484]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a78      	ldr	r2, [pc, #480]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e021      	b.n	8005464 <HAL_RCC_OscConfig+0x19c>
 8005420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005424:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005430:	d10c      	bne.n	800544c <HAL_RCC_OscConfig+0x184>
 8005432:	4b71      	ldr	r3, [pc, #452]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a70      	ldr	r2, [pc, #448]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b6e      	ldr	r3, [pc, #440]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a6d      	ldr	r2, [pc, #436]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e00b      	b.n	8005464 <HAL_RCC_OscConfig+0x19c>
 800544c:	4b6a      	ldr	r3, [pc, #424]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a69      	ldr	r2, [pc, #420]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	4b67      	ldr	r3, [pc, #412]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a66      	ldr	r2, [pc, #408]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 800545e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005462:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005464:	4b64      	ldr	r3, [pc, #400]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	f023 020f 	bic.w	r2, r3, #15
 800546c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	495f      	ldr	r1, [pc, #380]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 800547a:	4313      	orrs	r3, r2
 800547c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800547e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d059      	beq.n	8005542 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fe fb3f 	bl	8003b10 <HAL_GetTick>
 8005492:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005496:	e00a      	b.n	80054ae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005498:	f7fe fb3a 	bl	8003b10 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b64      	cmp	r3, #100	; 0x64
 80054a6:	d902      	bls.n	80054ae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	f000 bf43 	b.w	8006334 <HAL_RCC_OscConfig+0x106c>
 80054ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80054ba:	fa93 f3a3 	rbit	r3, r3
 80054be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80054c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c6:	fab3 f383 	clz	r3, r3
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d102      	bne.n	80054e0 <HAL_RCC_OscConfig+0x218>
 80054da:	4b47      	ldr	r3, [pc, #284]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	e015      	b.n	800550c <HAL_RCC_OscConfig+0x244>
 80054e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054e4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80054ec:	fa93 f3a3 	rbit	r3, r3
 80054f0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80054f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054f8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80054fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005500:	fa93 f3a3 	rbit	r3, r3
 8005504:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005508:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005510:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005514:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005518:	fa92 f2a2 	rbit	r2, r2
 800551c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005520:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005524:	fab2 f282 	clz	r2, r2
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	f042 0220 	orr.w	r2, r2, #32
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	f002 021f 	and.w	r2, r2, #31
 8005534:	2101      	movs	r1, #1
 8005536:	fa01 f202 	lsl.w	r2, r1, r2
 800553a:	4013      	ands	r3, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ab      	beq.n	8005498 <HAL_RCC_OscConfig+0x1d0>
 8005540:	e05d      	b.n	80055fe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005542:	f7fe fae5 	bl	8003b10 <HAL_GetTick>
 8005546:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800554c:	f7fe fae0 	bl	8003b10 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b64      	cmp	r3, #100	; 0x64
 800555a:	d902      	bls.n	8005562 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	f000 bee9 	b.w	8006334 <HAL_RCC_OscConfig+0x106c>
 8005562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005566:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800556e:	fa93 f3a3 	rbit	r3, r3
 8005572:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005576:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d102      	bne.n	8005594 <HAL_RCC_OscConfig+0x2cc>
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	e015      	b.n	80055c0 <HAL_RCC_OscConfig+0x2f8>
 8005594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005598:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80055a0:	fa93 f3a3 	rbit	r3, r3
 80055a4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80055a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055ac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80055b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80055b4:	fa93 f3a3 	rbit	r3, r3
 80055b8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80055bc:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <HAL_RCC_OscConfig+0x330>)
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055c4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80055c8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80055cc:	fa92 f2a2 	rbit	r2, r2
 80055d0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80055d4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80055d8:	fab2 f282 	clz	r2, r2
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	f042 0220 	orr.w	r2, r2, #32
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	f002 021f 	and.w	r2, r2, #31
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f202 	lsl.w	r2, r1, r2
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ab      	bne.n	800554c <HAL_RCC_OscConfig+0x284>
 80055f4:	e003      	b.n	80055fe <HAL_RCC_OscConfig+0x336>
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005602:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 817d 	beq.w	800590e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005614:	4ba6      	ldr	r3, [pc, #664]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005620:	4ba3      	ldr	r3, [pc, #652]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 030c 	and.w	r3, r3, #12
 8005628:	2b08      	cmp	r3, #8
 800562a:	d172      	bne.n	8005712 <HAL_RCC_OscConfig+0x44a>
 800562c:	4ba0      	ldr	r3, [pc, #640]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d16c      	bne.n	8005712 <HAL_RCC_OscConfig+0x44a>
 8005638:	2302      	movs	r3, #2
 800563a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005642:	fa93 f3a3 	rbit	r3, r3
 8005646:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800564a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	d102      	bne.n	8005668 <HAL_RCC_OscConfig+0x3a0>
 8005662:	4b93      	ldr	r3, [pc, #588]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	e013      	b.n	8005690 <HAL_RCC_OscConfig+0x3c8>
 8005668:	2302      	movs	r3, #2
 800566a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005672:	fa93 f3a3 	rbit	r3, r3
 8005676:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800567a:	2302      	movs	r3, #2
 800567c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005680:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005684:	fa93 f3a3 	rbit	r3, r3
 8005688:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800568c:	4b88      	ldr	r3, [pc, #544]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2202      	movs	r2, #2
 8005692:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005696:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800569a:	fa92 f2a2 	rbit	r2, r2
 800569e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80056a2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80056a6:	fab2 f282 	clz	r2, r2
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	f042 0220 	orr.w	r2, r2, #32
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	f002 021f 	and.w	r2, r2, #31
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f202 	lsl.w	r2, r1, r2
 80056bc:	4013      	ands	r3, r2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCC_OscConfig+0x410>
 80056c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d002      	beq.n	80056d8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f000 be2e 	b.w	8006334 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d8:	4b75      	ldr	r3, [pc, #468]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	21f8      	movs	r1, #248	; 0xf8
 80056ee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80056f6:	fa91 f1a1 	rbit	r1, r1
 80056fa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80056fe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005702:	fab1 f181 	clz	r1, r1
 8005706:	b2c9      	uxtb	r1, r1
 8005708:	408b      	lsls	r3, r1
 800570a:	4969      	ldr	r1, [pc, #420]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 800570c:	4313      	orrs	r3, r2
 800570e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005710:	e0fd      	b.n	800590e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 8088 	beq.w	8005834 <HAL_RCC_OscConfig+0x56c>
 8005724:	2301      	movs	r3, #1
 8005726:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800572e:	fa93 f3a3 	rbit	r3, r3
 8005732:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005736:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005744:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	461a      	mov	r2, r3
 800574c:	2301      	movs	r3, #1
 800574e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005750:	f7fe f9de 	bl	8003b10 <HAL_GetTick>
 8005754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005758:	e00a      	b.n	8005770 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800575a:	f7fe f9d9 	bl	8003b10 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d902      	bls.n	8005770 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	f000 bde2 	b.w	8006334 <HAL_RCC_OscConfig+0x106c>
 8005770:	2302      	movs	r3, #2
 8005772:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005782:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005786:	fab3 f383 	clz	r3, r3
 800578a:	b2db      	uxtb	r3, r3
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	d102      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4d8>
 800579a:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	e013      	b.n	80057c8 <HAL_RCC_OscConfig+0x500>
 80057a0:	2302      	movs	r3, #2
 80057a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80057aa:	fa93 f3a3 	rbit	r3, r3
 80057ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80057b2:	2302      	movs	r3, #2
 80057b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80057b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80057c4:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2202      	movs	r2, #2
 80057ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80057ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80057d2:	fa92 f2a2 	rbit	r2, r2
 80057d6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80057da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80057de:	fab2 f282 	clz	r2, r2
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	f042 0220 	orr.w	r2, r2, #32
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	f002 021f 	and.w	r2, r2, #31
 80057ee:	2101      	movs	r1, #1
 80057f0:	fa01 f202 	lsl.w	r2, r1, r2
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0af      	beq.n	800575a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fa:	4b2d      	ldr	r3, [pc, #180]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	21f8      	movs	r1, #248	; 0xf8
 8005810:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005814:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005818:	fa91 f1a1 	rbit	r1, r1
 800581c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005820:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005824:	fab1 f181 	clz	r1, r1
 8005828:	b2c9      	uxtb	r1, r1
 800582a:	408b      	lsls	r3, r1
 800582c:	4920      	ldr	r1, [pc, #128]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 800582e:	4313      	orrs	r3, r2
 8005830:	600b      	str	r3, [r1, #0]
 8005832:	e06c      	b.n	800590e <HAL_RCC_OscConfig+0x646>
 8005834:	2301      	movs	r3, #1
 8005836:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800583e:	fa93 f3a3 	rbit	r3, r3
 8005842:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005846:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800584a:	fab3 f383 	clz	r3, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005854:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	461a      	mov	r2, r3
 800585c:	2300      	movs	r3, #0
 800585e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fe f956 	bl	8003b10 <HAL_GetTick>
 8005864:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005868:	e00a      	b.n	8005880 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800586a:	f7fe f951 	bl	8003b10 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d902      	bls.n	8005880 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	f000 bd5a 	b.w	8006334 <HAL_RCC_OscConfig+0x106c>
 8005880:	2302      	movs	r3, #2
 8005882:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005886:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800588a:	fa93 f3a3 	rbit	r3, r3
 800588e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005896:	fab3 f383 	clz	r3, r3
 800589a:	b2db      	uxtb	r3, r3
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d104      	bne.n	80058b4 <HAL_RCC_OscConfig+0x5ec>
 80058aa:	4b01      	ldr	r3, [pc, #4]	; (80058b0 <HAL_RCC_OscConfig+0x5e8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	e015      	b.n	80058dc <HAL_RCC_OscConfig+0x614>
 80058b0:	40021000 	.word	0x40021000
 80058b4:	2302      	movs	r3, #2
 80058b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058be:	fa93 f3a3 	rbit	r3, r3
 80058c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058c6:	2302      	movs	r3, #2
 80058c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058d0:	fa93 f3a3 	rbit	r3, r3
 80058d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80058d8:	4bc8      	ldr	r3, [pc, #800]	; (8005bfc <HAL_RCC_OscConfig+0x934>)
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2202      	movs	r2, #2
 80058de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80058e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80058e6:	fa92 f2a2 	rbit	r2, r2
 80058ea:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80058ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80058f2:	fab2 f282 	clz	r2, r2
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	f042 0220 	orr.w	r2, r2, #32
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	f002 021f 	and.w	r2, r2, #31
 8005902:	2101      	movs	r1, #1
 8005904:	fa01 f202 	lsl.w	r2, r1, r2
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1ad      	bne.n	800586a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800590e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8110 	beq.w	8005b44 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005928:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d079      	beq.n	8005a28 <HAL_RCC_OscConfig+0x760>
 8005934:	2301      	movs	r3, #1
 8005936:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800593e:	fa93 f3a3 	rbit	r3, r3
 8005942:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800594a:	fab3 f383 	clz	r3, r3
 800594e:	b2db      	uxtb	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	4bab      	ldr	r3, [pc, #684]	; (8005c00 <HAL_RCC_OscConfig+0x938>)
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	461a      	mov	r2, r3
 800595a:	2301      	movs	r3, #1
 800595c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595e:	f7fe f8d7 	bl	8003b10 <HAL_GetTick>
 8005962:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005966:	e00a      	b.n	800597e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005968:	f7fe f8d2 	bl	8003b10 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d902      	bls.n	800597e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	f000 bcdb 	b.w	8006334 <HAL_RCC_OscConfig+0x106c>
 800597e:	2302      	movs	r3, #2
 8005980:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005984:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005988:	fa93 f3a3 	rbit	r3, r3
 800598c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005994:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005998:	2202      	movs	r2, #2
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	fa93 f2a3 	rbit	r2, r3
 80059aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059bc:	2202      	movs	r2, #2
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	fa93 f2a3 	rbit	r2, r3
 80059ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d8:	4b88      	ldr	r3, [pc, #544]	; (8005bfc <HAL_RCC_OscConfig+0x934>)
 80059da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059e4:	2102      	movs	r1, #2
 80059e6:	6019      	str	r1, [r3, #0]
 80059e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	fa93 f1a3 	rbit	r1, r3
 80059f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059fe:	6019      	str	r1, [r3, #0]
  return result;
 8005a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	fab3 f383 	clz	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0a0      	beq.n	8005968 <HAL_RCC_OscConfig+0x6a0>
 8005a26:	e08d      	b.n	8005b44 <HAL_RCC_OscConfig+0x87c>
 8005a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	fa93 f2a3 	rbit	r2, r3
 8005a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a4a:	601a      	str	r2, [r3, #0]
  return result;
 8005a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a56:	fab3 f383 	clz	r3, r3
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4b68      	ldr	r3, [pc, #416]	; (8005c00 <HAL_RCC_OscConfig+0x938>)
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	461a      	mov	r2, r3
 8005a66:	2300      	movs	r3, #0
 8005a68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6a:	f7fe f851 	bl	8003b10 <HAL_GetTick>
 8005a6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fe f84c 	bl	8003b10 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d902      	bls.n	8005a8a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	f000 bc55 	b.w	8006334 <HAL_RCC_OscConfig+0x106c>
 8005a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005a92:	2202      	movs	r2, #2
 8005a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	fa93 f2a3 	rbit	r2, r3
 8005aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005abe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	fa93 f2a3 	rbit	r2, r3
 8005ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ada:	2202      	movs	r2, #2
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	fa93 f2a3 	rbit	r2, r3
 8005aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005af4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af6:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <HAL_RCC_OscConfig+0x934>)
 8005af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005afe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b02:	2102      	movs	r1, #2
 8005b04:	6019      	str	r1, [r3, #0]
 8005b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	fa93 f1a3 	rbit	r1, r3
 8005b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005b1c:	6019      	str	r1, [r3, #0]
  return result;
 8005b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b22:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	fab3 f383 	clz	r3, r3
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d197      	bne.n	8005a74 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 81a1 	beq.w	8005e9c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b60:	4b26      	ldr	r3, [pc, #152]	; (8005bfc <HAL_RCC_OscConfig+0x934>)
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d116      	bne.n	8005b9a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b6c:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <HAL_RCC_OscConfig+0x934>)
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <HAL_RCC_OscConfig+0x934>)
 8005b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b76:	61d3      	str	r3, [r2, #28]
 8005b78:	4b20      	ldr	r3, [pc, #128]	; (8005bfc <HAL_RCC_OscConfig+0x934>)
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b84:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b8e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005b92:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9a:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <HAL_RCC_OscConfig+0x93c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11a      	bne.n	8005bdc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ba6:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <HAL_RCC_OscConfig+0x93c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <HAL_RCC_OscConfig+0x93c>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb2:	f7fd ffad 	bl	8003b10 <HAL_GetTick>
 8005bb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bba:	e009      	b.n	8005bd0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbc:	f7fd ffa8 	bl	8003b10 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b64      	cmp	r3, #100	; 0x64
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e3b1      	b.n	8006334 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <HAL_RCC_OscConfig+0x93c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0ef      	beq.n	8005bbc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10d      	bne.n	8005c08 <HAL_RCC_OscConfig+0x940>
 8005bec:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <HAL_RCC_OscConfig+0x934>)
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	4a02      	ldr	r2, [pc, #8]	; (8005bfc <HAL_RCC_OscConfig+0x934>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	6213      	str	r3, [r2, #32]
 8005bf8:	e03c      	b.n	8005c74 <HAL_RCC_OscConfig+0x9ac>
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	10908120 	.word	0x10908120
 8005c04:	40007000 	.word	0x40007000
 8005c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10c      	bne.n	8005c32 <HAL_RCC_OscConfig+0x96a>
 8005c18:	4bc1      	ldr	r3, [pc, #772]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	4ac0      	ldr	r2, [pc, #768]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	6213      	str	r3, [r2, #32]
 8005c24:	4bbe      	ldr	r3, [pc, #760]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	4abd      	ldr	r2, [pc, #756]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c2a:	f023 0304 	bic.w	r3, r3, #4
 8005c2e:	6213      	str	r3, [r2, #32]
 8005c30:	e020      	b.n	8005c74 <HAL_RCC_OscConfig+0x9ac>
 8005c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCC_OscConfig+0x994>
 8005c42:	4bb7      	ldr	r3, [pc, #732]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	4ab6      	ldr	r2, [pc, #728]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c48:	f043 0304 	orr.w	r3, r3, #4
 8005c4c:	6213      	str	r3, [r2, #32]
 8005c4e:	4bb4      	ldr	r3, [pc, #720]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	4ab3      	ldr	r2, [pc, #716]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	6213      	str	r3, [r2, #32]
 8005c5a:	e00b      	b.n	8005c74 <HAL_RCC_OscConfig+0x9ac>
 8005c5c:	4bb0      	ldr	r3, [pc, #704]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	4aaf      	ldr	r2, [pc, #700]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	6213      	str	r3, [r2, #32]
 8005c68:	4bad      	ldr	r3, [pc, #692]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	4aac      	ldr	r2, [pc, #688]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005c6e:	f023 0304 	bic.w	r3, r3, #4
 8005c72:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8081 	beq.w	8005d88 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c86:	f7fd ff43 	bl	8003b10 <HAL_GetTick>
 8005c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8e:	e00b      	b.n	8005ca8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c90:	f7fd ff3e 	bl	8003b10 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e345      	b.n	8006334 <HAL_RCC_OscConfig+0x106c>
 8005ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	fa93 f2a3 	rbit	r2, r3
 8005cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cc6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cd0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cdc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	fa93 f2a3 	rbit	r2, r3
 8005ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005cee:	601a      	str	r2, [r3, #0]
  return result;
 8005cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cf4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005cf8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cfa:	fab3 f383 	clz	r3, r3
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f043 0302 	orr.w	r3, r3, #2
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d102      	bne.n	8005d14 <HAL_RCC_OscConfig+0xa4c>
 8005d0e:	4b84      	ldr	r3, [pc, #528]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	e013      	b.n	8005d3c <HAL_RCC_OscConfig+0xa74>
 8005d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d18:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	fa93 f2a3 	rbit	r2, r3
 8005d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d32:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	4b79      	ldr	r3, [pc, #484]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d40:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005d44:	2102      	movs	r1, #2
 8005d46:	6011      	str	r1, [r2, #0]
 8005d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d4c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	fa92 f1a2 	rbit	r1, r2
 8005d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d5a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005d5e:	6011      	str	r1, [r2, #0]
  return result;
 8005d60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d64:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	fab2 f282 	clz	r2, r2
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	f002 021f 	and.w	r2, r2, #31
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d084      	beq.n	8005c90 <HAL_RCC_OscConfig+0x9c8>
 8005d86:	e07f      	b.n	8005e88 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d88:	f7fd fec2 	bl	8003b10 <HAL_GetTick>
 8005d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d90:	e00b      	b.n	8005daa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fd febd 	bl	8003b10 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e2c4      	b.n	8006334 <HAL_RCC_OscConfig+0x106c>
 8005daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005db2:	2202      	movs	r2, #2
 8005db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	fa93 f2a3 	rbit	r2, r3
 8005dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dc8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dde:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	fa93 f2a3 	rbit	r2, r3
 8005de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005df0:	601a      	str	r2, [r3, #0]
  return result;
 8005df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005dfa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dfc:	fab3 f383 	clz	r3, r3
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f043 0302 	orr.w	r3, r3, #2
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d102      	bne.n	8005e16 <HAL_RCC_OscConfig+0xb4e>
 8005e10:	4b43      	ldr	r3, [pc, #268]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	e013      	b.n	8005e3e <HAL_RCC_OscConfig+0xb76>
 8005e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e1a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005e1e:	2202      	movs	r2, #2
 8005e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	fa93 f2a3 	rbit	r2, r3
 8005e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e34:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	4b39      	ldr	r3, [pc, #228]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e42:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005e46:	2102      	movs	r1, #2
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e4e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	fa92 f1a2 	rbit	r1, r2
 8005e58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e5c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005e60:	6011      	str	r1, [r2, #0]
  return result;
 8005e62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e66:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	fab2 f282 	clz	r2, r2
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	f002 021f 	and.w	r2, r2, #31
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d184      	bne.n	8005d92 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e88:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e90:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8242 	beq.w	8006332 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eae:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <HAL_RCC_OscConfig+0xc58>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	f000 8213 	beq.w	80062e2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ec0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	f040 8162 	bne.w	8006192 <HAL_RCC_OscConfig+0xeca>
 8005ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005ed6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	fa93 f2a3 	rbit	r2, r3
 8005eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005ef2:	601a      	str	r2, [r3, #0]
  return result;
 8005ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ef8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005efc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efe:	fab3 f383 	clz	r3, r3
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2300      	movs	r3, #0
 8005f12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f14:	f7fd fdfc 	bl	8003b10 <HAL_GetTick>
 8005f18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f1c:	e00c      	b.n	8005f38 <HAL_RCC_OscConfig+0xc70>
 8005f1e:	bf00      	nop
 8005f20:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f24:	f7fd fdf4 	bl	8003b10 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e1fd      	b.n	8006334 <HAL_RCC_OscConfig+0x106c>
 8005f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f3c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005f40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f4a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	fa93 f2a3 	rbit	r2, r3
 8005f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f58:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005f5c:	601a      	str	r2, [r3, #0]
  return result;
 8005f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f62:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005f66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f68:	fab3 f383 	clz	r3, r3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d102      	bne.n	8005f82 <HAL_RCC_OscConfig+0xcba>
 8005f7c:	4bb0      	ldr	r3, [pc, #704]	; (8006240 <HAL_RCC_OscConfig+0xf78>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	e027      	b.n	8005fd2 <HAL_RCC_OscConfig+0xd0a>
 8005f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f86:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	fa93 f2a3 	rbit	r2, r3
 8005f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fa2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	fa93 f2a3 	rbit	r2, r3
 8005fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	4b9c      	ldr	r3, [pc, #624]	; (8006240 <HAL_RCC_OscConfig+0xf78>)
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fd6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005fda:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005fde:	6011      	str	r1, [r2, #0]
 8005fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fe4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	fa92 f1a2 	rbit	r1, r2
 8005fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ff2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005ff6:	6011      	str	r1, [r2, #0]
  return result;
 8005ff8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ffc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	fab2 f282 	clz	r2, r2
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	f042 0220 	orr.w	r2, r2, #32
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	f002 021f 	and.w	r2, r2, #31
 8006012:	2101      	movs	r1, #1
 8006014:	fa01 f202 	lsl.w	r2, r1, r2
 8006018:	4013      	ands	r3, r2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d182      	bne.n	8005f24 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800601e:	4b88      	ldr	r3, [pc, #544]	; (8006240 <HAL_RCC_OscConfig+0xf78>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800602a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	430b      	orrs	r3, r1
 8006040:	497f      	ldr	r1, [pc, #508]	; (8006240 <HAL_RCC_OscConfig+0xf78>)
 8006042:	4313      	orrs	r3, r2
 8006044:	604b      	str	r3, [r1, #4]
 8006046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800604e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006058:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	fa93 f2a3 	rbit	r2, r3
 8006062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006066:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800606a:	601a      	str	r2, [r3, #0]
  return result;
 800606c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006070:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006074:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006076:	fab3 f383 	clz	r3, r3
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006080:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	461a      	mov	r2, r3
 8006088:	2301      	movs	r3, #1
 800608a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608c:	f7fd fd40 	bl	8003b10 <HAL_GetTick>
 8006090:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006094:	e009      	b.n	80060aa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006096:	f7fd fd3b 	bl	8003b10 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e144      	b.n	8006334 <HAL_RCC_OscConfig+0x106c>
 80060aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80060b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	fa93 f2a3 	rbit	r2, r3
 80060c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80060ce:	601a      	str	r2, [r3, #0]
  return result;
 80060d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060d4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80060d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060da:	fab3 f383 	clz	r3, r3
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d102      	bne.n	80060f4 <HAL_RCC_OscConfig+0xe2c>
 80060ee:	4b54      	ldr	r3, [pc, #336]	; (8006240 <HAL_RCC_OscConfig+0xf78>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	e027      	b.n	8006144 <HAL_RCC_OscConfig+0xe7c>
 80060f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060f8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80060fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006106:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	fa93 f2a3 	rbit	r2, r3
 8006110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006114:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800611e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006122:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800612c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	fa93 f2a3 	rbit	r2, r3
 8006136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800613a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	4b3f      	ldr	r3, [pc, #252]	; (8006240 <HAL_RCC_OscConfig+0xf78>)
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006148:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800614c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006156:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	fa92 f1a2 	rbit	r1, r2
 8006160:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006164:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006168:	6011      	str	r1, [r2, #0]
  return result;
 800616a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800616e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	fab2 f282 	clz	r2, r2
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	f042 0220 	orr.w	r2, r2, #32
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	f002 021f 	and.w	r2, r2, #31
 8006184:	2101      	movs	r1, #1
 8006186:	fa01 f202 	lsl.w	r2, r1, r2
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d082      	beq.n	8006096 <HAL_RCC_OscConfig+0xdce>
 8006190:	e0cf      	b.n	8006332 <HAL_RCC_OscConfig+0x106a>
 8006192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006196:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800619a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800619e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061a4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	fa93 f2a3 	rbit	r2, r3
 80061ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061b2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80061b6:	601a      	str	r2, [r3, #0]
  return result;
 80061b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061bc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80061c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c2:	fab3 f383 	clz	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	461a      	mov	r2, r3
 80061d4:	2300      	movs	r3, #0
 80061d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d8:	f7fd fc9a 	bl	8003b10 <HAL_GetTick>
 80061dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061e0:	e009      	b.n	80061f6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e2:	f7fd fc95 	bl	8003b10 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e09e      	b.n	8006334 <HAL_RCC_OscConfig+0x106c>
 80061f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061fa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80061fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006208:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	fa93 f2a3 	rbit	r2, r3
 8006212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006216:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800621a:	601a      	str	r2, [r3, #0]
  return result;
 800621c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006220:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006224:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006226:	fab3 f383 	clz	r3, r3
 800622a:	b2db      	uxtb	r3, r3
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f043 0301 	orr.w	r3, r3, #1
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b01      	cmp	r3, #1
 8006238:	d104      	bne.n	8006244 <HAL_RCC_OscConfig+0xf7c>
 800623a:	4b01      	ldr	r3, [pc, #4]	; (8006240 <HAL_RCC_OscConfig+0xf78>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	e029      	b.n	8006294 <HAL_RCC_OscConfig+0xfcc>
 8006240:	40021000 	.word	0x40021000
 8006244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006248:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800624c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006256:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	fa93 f2a3 	rbit	r2, r3
 8006260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006264:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800626e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006272:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800627c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	fa93 f2a3 	rbit	r2, r3
 8006286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800628a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <HAL_RCC_OscConfig+0x1078>)
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006298:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800629c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80062a0:	6011      	str	r1, [r2, #0]
 80062a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062a6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	fa92 f1a2 	rbit	r1, r2
 80062b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062b4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80062b8:	6011      	str	r1, [r2, #0]
  return result;
 80062ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062be:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	fab2 f282 	clz	r2, r2
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	f042 0220 	orr.w	r2, r2, #32
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	f002 021f 	and.w	r2, r2, #31
 80062d4:	2101      	movs	r1, #1
 80062d6:	fa01 f202 	lsl.w	r2, r1, r2
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d180      	bne.n	80061e2 <HAL_RCC_OscConfig+0xf1a>
 80062e0:	e027      	b.n	8006332 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e01e      	b.n	8006334 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <HAL_RCC_OscConfig+0x1078>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80062fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006302:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800630a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	429a      	cmp	r2, r3
 8006314:	d10b      	bne.n	800632e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006316:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800631a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800631e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800632a:	429a      	cmp	r2, r3
 800632c:	d001      	beq.n	8006332 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40021000 	.word	0x40021000

08006344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b09e      	sub	sp, #120	; 0x78
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e162      	b.n	8006622 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800635c:	4b90      	ldr	r3, [pc, #576]	; (80065a0 <HAL_RCC_ClockConfig+0x25c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d910      	bls.n	800638c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636a:	4b8d      	ldr	r3, [pc, #564]	; (80065a0 <HAL_RCC_ClockConfig+0x25c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f023 0207 	bic.w	r2, r3, #7
 8006372:	498b      	ldr	r1, [pc, #556]	; (80065a0 <HAL_RCC_ClockConfig+0x25c>)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	4313      	orrs	r3, r2
 8006378:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800637a:	4b89      	ldr	r3, [pc, #548]	; (80065a0 <HAL_RCC_ClockConfig+0x25c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d001      	beq.n	800638c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e14a      	b.n	8006622 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006398:	4b82      	ldr	r3, [pc, #520]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	497f      	ldr	r1, [pc, #508]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80dc 	beq.w	8006570 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d13c      	bne.n	800643a <HAL_RCC_ClockConfig+0xf6>
 80063c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c8:	fa93 f3a3 	rbit	r3, r3
 80063cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d0:	fab3 f383 	clz	r3, r3
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d102      	bne.n	80063ea <HAL_RCC_ClockConfig+0xa6>
 80063e4:	4b6f      	ldr	r3, [pc, #444]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	e00f      	b.n	800640a <HAL_RCC_ClockConfig+0xc6>
 80063ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063f2:	fa93 f3a3 	rbit	r3, r3
 80063f6:	667b      	str	r3, [r7, #100]	; 0x64
 80063f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063fc:	663b      	str	r3, [r7, #96]	; 0x60
 80063fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006400:	fa93 f3a3 	rbit	r3, r3
 8006404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006406:	4b67      	ldr	r3, [pc, #412]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800640e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006410:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006412:	fa92 f2a2 	rbit	r2, r2
 8006416:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800641a:	fab2 f282 	clz	r2, r2
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	f042 0220 	orr.w	r2, r2, #32
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	f002 021f 	and.w	r2, r2, #31
 800642a:	2101      	movs	r1, #1
 800642c:	fa01 f202 	lsl.w	r2, r1, r2
 8006430:	4013      	ands	r3, r2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d17b      	bne.n	800652e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e0f3      	b.n	8006622 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d13c      	bne.n	80064bc <HAL_RCC_ClockConfig+0x178>
 8006442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006446:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800644a:	fa93 f3a3 	rbit	r3, r3
 800644e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006452:	fab3 f383 	clz	r3, r3
 8006456:	b2db      	uxtb	r3, r3
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b01      	cmp	r3, #1
 8006464:	d102      	bne.n	800646c <HAL_RCC_ClockConfig+0x128>
 8006466:	4b4f      	ldr	r3, [pc, #316]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	e00f      	b.n	800648c <HAL_RCC_ClockConfig+0x148>
 800646c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006470:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006474:	fa93 f3a3 	rbit	r3, r3
 8006478:	647b      	str	r3, [r7, #68]	; 0x44
 800647a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800647e:	643b      	str	r3, [r7, #64]	; 0x40
 8006480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006482:	fa93 f3a3 	rbit	r3, r3
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006488:	4b46      	ldr	r3, [pc, #280]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006490:	63ba      	str	r2, [r7, #56]	; 0x38
 8006492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006494:	fa92 f2a2 	rbit	r2, r2
 8006498:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800649a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800649c:	fab2 f282 	clz	r2, r2
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	f042 0220 	orr.w	r2, r2, #32
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	f002 021f 	and.w	r2, r2, #31
 80064ac:	2101      	movs	r1, #1
 80064ae:	fa01 f202 	lsl.w	r2, r1, r2
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d13a      	bne.n	800652e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0b2      	b.n	8006622 <HAL_RCC_ClockConfig+0x2de>
 80064bc:	2302      	movs	r3, #2
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	fa93 f3a3 	rbit	r3, r3
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ca:	fab3 f383 	clz	r3, r3
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d102      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x1a0>
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	e00d      	b.n	8006500 <HAL_RCC_ClockConfig+0x1bc>
 80064e4:	2302      	movs	r3, #2
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
 80064f0:	2302      	movs	r3, #2
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	fa93 f3a3 	rbit	r3, r3
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	4b29      	ldr	r3, [pc, #164]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	2202      	movs	r2, #2
 8006502:	61ba      	str	r2, [r7, #24]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	fa92 f2a2 	rbit	r2, r2
 800650a:	617a      	str	r2, [r7, #20]
  return result;
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	fab2 f282 	clz	r2, r2
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	f042 0220 	orr.w	r2, r2, #32
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	f002 021f 	and.w	r2, r2, #31
 800651e:	2101      	movs	r1, #1
 8006520:	fa01 f202 	lsl.w	r2, r1, r2
 8006524:	4013      	ands	r3, r2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e079      	b.n	8006622 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800652e:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f023 0203 	bic.w	r2, r3, #3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	491a      	ldr	r1, [pc, #104]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 800653c:	4313      	orrs	r3, r2
 800653e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006540:	f7fd fae6 	bl	8003b10 <HAL_GetTick>
 8006544:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006546:	e00a      	b.n	800655e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006548:	f7fd fae2 	bl	8003b10 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f241 3288 	movw	r2, #5000	; 0x1388
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e061      	b.n	8006622 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <HAL_RCC_ClockConfig+0x260>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f003 020c 	and.w	r2, r3, #12
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	429a      	cmp	r2, r3
 800656e:	d1eb      	bne.n	8006548 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_RCC_ClockConfig+0x25c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d214      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657e:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <HAL_RCC_ClockConfig+0x25c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f023 0207 	bic.w	r2, r3, #7
 8006586:	4906      	ldr	r1, [pc, #24]	; (80065a0 <HAL_RCC_ClockConfig+0x25c>)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	4313      	orrs	r3, r2
 800658c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <HAL_RCC_ClockConfig+0x25c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e040      	b.n	8006622 <HAL_RCC_ClockConfig+0x2de>
 80065a0:	40022000 	.word	0x40022000
 80065a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b4:	4b1d      	ldr	r3, [pc, #116]	; (800662c <HAL_RCC_ClockConfig+0x2e8>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	491a      	ldr	r1, [pc, #104]	; (800662c <HAL_RCC_ClockConfig+0x2e8>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d2:	4b16      	ldr	r3, [pc, #88]	; (800662c <HAL_RCC_ClockConfig+0x2e8>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4912      	ldr	r1, [pc, #72]	; (800662c <HAL_RCC_ClockConfig+0x2e8>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80065e6:	f000 f829 	bl	800663c <HAL_RCC_GetSysClockFreq>
 80065ea:	4601      	mov	r1, r0
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <HAL_RCC_ClockConfig+0x2e8>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065f4:	22f0      	movs	r2, #240	; 0xf0
 80065f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	fa92 f2a2 	rbit	r2, r2
 80065fe:	60fa      	str	r2, [r7, #12]
  return result;
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	fab2 f282 	clz	r2, r2
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	40d3      	lsrs	r3, r2
 800660a:	4a09      	ldr	r2, [pc, #36]	; (8006630 <HAL_RCC_ClockConfig+0x2ec>)
 800660c:	5cd3      	ldrb	r3, [r2, r3]
 800660e:	fa21 f303 	lsr.w	r3, r1, r3
 8006612:	4a08      	ldr	r2, [pc, #32]	; (8006634 <HAL_RCC_ClockConfig+0x2f0>)
 8006614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <HAL_RCC_ClockConfig+0x2f4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f7fd fa34 	bl	8003a88 <HAL_InitTick>
  
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3778      	adds	r7, #120	; 0x78
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40021000 	.word	0x40021000
 8006630:	0800a438 	.word	0x0800a438
 8006634:	20000300 	.word	0x20000300
 8006638:	20000304 	.word	0x20000304

0800663c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800663c:	b480      	push	{r7}
 800663e:	b08b      	sub	sp, #44	; 0x2c
 8006640:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	2300      	movs	r3, #0
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006656:	4b29      	ldr	r3, [pc, #164]	; (80066fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 030c 	and.w	r3, r3, #12
 8006662:	2b04      	cmp	r3, #4
 8006664:	d002      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x30>
 8006666:	2b08      	cmp	r3, #8
 8006668:	d003      	beq.n	8006672 <HAL_RCC_GetSysClockFreq+0x36>
 800666a:	e03c      	b.n	80066e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800666c:	4b24      	ldr	r3, [pc, #144]	; (8006700 <HAL_RCC_GetSysClockFreq+0xc4>)
 800666e:	623b      	str	r3, [r7, #32]
      break;
 8006670:	e03c      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006678:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800667c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	fa92 f2a2 	rbit	r2, r2
 8006684:	607a      	str	r2, [r7, #4]
  return result;
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	fab2 f282 	clz	r2, r2
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	40d3      	lsrs	r3, r2
 8006690:	4a1c      	ldr	r2, [pc, #112]	; (8006704 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006692:	5cd3      	ldrb	r3, [r2, r3]
 8006694:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006696:	4b19      	ldr	r3, [pc, #100]	; (80066fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	220f      	movs	r2, #15
 80066a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	fa92 f2a2 	rbit	r2, r2
 80066a8:	60fa      	str	r2, [r7, #12]
  return result;
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	fab2 f282 	clz	r2, r2
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	40d3      	lsrs	r3, r2
 80066b4:	4a14      	ldr	r2, [pc, #80]	; (8006708 <HAL_RCC_GetSysClockFreq+0xcc>)
 80066b6:	5cd3      	ldrb	r3, [r2, r3]
 80066b8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80066c4:	4a0e      	ldr	r2, [pc, #56]	; (8006700 <HAL_RCC_GetSysClockFreq+0xc4>)
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
 80066d4:	e004      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	4a0c      	ldr	r2, [pc, #48]	; (800670c <HAL_RCC_GetSysClockFreq+0xd0>)
 80066da:	fb02 f303 	mul.w	r3, r2, r3
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	623b      	str	r3, [r7, #32]
      break;
 80066e4:	e002      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <HAL_RCC_GetSysClockFreq+0xc4>)
 80066e8:	623b      	str	r3, [r7, #32]
      break;
 80066ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066ec:	6a3b      	ldr	r3, [r7, #32]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	372c      	adds	r7, #44	; 0x2c
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40021000 	.word	0x40021000
 8006700:	007a1200 	.word	0x007a1200
 8006704:	0800a448 	.word	0x0800a448
 8006708:	0800a458 	.word	0x0800a458
 800670c:	003d0900 	.word	0x003d0900

08006710 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b092      	sub	sp, #72	; 0x48
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006720:	2300      	movs	r3, #0
 8006722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80cd 	beq.w	80068ce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006734:	4b86      	ldr	r3, [pc, #536]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10e      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006740:	4b83      	ldr	r3, [pc, #524]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	4a82      	ldr	r2, [pc, #520]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800674a:	61d3      	str	r3, [r2, #28]
 800674c:	4b80      	ldr	r3, [pc, #512]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006754:	60bb      	str	r3, [r7, #8]
 8006756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675e:	4b7d      	ldr	r3, [pc, #500]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006766:	2b00      	cmp	r3, #0
 8006768:	d118      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800676a:	4b7a      	ldr	r3, [pc, #488]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a79      	ldr	r2, [pc, #484]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006774:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006776:	f7fd f9cb 	bl	8003b10 <HAL_GetTick>
 800677a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800677c:	e008      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800677e:	f7fd f9c7 	bl	8003b10 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b64      	cmp	r3, #100	; 0x64
 800678a:	d901      	bls.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e0db      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006790:	4b70      	ldr	r3, [pc, #448]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800679c:	4b6c      	ldr	r3, [pc, #432]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d07d      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d076      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067ba:	4b65      	ldr	r3, [pc, #404]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	fa93 f3a3 	rbit	r3, r3
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067d4:	fab3 f383 	clz	r3, r3
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	4b5e      	ldr	r3, [pc, #376]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	461a      	mov	r2, r3
 80067e4:	2301      	movs	r3, #1
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	fa93 f3a3 	rbit	r3, r3
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067f8:	fab3 f383 	clz	r3, r3
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	4b55      	ldr	r3, [pc, #340]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	461a      	mov	r2, r3
 8006808:	2300      	movs	r3, #0
 800680a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800680c:	4a50      	ldr	r2, [pc, #320]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d045      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800681c:	f7fd f978 	bl	8003b10 <HAL_GetTick>
 8006820:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006822:	e00a      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006824:	f7fd f974 	bl	8003b10 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006832:	4293      	cmp	r3, r2
 8006834:	d901      	bls.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e086      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800683a:	2302      	movs	r3, #2
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	fa93 f3a3 	rbit	r3, r3
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
 8006846:	2302      	movs	r3, #2
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	fa93 f3a3 	rbit	r3, r3
 8006850:	61fb      	str	r3, [r7, #28]
  return result;
 8006852:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006854:	fab3 f383 	clz	r3, r3
 8006858:	b2db      	uxtb	r3, r3
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f043 0302 	orr.w	r3, r3, #2
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d102      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006868:	4b39      	ldr	r3, [pc, #228]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	e007      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800686e:	2302      	movs	r3, #2
 8006870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	fa93 f3a3 	rbit	r3, r3
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	4b35      	ldr	r3, [pc, #212]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2202      	movs	r2, #2
 8006880:	613a      	str	r2, [r7, #16]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	fa92 f2a2 	rbit	r2, r2
 8006888:	60fa      	str	r2, [r7, #12]
  return result;
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	fab2 f282 	clz	r2, r2
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	f002 021f 	and.w	r2, r2, #31
 800689c:	2101      	movs	r1, #1
 800689e:	fa01 f202 	lsl.w	r2, r1, r2
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0bd      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80068a8:	4b29      	ldr	r3, [pc, #164]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4926      	ldr	r1, [pc, #152]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d105      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068c2:	4b23      	ldr	r3, [pc, #140]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	4a22      	ldr	r2, [pc, #136]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	f023 0203 	bic.w	r2, r3, #3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	491a      	ldr	r1, [pc, #104]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068f8:	4b15      	ldr	r3, [pc, #84]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	f023 0210 	bic.w	r2, r3, #16
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	4912      	ldr	r1, [pc, #72]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006906:	4313      	orrs	r3, r2
 8006908:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006916:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	490b      	ldr	r1, [pc, #44]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006924:	4313      	orrs	r3, r2
 8006926:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	4903      	ldr	r1, [pc, #12]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006942:	4313      	orrs	r3, r2
 8006944:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3748      	adds	r7, #72	; 0x48
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40021000 	.word	0x40021000
 8006954:	40007000 	.word	0x40007000
 8006958:	10908100 	.word	0x10908100

0800695c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e095      	b.n	8006a9a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d108      	bne.n	8006988 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800697e:	d009      	beq.n	8006994 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	61da      	str	r2, [r3, #28]
 8006986:	e005      	b.n	8006994 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fc fe2e 	bl	8003610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069d4:	d902      	bls.n	80069dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	e002      	b.n	80069e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80069ea:	d007      	beq.n	80069fc <HAL_SPI_Init+0xa0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069f4:	d002      	beq.n	80069fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3e:	ea42 0103 	orr.w	r1, r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	0c1b      	lsrs	r3, r3, #16
 8006a58:	f003 0204 	and.w	r2, r3, #4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a78:	ea42 0103 	orr.w	r1, r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b088      	sub	sp, #32
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_SPI_Transmit+0x22>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e158      	b.n	8006d76 <HAL_SPI_Transmit+0x2d4>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006acc:	f7fd f820 	bl	8003b10 <HAL_GetTick>
 8006ad0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d002      	beq.n	8006ae8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ae6:	e13d      	b.n	8006d64 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_SPI_Transmit+0x52>
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006af8:	e134      	b.n	8006d64 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2203      	movs	r2, #3
 8006afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	88fa      	ldrh	r2, [r7, #6]
 8006b12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b44:	d10f      	bne.n	8006b66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	d007      	beq.n	8006b84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b8c:	d94b      	bls.n	8006c26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_SPI_Transmit+0xfa>
 8006b96:	8afb      	ldrh	r3, [r7, #22]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d13e      	bne.n	8006c1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	881a      	ldrh	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	1c9a      	adds	r2, r3, #2
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bc0:	e02b      	b.n	8006c1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d112      	bne.n	8006bf6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bf4:	e011      	b.n	8006c1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bf6:	f7fc ff8b 	bl	8003b10 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d803      	bhi.n	8006c0e <HAL_SPI_Transmit+0x16c>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0c:	d102      	bne.n	8006c14 <HAL_SPI_Transmit+0x172>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c18:	e0a4      	b.n	8006d64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1ce      	bne.n	8006bc2 <HAL_SPI_Transmit+0x120>
 8006c24:	e07c      	b.n	8006d20 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <HAL_SPI_Transmit+0x192>
 8006c2e:	8afb      	ldrh	r3, [r7, #22]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d170      	bne.n	8006d16 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d912      	bls.n	8006c64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	881a      	ldrh	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	1c9a      	adds	r2, r3, #2
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b02      	subs	r3, #2
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c62:	e058      	b.n	8006d16 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	330c      	adds	r3, #12
 8006c6e:	7812      	ldrb	r2, [r2, #0]
 8006c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c8a:	e044      	b.n	8006d16 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d12b      	bne.n	8006cf2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d912      	bls.n	8006cca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	881a      	ldrh	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	1c9a      	adds	r2, r3, #2
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b02      	subs	r3, #2
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc8:	e025      	b.n	8006d16 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	7812      	ldrb	r2, [r2, #0]
 8006cd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cf0:	e011      	b.n	8006d16 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf2:	f7fc ff0d 	bl	8003b10 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d803      	bhi.n	8006d0a <HAL_SPI_Transmit+0x268>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d08:	d102      	bne.n	8006d10 <HAL_SPI_Transmit+0x26e>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d14:	e026      	b.n	8006d64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1b5      	bne.n	8006c8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f949 	bl	8006fbc <SPI_EndRxTxTransaction>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e000      	b.n	8006d64 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006d62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d74:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d90:	f7fc febe 	bl	8003b10 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	1a9b      	subs	r3, r3, r2
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006da0:	f7fc feb6 	bl	8003b10 <HAL_GetTick>
 8006da4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006da6:	4b39      	ldr	r3, [pc, #228]	; (8006e8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	015b      	lsls	r3, r3, #5
 8006dac:	0d1b      	lsrs	r3, r3, #20
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	fb02 f303 	mul.w	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006db6:	e054      	b.n	8006e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbe:	d050      	beq.n	8006e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dc0:	f7fc fea6 	bl	8003b10 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d902      	bls.n	8006dd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d13d      	bne.n	8006e52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dee:	d111      	bne.n	8006e14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df8:	d004      	beq.n	8006e04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e02:	d107      	bne.n	8006e14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1c:	d10f      	bne.n	8006e3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e017      	b.n	8006e82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	bf0c      	ite	eq
 8006e72:	2301      	moveq	r3, #1
 8006e74:	2300      	movne	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d19b      	bne.n	8006db8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000300 	.word	0x20000300

08006e90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ea2:	f7fc fe35 	bl	8003b10 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	4413      	add	r3, r2
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006eb2:	f7fc fe2d 	bl	8003b10 <HAL_GetTick>
 8006eb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ec0:	4b3d      	ldr	r3, [pc, #244]	; (8006fb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	00da      	lsls	r2, r3, #3
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	0d1b      	lsrs	r3, r3, #20
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ed8:	e060      	b.n	8006f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ee0:	d107      	bne.n	8006ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d050      	beq.n	8006f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006efa:	f7fc fe09 	bl	8003b10 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d902      	bls.n	8006f10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d13d      	bne.n	8006f8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f28:	d111      	bne.n	8006f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f32:	d004      	beq.n	8006f3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3c:	d107      	bne.n	8006f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f56:	d10f      	bne.n	8006f78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e010      	b.n	8006fae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d196      	bne.n	8006eda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000300 	.word	0x20000300

08006fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff ff5b 	bl	8006e90 <SPI_WaitFifoStateUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe4:	f043 0220 	orr.w	r2, r3, #32
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e027      	b.n	8007040 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2180      	movs	r1, #128	; 0x80
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff fec0 	bl	8006d80 <SPI_WaitFlagStateUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e014      	b.n	8007040 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2200      	movs	r2, #0
 800701e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff ff34 	bl	8006e90 <SPI_WaitFifoStateUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007032:	f043 0220 	orr.w	r2, r3, #32
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e000      	b.n	8007040 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e049      	b.n	80070ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fc fb2e 	bl	80036d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f000 fdd6 	bl	8007c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d001      	beq.n	8007110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e040      	b.n	8007192 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1c      	ldr	r2, [pc, #112]	; (80071a0 <HAL_TIM_Base_Start_IT+0xa8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d00e      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x58>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713a:	d009      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x58>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <HAL_TIM_Base_Start_IT+0xac>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d004      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x58>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d115      	bne.n	800717c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	4b15      	ldr	r3, [pc, #84]	; (80071ac <HAL_TIM_Base_Start_IT+0xb4>)
 8007158:	4013      	ands	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b06      	cmp	r3, #6
 8007160:	d015      	beq.n	800718e <HAL_TIM_Base_Start_IT+0x96>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007168:	d011      	beq.n	800718e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0201 	orr.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717a:	e008      	b.n	800718e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e000      	b.n	8007190 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40000400 	.word	0x40000400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	00010007 	.word	0x00010007

080071b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e049      	b.n	8007256 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f841 	bl	800725e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	f000 fd22 	bl	8007c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d109      	bne.n	8007298 <HAL_TIM_OC_Start+0x24>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b01      	cmp	r3, #1
 800728e:	bf14      	ite	ne
 8007290:	2301      	movne	r3, #1
 8007292:	2300      	moveq	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	e03c      	b.n	8007312 <HAL_TIM_OC_Start+0x9e>
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b04      	cmp	r3, #4
 800729c:	d109      	bne.n	80072b2 <HAL_TIM_OC_Start+0x3e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	bf14      	ite	ne
 80072aa:	2301      	movne	r3, #1
 80072ac:	2300      	moveq	r3, #0
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	e02f      	b.n	8007312 <HAL_TIM_OC_Start+0x9e>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d109      	bne.n	80072cc <HAL_TIM_OC_Start+0x58>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	e022      	b.n	8007312 <HAL_TIM_OC_Start+0x9e>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b0c      	cmp	r3, #12
 80072d0:	d109      	bne.n	80072e6 <HAL_TIM_OC_Start+0x72>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b01      	cmp	r3, #1
 80072dc:	bf14      	ite	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	2300      	moveq	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	e015      	b.n	8007312 <HAL_TIM_OC_Start+0x9e>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b10      	cmp	r3, #16
 80072ea:	d109      	bne.n	8007300 <HAL_TIM_OC_Start+0x8c>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	e008      	b.n	8007312 <HAL_TIM_OC_Start+0x9e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	bf14      	ite	ne
 800730c:	2301      	movne	r3, #1
 800730e:	2300      	moveq	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e088      	b.n	800742c <HAL_TIM_OC_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d104      	bne.n	800732a <HAL_TIM_OC_Start+0xb6>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007328:	e023      	b.n	8007372 <HAL_TIM_OC_Start+0xfe>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b04      	cmp	r3, #4
 800732e:	d104      	bne.n	800733a <HAL_TIM_OC_Start+0xc6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007338:	e01b      	b.n	8007372 <HAL_TIM_OC_Start+0xfe>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b08      	cmp	r3, #8
 800733e:	d104      	bne.n	800734a <HAL_TIM_OC_Start+0xd6>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007348:	e013      	b.n	8007372 <HAL_TIM_OC_Start+0xfe>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b0c      	cmp	r3, #12
 800734e:	d104      	bne.n	800735a <HAL_TIM_OC_Start+0xe6>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007358:	e00b      	b.n	8007372 <HAL_TIM_OC_Start+0xfe>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b10      	cmp	r3, #16
 800735e:	d104      	bne.n	800736a <HAL_TIM_OC_Start+0xf6>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007368:	e003      	b.n	8007372 <HAL_TIM_OC_Start+0xfe>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2201      	movs	r2, #1
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f001 f814 	bl	80083a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a2b      	ldr	r2, [pc, #172]	; (8007434 <HAL_TIM_OC_Start+0x1c0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00e      	beq.n	80073a8 <HAL_TIM_OC_Start+0x134>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a2a      	ldr	r2, [pc, #168]	; (8007438 <HAL_TIM_OC_Start+0x1c4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_TIM_OC_Start+0x134>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a28      	ldr	r2, [pc, #160]	; (800743c <HAL_TIM_OC_Start+0x1c8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_TIM_OC_Start+0x134>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a27      	ldr	r2, [pc, #156]	; (8007440 <HAL_TIM_OC_Start+0x1cc>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d101      	bne.n	80073ac <HAL_TIM_OC_Start+0x138>
 80073a8:	2301      	movs	r3, #1
 80073aa:	e000      	b.n	80073ae <HAL_TIM_OC_Start+0x13a>
 80073ac:	2300      	movs	r3, #0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d007      	beq.n	80073c2 <HAL_TIM_OC_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1b      	ldr	r2, [pc, #108]	; (8007434 <HAL_TIM_OC_Start+0x1c0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_TIM_OC_Start+0x176>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d4:	d009      	beq.n	80073ea <HAL_TIM_OC_Start+0x176>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1a      	ldr	r2, [pc, #104]	; (8007444 <HAL_TIM_OC_Start+0x1d0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_TIM_OC_Start+0x176>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a14      	ldr	r2, [pc, #80]	; (8007438 <HAL_TIM_OC_Start+0x1c4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d115      	bne.n	8007416 <HAL_TIM_OC_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	4b15      	ldr	r3, [pc, #84]	; (8007448 <HAL_TIM_OC_Start+0x1d4>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b06      	cmp	r3, #6
 80073fa:	d015      	beq.n	8007428 <HAL_TIM_OC_Start+0x1b4>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007402:	d011      	beq.n	8007428 <HAL_TIM_OC_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007414:	e008      	b.n	8007428 <HAL_TIM_OC_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f042 0201 	orr.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e000      	b.n	800742a <HAL_TIM_OC_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40014000 	.word	0x40014000
 800743c:	40014400 	.word	0x40014400
 8007440:	40014800 	.word	0x40014800
 8007444:	40000400 	.word	0x40000400
 8007448:	00010007 	.word	0x00010007

0800744c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e049      	b.n	80074f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fc f966 	bl	8003744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3304      	adds	r3, #4
 8007488:	4619      	mov	r1, r3
 800748a:	4610      	mov	r0, r2
 800748c:	f000 fbd4 	bl	8007c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b02      	cmp	r3, #2
 800750e:	d122      	bne.n	8007556 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b02      	cmp	r3, #2
 800751c:	d11b      	bne.n	8007556 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f06f 0202 	mvn.w	r2, #2
 8007526:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fb5c 	bl	8007bfa <HAL_TIM_IC_CaptureCallback>
 8007542:	e005      	b.n	8007550 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fb4e 	bl	8007be6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fb5f 	bl	8007c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b04      	cmp	r3, #4
 8007562:	d122      	bne.n	80075aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b04      	cmp	r3, #4
 8007570:	d11b      	bne.n	80075aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f06f 0204 	mvn.w	r2, #4
 800757a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb32 	bl	8007bfa <HAL_TIM_IC_CaptureCallback>
 8007596:	e005      	b.n	80075a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fb24 	bl	8007be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fb35 	bl	8007c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f003 0308 	and.w	r3, r3, #8
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d122      	bne.n	80075fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d11b      	bne.n	80075fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f06f 0208 	mvn.w	r2, #8
 80075ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2204      	movs	r2, #4
 80075d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fb08 	bl	8007bfa <HAL_TIM_IC_CaptureCallback>
 80075ea:	e005      	b.n	80075f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fafa 	bl	8007be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fb0b 	bl	8007c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f003 0310 	and.w	r3, r3, #16
 8007608:	2b10      	cmp	r3, #16
 800760a:	d122      	bne.n	8007652 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b10      	cmp	r3, #16
 8007618:	d11b      	bne.n	8007652 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f06f 0210 	mvn.w	r2, #16
 8007622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2208      	movs	r2, #8
 8007628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fade 	bl	8007bfa <HAL_TIM_IC_CaptureCallback>
 800763e:	e005      	b.n	800764c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fad0 	bl	8007be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fae1 	bl	8007c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b01      	cmp	r3, #1
 800765e:	d10e      	bne.n	800767e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b01      	cmp	r3, #1
 800766c:	d107      	bne.n	800767e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f06f 0201 	mvn.w	r2, #1
 8007676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7fb ff4d 	bl	8003518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007688:	2b80      	cmp	r3, #128	; 0x80
 800768a:	d10e      	bne.n	80076aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	2b80      	cmp	r3, #128	; 0x80
 8007698:	d107      	bne.n	80076aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 ff95 	bl	80085d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b8:	d10e      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c4:	2b80      	cmp	r3, #128	; 0x80
 80076c6:	d107      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 ff88 	bl	80085e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d10e      	bne.n	8007704 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b40      	cmp	r3, #64	; 0x40
 80076f2:	d107      	bne.n	8007704 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa8f 	bl	8007c22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b20      	cmp	r3, #32
 8007710:	d10e      	bne.n	8007730 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b20      	cmp	r3, #32
 800771e:	d107      	bne.n	8007730 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f06f 0220 	mvn.w	r2, #32
 8007728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 ff48 	bl	80085c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007752:	2302      	movs	r3, #2
 8007754:	e066      	b.n	8007824 <HAL_TIM_OC_ConfigChannel+0xec>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b14      	cmp	r3, #20
 8007762:	d857      	bhi.n	8007814 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007764:	a201      	add	r2, pc, #4	; (adr r2, 800776c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	080077c1 	.word	0x080077c1
 8007770:	08007815 	.word	0x08007815
 8007774:	08007815 	.word	0x08007815
 8007778:	08007815 	.word	0x08007815
 800777c:	080077cf 	.word	0x080077cf
 8007780:	08007815 	.word	0x08007815
 8007784:	08007815 	.word	0x08007815
 8007788:	08007815 	.word	0x08007815
 800778c:	080077dd 	.word	0x080077dd
 8007790:	08007815 	.word	0x08007815
 8007794:	08007815 	.word	0x08007815
 8007798:	08007815 	.word	0x08007815
 800779c:	080077eb 	.word	0x080077eb
 80077a0:	08007815 	.word	0x08007815
 80077a4:	08007815 	.word	0x08007815
 80077a8:	08007815 	.word	0x08007815
 80077ac:	080077f9 	.word	0x080077f9
 80077b0:	08007815 	.word	0x08007815
 80077b4:	08007815 	.word	0x08007815
 80077b8:	08007815 	.word	0x08007815
 80077bc:	08007807 	.word	0x08007807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 faae 	bl	8007d28 <TIM_OC1_SetConfig>
      break;
 80077cc:	e025      	b.n	800781a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fb2d 	bl	8007e34 <TIM_OC2_SetConfig>
      break;
 80077da:	e01e      	b.n	800781a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68b9      	ldr	r1, [r7, #8]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fba6 	bl	8007f34 <TIM_OC3_SetConfig>
      break;
 80077e8:	e017      	b.n	800781a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fc1d 	bl	8008030 <TIM_OC4_SetConfig>
      break;
 80077f6:	e010      	b.n	800781a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fc7a 	bl	80080f8 <TIM_OC5_SetConfig>
      break;
 8007804:	e009      	b.n	800781a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fcd1 	bl	80081b4 <TIM_OC6_SetConfig>
      break;
 8007812:	e002      	b.n	800781a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	75fb      	strb	r3, [r7, #23]
      break;
 8007818:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007822:	7dfb      	ldrb	r3, [r7, #23]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007846:	2302      	movs	r3, #2
 8007848:	e0ff      	b.n	8007a4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b14      	cmp	r3, #20
 8007856:	f200 80f0 	bhi.w	8007a3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	080078b5 	.word	0x080078b5
 8007864:	08007a3b 	.word	0x08007a3b
 8007868:	08007a3b 	.word	0x08007a3b
 800786c:	08007a3b 	.word	0x08007a3b
 8007870:	080078f5 	.word	0x080078f5
 8007874:	08007a3b 	.word	0x08007a3b
 8007878:	08007a3b 	.word	0x08007a3b
 800787c:	08007a3b 	.word	0x08007a3b
 8007880:	08007937 	.word	0x08007937
 8007884:	08007a3b 	.word	0x08007a3b
 8007888:	08007a3b 	.word	0x08007a3b
 800788c:	08007a3b 	.word	0x08007a3b
 8007890:	08007977 	.word	0x08007977
 8007894:	08007a3b 	.word	0x08007a3b
 8007898:	08007a3b 	.word	0x08007a3b
 800789c:	08007a3b 	.word	0x08007a3b
 80078a0:	080079b9 	.word	0x080079b9
 80078a4:	08007a3b 	.word	0x08007a3b
 80078a8:	08007a3b 	.word	0x08007a3b
 80078ac:	08007a3b 	.word	0x08007a3b
 80078b0:	080079f9 	.word	0x080079f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fa34 	bl	8007d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0208 	orr.w	r2, r2, #8
 80078ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0204 	bic.w	r2, r2, #4
 80078de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6999      	ldr	r1, [r3, #24]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	619a      	str	r2, [r3, #24]
      break;
 80078f2:	e0a5      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fa9a 	bl	8007e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800790e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800791e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6999      	ldr	r1, [r3, #24]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	021a      	lsls	r2, r3, #8
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	619a      	str	r2, [r3, #24]
      break;
 8007934:	e084      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	4618      	mov	r0, r3
 800793e:	f000 faf9 	bl	8007f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69da      	ldr	r2, [r3, #28]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0208 	orr.w	r2, r2, #8
 8007950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0204 	bic.w	r2, r2, #4
 8007960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69d9      	ldr	r1, [r3, #28]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	61da      	str	r2, [r3, #28]
      break;
 8007974:	e064      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fb57 	bl	8008030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69da      	ldr	r2, [r3, #28]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69d9      	ldr	r1, [r3, #28]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	021a      	lsls	r2, r3, #8
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	61da      	str	r2, [r3, #28]
      break;
 80079b6:	e043      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fb9a 	bl	80080f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0208 	orr.w	r2, r2, #8
 80079d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0204 	bic.w	r2, r2, #4
 80079e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	691a      	ldr	r2, [r3, #16]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079f6:	e023      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68b9      	ldr	r1, [r7, #8]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fbd8 	bl	80081b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	021a      	lsls	r2, r3, #8
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a38:	e002      	b.n	8007a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop

08007a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e0b6      	b.n	8007bde <HAL_TIM_ConfigClockSource+0x18a>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aac:	d03e      	beq.n	8007b2c <HAL_TIM_ConfigClockSource+0xd8>
 8007aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ab2:	f200 8087 	bhi.w	8007bc4 <HAL_TIM_ConfigClockSource+0x170>
 8007ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aba:	f000 8086 	beq.w	8007bca <HAL_TIM_ConfigClockSource+0x176>
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac2:	d87f      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x170>
 8007ac4:	2b70      	cmp	r3, #112	; 0x70
 8007ac6:	d01a      	beq.n	8007afe <HAL_TIM_ConfigClockSource+0xaa>
 8007ac8:	2b70      	cmp	r3, #112	; 0x70
 8007aca:	d87b      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x170>
 8007acc:	2b60      	cmp	r3, #96	; 0x60
 8007ace:	d050      	beq.n	8007b72 <HAL_TIM_ConfigClockSource+0x11e>
 8007ad0:	2b60      	cmp	r3, #96	; 0x60
 8007ad2:	d877      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x170>
 8007ad4:	2b50      	cmp	r3, #80	; 0x50
 8007ad6:	d03c      	beq.n	8007b52 <HAL_TIM_ConfigClockSource+0xfe>
 8007ad8:	2b50      	cmp	r3, #80	; 0x50
 8007ada:	d873      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x170>
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d058      	beq.n	8007b92 <HAL_TIM_ConfigClockSource+0x13e>
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d86f      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x170>
 8007ae4:	2b30      	cmp	r3, #48	; 0x30
 8007ae6:	d064      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x15e>
 8007ae8:	2b30      	cmp	r3, #48	; 0x30
 8007aea:	d86b      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x170>
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	d060      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x15e>
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d867      	bhi.n	8007bc4 <HAL_TIM_ConfigClockSource+0x170>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d05c      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x15e>
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d05a      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x15e>
 8007afc:	e062      	b.n	8007bc4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	6899      	ldr	r1, [r3, #8]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f000 fc2b 	bl	8008368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	609a      	str	r2, [r3, #8]
      break;
 8007b2a:	e04f      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	6899      	ldr	r1, [r3, #8]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f000 fc14 	bl	8008368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b4e:	609a      	str	r2, [r3, #8]
      break;
 8007b50:	e03c      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	6859      	ldr	r1, [r3, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f000 fb88 	bl	8008274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2150      	movs	r1, #80	; 0x50
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fbe1 	bl	8008332 <TIM_ITRx_SetConfig>
      break;
 8007b70:	e02c      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	6859      	ldr	r1, [r3, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f000 fba7 	bl	80082d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2160      	movs	r1, #96	; 0x60
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fbd1 	bl	8008332 <TIM_ITRx_SetConfig>
      break;
 8007b90:	e01c      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	6859      	ldr	r1, [r3, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f000 fb68 	bl	8008274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2140      	movs	r1, #64	; 0x40
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fbc1 	bl	8008332 <TIM_ITRx_SetConfig>
      break;
 8007bb0:	e00c      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f000 fbb8 	bl	8008332 <TIM_ITRx_SetConfig>
      break;
 8007bc2:	e003      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc8:	e000      	b.n	8007bcc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
	...

08007c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a32      	ldr	r2, [pc, #200]	; (8007d14 <TIM_Base_SetConfig+0xdc>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d007      	beq.n	8007c60 <TIM_Base_SetConfig+0x28>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c56:	d003      	beq.n	8007c60 <TIM_Base_SetConfig+0x28>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a2f      	ldr	r2, [pc, #188]	; (8007d18 <TIM_Base_SetConfig+0xe0>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d108      	bne.n	8007c72 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a27      	ldr	r2, [pc, #156]	; (8007d14 <TIM_Base_SetConfig+0xdc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d013      	beq.n	8007ca2 <TIM_Base_SetConfig+0x6a>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c80:	d00f      	beq.n	8007ca2 <TIM_Base_SetConfig+0x6a>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a24      	ldr	r2, [pc, #144]	; (8007d18 <TIM_Base_SetConfig+0xe0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00b      	beq.n	8007ca2 <TIM_Base_SetConfig+0x6a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a23      	ldr	r2, [pc, #140]	; (8007d1c <TIM_Base_SetConfig+0xe4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d007      	beq.n	8007ca2 <TIM_Base_SetConfig+0x6a>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a22      	ldr	r2, [pc, #136]	; (8007d20 <TIM_Base_SetConfig+0xe8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d003      	beq.n	8007ca2 <TIM_Base_SetConfig+0x6a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a21      	ldr	r2, [pc, #132]	; (8007d24 <TIM_Base_SetConfig+0xec>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d108      	bne.n	8007cb4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a0e      	ldr	r2, [pc, #56]	; (8007d14 <TIM_Base_SetConfig+0xdc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00b      	beq.n	8007cf8 <TIM_Base_SetConfig+0xc0>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a0e      	ldr	r2, [pc, #56]	; (8007d1c <TIM_Base_SetConfig+0xe4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d007      	beq.n	8007cf8 <TIM_Base_SetConfig+0xc0>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a0d      	ldr	r2, [pc, #52]	; (8007d20 <TIM_Base_SetConfig+0xe8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_Base_SetConfig+0xc0>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a0c      	ldr	r2, [pc, #48]	; (8007d24 <TIM_Base_SetConfig+0xec>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d103      	bne.n	8007d00 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	691a      	ldr	r2, [r3, #16]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	615a      	str	r2, [r3, #20]
}
 8007d06:	bf00      	nop
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	40012c00 	.word	0x40012c00
 8007d18:	40000400 	.word	0x40000400
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40014400 	.word	0x40014400
 8007d24:	40014800 	.word	0x40014800

08007d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	f023 0201 	bic.w	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0303 	bic.w	r3, r3, #3
 8007d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f023 0302 	bic.w	r3, r3, #2
 8007d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a28      	ldr	r2, [pc, #160]	; (8007e24 <TIM_OC1_SetConfig+0xfc>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00b      	beq.n	8007da0 <TIM_OC1_SetConfig+0x78>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a27      	ldr	r2, [pc, #156]	; (8007e28 <TIM_OC1_SetConfig+0x100>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d007      	beq.n	8007da0 <TIM_OC1_SetConfig+0x78>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a26      	ldr	r2, [pc, #152]	; (8007e2c <TIM_OC1_SetConfig+0x104>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_OC1_SetConfig+0x78>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a25      	ldr	r2, [pc, #148]	; (8007e30 <TIM_OC1_SetConfig+0x108>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d10c      	bne.n	8007dba <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0308 	bic.w	r3, r3, #8
 8007da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f023 0304 	bic.w	r3, r3, #4
 8007db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <TIM_OC1_SetConfig+0xfc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d00b      	beq.n	8007dda <TIM_OC1_SetConfig+0xb2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a18      	ldr	r2, [pc, #96]	; (8007e28 <TIM_OC1_SetConfig+0x100>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d007      	beq.n	8007dda <TIM_OC1_SetConfig+0xb2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a17      	ldr	r2, [pc, #92]	; (8007e2c <TIM_OC1_SetConfig+0x104>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d003      	beq.n	8007dda <TIM_OC1_SetConfig+0xb2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a16      	ldr	r2, [pc, #88]	; (8007e30 <TIM_OC1_SetConfig+0x108>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d111      	bne.n	8007dfe <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	621a      	str	r2, [r3, #32]
}
 8007e18:	bf00      	nop
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	40012c00 	.word	0x40012c00
 8007e28:	40014000 	.word	0x40014000
 8007e2c:	40014400 	.word	0x40014400
 8007e30:	40014800 	.word	0x40014800

08007e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	f023 0210 	bic.w	r2, r3, #16
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0320 	bic.w	r3, r3, #32
 8007e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a24      	ldr	r2, [pc, #144]	; (8007f24 <TIM_OC2_SetConfig+0xf0>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d10d      	bne.n	8007eb4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	011b      	lsls	r3, r3, #4
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a1b      	ldr	r2, [pc, #108]	; (8007f24 <TIM_OC2_SetConfig+0xf0>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00b      	beq.n	8007ed4 <TIM_OC2_SetConfig+0xa0>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a1a      	ldr	r2, [pc, #104]	; (8007f28 <TIM_OC2_SetConfig+0xf4>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d007      	beq.n	8007ed4 <TIM_OC2_SetConfig+0xa0>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a19      	ldr	r2, [pc, #100]	; (8007f2c <TIM_OC2_SetConfig+0xf8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <TIM_OC2_SetConfig+0xa0>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a18      	ldr	r2, [pc, #96]	; (8007f30 <TIM_OC2_SetConfig+0xfc>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d113      	bne.n	8007efc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eda:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ee2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400
 8007f30:	40014800 	.word	0x40014800

08007f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a23      	ldr	r2, [pc, #140]	; (8008020 <TIM_OC3_SetConfig+0xec>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d10d      	bne.n	8007fb2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fb0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a1a      	ldr	r2, [pc, #104]	; (8008020 <TIM_OC3_SetConfig+0xec>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00b      	beq.n	8007fd2 <TIM_OC3_SetConfig+0x9e>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a19      	ldr	r2, [pc, #100]	; (8008024 <TIM_OC3_SetConfig+0xf0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d007      	beq.n	8007fd2 <TIM_OC3_SetConfig+0x9e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a18      	ldr	r2, [pc, #96]	; (8008028 <TIM_OC3_SetConfig+0xf4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d003      	beq.n	8007fd2 <TIM_OC3_SetConfig+0x9e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a17      	ldr	r2, [pc, #92]	; (800802c <TIM_OC3_SetConfig+0xf8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d113      	bne.n	8007ffa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	621a      	str	r2, [r3, #32]
}
 8008014:	bf00      	nop
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40014000 	.word	0x40014000
 8008028:	40014400 	.word	0x40014400
 800802c:	40014800 	.word	0x40014800

08008030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800805e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800806a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800807e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	031b      	lsls	r3, r3, #12
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a16      	ldr	r2, [pc, #88]	; (80080e8 <TIM_OC4_SetConfig+0xb8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00b      	beq.n	80080ac <TIM_OC4_SetConfig+0x7c>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a15      	ldr	r2, [pc, #84]	; (80080ec <TIM_OC4_SetConfig+0xbc>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d007      	beq.n	80080ac <TIM_OC4_SetConfig+0x7c>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a14      	ldr	r2, [pc, #80]	; (80080f0 <TIM_OC4_SetConfig+0xc0>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC4_SetConfig+0x7c>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a13      	ldr	r2, [pc, #76]	; (80080f4 <TIM_OC4_SetConfig+0xc4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d109      	bne.n	80080c0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	019b      	lsls	r3, r3, #6
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40012c00 	.word	0x40012c00
 80080ec:	40014000 	.word	0x40014000
 80080f0:	40014400 	.word	0x40014400
 80080f4:	40014800 	.word	0x40014800

080080f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800813c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	041b      	lsls	r3, r3, #16
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <TIM_OC5_SetConfig+0xac>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d00b      	beq.n	800816a <TIM_OC5_SetConfig+0x72>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a14      	ldr	r2, [pc, #80]	; (80081a8 <TIM_OC5_SetConfig+0xb0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d007      	beq.n	800816a <TIM_OC5_SetConfig+0x72>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a13      	ldr	r2, [pc, #76]	; (80081ac <TIM_OC5_SetConfig+0xb4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d003      	beq.n	800816a <TIM_OC5_SetConfig+0x72>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a12      	ldr	r2, [pc, #72]	; (80081b0 <TIM_OC5_SetConfig+0xb8>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d109      	bne.n	800817e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008170:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	621a      	str	r2, [r3, #32]
}
 8008198:	bf00      	nop
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	40012c00 	.word	0x40012c00
 80081a8:	40014000 	.word	0x40014000
 80081ac:	40014400 	.word	0x40014400
 80081b0:	40014800 	.word	0x40014800

080081b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	051b      	lsls	r3, r3, #20
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4313      	orrs	r3, r2
 8008206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a16      	ldr	r2, [pc, #88]	; (8008264 <TIM_OC6_SetConfig+0xb0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00b      	beq.n	8008228 <TIM_OC6_SetConfig+0x74>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a15      	ldr	r2, [pc, #84]	; (8008268 <TIM_OC6_SetConfig+0xb4>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d007      	beq.n	8008228 <TIM_OC6_SetConfig+0x74>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a14      	ldr	r2, [pc, #80]	; (800826c <TIM_OC6_SetConfig+0xb8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_OC6_SetConfig+0x74>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a13      	ldr	r2, [pc, #76]	; (8008270 <TIM_OC6_SetConfig+0xbc>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d109      	bne.n	800823c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800822e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	029b      	lsls	r3, r3, #10
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	4313      	orrs	r3, r2
 800823a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	621a      	str	r2, [r3, #32]
}
 8008256:	bf00      	nop
 8008258:	371c      	adds	r7, #28
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40014000 	.word	0x40014000
 800826c:	40014400 	.word	0x40014400
 8008270:	40014800 	.word	0x40014800

08008274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	f023 0201 	bic.w	r2, r3, #1
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800829e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f023 030a 	bic.w	r3, r3, #10
 80082b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b087      	sub	sp, #28
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	f023 0210 	bic.w	r2, r3, #16
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	031b      	lsls	r3, r3, #12
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800830e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4313      	orrs	r3, r2
 8008318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	621a      	str	r2, [r3, #32]
}
 8008326:	bf00      	nop
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4313      	orrs	r3, r2
 8008350:	f043 0307 	orr.w	r3, r3, #7
 8008354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	609a      	str	r2, [r3, #8]
}
 800835c:	bf00      	nop
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	021a      	lsls	r2, r3, #8
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	431a      	orrs	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4313      	orrs	r3, r2
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	609a      	str	r2, [r3, #8]
}
 800839c:	bf00      	nop
 800839e:	371c      	adds	r7, #28
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	2201      	movs	r2, #1
 80083bc:	fa02 f303 	lsl.w	r3, r2, r3
 80083c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a1a      	ldr	r2, [r3, #32]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	43db      	mvns	r3, r3
 80083ca:	401a      	ands	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a1a      	ldr	r2, [r3, #32]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	fa01 f303 	lsl.w	r3, r1, r3
 80083e0:	431a      	orrs	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008408:	2302      	movs	r3, #2
 800840a:	e054      	b.n	80084b6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a24      	ldr	r2, [pc, #144]	; (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d108      	bne.n	8008448 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800843c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a17      	ldr	r2, [pc, #92]	; (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00e      	beq.n	800848a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008474:	d009      	beq.n	800848a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a13      	ldr	r2, [pc, #76]	; (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d004      	beq.n	800848a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a11      	ldr	r2, [pc, #68]	; (80084cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d10c      	bne.n	80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	4313      	orrs	r3, r2
 800849a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	40012c00 	.word	0x40012c00
 80084c8:	40000400 	.word	0x40000400
 80084cc:	40014000 	.word	0x40014000

080084d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e060      	b.n	80085ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	041b      	lsls	r3, r3, #16
 8008562:	4313      	orrs	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a14      	ldr	r2, [pc, #80]	; (80085bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d115      	bne.n	800859c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	051b      	lsls	r3, r3, #20
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	4313      	orrs	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40012c00 	.word	0x40012c00

080085c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <__errno>:
 80085fc:	4b01      	ldr	r3, [pc, #4]	; (8008604 <__errno+0x8>)
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	2000030c 	.word	0x2000030c

08008608 <__libc_init_array>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	4d0d      	ldr	r5, [pc, #52]	; (8008640 <__libc_init_array+0x38>)
 800860c:	4c0d      	ldr	r4, [pc, #52]	; (8008644 <__libc_init_array+0x3c>)
 800860e:	1b64      	subs	r4, r4, r5
 8008610:	10a4      	asrs	r4, r4, #2
 8008612:	2600      	movs	r6, #0
 8008614:	42a6      	cmp	r6, r4
 8008616:	d109      	bne.n	800862c <__libc_init_array+0x24>
 8008618:	4d0b      	ldr	r5, [pc, #44]	; (8008648 <__libc_init_array+0x40>)
 800861a:	4c0c      	ldr	r4, [pc, #48]	; (800864c <__libc_init_array+0x44>)
 800861c:	f001 fa62 	bl	8009ae4 <_init>
 8008620:	1b64      	subs	r4, r4, r5
 8008622:	10a4      	asrs	r4, r4, #2
 8008624:	2600      	movs	r6, #0
 8008626:	42a6      	cmp	r6, r4
 8008628:	d105      	bne.n	8008636 <__libc_init_array+0x2e>
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008630:	4798      	blx	r3
 8008632:	3601      	adds	r6, #1
 8008634:	e7ee      	b.n	8008614 <__libc_init_array+0xc>
 8008636:	f855 3b04 	ldr.w	r3, [r5], #4
 800863a:	4798      	blx	r3
 800863c:	3601      	adds	r6, #1
 800863e:	e7f2      	b.n	8008626 <__libc_init_array+0x1e>
 8008640:	0800a5b0 	.word	0x0800a5b0
 8008644:	0800a5b0 	.word	0x0800a5b0
 8008648:	0800a5b0 	.word	0x0800a5b0
 800864c:	0800a5b4 	.word	0x0800a5b4

08008650 <memcpy>:
 8008650:	440a      	add	r2, r1
 8008652:	4291      	cmp	r1, r2
 8008654:	f100 33ff 	add.w	r3, r0, #4294967295
 8008658:	d100      	bne.n	800865c <memcpy+0xc>
 800865a:	4770      	bx	lr
 800865c:	b510      	push	{r4, lr}
 800865e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008666:	4291      	cmp	r1, r2
 8008668:	d1f9      	bne.n	800865e <memcpy+0xe>
 800866a:	bd10      	pop	{r4, pc}

0800866c <memset>:
 800866c:	4402      	add	r2, r0
 800866e:	4603      	mov	r3, r0
 8008670:	4293      	cmp	r3, r2
 8008672:	d100      	bne.n	8008676 <memset+0xa>
 8008674:	4770      	bx	lr
 8008676:	f803 1b01 	strb.w	r1, [r3], #1
 800867a:	e7f9      	b.n	8008670 <memset+0x4>

0800867c <srand>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <srand+0x44>)
 8008680:	681d      	ldr	r5, [r3, #0]
 8008682:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008684:	4604      	mov	r4, r0
 8008686:	b9b3      	cbnz	r3, 80086b6 <srand+0x3a>
 8008688:	2018      	movs	r0, #24
 800868a:	f000 f8b3 	bl	80087f4 <malloc>
 800868e:	4602      	mov	r2, r0
 8008690:	63a8      	str	r0, [r5, #56]	; 0x38
 8008692:	b920      	cbnz	r0, 800869e <srand+0x22>
 8008694:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <srand+0x48>)
 8008696:	480c      	ldr	r0, [pc, #48]	; (80086c8 <srand+0x4c>)
 8008698:	2142      	movs	r1, #66	; 0x42
 800869a:	f000 f87b 	bl	8008794 <__assert_func>
 800869e:	490b      	ldr	r1, [pc, #44]	; (80086cc <srand+0x50>)
 80086a0:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <srand+0x54>)
 80086a2:	e9c0 1300 	strd	r1, r3, [r0]
 80086a6:	4b0b      	ldr	r3, [pc, #44]	; (80086d4 <srand+0x58>)
 80086a8:	6083      	str	r3, [r0, #8]
 80086aa:	230b      	movs	r3, #11
 80086ac:	8183      	strh	r3, [r0, #12]
 80086ae:	2100      	movs	r1, #0
 80086b0:	2001      	movs	r0, #1
 80086b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80086b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80086b8:	2200      	movs	r2, #0
 80086ba:	611c      	str	r4, [r3, #16]
 80086bc:	615a      	str	r2, [r3, #20]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	2000030c 	.word	0x2000030c
 80086c4:	0800a46c 	.word	0x0800a46c
 80086c8:	0800a483 	.word	0x0800a483
 80086cc:	abcd330e 	.word	0xabcd330e
 80086d0:	e66d1234 	.word	0xe66d1234
 80086d4:	0005deec 	.word	0x0005deec

080086d8 <rand>:
 80086d8:	4b16      	ldr	r3, [pc, #88]	; (8008734 <rand+0x5c>)
 80086da:	b510      	push	{r4, lr}
 80086dc:	681c      	ldr	r4, [r3, #0]
 80086de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086e0:	b9b3      	cbnz	r3, 8008710 <rand+0x38>
 80086e2:	2018      	movs	r0, #24
 80086e4:	f000 f886 	bl	80087f4 <malloc>
 80086e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80086ea:	b928      	cbnz	r0, 80086f8 <rand+0x20>
 80086ec:	4602      	mov	r2, r0
 80086ee:	4b12      	ldr	r3, [pc, #72]	; (8008738 <rand+0x60>)
 80086f0:	4812      	ldr	r0, [pc, #72]	; (800873c <rand+0x64>)
 80086f2:	214e      	movs	r1, #78	; 0x4e
 80086f4:	f000 f84e 	bl	8008794 <__assert_func>
 80086f8:	4a11      	ldr	r2, [pc, #68]	; (8008740 <rand+0x68>)
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <rand+0x6c>)
 80086fc:	e9c0 2300 	strd	r2, r3, [r0]
 8008700:	4b11      	ldr	r3, [pc, #68]	; (8008748 <rand+0x70>)
 8008702:	6083      	str	r3, [r0, #8]
 8008704:	230b      	movs	r3, #11
 8008706:	8183      	strh	r3, [r0, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	2300      	movs	r3, #0
 800870c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008710:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8008712:	4a0e      	ldr	r2, [pc, #56]	; (800874c <rand+0x74>)
 8008714:	6920      	ldr	r0, [r4, #16]
 8008716:	6963      	ldr	r3, [r4, #20]
 8008718:	490d      	ldr	r1, [pc, #52]	; (8008750 <rand+0x78>)
 800871a:	4342      	muls	r2, r0
 800871c:	fb01 2203 	mla	r2, r1, r3, r2
 8008720:	fba0 0101 	umull	r0, r1, r0, r1
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	eb42 0001 	adc.w	r0, r2, r1
 800872a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800872e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008732:	bd10      	pop	{r4, pc}
 8008734:	2000030c 	.word	0x2000030c
 8008738:	0800a46c 	.word	0x0800a46c
 800873c:	0800a483 	.word	0x0800a483
 8008740:	abcd330e 	.word	0xabcd330e
 8008744:	e66d1234 	.word	0xe66d1234
 8008748:	0005deec 	.word	0x0005deec
 800874c:	5851f42d 	.word	0x5851f42d
 8008750:	4c957f2d 	.word	0x4c957f2d

08008754 <siprintf>:
 8008754:	b40e      	push	{r1, r2, r3}
 8008756:	b500      	push	{lr}
 8008758:	b09c      	sub	sp, #112	; 0x70
 800875a:	ab1d      	add	r3, sp, #116	; 0x74
 800875c:	9002      	str	r0, [sp, #8]
 800875e:	9006      	str	r0, [sp, #24]
 8008760:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008764:	4809      	ldr	r0, [pc, #36]	; (800878c <siprintf+0x38>)
 8008766:	9107      	str	r1, [sp, #28]
 8008768:	9104      	str	r1, [sp, #16]
 800876a:	4909      	ldr	r1, [pc, #36]	; (8008790 <siprintf+0x3c>)
 800876c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008770:	9105      	str	r1, [sp, #20]
 8008772:	6800      	ldr	r0, [r0, #0]
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	a902      	add	r1, sp, #8
 8008778:	f000 f980 	bl	8008a7c <_svfiprintf_r>
 800877c:	9b02      	ldr	r3, [sp, #8]
 800877e:	2200      	movs	r2, #0
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	b01c      	add	sp, #112	; 0x70
 8008784:	f85d eb04 	ldr.w	lr, [sp], #4
 8008788:	b003      	add	sp, #12
 800878a:	4770      	bx	lr
 800878c:	2000030c 	.word	0x2000030c
 8008790:	ffff0208 	.word	0xffff0208

08008794 <__assert_func>:
 8008794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008796:	4614      	mov	r4, r2
 8008798:	461a      	mov	r2, r3
 800879a:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <__assert_func+0x2c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4605      	mov	r5, r0
 80087a0:	68d8      	ldr	r0, [r3, #12]
 80087a2:	b14c      	cbz	r4, 80087b8 <__assert_func+0x24>
 80087a4:	4b07      	ldr	r3, [pc, #28]	; (80087c4 <__assert_func+0x30>)
 80087a6:	9100      	str	r1, [sp, #0]
 80087a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087ac:	4906      	ldr	r1, [pc, #24]	; (80087c8 <__assert_func+0x34>)
 80087ae:	462b      	mov	r3, r5
 80087b0:	f000 f80e 	bl	80087d0 <fiprintf>
 80087b4:	f000 fe20 	bl	80093f8 <abort>
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <__assert_func+0x38>)
 80087ba:	461c      	mov	r4, r3
 80087bc:	e7f3      	b.n	80087a6 <__assert_func+0x12>
 80087be:	bf00      	nop
 80087c0:	2000030c 	.word	0x2000030c
 80087c4:	0800a4de 	.word	0x0800a4de
 80087c8:	0800a4eb 	.word	0x0800a4eb
 80087cc:	0800a519 	.word	0x0800a519

080087d0 <fiprintf>:
 80087d0:	b40e      	push	{r1, r2, r3}
 80087d2:	b503      	push	{r0, r1, lr}
 80087d4:	4601      	mov	r1, r0
 80087d6:	ab03      	add	r3, sp, #12
 80087d8:	4805      	ldr	r0, [pc, #20]	; (80087f0 <fiprintf+0x20>)
 80087da:	f853 2b04 	ldr.w	r2, [r3], #4
 80087de:	6800      	ldr	r0, [r0, #0]
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	f000 fa75 	bl	8008cd0 <_vfiprintf_r>
 80087e6:	b002      	add	sp, #8
 80087e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087ec:	b003      	add	sp, #12
 80087ee:	4770      	bx	lr
 80087f0:	2000030c 	.word	0x2000030c

080087f4 <malloc>:
 80087f4:	4b02      	ldr	r3, [pc, #8]	; (8008800 <malloc+0xc>)
 80087f6:	4601      	mov	r1, r0
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	f000 b86f 	b.w	80088dc <_malloc_r>
 80087fe:	bf00      	nop
 8008800:	2000030c 	.word	0x2000030c

08008804 <_free_r>:
 8008804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008806:	2900      	cmp	r1, #0
 8008808:	d044      	beq.n	8008894 <_free_r+0x90>
 800880a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880e:	9001      	str	r0, [sp, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f1a1 0404 	sub.w	r4, r1, #4
 8008816:	bfb8      	it	lt
 8008818:	18e4      	addlt	r4, r4, r3
 800881a:	f001 f82f 	bl	800987c <__malloc_lock>
 800881e:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <_free_r+0x94>)
 8008820:	9801      	ldr	r0, [sp, #4]
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	b933      	cbnz	r3, 8008834 <_free_r+0x30>
 8008826:	6063      	str	r3, [r4, #4]
 8008828:	6014      	str	r4, [r2, #0]
 800882a:	b003      	add	sp, #12
 800882c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008830:	f001 b82a 	b.w	8009888 <__malloc_unlock>
 8008834:	42a3      	cmp	r3, r4
 8008836:	d908      	bls.n	800884a <_free_r+0x46>
 8008838:	6825      	ldr	r5, [r4, #0]
 800883a:	1961      	adds	r1, r4, r5
 800883c:	428b      	cmp	r3, r1
 800883e:	bf01      	itttt	eq
 8008840:	6819      	ldreq	r1, [r3, #0]
 8008842:	685b      	ldreq	r3, [r3, #4]
 8008844:	1949      	addeq	r1, r1, r5
 8008846:	6021      	streq	r1, [r4, #0]
 8008848:	e7ed      	b.n	8008826 <_free_r+0x22>
 800884a:	461a      	mov	r2, r3
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	b10b      	cbz	r3, 8008854 <_free_r+0x50>
 8008850:	42a3      	cmp	r3, r4
 8008852:	d9fa      	bls.n	800884a <_free_r+0x46>
 8008854:	6811      	ldr	r1, [r2, #0]
 8008856:	1855      	adds	r5, r2, r1
 8008858:	42a5      	cmp	r5, r4
 800885a:	d10b      	bne.n	8008874 <_free_r+0x70>
 800885c:	6824      	ldr	r4, [r4, #0]
 800885e:	4421      	add	r1, r4
 8008860:	1854      	adds	r4, r2, r1
 8008862:	42a3      	cmp	r3, r4
 8008864:	6011      	str	r1, [r2, #0]
 8008866:	d1e0      	bne.n	800882a <_free_r+0x26>
 8008868:	681c      	ldr	r4, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	6053      	str	r3, [r2, #4]
 800886e:	4421      	add	r1, r4
 8008870:	6011      	str	r1, [r2, #0]
 8008872:	e7da      	b.n	800882a <_free_r+0x26>
 8008874:	d902      	bls.n	800887c <_free_r+0x78>
 8008876:	230c      	movs	r3, #12
 8008878:	6003      	str	r3, [r0, #0]
 800887a:	e7d6      	b.n	800882a <_free_r+0x26>
 800887c:	6825      	ldr	r5, [r4, #0]
 800887e:	1961      	adds	r1, r4, r5
 8008880:	428b      	cmp	r3, r1
 8008882:	bf04      	itt	eq
 8008884:	6819      	ldreq	r1, [r3, #0]
 8008886:	685b      	ldreq	r3, [r3, #4]
 8008888:	6063      	str	r3, [r4, #4]
 800888a:	bf04      	itt	eq
 800888c:	1949      	addeq	r1, r1, r5
 800888e:	6021      	streq	r1, [r4, #0]
 8008890:	6054      	str	r4, [r2, #4]
 8008892:	e7ca      	b.n	800882a <_free_r+0x26>
 8008894:	b003      	add	sp, #12
 8008896:	bd30      	pop	{r4, r5, pc}
 8008898:	20000c90 	.word	0x20000c90

0800889c <sbrk_aligned>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	4e0e      	ldr	r6, [pc, #56]	; (80088d8 <sbrk_aligned+0x3c>)
 80088a0:	460c      	mov	r4, r1
 80088a2:	6831      	ldr	r1, [r6, #0]
 80088a4:	4605      	mov	r5, r0
 80088a6:	b911      	cbnz	r1, 80088ae <sbrk_aligned+0x12>
 80088a8:	f000 fcd6 	bl	8009258 <_sbrk_r>
 80088ac:	6030      	str	r0, [r6, #0]
 80088ae:	4621      	mov	r1, r4
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 fcd1 	bl	8009258 <_sbrk_r>
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	d00a      	beq.n	80088d0 <sbrk_aligned+0x34>
 80088ba:	1cc4      	adds	r4, r0, #3
 80088bc:	f024 0403 	bic.w	r4, r4, #3
 80088c0:	42a0      	cmp	r0, r4
 80088c2:	d007      	beq.n	80088d4 <sbrk_aligned+0x38>
 80088c4:	1a21      	subs	r1, r4, r0
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 fcc6 	bl	8009258 <_sbrk_r>
 80088cc:	3001      	adds	r0, #1
 80088ce:	d101      	bne.n	80088d4 <sbrk_aligned+0x38>
 80088d0:	f04f 34ff 	mov.w	r4, #4294967295
 80088d4:	4620      	mov	r0, r4
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	20000c94 	.word	0x20000c94

080088dc <_malloc_r>:
 80088dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	1ccd      	adds	r5, r1, #3
 80088e2:	f025 0503 	bic.w	r5, r5, #3
 80088e6:	3508      	adds	r5, #8
 80088e8:	2d0c      	cmp	r5, #12
 80088ea:	bf38      	it	cc
 80088ec:	250c      	movcc	r5, #12
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	4607      	mov	r7, r0
 80088f2:	db01      	blt.n	80088f8 <_malloc_r+0x1c>
 80088f4:	42a9      	cmp	r1, r5
 80088f6:	d905      	bls.n	8008904 <_malloc_r+0x28>
 80088f8:	230c      	movs	r3, #12
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	2600      	movs	r6, #0
 80088fe:	4630      	mov	r0, r6
 8008900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008904:	4e2e      	ldr	r6, [pc, #184]	; (80089c0 <_malloc_r+0xe4>)
 8008906:	f000 ffb9 	bl	800987c <__malloc_lock>
 800890a:	6833      	ldr	r3, [r6, #0]
 800890c:	461c      	mov	r4, r3
 800890e:	bb34      	cbnz	r4, 800895e <_malloc_r+0x82>
 8008910:	4629      	mov	r1, r5
 8008912:	4638      	mov	r0, r7
 8008914:	f7ff ffc2 	bl	800889c <sbrk_aligned>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	4604      	mov	r4, r0
 800891c:	d14d      	bne.n	80089ba <_malloc_r+0xde>
 800891e:	6834      	ldr	r4, [r6, #0]
 8008920:	4626      	mov	r6, r4
 8008922:	2e00      	cmp	r6, #0
 8008924:	d140      	bne.n	80089a8 <_malloc_r+0xcc>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	4631      	mov	r1, r6
 800892a:	4638      	mov	r0, r7
 800892c:	eb04 0803 	add.w	r8, r4, r3
 8008930:	f000 fc92 	bl	8009258 <_sbrk_r>
 8008934:	4580      	cmp	r8, r0
 8008936:	d13a      	bne.n	80089ae <_malloc_r+0xd2>
 8008938:	6821      	ldr	r1, [r4, #0]
 800893a:	3503      	adds	r5, #3
 800893c:	1a6d      	subs	r5, r5, r1
 800893e:	f025 0503 	bic.w	r5, r5, #3
 8008942:	3508      	adds	r5, #8
 8008944:	2d0c      	cmp	r5, #12
 8008946:	bf38      	it	cc
 8008948:	250c      	movcc	r5, #12
 800894a:	4629      	mov	r1, r5
 800894c:	4638      	mov	r0, r7
 800894e:	f7ff ffa5 	bl	800889c <sbrk_aligned>
 8008952:	3001      	adds	r0, #1
 8008954:	d02b      	beq.n	80089ae <_malloc_r+0xd2>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	442b      	add	r3, r5
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	e00e      	b.n	800897c <_malloc_r+0xa0>
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	1b52      	subs	r2, r2, r5
 8008962:	d41e      	bmi.n	80089a2 <_malloc_r+0xc6>
 8008964:	2a0b      	cmp	r2, #11
 8008966:	d916      	bls.n	8008996 <_malloc_r+0xba>
 8008968:	1961      	adds	r1, r4, r5
 800896a:	42a3      	cmp	r3, r4
 800896c:	6025      	str	r5, [r4, #0]
 800896e:	bf18      	it	ne
 8008970:	6059      	strne	r1, [r3, #4]
 8008972:	6863      	ldr	r3, [r4, #4]
 8008974:	bf08      	it	eq
 8008976:	6031      	streq	r1, [r6, #0]
 8008978:	5162      	str	r2, [r4, r5]
 800897a:	604b      	str	r3, [r1, #4]
 800897c:	4638      	mov	r0, r7
 800897e:	f104 060b 	add.w	r6, r4, #11
 8008982:	f000 ff81 	bl	8009888 <__malloc_unlock>
 8008986:	f026 0607 	bic.w	r6, r6, #7
 800898a:	1d23      	adds	r3, r4, #4
 800898c:	1af2      	subs	r2, r6, r3
 800898e:	d0b6      	beq.n	80088fe <_malloc_r+0x22>
 8008990:	1b9b      	subs	r3, r3, r6
 8008992:	50a3      	str	r3, [r4, r2]
 8008994:	e7b3      	b.n	80088fe <_malloc_r+0x22>
 8008996:	6862      	ldr	r2, [r4, #4]
 8008998:	42a3      	cmp	r3, r4
 800899a:	bf0c      	ite	eq
 800899c:	6032      	streq	r2, [r6, #0]
 800899e:	605a      	strne	r2, [r3, #4]
 80089a0:	e7ec      	b.n	800897c <_malloc_r+0xa0>
 80089a2:	4623      	mov	r3, r4
 80089a4:	6864      	ldr	r4, [r4, #4]
 80089a6:	e7b2      	b.n	800890e <_malloc_r+0x32>
 80089a8:	4634      	mov	r4, r6
 80089aa:	6876      	ldr	r6, [r6, #4]
 80089ac:	e7b9      	b.n	8008922 <_malloc_r+0x46>
 80089ae:	230c      	movs	r3, #12
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	4638      	mov	r0, r7
 80089b4:	f000 ff68 	bl	8009888 <__malloc_unlock>
 80089b8:	e7a1      	b.n	80088fe <_malloc_r+0x22>
 80089ba:	6025      	str	r5, [r4, #0]
 80089bc:	e7de      	b.n	800897c <_malloc_r+0xa0>
 80089be:	bf00      	nop
 80089c0:	20000c90 	.word	0x20000c90

080089c4 <__ssputs_r>:
 80089c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c8:	688e      	ldr	r6, [r1, #8]
 80089ca:	429e      	cmp	r6, r3
 80089cc:	4682      	mov	sl, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	4690      	mov	r8, r2
 80089d2:	461f      	mov	r7, r3
 80089d4:	d838      	bhi.n	8008a48 <__ssputs_r+0x84>
 80089d6:	898a      	ldrh	r2, [r1, #12]
 80089d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089dc:	d032      	beq.n	8008a44 <__ssputs_r+0x80>
 80089de:	6825      	ldr	r5, [r4, #0]
 80089e0:	6909      	ldr	r1, [r1, #16]
 80089e2:	eba5 0901 	sub.w	r9, r5, r1
 80089e6:	6965      	ldr	r5, [r4, #20]
 80089e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089f0:	3301      	adds	r3, #1
 80089f2:	444b      	add	r3, r9
 80089f4:	106d      	asrs	r5, r5, #1
 80089f6:	429d      	cmp	r5, r3
 80089f8:	bf38      	it	cc
 80089fa:	461d      	movcc	r5, r3
 80089fc:	0553      	lsls	r3, r2, #21
 80089fe:	d531      	bpl.n	8008a64 <__ssputs_r+0xa0>
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7ff ff6b 	bl	80088dc <_malloc_r>
 8008a06:	4606      	mov	r6, r0
 8008a08:	b950      	cbnz	r0, 8008a20 <__ssputs_r+0x5c>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	f8ca 3000 	str.w	r3, [sl]
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a20:	6921      	ldr	r1, [r4, #16]
 8008a22:	464a      	mov	r2, r9
 8008a24:	f7ff fe14 	bl	8008650 <memcpy>
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	6126      	str	r6, [r4, #16]
 8008a36:	6165      	str	r5, [r4, #20]
 8008a38:	444e      	add	r6, r9
 8008a3a:	eba5 0509 	sub.w	r5, r5, r9
 8008a3e:	6026      	str	r6, [r4, #0]
 8008a40:	60a5      	str	r5, [r4, #8]
 8008a42:	463e      	mov	r6, r7
 8008a44:	42be      	cmp	r6, r7
 8008a46:	d900      	bls.n	8008a4a <__ssputs_r+0x86>
 8008a48:	463e      	mov	r6, r7
 8008a4a:	6820      	ldr	r0, [r4, #0]
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	4641      	mov	r1, r8
 8008a50:	f000 fefa 	bl	8009848 <memmove>
 8008a54:	68a3      	ldr	r3, [r4, #8]
 8008a56:	1b9b      	subs	r3, r3, r6
 8008a58:	60a3      	str	r3, [r4, #8]
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	4433      	add	r3, r6
 8008a5e:	6023      	str	r3, [r4, #0]
 8008a60:	2000      	movs	r0, #0
 8008a62:	e7db      	b.n	8008a1c <__ssputs_r+0x58>
 8008a64:	462a      	mov	r2, r5
 8008a66:	f000 ff15 	bl	8009894 <_realloc_r>
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d1e1      	bne.n	8008a34 <__ssputs_r+0x70>
 8008a70:	6921      	ldr	r1, [r4, #16]
 8008a72:	4650      	mov	r0, sl
 8008a74:	f7ff fec6 	bl	8008804 <_free_r>
 8008a78:	e7c7      	b.n	8008a0a <__ssputs_r+0x46>
	...

08008a7c <_svfiprintf_r>:
 8008a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	4698      	mov	r8, r3
 8008a82:	898b      	ldrh	r3, [r1, #12]
 8008a84:	061b      	lsls	r3, r3, #24
 8008a86:	b09d      	sub	sp, #116	; 0x74
 8008a88:	4607      	mov	r7, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	d50e      	bpl.n	8008aae <_svfiprintf_r+0x32>
 8008a90:	690b      	ldr	r3, [r1, #16]
 8008a92:	b963      	cbnz	r3, 8008aae <_svfiprintf_r+0x32>
 8008a94:	2140      	movs	r1, #64	; 0x40
 8008a96:	f7ff ff21 	bl	80088dc <_malloc_r>
 8008a9a:	6028      	str	r0, [r5, #0]
 8008a9c:	6128      	str	r0, [r5, #16]
 8008a9e:	b920      	cbnz	r0, 8008aaa <_svfiprintf_r+0x2e>
 8008aa0:	230c      	movs	r3, #12
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	e0d1      	b.n	8008c4e <_svfiprintf_r+0x1d2>
 8008aaa:	2340      	movs	r3, #64	; 0x40
 8008aac:	616b      	str	r3, [r5, #20]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab2:	2320      	movs	r3, #32
 8008ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008abc:	2330      	movs	r3, #48	; 0x30
 8008abe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c68 <_svfiprintf_r+0x1ec>
 8008ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ac6:	f04f 0901 	mov.w	r9, #1
 8008aca:	4623      	mov	r3, r4
 8008acc:	469a      	mov	sl, r3
 8008ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad2:	b10a      	cbz	r2, 8008ad8 <_svfiprintf_r+0x5c>
 8008ad4:	2a25      	cmp	r2, #37	; 0x25
 8008ad6:	d1f9      	bne.n	8008acc <_svfiprintf_r+0x50>
 8008ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8008adc:	d00b      	beq.n	8008af6 <_svfiprintf_r+0x7a>
 8008ade:	465b      	mov	r3, fp
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f7ff ff6d 	bl	80089c4 <__ssputs_r>
 8008aea:	3001      	adds	r0, #1
 8008aec:	f000 80aa 	beq.w	8008c44 <_svfiprintf_r+0x1c8>
 8008af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af2:	445a      	add	r2, fp
 8008af4:	9209      	str	r2, [sp, #36]	; 0x24
 8008af6:	f89a 3000 	ldrb.w	r3, [sl]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 80a2 	beq.w	8008c44 <_svfiprintf_r+0x1c8>
 8008b00:	2300      	movs	r3, #0
 8008b02:	f04f 32ff 	mov.w	r2, #4294967295
 8008b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b0a:	f10a 0a01 	add.w	sl, sl, #1
 8008b0e:	9304      	str	r3, [sp, #16]
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b16:	931a      	str	r3, [sp, #104]	; 0x68
 8008b18:	4654      	mov	r4, sl
 8008b1a:	2205      	movs	r2, #5
 8008b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b20:	4851      	ldr	r0, [pc, #324]	; (8008c68 <_svfiprintf_r+0x1ec>)
 8008b22:	f7f7 fb5d 	bl	80001e0 <memchr>
 8008b26:	9a04      	ldr	r2, [sp, #16]
 8008b28:	b9d8      	cbnz	r0, 8008b62 <_svfiprintf_r+0xe6>
 8008b2a:	06d0      	lsls	r0, r2, #27
 8008b2c:	bf44      	itt	mi
 8008b2e:	2320      	movmi	r3, #32
 8008b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b34:	0711      	lsls	r1, r2, #28
 8008b36:	bf44      	itt	mi
 8008b38:	232b      	movmi	r3, #43	; 0x2b
 8008b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b42:	2b2a      	cmp	r3, #42	; 0x2a
 8008b44:	d015      	beq.n	8008b72 <_svfiprintf_r+0xf6>
 8008b46:	9a07      	ldr	r2, [sp, #28]
 8008b48:	4654      	mov	r4, sl
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	f04f 0c0a 	mov.w	ip, #10
 8008b50:	4621      	mov	r1, r4
 8008b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b56:	3b30      	subs	r3, #48	; 0x30
 8008b58:	2b09      	cmp	r3, #9
 8008b5a:	d94e      	bls.n	8008bfa <_svfiprintf_r+0x17e>
 8008b5c:	b1b0      	cbz	r0, 8008b8c <_svfiprintf_r+0x110>
 8008b5e:	9207      	str	r2, [sp, #28]
 8008b60:	e014      	b.n	8008b8c <_svfiprintf_r+0x110>
 8008b62:	eba0 0308 	sub.w	r3, r0, r8
 8008b66:	fa09 f303 	lsl.w	r3, r9, r3
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	46a2      	mov	sl, r4
 8008b70:	e7d2      	b.n	8008b18 <_svfiprintf_r+0x9c>
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	1d19      	adds	r1, r3, #4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	9103      	str	r1, [sp, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bfbb      	ittet	lt
 8008b7e:	425b      	neglt	r3, r3
 8008b80:	f042 0202 	orrlt.w	r2, r2, #2
 8008b84:	9307      	strge	r3, [sp, #28]
 8008b86:	9307      	strlt	r3, [sp, #28]
 8008b88:	bfb8      	it	lt
 8008b8a:	9204      	strlt	r2, [sp, #16]
 8008b8c:	7823      	ldrb	r3, [r4, #0]
 8008b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b90:	d10c      	bne.n	8008bac <_svfiprintf_r+0x130>
 8008b92:	7863      	ldrb	r3, [r4, #1]
 8008b94:	2b2a      	cmp	r3, #42	; 0x2a
 8008b96:	d135      	bne.n	8008c04 <_svfiprintf_r+0x188>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	1d1a      	adds	r2, r3, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	9203      	str	r2, [sp, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfb8      	it	lt
 8008ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ba8:	3402      	adds	r4, #2
 8008baa:	9305      	str	r3, [sp, #20]
 8008bac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c78 <_svfiprintf_r+0x1fc>
 8008bb0:	7821      	ldrb	r1, [r4, #0]
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	4650      	mov	r0, sl
 8008bb6:	f7f7 fb13 	bl	80001e0 <memchr>
 8008bba:	b140      	cbz	r0, 8008bce <_svfiprintf_r+0x152>
 8008bbc:	2340      	movs	r3, #64	; 0x40
 8008bbe:	eba0 000a 	sub.w	r0, r0, sl
 8008bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8008bc6:	9b04      	ldr	r3, [sp, #16]
 8008bc8:	4303      	orrs	r3, r0
 8008bca:	3401      	adds	r4, #1
 8008bcc:	9304      	str	r3, [sp, #16]
 8008bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd2:	4826      	ldr	r0, [pc, #152]	; (8008c6c <_svfiprintf_r+0x1f0>)
 8008bd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bd8:	2206      	movs	r2, #6
 8008bda:	f7f7 fb01 	bl	80001e0 <memchr>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d038      	beq.n	8008c54 <_svfiprintf_r+0x1d8>
 8008be2:	4b23      	ldr	r3, [pc, #140]	; (8008c70 <_svfiprintf_r+0x1f4>)
 8008be4:	bb1b      	cbnz	r3, 8008c2e <_svfiprintf_r+0x1b2>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	3307      	adds	r3, #7
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	3308      	adds	r3, #8
 8008bf0:	9303      	str	r3, [sp, #12]
 8008bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf4:	4433      	add	r3, r6
 8008bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf8:	e767      	b.n	8008aca <_svfiprintf_r+0x4e>
 8008bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bfe:	460c      	mov	r4, r1
 8008c00:	2001      	movs	r0, #1
 8008c02:	e7a5      	b.n	8008b50 <_svfiprintf_r+0xd4>
 8008c04:	2300      	movs	r3, #0
 8008c06:	3401      	adds	r4, #1
 8008c08:	9305      	str	r3, [sp, #20]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	f04f 0c0a 	mov.w	ip, #10
 8008c10:	4620      	mov	r0, r4
 8008c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c16:	3a30      	subs	r2, #48	; 0x30
 8008c18:	2a09      	cmp	r2, #9
 8008c1a:	d903      	bls.n	8008c24 <_svfiprintf_r+0x1a8>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0c5      	beq.n	8008bac <_svfiprintf_r+0x130>
 8008c20:	9105      	str	r1, [sp, #20]
 8008c22:	e7c3      	b.n	8008bac <_svfiprintf_r+0x130>
 8008c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c28:	4604      	mov	r4, r0
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e7f0      	b.n	8008c10 <_svfiprintf_r+0x194>
 8008c2e:	ab03      	add	r3, sp, #12
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	462a      	mov	r2, r5
 8008c34:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <_svfiprintf_r+0x1f8>)
 8008c36:	a904      	add	r1, sp, #16
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f3af 8000 	nop.w
 8008c3e:	1c42      	adds	r2, r0, #1
 8008c40:	4606      	mov	r6, r0
 8008c42:	d1d6      	bne.n	8008bf2 <_svfiprintf_r+0x176>
 8008c44:	89ab      	ldrh	r3, [r5, #12]
 8008c46:	065b      	lsls	r3, r3, #25
 8008c48:	f53f af2c 	bmi.w	8008aa4 <_svfiprintf_r+0x28>
 8008c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c4e:	b01d      	add	sp, #116	; 0x74
 8008c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c54:	ab03      	add	r3, sp, #12
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <_svfiprintf_r+0x1f8>)
 8008c5c:	a904      	add	r1, sp, #16
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f000 f9d4 	bl	800900c <_printf_i>
 8008c64:	e7eb      	b.n	8008c3e <_svfiprintf_r+0x1c2>
 8008c66:	bf00      	nop
 8008c68:	0800a51a 	.word	0x0800a51a
 8008c6c:	0800a524 	.word	0x0800a524
 8008c70:	00000000 	.word	0x00000000
 8008c74:	080089c5 	.word	0x080089c5
 8008c78:	0800a520 	.word	0x0800a520

08008c7c <__sfputc_r>:
 8008c7c:	6893      	ldr	r3, [r2, #8]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	b410      	push	{r4}
 8008c84:	6093      	str	r3, [r2, #8]
 8008c86:	da08      	bge.n	8008c9a <__sfputc_r+0x1e>
 8008c88:	6994      	ldr	r4, [r2, #24]
 8008c8a:	42a3      	cmp	r3, r4
 8008c8c:	db01      	blt.n	8008c92 <__sfputc_r+0x16>
 8008c8e:	290a      	cmp	r1, #10
 8008c90:	d103      	bne.n	8008c9a <__sfputc_r+0x1e>
 8008c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c96:	f000 baef 	b.w	8009278 <__swbuf_r>
 8008c9a:	6813      	ldr	r3, [r2, #0]
 8008c9c:	1c58      	adds	r0, r3, #1
 8008c9e:	6010      	str	r0, [r2, #0]
 8008ca0:	7019      	strb	r1, [r3, #0]
 8008ca2:	4608      	mov	r0, r1
 8008ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <__sfputs_r>:
 8008caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cac:	4606      	mov	r6, r0
 8008cae:	460f      	mov	r7, r1
 8008cb0:	4614      	mov	r4, r2
 8008cb2:	18d5      	adds	r5, r2, r3
 8008cb4:	42ac      	cmp	r4, r5
 8008cb6:	d101      	bne.n	8008cbc <__sfputs_r+0x12>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e007      	b.n	8008ccc <__sfputs_r+0x22>
 8008cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc0:	463a      	mov	r2, r7
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f7ff ffda 	bl	8008c7c <__sfputc_r>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d1f3      	bne.n	8008cb4 <__sfputs_r+0xa>
 8008ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cd0 <_vfiprintf_r>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	b09d      	sub	sp, #116	; 0x74
 8008cd8:	4614      	mov	r4, r2
 8008cda:	4698      	mov	r8, r3
 8008cdc:	4606      	mov	r6, r0
 8008cde:	b118      	cbz	r0, 8008ce8 <_vfiprintf_r+0x18>
 8008ce0:	6983      	ldr	r3, [r0, #24]
 8008ce2:	b90b      	cbnz	r3, 8008ce8 <_vfiprintf_r+0x18>
 8008ce4:	f000 fcaa 	bl	800963c <__sinit>
 8008ce8:	4b89      	ldr	r3, [pc, #548]	; (8008f10 <_vfiprintf_r+0x240>)
 8008cea:	429d      	cmp	r5, r3
 8008cec:	d11b      	bne.n	8008d26 <_vfiprintf_r+0x56>
 8008cee:	6875      	ldr	r5, [r6, #4]
 8008cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cf2:	07d9      	lsls	r1, r3, #31
 8008cf4:	d405      	bmi.n	8008d02 <_vfiprintf_r+0x32>
 8008cf6:	89ab      	ldrh	r3, [r5, #12]
 8008cf8:	059a      	lsls	r2, r3, #22
 8008cfa:	d402      	bmi.n	8008d02 <_vfiprintf_r+0x32>
 8008cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cfe:	f000 fd3b 	bl	8009778 <__retarget_lock_acquire_recursive>
 8008d02:	89ab      	ldrh	r3, [r5, #12]
 8008d04:	071b      	lsls	r3, r3, #28
 8008d06:	d501      	bpl.n	8008d0c <_vfiprintf_r+0x3c>
 8008d08:	692b      	ldr	r3, [r5, #16]
 8008d0a:	b9eb      	cbnz	r3, 8008d48 <_vfiprintf_r+0x78>
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f000 fb04 	bl	800931c <__swsetup_r>
 8008d14:	b1c0      	cbz	r0, 8008d48 <_vfiprintf_r+0x78>
 8008d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d18:	07dc      	lsls	r4, r3, #31
 8008d1a:	d50e      	bpl.n	8008d3a <_vfiprintf_r+0x6a>
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d20:	b01d      	add	sp, #116	; 0x74
 8008d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d26:	4b7b      	ldr	r3, [pc, #492]	; (8008f14 <_vfiprintf_r+0x244>)
 8008d28:	429d      	cmp	r5, r3
 8008d2a:	d101      	bne.n	8008d30 <_vfiprintf_r+0x60>
 8008d2c:	68b5      	ldr	r5, [r6, #8]
 8008d2e:	e7df      	b.n	8008cf0 <_vfiprintf_r+0x20>
 8008d30:	4b79      	ldr	r3, [pc, #484]	; (8008f18 <_vfiprintf_r+0x248>)
 8008d32:	429d      	cmp	r5, r3
 8008d34:	bf08      	it	eq
 8008d36:	68f5      	ldreq	r5, [r6, #12]
 8008d38:	e7da      	b.n	8008cf0 <_vfiprintf_r+0x20>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	0598      	lsls	r0, r3, #22
 8008d3e:	d4ed      	bmi.n	8008d1c <_vfiprintf_r+0x4c>
 8008d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d42:	f000 fd1a 	bl	800977a <__retarget_lock_release_recursive>
 8008d46:	e7e9      	b.n	8008d1c <_vfiprintf_r+0x4c>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d56:	2330      	movs	r3, #48	; 0x30
 8008d58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f1c <_vfiprintf_r+0x24c>
 8008d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d60:	f04f 0901 	mov.w	r9, #1
 8008d64:	4623      	mov	r3, r4
 8008d66:	469a      	mov	sl, r3
 8008d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d6c:	b10a      	cbz	r2, 8008d72 <_vfiprintf_r+0xa2>
 8008d6e:	2a25      	cmp	r2, #37	; 0x25
 8008d70:	d1f9      	bne.n	8008d66 <_vfiprintf_r+0x96>
 8008d72:	ebba 0b04 	subs.w	fp, sl, r4
 8008d76:	d00b      	beq.n	8008d90 <_vfiprintf_r+0xc0>
 8008d78:	465b      	mov	r3, fp
 8008d7a:	4622      	mov	r2, r4
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f7ff ff93 	bl	8008caa <__sfputs_r>
 8008d84:	3001      	adds	r0, #1
 8008d86:	f000 80aa 	beq.w	8008ede <_vfiprintf_r+0x20e>
 8008d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d8c:	445a      	add	r2, fp
 8008d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d90:	f89a 3000 	ldrb.w	r3, [sl]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 80a2 	beq.w	8008ede <_vfiprintf_r+0x20e>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008da4:	f10a 0a01 	add.w	sl, sl, #1
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	9307      	str	r3, [sp, #28]
 8008dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008db0:	931a      	str	r3, [sp, #104]	; 0x68
 8008db2:	4654      	mov	r4, sl
 8008db4:	2205      	movs	r2, #5
 8008db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dba:	4858      	ldr	r0, [pc, #352]	; (8008f1c <_vfiprintf_r+0x24c>)
 8008dbc:	f7f7 fa10 	bl	80001e0 <memchr>
 8008dc0:	9a04      	ldr	r2, [sp, #16]
 8008dc2:	b9d8      	cbnz	r0, 8008dfc <_vfiprintf_r+0x12c>
 8008dc4:	06d1      	lsls	r1, r2, #27
 8008dc6:	bf44      	itt	mi
 8008dc8:	2320      	movmi	r3, #32
 8008dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dce:	0713      	lsls	r3, r2, #28
 8008dd0:	bf44      	itt	mi
 8008dd2:	232b      	movmi	r3, #43	; 0x2b
 8008dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dde:	d015      	beq.n	8008e0c <_vfiprintf_r+0x13c>
 8008de0:	9a07      	ldr	r2, [sp, #28]
 8008de2:	4654      	mov	r4, sl
 8008de4:	2000      	movs	r0, #0
 8008de6:	f04f 0c0a 	mov.w	ip, #10
 8008dea:	4621      	mov	r1, r4
 8008dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df0:	3b30      	subs	r3, #48	; 0x30
 8008df2:	2b09      	cmp	r3, #9
 8008df4:	d94e      	bls.n	8008e94 <_vfiprintf_r+0x1c4>
 8008df6:	b1b0      	cbz	r0, 8008e26 <_vfiprintf_r+0x156>
 8008df8:	9207      	str	r2, [sp, #28]
 8008dfa:	e014      	b.n	8008e26 <_vfiprintf_r+0x156>
 8008dfc:	eba0 0308 	sub.w	r3, r0, r8
 8008e00:	fa09 f303 	lsl.w	r3, r9, r3
 8008e04:	4313      	orrs	r3, r2
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	46a2      	mov	sl, r4
 8008e0a:	e7d2      	b.n	8008db2 <_vfiprintf_r+0xe2>
 8008e0c:	9b03      	ldr	r3, [sp, #12]
 8008e0e:	1d19      	adds	r1, r3, #4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	9103      	str	r1, [sp, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	bfbb      	ittet	lt
 8008e18:	425b      	neglt	r3, r3
 8008e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e1e:	9307      	strge	r3, [sp, #28]
 8008e20:	9307      	strlt	r3, [sp, #28]
 8008e22:	bfb8      	it	lt
 8008e24:	9204      	strlt	r2, [sp, #16]
 8008e26:	7823      	ldrb	r3, [r4, #0]
 8008e28:	2b2e      	cmp	r3, #46	; 0x2e
 8008e2a:	d10c      	bne.n	8008e46 <_vfiprintf_r+0x176>
 8008e2c:	7863      	ldrb	r3, [r4, #1]
 8008e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e30:	d135      	bne.n	8008e9e <_vfiprintf_r+0x1ce>
 8008e32:	9b03      	ldr	r3, [sp, #12]
 8008e34:	1d1a      	adds	r2, r3, #4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	9203      	str	r2, [sp, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfb8      	it	lt
 8008e3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e42:	3402      	adds	r4, #2
 8008e44:	9305      	str	r3, [sp, #20]
 8008e46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f2c <_vfiprintf_r+0x25c>
 8008e4a:	7821      	ldrb	r1, [r4, #0]
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	4650      	mov	r0, sl
 8008e50:	f7f7 f9c6 	bl	80001e0 <memchr>
 8008e54:	b140      	cbz	r0, 8008e68 <_vfiprintf_r+0x198>
 8008e56:	2340      	movs	r3, #64	; 0x40
 8008e58:	eba0 000a 	sub.w	r0, r0, sl
 8008e5c:	fa03 f000 	lsl.w	r0, r3, r0
 8008e60:	9b04      	ldr	r3, [sp, #16]
 8008e62:	4303      	orrs	r3, r0
 8008e64:	3401      	adds	r4, #1
 8008e66:	9304      	str	r3, [sp, #16]
 8008e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e6c:	482c      	ldr	r0, [pc, #176]	; (8008f20 <_vfiprintf_r+0x250>)
 8008e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e72:	2206      	movs	r2, #6
 8008e74:	f7f7 f9b4 	bl	80001e0 <memchr>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d03f      	beq.n	8008efc <_vfiprintf_r+0x22c>
 8008e7c:	4b29      	ldr	r3, [pc, #164]	; (8008f24 <_vfiprintf_r+0x254>)
 8008e7e:	bb1b      	cbnz	r3, 8008ec8 <_vfiprintf_r+0x1f8>
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	3307      	adds	r3, #7
 8008e84:	f023 0307 	bic.w	r3, r3, #7
 8008e88:	3308      	adds	r3, #8
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8e:	443b      	add	r3, r7
 8008e90:	9309      	str	r3, [sp, #36]	; 0x24
 8008e92:	e767      	b.n	8008d64 <_vfiprintf_r+0x94>
 8008e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e98:	460c      	mov	r4, r1
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	e7a5      	b.n	8008dea <_vfiprintf_r+0x11a>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	3401      	adds	r4, #1
 8008ea2:	9305      	str	r3, [sp, #20]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f04f 0c0a 	mov.w	ip, #10
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb0:	3a30      	subs	r2, #48	; 0x30
 8008eb2:	2a09      	cmp	r2, #9
 8008eb4:	d903      	bls.n	8008ebe <_vfiprintf_r+0x1ee>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0c5      	beq.n	8008e46 <_vfiprintf_r+0x176>
 8008eba:	9105      	str	r1, [sp, #20]
 8008ebc:	e7c3      	b.n	8008e46 <_vfiprintf_r+0x176>
 8008ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e7f0      	b.n	8008eaa <_vfiprintf_r+0x1da>
 8008ec8:	ab03      	add	r3, sp, #12
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	462a      	mov	r2, r5
 8008ece:	4b16      	ldr	r3, [pc, #88]	; (8008f28 <_vfiprintf_r+0x258>)
 8008ed0:	a904      	add	r1, sp, #16
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	4607      	mov	r7, r0
 8008eda:	1c78      	adds	r0, r7, #1
 8008edc:	d1d6      	bne.n	8008e8c <_vfiprintf_r+0x1bc>
 8008ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ee0:	07d9      	lsls	r1, r3, #31
 8008ee2:	d405      	bmi.n	8008ef0 <_vfiprintf_r+0x220>
 8008ee4:	89ab      	ldrh	r3, [r5, #12]
 8008ee6:	059a      	lsls	r2, r3, #22
 8008ee8:	d402      	bmi.n	8008ef0 <_vfiprintf_r+0x220>
 8008eea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eec:	f000 fc45 	bl	800977a <__retarget_lock_release_recursive>
 8008ef0:	89ab      	ldrh	r3, [r5, #12]
 8008ef2:	065b      	lsls	r3, r3, #25
 8008ef4:	f53f af12 	bmi.w	8008d1c <_vfiprintf_r+0x4c>
 8008ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008efa:	e711      	b.n	8008d20 <_vfiprintf_r+0x50>
 8008efc:	ab03      	add	r3, sp, #12
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	462a      	mov	r2, r5
 8008f02:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <_vfiprintf_r+0x258>)
 8008f04:	a904      	add	r1, sp, #16
 8008f06:	4630      	mov	r0, r6
 8008f08:	f000 f880 	bl	800900c <_printf_i>
 8008f0c:	e7e4      	b.n	8008ed8 <_vfiprintf_r+0x208>
 8008f0e:	bf00      	nop
 8008f10:	0800a570 	.word	0x0800a570
 8008f14:	0800a590 	.word	0x0800a590
 8008f18:	0800a550 	.word	0x0800a550
 8008f1c:	0800a51a 	.word	0x0800a51a
 8008f20:	0800a524 	.word	0x0800a524
 8008f24:	00000000 	.word	0x00000000
 8008f28:	08008cab 	.word	0x08008cab
 8008f2c:	0800a520 	.word	0x0800a520

08008f30 <_printf_common>:
 8008f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f34:	4616      	mov	r6, r2
 8008f36:	4699      	mov	r9, r3
 8008f38:	688a      	ldr	r2, [r1, #8]
 8008f3a:	690b      	ldr	r3, [r1, #16]
 8008f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f40:	4293      	cmp	r3, r2
 8008f42:	bfb8      	it	lt
 8008f44:	4613      	movlt	r3, r2
 8008f46:	6033      	str	r3, [r6, #0]
 8008f48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	b10a      	cbz	r2, 8008f56 <_printf_common+0x26>
 8008f52:	3301      	adds	r3, #1
 8008f54:	6033      	str	r3, [r6, #0]
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	0699      	lsls	r1, r3, #26
 8008f5a:	bf42      	ittt	mi
 8008f5c:	6833      	ldrmi	r3, [r6, #0]
 8008f5e:	3302      	addmi	r3, #2
 8008f60:	6033      	strmi	r3, [r6, #0]
 8008f62:	6825      	ldr	r5, [r4, #0]
 8008f64:	f015 0506 	ands.w	r5, r5, #6
 8008f68:	d106      	bne.n	8008f78 <_printf_common+0x48>
 8008f6a:	f104 0a19 	add.w	sl, r4, #25
 8008f6e:	68e3      	ldr	r3, [r4, #12]
 8008f70:	6832      	ldr	r2, [r6, #0]
 8008f72:	1a9b      	subs	r3, r3, r2
 8008f74:	42ab      	cmp	r3, r5
 8008f76:	dc26      	bgt.n	8008fc6 <_printf_common+0x96>
 8008f78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f7c:	1e13      	subs	r3, r2, #0
 8008f7e:	6822      	ldr	r2, [r4, #0]
 8008f80:	bf18      	it	ne
 8008f82:	2301      	movne	r3, #1
 8008f84:	0692      	lsls	r2, r2, #26
 8008f86:	d42b      	bmi.n	8008fe0 <_printf_common+0xb0>
 8008f88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	4638      	mov	r0, r7
 8008f90:	47c0      	blx	r8
 8008f92:	3001      	adds	r0, #1
 8008f94:	d01e      	beq.n	8008fd4 <_printf_common+0xa4>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	68e5      	ldr	r5, [r4, #12]
 8008f9a:	6832      	ldr	r2, [r6, #0]
 8008f9c:	f003 0306 	and.w	r3, r3, #6
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	bf08      	it	eq
 8008fa4:	1aad      	subeq	r5, r5, r2
 8008fa6:	68a3      	ldr	r3, [r4, #8]
 8008fa8:	6922      	ldr	r2, [r4, #16]
 8008faa:	bf0c      	ite	eq
 8008fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fb0:	2500      	movne	r5, #0
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	bfc4      	itt	gt
 8008fb6:	1a9b      	subgt	r3, r3, r2
 8008fb8:	18ed      	addgt	r5, r5, r3
 8008fba:	2600      	movs	r6, #0
 8008fbc:	341a      	adds	r4, #26
 8008fbe:	42b5      	cmp	r5, r6
 8008fc0:	d11a      	bne.n	8008ff8 <_printf_common+0xc8>
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	e008      	b.n	8008fd8 <_printf_common+0xa8>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	4652      	mov	r2, sl
 8008fca:	4649      	mov	r1, r9
 8008fcc:	4638      	mov	r0, r7
 8008fce:	47c0      	blx	r8
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d103      	bne.n	8008fdc <_printf_common+0xac>
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fdc:	3501      	adds	r5, #1
 8008fde:	e7c6      	b.n	8008f6e <_printf_common+0x3e>
 8008fe0:	18e1      	adds	r1, r4, r3
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	2030      	movs	r0, #48	; 0x30
 8008fe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fea:	4422      	add	r2, r4
 8008fec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ff0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ff4:	3302      	adds	r3, #2
 8008ff6:	e7c7      	b.n	8008f88 <_printf_common+0x58>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	4622      	mov	r2, r4
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	4638      	mov	r0, r7
 8009000:	47c0      	blx	r8
 8009002:	3001      	adds	r0, #1
 8009004:	d0e6      	beq.n	8008fd4 <_printf_common+0xa4>
 8009006:	3601      	adds	r6, #1
 8009008:	e7d9      	b.n	8008fbe <_printf_common+0x8e>
	...

0800900c <_printf_i>:
 800900c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009010:	7e0f      	ldrb	r7, [r1, #24]
 8009012:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009014:	2f78      	cmp	r7, #120	; 0x78
 8009016:	4691      	mov	r9, r2
 8009018:	4680      	mov	r8, r0
 800901a:	460c      	mov	r4, r1
 800901c:	469a      	mov	sl, r3
 800901e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009022:	d807      	bhi.n	8009034 <_printf_i+0x28>
 8009024:	2f62      	cmp	r7, #98	; 0x62
 8009026:	d80a      	bhi.n	800903e <_printf_i+0x32>
 8009028:	2f00      	cmp	r7, #0
 800902a:	f000 80d8 	beq.w	80091de <_printf_i+0x1d2>
 800902e:	2f58      	cmp	r7, #88	; 0x58
 8009030:	f000 80a3 	beq.w	800917a <_printf_i+0x16e>
 8009034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009038:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800903c:	e03a      	b.n	80090b4 <_printf_i+0xa8>
 800903e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009042:	2b15      	cmp	r3, #21
 8009044:	d8f6      	bhi.n	8009034 <_printf_i+0x28>
 8009046:	a101      	add	r1, pc, #4	; (adr r1, 800904c <_printf_i+0x40>)
 8009048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800904c:	080090a5 	.word	0x080090a5
 8009050:	080090b9 	.word	0x080090b9
 8009054:	08009035 	.word	0x08009035
 8009058:	08009035 	.word	0x08009035
 800905c:	08009035 	.word	0x08009035
 8009060:	08009035 	.word	0x08009035
 8009064:	080090b9 	.word	0x080090b9
 8009068:	08009035 	.word	0x08009035
 800906c:	08009035 	.word	0x08009035
 8009070:	08009035 	.word	0x08009035
 8009074:	08009035 	.word	0x08009035
 8009078:	080091c5 	.word	0x080091c5
 800907c:	080090e9 	.word	0x080090e9
 8009080:	080091a7 	.word	0x080091a7
 8009084:	08009035 	.word	0x08009035
 8009088:	08009035 	.word	0x08009035
 800908c:	080091e7 	.word	0x080091e7
 8009090:	08009035 	.word	0x08009035
 8009094:	080090e9 	.word	0x080090e9
 8009098:	08009035 	.word	0x08009035
 800909c:	08009035 	.word	0x08009035
 80090a0:	080091af 	.word	0x080091af
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	1d1a      	adds	r2, r3, #4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	602a      	str	r2, [r5, #0]
 80090ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090b4:	2301      	movs	r3, #1
 80090b6:	e0a3      	b.n	8009200 <_printf_i+0x1f4>
 80090b8:	6820      	ldr	r0, [r4, #0]
 80090ba:	6829      	ldr	r1, [r5, #0]
 80090bc:	0606      	lsls	r6, r0, #24
 80090be:	f101 0304 	add.w	r3, r1, #4
 80090c2:	d50a      	bpl.n	80090da <_printf_i+0xce>
 80090c4:	680e      	ldr	r6, [r1, #0]
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	2e00      	cmp	r6, #0
 80090ca:	da03      	bge.n	80090d4 <_printf_i+0xc8>
 80090cc:	232d      	movs	r3, #45	; 0x2d
 80090ce:	4276      	negs	r6, r6
 80090d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d4:	485e      	ldr	r0, [pc, #376]	; (8009250 <_printf_i+0x244>)
 80090d6:	230a      	movs	r3, #10
 80090d8:	e019      	b.n	800910e <_printf_i+0x102>
 80090da:	680e      	ldr	r6, [r1, #0]
 80090dc:	602b      	str	r3, [r5, #0]
 80090de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090e2:	bf18      	it	ne
 80090e4:	b236      	sxthne	r6, r6
 80090e6:	e7ef      	b.n	80090c8 <_printf_i+0xbc>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	6820      	ldr	r0, [r4, #0]
 80090ec:	1d19      	adds	r1, r3, #4
 80090ee:	6029      	str	r1, [r5, #0]
 80090f0:	0601      	lsls	r1, r0, #24
 80090f2:	d501      	bpl.n	80090f8 <_printf_i+0xec>
 80090f4:	681e      	ldr	r6, [r3, #0]
 80090f6:	e002      	b.n	80090fe <_printf_i+0xf2>
 80090f8:	0646      	lsls	r6, r0, #25
 80090fa:	d5fb      	bpl.n	80090f4 <_printf_i+0xe8>
 80090fc:	881e      	ldrh	r6, [r3, #0]
 80090fe:	4854      	ldr	r0, [pc, #336]	; (8009250 <_printf_i+0x244>)
 8009100:	2f6f      	cmp	r7, #111	; 0x6f
 8009102:	bf0c      	ite	eq
 8009104:	2308      	moveq	r3, #8
 8009106:	230a      	movne	r3, #10
 8009108:	2100      	movs	r1, #0
 800910a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800910e:	6865      	ldr	r5, [r4, #4]
 8009110:	60a5      	str	r5, [r4, #8]
 8009112:	2d00      	cmp	r5, #0
 8009114:	bfa2      	ittt	ge
 8009116:	6821      	ldrge	r1, [r4, #0]
 8009118:	f021 0104 	bicge.w	r1, r1, #4
 800911c:	6021      	strge	r1, [r4, #0]
 800911e:	b90e      	cbnz	r6, 8009124 <_printf_i+0x118>
 8009120:	2d00      	cmp	r5, #0
 8009122:	d04d      	beq.n	80091c0 <_printf_i+0x1b4>
 8009124:	4615      	mov	r5, r2
 8009126:	fbb6 f1f3 	udiv	r1, r6, r3
 800912a:	fb03 6711 	mls	r7, r3, r1, r6
 800912e:	5dc7      	ldrb	r7, [r0, r7]
 8009130:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009134:	4637      	mov	r7, r6
 8009136:	42bb      	cmp	r3, r7
 8009138:	460e      	mov	r6, r1
 800913a:	d9f4      	bls.n	8009126 <_printf_i+0x11a>
 800913c:	2b08      	cmp	r3, #8
 800913e:	d10b      	bne.n	8009158 <_printf_i+0x14c>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	07de      	lsls	r6, r3, #31
 8009144:	d508      	bpl.n	8009158 <_printf_i+0x14c>
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	6861      	ldr	r1, [r4, #4]
 800914a:	4299      	cmp	r1, r3
 800914c:	bfde      	ittt	le
 800914e:	2330      	movle	r3, #48	; 0x30
 8009150:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009154:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009158:	1b52      	subs	r2, r2, r5
 800915a:	6122      	str	r2, [r4, #16]
 800915c:	f8cd a000 	str.w	sl, [sp]
 8009160:	464b      	mov	r3, r9
 8009162:	aa03      	add	r2, sp, #12
 8009164:	4621      	mov	r1, r4
 8009166:	4640      	mov	r0, r8
 8009168:	f7ff fee2 	bl	8008f30 <_printf_common>
 800916c:	3001      	adds	r0, #1
 800916e:	d14c      	bne.n	800920a <_printf_i+0x1fe>
 8009170:	f04f 30ff 	mov.w	r0, #4294967295
 8009174:	b004      	add	sp, #16
 8009176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917a:	4835      	ldr	r0, [pc, #212]	; (8009250 <_printf_i+0x244>)
 800917c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009180:	6829      	ldr	r1, [r5, #0]
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	f851 6b04 	ldr.w	r6, [r1], #4
 8009188:	6029      	str	r1, [r5, #0]
 800918a:	061d      	lsls	r5, r3, #24
 800918c:	d514      	bpl.n	80091b8 <_printf_i+0x1ac>
 800918e:	07df      	lsls	r7, r3, #31
 8009190:	bf44      	itt	mi
 8009192:	f043 0320 	orrmi.w	r3, r3, #32
 8009196:	6023      	strmi	r3, [r4, #0]
 8009198:	b91e      	cbnz	r6, 80091a2 <_printf_i+0x196>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	f023 0320 	bic.w	r3, r3, #32
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	2310      	movs	r3, #16
 80091a4:	e7b0      	b.n	8009108 <_printf_i+0xfc>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	f043 0320 	orr.w	r3, r3, #32
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	2378      	movs	r3, #120	; 0x78
 80091b0:	4828      	ldr	r0, [pc, #160]	; (8009254 <_printf_i+0x248>)
 80091b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091b6:	e7e3      	b.n	8009180 <_printf_i+0x174>
 80091b8:	0659      	lsls	r1, r3, #25
 80091ba:	bf48      	it	mi
 80091bc:	b2b6      	uxthmi	r6, r6
 80091be:	e7e6      	b.n	800918e <_printf_i+0x182>
 80091c0:	4615      	mov	r5, r2
 80091c2:	e7bb      	b.n	800913c <_printf_i+0x130>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	6826      	ldr	r6, [r4, #0]
 80091c8:	6961      	ldr	r1, [r4, #20]
 80091ca:	1d18      	adds	r0, r3, #4
 80091cc:	6028      	str	r0, [r5, #0]
 80091ce:	0635      	lsls	r5, r6, #24
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	d501      	bpl.n	80091d8 <_printf_i+0x1cc>
 80091d4:	6019      	str	r1, [r3, #0]
 80091d6:	e002      	b.n	80091de <_printf_i+0x1d2>
 80091d8:	0670      	lsls	r0, r6, #25
 80091da:	d5fb      	bpl.n	80091d4 <_printf_i+0x1c8>
 80091dc:	8019      	strh	r1, [r3, #0]
 80091de:	2300      	movs	r3, #0
 80091e0:	6123      	str	r3, [r4, #16]
 80091e2:	4615      	mov	r5, r2
 80091e4:	e7ba      	b.n	800915c <_printf_i+0x150>
 80091e6:	682b      	ldr	r3, [r5, #0]
 80091e8:	1d1a      	adds	r2, r3, #4
 80091ea:	602a      	str	r2, [r5, #0]
 80091ec:	681d      	ldr	r5, [r3, #0]
 80091ee:	6862      	ldr	r2, [r4, #4]
 80091f0:	2100      	movs	r1, #0
 80091f2:	4628      	mov	r0, r5
 80091f4:	f7f6 fff4 	bl	80001e0 <memchr>
 80091f8:	b108      	cbz	r0, 80091fe <_printf_i+0x1f2>
 80091fa:	1b40      	subs	r0, r0, r5
 80091fc:	6060      	str	r0, [r4, #4]
 80091fe:	6863      	ldr	r3, [r4, #4]
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	2300      	movs	r3, #0
 8009204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009208:	e7a8      	b.n	800915c <_printf_i+0x150>
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	462a      	mov	r2, r5
 800920e:	4649      	mov	r1, r9
 8009210:	4640      	mov	r0, r8
 8009212:	47d0      	blx	sl
 8009214:	3001      	adds	r0, #1
 8009216:	d0ab      	beq.n	8009170 <_printf_i+0x164>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	079b      	lsls	r3, r3, #30
 800921c:	d413      	bmi.n	8009246 <_printf_i+0x23a>
 800921e:	68e0      	ldr	r0, [r4, #12]
 8009220:	9b03      	ldr	r3, [sp, #12]
 8009222:	4298      	cmp	r0, r3
 8009224:	bfb8      	it	lt
 8009226:	4618      	movlt	r0, r3
 8009228:	e7a4      	b.n	8009174 <_printf_i+0x168>
 800922a:	2301      	movs	r3, #1
 800922c:	4632      	mov	r2, r6
 800922e:	4649      	mov	r1, r9
 8009230:	4640      	mov	r0, r8
 8009232:	47d0      	blx	sl
 8009234:	3001      	adds	r0, #1
 8009236:	d09b      	beq.n	8009170 <_printf_i+0x164>
 8009238:	3501      	adds	r5, #1
 800923a:	68e3      	ldr	r3, [r4, #12]
 800923c:	9903      	ldr	r1, [sp, #12]
 800923e:	1a5b      	subs	r3, r3, r1
 8009240:	42ab      	cmp	r3, r5
 8009242:	dcf2      	bgt.n	800922a <_printf_i+0x21e>
 8009244:	e7eb      	b.n	800921e <_printf_i+0x212>
 8009246:	2500      	movs	r5, #0
 8009248:	f104 0619 	add.w	r6, r4, #25
 800924c:	e7f5      	b.n	800923a <_printf_i+0x22e>
 800924e:	bf00      	nop
 8009250:	0800a52b 	.word	0x0800a52b
 8009254:	0800a53c 	.word	0x0800a53c

08009258 <_sbrk_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d06      	ldr	r5, [pc, #24]	; (8009274 <_sbrk_r+0x1c>)
 800925c:	2300      	movs	r3, #0
 800925e:	4604      	mov	r4, r0
 8009260:	4608      	mov	r0, r1
 8009262:	602b      	str	r3, [r5, #0]
 8009264:	f7fa fb88 	bl	8003978 <_sbrk>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_sbrk_r+0x1a>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_sbrk_r+0x1a>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	20000c9c 	.word	0x20000c9c

08009278 <__swbuf_r>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	460e      	mov	r6, r1
 800927c:	4614      	mov	r4, r2
 800927e:	4605      	mov	r5, r0
 8009280:	b118      	cbz	r0, 800928a <__swbuf_r+0x12>
 8009282:	6983      	ldr	r3, [r0, #24]
 8009284:	b90b      	cbnz	r3, 800928a <__swbuf_r+0x12>
 8009286:	f000 f9d9 	bl	800963c <__sinit>
 800928a:	4b21      	ldr	r3, [pc, #132]	; (8009310 <__swbuf_r+0x98>)
 800928c:	429c      	cmp	r4, r3
 800928e:	d12b      	bne.n	80092e8 <__swbuf_r+0x70>
 8009290:	686c      	ldr	r4, [r5, #4]
 8009292:	69a3      	ldr	r3, [r4, #24]
 8009294:	60a3      	str	r3, [r4, #8]
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	071a      	lsls	r2, r3, #28
 800929a:	d52f      	bpl.n	80092fc <__swbuf_r+0x84>
 800929c:	6923      	ldr	r3, [r4, #16]
 800929e:	b36b      	cbz	r3, 80092fc <__swbuf_r+0x84>
 80092a0:	6923      	ldr	r3, [r4, #16]
 80092a2:	6820      	ldr	r0, [r4, #0]
 80092a4:	1ac0      	subs	r0, r0, r3
 80092a6:	6963      	ldr	r3, [r4, #20]
 80092a8:	b2f6      	uxtb	r6, r6
 80092aa:	4283      	cmp	r3, r0
 80092ac:	4637      	mov	r7, r6
 80092ae:	dc04      	bgt.n	80092ba <__swbuf_r+0x42>
 80092b0:	4621      	mov	r1, r4
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 f92e 	bl	8009514 <_fflush_r>
 80092b8:	bb30      	cbnz	r0, 8009308 <__swbuf_r+0x90>
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	3b01      	subs	r3, #1
 80092be:	60a3      	str	r3, [r4, #8]
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	6022      	str	r2, [r4, #0]
 80092c6:	701e      	strb	r6, [r3, #0]
 80092c8:	6963      	ldr	r3, [r4, #20]
 80092ca:	3001      	adds	r0, #1
 80092cc:	4283      	cmp	r3, r0
 80092ce:	d004      	beq.n	80092da <__swbuf_r+0x62>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	07db      	lsls	r3, r3, #31
 80092d4:	d506      	bpl.n	80092e4 <__swbuf_r+0x6c>
 80092d6:	2e0a      	cmp	r6, #10
 80092d8:	d104      	bne.n	80092e4 <__swbuf_r+0x6c>
 80092da:	4621      	mov	r1, r4
 80092dc:	4628      	mov	r0, r5
 80092de:	f000 f919 	bl	8009514 <_fflush_r>
 80092e2:	b988      	cbnz	r0, 8009308 <__swbuf_r+0x90>
 80092e4:	4638      	mov	r0, r7
 80092e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e8:	4b0a      	ldr	r3, [pc, #40]	; (8009314 <__swbuf_r+0x9c>)
 80092ea:	429c      	cmp	r4, r3
 80092ec:	d101      	bne.n	80092f2 <__swbuf_r+0x7a>
 80092ee:	68ac      	ldr	r4, [r5, #8]
 80092f0:	e7cf      	b.n	8009292 <__swbuf_r+0x1a>
 80092f2:	4b09      	ldr	r3, [pc, #36]	; (8009318 <__swbuf_r+0xa0>)
 80092f4:	429c      	cmp	r4, r3
 80092f6:	bf08      	it	eq
 80092f8:	68ec      	ldreq	r4, [r5, #12]
 80092fa:	e7ca      	b.n	8009292 <__swbuf_r+0x1a>
 80092fc:	4621      	mov	r1, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f80c 	bl	800931c <__swsetup_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	d0cb      	beq.n	80092a0 <__swbuf_r+0x28>
 8009308:	f04f 37ff 	mov.w	r7, #4294967295
 800930c:	e7ea      	b.n	80092e4 <__swbuf_r+0x6c>
 800930e:	bf00      	nop
 8009310:	0800a570 	.word	0x0800a570
 8009314:	0800a590 	.word	0x0800a590
 8009318:	0800a550 	.word	0x0800a550

0800931c <__swsetup_r>:
 800931c:	4b32      	ldr	r3, [pc, #200]	; (80093e8 <__swsetup_r+0xcc>)
 800931e:	b570      	push	{r4, r5, r6, lr}
 8009320:	681d      	ldr	r5, [r3, #0]
 8009322:	4606      	mov	r6, r0
 8009324:	460c      	mov	r4, r1
 8009326:	b125      	cbz	r5, 8009332 <__swsetup_r+0x16>
 8009328:	69ab      	ldr	r3, [r5, #24]
 800932a:	b913      	cbnz	r3, 8009332 <__swsetup_r+0x16>
 800932c:	4628      	mov	r0, r5
 800932e:	f000 f985 	bl	800963c <__sinit>
 8009332:	4b2e      	ldr	r3, [pc, #184]	; (80093ec <__swsetup_r+0xd0>)
 8009334:	429c      	cmp	r4, r3
 8009336:	d10f      	bne.n	8009358 <__swsetup_r+0x3c>
 8009338:	686c      	ldr	r4, [r5, #4]
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009340:	0719      	lsls	r1, r3, #28
 8009342:	d42c      	bmi.n	800939e <__swsetup_r+0x82>
 8009344:	06dd      	lsls	r5, r3, #27
 8009346:	d411      	bmi.n	800936c <__swsetup_r+0x50>
 8009348:	2309      	movs	r3, #9
 800934a:	6033      	str	r3, [r6, #0]
 800934c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	f04f 30ff 	mov.w	r0, #4294967295
 8009356:	e03e      	b.n	80093d6 <__swsetup_r+0xba>
 8009358:	4b25      	ldr	r3, [pc, #148]	; (80093f0 <__swsetup_r+0xd4>)
 800935a:	429c      	cmp	r4, r3
 800935c:	d101      	bne.n	8009362 <__swsetup_r+0x46>
 800935e:	68ac      	ldr	r4, [r5, #8]
 8009360:	e7eb      	b.n	800933a <__swsetup_r+0x1e>
 8009362:	4b24      	ldr	r3, [pc, #144]	; (80093f4 <__swsetup_r+0xd8>)
 8009364:	429c      	cmp	r4, r3
 8009366:	bf08      	it	eq
 8009368:	68ec      	ldreq	r4, [r5, #12]
 800936a:	e7e6      	b.n	800933a <__swsetup_r+0x1e>
 800936c:	0758      	lsls	r0, r3, #29
 800936e:	d512      	bpl.n	8009396 <__swsetup_r+0x7a>
 8009370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009372:	b141      	cbz	r1, 8009386 <__swsetup_r+0x6a>
 8009374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009378:	4299      	cmp	r1, r3
 800937a:	d002      	beq.n	8009382 <__swsetup_r+0x66>
 800937c:	4630      	mov	r0, r6
 800937e:	f7ff fa41 	bl	8008804 <_free_r>
 8009382:	2300      	movs	r3, #0
 8009384:	6363      	str	r3, [r4, #52]	; 0x34
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	2300      	movs	r3, #0
 8009390:	6063      	str	r3, [r4, #4]
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f043 0308 	orr.w	r3, r3, #8
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	b94b      	cbnz	r3, 80093b6 <__swsetup_r+0x9a>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093ac:	d003      	beq.n	80093b6 <__swsetup_r+0x9a>
 80093ae:	4621      	mov	r1, r4
 80093b0:	4630      	mov	r0, r6
 80093b2:	f000 fa09 	bl	80097c8 <__smakebuf_r>
 80093b6:	89a0      	ldrh	r0, [r4, #12]
 80093b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093bc:	f010 0301 	ands.w	r3, r0, #1
 80093c0:	d00a      	beq.n	80093d8 <__swsetup_r+0xbc>
 80093c2:	2300      	movs	r3, #0
 80093c4:	60a3      	str	r3, [r4, #8]
 80093c6:	6963      	ldr	r3, [r4, #20]
 80093c8:	425b      	negs	r3, r3
 80093ca:	61a3      	str	r3, [r4, #24]
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	b943      	cbnz	r3, 80093e2 <__swsetup_r+0xc6>
 80093d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093d4:	d1ba      	bne.n	800934c <__swsetup_r+0x30>
 80093d6:	bd70      	pop	{r4, r5, r6, pc}
 80093d8:	0781      	lsls	r1, r0, #30
 80093da:	bf58      	it	pl
 80093dc:	6963      	ldrpl	r3, [r4, #20]
 80093de:	60a3      	str	r3, [r4, #8]
 80093e0:	e7f4      	b.n	80093cc <__swsetup_r+0xb0>
 80093e2:	2000      	movs	r0, #0
 80093e4:	e7f7      	b.n	80093d6 <__swsetup_r+0xba>
 80093e6:	bf00      	nop
 80093e8:	2000030c 	.word	0x2000030c
 80093ec:	0800a570 	.word	0x0800a570
 80093f0:	0800a590 	.word	0x0800a590
 80093f4:	0800a550 	.word	0x0800a550

080093f8 <abort>:
 80093f8:	b508      	push	{r3, lr}
 80093fa:	2006      	movs	r0, #6
 80093fc:	f000 faa2 	bl	8009944 <raise>
 8009400:	2001      	movs	r0, #1
 8009402:	f7fa fa41 	bl	8003888 <_exit>
	...

08009408 <__sflush_r>:
 8009408:	898a      	ldrh	r2, [r1, #12]
 800940a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940e:	4605      	mov	r5, r0
 8009410:	0710      	lsls	r0, r2, #28
 8009412:	460c      	mov	r4, r1
 8009414:	d458      	bmi.n	80094c8 <__sflush_r+0xc0>
 8009416:	684b      	ldr	r3, [r1, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc05      	bgt.n	8009428 <__sflush_r+0x20>
 800941c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800941e:	2b00      	cmp	r3, #0
 8009420:	dc02      	bgt.n	8009428 <__sflush_r+0x20>
 8009422:	2000      	movs	r0, #0
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800942a:	2e00      	cmp	r6, #0
 800942c:	d0f9      	beq.n	8009422 <__sflush_r+0x1a>
 800942e:	2300      	movs	r3, #0
 8009430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009434:	682f      	ldr	r7, [r5, #0]
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	d032      	beq.n	80094a0 <__sflush_r+0x98>
 800943a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	075a      	lsls	r2, r3, #29
 8009440:	d505      	bpl.n	800944e <__sflush_r+0x46>
 8009442:	6863      	ldr	r3, [r4, #4]
 8009444:	1ac0      	subs	r0, r0, r3
 8009446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009448:	b10b      	cbz	r3, 800944e <__sflush_r+0x46>
 800944a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800944c:	1ac0      	subs	r0, r0, r3
 800944e:	2300      	movs	r3, #0
 8009450:	4602      	mov	r2, r0
 8009452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009454:	6a21      	ldr	r1, [r4, #32]
 8009456:	4628      	mov	r0, r5
 8009458:	47b0      	blx	r6
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	d106      	bne.n	800946e <__sflush_r+0x66>
 8009460:	6829      	ldr	r1, [r5, #0]
 8009462:	291d      	cmp	r1, #29
 8009464:	d82c      	bhi.n	80094c0 <__sflush_r+0xb8>
 8009466:	4a2a      	ldr	r2, [pc, #168]	; (8009510 <__sflush_r+0x108>)
 8009468:	40ca      	lsrs	r2, r1
 800946a:	07d6      	lsls	r6, r2, #31
 800946c:	d528      	bpl.n	80094c0 <__sflush_r+0xb8>
 800946e:	2200      	movs	r2, #0
 8009470:	6062      	str	r2, [r4, #4]
 8009472:	04d9      	lsls	r1, r3, #19
 8009474:	6922      	ldr	r2, [r4, #16]
 8009476:	6022      	str	r2, [r4, #0]
 8009478:	d504      	bpl.n	8009484 <__sflush_r+0x7c>
 800947a:	1c42      	adds	r2, r0, #1
 800947c:	d101      	bne.n	8009482 <__sflush_r+0x7a>
 800947e:	682b      	ldr	r3, [r5, #0]
 8009480:	b903      	cbnz	r3, 8009484 <__sflush_r+0x7c>
 8009482:	6560      	str	r0, [r4, #84]	; 0x54
 8009484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009486:	602f      	str	r7, [r5, #0]
 8009488:	2900      	cmp	r1, #0
 800948a:	d0ca      	beq.n	8009422 <__sflush_r+0x1a>
 800948c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009490:	4299      	cmp	r1, r3
 8009492:	d002      	beq.n	800949a <__sflush_r+0x92>
 8009494:	4628      	mov	r0, r5
 8009496:	f7ff f9b5 	bl	8008804 <_free_r>
 800949a:	2000      	movs	r0, #0
 800949c:	6360      	str	r0, [r4, #52]	; 0x34
 800949e:	e7c1      	b.n	8009424 <__sflush_r+0x1c>
 80094a0:	6a21      	ldr	r1, [r4, #32]
 80094a2:	2301      	movs	r3, #1
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b0      	blx	r6
 80094a8:	1c41      	adds	r1, r0, #1
 80094aa:	d1c7      	bne.n	800943c <__sflush_r+0x34>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0c4      	beq.n	800943c <__sflush_r+0x34>
 80094b2:	2b1d      	cmp	r3, #29
 80094b4:	d001      	beq.n	80094ba <__sflush_r+0xb2>
 80094b6:	2b16      	cmp	r3, #22
 80094b8:	d101      	bne.n	80094be <__sflush_r+0xb6>
 80094ba:	602f      	str	r7, [r5, #0]
 80094bc:	e7b1      	b.n	8009422 <__sflush_r+0x1a>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	e7ad      	b.n	8009424 <__sflush_r+0x1c>
 80094c8:	690f      	ldr	r7, [r1, #16]
 80094ca:	2f00      	cmp	r7, #0
 80094cc:	d0a9      	beq.n	8009422 <__sflush_r+0x1a>
 80094ce:	0793      	lsls	r3, r2, #30
 80094d0:	680e      	ldr	r6, [r1, #0]
 80094d2:	bf08      	it	eq
 80094d4:	694b      	ldreq	r3, [r1, #20]
 80094d6:	600f      	str	r7, [r1, #0]
 80094d8:	bf18      	it	ne
 80094da:	2300      	movne	r3, #0
 80094dc:	eba6 0807 	sub.w	r8, r6, r7
 80094e0:	608b      	str	r3, [r1, #8]
 80094e2:	f1b8 0f00 	cmp.w	r8, #0
 80094e6:	dd9c      	ble.n	8009422 <__sflush_r+0x1a>
 80094e8:	6a21      	ldr	r1, [r4, #32]
 80094ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094ec:	4643      	mov	r3, r8
 80094ee:	463a      	mov	r2, r7
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b0      	blx	r6
 80094f4:	2800      	cmp	r0, #0
 80094f6:	dc06      	bgt.n	8009506 <__sflush_r+0xfe>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	e78e      	b.n	8009424 <__sflush_r+0x1c>
 8009506:	4407      	add	r7, r0
 8009508:	eba8 0800 	sub.w	r8, r8, r0
 800950c:	e7e9      	b.n	80094e2 <__sflush_r+0xda>
 800950e:	bf00      	nop
 8009510:	20400001 	.word	0x20400001

08009514 <_fflush_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	690b      	ldr	r3, [r1, #16]
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	b913      	cbnz	r3, 8009524 <_fflush_r+0x10>
 800951e:	2500      	movs	r5, #0
 8009520:	4628      	mov	r0, r5
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	b118      	cbz	r0, 800952e <_fflush_r+0x1a>
 8009526:	6983      	ldr	r3, [r0, #24]
 8009528:	b90b      	cbnz	r3, 800952e <_fflush_r+0x1a>
 800952a:	f000 f887 	bl	800963c <__sinit>
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <_fflush_r+0x6c>)
 8009530:	429c      	cmp	r4, r3
 8009532:	d11b      	bne.n	800956c <_fflush_r+0x58>
 8009534:	686c      	ldr	r4, [r5, #4]
 8009536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0ef      	beq.n	800951e <_fflush_r+0xa>
 800953e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009540:	07d0      	lsls	r0, r2, #31
 8009542:	d404      	bmi.n	800954e <_fflush_r+0x3a>
 8009544:	0599      	lsls	r1, r3, #22
 8009546:	d402      	bmi.n	800954e <_fflush_r+0x3a>
 8009548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800954a:	f000 f915 	bl	8009778 <__retarget_lock_acquire_recursive>
 800954e:	4628      	mov	r0, r5
 8009550:	4621      	mov	r1, r4
 8009552:	f7ff ff59 	bl	8009408 <__sflush_r>
 8009556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009558:	07da      	lsls	r2, r3, #31
 800955a:	4605      	mov	r5, r0
 800955c:	d4e0      	bmi.n	8009520 <_fflush_r+0xc>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	059b      	lsls	r3, r3, #22
 8009562:	d4dd      	bmi.n	8009520 <_fflush_r+0xc>
 8009564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009566:	f000 f908 	bl	800977a <__retarget_lock_release_recursive>
 800956a:	e7d9      	b.n	8009520 <_fflush_r+0xc>
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <_fflush_r+0x70>)
 800956e:	429c      	cmp	r4, r3
 8009570:	d101      	bne.n	8009576 <_fflush_r+0x62>
 8009572:	68ac      	ldr	r4, [r5, #8]
 8009574:	e7df      	b.n	8009536 <_fflush_r+0x22>
 8009576:	4b04      	ldr	r3, [pc, #16]	; (8009588 <_fflush_r+0x74>)
 8009578:	429c      	cmp	r4, r3
 800957a:	bf08      	it	eq
 800957c:	68ec      	ldreq	r4, [r5, #12]
 800957e:	e7da      	b.n	8009536 <_fflush_r+0x22>
 8009580:	0800a570 	.word	0x0800a570
 8009584:	0800a590 	.word	0x0800a590
 8009588:	0800a550 	.word	0x0800a550

0800958c <std>:
 800958c:	2300      	movs	r3, #0
 800958e:	b510      	push	{r4, lr}
 8009590:	4604      	mov	r4, r0
 8009592:	e9c0 3300 	strd	r3, r3, [r0]
 8009596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800959a:	6083      	str	r3, [r0, #8]
 800959c:	8181      	strh	r1, [r0, #12]
 800959e:	6643      	str	r3, [r0, #100]	; 0x64
 80095a0:	81c2      	strh	r2, [r0, #14]
 80095a2:	6183      	str	r3, [r0, #24]
 80095a4:	4619      	mov	r1, r3
 80095a6:	2208      	movs	r2, #8
 80095a8:	305c      	adds	r0, #92	; 0x5c
 80095aa:	f7ff f85f 	bl	800866c <memset>
 80095ae:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <std+0x38>)
 80095b0:	6263      	str	r3, [r4, #36]	; 0x24
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <std+0x3c>)
 80095b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80095b6:	4b05      	ldr	r3, [pc, #20]	; (80095cc <std+0x40>)
 80095b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095ba:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <std+0x44>)
 80095bc:	6224      	str	r4, [r4, #32]
 80095be:	6323      	str	r3, [r4, #48]	; 0x30
 80095c0:	bd10      	pop	{r4, pc}
 80095c2:	bf00      	nop
 80095c4:	0800997d 	.word	0x0800997d
 80095c8:	0800999f 	.word	0x0800999f
 80095cc:	080099d7 	.word	0x080099d7
 80095d0:	080099fb 	.word	0x080099fb

080095d4 <_cleanup_r>:
 80095d4:	4901      	ldr	r1, [pc, #4]	; (80095dc <_cleanup_r+0x8>)
 80095d6:	f000 b8af 	b.w	8009738 <_fwalk_reent>
 80095da:	bf00      	nop
 80095dc:	08009515 	.word	0x08009515

080095e0 <__sfmoreglue>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	2268      	movs	r2, #104	; 0x68
 80095e4:	1e4d      	subs	r5, r1, #1
 80095e6:	4355      	muls	r5, r2
 80095e8:	460e      	mov	r6, r1
 80095ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095ee:	f7ff f975 	bl	80088dc <_malloc_r>
 80095f2:	4604      	mov	r4, r0
 80095f4:	b140      	cbz	r0, 8009608 <__sfmoreglue+0x28>
 80095f6:	2100      	movs	r1, #0
 80095f8:	e9c0 1600 	strd	r1, r6, [r0]
 80095fc:	300c      	adds	r0, #12
 80095fe:	60a0      	str	r0, [r4, #8]
 8009600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009604:	f7ff f832 	bl	800866c <memset>
 8009608:	4620      	mov	r0, r4
 800960a:	bd70      	pop	{r4, r5, r6, pc}

0800960c <__sfp_lock_acquire>:
 800960c:	4801      	ldr	r0, [pc, #4]	; (8009614 <__sfp_lock_acquire+0x8>)
 800960e:	f000 b8b3 	b.w	8009778 <__retarget_lock_acquire_recursive>
 8009612:	bf00      	nop
 8009614:	20000c99 	.word	0x20000c99

08009618 <__sfp_lock_release>:
 8009618:	4801      	ldr	r0, [pc, #4]	; (8009620 <__sfp_lock_release+0x8>)
 800961a:	f000 b8ae 	b.w	800977a <__retarget_lock_release_recursive>
 800961e:	bf00      	nop
 8009620:	20000c99 	.word	0x20000c99

08009624 <__sinit_lock_acquire>:
 8009624:	4801      	ldr	r0, [pc, #4]	; (800962c <__sinit_lock_acquire+0x8>)
 8009626:	f000 b8a7 	b.w	8009778 <__retarget_lock_acquire_recursive>
 800962a:	bf00      	nop
 800962c:	20000c9a 	.word	0x20000c9a

08009630 <__sinit_lock_release>:
 8009630:	4801      	ldr	r0, [pc, #4]	; (8009638 <__sinit_lock_release+0x8>)
 8009632:	f000 b8a2 	b.w	800977a <__retarget_lock_release_recursive>
 8009636:	bf00      	nop
 8009638:	20000c9a 	.word	0x20000c9a

0800963c <__sinit>:
 800963c:	b510      	push	{r4, lr}
 800963e:	4604      	mov	r4, r0
 8009640:	f7ff fff0 	bl	8009624 <__sinit_lock_acquire>
 8009644:	69a3      	ldr	r3, [r4, #24]
 8009646:	b11b      	cbz	r3, 8009650 <__sinit+0x14>
 8009648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964c:	f7ff bff0 	b.w	8009630 <__sinit_lock_release>
 8009650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009654:	6523      	str	r3, [r4, #80]	; 0x50
 8009656:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <__sinit+0x68>)
 8009658:	4a13      	ldr	r2, [pc, #76]	; (80096a8 <__sinit+0x6c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	62a2      	str	r2, [r4, #40]	; 0x28
 800965e:	42a3      	cmp	r3, r4
 8009660:	bf04      	itt	eq
 8009662:	2301      	moveq	r3, #1
 8009664:	61a3      	streq	r3, [r4, #24]
 8009666:	4620      	mov	r0, r4
 8009668:	f000 f820 	bl	80096ac <__sfp>
 800966c:	6060      	str	r0, [r4, #4]
 800966e:	4620      	mov	r0, r4
 8009670:	f000 f81c 	bl	80096ac <__sfp>
 8009674:	60a0      	str	r0, [r4, #8]
 8009676:	4620      	mov	r0, r4
 8009678:	f000 f818 	bl	80096ac <__sfp>
 800967c:	2200      	movs	r2, #0
 800967e:	60e0      	str	r0, [r4, #12]
 8009680:	2104      	movs	r1, #4
 8009682:	6860      	ldr	r0, [r4, #4]
 8009684:	f7ff ff82 	bl	800958c <std>
 8009688:	68a0      	ldr	r0, [r4, #8]
 800968a:	2201      	movs	r2, #1
 800968c:	2109      	movs	r1, #9
 800968e:	f7ff ff7d 	bl	800958c <std>
 8009692:	68e0      	ldr	r0, [r4, #12]
 8009694:	2202      	movs	r2, #2
 8009696:	2112      	movs	r1, #18
 8009698:	f7ff ff78 	bl	800958c <std>
 800969c:	2301      	movs	r3, #1
 800969e:	61a3      	str	r3, [r4, #24]
 80096a0:	e7d2      	b.n	8009648 <__sinit+0xc>
 80096a2:	bf00      	nop
 80096a4:	0800a468 	.word	0x0800a468
 80096a8:	080095d5 	.word	0x080095d5

080096ac <__sfp>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	4607      	mov	r7, r0
 80096b0:	f7ff ffac 	bl	800960c <__sfp_lock_acquire>
 80096b4:	4b1e      	ldr	r3, [pc, #120]	; (8009730 <__sfp+0x84>)
 80096b6:	681e      	ldr	r6, [r3, #0]
 80096b8:	69b3      	ldr	r3, [r6, #24]
 80096ba:	b913      	cbnz	r3, 80096c2 <__sfp+0x16>
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff ffbd 	bl	800963c <__sinit>
 80096c2:	3648      	adds	r6, #72	; 0x48
 80096c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096c8:	3b01      	subs	r3, #1
 80096ca:	d503      	bpl.n	80096d4 <__sfp+0x28>
 80096cc:	6833      	ldr	r3, [r6, #0]
 80096ce:	b30b      	cbz	r3, 8009714 <__sfp+0x68>
 80096d0:	6836      	ldr	r6, [r6, #0]
 80096d2:	e7f7      	b.n	80096c4 <__sfp+0x18>
 80096d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096d8:	b9d5      	cbnz	r5, 8009710 <__sfp+0x64>
 80096da:	4b16      	ldr	r3, [pc, #88]	; (8009734 <__sfp+0x88>)
 80096dc:	60e3      	str	r3, [r4, #12]
 80096de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096e2:	6665      	str	r5, [r4, #100]	; 0x64
 80096e4:	f000 f847 	bl	8009776 <__retarget_lock_init_recursive>
 80096e8:	f7ff ff96 	bl	8009618 <__sfp_lock_release>
 80096ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096f4:	6025      	str	r5, [r4, #0]
 80096f6:	61a5      	str	r5, [r4, #24]
 80096f8:	2208      	movs	r2, #8
 80096fa:	4629      	mov	r1, r5
 80096fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009700:	f7fe ffb4 	bl	800866c <memset>
 8009704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800970c:	4620      	mov	r0, r4
 800970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009710:	3468      	adds	r4, #104	; 0x68
 8009712:	e7d9      	b.n	80096c8 <__sfp+0x1c>
 8009714:	2104      	movs	r1, #4
 8009716:	4638      	mov	r0, r7
 8009718:	f7ff ff62 	bl	80095e0 <__sfmoreglue>
 800971c:	4604      	mov	r4, r0
 800971e:	6030      	str	r0, [r6, #0]
 8009720:	2800      	cmp	r0, #0
 8009722:	d1d5      	bne.n	80096d0 <__sfp+0x24>
 8009724:	f7ff ff78 	bl	8009618 <__sfp_lock_release>
 8009728:	230c      	movs	r3, #12
 800972a:	603b      	str	r3, [r7, #0]
 800972c:	e7ee      	b.n	800970c <__sfp+0x60>
 800972e:	bf00      	nop
 8009730:	0800a468 	.word	0x0800a468
 8009734:	ffff0001 	.word	0xffff0001

08009738 <_fwalk_reent>:
 8009738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800973c:	4606      	mov	r6, r0
 800973e:	4688      	mov	r8, r1
 8009740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009744:	2700      	movs	r7, #0
 8009746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800974a:	f1b9 0901 	subs.w	r9, r9, #1
 800974e:	d505      	bpl.n	800975c <_fwalk_reent+0x24>
 8009750:	6824      	ldr	r4, [r4, #0]
 8009752:	2c00      	cmp	r4, #0
 8009754:	d1f7      	bne.n	8009746 <_fwalk_reent+0xe>
 8009756:	4638      	mov	r0, r7
 8009758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975c:	89ab      	ldrh	r3, [r5, #12]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d907      	bls.n	8009772 <_fwalk_reent+0x3a>
 8009762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009766:	3301      	adds	r3, #1
 8009768:	d003      	beq.n	8009772 <_fwalk_reent+0x3a>
 800976a:	4629      	mov	r1, r5
 800976c:	4630      	mov	r0, r6
 800976e:	47c0      	blx	r8
 8009770:	4307      	orrs	r7, r0
 8009772:	3568      	adds	r5, #104	; 0x68
 8009774:	e7e9      	b.n	800974a <_fwalk_reent+0x12>

08009776 <__retarget_lock_init_recursive>:
 8009776:	4770      	bx	lr

08009778 <__retarget_lock_acquire_recursive>:
 8009778:	4770      	bx	lr

0800977a <__retarget_lock_release_recursive>:
 800977a:	4770      	bx	lr

0800977c <__swhatbuf_r>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	460e      	mov	r6, r1
 8009780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009784:	2900      	cmp	r1, #0
 8009786:	b096      	sub	sp, #88	; 0x58
 8009788:	4614      	mov	r4, r2
 800978a:	461d      	mov	r5, r3
 800978c:	da08      	bge.n	80097a0 <__swhatbuf_r+0x24>
 800978e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	602a      	str	r2, [r5, #0]
 8009796:	061a      	lsls	r2, r3, #24
 8009798:	d410      	bmi.n	80097bc <__swhatbuf_r+0x40>
 800979a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800979e:	e00e      	b.n	80097be <__swhatbuf_r+0x42>
 80097a0:	466a      	mov	r2, sp
 80097a2:	f000 f951 	bl	8009a48 <_fstat_r>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	dbf1      	blt.n	800978e <__swhatbuf_r+0x12>
 80097aa:	9a01      	ldr	r2, [sp, #4]
 80097ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097b4:	425a      	negs	r2, r3
 80097b6:	415a      	adcs	r2, r3
 80097b8:	602a      	str	r2, [r5, #0]
 80097ba:	e7ee      	b.n	800979a <__swhatbuf_r+0x1e>
 80097bc:	2340      	movs	r3, #64	; 0x40
 80097be:	2000      	movs	r0, #0
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	b016      	add	sp, #88	; 0x58
 80097c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080097c8 <__smakebuf_r>:
 80097c8:	898b      	ldrh	r3, [r1, #12]
 80097ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097cc:	079d      	lsls	r5, r3, #30
 80097ce:	4606      	mov	r6, r0
 80097d0:	460c      	mov	r4, r1
 80097d2:	d507      	bpl.n	80097e4 <__smakebuf_r+0x1c>
 80097d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	6123      	str	r3, [r4, #16]
 80097dc:	2301      	movs	r3, #1
 80097de:	6163      	str	r3, [r4, #20]
 80097e0:	b002      	add	sp, #8
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	ab01      	add	r3, sp, #4
 80097e6:	466a      	mov	r2, sp
 80097e8:	f7ff ffc8 	bl	800977c <__swhatbuf_r>
 80097ec:	9900      	ldr	r1, [sp, #0]
 80097ee:	4605      	mov	r5, r0
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff f873 	bl	80088dc <_malloc_r>
 80097f6:	b948      	cbnz	r0, 800980c <__smakebuf_r+0x44>
 80097f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097fc:	059a      	lsls	r2, r3, #22
 80097fe:	d4ef      	bmi.n	80097e0 <__smakebuf_r+0x18>
 8009800:	f023 0303 	bic.w	r3, r3, #3
 8009804:	f043 0302 	orr.w	r3, r3, #2
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	e7e3      	b.n	80097d4 <__smakebuf_r+0xc>
 800980c:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <__smakebuf_r+0x7c>)
 800980e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	6020      	str	r0, [r4, #0]
 8009814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009818:	81a3      	strh	r3, [r4, #12]
 800981a:	9b00      	ldr	r3, [sp, #0]
 800981c:	6163      	str	r3, [r4, #20]
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	6120      	str	r0, [r4, #16]
 8009822:	b15b      	cbz	r3, 800983c <__smakebuf_r+0x74>
 8009824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f91f 	bl	8009a6c <_isatty_r>
 800982e:	b128      	cbz	r0, 800983c <__smakebuf_r+0x74>
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	f023 0303 	bic.w	r3, r3, #3
 8009836:	f043 0301 	orr.w	r3, r3, #1
 800983a:	81a3      	strh	r3, [r4, #12]
 800983c:	89a0      	ldrh	r0, [r4, #12]
 800983e:	4305      	orrs	r5, r0
 8009840:	81a5      	strh	r5, [r4, #12]
 8009842:	e7cd      	b.n	80097e0 <__smakebuf_r+0x18>
 8009844:	080095d5 	.word	0x080095d5

08009848 <memmove>:
 8009848:	4288      	cmp	r0, r1
 800984a:	b510      	push	{r4, lr}
 800984c:	eb01 0402 	add.w	r4, r1, r2
 8009850:	d902      	bls.n	8009858 <memmove+0x10>
 8009852:	4284      	cmp	r4, r0
 8009854:	4623      	mov	r3, r4
 8009856:	d807      	bhi.n	8009868 <memmove+0x20>
 8009858:	1e43      	subs	r3, r0, #1
 800985a:	42a1      	cmp	r1, r4
 800985c:	d008      	beq.n	8009870 <memmove+0x28>
 800985e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009862:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009866:	e7f8      	b.n	800985a <memmove+0x12>
 8009868:	4402      	add	r2, r0
 800986a:	4601      	mov	r1, r0
 800986c:	428a      	cmp	r2, r1
 800986e:	d100      	bne.n	8009872 <memmove+0x2a>
 8009870:	bd10      	pop	{r4, pc}
 8009872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009876:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800987a:	e7f7      	b.n	800986c <memmove+0x24>

0800987c <__malloc_lock>:
 800987c:	4801      	ldr	r0, [pc, #4]	; (8009884 <__malloc_lock+0x8>)
 800987e:	f7ff bf7b 	b.w	8009778 <__retarget_lock_acquire_recursive>
 8009882:	bf00      	nop
 8009884:	20000c98 	.word	0x20000c98

08009888 <__malloc_unlock>:
 8009888:	4801      	ldr	r0, [pc, #4]	; (8009890 <__malloc_unlock+0x8>)
 800988a:	f7ff bf76 	b.w	800977a <__retarget_lock_release_recursive>
 800988e:	bf00      	nop
 8009890:	20000c98 	.word	0x20000c98

08009894 <_realloc_r>:
 8009894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009898:	4680      	mov	r8, r0
 800989a:	4614      	mov	r4, r2
 800989c:	460e      	mov	r6, r1
 800989e:	b921      	cbnz	r1, 80098aa <_realloc_r+0x16>
 80098a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098a4:	4611      	mov	r1, r2
 80098a6:	f7ff b819 	b.w	80088dc <_malloc_r>
 80098aa:	b92a      	cbnz	r2, 80098b8 <_realloc_r+0x24>
 80098ac:	f7fe ffaa 	bl	8008804 <_free_r>
 80098b0:	4625      	mov	r5, r4
 80098b2:	4628      	mov	r0, r5
 80098b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b8:	f000 f8fa 	bl	8009ab0 <_malloc_usable_size_r>
 80098bc:	4284      	cmp	r4, r0
 80098be:	4607      	mov	r7, r0
 80098c0:	d802      	bhi.n	80098c8 <_realloc_r+0x34>
 80098c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098c6:	d812      	bhi.n	80098ee <_realloc_r+0x5a>
 80098c8:	4621      	mov	r1, r4
 80098ca:	4640      	mov	r0, r8
 80098cc:	f7ff f806 	bl	80088dc <_malloc_r>
 80098d0:	4605      	mov	r5, r0
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d0ed      	beq.n	80098b2 <_realloc_r+0x1e>
 80098d6:	42bc      	cmp	r4, r7
 80098d8:	4622      	mov	r2, r4
 80098da:	4631      	mov	r1, r6
 80098dc:	bf28      	it	cs
 80098de:	463a      	movcs	r2, r7
 80098e0:	f7fe feb6 	bl	8008650 <memcpy>
 80098e4:	4631      	mov	r1, r6
 80098e6:	4640      	mov	r0, r8
 80098e8:	f7fe ff8c 	bl	8008804 <_free_r>
 80098ec:	e7e1      	b.n	80098b2 <_realloc_r+0x1e>
 80098ee:	4635      	mov	r5, r6
 80098f0:	e7df      	b.n	80098b2 <_realloc_r+0x1e>

080098f2 <_raise_r>:
 80098f2:	291f      	cmp	r1, #31
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4604      	mov	r4, r0
 80098f8:	460d      	mov	r5, r1
 80098fa:	d904      	bls.n	8009906 <_raise_r+0x14>
 80098fc:	2316      	movs	r3, #22
 80098fe:	6003      	str	r3, [r0, #0]
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009908:	b112      	cbz	r2, 8009910 <_raise_r+0x1e>
 800990a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800990e:	b94b      	cbnz	r3, 8009924 <_raise_r+0x32>
 8009910:	4620      	mov	r0, r4
 8009912:	f000 f831 	bl	8009978 <_getpid_r>
 8009916:	462a      	mov	r2, r5
 8009918:	4601      	mov	r1, r0
 800991a:	4620      	mov	r0, r4
 800991c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009920:	f000 b818 	b.w	8009954 <_kill_r>
 8009924:	2b01      	cmp	r3, #1
 8009926:	d00a      	beq.n	800993e <_raise_r+0x4c>
 8009928:	1c59      	adds	r1, r3, #1
 800992a:	d103      	bne.n	8009934 <_raise_r+0x42>
 800992c:	2316      	movs	r3, #22
 800992e:	6003      	str	r3, [r0, #0]
 8009930:	2001      	movs	r0, #1
 8009932:	e7e7      	b.n	8009904 <_raise_r+0x12>
 8009934:	2400      	movs	r4, #0
 8009936:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800993a:	4628      	mov	r0, r5
 800993c:	4798      	blx	r3
 800993e:	2000      	movs	r0, #0
 8009940:	e7e0      	b.n	8009904 <_raise_r+0x12>
	...

08009944 <raise>:
 8009944:	4b02      	ldr	r3, [pc, #8]	; (8009950 <raise+0xc>)
 8009946:	4601      	mov	r1, r0
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	f7ff bfd2 	b.w	80098f2 <_raise_r>
 800994e:	bf00      	nop
 8009950:	2000030c 	.word	0x2000030c

08009954 <_kill_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d07      	ldr	r5, [pc, #28]	; (8009974 <_kill_r+0x20>)
 8009958:	2300      	movs	r3, #0
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	4611      	mov	r1, r2
 8009960:	602b      	str	r3, [r5, #0]
 8009962:	f7f9 ff81 	bl	8003868 <_kill>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	d102      	bne.n	8009970 <_kill_r+0x1c>
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	b103      	cbz	r3, 8009970 <_kill_r+0x1c>
 800996e:	6023      	str	r3, [r4, #0]
 8009970:	bd38      	pop	{r3, r4, r5, pc}
 8009972:	bf00      	nop
 8009974:	20000c9c 	.word	0x20000c9c

08009978 <_getpid_r>:
 8009978:	f7f9 bf6e 	b.w	8003858 <_getpid>

0800997c <__sread>:
 800997c:	b510      	push	{r4, lr}
 800997e:	460c      	mov	r4, r1
 8009980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009984:	f000 f89c 	bl	8009ac0 <_read_r>
 8009988:	2800      	cmp	r0, #0
 800998a:	bfab      	itete	ge
 800998c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800998e:	89a3      	ldrhlt	r3, [r4, #12]
 8009990:	181b      	addge	r3, r3, r0
 8009992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009996:	bfac      	ite	ge
 8009998:	6563      	strge	r3, [r4, #84]	; 0x54
 800999a:	81a3      	strhlt	r3, [r4, #12]
 800999c:	bd10      	pop	{r4, pc}

0800999e <__swrite>:
 800999e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a2:	461f      	mov	r7, r3
 80099a4:	898b      	ldrh	r3, [r1, #12]
 80099a6:	05db      	lsls	r3, r3, #23
 80099a8:	4605      	mov	r5, r0
 80099aa:	460c      	mov	r4, r1
 80099ac:	4616      	mov	r6, r2
 80099ae:	d505      	bpl.n	80099bc <__swrite+0x1e>
 80099b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b4:	2302      	movs	r3, #2
 80099b6:	2200      	movs	r2, #0
 80099b8:	f000 f868 	bl	8009a8c <_lseek_r>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	4632      	mov	r2, r6
 80099ca:	463b      	mov	r3, r7
 80099cc:	4628      	mov	r0, r5
 80099ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099d2:	f000 b817 	b.w	8009a04 <_write_r>

080099d6 <__sseek>:
 80099d6:	b510      	push	{r4, lr}
 80099d8:	460c      	mov	r4, r1
 80099da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099de:	f000 f855 	bl	8009a8c <_lseek_r>
 80099e2:	1c43      	adds	r3, r0, #1
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	bf15      	itete	ne
 80099e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80099ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099f2:	81a3      	strheq	r3, [r4, #12]
 80099f4:	bf18      	it	ne
 80099f6:	81a3      	strhne	r3, [r4, #12]
 80099f8:	bd10      	pop	{r4, pc}

080099fa <__sclose>:
 80099fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099fe:	f000 b813 	b.w	8009a28 <_close_r>
	...

08009a04 <_write_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d07      	ldr	r5, [pc, #28]	; (8009a24 <_write_r+0x20>)
 8009a08:	4604      	mov	r4, r0
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	602a      	str	r2, [r5, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	f7f9 ff5f 	bl	80038d6 <_write>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d102      	bne.n	8009a22 <_write_r+0x1e>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	b103      	cbz	r3, 8009a22 <_write_r+0x1e>
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	20000c9c 	.word	0x20000c9c

08009a28 <_close_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4d06      	ldr	r5, [pc, #24]	; (8009a44 <_close_r+0x1c>)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4608      	mov	r0, r1
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	f7f9 ff6b 	bl	800390e <_close>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d102      	bne.n	8009a42 <_close_r+0x1a>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	b103      	cbz	r3, 8009a42 <_close_r+0x1a>
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	20000c9c 	.word	0x20000c9c

08009a48 <_fstat_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4d07      	ldr	r5, [pc, #28]	; (8009a68 <_fstat_r+0x20>)
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	4604      	mov	r4, r0
 8009a50:	4608      	mov	r0, r1
 8009a52:	4611      	mov	r1, r2
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	f7f9 ff66 	bl	8003926 <_fstat>
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	d102      	bne.n	8009a64 <_fstat_r+0x1c>
 8009a5e:	682b      	ldr	r3, [r5, #0]
 8009a60:	b103      	cbz	r3, 8009a64 <_fstat_r+0x1c>
 8009a62:	6023      	str	r3, [r4, #0]
 8009a64:	bd38      	pop	{r3, r4, r5, pc}
 8009a66:	bf00      	nop
 8009a68:	20000c9c 	.word	0x20000c9c

08009a6c <_isatty_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4d06      	ldr	r5, [pc, #24]	; (8009a88 <_isatty_r+0x1c>)
 8009a70:	2300      	movs	r3, #0
 8009a72:	4604      	mov	r4, r0
 8009a74:	4608      	mov	r0, r1
 8009a76:	602b      	str	r3, [r5, #0]
 8009a78:	f7f9 ff65 	bl	8003946 <_isatty>
 8009a7c:	1c43      	adds	r3, r0, #1
 8009a7e:	d102      	bne.n	8009a86 <_isatty_r+0x1a>
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	b103      	cbz	r3, 8009a86 <_isatty_r+0x1a>
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	bd38      	pop	{r3, r4, r5, pc}
 8009a88:	20000c9c 	.word	0x20000c9c

08009a8c <_lseek_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	4d07      	ldr	r5, [pc, #28]	; (8009aac <_lseek_r+0x20>)
 8009a90:	4604      	mov	r4, r0
 8009a92:	4608      	mov	r0, r1
 8009a94:	4611      	mov	r1, r2
 8009a96:	2200      	movs	r2, #0
 8009a98:	602a      	str	r2, [r5, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f7f9 ff5e 	bl	800395c <_lseek>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_lseek_r+0x1e>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_lseek_r+0x1e>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	20000c9c 	.word	0x20000c9c

08009ab0 <_malloc_usable_size_r>:
 8009ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab4:	1f18      	subs	r0, r3, #4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bfbc      	itt	lt
 8009aba:	580b      	ldrlt	r3, [r1, r0]
 8009abc:	18c0      	addlt	r0, r0, r3
 8009abe:	4770      	bx	lr

08009ac0 <_read_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d07      	ldr	r5, [pc, #28]	; (8009ae0 <_read_r+0x20>)
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	4611      	mov	r1, r2
 8009aca:	2200      	movs	r2, #0
 8009acc:	602a      	str	r2, [r5, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f7f9 fee4 	bl	800389c <_read>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d102      	bne.n	8009ade <_read_r+0x1e>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	b103      	cbz	r3, 8009ade <_read_r+0x1e>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	20000c9c 	.word	0x20000c9c

08009ae4 <_init>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr

08009af0 <_fini>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	bf00      	nop
 8009af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af6:	bc08      	pop	{r3}
 8009af8:	469e      	mov	lr, r3
 8009afa:	4770      	bx	lr
