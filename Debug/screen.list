
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008110  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  080082a0  080082a0  000182a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b2c  08008b2c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08008b2c  08008b2c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b2c  08008b2c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b2c  08008b2c  00018b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b30  08008b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08008b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          00000868  200000d0  200000d0  000200d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000938  20000938  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016759  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d72  00000000  00000000  00036855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  0003a5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  0003b980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f161  00000000  00000000  0003cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000194f0  00000000  00000000  0005bcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad523  00000000  00000000  000751c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001226ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b28  00000000  00000000  0012273c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00128264  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00128288  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008288 	.word	0x08008288

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08008288 	.word	0x08008288

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStickChange>:

		*outputX = x;
		*outputY = y;
}

void ReadAnalogStickChange(ADC_HandleTypeDef* adc, i32* outputX, i32* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	//LCD_PCD8544_clear_ram(&gLcdScreen);
	HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f002 ffad 	bl	80031ec <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f003 f85f 	bl	8003358 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f003 f92a 	bl	80034f4 <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002a6:	801a      	strh	r2, [r3, #0]
	uint16_t y = AD_RES;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

	// Start ADC Conversion
	HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f002 ff9c 	bl	80031ec <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f003 f84e 	bl	8003358 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f003 f919 	bl	80034f4 <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002c8:	801a      	strh	r2, [r3, #0]
	uint16_t x = AD_RES;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
	x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]
	y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	613b      	str	r3, [r7, #16]
	*outputX = (x - (twelveBitMax/2));
 80002e6:	8aba      	ldrh	r2, [r7, #20]
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	0fd9      	lsrs	r1, r3, #31
 80002ec:	440b      	add	r3, r1
 80002ee:	105b      	asrs	r3, r3, #1
 80002f0:	425b      	negs	r3, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	601a      	str	r2, [r3, #0]
	*outputY = (y - (twelveBitMax/2));
 80002f8:	8afa      	ldrh	r2, [r7, #22]
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	0fd9      	lsrs	r1, r3, #31
 80002fe:	440b      	add	r3, r1
 8000300:	105b      	asrs	r3, r3, #1
 8000302:	425b      	negs	r3, r3
 8000304:	441a      	add	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200000ec 	.word	0x200000ec

08000318 <gfxClearFrameBuffer>:
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
	}
}

void gfxClearFrameBuffer(){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 800031c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000320:	2100      	movs	r1, #0
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <gfxClearFrameBuffer+0x14>)
 8000324:	f006 fd40 	bl	8006da8 <memset>
	//UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000f0 	.word	0x200000f0

08000330 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	460a      	mov	r2, r1
 800033a:	71fb      	strb	r3, [r7, #7]
 800033c:	4613      	mov	r3, r2
 800033e:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b53      	cmp	r3, #83	; 0x53
 8000344:	d825      	bhi.n	8000392 <gfxPlotPixelInternal+0x62>
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	2b2e      	cmp	r3, #46	; 0x2e
 800034a:	d822      	bhi.n	8000392 <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	08db      	lsrs	r3, r3, #3
 8000350:	b2db      	uxtb	r3, r3
 8000352:	461a      	mov	r2, r3
 8000354:	2354      	movs	r3, #84	; 0x54
 8000356:	fb03 f202 	mul.w	r2, r3, r2
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4413      	add	r3, r2
 800035e:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000366:	d215      	bcs.n	8000394 <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <gfxPlotPixelInternal+0x70>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	b25a      	sxtb	r2, r3
 8000372:	79bb      	ldrb	r3, [r7, #6]
 8000374:	f003 0307 	and.w	r3, r3, #7
 8000378:	2101      	movs	r1, #1
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
 800037e:	b25b      	sxtb	r3, r3
 8000380:	4313      	orrs	r3, r2
 8000382:	b25b      	sxtb	r3, r3
 8000384:	b2d9      	uxtb	r1, r3
 8000386:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <gfxPlotPixelInternal+0x70>)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	460a      	mov	r2, r1
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	e000      	b.n	8000394 <gfxPlotPixelInternal+0x64>
		return;
 8000392:	bf00      	nop
}
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	200000f0 	.word	0x200000f0

080003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4604      	mov	r4, r0
 80003ac:	4608      	mov	r0, r1
 80003ae:	4611      	mov	r1, r2
 80003b0:	461a      	mov	r2, r3
 80003b2:	4623      	mov	r3, r4
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	4603      	mov	r3, r0
 80003b8:	71bb      	strb	r3, [r7, #6]
 80003ba:	460b      	mov	r3, r1
 80003bc:	717b      	strb	r3, [r7, #5]
 80003be:	4613      	mov	r3, r2
 80003c0:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	e01c      	b.n	8000402 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 80003c8:	4913      	ldr	r1, [pc, #76]	; (8000418 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80003ca:	68fa      	ldr	r2, [r7, #12]
 80003cc:	4613      	mov	r3, r2
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	4413      	add	r3, r2
 80003d2:	440b      	add	r3, r1
 80003d4:	2201      	movs	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 80003d8:	490f      	ldr	r1, [pc, #60]	; (8000418 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	4613      	mov	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	440b      	add	r3, r1
 80003e4:	3301      	adds	r3, #1
 80003e6:	797a      	ldrb	r2, [r7, #5]
 80003e8:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 80003ea:	490b      	ldr	r1, [pc, #44]	; (8000418 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	4613      	mov	r3, r2
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4413      	add	r3, r2
 80003f4:	440b      	add	r3, r1
 80003f6:	3302      	adds	r3, #2
 80003f8:	793a      	ldrb	r2, [r7, #4]
 80003fa:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	3301      	adds	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	429a      	cmp	r2, r3
 8000408:	ddde      	ble.n	80003c8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bc90      	pop	{r4, r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	200002e8 	.word	0x200002e8

0800041c <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
 8000422:	4604      	mov	r4, r0
 8000424:	4608      	mov	r0, r1
 8000426:	4611      	mov	r1, r2
 8000428:	461a      	mov	r2, r3
 800042a:	4623      	mov	r3, r4
 800042c:	71fb      	strb	r3, [r7, #7]
 800042e:	4603      	mov	r3, r0
 8000430:	71bb      	strb	r3, [r7, #6]
 8000432:	460b      	mov	r3, r1
 8000434:	717b      	strb	r3, [r7, #5]
 8000436:	4613      	mov	r3, r2
 8000438:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800043a:	797a      	ldrb	r2, [r7, #5]
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 8000442:	793a      	ldrb	r2, [r7, #4]
 8000444:	79bb      	ldrb	r3, [r7, #6]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 800044a:	2301      	movs	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	2b00      	cmp	r3, #0
 8000452:	da05      	bge.n	8000460 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
 8000458:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	425b      	negs	r3, r3
 800045e:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	005a      	lsls	r2, r3, #1
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	e01e      	b.n	80004b2 <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	b2d2      	uxtb	r2, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff56 	bl	8000330 <gfxPlotPixelInternal>
		if(D > 0){
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	2b00      	cmp	r3, #0
 8000488:	dd0b      	ble.n	80004a2 <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 800048a:	693a      	ldr	r2, [r7, #16]
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	4413      	add	r3, r2
 8000490:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	4413      	add	r3, r2
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	e004      	b.n	80004ac <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 80004a2:	69fb      	ldr	r3, [r7, #28]
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	4413      	add	r3, r2
 80004aa:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3301      	adds	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	797b      	ldrb	r3, [r7, #5]
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	dddc      	ble.n	8000474 <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	3724      	adds	r7, #36	; 0x24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd90      	pop	{r4, r7, pc}

080004c4 <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b089      	sub	sp, #36	; 0x24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4604      	mov	r4, r0
 80004cc:	4608      	mov	r0, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	461a      	mov	r2, r3
 80004d2:	4623      	mov	r3, r4
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	4603      	mov	r3, r0
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	460b      	mov	r3, r1
 80004dc:	717b      	strb	r3, [r7, #5]
 80004de:	4613      	mov	r3, r2
 80004e0:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 80004e2:	797a      	ldrb	r2, [r7, #5]
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 80004ea:	793a      	ldrb	r2, [r7, #4]
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	da04      	bge.n	8000506 <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	425b      	negs	r3, r3
 8000504:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	005a      	lsls	r2, r3, #1
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e01e      	b.n	8000558 <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	4611      	mov	r1, r2
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff03 	bl	8000330 <gfxPlotPixelInternal>
		if(D > 0){
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	2b00      	cmp	r3, #0
 800052e:	dd0b      	ble.n	8000548 <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	4413      	add	r3, r2
 8000536:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 8000538:	69fa      	ldr	r2, [r7, #28]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	4413      	add	r3, r2
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	e004      	b.n	8000552 <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	4413      	add	r3, r2
 8000550:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	793b      	ldrb	r3, [r7, #4]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	429a      	cmp	r2, r3
 800055e:	dddc      	ble.n	800051a <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3724      	adds	r7, #36	; 0x24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd90      	pop	{r4, r7, pc}

0800056a <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 800056a:	b590      	push	{r4, r7, lr}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	4604      	mov	r4, r0
 8000572:	4608      	mov	r0, r1
 8000574:	4611      	mov	r1, r2
 8000576:	461a      	mov	r2, r3
 8000578:	4623      	mov	r3, r4
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4603      	mov	r3, r0
 800057e:	71bb      	strb	r3, [r7, #6]
 8000580:	460b      	mov	r3, r1
 8000582:	717b      	strb	r3, [r7, #5]
 8000584:	4613      	mov	r3, r2
 8000586:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 8000588:	793a      	ldrb	r2, [r7, #4]
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000592:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000596:	7979      	ldrb	r1, [r7, #5]
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	1acb      	subs	r3, r1, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	bfb8      	it	lt
 80005a0:	425b      	neglt	r3, r3
 80005a2:	429a      	cmp	r2, r3
 80005a4:	da11      	bge.n	80005ca <gfxDrawLine+0x60>
		if(x0 > x1){
 80005a6:	79fa      	ldrb	r2, [r7, #7]
 80005a8:	797b      	ldrb	r3, [r7, #5]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d906      	bls.n	80005bc <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	79fa      	ldrb	r2, [r7, #7]
 80005b2:	7939      	ldrb	r1, [r7, #4]
 80005b4:	7978      	ldrb	r0, [r7, #5]
 80005b6:	f7ff ff31 	bl	800041c <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 80005ba:	e017      	b.n	80005ec <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 80005bc:	793b      	ldrb	r3, [r7, #4]
 80005be:	797a      	ldrb	r2, [r7, #5]
 80005c0:	79b9      	ldrb	r1, [r7, #6]
 80005c2:	79f8      	ldrb	r0, [r7, #7]
 80005c4:	f7ff ff2a 	bl	800041c <gfxDrawLineBresenhamLow>
}
 80005c8:	e010      	b.n	80005ec <gfxDrawLine+0x82>
		if(y0 > y1){
 80005ca:	79ba      	ldrb	r2, [r7, #6]
 80005cc:	793b      	ldrb	r3, [r7, #4]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d906      	bls.n	80005e0 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	7939      	ldrb	r1, [r7, #4]
 80005d8:	7978      	ldrb	r0, [r7, #5]
 80005da:	f7ff ff73 	bl	80004c4 <gfxDrawLineBresenhamHigh>
}
 80005de:	e005      	b.n	80005ec <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 80005e0:	793b      	ldrb	r3, [r7, #4]
 80005e2:	797a      	ldrb	r2, [r7, #5]
 80005e4:	79b9      	ldrb	r1, [r7, #6]
 80005e6:	79f8      	ldrb	r0, [r7, #7]
 80005e8:	f7ff ff6c 	bl	80004c4 <gfxDrawLineBresenhamHigh>
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd90      	pop	{r4, r7, pc}

080005f4 <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08e      	sub	sp, #56	; 0x38
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80005fc:	2300      	movs	r3, #0
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000600:	e067      	b.n	80006d2 <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 8000602:	4938      	ldr	r1, [pc, #224]	; (80006e4 <gfxFinishDrawing+0xf0>)
 8000604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	440b      	add	r3, r1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d15b      	bne.n	80006cc <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 8000614:	4933      	ldr	r1, [pc, #204]	; (80006e4 <gfxFinishDrawing+0xf0>)
 8000616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	440b      	add	r3, r1
 8000620:	3301      	adds	r3, #1
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 8000628:	492e      	ldr	r1, [pc, #184]	; (80006e4 <gfxFinishDrawing+0xf0>)
 800062a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	440b      	add	r3, r1
 8000634:	3302      	adds	r3, #2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 800063c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000644:	429a      	cmp	r2, r3
 8000646:	d20b      	bcs.n	8000660 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 8000648:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800064c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000650:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000658:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800065c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 8000660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000662:	2254      	movs	r2, #84	; 0x54
 8000664:	fb02 f303 	mul.w	r3, r2, r3
 8000668:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	b2d9      	uxtb	r1, r3
 800066e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	4413      	add	r3, r2
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <gfxFinishDrawing+0xf4>)
 8000678:	1898      	adds	r0, r3, r2
 800067a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800067e:	b29a      	uxth	r2, r3
 8000680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000684:	b29b      	uxth	r3, r3
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	b29b      	uxth	r3, r3
 800068a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	4603      	mov	r3, r0
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f82a 	bl	80006ec <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 8000698:	4912      	ldr	r1, [pc, #72]	; (80006e4 <gfxFinishDrawing+0xf0>)
 800069a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 80006a8:	490e      	ldr	r1, [pc, #56]	; (80006e4 <gfxFinishDrawing+0xf0>)
 80006aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	3301      	adds	r3, #1
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 80006ba:	490a      	ldr	r1, [pc, #40]	; (80006e4 <gfxFinishDrawing+0xf0>)
 80006bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006be:	4613      	mov	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	3302      	adds	r3, #2
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80006cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ce:	3301      	adds	r3, #1
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	2b05      	cmp	r3, #5
 80006d6:	dd94      	ble.n	8000602 <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3730      	adds	r7, #48	; 0x30
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200002e8 	.word	0x200002e8
 80006e8:	200000f0 	.word	0x200000f0

080006ec <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	72fb      	strb	r3, [r7, #11]
 80006fa:	4613      	mov	r3, r2
 80006fc:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f001 fee4 	bl	80024d4 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f001 ff01 	bl	8002514 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8000712:	7dfa      	ldrb	r2, [r7, #23]
 8000714:	7db9      	ldrb	r1, [r7, #22]
 8000716:	2300      	movs	r3, #0
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f001 fe04 	bl	8002326 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 800071e:	7aba      	ldrb	r2, [r7, #10]
 8000720:	7afb      	ldrb	r3, [r7, #11]
 8000722:	4619      	mov	r1, r3
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f001 fe51 	bl	80023cc <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f001 ff02 	bl	8002534 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f001 fedf 	bl	80024f4 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f001 feec 	bl	8002514 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 800073c:	8c3b      	ldrh	r3, [r7, #32]
 800073e:	461a      	mov	r2, r3
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f001 fdbc 	bl	80022c0 <LCD_PCD8544_LL_send_data>
 8000748:	4603      	mov	r3, r0
 800074a:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f001 fef1 	bl	8002534 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8000752:	7d7b      	ldrb	r3, [r7, #21]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 800075c:	b580      	push	{r7, lr}
 800075e:	b09c      	sub	sp, #112	; 0x70
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	603a      	str	r2, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	460b      	mov	r3, r1
 800076a:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 800076c:	6838      	ldr	r0, [r7, #0]
 800076e:	f7ff fd2f 	bl	80001d0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 8000778:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	461a      	mov	r2, r3
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	4413      	add	r3, r2
 800078a:	2b54      	cmp	r3, #84	; 0x54
 800078c:	dd04      	ble.n	8000798 <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 800078e:	230e      	movs	r3, #14
 8000790:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2254      	movs	r2, #84	; 0x54
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f006 fb01 	bl	8006da8 <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 80007ac:	e029      	b.n	8000802 <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 80007ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d029      	beq.n	8000810 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 80007bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 80007ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	461a      	mov	r2, r3
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	1898      	adds	r0, r3, r2
 80007de:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <gfxWriteTextLineToFrameBuffer+0xf4>)
 80007ee:	4413      	add	r3, r2
 80007f0:	2206      	movs	r2, #6
 80007f2:	4619      	mov	r1, r3
 80007f4:	f006 faca 	bl	8006d8c <memcpy>
	for ( ; nChars<strLen; nChars++) {
 80007f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80007fc:	3301      	adds	r3, #1
 80007fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000802:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000806:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800080a:	429a      	cmp	r2, r3
 800080c:	d3cf      	bcc.n	80007ae <gfxWriteTextLineToFrameBuffer+0x52>
 800080e:	e000      	b.n	8000812 <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 8000810:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2254      	movs	r2, #84	; 0x54
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 800081c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	0052      	lsls	r2, r2, #1
 8000826:	4413      	add	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 800082e:	79ba      	ldrb	r2, [r7, #6]
 8000830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000832:	4413      	add	r3, r2
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <gfxWriteTextLineToFrameBuffer+0xf8>)
 8000836:	4413      	add	r3, r2
 8000838:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800083c:	f107 010c 	add.w	r1, r7, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f006 faa3 	bl	8006d8c <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 8000846:	bf00      	nop
 8000848:	3770      	adds	r7, #112	; 0x70
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	080082d4 	.word	0x080082d4
 8000854:	200000f0 	.word	0x200000f0

08000858 <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4604      	mov	r4, r0
 8000860:	4608      	mov	r0, r1
 8000862:	4611      	mov	r1, r2
 8000864:	461a      	mov	r2, r3
 8000866:	4623      	mov	r3, r4
 8000868:	71fb      	strb	r3, [r7, #7]
 800086a:	4603      	mov	r3, r0
 800086c:	71bb      	strb	r3, [r7, #6]
 800086e:	460b      	mov	r3, r1
 8000870:	717b      	strb	r3, [r7, #5]
 8000872:	4613      	mov	r3, r2
 8000874:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	797a      	ldrb	r2, [r7, #5]
 800087a:	79b9      	ldrb	r1, [r7, #6]
 800087c:	79f8      	ldrb	r0, [r7, #7]
 800087e:	f7ff fe74 	bl	800056a <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 8000882:	793b      	ldrb	r3, [r7, #4]
 8000884:	797a      	ldrb	r2, [r7, #5]
 8000886:	79b9      	ldrb	r1, [r7, #6]
 8000888:	7978      	ldrb	r0, [r7, #5]
 800088a:	f7ff fe6e 	bl	800056a <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 800088e:	793b      	ldrb	r3, [r7, #4]
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	7939      	ldrb	r1, [r7, #4]
 8000894:	7978      	ldrb	r0, [r7, #5]
 8000896:	f7ff fe68 	bl	800056a <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	7939      	ldrb	r1, [r7, #4]
 80008a0:	79f8      	ldrb	r0, [r7, #7]
 80008a2:	f7ff fe62 	bl	800056a <gfxDrawLine>


}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd90      	pop	{r4, r7, pc}
	...

080008b0 <ClearUpdateRegions>:

void ClearUpdateRegions(){
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	e01c      	b.n	80008f6 <ClearUpdateRegions+0x46>
		gScreenRegionsToUpdate[i].updateColumnFinish = 0;
 80008bc:	4913      	ldr	r1, [pc, #76]	; (800090c <ClearUpdateRegions+0x5c>)
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	3302      	adds	r3, #2
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 80008ce:	490f      	ldr	r1, [pc, #60]	; (800090c <ClearUpdateRegions+0x5c>)
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	440b      	add	r3, r1
 80008da:	3301      	adds	r3, #1
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 0;
 80008e0:	490a      	ldr	r1, [pc, #40]	; (800090c <ClearUpdateRegions+0x5c>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b05      	cmp	r3, #5
 80008fa:	dddf      	ble.n	80008bc <ClearUpdateRegions+0xc>


	}
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	200002e8 	.word	0x200002e8

08000910 <ClearScreen>:


void ClearScreen(LCD_PCD8544_screen_t* scr){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	gfxClearFrameBuffer();
 8000918:	f7ff fcfe 	bl	8000318 <gfxClearFrameBuffer>
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e01c      	b.n	800095c <ClearScreen+0x4c>
		gScreenRegionsToUpdate[i].updateColumnFinish = 83;
 8000922:	4913      	ldr	r1, [pc, #76]	; (8000970 <ClearScreen+0x60>)
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	440b      	add	r3, r1
 800092e:	3302      	adds	r3, #2
 8000930:	2253      	movs	r2, #83	; 0x53
 8000932:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000934:	490e      	ldr	r1, [pc, #56]	; (8000970 <ClearScreen+0x60>)
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	440b      	add	r3, r1
 8000940:	3301      	adds	r3, #1
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 1;
 8000946:	490a      	ldr	r1, [pc, #40]	; (8000970 <ClearScreen+0x60>)
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	440b      	add	r3, r1
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3301      	adds	r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b05      	cmp	r3, #5
 8000960:	dddf      	ble.n	8000922 <ClearScreen+0x12>
	}
	gfxFinishDrawing(scr);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fe46 	bl	80005f4 <gfxFinishDrawing>

}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200002e8 	.word	0x200002e8

08000974 <gfxClearFrameBufferRow>:


void gfxClearFrameBufferRow(u8 rowIndex, u8 colStart, u8 amount){
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	460b      	mov	r3, r1
 8000980:	71bb      	strb	r3, [r7, #6]
 8000982:	4613      	mov	r3, r2
 8000984:	717b      	strb	r3, [r7, #5]
	u8* frameBufferStartPtr = &gFrameBuffer[(rowIndex * PIXELS_WIDTH) + colStart];
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2254      	movs	r2, #84	; 0x54
 800098a:	fb03 f202 	mul.w	r2, r3, r2
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	4413      	add	r3, r2
 8000992:	4a06      	ldr	r2, [pc, #24]	; (80009ac <gfxClearFrameBufferRow+0x38>)
 8000994:	4413      	add	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

	memset(frameBufferStartPtr, 0, amount);
 8000998:	797b      	ldrb	r3, [r7, #5]
 800099a:	461a      	mov	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f006 fa02 	bl	8006da8 <memset>

}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000f0 	.word	0x200000f0

080009b0 <TetrisAccumulatedPlaytime_Load>:
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

static u32 _accumulatedPlaytime = 0x0018EE6C;

u32 TetrisAccumulatedPlaytime_Load(u32 startAddress){
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	_accumulatedPlaytime = *((u32*)startAddress);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <TetrisAccumulatedPlaytime_Load+0x20>)
 80009be:	6013      	str	r3, [r2, #0]
	return startAddress + sizeof(u32);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3304      	adds	r3, #4
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20000000 	.word	0x20000000

080009d4 <TetrisAccumulatedPlaytime_Save>:


u32 TetrisAccumulatedPlaytime_Save(u32 startAddress){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,startAddress, _accumulatedPlaytime);
 80009dc:	4907      	ldr	r1, [pc, #28]	; (80009fc <TetrisAccumulatedPlaytime_Save+0x28>)
 80009de:	6809      	ldr	r1, [r1, #0]
 80009e0:	2000      	movs	r0, #0
 80009e2:	460a      	mov	r2, r1
 80009e4:	4603      	mov	r3, r0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	2002      	movs	r0, #2
 80009ea:	f003 fa73 	bl	8003ed4 <HAL_FLASH_Program>
	return startAddress + sizeof(u32);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3304      	adds	r3, #4
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000000 	.word	0x20000000

08000a00 <TetrisAccumulatedPlaytime_GetAccumulatedPlaytime>:

u32 TetrisAccumulatedPlaytime_GetAccumulatedPlaytime(){
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	return _accumulatedPlaytime;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <TetrisAccumulatedPlaytime_GetAccumulatedPlaytime+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000000 	.word	0x20000000

08000a18 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime>:

u32 TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime(u32 amountToIncrementBy){
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	_accumulatedPlaytime += amountToIncrementBy;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime+0x24>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000000 	.word	0x20000000

08000a40 <GetStateAtXY>:
static u8* _TetrisPieces[NUM_TETRIS_PIECES]  = {_ZPieceOccupiedIndicies, _SPieceOccupiedIndicies,_OPieceOccupiedIndicies,_LPieceOccupiedIndicies,_TPieceOccupiedIndicies,_JPieceOccupiedIndicies,_IPieceOccupiedIndices, };




static BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000a50:	79bb      	ldrb	r3, [r7, #6]
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <GetStateAtXY+0x3c>)
 8000a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	fa42 f303 	asr.w	r3, r2, r3
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200002fc 	.word	0x200002fc

08000a80 <SetStateAtXY>:

static void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	71bb      	strb	r3, [r7, #6]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000a92:	797b      	ldrb	r3, [r7, #5]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d111      	bne.n	8000abc <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <SetStateAtXY+0x70>)
 8000a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	b291      	uxth	r1, r2
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <SetStateAtXY+0x70>)
 8000ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 8000aba:	e012      	b.n	8000ae2 <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <SetStateAtXY+0x70>)
 8000ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	b291      	uxth	r1, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <SetStateAtXY+0x70>)
 8000ade:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200002fc 	.word	0x200002fc

08000af4 <Tetris_DrawCurentPiece>:




static void Tetris_DrawCurentPiece(){
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <Tetris_DrawCurentPiece+0xb8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a2b      	ldr	r2, [pc, #172]	; (8000bac <Tetris_DrawCurentPiece+0xb8>)
 8000b00:	7912      	ldrb	r2, [r2, #4]
 8000b02:	0092      	lsls	r2, r2, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	e045      	b.n	8000b9a <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	0052      	lsls	r2, r2, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	0052      	lsls	r2, r2, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <Tetris_DrawCurentPiece+0xb8>)
 8000b38:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	0052      	lsls	r2, r2, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	4413      	add	r3, r2
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <Tetris_DrawCurentPiece+0xb8>)
 8000b50:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	0052      	lsls	r2, r2, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	797b      	ldrb	r3, [r7, #5]
 8000b60:	4413      	add	r3, r2
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db12      	blt.n	8000b94 <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <Tetris_DrawCurentPiece+0xbc>)
 8000b70:	681c      	ldr	r4, [r3, #0]
 8000b72:	793a      	ldrb	r2, [r7, #4]
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <Tetris_DrawCurentPiece+0xc0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	b2d8      	uxtb	r0, r3
 8000b7c:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000b7e:	793a      	ldrb	r2, [r7, #4]
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <Tetris_DrawCurentPiece+0xc0>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000b88:	3303      	adds	r3, #3
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	78fb      	ldrb	r3, [r7, #3]
 8000b8e:	3303      	adds	r3, #3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3301      	adds	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	ddb6      	ble.n	8000b0e <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000334 	.word	0x20000334
 8000bb0:	20000320 	.word	0x20000320
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <Tetris_DrawNextPiece>:

static void Tetris_DrawNextPiece(){
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <Tetris_DrawNextPiece+0x94>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <Tetris_DrawNextPiece+0x94>)
 8000bc4:	7912      	ldrb	r2, [r2, #4]
 8000bc6:	0092      	lsls	r2, r2, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e033      	b.n	8000c3a <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	0052      	lsls	r2, r2, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	0052      	lsls	r2, r2, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	3321      	adds	r3, #33	; 0x21
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000c02:	797b      	ldrb	r3, [r7, #5]
 8000c04:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db12      	blt.n	8000c34 <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <Tetris_DrawNextPiece+0x98>)
 8000c10:	681c      	ldr	r4, [r3, #0]
 8000c12:	793a      	ldrb	r2, [r7, #4]
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <Tetris_DrawNextPiece+0x9c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b2d8      	uxtb	r0, r3
 8000c1c:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000c1e:	793a      	ldrb	r2, [r7, #4]
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <Tetris_DrawNextPiece+0x9c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000c28:	3303      	adds	r3, #3
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	3303      	adds	r3, #3
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	ddc8      	ble.n	8000bd2 <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd90      	pop	{r4, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000033c 	.word	0x2000033c
 8000c50:	20000320 	.word	0x20000320
 8000c54:	20000004 	.word	0x20000004

08000c58 <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <Tetris_DrawTetrisBoard+0xe0>)
 8000c64:	681c      	ldr	r4, [r3, #0]
 8000c66:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <Tetris_DrawTetrisBoard+0xe4>)
 8000c68:	7818      	ldrb	r0, [r3, #0]
 8000c6a:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <Tetris_DrawTetrisBoard+0xe8>)
 8000c6c:	7819      	ldrb	r1, [r3, #0]
 8000c6e:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <Tetris_DrawTetrisBoard+0xe4>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	331e      	adds	r3, #30
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <Tetris_DrawTetrisBoard+0xe8>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	332d      	adds	r3, #45	; 0x2d
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	e049      	b.n	8000d1a <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	e040      	b.n	8000d0e <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fed2 	bl	8000a40 <GetStateAtXY>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d132      	bne.n	8000d08 <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	0052      	lsls	r2, r2, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <Tetris_DrawTetrisBoard+0xe4>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	0052      	lsls	r2, r2, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <Tetris_DrawTetrisBoard+0xe8>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	0052      	lsls	r2, r2, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <Tetris_DrawTetrisBoard+0xe4>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	3303      	adds	r3, #3
 8000ce0:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	0052      	lsls	r2, r2, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <Tetris_DrawTetrisBoard+0xe8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	3303      	adds	r3, #3
 8000cf8:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <Tetris_DrawTetrisBoard+0xec>)
 8000cfc:	681c      	ldr	r4, [r3, #0]
 8000cfe:	7b3b      	ldrb	r3, [r7, #12]
 8000d00:	7b7a      	ldrb	r2, [r7, #13]
 8000d02:	7bb9      	ldrb	r1, [r7, #14]
 8000d04:	7bf8      	ldrb	r0, [r7, #15]
 8000d06:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	2b09      	cmp	r3, #9
 8000d12:	ddbb      	ble.n	8000c8c <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2b0e      	cmp	r3, #14
 8000d1e:	ddb2      	ble.n	8000c86 <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 8000d20:	f7ff fee8 	bl	8000af4 <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d101      	bne.n	8000d2e <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8000d2a:	f7ff ff45 	bl	8000bb8 <Tetris_DrawNextPiece>
	}
}
 8000d2e:	bf00      	nop
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000031c 	.word	0x2000031c
 8000d3c:	20000004 	.word	0x20000004
 8000d40:	20000344 	.word	0x20000344
 8000d44:	20000324 	.word	0x20000324

08000d48 <InitNewCurrentPiece>:

static void InitNewCurrentPiece(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <InitNewCurrentPiece+0x30>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <InitNewCurrentPiece+0x30>)
 8000d54:	22fe      	movs	r2, #254	; 0xfe
 8000d56:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <InitNewCurrentPiece+0x34>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4798      	blx	r3
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <InitNewCurrentPiece+0x38>)
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <InitNewCurrentPiece+0x30>)
 8000d6a:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <InitNewCurrentPiece+0x30>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	711a      	strb	r2, [r3, #4]
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000334 	.word	0x20000334
 8000d7c:	20000328 	.word	0x20000328
 8000d80:	20000008 	.word	0x20000008

08000d84 <InitNewNextPiece>:

static void InitNewNextPiece(){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <InitNewNextPiece+0x30>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <InitNewNextPiece+0x30>)
 8000d90:	22fe      	movs	r2, #254	; 0xfe
 8000d92:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <InitNewNextPiece+0x34>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4798      	blx	r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <InitNewNextPiece+0x38>)
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <InitNewNextPiece+0x30>)
 8000da6:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <InitNewNextPiece+0x30>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	711a      	strb	r2, [r3, #4]
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000033c 	.word	0x2000033c
 8000db8:	20000328 	.word	0x20000328
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <CopyNextPieceToCurrent>:

static void CopyNextPieceToCurrent(){
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <CopyNextPieceToCurrent+0x1c>)
 8000dc6:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <CopyNextPieceToCurrent+0x20>)
 8000dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dcc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000334 	.word	0x20000334
 8000de0:	2000033c 	.word	0x2000033c

08000de4 <Tetris_ResetTetrisBoard>:

void Tetris_ResetTetrisBoard(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 8000de8:	221e      	movs	r2, #30
 8000dea:	2100      	movs	r1, #0
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <Tetris_ResetTetrisBoard+0x1c>)
 8000dee:	f005 ffdb 	bl	8006da8 <memset>
	InitNewCurrentPiece();
 8000df2:	f7ff ffa9 	bl	8000d48 <InitNewCurrentPiece>
	InitNewNextPiece();
 8000df6:	f7ff ffc5 	bl	8000d84 <InitNewNextPiece>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200002fc 	.word	0x200002fc

08000e04 <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 8000e12:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <Tetris_Init+0x40>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <Tetris_Init+0x44>)
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <Tetris_Init+0x48>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <Tetris_Init+0x4c>)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <Tetris_Init+0x50>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <Tetris_Init+0x54>)
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	6013      	str	r3, [r2, #0]
	//Tetris_ResetTetrisBoard();
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000031c 	.word	0x2000031c
 8000e48:	20000324 	.word	0x20000324
 8000e4c:	20000320 	.word	0x20000320
 8000e50:	20000328 	.word	0x20000328
 8000e54:	2000032c 	.word	0x2000032c
 8000e58:	20000330 	.word	0x20000330

08000e5c <IsBlockAllowedToBeHere>:

static bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	460a      	mov	r2, r1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8000e6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da09      	bge.n	8000e88 <IsBlockAllowedToBeHere+0x2c>
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db05      	blt.n	8000e88 <IsBlockAllowedToBeHere+0x2c>
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b09      	cmp	r3, #9
 8000e82:	dc01      	bgt.n	8000e88 <IsBlockAllowedToBeHere+0x2c>
		return true;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e01b      	b.n	8000ec0 <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	79ba      	ldrb	r2, [r7, #6]
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fdd6 	bl	8000a40 <GetStateAtXY>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d101      	bne.n	8000e9e <IsBlockAllowedToBeHere+0x42>
		return false;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e010      	b.n	8000ec0 <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b09      	cmp	r3, #9
 8000ea4:	dc03      	bgt.n	8000eae <IsBlockAllowedToBeHere+0x52>
 8000ea6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eaa:	2b0e      	cmp	r3, #14
 8000eac:	dd01      	ble.n	8000eb2 <IsBlockAllowedToBeHere+0x56>
		return false;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e006      	b.n	8000ec0 <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	da01      	bge.n	8000ebe <IsBlockAllowedToBeHere+0x62>
		return false;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <WriteCurrentPieceToGameBoardArray>:

static bool WriteCurrentPieceToGameBoardArray(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000ed4:	7912      	ldrb	r2, [r2, #4]
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e02e      	b.n	8000f40 <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000efc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	4413      	add	r3, r2
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000f0c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	4413      	add	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 8000f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da01      	bge.n	8000f26 <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e010      	b.n	8000f48 <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 8000f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db05      	blt.n	8000f3a <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	78f9      	ldrb	r1, [r7, #3]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fda3 	bl	8000a80 <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	ddcd      	ble.n	8000ee2 <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000334 	.word	0x20000334

08000f54 <IsMoveValid>:

static u8 IsMoveValid(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <IsMoveValid+0x84>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <IsMoveValid+0x84>)
 8000f60:	7912      	ldrb	r2, [r2, #4]
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e02b      	b.n	8000fc6 <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <IsMoveValid+0x84>)
 8000f88:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	4413      	add	r3, r2
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <IsMoveValid+0x84>)
 8000f98:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	797b      	ldrb	r3, [r7, #5]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 8000fa6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000faa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff53 	bl	8000e5c <IsBlockAllowedToBeHere>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <IsMoveValid+0x6c>
			return 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e006      	b.n	8000fce <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	ddd0      	ble.n	8000f6e <IsMoveValid+0x1a>
		}
	}
	return 1;
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000334 	.word	0x20000334

08000fdc <CheckForAndClearLines>:

static u8 CheckForAndClearLines(){
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8000fea:	230e      	movs	r3, #14
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	e027      	b.n	8001040 <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 8000ff0:	4a18      	ldr	r2, [pc, #96]	; (8001054 <CheckForAndClearLines+0x78>)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d105      	bne.n	800100c <CheckForAndClearLines+0x30>
			linesToClear++;
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	3301      	adds	r3, #1
 8001004:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 8001006:	2301      	movs	r3, #1
 8001008:	71bb      	strb	r3, [r7, #6]
 800100a:	e001      	b.n	8001010 <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 800100c:	2300      	movs	r3, #0
 800100e:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d011      	beq.n	800103a <CheckForAndClearLines+0x5e>
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10e      	bne.n	800103a <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 800101c:	79fa      	ldrb	r2, [r7, #7]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	490c      	ldr	r1, [pc, #48]	; (8001054 <CheckForAndClearLines+0x78>)
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <CheckForAndClearLines+0x78>)
 800102c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <CheckForAndClearLines+0x78>)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2100      	movs	r1, #0
 8001036:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	dad4      	bge.n	8000ff0 <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 8001046:	79fb      	ldrb	r3, [r7, #7]
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	200002fc 	.word	0x200002fc

08001058 <Tetris_Rotate>:

void Tetris_Rotate(){
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <Tetris_Rotate+0x48>)
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	3301      	adds	r3, #1
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <Tetris_Rotate+0x48>)
 8001066:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <Tetris_Rotate+0x48>)
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d902      	bls.n	8001076 <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <Tetris_Rotate+0x48>)
 8001072:	2200      	movs	r2, #0
 8001074:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 8001076:	f7ff ff6d 	bl	8000f54 <IsMoveValid>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10d      	bne.n	800109c <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <Tetris_Rotate+0x48>)
 8001082:	791b      	ldrb	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d103      	bne.n	8001090 <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <Tetris_Rotate+0x48>)
 800108a:	2203      	movs	r2, #3
 800108c:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 800108e:	e005      	b.n	800109c <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <Tetris_Rotate+0x48>)
 8001092:	791b      	ldrb	r3, [r3, #4]
 8001094:	3b01      	subs	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <Tetris_Rotate+0x48>)
 800109a:	711a      	strb	r2, [r3, #4]
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000334 	.word	0x20000334

080010a4 <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <Tetris_MoveDown+0x80>)
 80010ac:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b25a      	sxtb	r2, r3
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <Tetris_MoveDown+0x80>)
 80010ba:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 80010bc:	f7ff ff4a 	bl	8000f54 <IsMoveValid>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d128      	bne.n	8001118 <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <Tetris_MoveDown+0x80>)
 80010c8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <Tetris_MoveDown+0x80>)
 80010d6:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 80010d8:	f7ff fef6 	bl	8000ec8 <WriteCurrentPieceToGameBoardArray>
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 80010e0:	f7ff ff7c 	bl	8000fdc <CheckForAndClearLines>
 80010e4:	4603      	mov	r3, r0
 80010e6:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 80010e8:	f7ff fe6a 	bl	8000dc0 <CopyNextPieceToCurrent>
		InitNewNextPiece();
 80010ec:	f7ff fe4a 	bl	8000d84 <InitNewNextPiece>
		if(hasGameOverOccured == true){
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d106      	bne.n	8001104 <Tetris_MoveDown+0x60>
			_onGameOver();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <Tetris_MoveDown+0x84>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4798      	blx	r3
			Tetris_ResetTetrisBoard();
 80010fc:	f7ff fe72 	bl	8000de4 <Tetris_ResetTetrisBoard>
			return MoveDownResultGameOver;
 8001100:	2303      	movs	r3, #3
 8001102:	e00a      	b.n	800111a <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <Tetris_MoveDown+0x88>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	79ba      	ldrb	r2, [r7, #6]
 8001110:	4610      	mov	r0, r2
 8001112:	4798      	blx	r3
		}
		return Settled;
 8001114:	2302      	movs	r3, #2
 8001116:	e000      	b.n	800111a <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 8001118:	2301      	movs	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000334 	.word	0x20000334
 8001128:	20000330 	.word	0x20000330
 800112c:	2000032c 	.word	0x2000032c

08001130 <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <Tetris_MoveLeft+0x38>)
 8001136:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	3b01      	subs	r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b25a      	sxtb	r2, r3
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <Tetris_MoveLeft+0x38>)
 8001144:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8001146:	f7ff ff05 	bl	8000f54 <IsMoveValid>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d108      	bne.n	8001162 <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <Tetris_MoveLeft+0x38>)
 8001152:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	3301      	adds	r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	b25a      	sxtb	r2, r3
 800115e:	4b02      	ldr	r3, [pc, #8]	; (8001168 <Tetris_MoveLeft+0x38>)
 8001160:	715a      	strb	r2, [r3, #5]
	}
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000334 	.word	0x20000334

0800116c <Tetris_MoveRight>:

void Tetris_MoveRight(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <Tetris_MoveRight+0x38>)
 8001172:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	3301      	adds	r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	b25a      	sxtb	r2, r3
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <Tetris_MoveRight+0x38>)
 8001180:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8001182:	f7ff fee7 	bl	8000f54 <IsMoveValid>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d108      	bne.n	800119e <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <Tetris_MoveRight+0x38>)
 800118e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	3b01      	subs	r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	b25a      	sxtb	r2, r3
 800119a:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <Tetris_MoveRight+0x38>)
 800119c:	715a      	strb	r2, [r3, #5]
	}
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000334 	.word	0x20000334

080011a8 <WriteSingleHighScoreToFrameBuffer>:
static i8 _settingInitial = 0;
static u32 _blinkTimer = 0;
static bool _blinkState = true; /* True if the initial being set is currently drawn to frame buffer, false otherwise */
static bool _isAnalogStickExtended = false; /* Is the analog stick moved far enough in any one direction to count as "extended" */

static void WriteSingleHighScoreToFrameBuffer(const HighScore* highScore, u8 line){
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	70fb      	strb	r3, [r7, #3]
	char highScoreLineBuffer[10];
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
		highScore->Initials[0],
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	781b      	ldrb	r3, [r3, #0]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80011b8:	4619      	mov	r1, r3
		highScore->Initials[1],
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	785b      	ldrb	r3, [r3, #1]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80011be:	461c      	mov	r4, r3
		highScore->Initials[2],
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	789b      	ldrb	r3, [r3, #2]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f107 000c 	add.w	r0, r7, #12
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	4623      	mov	r3, r4
 80011d4:	460a      	mov	r2, r1
 80011d6:	4907      	ldr	r1, [pc, #28]	; (80011f4 <WriteSingleHighScoreToFrameBuffer+0x4c>)
 80011d8:	f005 fe5a 	bl	8006e90 <siprintf>
		highScore->Score);
	gfxWriteTextLineToFrameBuffer(line,0,highScoreLineBuffer);
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fab9 	bl	800075c <gfxWriteTextLineToFrameBuffer>

}
 80011ea:	bf00      	nop
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	080082a0 	.word	0x080082a0

080011f8 <DrawHighScoresToFrameBuffer>:

static void DrawHighScoresToFrameBuffer(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	e010      	b.n	8001226 <DrawHighScoresToFrameBuffer+0x2e>
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(i);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fd8f 	bl	8001d2c <TetrisHighScores_GetHighScoreAtIndex>
 800120e:	6038      	str	r0, [r7, #0]
		WriteSingleHighScoreToFrameBuffer(highScore, i+1);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	3301      	adds	r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4619      	mov	r1, r3
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f7ff ffc4 	bl	80011a8 <WriteSingleHighScoreToFrameBuffer>
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3301      	adds	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d9eb      	bls.n	8001204 <DrawHighScoresToFrameBuffer+0xc>
	}

}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <BlinkInitialBeingSet>:

static void BlinkInitialBeingSet(){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
	if(_blinkState == true){
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <BlinkInitialBeingSet+0x8c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d11e      	bne.n	8001284 <BlinkInitialBeingSet+0x4c>
		_blinkState = false;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <BlinkInitialBeingSet+0x8c>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
		u8 colStart = _settingInitial * LCD_PCD8544_CHAR_WIDTH;
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <BlinkInitialBeingSet+0x90>)
 800124e:	f993 3000 	ldrsb.w	r3, [r3]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	0052      	lsls	r2, r2, #1
 8001258:	4413      	add	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	71fb      	strb	r3, [r7, #7]
		u8 row = _newHighScoreRank + 1;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <BlinkInitialBeingSet+0x94>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	71bb      	strb	r3, [r7, #6]
		gfxClearFrameBufferRow(row,colStart,LCD_PCD8544_CHAR_WIDTH);
 8001266:	79f9      	ldrb	r1, [r7, #7]
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	2206      	movs	r2, #6
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fb81 	bl	8000974 <gfxClearFrameBufferRow>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,colStart + LCD_PCD8544_CHAR_WIDTH);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	3306      	adds	r3, #6
 8001276:	b2db      	uxtb	r3, r3
 8001278:	79b9      	ldrb	r1, [r7, #6]
 800127a:	79b8      	ldrb	r0, [r7, #6]
 800127c:	2200      	movs	r2, #0
 800127e:	f7ff f891 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
 8001282:	e017      	b.n	80012b4 <BlinkInitialBeingSet+0x7c>
	}
	else{
		_blinkState = true;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <BlinkInitialBeingSet+0x8c>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
		u8 row = _newHighScoreRank + 1;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <BlinkInitialBeingSet+0x94>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <BlinkInitialBeingSet+0x94>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fd48 	bl	8001d2c <TetrisHighScores_GetHighScoreAtIndex>
 800129c:	60b8      	str	r0, [r7, #8]
		WriteSingleHighScoreToFrameBuffer(highScore, row);
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	4619      	mov	r1, r3
 80012a2:	68b8      	ldr	r0, [r7, #8]
 80012a4:	f7ff ff80 	bl	80011a8 <WriteSingleHighScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,LCD_PCD8544_CHAR_WIDTH*3);
 80012a8:	7bf9      	ldrb	r1, [r7, #15]
 80012aa:	7bf8      	ldrb	r0, [r7, #15]
 80012ac:	2312      	movs	r3, #18
 80012ae:	2200      	movs	r2, #0
 80012b0:	f7ff f878 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	}
	gfxFinishDrawing(&gLcdScreen);
 80012b4:	4806      	ldr	r0, [pc, #24]	; (80012d0 <BlinkInitialBeingSet+0x98>)
 80012b6:	f7ff f99d 	bl	80005f4 <gfxFinishDrawing>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000024 	.word	0x20000024
 80012c8:	2000034d 	.word	0x2000034d
 80012cc:	2000034c 	.word	0x2000034c
 80012d0:	200005e0 	.word	0x200005e0

080012d4 <TetrisEnterHighScore_Update>:

Tetris_Modes_StateTriggers TetrisEnterHighScore_Update(u32 timePassed){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	486d      	ldr	r0, [pc, #436]	; (800149c <TetrisEnterHighScore_Update+0x1c8>)
 80012e8:	f7fe ffca 	bl	8000280 <ReadAnalogStickChange>
	HighScore* highScore;
	const i32 twelveBitMax = 4096;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	61fb      	str	r3, [r7, #28]
	if(analogYChange > (twelveBitMax/3)){
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	4a6a      	ldr	r2, [pc, #424]	; (80014a0 <TetrisEnterHighScore_Update+0x1cc>)
 80012f6:	fb82 1203 	smull	r1, r2, r2, r3
 80012fa:	17db      	asrs	r3, r3, #31
 80012fc:	1ad2      	subs	r2, r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	da27      	bge.n	8001354 <TetrisEnterHighScore_Update+0x80>
		if(_isAnalogStickExtended == false){
 8001304:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <TetrisEnterHighScore_Update+0x1d0>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f040 80a7 	bne.w	800145c <TetrisEnterHighScore_Update+0x188>
			_isAnalogStickExtended = true;
 800130e:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <TetrisEnterHighScore_Update+0x1d0>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
			highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 8001314:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <TetrisEnterHighScore_Update+0x1d4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fd07 	bl	8001d2c <TetrisHighScores_GetHighScoreAtIndex>
 800131e:	61b8      	str	r0, [r7, #24]
			highScore->Initials[_settingInitial]--;
 8001320:	4b62      	ldr	r3, [pc, #392]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 8001322:	f993 3000 	ldrsb.w	r3, [r3]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	5cd2      	ldrb	r2, [r2, r3]
 800132a:	3a01      	subs	r2, #1
 800132c:	b2d1      	uxtb	r1, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	54d1      	strb	r1, [r2, r3]
			if(highScore->Initials[_settingInitial] < 'A'){
 8001332:	4b5e      	ldr	r3, [pc, #376]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 8001334:	f993 3000 	ldrsb.w	r3, [r3]
 8001338:	461a      	mov	r2, r3
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	5c9b      	ldrb	r3, [r3, r2]
 800133e:	2b40      	cmp	r3, #64	; 0x40
 8001340:	f200 808c 	bhi.w	800145c <TetrisEnterHighScore_Update+0x188>
				highScore->Initials[_settingInitial] = 'Z';
 8001344:	4b59      	ldr	r3, [pc, #356]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 8001346:	f993 3000 	ldrsb.w	r3, [r3]
 800134a:	461a      	mov	r2, r3
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	215a      	movs	r1, #90	; 0x5a
 8001350:	5499      	strb	r1, [r3, r2]
 8001352:	e083      	b.n	800145c <TetrisEnterHighScore_Update+0x188>
			}
		}


	}
	else if(analogYChange < -(twelveBitMax/3)){
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	4a52      	ldr	r2, [pc, #328]	; (80014a0 <TetrisEnterHighScore_Update+0x1cc>)
 8001358:	fb82 1203 	smull	r1, r2, r2, r3
 800135c:	17db      	asrs	r3, r3, #31
 800135e:	1a9a      	subs	r2, r3, r2
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	429a      	cmp	r2, r3
 8001364:	dd25      	ble.n	80013b2 <TetrisEnterHighScore_Update+0xde>
		if(_isAnalogStickExtended == false){
 8001366:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <TetrisEnterHighScore_Update+0x1d0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d176      	bne.n	800145c <TetrisEnterHighScore_Update+0x188>
			_isAnalogStickExtended = true;
 800136e:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <TetrisEnterHighScore_Update+0x1d0>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
			highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 8001374:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <TetrisEnterHighScore_Update+0x1d4>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fcd7 	bl	8001d2c <TetrisHighScores_GetHighScoreAtIndex>
 800137e:	61b8      	str	r0, [r7, #24]
			highScore->Initials[_settingInitial]++;
 8001380:	4b4a      	ldr	r3, [pc, #296]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 8001382:	f993 3000 	ldrsb.w	r3, [r3]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	5cd2      	ldrb	r2, [r2, r3]
 800138a:	3201      	adds	r2, #1
 800138c:	b2d1      	uxtb	r1, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	54d1      	strb	r1, [r2, r3]
			if(highScore->Initials[_settingInitial] > 'Z'){
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 8001394:	f993 3000 	ldrsb.w	r3, [r3]
 8001398:	461a      	mov	r2, r3
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	5c9b      	ldrb	r3, [r3, r2]
 800139e:	2b5a      	cmp	r3, #90	; 0x5a
 80013a0:	d95c      	bls.n	800145c <TetrisEnterHighScore_Update+0x188>
				highScore->Initials[_settingInitial] = 'A';
 80013a2:	4b42      	ldr	r3, [pc, #264]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 80013a4:	f993 3000 	ldrsb.w	r3, [r3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2141      	movs	r1, #65	; 0x41
 80013ae:	5499      	strb	r1, [r3, r2]
 80013b0:	e054      	b.n	800145c <TetrisEnterHighScore_Update+0x188>
		}



	}
	else if(analogXChange > (twelveBitMax/3)){
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4a3a      	ldr	r2, [pc, #232]	; (80014a0 <TetrisEnterHighScore_Update+0x1cc>)
 80013b6:	fb82 1203 	smull	r1, r2, r2, r3
 80013ba:	17db      	asrs	r3, r3, #31
 80013bc:	1ad2      	subs	r2, r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	da1f      	bge.n	8001404 <TetrisEnterHighScore_Update+0x130>
		if(_isAnalogStickExtended == false){
 80013c4:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <TetrisEnterHighScore_Update+0x1d0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d147      	bne.n	800145c <TetrisEnterHighScore_Update+0x188>
			_isAnalogStickExtended = true;
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <TetrisEnterHighScore_Update+0x1d0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
			_settingInitial++;
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 80013d4:	f993 3000 	ldrsb.w	r3, [r3]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 80013e2:	701a      	strb	r2, [r3, #0]
			if(_settingInitial >= 3){
 80013e4:	4b31      	ldr	r3, [pc, #196]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 80013e6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	dd02      	ble.n	80013f4 <TetrisEnterHighScore_Update+0x120>
				_settingInitial = 0;
 80013ee:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
			}
			_blinkState = true;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <TetrisEnterHighScore_Update+0x1dc>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
			_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <TetrisEnterHighScore_Update+0x1e0>)
 80013fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e02b      	b.n	800145c <TetrisEnterHighScore_Update+0x188>
		}

	}
	else if(analogXChange < -(twelveBitMax/3)){
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <TetrisEnterHighScore_Update+0x1cc>)
 8001408:	fb82 1203 	smull	r1, r2, r2, r3
 800140c:	17db      	asrs	r3, r3, #31
 800140e:	1a9a      	subs	r2, r3, r2
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	429a      	cmp	r2, r3
 8001414:	dd1f      	ble.n	8001456 <TetrisEnterHighScore_Update+0x182>
		if(_isAnalogStickExtended == false){
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <TetrisEnterHighScore_Update+0x1d0>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d11e      	bne.n	800145c <TetrisEnterHighScore_Update+0x188>
			_isAnalogStickExtended = true;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <TetrisEnterHighScore_Update+0x1d0>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
			_settingInitial--;
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 8001426:	f993 3000 	ldrsb.w	r3, [r3]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	3b01      	subs	r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	b25a      	sxtb	r2, r3
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 8001434:	701a      	strb	r2, [r3, #0]
			if(_settingInitial < 0){
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 8001438:	f993 3000 	ldrsb.w	r3, [r3]
 800143c:	2b00      	cmp	r3, #0
 800143e:	da02      	bge.n	8001446 <TetrisEnterHighScore_Update+0x172>
				_settingInitial = 2;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <TetrisEnterHighScore_Update+0x1d8>)
 8001442:	2202      	movs	r2, #2
 8001444:	701a      	strb	r2, [r3, #0]
			}
			_blinkState = true;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <TetrisEnterHighScore_Update+0x1dc>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
			_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <TetrisEnterHighScore_Update+0x1e0>)
 800144e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e002      	b.n	800145c <TetrisEnterHighScore_Update+0x188>
		}

	}
	else{
		_isAnalogStickExtended = false;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <TetrisEnterHighScore_Update+0x1d0>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
	}

	_blinkTimer += timePassed;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <TetrisEnterHighScore_Update+0x1e0>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <TetrisEnterHighScore_Update+0x1e0>)
 8001466:	6013      	str	r3, [r2, #0]
	if(_blinkTimer >= ENTER_INITIAL_BLINK_PERIOD){
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <TetrisEnterHighScore_Update+0x1e0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001470:	d304      	bcc.n	800147c <TetrisEnterHighScore_Update+0x1a8>
		_blinkTimer = 0;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <TetrisEnterHighScore_Update+0x1e0>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
		BlinkInitialBeingSet();
 8001478:	f7ff fede 	bl	8001238 <BlinkInitialBeingSet>
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 800147c:	2101      	movs	r1, #1
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <TetrisEnterHighScore_Update+0x1e4>)
 8001480:	f003 f872 	bl	8004568 <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	75fb      	strb	r3, [r7, #23]
	if(buttonBState == GPIO_PIN_SET){
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <TetrisEnterHighScore_Update+0x1be>
		return HighScoreEntered;
 800148e:	2305      	movs	r3, #5
 8001490:	e000      	b.n	8001494 <TetrisEnterHighScore_Update+0x1c0>
	}

	return NoChange;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200007fc 	.word	0x200007fc
 80014a0:	55555556 	.word	0x55555556
 80014a4:	20000354 	.word	0x20000354
 80014a8:	2000034c 	.word	0x2000034c
 80014ac:	2000034d 	.word	0x2000034d
 80014b0:	20000024 	.word	0x20000024
 80014b4:	20000350 	.word	0x20000350
 80014b8:	48000400 	.word	0x48000400

080014bc <TetrisEnterHighScore_OnEnter>:

void TetrisEnterHighScore_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
	_newHighScore = *((u32*)stateMachineDataPtr);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a24      	ldr	r2, [pc, #144]	; (8001560 <TetrisEnterHighScore_OnEnter+0xa4>)
 80014ce:	6013      	str	r3, [r2, #0]
	_newHighScoreRank = TetrisHighScores_AddHighScore(_newHighScore);
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <TetrisEnterHighScore_OnEnter+0xa4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fc55 	bl	8001d84 <TetrisHighScores_AddHighScore>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <TetrisEnterHighScore_OnEnter+0xa8>)
 80014e0:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 80014e2:	f7fe ff19 	bl	8000318 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 80014e6:	f7ff f9e3 	bl	80008b0 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 80014ea:	2354      	movs	r3, #84	; 0x54
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7fe ff57 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 80014f6:	2354      	movs	r3, #84	; 0x54
 80014f8:	2200      	movs	r2, #0
 80014fa:	2101      	movs	r1, #1
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7fe ff51 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 8001502:	2354      	movs	r3, #84	; 0x54
 8001504:	2200      	movs	r2, #0
 8001506:	2102      	movs	r1, #2
 8001508:	2002      	movs	r0, #2
 800150a:	f7fe ff4b 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(3,3,0,84);
 800150e:	2354      	movs	r3, #84	; 0x54
 8001510:	2200      	movs	r2, #0
 8001512:	2103      	movs	r1, #3
 8001514:	2003      	movs	r0, #3
 8001516:	f7fe ff45 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(4,4,0,84);
 800151a:	2354      	movs	r3, #84	; 0x54
 800151c:	2200      	movs	r2, #0
 800151e:	2104      	movs	r1, #4
 8001520:	2004      	movs	r0, #4
 8001522:	f7fe ff3f 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(5,5,0,84);
 8001526:	2354      	movs	r3, #84	; 0x54
 8001528:	2200      	movs	r2, #0
 800152a:	2105      	movs	r1, #5
 800152c:	2005      	movs	r0, #5
 800152e:	f7fe ff39 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	gfxWriteTextLineToFrameBuffer(0,0,"High Score");
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <TetrisEnterHighScore_OnEnter+0xac>)
 8001534:	2100      	movs	r1, #0
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff f910 	bl	800075c <gfxWriteTextLineToFrameBuffer>
	DrawHighScoresToFrameBuffer();
 800153c:	f7ff fe5c 	bl	80011f8 <DrawHighScoresToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <TetrisEnterHighScore_OnEnter+0xb0>)
 8001542:	f7ff f857 	bl	80005f4 <gfxFinishDrawing>
	_settingInitial = 0;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <TetrisEnterHighScore_OnEnter+0xb4>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
	_blinkTimer = 0;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <TetrisEnterHighScore_OnEnter+0xb8>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
	_blinkState = true;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <TetrisEnterHighScore_OnEnter+0xbc>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]

}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000348 	.word	0x20000348
 8001564:	2000034c 	.word	0x2000034c
 8001568:	080082ac 	.word	0x080082ac
 800156c:	200005e0 	.word	0x200005e0
 8001570:	2000034d 	.word	0x2000034d
 8001574:	20000350 	.word	0x20000350
 8001578:	20000024 	.word	0x20000024

0800157c <TetrisEnterHighScore_OnExit>:

void TetrisEnterHighScore_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <TetrisEnterHighScore_OnExit+0x20>)
 800158a:	f7ff f9c1 	bl	8000910 <ClearScreen>
	TetrisPersistantData_SaveAllPersistantData();
 800158e:	f000 fd8b 	bl	80020a8 <TetrisPersistantData_SaveAllPersistantData>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200005e0 	.word	0x200005e0

080015a0 <GetRandomNumberBetweenZeroAndSix>:
static u8 _currentLevel = 5;

//u32 FlashAddress = 0x08040000;
static void InitCurrentLevelTetrisScores();

static u8 GetRandomNumberBetweenZeroAndSix(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 80015a4:	f005 fc36 	bl	8006e14 <rand>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <GetRandomNumberBetweenZeroAndSix+0x28>)
 80015ae:	fba3 1302 	umull	r1, r3, r3, r2
 80015b2:	1ad1      	subs	r1, r2, r3
 80015b4:	0849      	lsrs	r1, r1, #1
 80015b6:	440b      	add	r3, r1
 80015b8:	0899      	lsrs	r1, r3, #2
 80015ba:	460b      	mov	r3, r1
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	b2db      	uxtb	r3, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	24924925 	.word	0x24924925

080015cc <DrawStationaryBlock>:


static void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4604      	mov	r4, r0
 80015d4:	4608      	mov	r0, r1
 80015d6:	4611      	mov	r1, r2
 80015d8:	461a      	mov	r2, r3
 80015da:	4623      	mov	r3, r4
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	4603      	mov	r3, r0
 80015e0:	71bb      	strb	r3, [r7, #6]
 80015e2:	460b      	mov	r3, r1
 80015e4:	717b      	strb	r3, [r7, #5]
 80015e6:	4613      	mov	r3, r2
 80015e8:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 80015ea:	793b      	ldrb	r3, [r7, #4]
 80015ec:	797a      	ldrb	r2, [r7, #5]
 80015ee:	79b9      	ldrb	r1, [r7, #6]
 80015f0:	79f8      	ldrb	r0, [r7, #7]
 80015f2:	f7ff f931 	bl	8000858 <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 80015f6:	793b      	ldrb	r3, [r7, #4]
 80015f8:	797a      	ldrb	r2, [r7, #5]
 80015fa:	79b9      	ldrb	r1, [r7, #6]
 80015fc:	79f8      	ldrb	r0, [r7, #7]
 80015fe:	f7fe ffb4 	bl	800056a <gfxDrawLine>
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
	...

0800160c <WriteLevelToFrameBuffer>:

static void WriteLevelToFrameBuffer(){
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
	u8 levelBuffer[11];
	sprintf(levelBuffer, "Lvl: %lu",_currentLevel);
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <WriteLevelToFrameBuffer+0x2c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <WriteLevelToFrameBuffer+0x30>)
 800161c:	4618      	mov	r0, r3
 800161e:	f005 fc37 	bl	8006e90 <siprintf>
	gfxWriteTextLineToFrameBuffer(2,TETRIS_BOARD_RIGHT_EDGE_COL + 1,levelBuffer);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	461a      	mov	r2, r3
 8001626:	2126      	movs	r1, #38	; 0x26
 8001628:	2002      	movs	r0, #2
 800162a:	f7ff f897 	bl	800075c <gfxWriteTextLineToFrameBuffer>

}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000002f 	.word	0x2000002f
 800163c:	080082b8 	.word	0x080082b8

08001640 <SetLevel>:

static void SetLevel(u8 level){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	_currentLevel = level;
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SetLevel+0x34>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	7013      	strb	r3, [r2, #0]
	_newLevelToDisplay = true;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <SetLevel+0x38>)
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
	_autoMoveInterval = _levelsMoveIntervals[_currentLevel];
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <SetLevel+0x34>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <SetLevel+0x3c>)
 800165e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <SetLevel+0x40>)
 8001664:	6013      	str	r3, [r2, #0]
	InitCurrentLevelTetrisScores();
 8001666:	f000 f963 	bl	8001930 <InitCurrentLevelTetrisScores>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000002f 	.word	0x2000002f
 8001678:	2000002d 	.word	0x2000002d
 800167c:	08008950 	.word	0x08008950
 8001680:	20000028 	.word	0x20000028

08001684 <OnLinesCleared>:

static void OnLinesCleared(u8 numLinesCleared){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <OnLinesCleared+0xa4>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	b29a      	uxth	r2, r3
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <OnLinesCleared+0xa4>)
 800169c:	801a      	strh	r2, [r3, #0]
	if(_linesCleared >= TETRIS_LINES_PER_LEVEL_UP){
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <OnLinesCleared+0xa4>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	2b09      	cmp	r3, #9
 80016a4:	d909      	bls.n	80016ba <OnLinesCleared+0x36>
		_linesCleared = 0;
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <OnLinesCleared+0xa4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	801a      	strh	r2, [r3, #0]
		SetLevel(_currentLevel + 1);
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <OnLinesCleared+0xa8>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ffc3 	bl	8001640 <SetLevel>
	}
	switch(numLinesCleared){
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	3b01      	subs	r3, #1
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d82a      	bhi.n	8001718 <OnLinesCleared+0x94>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <OnLinesCleared+0x44>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016e9 	.word	0x080016e9
 80016d0:	080016f9 	.word	0x080016f9
 80016d4:	08001709 	.word	0x08001709
	case 1:
		_score += _currentLevelTetrisScores[0];
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <OnLinesCleared+0xac>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <OnLinesCleared+0xb0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <OnLinesCleared+0xb0>)
 80016e4:	6013      	str	r3, [r2, #0]
		break;
 80016e6:	e017      	b.n	8001718 <OnLinesCleared+0x94>
	case 2:
		_score += _currentLevelTetrisScores[1];
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <OnLinesCleared+0xac>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <OnLinesCleared+0xb0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <OnLinesCleared+0xb0>)
 80016f4:	6013      	str	r3, [r2, #0]
		break;
 80016f6:	e00f      	b.n	8001718 <OnLinesCleared+0x94>
	case 3:
		_score += _currentLevelTetrisScores[2];
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <OnLinesCleared+0xac>)
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <OnLinesCleared+0xb0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4413      	add	r3, r2
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <OnLinesCleared+0xb0>)
 8001704:	6013      	str	r3, [r2, #0]
		break;
 8001706:	e007      	b.n	8001718 <OnLinesCleared+0x94>
	case 4:
		_score += _currentLevelTetrisScores[3];
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <OnLinesCleared+0xac>)
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <OnLinesCleared+0xb0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4413      	add	r3, r2
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <OnLinesCleared+0xb0>)
 8001714:	6013      	str	r3, [r2, #0]
		break;
 8001716:	bf00      	nop
	}
	_newScoreToDisplay = true;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <OnLinesCleared+0xb4>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000035e 	.word	0x2000035e
 800172c:	2000002f 	.word	0x2000002f
 8001730:	20000368 	.word	0x20000368
 8001734:	20000360 	.word	0x20000360
 8001738:	2000002c 	.word	0x2000002c

0800173c <OnGameOver>:

static void OnGameOver(){
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	//_linesCleared = 0;
	//_score = 0;
	//_newScoreToDisplay = true;
	//SetLevel(TETRIS_START_LEVEL);
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <IncrementTetrisTimer>:

static void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <IncrementTetrisTimer+0x44>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <IncrementTetrisTimer+0x44>)
 8001762:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <IncrementTetrisTimer+0x44>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <IncrementTetrisTimer+0x48>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d90b      	bls.n	8001788 <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d105      	bne.n	8001782 <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 8001776:	f7ff fc95 	bl	80010a4 <Tetris_MoveDown>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <IncrementTetrisTimer+0x4c>)
 8001780:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 8001782:	4b03      	ldr	r3, [pc, #12]	; (8001790 <IncrementTetrisTimer+0x44>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
	}
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000358 	.word	0x20000358
 8001794:	20000028 	.word	0x20000028
 8001798:	2000002e 	.word	0x2000002e

0800179c <WriteScoreToFrameBuffer>:

static void WriteScoreToFrameBuffer(){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%lu",_score);
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <WriteScoreToFrameBuffer+0x28>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	463b      	mov	r3, r7
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <WriteScoreToFrameBuffer+0x2c>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 fb70 	bl	8006e90 <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 80017b0:	463b      	mov	r3, r7
 80017b2:	461a      	mov	r2, r3
 80017b4:	2126      	movs	r1, #38	; 0x26
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7fe ffd0 	bl	800075c <gfxWriteTextLineToFrameBuffer>

}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000360 	.word	0x20000360
 80017c8:	080082c4 	.word	0x080082c4

080017cc <UpdateTetrisGame>:


static void UpdateTetrisGame(u32 timePassed){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 80017d4:	f107 0208 	add.w	r2, r7, #8
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	4826      	ldr	r0, [pc, #152]	; (8001878 <UpdateTetrisGame+0xac>)
 80017e0:	f7fe fd4e 	bl	8000280 <ReadAnalogStickChange>

	bool movingDown = true;
 80017e4:	2301      	movs	r3, #1
 80017e6:	75fb      	strb	r3, [r7, #23]

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80017e8:	2101      	movs	r1, #1
 80017ea:	4824      	ldr	r0, [pc, #144]	; (800187c <UpdateTetrisGame+0xb0>)
 80017ec:	f002 febc 	bl	8004568 <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	75bb      	strb	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	613b      	str	r3, [r7, #16]
	if(analogXChange > (twelveBitMax/3)){
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4a20      	ldr	r2, [pc, #128]	; (8001880 <UpdateTetrisGame+0xb4>)
 80017fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001802:	17db      	asrs	r3, r3, #31
 8001804:	1ad2      	subs	r2, r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	da02      	bge.n	8001812 <UpdateTetrisGame+0x46>
		Tetris_MoveRight();
 800180c:	f7ff fcae 	bl	800116c <Tetris_MoveRight>
 8001810:	e01c      	b.n	800184c <UpdateTetrisGame+0x80>
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <UpdateTetrisGame+0xb4>)
 8001816:	fb82 1203 	smull	r1, r2, r2, r3
 800181a:	17db      	asrs	r3, r3, #31
 800181c:	1a9a      	subs	r2, r3, r2
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	dd02      	ble.n	800182a <UpdateTetrisGame+0x5e>
		Tetris_MoveLeft();
 8001824:	f7ff fc84 	bl	8001130 <Tetris_MoveLeft>
 8001828:	e010      	b.n	800184c <UpdateTetrisGame+0x80>
	}
	else if(analogYChange > (twelveBitMax/3)){
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <UpdateTetrisGame+0xb4>)
 800182e:	fb82 1203 	smull	r1, r2, r2, r3
 8001832:	17db      	asrs	r3, r3, #31
 8001834:	1ad2      	subs	r2, r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	429a      	cmp	r2, r3
 800183a:	da07      	bge.n	800184c <UpdateTetrisGame+0x80>
		_movingDownResult = Tetris_MoveDown();
 800183c:	f7ff fc32 	bl	80010a4 <Tetris_MoveDown>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <UpdateTetrisGame+0xb8>)
 8001846:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 800184c:	7dbb      	ldrb	r3, [r7, #22]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d105      	bne.n	800185e <UpdateTetrisGame+0x92>
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <UpdateTetrisGame+0xbc>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <UpdateTetrisGame+0x92>
		Tetris_Rotate();
 800185a:	f7ff fbfd 	bl	8001058 <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <UpdateTetrisGame+0xbc>)
 8001860:	7dbb      	ldrb	r3, [r7, #22]
 8001862:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff6f 	bl	800174c <IncrementTetrisTimer>

}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200007fc 	.word	0x200007fc
 800187c:	48000400 	.word	0x48000400
 8001880:	55555556 	.word	0x55555556
 8001884:	2000002e 	.word	0x2000002e
 8001888:	2000035c 	.word	0x2000035c

0800188c <DrawTetrisGame>:

static void DrawTetrisGame(){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	gfxClearFrameBuffer();
 8001890:	f7fe fd42 	bl	8000318 <gfxClearFrameBuffer>

	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <DrawTetrisGame+0x94>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d003      	beq.n	80018a4 <DrawTetrisGame+0x18>
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <DrawTetrisGame+0x94>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d101      	bne.n	80018a8 <DrawTetrisGame+0x1c>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <DrawTetrisGame+0x1e>
 80018a8:	2300      	movs	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f9d3 	bl	8000c58 <Tetris_DrawTetrisBoard>

	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 80018b2:	2325      	movs	r3, #37	; 0x25
 80018b4:	2204      	movs	r2, #4
 80018b6:	2105      	movs	r1, #5
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7fe fd73 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <DrawTetrisGame+0x94>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d003      	beq.n	80018ce <DrawTetrisGame+0x42>
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <DrawTetrisGame+0x94>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d105      	bne.n	80018da <DrawTetrisGame+0x4e>
		/* update the area where the next block is shown */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 80018ce:	2335      	movs	r3, #53	; 0x35
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7fe fd65 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay == true){
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <DrawTetrisGame+0x98>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10a      	bne.n	80018f8 <DrawTetrisGame+0x6c>
		/* Update the new area of the screen with the new score.
		 * TODO: get actual length of score string instead of using 84 */
		WriteScoreToFrameBuffer();
 80018e2:	f7ff ff5b 	bl	800179c <WriteScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 80018e6:	2354      	movs	r3, #84	; 0x54
 80018e8:	2200      	movs	r2, #0
 80018ea:	2101      	movs	r1, #1
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7fe fd59 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <DrawTetrisGame+0x98>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
	}
	if(_newLevelToDisplay){
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <DrawTetrisGame+0x9c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00a      	beq.n	8001916 <DrawTetrisGame+0x8a>
		WriteLevelToFrameBuffer();
 8001900:	f7ff fe84 	bl	800160c <WriteLevelToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 8001904:	2354      	movs	r3, #84	; 0x54
 8001906:	2200      	movs	r2, #0
 8001908:	2102      	movs	r1, #2
 800190a:	2002      	movs	r0, #2
 800190c:	f7fe fd4a 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newLevelToDisplay = false;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <DrawTetrisGame+0x9c>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <DrawTetrisGame+0xa0>)
 8001918:	f7fe fe6c 	bl	80005f4 <gfxFinishDrawing>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000002e 	.word	0x2000002e
 8001924:	2000002c 	.word	0x2000002c
 8001928:	2000002d 	.word	0x2000002d
 800192c:	200005e0 	.word	0x200005e0

08001930 <InitCurrentLevelTetrisScores>:

static void InitCurrentLevelTetrisScores(){
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
	/* score setting function derived from information from https://tetris.fandom.com/wiki/Scoring */

	if(_currentLevel == 0){
 8001934:	4b3f      	ldr	r3, [pc, #252]	; (8001a34 <InitCurrentLevelTetrisScores+0x104>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10e      	bne.n	800195a <InitCurrentLevelTetrisScores+0x2a>
		_currentLevelTetrisScores[0] = 40;
 800193c:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 800193e:	2228      	movs	r2, #40	; 0x28
 8001940:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100;
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 8001944:	2264      	movs	r2, #100	; 0x64
 8001946:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300;
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 800194a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800194e:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200;
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 8001952:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001956:	60da      	str	r2, [r3, #12]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);

	}
}
 8001958:	e066      	b.n	8001a28 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 1){
 800195a:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <InitCurrentLevelTetrisScores+0x104>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10e      	bne.n	8001980 <InitCurrentLevelTetrisScores+0x50>
		_currentLevelTetrisScores[0] = 80;
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 8001964:	2250      	movs	r2, #80	; 0x50
 8001966:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 200;
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 800196a:	22c8      	movs	r2, #200	; 0xc8
 800196c:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 600;
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 8001970:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001974:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 2400;
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 8001978:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800197c:	60da      	str	r2, [r3, #12]
}
 800197e:	e053      	b.n	8001a28 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel >=2 && _currentLevel < 9){
 8001980:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <InitCurrentLevelTetrisScores+0x104>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d913      	bls.n	80019b0 <InitCurrentLevelTetrisScores+0x80>
 8001988:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <InitCurrentLevelTetrisScores+0x104>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d80f      	bhi.n	80019b0 <InitCurrentLevelTetrisScores+0x80>
		_currentLevelTetrisScores[0] = 120;
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 8001992:	2278      	movs	r2, #120	; 0x78
 8001994:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 300;
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 8001998:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800199c:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 900;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 80019a0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80019a4:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 3600;
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 80019a8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80019ac:	60da      	str	r2, [r3, #12]
}
 80019ae:	e03b      	b.n	8001a28 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 9){
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <InitCurrentLevelTetrisScores+0x104>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d110      	bne.n	80019da <InitCurrentLevelTetrisScores+0xaa>
		_currentLevelTetrisScores[0] = 400;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 80019ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019be:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 1000;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 80019c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019c6:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 3000;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 80019ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019ce:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 12000;
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 80019d2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80019d6:	60da      	str	r2, [r3, #12]
}
 80019d8:	e026      	b.n	8001a28 <InitCurrentLevelTetrisScores+0xf8>
		_currentLevelTetrisScores[0] = 40 * (_currentLevel + 1);
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <InitCurrentLevelTetrisScores+0x104>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 80019ec:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <InitCurrentLevelTetrisScores+0x104>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	2264      	movs	r2, #100	; 0x64
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 80019fe:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <InitCurrentLevelTetrisScores+0x104>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 8001a12:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <InitCurrentLevelTetrisScores+0x104>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <InitCurrentLevelTetrisScores+0x108>)
 8001a26:	60da      	str	r2, [r3, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	2000002f 	.word	0x2000002f
 8001a38:	20000368 	.word	0x20000368

08001a3c <CheckForHighScore>:


Tetris_Modes_StateTriggers CheckForHighScore(){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	if(TetrisHighScores_IsNewHighScore(_score) == true){
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <CheckForHighScore+0x24>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f951 	bl	8001cec <TetrisHighScores_IsNewHighScore>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d104      	bne.n	8001a5a <CheckForHighScore+0x1e>
		TetrisMain_SetStateMachineDataPointer(&_score);
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <CheckForHighScore+0x24>)
 8001a52:	f000 fa19 	bl	8001e88 <TetrisMain_SetStateMachineDataPointer>
		return GameOverNewHighScore;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e000      	b.n	8001a5c <CheckForHighScore+0x20>
	}
	else{
		return GameOver;
 8001a5a:	2302      	movs	r3, #2
	}
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000360 	.word	0x20000360

08001a64 <TetrisGame_Update>:


Tetris_Modes_StateTriggers TetrisGame_Update(u32 timePassed){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime(timePassed);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7fe ffd3 	bl	8000a18 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime>
	UpdateTetrisGame(timePassed);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff feaa 	bl	80017cc <UpdateTetrisGame>
	DrawTetrisGame();
 8001a78:	f7ff ff08 	bl	800188c <DrawTetrisGame>
	if(_movingDownResult == MoveDownResultGameOver){
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <TetrisGame_Update+0x34>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d103      	bne.n	8001a8c <TetrisGame_Update+0x28>
		return CheckForHighScore();
 8001a84:	f7ff ffda 	bl	8001a3c <CheckForHighScore>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	e000      	b.n	8001a8e <TetrisGame_Update+0x2a>
	}
	return NoChange;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000002e 	.word	0x2000002e

08001a9c <TetrisGame_Init>:



void TetrisGame_Init(){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af02      	add	r7, sp, #8
	Tetris_Init(
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <TetrisGame_Init+0x2c>)
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <TetrisGame_Init+0x30>)
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <TetrisGame_Init+0x34>)
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <TetrisGame_Init+0x38>)
 8001aae:	490a      	ldr	r1, [pc, #40]	; (8001ad8 <TetrisGame_Init+0x3c>)
 8001ab0:	4808      	ldr	r0, [pc, #32]	; (8001ad4 <TetrisGame_Init+0x38>)
 8001ab2:	f7ff f9a7 	bl	8000e04 <Tetris_Init>
			&gfxDrawAxisAlignedRect,
			&GetRandomNumberBetweenZeroAndSix,
			&OnLinesCleared,
			&OnGameOver);
	//TetrisHighScores_Init();
	srand(TetrisAccumulatedPlaytime_GetAccumulatedPlaytime());
 8001ab6:	f7fe ffa3 	bl	8000a00 <TetrisAccumulatedPlaytime_GetAccumulatedPlaytime>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f005 f97b 	bl	8006db8 <srand>

}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	0800173d 	.word	0x0800173d
 8001acc:	08001685 	.word	0x08001685
 8001ad0:	080015a1 	.word	0x080015a1
 8001ad4:	08000859 	.word	0x08000859
 8001ad8:	080015cd 	.word	0x080015cd

08001adc <TetrisGame_OnEnter>:

void TetrisGame_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
	if(previousState == LevelSelect || previousState == NoState){
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <TetrisGame_OnEnter+0x18>
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d103      	bne.n	8001afc <TetrisGame_OnEnter+0x20>
		_startLevel = *((u8*)stateMachineDataPtr);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <TetrisGame_OnEnter+0x54>)
 8001afa:	701a      	strb	r2, [r3, #0]
	}
	SetLevel(_startLevel);
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <TetrisGame_OnEnter+0x54>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fd9d 	bl	8001640 <SetLevel>
	Tetris_ResetTetrisBoard();
 8001b06:	f7ff f96d 	bl	8000de4 <Tetris_ResetTetrisBoard>
	InitCurrentLevelTetrisScores();
 8001b0a:	f7ff ff11 	bl	8001930 <InitCurrentLevelTetrisScores>
	_movingDownResult = Settled;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <TetrisGame_OnEnter+0x58>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	701a      	strb	r2, [r3, #0]
	_score = 0;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <TetrisGame_OnEnter+0x5c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
	_newScoreToDisplay = true;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <TetrisGame_OnEnter+0x60>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
	_newLevelToDisplay = true;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <TetrisGame_OnEnter+0x64>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000364 	.word	0x20000364
 8001b34:	2000002e 	.word	0x2000002e
 8001b38:	20000360 	.word	0x20000360
 8001b3c:	2000002c 	.word	0x2000002c
 8001b40:	2000002d 	.word	0x2000002d

08001b44 <TetrisGame_OnExit>:



void TetrisGame_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <TetrisGame_OnExit+0x20>)
 8001b52:	f7fe fedd 	bl	8000910 <ClearScreen>
	TetrisPersistantData_SaveAllPersistantData();
 8001b56:	f000 faa7 	bl	80020a8 <TetrisPersistantData_SaveAllPersistantData>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200005e0 	.word	0x200005e0

08001b68 <SetHighScoreCellSize>:
		{{'c','p','u'}, 5000},
		{{'c','p','u'}, 2500},
};
static u32 _highScoreCellSize = 0;

static void SetHighScoreCellSize(){
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	u32 size = sizeof(HighScore);
 8001b6e:	2308      	movs	r3, #8
 8001b70:	607b      	str	r3, [r7, #4]
	_highScoreCellSize = size;
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <SetHighScoreCellSize+0x38>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6013      	str	r3, [r2, #0]

	while(_highScoreCellSize % 4 != 0)
 8001b78:	e004      	b.n	8001b84 <SetHighScoreCellSize+0x1c>
		_highScoreCellSize++;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <SetHighScoreCellSize+0x38>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <SetHighScoreCellSize+0x38>)
 8001b82:	6013      	str	r3, [r2, #0]
	while(_highScoreCellSize % 4 != 0)
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <SetHighScoreCellSize+0x38>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f4      	bne.n	8001b7a <SetHighScoreCellSize+0x12>

}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000378 	.word	0x20000378

08001ba4 <LoadHighScores>:
static void LoadHighScores(HighScore* output, u32 startAddress){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	e026      	b.n	8001c02 <LoadHighScores+0x5e>
		HighScore* hs = startAddress + (i * _highScoreCellSize);
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <LoadHighScores+0x74>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	fb03 f202 	mul.w	r2, r3, r2
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
		output[i].Initials[0] = hs->Initials[0];
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	7812      	ldrb	r2, [r2, #0]
 8001bd0:	701a      	strb	r2, [r3, #0]
		output[i].Initials[1] = hs->Initials[1];
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	7852      	ldrb	r2, [r2, #1]
 8001bde:	705a      	strb	r2, [r3, #1]
		output[i].Initials[2] = hs->Initials[2];
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	7892      	ldrb	r2, [r2, #2]
 8001bec:	709a      	strb	r2, [r3, #2]
		output[i].Score = hs->Score;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	6852      	ldr	r2, [r2, #4]
 8001bfa:	605a      	str	r2, [r3, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d9d5      	bls.n	8001bb4 <LoadHighScores+0x10>
	}

}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000378 	.word	0x20000378

08001c1c <SaveSingleHighScore>:

static void SaveSingleHighScore(HighScore* input, u32 address){
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e016      	b.n	8001c5a <SaveSingleHighScore+0x3e>
		u32 wordToWrite = *((u32*)input + i);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address + (i*4), wordToWrite);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	18d1      	adds	r1, r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2200      	movs	r2, #0
 8001c46:	461c      	mov	r4, r3
 8001c48:	4615      	mov	r5, r2
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f002 f940 	bl	8003ed4 <HAL_FLASH_Program>
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SaveSingleHighScore+0x54>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	089a      	lsrs	r2, r3, #2
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d8e2      	bhi.n	8001c2c <SaveSingleHighScore+0x10>
	}
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	20000378 	.word	0x20000378

08001c74 <SaveHighScores>:

static void SaveHighScores(HighScore* input, u32 addressToWrite){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e00f      	b.n	8001ca4 <SaveHighScores+0x30>
		SaveSingleHighScore(&input[i], addressToWrite);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ffc4 	bl	8001c1c <SaveSingleHighScore>
		addressToWrite += _highScoreCellSize;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <SaveHighScores+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	603b      	str	r3, [r7, #0]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d9ec      	bls.n	8001c84 <SaveHighScores+0x10>
	}

}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000378 	.word	0x20000378

08001cb8 <TetrisHighScores_Load>:

u32 TetrisHighScores_Load(u32 startAddress){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
				{{'J','i','m'}, 25000},
				{{'J','i','m'}, 5000},
		};
	SaveHighScores(hs);
	*/
	SetHighScoreCellSize();
 8001cc0:	f7ff ff52 	bl	8001b68 <SetHighScoreCellSize>
	LoadHighScores(_highScores, startAddress);
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <TetrisHighScores_Load+0x2c>)
 8001cc8:	f7ff ff6c 	bl	8001ba4 <LoadHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <TetrisHighScores_Load+0x30>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	441a      	add	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000030 	.word	0x20000030
 8001ce8:	20000378 	.word	0x20000378

08001cec <TetrisHighScores_IsNewHighScore>:


bool TetrisHighScores_IsNewHighScore(u32 potentialHighScore){
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e00c      	b.n	8001d14 <TetrisHighScores_IsNewHighScore+0x28>
		if(potentialHighScore > _highScores[i].Score){
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <TetrisHighScores_IsNewHighScore+0x3c>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d901      	bls.n	8001d0e <TetrisHighScores_IsNewHighScore+0x22>
			return true;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e006      	b.n	8001d1c <TetrisHighScores_IsNewHighScore+0x30>
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3301      	adds	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d9ef      	bls.n	8001cfa <TetrisHighScores_IsNewHighScore+0xe>
		}
	}
	return false;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20000030 	.word	0x20000030

08001d2c <TetrisHighScores_GetHighScoreAtIndex>:

HighScore* TetrisHighScores_GetHighScoreAtIndex(u8 atIndex){
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
	return &_highScores[atIndex];
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <TetrisHighScores_GetHighScoreAtIndex+0x20>)
 8001d3c:	4413      	add	r3, r2
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000030 	.word	0x20000030

08001d50 <TetrisHighScores_Save>:


u32 TetrisHighScores_Save(u32 startAddress){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	SetHighScoreCellSize();
 8001d58:	f7ff ff06 	bl	8001b68 <SetHighScoreCellSize>

	SaveHighScores(_highScores, startAddress);
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4807      	ldr	r0, [pc, #28]	; (8001d7c <TetrisHighScores_Save+0x2c>)
 8001d60:	f7ff ff88 	bl	8001c74 <SaveHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <TetrisHighScores_Save+0x30>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000030 	.word	0x20000030
 8001d80:	20000378 	.word	0x20000378

08001d84 <TetrisHighScores_AddHighScore>:

u8 TetrisHighScores_AddHighScore(u32 highScore){
 8001d84:	b480      	push	{r7}
 8001d86:	b08b      	sub	sp, #44	; 0x2c
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

	u8 rval = 255;
 8001d8c:	23ff      	movs	r3, #255	; 0xff
 8001d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HighScore cachedHighScore;
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
 8001d96:	e046      	b.n	8001e26 <TetrisHighScores_AddHighScore+0xa2>
		HighScore* thisHighScore = &_highScores[i];
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <TetrisHighScores_AddHighScore+0xb8>)
 8001d9e:	4413      	add	r3, r2
 8001da0:	61fb      	str	r3, [r7, #28]

		if(highScore > thisHighScore->Score && rval == 255){
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d919      	bls.n	8001de0 <TetrisHighScores_AddHighScore+0x5c>
 8001dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001db0:	2bff      	cmp	r3, #255	; 0xff
 8001db2:	d115      	bne.n	8001de0 <TetrisHighScores_AddHighScore+0x5c>
			cachedHighScore = *thisHighScore;
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dbe:	e883 0003 	stmia.w	r3, {r0, r1}
			rval = i;
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			thisHighScore->Score = highScore;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = 'A';
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	2241      	movs	r2, #65	; 0x41
 8001dd2:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = 'A';
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2241      	movs	r2, #65	; 0x41
 8001dd8:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = 'A';
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	2241      	movs	r2, #65	; 0x41
 8001dde:	709a      	strb	r2, [r3, #2]

		}
		if(i > rval){
 8001de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d91a      	bls.n	8001e20 <TetrisHighScores_AddHighScore+0x9c>
			HighScore cachedHighScore2 = *thisHighScore;
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001df4:	e883 0003 	stmia.w	r3, {r0, r1}
			thisHighScore->Score = cachedHighScore.Score;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = cachedHighScore.Initials[0];
 8001dfe:	7d3a      	ldrb	r2, [r7, #20]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = cachedHighScore.Initials[1];
 8001e04:	7d7a      	ldrb	r2, [r7, #21]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = cachedHighScore.Initials[2];
 8001e0a:	7dba      	ldrb	r2, [r7, #22]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	709a      	strb	r2, [r3, #2]
			cachedHighScore = cachedHighScore2;
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	f107 020c 	add.w	r2, r7, #12
 8001e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e1c:	e883 0003 	stmia.w	r3, {r0, r1}
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	3301      	adds	r3, #1
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d9b5      	bls.n	8001d98 <TetrisHighScores_AddHighScore+0x14>

		}

	}
	return rval;
 8001e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	372c      	adds	r7, #44	; 0x2c
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	20000030 	.word	0x20000030

08001e40 <TetrisLevelSelect_Update>:


#include "TetrisLevelSelectScreen.h"
#include "LcdGraphics.h"

Tetris_Modes_StateTriggers TetrisLevelSelect_Update(u32 TimePassed){
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

}
 8001e48:	bf00      	nop
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <TetrisLevelSelect_OnEnter>:

void TetrisLevelSelect_Init(){

}

void TetrisLevelSelect_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]

}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <TetrisLevelSelect_OnExit>:

void TetrisLevelSelect_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]

}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <TetrisMain_SetStateMachineDataPointer>:
#define ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS 1


static void* _stateMachineDataPointer = 0;

void TetrisMain_SetStateMachineDataPointer(void* dataPtr){
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	_stateMachineDataPointer = dataPtr;
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <TetrisMain_SetStateMachineDataPointer+0x1c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	2000037c 	.word	0x2000037c

08001ea8 <TetrisMain_Init>:

static State _states[NumStates];
static Tetris_Modes_States _currentState = Playing;


void TetrisMain_Init(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
	TetrisPersistantData_LoadAllPeristantData();
 8001eae:	f000 f8e9 	bl	8002084 <TetrisPersistantData_LoadAllPeristantData>
	//TetrisPersistantData_SaveAllPersistantData();
	TetrisGame_Init();
 8001eb2:	f7ff fdf3 	bl	8001a9c <TetrisGame_Init>
	u8 startLevel = 5;
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	71fb      	strb	r3, [r7, #7]
	TetrisGame_OnEnter(&startLevel,NoState);
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fe0c 	bl	8001adc <TetrisGame_OnEnter>
	_states[Playing].NumTransitions = PLAYING_NUM_TRANSITIONS;
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]
	_states[Playing].Transitions = _playingTransitions;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001ece:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <TetrisMain_Init+0xa8>)
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
	_states[Playing].UpdateFunction = &TetrisGame_Update;
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <TetrisMain_Init+0xac>)
 8001ed6:	615a      	str	r2, [r3, #20]
	_states[Playing].OnEnterFunction = &TetrisGame_OnEnter;
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <TetrisMain_Init+0xb0>)
 8001edc:	619a      	str	r2, [r3, #24]
	_states[Playing].OnExitFunction = &TetrisGame_OnExit;
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <TetrisMain_Init+0xb4>)
 8001ee2:	61da      	str	r2, [r3, #28]

	_states[LevelSelect].NumTransitions = LEVEL_SELECT_NUM_TRANSITIONS;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	731a      	strb	r2, [r3, #12]
	_states[LevelSelect].Transitions = _levelSelectTransitions;
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <TetrisMain_Init+0xb8>)
 8001eee:	611a      	str	r2, [r3, #16]
	_states[LevelSelect].UpdateFunction = &TetrisLevelSelect_Update;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <TetrisMain_Init+0xbc>)
 8001ef4:	601a      	str	r2, [r3, #0]
	_states[LevelSelect].OnEnterFunction = &TetrisLevelSelect_OnEnter;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <TetrisMain_Init+0xc0>)
 8001efa:	605a      	str	r2, [r3, #4]
	_states[LevelSelect].OnExitFunction = &TetrisLevelSelect_OnExit;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <TetrisMain_Init+0xc4>)
 8001f00:	609a      	str	r2, [r3, #8]

	_states[PlayAgainDialogue].NumTransitions = PLAY_AGAIN_SCREEN_NUM_TRANSITIONS;
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	_states[PlayAgainDialogue].Transitions = _playAgainScreenTransitions;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <TetrisMain_Init+0xc8>)
 8001f0e:	639a      	str	r2, [r3, #56]	; 0x38
	_states[PlayAgainDialogue].UpdateFunction = &TetrisPlayAgain_Update;
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <TetrisMain_Init+0xcc>)
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
	_states[PlayAgainDialogue].OnEnterFunction = &TetrisPlayAgain_OnEnter;
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f18:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <TetrisMain_Init+0xd0>)
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
	_states[PlayAgainDialogue].OnExitFunction = &TetrisPlayAgain_OnExit;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <TetrisMain_Init+0xd4>)
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30

	_states[EnterNewHighScoreScreen].NumTransitions = ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS;
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	_states[EnterNewHighScoreScreen].Transitions = _enterNewHighScoreScreenTransitions;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <TetrisMain_Init+0xd8>)
 8001f2e:	64da      	str	r2, [r3, #76]	; 0x4c
	_states[EnterNewHighScoreScreen].UpdateFunction = &TetrisEnterHighScore_Update;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <TetrisMain_Init+0xdc>)
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c
	_states[EnterNewHighScoreScreen].OnEnterFunction = &TetrisEnterHighScore_OnEnter;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <TetrisMain_Init+0xe0>)
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
	_states[EnterNewHighScoreScreen].OnExitFunction = &TetrisEnterHighScore_OnExit;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <TetrisMain_Init+0xa4>)
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <TetrisMain_Init+0xe4>)
 8001f40:	645a      	str	r2, [r3, #68]	; 0x44


}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000380 	.word	0x20000380
 8001f50:	080089a8 	.word	0x080089a8
 8001f54:	08001a65 	.word	0x08001a65
 8001f58:	08001add 	.word	0x08001add
 8001f5c:	08001b45 	.word	0x08001b45
 8001f60:	080089a4 	.word	0x080089a4
 8001f64:	08001e41 	.word	0x08001e41
 8001f68:	08001e57 	.word	0x08001e57
 8001f6c:	08001e6f 	.word	0x08001e6f
 8001f70:	080089ac 	.word	0x080089ac
 8001f74:	080020ed 	.word	0x080020ed
 8001f78:	08002125 	.word	0x08002125
 8001f7c:	08002171 	.word	0x08002171
 8001f80:	080089b0 	.word	0x080089b0
 8001f84:	080012d5 	.word	0x080012d5
 8001f88:	080014bd 	.word	0x080014bd
 8001f8c:	0800157d 	.word	0x0800157d

08001f90 <TetrisMain_Update>:

void TetrisMain_Update(u32 timePassed){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	Tetris_Modes_StateTriggers updateResult = _states[_currentState].UpdateFunction(timePassed);
 8001f98:	4b37      	ldr	r3, [pc, #220]	; (8002078 <TetrisMain_Update+0xe8>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4a37      	ldr	r2, [pc, #220]	; (800207c <TetrisMain_Update+0xec>)
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	76fb      	strb	r3, [r7, #27]
	if(updateResult == NoChange){
 8001fb4:	7efb      	ldrb	r3, [r7, #27]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d059      	beq.n	800206e <TetrisMain_Update+0xde>
		return;
	}
	u32 numTransitions = _states[_currentState].NumTransitions;
 8001fba:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <TetrisMain_Update+0xe8>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4a2e      	ldr	r2, [pc, #184]	; (800207c <TetrisMain_Update+0xec>)
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	330c      	adds	r3, #12
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	617b      	str	r3, [r7, #20]
	Transition* transitions = _states[_currentState].Transitions;
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <TetrisMain_Update+0xe8>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <TetrisMain_Update+0xec>)
 8001fda:	460b      	mov	r3, r1
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3310      	adds	r3, #16
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	613b      	str	r3, [r7, #16]
	for(i32 i=0; i<numTransitions; i++){
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e039      	b.n	8002064 <TetrisMain_Update+0xd4>
		if(transitions[i].trigger == updateResult){
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	7efa      	ldrb	r2, [r7, #27]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d12e      	bne.n	800205e <TetrisMain_Update+0xce>
			Tetris_Modes_States last = _currentState;
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <TetrisMain_Update+0xe8>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	73fb      	strb	r3, [r7, #15]
			_states[_currentState].OnExitFunction(_stateMachineDataPointer, transitions[i].destination);
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <TetrisMain_Update+0xe8>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4619      	mov	r1, r3
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <TetrisMain_Update+0xec>)
 800200e:	460b      	mov	r3, r1
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3308      	adds	r3, #8
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a18      	ldr	r2, [pc, #96]	; (8002080 <TetrisMain_Update+0xf0>)
 800201e:	6810      	ldr	r0, [r2, #0]
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	0052      	lsls	r2, r2, #1
 8002024:	6939      	ldr	r1, [r7, #16]
 8002026:	440a      	add	r2, r1
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	4611      	mov	r1, r2
 800202c:	4798      	blx	r3
			_currentState = transitions[i].destination;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <TetrisMain_Update+0xe8>)
 800203a:	701a      	strb	r2, [r3, #0]
			_states[_currentState].OnEnterFunction(_stateMachineDataPointer, last);
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <TetrisMain_Update+0xe8>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <TetrisMain_Update+0xec>)
 8002044:	460b      	mov	r3, r1
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <TetrisMain_Update+0xf0>)
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	7bf9      	ldrb	r1, [r7, #15]
 8002058:	4610      	mov	r0, r2
 800205a:	4798      	blx	r3
			return;
 800205c:	e008      	b.n	8002070 <TetrisMain_Update+0xe0>
	for(i32 i=0; i<numTransitions; i++){
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3301      	adds	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8c1      	bhi.n	8001ff0 <TetrisMain_Update+0x60>
 800206c:	e000      	b.n	8002070 <TetrisMain_Update+0xe0>
		return;
 800206e:	bf00      	nop
		}
	}
}
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000058 	.word	0x20000058
 800207c:	20000380 	.word	0x20000380
 8002080:	2000037c 	.word	0x2000037c

08002084 <TetrisPersistantData_LoadAllPeristantData>:
#include "TetrisHighScores.h"
#include "TetrisAccumulatedPlaytime.h"
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

void TetrisPersistantData_LoadAllPeristantData(){
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
	u32 nextAddress = TetrisHighScores_Load(FINAL_PAGE_START_ADDRESS);
 800208a:	4806      	ldr	r0, [pc, #24]	; (80020a4 <TetrisPersistantData_LoadAllPeristantData+0x20>)
 800208c:	f7ff fe14 	bl	8001cb8 <TetrisHighScores_Load>
 8002090:	6078      	str	r0, [r7, #4]
	nextAddress = TetrisAccumulatedPlaytime_Load(nextAddress);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fc8c 	bl	80009b0 <TetrisAccumulatedPlaytime_Load>
 8002098:	6078      	str	r0, [r7, #4]

}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	0800f800 	.word	0x0800f800

080020a8 <TetrisPersistantData_SaveAllPersistantData>:
void TetrisPersistantData_SaveAllPersistantData(){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80020ae:	f001 ff81 	bl	8003fb4 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	613b      	str	r3, [r7, #16]
	eraseInit.PageAddress = FINAL_PAGE_START_ADDRESS;
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <TetrisPersistantData_SaveAllPersistantData+0x40>)
 80020b8:	60fb      	str	r3, [r7, #12]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
 80020be:	1d3a      	adds	r2, r7, #4
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 f838 	bl	800413c <HAL_FLASHEx_Erase>

	u32 nextAddress = TetrisHighScores_Save(FINAL_PAGE_START_ADDRESS);
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <TetrisPersistantData_SaveAllPersistantData+0x40>)
 80020ce:	f7ff fe3f 	bl	8001d50 <TetrisHighScores_Save>
 80020d2:	6178      	str	r0, [r7, #20]
	nextAddress = TetrisAccumulatedPlaytime_Save(nextAddress);
 80020d4:	6978      	ldr	r0, [r7, #20]
 80020d6:	f7fe fc7d 	bl	80009d4 <TetrisAccumulatedPlaytime_Save>
 80020da:	6178      	str	r0, [r7, #20]

	HAL_FLASH_Lock();
 80020dc:	f001 ff90 	bl	8004000 <HAL_FLASH_Lock>

}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	0800f800 	.word	0x0800f800

080020ec <TetrisPlayAgain_Update>:
extern  ADC_HandleTypeDef hadc2;
extern LCD_PCD8544_screen_t gLcdScreen;

static u8 _startLevel;

Tetris_Modes_StateTriggers TetrisPlayAgain_Update(u32 TimePassed){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

	/* Will have option to go back to main menu.  67 */
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80020f4:	2101      	movs	r1, #1
 80020f6:	4809      	ldr	r0, [pc, #36]	; (800211c <TetrisPlayAgain_Update+0x30>)
 80020f8:	f002 fa36 	bl	8004568 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]
	if(buttonBState == GPIO_PIN_SET){
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d104      	bne.n	8002110 <TetrisPlayAgain_Update+0x24>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <TetrisPlayAgain_Update+0x34>)
 8002108:	f7ff febe 	bl	8001e88 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <TetrisPlayAgain_Update+0x26>
	}

	return NoChange;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	48000400 	.word	0x48000400
 8002120:	200003e4 	.word	0x200003e4

08002124 <TetrisPlayAgain_OnEnter>:

void TetrisPlayAgain_Init(){

}

void TetrisPlayAgain_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
	_startLevel = *((u8*)stateMachineDataPtr);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <TetrisPlayAgain_OnEnter+0x40>)
 8002136:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 8002138:	f7fe f8ee 	bl	8000318 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 800213c:	f7fe fbb8 	bl	80008b0 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8002140:	2354      	movs	r3, #84	; 0x54
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2000      	movs	r0, #0
 8002148:	f7fe f92c 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxWriteTextLineToFrameBuffer(0,0,"Play Again?");
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <TetrisPlayAgain_OnEnter+0x44>)
 800214e:	2100      	movs	r1, #0
 8002150:	2000      	movs	r0, #0
 8002152:	f7fe fb03 	bl	800075c <gfxWriteTextLineToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <TetrisPlayAgain_OnEnter+0x48>)
 8002158:	f7fe fa4c 	bl	80005f4 <gfxFinishDrawing>

}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200003e4 	.word	0x200003e4
 8002168:	080082c8 	.word	0x080082c8
 800216c:	200005e0 	.word	0x200005e0

08002170 <TetrisPlayAgain_OnExit>:

void TetrisPlayAgain_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <TetrisPlayAgain_OnExit+0x1c>)
 800217e:	f7fe fbc7 	bl	8000910 <ClearScreen>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200005e0 	.word	0x200005e0

08002190 <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 8002198:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800219c:	2100      	movs	r1, #0
 800219e:	481e      	ldr	r0, [pc, #120]	; (8002218 <LCD_PCD8544_init+0x88>)
 80021a0:	f004 fe02 	bl	8006da8 <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f976 	bl	800249e <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f98e 	bl	80024d4 <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f9ab 	bl	8002514 <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	7bb9      	ldrb	r1, [r7, #14]
 80021c2:	2301      	movs	r3, #1
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8ae 	bl	8002326 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 80021ca:	2103      	movs	r1, #3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f939 	bl	8002444 <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 80021d2:	2140      	movs	r1, #64	; 0x40
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f94e 	bl	8002476 <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 80021da:	2102      	movs	r1, #2
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f918 	bl	8002412 <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	7bb9      	ldrb	r1, [r7, #14]
 80021e6:	2300      	movs	r3, #0
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f89c 	bl	8002326 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2101      	movs	r1, #1
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8c7 	bl	8002386 <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f8e5 	bl	80023cc <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f996 	bl	8002534 <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f845 	bl	8002298 <LCD_PCD8544_clear_ram>
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200003e8 	.word	0x200003e8

0800221c <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	72fb      	strb	r3, [r7, #11]
 800222a:	4613      	mov	r3, r2
 800222c:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f94c 	bl	80024d4 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f969 	bl	8002514 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002242:	7dfa      	ldrb	r2, [r7, #23]
 8002244:	7db9      	ldrb	r1, [r7, #22]
 8002246:	2300      	movs	r3, #0
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f86c 	bl	8002326 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 800224e:	7abb      	ldrb	r3, [r7, #10]
 8002250:	461a      	mov	r2, r3
 8002252:	0052      	lsls	r2, r2, #1
 8002254:	4413      	add	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	b2da      	uxtb	r2, r3
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	4619      	mov	r1, r3
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f8b4 	bl	80023cc <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f965 	bl	8002534 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f942 	bl	80024f4 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f94f 	bl	8002514 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8002276:	8c3b      	ldrh	r3, [r7, #32]
 8002278:	461a      	mov	r2, r3
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f81f 	bl	80022c0 <LCD_PCD8544_LL_send_data>
 8002282:	4603      	mov	r3, r0
 8002284:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f954 	bl	8002534 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 800228c:	7d7b      	ldrb	r3, [r7, #21]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 80022a0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <LCD_PCD8544_clear_ram+0x24>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ffb5 	bl	800221c <LCD_PCD8544_write_bytes>
 80022b2:	4603      	mov	r3, r0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200003e8 	.word	0x200003e8

080022c0 <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	4613      	mov	r3, r2
 80022cc:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	2302      	movs	r3, #2
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	f003 fd63 	bl	8005da2 <HAL_SPI_Transmit>
 80022dc:	4603      	mov	r3, r0
 80022de:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	69d8      	ldr	r0, [r3, #28]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8c1b      	ldrh	r3, [r3, #32]
 80022ee:	2200      	movs	r2, #0
 80022f0:	4619      	mov	r1, r3
 80022f2:	f002 f951 	bl	8004598 <HAL_GPIO_WritePin>
	}
	return stat;
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 800230c:	2301      	movs	r3, #1
 800230e:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8002310:	89fa      	ldrh	r2, [r7, #14]
 8002312:	1cfb      	adds	r3, r7, #3
 8002314:	4619      	mov	r1, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffd2 	bl	80022c0 <LCD_PCD8544_LL_send_data>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	4608      	mov	r0, r1
 8002330:	4611      	mov	r1, r2
 8002332:	461a      	mov	r2, r3
 8002334:	4603      	mov	r3, r0
 8002336:	70fb      	strb	r3, [r7, #3]
 8002338:	460b      	mov	r3, r1
 800233a:	70bb      	strb	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	b25b      	sxtb	r3, r3
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	b25b      	sxtb	r3, r3
 800234c:	f043 0320 	orr.w	r3, r3, #32
 8002350:	b25a      	sxtb	r2, r3
 8002352:	78bb      	ldrb	r3, [r7, #2]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	b25b      	sxtb	r3, r3
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	b25b      	sxtb	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b25a      	sxtb	r2, r3
 8002362:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	b25b      	sxtb	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b25b      	sxtb	r3, r3
 8002370:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	4619      	mov	r1, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffc2 	bl	8002300 <LCD_PCD8544_LL_send_byte>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
 8002392:	4613      	mov	r3, r2
 8002394:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	b25b      	sxtb	r3, r3
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	b25b      	sxtb	r3, r3
 80023a2:	f043 0308 	orr.w	r3, r3, #8
 80023a6:	b25a      	sxtb	r2, r3
 80023a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b25b      	sxtb	r3, r3
 80023b6:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	4619      	mov	r1, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff9f 	bl	8002300 <LCD_PCD8544_LL_send_byte>
 80023c2:	4603      	mov	r3, r0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 80023f0:	78bb      	ldrb	r3, [r7, #2]
 80023f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	2202      	movs	r2, #2
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ff5c 	bl	80022c0 <LCD_PCD8544_LL_send_data>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 800241e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	b25b      	sxtb	r3, r3
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	b25b      	sxtb	r3, r3
 800242e:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff63 	bl	8002300 <LCD_PCD8544_LL_send_byte>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 8002450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	b25b      	sxtb	r3, r3
 800245a:	f043 0310 	orr.w	r3, r3, #16
 800245e:	b25b      	sxtb	r3, r3
 8002460:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ff4a 	bl	8002300 <LCD_PCD8544_LL_send_byte>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002488:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ff36 	bl	8002300 <LCD_PCD8544_LL_send_byte>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6858      	ldr	r0, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	891b      	ldrh	r3, [r3, #8]
 80024ae:	2200      	movs	r2, #0
 80024b0:	4619      	mov	r1, r3
 80024b2:	f002 f871 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 80024b6:	2001      	movs	r0, #1
 80024b8:	f000 fce2 	bl	8002e80 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6858      	ldr	r0, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	891b      	ldrh	r3, [r3, #8]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4619      	mov	r1, r3
 80024c8:	f002 f866 	bl	8004598 <HAL_GPIO_WritePin>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6958      	ldr	r0, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8b1b      	ldrh	r3, [r3, #24]
 80024e4:	2200      	movs	r2, #0
 80024e6:	4619      	mov	r1, r3
 80024e8:	f002 f856 	bl	8004598 <HAL_GPIO_WritePin>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6958      	ldr	r0, [r3, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	8b1b      	ldrh	r3, [r3, #24]
 8002504:	2201      	movs	r2, #1
 8002506:	4619      	mov	r1, r3
 8002508:	f002 f846 	bl	8004598 <HAL_GPIO_WritePin>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68d8      	ldr	r0, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8a1b      	ldrh	r3, [r3, #16]
 8002524:	2200      	movs	r2, #0
 8002526:	4619      	mov	r1, r3
 8002528:	f002 f836 	bl	8004598 <HAL_GPIO_WritePin>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68d8      	ldr	r0, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8a1b      	ldrh	r3, [r3, #16]
 8002544:	2201      	movs	r2, #1
 8002546:	4619      	mov	r1, r3
 8002548:	f002 f826 	bl	8004598 <HAL_GPIO_WritePin>
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002558:	f000 fc2c 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800255c:	f000 f83e 	bl	80025dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002560:	f000 f996 	bl	8002890 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002564:	f000 f900 	bl	8002768 <MX_SPI1_Init>
  MX_ADC2_Init();
 8002568:	f000 f890 	bl	800268c <MX_ADC2_Init>
  MX_TIM2_Init();
 800256c:	f000 f93a 	bl	80027e4 <MX_TIM2_Init>
  //HAL_ADCEx_Calibration_Start(&hadc2);



  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <main+0x7c>)
 8002572:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <main+0x80>)
 8002574:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <main+0x7c>)
 8002578:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800257c:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <main+0x7c>)
 8002580:	2208      	movs	r2, #8
 8002582:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <main+0x7c>)
 8002586:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800258a:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <main+0x7c>)
 800258e:	2202      	movs	r2, #2
 8002590:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <main+0x7c>)
 8002594:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002598:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <main+0x7c>)
 800259c:	2210      	movs	r2, #16
 800259e:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 80025a0:	480b      	ldr	r0, [pc, #44]	; (80025d0 <main+0x7c>)
 80025a2:	f7ff fdf5 	bl	8002190 <LCD_PCD8544_init>

    // LCD - welcome screen
  //static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80025a6:	2100      	movs	r1, #0
 80025a8:	480b      	ldr	r0, [pc, #44]	; (80025d8 <main+0x84>)
 80025aa:	f000 ffb0 	bl	800350e <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   srand(time(NULL));   // Initialization, should only be called once.
 80025ae:	2000      	movs	r0, #0
 80025b0:	f004 fc8e 	bl	8006ed0 <time>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 fbfe 	bl	8006db8 <srand>
   TetrisMain_Init();
 80025bc:	f7ff fc74 	bl	8001ea8 <TetrisMain_Init>



  while (1)
  {
	  TetrisMain_Update(50);
 80025c0:	2032      	movs	r0, #50	; 0x32
 80025c2:	f7ff fce5 	bl	8001f90 <TetrisMain_Update>
	  HAL_Delay(50);
 80025c6:	2032      	movs	r0, #50	; 0x32
 80025c8:	f000 fc5a 	bl	8002e80 <HAL_Delay>
	  TetrisMain_Update(50);
 80025cc:	e7f8      	b.n	80025c0 <main+0x6c>
 80025ce:	bf00      	nop
 80025d0:	200005e0 	.word	0x200005e0
 80025d4:	2000084c 	.word	0x2000084c
 80025d8:	200007fc 	.word	0x200007fc

080025dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b096      	sub	sp, #88	; 0x58
 80025e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025e6:	2228      	movs	r2, #40	; 0x28
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 fbdc 	bl	8006da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	611a      	str	r2, [r3, #16]
 800260e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002610:	2302      	movs	r3, #2
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002614:	2301      	movs	r3, #1
 8002616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002618:	2310      	movs	r3, #16
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800261c:	2302      	movs	r3, #2
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002620:	2300      	movs	r3, #0
 8002622:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002624:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002628:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800262a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800262e:	4618      	mov	r0, r3
 8002630:	f001 ffca 	bl	80045c8 <HAL_RCC_OscConfig>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800263a:	f000 f9a5 	bl	8002988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800263e:	230f      	movs	r3, #15
 8002640:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800264e:	2300      	movs	r3, #0
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f002 fff3 	bl	8005644 <HAL_RCC_ClockConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002664:	f000 f990 	bl	8002988 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800266c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002670:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	4618      	mov	r0, r3
 8002676:	f003 f9cb 	bl	8005a10 <HAL_RCCEx_PeriphCLKConfig>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002680:	f000 f982 	bl	8002988 <Error_Handler>
  }
}
 8002684:	bf00      	nop
 8002686:	3758      	adds	r7, #88	; 0x58
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002692:	463b      	mov	r3, r7
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
 80026a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80026a2:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026a4:	4a2f      	ldr	r2, [pc, #188]	; (8002764 <MX_ADC2_Init+0xd8>)
 80026a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026a8:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80026ae:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026b4:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80026ba:	4b29      	ldr	r3, [pc, #164]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026e2:	2202      	movs	r2, #2
 80026e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026f0:	2204      	movs	r2, #4
 80026f2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <MX_ADC2_Init+0xd4>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002700:	4817      	ldr	r0, [pc, #92]	; (8002760 <MX_ADC2_Init+0xd4>)
 8002702:	f000 fbe1 	bl	8002ec8 <HAL_ADC_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800270c:	f000 f93c 	bl	8002988 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002710:	2302      	movs	r3, #2
 8002712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002714:	2301      	movs	r3, #1
 8002716:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002728:	463b      	mov	r3, r7
 800272a:	4619      	mov	r1, r3
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <MX_ADC2_Init+0xd4>)
 800272e:	f000 ff61 	bl	80035f4 <HAL_ADC_ConfigChannel>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8002738:	f000 f926 	bl	8002988 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800273c:	2303      	movs	r3, #3
 800273e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002740:	2302      	movs	r3, #2
 8002742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002744:	463b      	mov	r3, r7
 8002746:	4619      	mov	r1, r3
 8002748:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_ADC2_Init+0xd4>)
 800274a:	f000 ff53 	bl	80035f4 <HAL_ADC_ConfigChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8002754:	f000 f918 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002758:	bf00      	nop
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200007fc 	.word	0x200007fc
 8002764:	50000100 	.word	0x50000100

08002768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <MX_SPI1_Init+0x74>)
 800276e:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <MX_SPI1_Init+0x78>)
 8002770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <MX_SPI1_Init+0x74>)
 8002774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800277a:	4b18      	ldr	r3, [pc, #96]	; (80027dc <MX_SPI1_Init+0x74>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <MX_SPI1_Init+0x74>)
 8002782:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002786:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <MX_SPI1_Init+0x74>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <MX_SPI1_Init+0x74>)
 8002790:	2200      	movs	r2, #0
 8002792:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <MX_SPI1_Init+0x74>)
 8002796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <MX_SPI1_Init+0x74>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_SPI1_Init+0x74>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_SPI1_Init+0x74>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <MX_SPI1_Init+0x74>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_SPI1_Init+0x74>)
 80027b6:	2207      	movs	r2, #7
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <MX_SPI1_Init+0x74>)
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_SPI1_Init+0x74>)
 80027c2:	2208      	movs	r2, #8
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <MX_SPI1_Init+0x74>)
 80027c8:	f003 fa48 	bl	8005c5c <HAL_SPI_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80027d2:	f000 f8d9 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000084c 	.word	0x2000084c
 80027e0:	40013000 	.word	0x40013000

080027e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f6:	463b      	mov	r3, r7
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
 8002804:	615a      	str	r2, [r3, #20]
 8002806:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <MX_TIM2_Init+0xa8>)
 800280a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800280e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <MX_TIM2_Init+0xa8>)
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <MX_TIM2_Init+0xa8>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <MX_TIM2_Init+0xa8>)
 800281e:	f04f 32ff 	mov.w	r2, #4294967295
 8002822:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <MX_TIM2_Init+0xa8>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <MX_TIM2_Init+0xa8>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002830:	4816      	ldr	r0, [pc, #88]	; (800288c <MX_TIM2_Init+0xa8>)
 8002832:	f003 fd89 	bl	8006348 <HAL_TIM_PWM_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800283c:	f000 f8a4 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002848:	f107 031c 	add.w	r3, r7, #28
 800284c:	4619      	mov	r1, r3
 800284e:	480f      	ldr	r0, [pc, #60]	; (800288c <MX_TIM2_Init+0xa8>)
 8002850:	f004 fa04 	bl	8006c5c <HAL_TIMEx_MasterConfigSynchronization>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800285a:	f000 f895 	bl	8002988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800285e:	2360      	movs	r3, #96	; 0x60
 8002860:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800286e:	463b      	mov	r3, r7
 8002870:	2204      	movs	r2, #4
 8002872:	4619      	mov	r1, r3
 8002874:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_TIM2_Init+0xa8>)
 8002876:	f003 fdbf 	bl	80063f8 <HAL_TIM_PWM_ConfigChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002880:	f000 f882 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	3728      	adds	r7, #40	; 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	200008b0 	.word	0x200008b0

08002890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4a35      	ldr	r2, [pc, #212]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028b0:	6153      	str	r3, [r2, #20]
 80028b2:	4b33      	ldr	r3, [pc, #204]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	4a2f      	ldr	r2, [pc, #188]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c8:	6153      	str	r3, [r2, #20]
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4a29      	ldr	r2, [pc, #164]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e0:	6153      	str	r3, [r2, #20]
 80028e2:	4b27      	ldr	r3, [pc, #156]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	210a      	movs	r1, #10
 80028f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f6:	f001 fe4f 	bl	8004598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2110      	movs	r1, #16
 80028fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002902:	f001 fe49 	bl	8004598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8002906:	231a      	movs	r3, #26
 8002908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290a:	2301      	movs	r3, #1
 800290c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	4619      	mov	r1, r3
 800291c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002920:	f001 fcb0 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002924:	f248 0304 	movw	r3, #32772	; 0x8004
 8002928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002936:	2307      	movs	r3, #7
 8002938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 030c 	add.w	r3, r7, #12
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002944:	f001 fc9e 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 8002948:	2301      	movs	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800294c:	2300      	movs	r3, #0
 800294e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002950:	2302      	movs	r3, #2
 8002952:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	4619      	mov	r1, r3
 800295a:	480a      	ldr	r0, [pc, #40]	; (8002984 <MX_GPIO_Init+0xf4>)
 800295c:	f001 fc92 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = ANALOGUE_STICK_BUTTON_Pin;
 8002960:	2302      	movs	r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANALOGUE_STICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	4619      	mov	r1, r3
 8002972:	4804      	ldr	r0, [pc, #16]	; (8002984 <MX_GPIO_Init+0xf4>)
 8002974:	f001 fc86 	bl	8004284 <HAL_GPIO_Init>

}
 8002978:	bf00      	nop
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	48000400 	.word	0x48000400

08002988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800298c:	b672      	cpsid	i
}
 800298e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002990:	e7fe      	b.n	8002990 <Error_Handler+0x8>
	...

08002994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_MspInit+0x4c>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_MspInit+0x4c>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6193      	str	r3, [r2, #24]
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_MspInit+0x4c>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_MspInit+0x4c>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_MspInit+0x4c>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	61d3      	str	r3, [r2, #28]
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_MspInit+0x4c>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	210f      	movs	r1, #15
 80029ce:	f06f 0001 	mvn.w	r0, #1
 80029d2:	f001 fa56 	bl	8003e82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_ADC_MspInit+0x74>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d124      	bne.n	8002a50 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_ADC_MspInit+0x78>)
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_ADC_MspInit+0x78>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6153      	str	r3, [r2, #20]
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_ADC_MspInit+0x78>)
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_ADC_MspInit+0x78>)
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_ADC_MspInit+0x78>)
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	6153      	str	r3, [r2, #20]
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_ADC_MspInit+0x78>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 8002a36:	2360      	movs	r3, #96	; 0x60
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f001 fc1a 	bl	8004284 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	50000100 	.word	0x50000100
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <HAL_SPI_MspInit+0xb4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d144      	bne.n	8002b0c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a82:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <HAL_SPI_MspInit+0xb8>)
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <HAL_SPI_MspInit+0xb8>)
 8002a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a8c:	6193      	str	r3, [r2, #24]
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_SPI_MspInit+0xb8>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <HAL_SPI_MspInit+0xb8>)
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_SPI_MspInit+0xb8>)
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	6153      	str	r3, [r2, #20]
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_SPI_MspInit+0xb8>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_SPI_MspInit+0xb8>)
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_SPI_MspInit+0xb8>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6153      	str	r3, [r2, #20]
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_SPI_MspInit+0xb8>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ada:	2305      	movs	r3, #5
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae8:	f001 fbcc 	bl	8004284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aec:	2308      	movs	r3, #8
 8002aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002afc:	2305      	movs	r3, #5
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4619      	mov	r1, r3
 8002b06:	4805      	ldr	r0, [pc, #20]	; (8002b1c <HAL_SPI_MspInit+0xbc>)
 8002b08:	f001 fbbc 	bl	8004284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b0c:	bf00      	nop
 8002b0e:	3728      	adds	r7, #40	; 0x28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40013000 	.word	0x40013000
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	48000400 	.word	0x48000400

08002b20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d10b      	bne.n	8002b4a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_TIM_PWM_MspInit+0x38>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <HAL_TIM_PWM_MspInit+0x38>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	61d3      	str	r3, [r2, #28]
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_TIM_PWM_MspInit+0x38>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000

08002b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <NMI_Handler+0x4>

08002b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <MemManage_Handler+0x4>

08002b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b72:	e7fe      	b.n	8002b72 <BusFault_Handler+0x4>

08002b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <UsageFault_Handler+0x4>

08002b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba8:	f000 f94a 	bl	8002e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
	return 1;
 8002bb4:	2301      	movs	r3, #1
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <_kill>:

int _kill(int pid, int sig)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bca:	f004 f8b5 	bl	8006d38 <__errno>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2216      	movs	r2, #22
 8002bd2:	601a      	str	r2, [r3, #0]
	return -1;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_exit>:

void _exit (int status)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ffe7 	bl	8002bc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bf2:	e7fe      	b.n	8002bf2 <_exit+0x12>

08002bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e00a      	b.n	8002c1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c06:	f3af 8000 	nop.w
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	60ba      	str	r2, [r7, #8]
 8002c12:	b2ca      	uxtb	r2, r1
 8002c14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	dbf0      	blt.n	8002c06 <_read+0x12>
	}

return len;
 8002c24:	687b      	ldr	r3, [r7, #4]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e009      	b.n	8002c54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	60ba      	str	r2, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3301      	adds	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dbf1      	blt.n	8002c40 <_write+0x12>
	}
	return len;
 8002c5c:	687b      	ldr	r3, [r7, #4]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <_close>:

int _close(int file)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <_isatty>:

int _isatty(int file)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
	return 0;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <_sbrk+0x5c>)
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <_sbrk+0x60>)
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <_sbrk+0x64>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <_sbrk+0x64>)
 8002cee:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <_sbrk+0x68>)
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d207      	bcs.n	8002d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d00:	f004 f81a 	bl	8006d38 <__errno>
 8002d04:	4603      	mov	r3, r0
 8002d06:	220c      	movs	r2, #12
 8002d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0e:	e009      	b.n	8002d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <_sbrk+0x64>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <_sbrk+0x64>)
 8002d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d22:	68fb      	ldr	r3, [r7, #12]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20003000 	.word	0x20003000
 8002d30:	00000400 	.word	0x00000400
 8002d34:	200008fc 	.word	0x200008fc
 8002d38:	20000938 	.word	0x20000938

08002d3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <SystemInit+0x20>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <SystemInit+0x20>)
 8002d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d64:	480d      	ldr	r0, [pc, #52]	; (8002d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d66:	490e      	ldr	r1, [pc, #56]	; (8002da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d68:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <LoopForever+0xe>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d6c:	e002      	b.n	8002d74 <LoopCopyDataInit>

08002d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d72:	3304      	adds	r3, #4

08002d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d78:	d3f9      	bcc.n	8002d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d7c:	4c0b      	ldr	r4, [pc, #44]	; (8002dac <LoopForever+0x16>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d80:	e001      	b.n	8002d86 <LoopFillZerobss>

08002d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d84:	3204      	adds	r2, #4

08002d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d88:	d3fb      	bcc.n	8002d82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d8a:	f7ff ffd7 	bl	8002d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d8e:	f003 ffd9 	bl	8006d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d92:	f7ff fbdf 	bl	8002554 <main>

08002d96 <LoopForever>:

LoopForever:
    b LoopForever
 8002d96:	e7fe      	b.n	8002d96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d98:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002da4:	08008b34 	.word	0x08008b34
  ldr r2, =_sbss
 8002da8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002dac:	20000938 	.word	0x20000938

08002db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002db0:	e7fe      	b.n	8002db0 <ADC1_2_IRQHandler>
	...

08002db4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_Init+0x28>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <HAL_Init+0x28>)
 8002dbe:	f043 0310 	orr.w	r3, r3, #16
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f001 f851 	bl	8003e6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f000 f808 	bl	8002de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd0:	f7ff fde0 	bl	8002994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40022000 	.word	0x40022000

08002de0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de8:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_InitTick+0x54>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_InitTick+0x58>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f001 f85b 	bl	8003eba <HAL_SYSTICK_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00e      	b.n	8002e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d80a      	bhi.n	8002e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e14:	2200      	movs	r2, #0
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f001 f831 	bl	8003e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e20:	4a06      	ldr	r2, [pc, #24]	; (8002e3c <HAL_InitTick+0x5c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	2000005c 	.word	0x2000005c
 8002e38:	20000064 	.word	0x20000064
 8002e3c:	20000060 	.word	0x20000060

08002e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_IncTick+0x20>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_IncTick+0x24>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HAL_IncTick+0x24>)
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000064 	.word	0x20000064
 8002e64:	20000900 	.word	0x20000900

08002e68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <HAL_GetTick+0x14>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000900 	.word	0x20000900

08002e80 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7ff ffee 	bl	8002e68 <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d005      	beq.n	8002ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_Delay+0x44>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ea6:	bf00      	nop
 8002ea8:	f7ff ffde 	bl	8002e68 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d8f7      	bhi.n	8002ea8 <HAL_Delay+0x28>
  {
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000064 	.word	0x20000064

08002ec8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b09a      	sub	sp, #104	; 0x68
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e172      	b.n	80031ce <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d176      	bne.n	8002fe8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d152      	bne.n	8002fa8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fd61 	bl	80029e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d13b      	bne.n	8002fa8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fe83 	bl	8003c3c <ADC_Disable>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d12f      	bne.n	8002fa8 <HAL_ADC_Init+0xe0>
 8002f48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d12b      	bne.n	8002fa8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f58:	f023 0302 	bic.w	r3, r3, #2
 8002f5c:	f043 0202 	orr.w	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f72:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f82:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f84:	4b94      	ldr	r3, [pc, #592]	; (80031d8 <HAL_ADC_Init+0x310>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a94      	ldr	r2, [pc, #592]	; (80031dc <HAL_ADC_Init+0x314>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0c9a      	lsrs	r2, r3, #18
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f9a:	e002      	b.n	8002fa2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f9      	bne.n	8002f9c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc4:	d110      	bne.n	8002fe8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f023 0312 	bic.w	r3, r3, #18
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f040 80df 	bne.w	80031b4 <HAL_ADC_Init+0x2ec>
 8002ff6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 80da 	bne.w	80031b4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 80d2 	bne.w	80031b4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003018:	f043 0202 	orr.w	r2, r3, #2
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003020:	4b6f      	ldr	r3, [pc, #444]	; (80031e0 <HAL_ADC_Init+0x318>)
 8003022:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800302c:	d102      	bne.n	8003034 <HAL_ADC_Init+0x16c>
 800302e:	4b6d      	ldr	r3, [pc, #436]	; (80031e4 <HAL_ADC_Init+0x31c>)
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e002      	b.n	800303a <HAL_ADC_Init+0x172>
 8003034:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003038:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <HAL_ADC_Init+0x192>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_ADC_Init+0x192>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_ADC_Init+0x194>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11c      	bne.n	800309a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003060:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003062:	2b00      	cmp	r3, #0
 8003064:	d010      	beq.n	8003088 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d107      	bne.n	8003082 <HAL_ADC_Init+0x1ba>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_ADC_Init+0x1ba>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_ADC_Init+0x1bc>
 8003082:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003084:	2b00      	cmp	r3, #0
 8003086:	d108      	bne.n	800309a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	431a      	orrs	r2, r3
 8003096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003098:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7e5b      	ldrb	r3, [r3, #25]
 800309e:	035b      	lsls	r3, r3, #13
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030a4:	2a01      	cmp	r2, #1
 80030a6:	d002      	beq.n	80030ae <HAL_ADC_Init+0x1e6>
 80030a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030ac:	e000      	b.n	80030b0 <HAL_ADC_Init+0x1e8>
 80030ae:	2200      	movs	r2, #0
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4313      	orrs	r3, r2
 80030be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030c0:	4313      	orrs	r3, r2
 80030c2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d11b      	bne.n	8003106 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7e5b      	ldrb	r3, [r3, #25]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	3b01      	subs	r3, #1
 80030dc:	045a      	lsls	r2, r3, #17
 80030de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	663b      	str	r3, [r7, #96]	; 0x60
 80030e8:	e00d      	b.n	8003106 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	2b01      	cmp	r3, #1
 800310c:	d007      	beq.n	800311e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	4313      	orrs	r3, r2
 8003118:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800311a:	4313      	orrs	r3, r2
 800311c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b00      	cmp	r3, #0
 800312a:	d114      	bne.n	8003156 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800313a:	f023 0302 	bic.w	r3, r3, #2
 800313e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7e1b      	ldrb	r3, [r3, #24]
 8003144:	039a      	lsls	r2, r3, #14
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4313      	orrs	r3, r2
 8003150:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003152:	4313      	orrs	r3, r2
 8003154:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_ADC_Init+0x320>)
 800315e:	4013      	ands	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003166:	430b      	orrs	r3, r1
 8003168:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10c      	bne.n	800318c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f023 010f 	bic.w	r1, r3, #15
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
 800318a:	e007      	b.n	800319c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 020f 	bic.w	r2, r2, #15
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
 80031b2:	e00a      	b.n	80031ca <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f023 0312 	bic.w	r3, r3, #18
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80031ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3768      	adds	r7, #104	; 0x68
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000005c 	.word	0x2000005c
 80031dc:	431bde83 	.word	0x431bde83
 80031e0:	50000300 	.word	0x50000300
 80031e4:	50000100 	.word	0x50000100
 80031e8:	fff0c007 	.word	0xfff0c007

080031ec <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 809c 	bne.w	8003340 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_ADC_Start+0x2a>
 8003212:	2302      	movs	r3, #2
 8003214:	e097      	b.n	8003346 <HAL_ADC_Start+0x15a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fca8 	bl	8003b74 <ADC_Enable>
 8003224:	4603      	mov	r3, r0
 8003226:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 8083 	bne.w	8003336 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003244:	4b42      	ldr	r3, [pc, #264]	; (8003350 <HAL_ADC_Start+0x164>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_ADC_Start+0x6e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003258:	d115      	bne.n	8003286 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d027      	beq.n	80032c4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800327c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003284:	e01e      	b.n	80032c4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329a:	d004      	beq.n	80032a6 <HAL_ADC_Start+0xba>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2c      	ldr	r2, [pc, #176]	; (8003354 <HAL_ADC_Start+0x168>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10e      	bne.n	80032c4 <HAL_ADC_Start+0xd8>
 80032a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d0:	d106      	bne.n	80032e0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f023 0206 	bic.w	r2, r3, #6
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
 80032de:	e002      	b.n	80032e6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	221c      	movs	r2, #28
 80032f4:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_ADC_Start+0x164>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_ADC_Start+0x138>
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_ADC_Start+0x164>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2b05      	cmp	r3, #5
 800330c:	d00a      	beq.n	8003324 <HAL_ADC_Start+0x138>
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_ADC_Start+0x164>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2b09      	cmp	r3, #9
 8003318:	d004      	beq.n	8003324 <HAL_ADC_Start+0x138>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003322:	d10f      	bne.n	8003344 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0204 	orr.w	r2, r2, #4
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	e006      	b.n	8003344 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800333e:	e001      	b.n	8003344 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003340:	2302      	movs	r3, #2
 8003342:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	50000300 	.word	0x50000300
 8003354:	50000100 	.word	0x50000100

08003358 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d102      	bne.n	8003374 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800336e:	2308      	movs	r3, #8
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e02e      	b.n	80033d2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003374:	4b5e      	ldr	r3, [pc, #376]	; (80034f0 <HAL_ADC_PollForConversion+0x198>)
 8003376:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2b00      	cmp	r3, #0
 8003382:	d112      	bne.n	80033aa <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d11d      	bne.n	80033ce <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e09d      	b.n	80034e6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e08b      	b.n	80034e6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80033ce:	230c      	movs	r3, #12
 80033d0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033d2:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_ADC_PollForConversion+0x198>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <HAL_ADC_PollForConversion+0x90>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e6:	d104      	bne.n	80033f2 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e003      	b.n	80033fa <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80033f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80033fa:	f7ff fd35 	bl	8002e68 <HAL_GetTick>
 80033fe:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003400:	e021      	b.n	8003446 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d01d      	beq.n	8003446 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_ADC_PollForConversion+0xc8>
 8003410:	f7ff fd2a 	bl	8002e68 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d212      	bcs.n	8003446 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10b      	bne.n	8003446 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f043 0204 	orr.w	r2, r3, #4
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e04f      	b.n	80034e6 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0d6      	beq.n	8003402 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800346a:	2b00      	cmp	r3, #0
 800346c:	d131      	bne.n	80034d2 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003474:	2b00      	cmp	r3, #0
 8003476:	d12c      	bne.n	80034d2 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b08      	cmp	r3, #8
 8003484:	d125      	bne.n	80034d2 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d112      	bne.n	80034ba <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d112      	bne.n	80034d2 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
 80034b8:	e00b      	b.n	80034d2 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	50000300 	.word	0x50000300

080034f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_ADCEx_Calibration_Start+0x1c>
 8003526:	2302      	movs	r3, #2
 8003528:	e05f      	b.n	80035ea <HAL_ADCEx_Calibration_Start+0xdc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fb82 	bl	8003c3c <ADC_Disable>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d14e      	bne.n	80035e0 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003556:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800356c:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800357c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800357e:	f7ff fc73 	bl	8002e68 <HAL_GetTick>
 8003582:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003584:	e01c      	b.n	80035c0 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003586:	f7ff fc6f 	bl	8002e68 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b0a      	cmp	r3, #10
 8003592:	d915      	bls.n	80035c0 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800359e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035a2:	d10d      	bne.n	80035c0 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f023 0312 	bic.w	r3, r3, #18
 80035ac:	f043 0210 	orr.w	r2, r3, #16
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e014      	b.n	80035ea <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ce:	d0da      	beq.n	8003586 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f023 0303 	bic.w	r3, r3, #3
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b09b      	sub	sp, #108	; 0x6c
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x22>
 8003612:	2302      	movs	r3, #2
 8003614:	e2a4      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x56c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 8288 	bne.w	8003b3e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b04      	cmp	r3, #4
 8003634:	d81c      	bhi.n	8003670 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	461a      	mov	r2, r3
 800364a:	231f      	movs	r3, #31
 800364c:	4093      	lsls	r3, r2
 800364e:	43db      	mvns	r3, r3
 8003650:	4019      	ands	r1, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa00 f203 	lsl.w	r2, r0, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
 800366e:	e063      	b.n	8003738 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b09      	cmp	r3, #9
 8003676:	d81e      	bhi.n	80036b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	3b1e      	subs	r3, #30
 800368c:	221f      	movs	r2, #31
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	4019      	ands	r1, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	3b1e      	subs	r3, #30
 80036a8:	fa00 f203 	lsl.w	r2, r0, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	635a      	str	r2, [r3, #52]	; 0x34
 80036b4:	e040      	b.n	8003738 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b0e      	cmp	r3, #14
 80036bc:	d81e      	bhi.n	80036fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	3b3c      	subs	r3, #60	; 0x3c
 80036d2:	221f      	movs	r2, #31
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	4019      	ands	r1, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	3b3c      	subs	r3, #60	; 0x3c
 80036ee:	fa00 f203 	lsl.w	r2, r0, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
 80036fa:	e01d      	b.n	8003738 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	3b5a      	subs	r3, #90	; 0x5a
 8003710:	221f      	movs	r2, #31
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	4019      	ands	r1, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	3b5a      	subs	r3, #90	; 0x5a
 800372c:	fa00 f203 	lsl.w	r2, r0, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 80e5 	bne.w	8003912 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b09      	cmp	r3, #9
 800374e:	d91c      	bls.n	800378a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6999      	ldr	r1, [r3, #24]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	3b1e      	subs	r3, #30
 8003762:	2207      	movs	r2, #7
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	4019      	ands	r1, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6898      	ldr	r0, [r3, #8]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	3b1e      	subs	r3, #30
 800377c:	fa00 f203 	lsl.w	r2, r0, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	619a      	str	r2, [r3, #24]
 8003788:	e019      	b.n	80037be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6959      	ldr	r1, [r3, #20]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	2207      	movs	r2, #7
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	4019      	ands	r1, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6898      	ldr	r0, [r3, #8]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	fa00 f203 	lsl.w	r2, r0, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	08db      	lsrs	r3, r3, #3
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	3b01      	subs	r3, #1
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d84f      	bhi.n	8003880 <HAL_ADC_ConfigChannel+0x28c>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	0800381b 	.word	0x0800381b
 80037f0:	0800383d 	.word	0x0800383d
 80037f4:	0800385f 	.word	0x0800385f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037fe:	4b94      	ldr	r3, [pc, #592]	; (8003a50 <HAL_ADC_ConfigChannel+0x45c>)
 8003800:	4013      	ands	r3, r2
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	0691      	lsls	r1, r2, #26
 8003808:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800380a:	430a      	orrs	r2, r1
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003816:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003818:	e07e      	b.n	8003918 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003820:	4b8b      	ldr	r3, [pc, #556]	; (8003a50 <HAL_ADC_ConfigChannel+0x45c>)
 8003822:	4013      	ands	r3, r2
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	0691      	lsls	r1, r2, #26
 800382a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800382c:	430a      	orrs	r2, r1
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003838:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800383a:	e06d      	b.n	8003918 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003842:	4b83      	ldr	r3, [pc, #524]	; (8003a50 <HAL_ADC_ConfigChannel+0x45c>)
 8003844:	4013      	ands	r3, r2
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	0691      	lsls	r1, r2, #26
 800384c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800384e:	430a      	orrs	r2, r1
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800385a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800385c:	e05c      	b.n	8003918 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003864:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <HAL_ADC_ConfigChannel+0x45c>)
 8003866:	4013      	ands	r3, r2
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	0691      	lsls	r1, r2, #26
 800386e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003870:	430a      	orrs	r2, r1
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800387c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800387e:	e04b      	b.n	8003918 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	069b      	lsls	r3, r3, #26
 8003890:	429a      	cmp	r2, r3
 8003892:	d107      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038a2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	069b      	lsls	r3, r3, #26
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d107      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038c6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	069b      	lsls	r3, r3, #26
 80038d8:	429a      	cmp	r2, r3
 80038da:	d107      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038ea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	069b      	lsls	r3, r3, #26
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10a      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800390e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003910:	e001      	b.n	8003916 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003916:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d108      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x344>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x344>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_ADC_ConfigChannel+0x346>
 8003938:	2300      	movs	r3, #0
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 810a 	bne.w	8003b54 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d00f      	beq.n	8003968 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2201      	movs	r2, #1
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	400a      	ands	r2, r1
 8003962:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003966:	e049      	b.n	80039fc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2201      	movs	r2, #1
 8003976:	409a      	lsls	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b09      	cmp	r3, #9
 8003988:	d91c      	bls.n	80039c4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6999      	ldr	r1, [r3, #24]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	3b1b      	subs	r3, #27
 800399c:	2207      	movs	r2, #7
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	4019      	ands	r1, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6898      	ldr	r0, [r3, #8]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	3b1b      	subs	r3, #27
 80039b6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	619a      	str	r2, [r3, #24]
 80039c2:	e01b      	b.n	80039fc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6959      	ldr	r1, [r3, #20]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	2207      	movs	r2, #7
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	4019      	ands	r1, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6898      	ldr	r0, [r3, #8]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	fa00 f203 	lsl.w	r2, r0, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039fc:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_ADC_ConfigChannel+0x460>)
 80039fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d105      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003a18:	2b11      	cmp	r3, #17
 8003a1a:	d105      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00b      	beq.n	8003a40 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003a2c:	2b12      	cmp	r3, #18
 8003a2e:	f040 8091 	bne.w	8003b54 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 808a 	bne.w	8003b54 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a48:	d108      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x468>
 8003a4a:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_ADC_ConfigChannel+0x464>)
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e008      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x46e>
 8003a50:	83fff000 	.word	0x83fff000
 8003a54:	50000300 	.word	0x50000300
 8003a58:	50000100 	.word	0x50000100
 8003a5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a60:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d108      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x48e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x48e>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x490>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d150      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d010      	beq.n	8003ab0 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x4b6>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x4b6>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_ADC_ConfigChannel+0x4b8>
 8003aaa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d13c      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d11d      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x500>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac0:	d118      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003acc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ace:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <HAL_ADC_ConfigChannel+0x578>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a27      	ldr	r2, [pc, #156]	; (8003b70 <HAL_ADC_ConfigChannel+0x57c>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	0c9a      	lsrs	r2, r3, #18
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ae4:	e002      	b.n	8003aec <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f9      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003af2:	e02e      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b11      	cmp	r3, #17
 8003afa:	d10b      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x520>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b04:	d106      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b10:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b12:	e01e      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b12      	cmp	r3, #18
 8003b1a:	d11a      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b26:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b28:	e013      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0220 	orr.w	r2, r3, #32
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b3c:	e00a      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b50:	e000      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b52:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	376c      	adds	r7, #108	; 0x6c
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	2000005c 	.word	0x2000005c
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d108      	bne.n	8003ba0 <ADC_Enable+0x2c>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <ADC_Enable+0x2c>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <ADC_Enable+0x2e>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d143      	bne.n	8003c2e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <ADC_Enable+0xc4>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f043 0210 	orr.w	r2, r3, #16
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e02f      	b.n	8003c30 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003be0:	f7ff f942 	bl	8002e68 <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003be6:	e01b      	b.n	8003c20 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003be8:	f7ff f93e 	bl	8002e68 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d914      	bls.n	8003c20 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d00d      	beq.n	8003c20 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0210 	orr.w	r2, r3, #16
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e007      	b.n	8003c30 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d1dc      	bne.n	8003be8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	8000003f 	.word	0x8000003f

08003c3c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d108      	bne.n	8003c68 <ADC_Disable+0x2c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <ADC_Disable+0x2c>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <ADC_Disable+0x2e>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d047      	beq.n	8003cfe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 030d 	and.w	r3, r3, #13
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10f      	bne.n	8003c9c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0202 	orr.w	r2, r2, #2
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2203      	movs	r2, #3
 8003c92:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003c94:	f7ff f8e8 	bl	8002e68 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c9a:	e029      	b.n	8003cf0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f043 0210 	orr.w	r2, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e023      	b.n	8003d00 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cb8:	f7ff f8d6 	bl	8002e68 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d914      	bls.n	8003cf0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d10d      	bne.n	8003cf0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f043 0210 	orr.w	r2, r3, #16
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce4:	f043 0201 	orr.w	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e007      	b.n	8003d00 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d0dc      	beq.n	8003cb8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d24:	4013      	ands	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d3a:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	60d3      	str	r3, [r2, #12]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <__NVIC_GetPriorityGrouping+0x18>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	f003 0307 	and.w	r3, r3, #7
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	db0a      	blt.n	8003d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	490c      	ldr	r1, [pc, #48]	; (8003db8 <__NVIC_SetPriority+0x4c>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	0112      	lsls	r2, r2, #4
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	440b      	add	r3, r1
 8003d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d94:	e00a      	b.n	8003dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4908      	ldr	r1, [pc, #32]	; (8003dbc <__NVIC_SetPriority+0x50>)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3b04      	subs	r3, #4
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	440b      	add	r3, r1
 8003daa:	761a      	strb	r2, [r3, #24]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000e100 	.word	0xe000e100
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f1c3 0307 	rsb	r3, r3, #7
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	bf28      	it	cs
 8003dde:	2304      	movcs	r3, #4
 8003de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d902      	bls.n	8003df0 <NVIC_EncodePriority+0x30>
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3b03      	subs	r3, #3
 8003dee:	e000      	b.n	8003df2 <NVIC_EncodePriority+0x32>
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	401a      	ands	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e08:	f04f 31ff 	mov.w	r1, #4294967295
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	43d9      	mvns	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	4313      	orrs	r3, r2
         );
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3724      	adds	r7, #36	; 0x24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e38:	d301      	bcc.n	8003e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e00f      	b.n	8003e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <SysTick_Config+0x40>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e46:	210f      	movs	r1, #15
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	f7ff ff8e 	bl	8003d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <SysTick_Config+0x40>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e56:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <SysTick_Config+0x40>)
 8003e58:	2207      	movs	r2, #7
 8003e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	e000e010 	.word	0xe000e010

08003e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ff47 	bl	8003d08 <__NVIC_SetPriorityGrouping>
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e94:	f7ff ff5c 	bl	8003d50 <__NVIC_GetPriorityGrouping>
 8003e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	6978      	ldr	r0, [r7, #20]
 8003ea0:	f7ff ff8e 	bl	8003dc0 <NVIC_EncodePriority>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff5d 	bl	8003d6c <__NVIC_SetPriority>
}
 8003eb2:	bf00      	nop
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff ffb0 	bl	8003e28 <SysTick_Config>
 8003ec8:	4603      	mov	r3, r0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003eee:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <HAL_FLASH_Program+0xd8>)
 8003ef0:	7e1b      	ldrb	r3, [r3, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_FLASH_Program+0x26>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e054      	b.n	8003fa4 <HAL_FLASH_Program+0xd0>
 8003efa:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <HAL_FLASH_Program+0xd8>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f04:	f000 f8a8 	bl	8004058 <FLASH_WaitForLastOperation>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d144      	bne.n	8003f9c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d102      	bne.n	8003f1e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	757b      	strb	r3, [r7, #21]
 8003f1c:	e007      	b.n	8003f2e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d102      	bne.n	8003f2a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003f24:	2302      	movs	r3, #2
 8003f26:	757b      	strb	r3, [r7, #21]
 8003f28:	e001      	b.n	8003f2e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	75bb      	strb	r3, [r7, #22]
 8003f32:	e02d      	b.n	8003f90 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003f34:	7dbb      	ldrb	r3, [r7, #22]
 8003f36:	005a      	lsls	r2, r3, #1
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	eb02 0c03 	add.w	ip, r2, r3
 8003f3e:	7dbb      	ldrb	r3, [r7, #22]
 8003f40:	0119      	lsls	r1, r3, #4
 8003f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f46:	f1c1 0620 	rsb	r6, r1, #32
 8003f4a:	f1a1 0020 	sub.w	r0, r1, #32
 8003f4e:	fa22 f401 	lsr.w	r4, r2, r1
 8003f52:	fa03 f606 	lsl.w	r6, r3, r6
 8003f56:	4334      	orrs	r4, r6
 8003f58:	fa23 f000 	lsr.w	r0, r3, r0
 8003f5c:	4304      	orrs	r4, r0
 8003f5e:	fa23 f501 	lsr.w	r5, r3, r1
 8003f62:	b2a3      	uxth	r3, r4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4660      	mov	r0, ip
 8003f68:	f000 f85a 	bl	8004020 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f70:	f000 f872 	bl	8004058 <FLASH_WaitForLastOperation>
 8003f74:	4603      	mov	r3, r0
 8003f76:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_FLASH_Program+0xdc>)
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	4a0c      	ldr	r2, [pc, #48]	; (8003fb0 <HAL_FLASH_Program+0xdc>)
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d107      	bne.n	8003f9a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003f8a:	7dbb      	ldrb	r3, [r7, #22]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	75bb      	strb	r3, [r7, #22]
 8003f90:	7dba      	ldrb	r2, [r7, #22]
 8003f92:	7d7b      	ldrb	r3, [r7, #21]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3cd      	bcc.n	8003f34 <HAL_FLASH_Program+0x60>
 8003f98:	e000      	b.n	8003f9c <HAL_FLASH_Program+0xc8>
      {
        break;
 8003f9a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f9c:	4b03      	ldr	r3, [pc, #12]	; (8003fac <HAL_FLASH_Program+0xd8>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	761a      	strb	r2, [r3, #24]

  return status;
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fac:	20000908 	.word	0x20000908
 8003fb0:	40022000 	.word	0x40022000

08003fb4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_FLASH_Unlock+0x40>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <HAL_FLASH_Unlock+0x40>)
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <HAL_FLASH_Unlock+0x44>)
 8003fce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_FLASH_Unlock+0x40>)
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <HAL_FLASH_Unlock+0x48>)
 8003fd4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <HAL_FLASH_Unlock+0x40>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40022000 	.word	0x40022000
 8003ff8:	45670123 	.word	0x45670123
 8003ffc:	cdef89ab 	.word	0xcdef89ab

08004000 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_FLASH_Lock+0x1c>)
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <HAL_FLASH_Lock+0x1c>)
 800400a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40022000 	.word	0x40022000

08004020 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <FLASH_Program_HalfWord+0x30>)
 800402e:	2200      	movs	r2, #0
 8004030:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <FLASH_Program_HalfWord+0x34>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	4a07      	ldr	r2, [pc, #28]	; (8004054 <FLASH_Program_HalfWord+0x34>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	887a      	ldrh	r2, [r7, #2]
 8004042:	801a      	strh	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	20000908 	.word	0x20000908
 8004054:	40022000 	.word	0x40022000

08004058 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004060:	f7fe ff02 	bl	8002e68 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004066:	e010      	b.n	800408a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d00c      	beq.n	800408a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <FLASH_WaitForLastOperation+0x2e>
 8004076:	f7fe fef7 	bl	8002e68 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d201      	bcs.n	800408a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e01f      	b.n	80040ca <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <FLASH_WaitForLastOperation+0x7c>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d0e8      	beq.n	8004068 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <FLASH_WaitForLastOperation+0x7c>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d102      	bne.n	80040a8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <FLASH_WaitForLastOperation+0x7c>)
 80040a4:	2220      	movs	r2, #32
 80040a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <FLASH_WaitForLastOperation+0x7c>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d005      	beq.n	80040c0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <FLASH_WaitForLastOperation+0x7c>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d103      	bne.n	80040c8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80040c0:	f000 f80a 	bl	80040d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40022000 	.word	0x40022000

080040d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <FLASH_SetErrorCode+0x5c>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d109      	bne.n	8004102 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <FLASH_SetErrorCode+0x60>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f043 0302 	orr.w	r3, r3, #2
 80040f6:	4a10      	ldr	r2, [pc, #64]	; (8004138 <FLASH_SetErrorCode+0x60>)
 80040f8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f043 0310 	orr.w	r3, r3, #16
 8004100:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <FLASH_SetErrorCode+0x5c>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b04      	cmp	r3, #4
 800410c:	d109      	bne.n	8004122 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <FLASH_SetErrorCode+0x60>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	4a08      	ldr	r2, [pc, #32]	; (8004138 <FLASH_SetErrorCode+0x60>)
 8004118:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <FLASH_SetErrorCode+0x5c>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60d3      	str	r3, [r2, #12]
}  
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40022000 	.word	0x40022000
 8004138:	20000908 	.word	0x20000908

0800413c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800414e:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <HAL_FLASHEx_Erase+0xcc>)
 8004150:	7e1b      	ldrb	r3, [r3, #24]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_FLASHEx_Erase+0x1e>
 8004156:	2302      	movs	r3, #2
 8004158:	e052      	b.n	8004200 <HAL_FLASHEx_Erase+0xc4>
 800415a:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_FLASHEx_Erase+0xcc>)
 800415c:	2201      	movs	r2, #1
 800415e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d115      	bne.n	8004194 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800416c:	f7ff ff74 	bl	8004058 <FLASH_WaitForLastOperation>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d140      	bne.n	80041f8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004176:	f000 f84b 	bl	8004210 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800417a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800417e:	f7ff ff6b 	bl	8004058 <FLASH_WaitForLastOperation>
 8004182:	4603      	mov	r3, r0
 8004184:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <HAL_FLASHEx_Erase+0xd0>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	4a20      	ldr	r2, [pc, #128]	; (800420c <HAL_FLASHEx_Erase+0xd0>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6113      	str	r3, [r2, #16]
 8004192:	e031      	b.n	80041f8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004194:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004198:	f7ff ff5e 	bl	8004058 <FLASH_WaitForLastOperation>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d12a      	bne.n	80041f8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f04f 32ff 	mov.w	r2, #4294967295
 80041a8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	e019      	b.n	80041e6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80041b2:	68b8      	ldr	r0, [r7, #8]
 80041b4:	f000 f846 	bl	8004244 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041bc:	f7ff ff4c 	bl	8004058 <FLASH_WaitForLastOperation>
 80041c0:	4603      	mov	r3, r0
 80041c2:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_FLASHEx_Erase+0xd0>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4a10      	ldr	r2, [pc, #64]	; (800420c <HAL_FLASHEx_Erase+0xd0>)
 80041ca:	f023 0302 	bic.w	r3, r3, #2
 80041ce:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	601a      	str	r2, [r3, #0]
            break;
 80041dc:	e00c      	b.n	80041f8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	02da      	lsls	r2, r3, #11
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3dc      	bcc.n	80041b2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_FLASHEx_Erase+0xcc>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	761a      	strb	r2, [r3, #24]

  return status;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000908 	.word	0x20000908
 800420c:	40022000 	.word	0x40022000

08004210 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <FLASH_MassErase+0x2c>)
 8004216:	2200      	movs	r2, #0
 8004218:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <FLASH_MassErase+0x30>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	4a08      	ldr	r2, [pc, #32]	; (8004240 <FLASH_MassErase+0x30>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <FLASH_MassErase+0x30>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	4a05      	ldr	r2, [pc, #20]	; (8004240 <FLASH_MassErase+0x30>)
 800422c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004230:	6113      	str	r3, [r2, #16]
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	20000908 	.word	0x20000908
 8004240:	40022000 	.word	0x40022000

08004244 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <FLASH_PageErase+0x38>)
 800424e:	2200      	movs	r2, #0
 8004250:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <FLASH_PageErase+0x3c>)
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <FLASH_PageErase+0x3c>)
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800425e:	4a08      	ldr	r2, [pc, #32]	; (8004280 <FLASH_PageErase+0x3c>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <FLASH_PageErase+0x3c>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	4a05      	ldr	r2, [pc, #20]	; (8004280 <FLASH_PageErase+0x3c>)
 800426a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426e:	6113      	str	r3, [r2, #16]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	20000908 	.word	0x20000908
 8004280:	40022000 	.word	0x40022000

08004284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004292:	e14e      	b.n	8004532 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	2101      	movs	r1, #1
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	4013      	ands	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8140 	beq.w	800452c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d005      	beq.n	80042c4 <HAL_GPIO_Init+0x40>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d130      	bne.n	8004326 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	2203      	movs	r2, #3
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042fa:	2201      	movs	r2, #1
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4013      	ands	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 0201 	and.w	r2, r3, #1
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b03      	cmp	r3, #3
 8004330:	d017      	beq.n	8004362 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	2203      	movs	r2, #3
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d123      	bne.n	80043b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	08da      	lsrs	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3208      	adds	r2, #8
 8004376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	220f      	movs	r2, #15
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4013      	ands	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	08da      	lsrs	r2, r3, #3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3208      	adds	r2, #8
 80043b0:	6939      	ldr	r1, [r7, #16]
 80043b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	2203      	movs	r2, #3
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4013      	ands	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 0203 	and.w	r2, r3, #3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 809a 	beq.w	800452c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f8:	4b55      	ldr	r3, [pc, #340]	; (8004550 <HAL_GPIO_Init+0x2cc>)
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4a54      	ldr	r2, [pc, #336]	; (8004550 <HAL_GPIO_Init+0x2cc>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6193      	str	r3, [r2, #24]
 8004404:	4b52      	ldr	r3, [pc, #328]	; (8004550 <HAL_GPIO_Init+0x2cc>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004410:	4a50      	ldr	r2, [pc, #320]	; (8004554 <HAL_GPIO_Init+0x2d0>)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	089b      	lsrs	r3, r3, #2
 8004416:	3302      	adds	r3, #2
 8004418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	220f      	movs	r2, #15
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800443a:	d013      	beq.n	8004464 <HAL_GPIO_Init+0x1e0>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a46      	ldr	r2, [pc, #280]	; (8004558 <HAL_GPIO_Init+0x2d4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00d      	beq.n	8004460 <HAL_GPIO_Init+0x1dc>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a45      	ldr	r2, [pc, #276]	; (800455c <HAL_GPIO_Init+0x2d8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <HAL_GPIO_Init+0x1d8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a44      	ldr	r2, [pc, #272]	; (8004560 <HAL_GPIO_Init+0x2dc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d101      	bne.n	8004458 <HAL_GPIO_Init+0x1d4>
 8004454:	2303      	movs	r3, #3
 8004456:	e006      	b.n	8004466 <HAL_GPIO_Init+0x1e2>
 8004458:	2305      	movs	r3, #5
 800445a:	e004      	b.n	8004466 <HAL_GPIO_Init+0x1e2>
 800445c:	2302      	movs	r3, #2
 800445e:	e002      	b.n	8004466 <HAL_GPIO_Init+0x1e2>
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_GPIO_Init+0x1e2>
 8004464:	2300      	movs	r3, #0
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	f002 0203 	and.w	r2, r2, #3
 800446c:	0092      	lsls	r2, r2, #2
 800446e:	4093      	lsls	r3, r2
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004476:	4937      	ldr	r1, [pc, #220]	; (8004554 <HAL_GPIO_Init+0x2d0>)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	3302      	adds	r3, #2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004484:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_GPIO_Init+0x2e0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	43db      	mvns	r3, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80044a8:	4a2e      	ldr	r2, [pc, #184]	; (8004564 <HAL_GPIO_Init+0x2e0>)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044ae:	4b2d      	ldr	r3, [pc, #180]	; (8004564 <HAL_GPIO_Init+0x2e0>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4013      	ands	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80044d2:	4a24      	ldr	r2, [pc, #144]	; (8004564 <HAL_GPIO_Init+0x2e0>)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_GPIO_Init+0x2e0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044fc:	4a19      	ldr	r2, [pc, #100]	; (8004564 <HAL_GPIO_Init+0x2e0>)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <HAL_GPIO_Init+0x2e0>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004526:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <HAL_GPIO_Init+0x2e0>)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	3301      	adds	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	f47f aea9 	bne.w	8004294 <HAL_GPIO_Init+0x10>
  }
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40021000 	.word	0x40021000
 8004554:	40010000 	.word	0x40010000
 8004558:	48000400 	.word	0x48000400
 800455c:	48000800 	.word	0x48000800
 8004560:	48000c00 	.word	0x48000c00
 8004564:	40010400 	.word	0x40010400

08004568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	887b      	ldrh	r3, [r7, #2]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	e001      	b.n	800458a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
 80045a4:	4613      	mov	r3, r2
 80045a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045a8:	787b      	ldrb	r3, [r7, #1]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045ae:	887a      	ldrh	r2, [r7, #2]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045b4:	e002      	b.n	80045bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045d8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d102      	bne.n	80045ee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f001 b823 	b.w	8005634 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 817d 	beq.w	80048fe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004604:	4bbc      	ldr	r3, [pc, #752]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b04      	cmp	r3, #4
 800460e:	d00c      	beq.n	800462a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004610:	4bb9      	ldr	r3, [pc, #740]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b08      	cmp	r3, #8
 800461a:	d15c      	bne.n	80046d6 <HAL_RCC_OscConfig+0x10e>
 800461c:	4bb6      	ldr	r3, [pc, #728]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d155      	bne.n	80046d6 <HAL_RCC_OscConfig+0x10e>
 800462a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800462e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800463e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d102      	bne.n	800465c <HAL_RCC_OscConfig+0x94>
 8004656:	4ba8      	ldr	r3, [pc, #672]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	e015      	b.n	8004688 <HAL_RCC_OscConfig+0xc0>
 800465c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004660:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004674:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004678:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800467c:	fa93 f3a3 	rbit	r3, r3
 8004680:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004684:	4b9c      	ldr	r3, [pc, #624]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800468c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004690:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004694:	fa92 f2a2 	rbit	r2, r2
 8004698:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800469c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80046a0:	fab2 f282 	clz	r2, r2
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	f042 0220 	orr.w	r2, r2, #32
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	f002 021f 	and.w	r2, r2, #31
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f202 	lsl.w	r2, r1, r2
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 811f 	beq.w	80048fc <HAL_RCC_OscConfig+0x334>
 80046be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 8116 	bne.w	80048fc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f000 bfaf 	b.w	8005634 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e6:	d106      	bne.n	80046f6 <HAL_RCC_OscConfig+0x12e>
 80046e8:	4b83      	ldr	r3, [pc, #524]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a82      	ldr	r2, [pc, #520]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 80046ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	e036      	b.n	8004764 <HAL_RCC_OscConfig+0x19c>
 80046f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x158>
 8004706:	4b7c      	ldr	r3, [pc, #496]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7b      	ldr	r2, [pc, #492]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 800470c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4b79      	ldr	r3, [pc, #484]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a78      	ldr	r2, [pc, #480]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e021      	b.n	8004764 <HAL_RCC_OscConfig+0x19c>
 8004720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x184>
 8004732:	4b71      	ldr	r3, [pc, #452]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a70      	ldr	r2, [pc, #448]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b6e      	ldr	r3, [pc, #440]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6d      	ldr	r2, [pc, #436]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0x19c>
 800474c:	4b6a      	ldr	r3, [pc, #424]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a69      	ldr	r2, [pc, #420]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b67      	ldr	r3, [pc, #412]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a66      	ldr	r2, [pc, #408]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 800475e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004762:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004764:	4b64      	ldr	r3, [pc, #400]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	f023 020f 	bic.w	r2, r3, #15
 800476c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	495f      	ldr	r1, [pc, #380]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 800477a:	4313      	orrs	r3, r2
 800477c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800477e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d059      	beq.n	8004842 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7fe fb6b 	bl	8002e68 <HAL_GetTick>
 8004792:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	e00a      	b.n	80047ae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004798:	f7fe fb66 	bl	8002e68 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b64      	cmp	r3, #100	; 0x64
 80047a6:	d902      	bls.n	80047ae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	f000 bf43 	b.w	8005634 <HAL_RCC_OscConfig+0x106c>
 80047ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80047c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d102      	bne.n	80047e0 <HAL_RCC_OscConfig+0x218>
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	e015      	b.n	800480c <HAL_RCC_OscConfig+0x244>
 80047e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047e4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80047ec:	fa93 f3a3 	rbit	r3, r3
 80047f0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80047f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047f8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80047fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004808:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004810:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004814:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004818:	fa92 f2a2 	rbit	r2, r2
 800481c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004820:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004824:	fab2 f282 	clz	r2, r2
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	f042 0220 	orr.w	r2, r2, #32
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	f002 021f 	and.w	r2, r2, #31
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f202 	lsl.w	r2, r1, r2
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ab      	beq.n	8004798 <HAL_RCC_OscConfig+0x1d0>
 8004840:	e05d      	b.n	80048fe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004842:	f7fe fb11 	bl	8002e68 <HAL_GetTick>
 8004846:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800484c:	f7fe fb0c 	bl	8002e68 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b64      	cmp	r3, #100	; 0x64
 800485a:	d902      	bls.n	8004862 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	f000 bee9 	b.w	8005634 <HAL_RCC_OscConfig+0x106c>
 8004862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004866:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004876:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	fab3 f383 	clz	r3, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d102      	bne.n	8004894 <HAL_RCC_OscConfig+0x2cc>
 800488e:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	e015      	b.n	80048c0 <HAL_RCC_OscConfig+0x2f8>
 8004894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004898:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80048a0:	fa93 f3a3 	rbit	r3, r3
 80048a4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80048a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80048b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <HAL_RCC_OscConfig+0x330>)
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048c4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80048c8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80048cc:	fa92 f2a2 	rbit	r2, r2
 80048d0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80048d4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80048d8:	fab2 f282 	clz	r2, r2
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	f042 0220 	orr.w	r2, r2, #32
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	f002 021f 	and.w	r2, r2, #31
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f202 	lsl.w	r2, r1, r2
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ab      	bne.n	800484c <HAL_RCC_OscConfig+0x284>
 80048f4:	e003      	b.n	80048fe <HAL_RCC_OscConfig+0x336>
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 817d 	beq.w	8004c0e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004914:	4ba6      	ldr	r3, [pc, #664]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00b      	beq.n	8004938 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004920:	4ba3      	ldr	r3, [pc, #652]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b08      	cmp	r3, #8
 800492a:	d172      	bne.n	8004a12 <HAL_RCC_OscConfig+0x44a>
 800492c:	4ba0      	ldr	r3, [pc, #640]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d16c      	bne.n	8004a12 <HAL_RCC_OscConfig+0x44a>
 8004938:	2302      	movs	r3, #2
 800493a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800494a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d102      	bne.n	8004968 <HAL_RCC_OscConfig+0x3a0>
 8004962:	4b93      	ldr	r3, [pc, #588]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	e013      	b.n	8004990 <HAL_RCC_OscConfig+0x3c8>
 8004968:	2302      	movs	r3, #2
 800496a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800497a:	2302      	movs	r3, #2
 800497c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004980:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004984:	fa93 f3a3 	rbit	r3, r3
 8004988:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800498c:	4b88      	ldr	r3, [pc, #544]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	2202      	movs	r2, #2
 8004992:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004996:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800499a:	fa92 f2a2 	rbit	r2, r2
 800499e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80049a2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80049a6:	fab2 f282 	clz	r2, r2
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	f042 0220 	orr.w	r2, r2, #32
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	f002 021f 	and.w	r2, r2, #31
 80049b6:	2101      	movs	r1, #1
 80049b8:	fa01 f202 	lsl.w	r2, r1, r2
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCC_OscConfig+0x410>
 80049c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d002      	beq.n	80049d8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f000 be2e 	b.w	8005634 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d8:	4b75      	ldr	r3, [pc, #468]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	21f8      	movs	r1, #248	; 0xf8
 80049ee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80049f6:	fa91 f1a1 	rbit	r1, r1
 80049fa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80049fe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004a02:	fab1 f181 	clz	r1, r1
 8004a06:	b2c9      	uxtb	r1, r1
 8004a08:	408b      	lsls	r3, r1
 8004a0a:	4969      	ldr	r1, [pc, #420]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a10:	e0fd      	b.n	8004c0e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8088 	beq.w	8004b34 <HAL_RCC_OscConfig+0x56c>
 8004a24:	2301      	movs	r3, #1
 8004a26:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004a36:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fe fa0a 	bl	8002e68 <HAL_GetTick>
 8004a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a58:	e00a      	b.n	8004a70 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a5a:	f7fe fa05 	bl	8002e68 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d902      	bls.n	8004a70 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	f000 bde2 	b.w	8005634 <HAL_RCC_OscConfig+0x106c>
 8004a70:	2302      	movs	r3, #2
 8004a72:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004a82:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a86:	fab3 f383 	clz	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x4d8>
 8004a9a:	4b45      	ldr	r3, [pc, #276]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	e013      	b.n	8004ac8 <HAL_RCC_OscConfig+0x500>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ab8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004ac4:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004ace:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004ad2:	fa92 f2a2 	rbit	r2, r2
 8004ad6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004ada:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004ade:	fab2 f282 	clz	r2, r2
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	f042 0220 	orr.w	r2, r2, #32
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	f002 021f 	and.w	r2, r2, #31
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f202 	lsl.w	r2, r1, r2
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0af      	beq.n	8004a5a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afa:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	21f8      	movs	r1, #248	; 0xf8
 8004b10:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b14:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004b18:	fa91 f1a1 	rbit	r1, r1
 8004b1c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004b20:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004b24:	fab1 f181 	clz	r1, r1
 8004b28:	b2c9      	uxtb	r1, r1
 8004b2a:	408b      	lsls	r3, r1
 8004b2c:	4920      	ldr	r1, [pc, #128]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	600b      	str	r3, [r1, #0]
 8004b32:	e06c      	b.n	8004c0e <HAL_RCC_OscConfig+0x646>
 8004b34:	2301      	movs	r3, #1
 8004b36:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004b46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fe f982 	bl	8002e68 <HAL_GetTick>
 8004b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fe f97d 	bl	8002e68 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d902      	bls.n	8004b80 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	f000 bd5a 	b.w	8005634 <HAL_RCC_OscConfig+0x106c>
 8004b80:	2302      	movs	r3, #2
 8004b82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b8a:	fa93 f3a3 	rbit	r3, r3
 8004b8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d104      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x5ec>
 8004baa:	4b01      	ldr	r3, [pc, #4]	; (8004bb0 <HAL_RCC_OscConfig+0x5e8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	e015      	b.n	8004bdc <HAL_RCC_OscConfig+0x614>
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bbe:	fa93 f3a3 	rbit	r3, r3
 8004bc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bcc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bd0:	fa93 f3a3 	rbit	r3, r3
 8004bd4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004bd8:	4bc8      	ldr	r3, [pc, #800]	; (8004efc <HAL_RCC_OscConfig+0x934>)
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2202      	movs	r2, #2
 8004bde:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004be2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004be6:	fa92 f2a2 	rbit	r2, r2
 8004bea:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004bee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004bf2:	fab2 f282 	clz	r2, r2
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	f042 0220 	orr.w	r2, r2, #32
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	f002 021f 	and.w	r2, r2, #31
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ad      	bne.n	8004b6a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 8110 	beq.w	8004e44 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d079      	beq.n	8004d28 <HAL_RCC_OscConfig+0x760>
 8004c34:	2301      	movs	r3, #1
 8004c36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c3e:	fa93 f3a3 	rbit	r3, r3
 8004c42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c4a:	fab3 f383 	clz	r3, r3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	4bab      	ldr	r3, [pc, #684]	; (8004f00 <HAL_RCC_OscConfig+0x938>)
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5e:	f7fe f903 	bl	8002e68 <HAL_GetTick>
 8004c62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c68:	f7fe f8fe 	bl	8002e68 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d902      	bls.n	8004c7e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	f000 bcdb 	b.w	8005634 <HAL_RCC_OscConfig+0x106c>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c88:	fa93 f3a3 	rbit	r3, r3
 8004c8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004c98:	2202      	movs	r2, #2
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	fa93 f2a3 	rbit	r2, r3
 8004caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	fa93 f2a3 	rbit	r2, r3
 8004cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cd6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd8:	4b88      	ldr	r3, [pc, #544]	; (8004efc <HAL_RCC_OscConfig+0x934>)
 8004cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	6019      	str	r1, [r3, #0]
 8004ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	fa93 f1a3 	rbit	r1, r3
 8004cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004cfe:	6019      	str	r1, [r3, #0]
  return result;
 8004d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0a0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x6a0>
 8004d26:	e08d      	b.n	8004e44 <HAL_RCC_OscConfig+0x87c>
 8004d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	fa93 f2a3 	rbit	r2, r3
 8004d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d4a:	601a      	str	r2, [r3, #0]
  return result;
 8004d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4b68      	ldr	r3, [pc, #416]	; (8004f00 <HAL_RCC_OscConfig+0x938>)
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	461a      	mov	r2, r3
 8004d66:	2300      	movs	r3, #0
 8004d68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6a:	f7fe f87d 	bl	8002e68 <HAL_GetTick>
 8004d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d74:	f7fe f878 	bl	8002e68 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d902      	bls.n	8004d8a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	f000 bc55 	b.w	8005634 <HAL_RCC_OscConfig+0x106c>
 8004d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d92:	2202      	movs	r2, #2
 8004d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	fa93 f2a3 	rbit	r2, r3
 8004da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004db6:	2202      	movs	r2, #2
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dbe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	fa93 f2a3 	rbit	r2, r3
 8004dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dda:	2202      	movs	r2, #2
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	fa93 f2a3 	rbit	r2, r3
 8004dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004df4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df6:	4b41      	ldr	r3, [pc, #260]	; (8004efc <HAL_RCC_OscConfig+0x934>)
 8004df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e02:	2102      	movs	r1, #2
 8004e04:	6019      	str	r1, [r3, #0]
 8004e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	fa93 f1a3 	rbit	r1, r3
 8004e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e1c:	6019      	str	r1, [r3, #0]
  return result;
 8004e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e22:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	fab3 f383 	clz	r3, r3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d197      	bne.n	8004d74 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 81a1 	beq.w	800519c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e60:	4b26      	ldr	r3, [pc, #152]	; (8004efc <HAL_RCC_OscConfig+0x934>)
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d116      	bne.n	8004e9a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6c:	4b23      	ldr	r3, [pc, #140]	; (8004efc <HAL_RCC_OscConfig+0x934>)
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	4a22      	ldr	r2, [pc, #136]	; (8004efc <HAL_RCC_OscConfig+0x934>)
 8004e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e76:	61d3      	str	r3, [r2, #28]
 8004e78:	4b20      	ldr	r3, [pc, #128]	; (8004efc <HAL_RCC_OscConfig+0x934>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e84:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004e92:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9a:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <HAL_RCC_OscConfig+0x93c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d11a      	bne.n	8004edc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea6:	4b17      	ldr	r3, [pc, #92]	; (8004f04 <HAL_RCC_OscConfig+0x93c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <HAL_RCC_OscConfig+0x93c>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb2:	f7fd ffd9 	bl	8002e68 <HAL_GetTick>
 8004eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eba:	e009      	b.n	8004ed0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebc:	f7fd ffd4 	bl	8002e68 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b64      	cmp	r3, #100	; 0x64
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e3b1      	b.n	8005634 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_RCC_OscConfig+0x93c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ef      	beq.n	8004ebc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d10d      	bne.n	8004f08 <HAL_RCC_OscConfig+0x940>
 8004eec:	4b03      	ldr	r3, [pc, #12]	; (8004efc <HAL_RCC_OscConfig+0x934>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	4a02      	ldr	r2, [pc, #8]	; (8004efc <HAL_RCC_OscConfig+0x934>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	6213      	str	r3, [r2, #32]
 8004ef8:	e03c      	b.n	8004f74 <HAL_RCC_OscConfig+0x9ac>
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
 8004f00:	10908120 	.word	0x10908120
 8004f04:	40007000 	.word	0x40007000
 8004f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10c      	bne.n	8004f32 <HAL_RCC_OscConfig+0x96a>
 8004f18:	4bc1      	ldr	r3, [pc, #772]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	4ac0      	ldr	r2, [pc, #768]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f1e:	f023 0301 	bic.w	r3, r3, #1
 8004f22:	6213      	str	r3, [r2, #32]
 8004f24:	4bbe      	ldr	r3, [pc, #760]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	4abd      	ldr	r2, [pc, #756]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f2a:	f023 0304 	bic.w	r3, r3, #4
 8004f2e:	6213      	str	r3, [r2, #32]
 8004f30:	e020      	b.n	8004f74 <HAL_RCC_OscConfig+0x9ac>
 8004f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x994>
 8004f42:	4bb7      	ldr	r3, [pc, #732]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	4ab6      	ldr	r2, [pc, #728]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f48:	f043 0304 	orr.w	r3, r3, #4
 8004f4c:	6213      	str	r3, [r2, #32]
 8004f4e:	4bb4      	ldr	r3, [pc, #720]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	4ab3      	ldr	r2, [pc, #716]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	6213      	str	r3, [r2, #32]
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCC_OscConfig+0x9ac>
 8004f5c:	4bb0      	ldr	r3, [pc, #704]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	4aaf      	ldr	r2, [pc, #700]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	6213      	str	r3, [r2, #32]
 8004f68:	4bad      	ldr	r3, [pc, #692]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4aac      	ldr	r2, [pc, #688]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8004f6e:	f023 0304 	bic.w	r3, r3, #4
 8004f72:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8081 	beq.w	8005088 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f86:	f7fd ff6f 	bl	8002e68 <HAL_GetTick>
 8004f8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8e:	e00b      	b.n	8004fa8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fd ff6a 	bl	8002e68 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e345      	b.n	8005634 <HAL_RCC_OscConfig+0x106c>
 8004fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	fa93 f2a3 	rbit	r2, r3
 8004fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fdc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	fa93 f2a3 	rbit	r2, r3
 8004fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004fee:	601a      	str	r2, [r3, #0]
  return result;
 8004ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004ff8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffa:	fab3 f383 	clz	r3, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d102      	bne.n	8005014 <HAL_RCC_OscConfig+0xa4c>
 800500e:	4b84      	ldr	r3, [pc, #528]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	e013      	b.n	800503c <HAL_RCC_OscConfig+0xa74>
 8005014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005018:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800501c:	2202      	movs	r2, #2
 800501e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	fa93 f2a3 	rbit	r2, r3
 800502e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005032:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	4b79      	ldr	r3, [pc, #484]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005040:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005044:	2102      	movs	r1, #2
 8005046:	6011      	str	r1, [r2, #0]
 8005048:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800504c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	fa92 f1a2 	rbit	r1, r2
 8005056:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800505a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800505e:	6011      	str	r1, [r2, #0]
  return result;
 8005060:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005064:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	fab2 f282 	clz	r2, r2
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	f002 021f 	and.w	r2, r2, #31
 800507a:	2101      	movs	r1, #1
 800507c:	fa01 f202 	lsl.w	r2, r1, r2
 8005080:	4013      	ands	r3, r2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d084      	beq.n	8004f90 <HAL_RCC_OscConfig+0x9c8>
 8005086:	e07f      	b.n	8005188 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005088:	f7fd feee 	bl	8002e68 <HAL_GetTick>
 800508c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005090:	e00b      	b.n	80050aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fd fee9 	bl	8002e68 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e2c4      	b.n	8005634 <HAL_RCC_OscConfig+0x106c>
 80050aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80050b2:	2202      	movs	r2, #2
 80050b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	fa93 f2a3 	rbit	r2, r3
 80050c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80050d6:	2202      	movs	r2, #2
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	fa93 f2a3 	rbit	r2, r3
 80050e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80050f0:	601a      	str	r2, [r3, #0]
  return result;
 80050f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80050fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fc:	fab3 f383 	clz	r3, r3
 8005100:	b2db      	uxtb	r3, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f043 0302 	orr.w	r3, r3, #2
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d102      	bne.n	8005116 <HAL_RCC_OscConfig+0xb4e>
 8005110:	4b43      	ldr	r3, [pc, #268]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	e013      	b.n	800513e <HAL_RCC_OscConfig+0xb76>
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800511e:	2202      	movs	r2, #2
 8005120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005126:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	fa93 f2a3 	rbit	r2, r3
 8005130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005134:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	4b39      	ldr	r3, [pc, #228]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005142:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005146:	2102      	movs	r1, #2
 8005148:	6011      	str	r1, [r2, #0]
 800514a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800514e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	fa92 f1a2 	rbit	r1, r2
 8005158:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800515c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005160:	6011      	str	r1, [r2, #0]
  return result;
 8005162:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005166:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	fab2 f282 	clz	r2, r2
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	f002 021f 	and.w	r2, r2, #31
 800517c:	2101      	movs	r1, #1
 800517e:	fa01 f202 	lsl.w	r2, r1, r2
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d184      	bne.n	8005092 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005188:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800518c:	2b01      	cmp	r3, #1
 800518e:	d105      	bne.n	800519c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005190:	4b23      	ldr	r3, [pc, #140]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	4a22      	ldr	r2, [pc, #136]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 8005196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800519a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800519c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8242 	beq.w	8005632 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <HAL_RCC_OscConfig+0xc58>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	f000 8213 	beq.w	80055e2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	f040 8162 	bne.w	8005492 <HAL_RCC_OscConfig+0xeca>
 80051ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80051d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	fa93 f2a3 	rbit	r2, r3
 80051ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80051f2:	601a      	str	r2, [r3, #0]
  return result;
 80051f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80051fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	461a      	mov	r2, r3
 8005210:	2300      	movs	r3, #0
 8005212:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fd fe28 	bl	8002e68 <HAL_GetTick>
 8005218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800521c:	e00c      	b.n	8005238 <HAL_RCC_OscConfig+0xc70>
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005224:	f7fd fe20 	bl	8002e68 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e1fd      	b.n	8005634 <HAL_RCC_OscConfig+0x106c>
 8005238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005240:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	fa93 f2a3 	rbit	r2, r3
 8005254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005258:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800525c:	601a      	str	r2, [r3, #0]
  return result;
 800525e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005262:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005266:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005268:	fab3 f383 	clz	r3, r3
 800526c:	b2db      	uxtb	r3, r3
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d102      	bne.n	8005282 <HAL_RCC_OscConfig+0xcba>
 800527c:	4bb0      	ldr	r3, [pc, #704]	; (8005540 <HAL_RCC_OscConfig+0xf78>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	e027      	b.n	80052d2 <HAL_RCC_OscConfig+0xd0a>
 8005282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005286:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800528a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800528e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005294:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	fa93 f2a3 	rbit	r2, r3
 800529e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80052b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	fa93 f2a3 	rbit	r2, r3
 80052c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	4b9c      	ldr	r3, [pc, #624]	; (8005540 <HAL_RCC_OscConfig+0xf78>)
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052d6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80052da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052de:	6011      	str	r1, [r2, #0]
 80052e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052e4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	fa92 f1a2 	rbit	r1, r2
 80052ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052f2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80052f6:	6011      	str	r1, [r2, #0]
  return result;
 80052f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052fc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	fab2 f282 	clz	r2, r2
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	f042 0220 	orr.w	r2, r2, #32
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	f002 021f 	and.w	r2, r2, #31
 8005312:	2101      	movs	r1, #1
 8005314:	fa01 f202 	lsl.w	r2, r1, r2
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d182      	bne.n	8005224 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800531e:	4b88      	ldr	r3, [pc, #544]	; (8005540 <HAL_RCC_OscConfig+0xf78>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005336:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	430b      	orrs	r3, r1
 8005340:	497f      	ldr	r1, [pc, #508]	; (8005540 <HAL_RCC_OscConfig+0xf78>)
 8005342:	4313      	orrs	r3, r2
 8005344:	604b      	str	r3, [r1, #4]
 8005346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800534e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005358:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	fa93 f2a3 	rbit	r2, r3
 8005362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005366:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800536a:	601a      	str	r2, [r3, #0]
  return result;
 800536c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005370:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005374:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005376:	fab3 f383 	clz	r3, r3
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005380:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	461a      	mov	r2, r3
 8005388:	2301      	movs	r3, #1
 800538a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538c:	f7fd fd6c 	bl	8002e68 <HAL_GetTick>
 8005390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005394:	e009      	b.n	80053aa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005396:	f7fd fd67 	bl	8002e68 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e144      	b.n	8005634 <HAL_RCC_OscConfig+0x106c>
 80053aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80053b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	fa93 f2a3 	rbit	r2, r3
 80053c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80053ce:	601a      	str	r2, [r3, #0]
  return result;
 80053d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80053d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053da:	fab3 f383 	clz	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d102      	bne.n	80053f4 <HAL_RCC_OscConfig+0xe2c>
 80053ee:	4b54      	ldr	r3, [pc, #336]	; (8005540 <HAL_RCC_OscConfig+0xf78>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	e027      	b.n	8005444 <HAL_RCC_OscConfig+0xe7c>
 80053f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80053fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005406:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	fa93 f2a3 	rbit	r2, r3
 8005410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005414:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	fa93 f2a3 	rbit	r2, r3
 8005436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	4b3f      	ldr	r3, [pc, #252]	; (8005540 <HAL_RCC_OscConfig+0xf78>)
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005448:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800544c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005450:	6011      	str	r1, [r2, #0]
 8005452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005456:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	fa92 f1a2 	rbit	r1, r2
 8005460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005464:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005468:	6011      	str	r1, [r2, #0]
  return result;
 800546a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800546e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	fab2 f282 	clz	r2, r2
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	f042 0220 	orr.w	r2, r2, #32
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	f002 021f 	and.w	r2, r2, #31
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f202 	lsl.w	r2, r1, r2
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d082      	beq.n	8005396 <HAL_RCC_OscConfig+0xdce>
 8005490:	e0cf      	b.n	8005632 <HAL_RCC_OscConfig+0x106a>
 8005492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005496:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800549a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800549e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	fa93 f2a3 	rbit	r2, r3
 80054ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80054b6:	601a      	str	r2, [r3, #0]
  return result;
 80054b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054bc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80054c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	fab3 f383 	clz	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	461a      	mov	r2, r3
 80054d4:	2300      	movs	r3, #0
 80054d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d8:	f7fd fcc6 	bl	8002e68 <HAL_GetTick>
 80054dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e0:	e009      	b.n	80054f6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fd fcc1 	bl	8002e68 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e09e      	b.n	8005634 <HAL_RCC_OscConfig+0x106c>
 80054f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80054fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005508:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	fa93 f2a3 	rbit	r2, r3
 8005512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005516:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800551a:	601a      	str	r2, [r3, #0]
  return result;
 800551c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005520:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005524:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005526:	fab3 f383 	clz	r3, r3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	b2db      	uxtb	r3, r3
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d104      	bne.n	8005544 <HAL_RCC_OscConfig+0xf7c>
 800553a:	4b01      	ldr	r3, [pc, #4]	; (8005540 <HAL_RCC_OscConfig+0xf78>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	e029      	b.n	8005594 <HAL_RCC_OscConfig+0xfcc>
 8005540:	40021000 	.word	0x40021000
 8005544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005548:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800554c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005556:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	fa93 f2a3 	rbit	r2, r3
 8005560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005564:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800557c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	fa93 f2a3 	rbit	r2, r3
 8005586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <HAL_RCC_OscConfig+0x1078>)
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005598:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800559c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055a0:	6011      	str	r1, [r2, #0]
 80055a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055a6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	fa92 f1a2 	rbit	r1, r2
 80055b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055b4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80055b8:	6011      	str	r1, [r2, #0]
  return result;
 80055ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055be:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	fab2 f282 	clz	r2, r2
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	f042 0220 	orr.w	r2, r2, #32
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	f002 021f 	and.w	r2, r2, #31
 80055d4:	2101      	movs	r1, #1
 80055d6:	fa01 f202 	lsl.w	r2, r1, r2
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d180      	bne.n	80054e2 <HAL_RCC_OscConfig+0xf1a>
 80055e0:	e027      	b.n	8005632 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e01e      	b.n	8005634 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <HAL_RCC_OscConfig+0x1078>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005602:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	429a      	cmp	r2, r3
 8005614:	d10b      	bne.n	800562e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005616:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800561a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800561e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800562a:	429a      	cmp	r2, r3
 800562c:	d001      	beq.n	8005632 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000

08005644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b09e      	sub	sp, #120	; 0x78
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e162      	b.n	8005922 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800565c:	4b90      	ldr	r3, [pc, #576]	; (80058a0 <HAL_RCC_ClockConfig+0x25c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d910      	bls.n	800568c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566a:	4b8d      	ldr	r3, [pc, #564]	; (80058a0 <HAL_RCC_ClockConfig+0x25c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 0207 	bic.w	r2, r3, #7
 8005672:	498b      	ldr	r1, [pc, #556]	; (80058a0 <HAL_RCC_ClockConfig+0x25c>)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b89      	ldr	r3, [pc, #548]	; (80058a0 <HAL_RCC_ClockConfig+0x25c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e14a      	b.n	8005922 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005698:	4b82      	ldr	r3, [pc, #520]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	497f      	ldr	r1, [pc, #508]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80dc 	beq.w	8005870 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d13c      	bne.n	800573a <HAL_RCC_ClockConfig+0xf6>
 80056c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c8:	fa93 f3a3 	rbit	r3, r3
 80056cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80056ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d0:	fab3 f383 	clz	r3, r3
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d102      	bne.n	80056ea <HAL_RCC_ClockConfig+0xa6>
 80056e4:	4b6f      	ldr	r3, [pc, #444]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	e00f      	b.n	800570a <HAL_RCC_ClockConfig+0xc6>
 80056ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056f2:	fa93 f3a3 	rbit	r3, r3
 80056f6:	667b      	str	r3, [r7, #100]	; 0x64
 80056f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056fc:	663b      	str	r3, [r7, #96]	; 0x60
 80056fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005700:	fa93 f3a3 	rbit	r3, r3
 8005704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005706:	4b67      	ldr	r3, [pc, #412]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800570e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005712:	fa92 f2a2 	rbit	r2, r2
 8005716:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005718:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800571a:	fab2 f282 	clz	r2, r2
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	f042 0220 	orr.w	r2, r2, #32
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	f002 021f 	and.w	r2, r2, #31
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f202 	lsl.w	r2, r1, r2
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d17b      	bne.n	800582e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e0f3      	b.n	8005922 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d13c      	bne.n	80057bc <HAL_RCC_ClockConfig+0x178>
 8005742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005746:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574a:	fa93 f3a3 	rbit	r3, r3
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005752:	fab3 f383 	clz	r3, r3
 8005756:	b2db      	uxtb	r3, r3
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d102      	bne.n	800576c <HAL_RCC_ClockConfig+0x128>
 8005766:	4b4f      	ldr	r3, [pc, #316]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	e00f      	b.n	800578c <HAL_RCC_ClockConfig+0x148>
 800576c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005770:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005774:	fa93 f3a3 	rbit	r3, r3
 8005778:	647b      	str	r3, [r7, #68]	; 0x44
 800577a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800577e:	643b      	str	r3, [r7, #64]	; 0x40
 8005780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005782:	fa93 f3a3 	rbit	r3, r3
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005788:	4b46      	ldr	r3, [pc, #280]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005790:	63ba      	str	r2, [r7, #56]	; 0x38
 8005792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005794:	fa92 f2a2 	rbit	r2, r2
 8005798:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800579a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800579c:	fab2 f282 	clz	r2, r2
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	f042 0220 	orr.w	r2, r2, #32
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	f002 021f 	and.w	r2, r2, #31
 80057ac:	2101      	movs	r1, #1
 80057ae:	fa01 f202 	lsl.w	r2, r1, r2
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d13a      	bne.n	800582e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0b2      	b.n	8005922 <HAL_RCC_ClockConfig+0x2de>
 80057bc:	2302      	movs	r3, #2
 80057be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	fa93 f3a3 	rbit	r3, r3
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80057c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ca:	fab3 f383 	clz	r3, r3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d102      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x1a0>
 80057de:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	e00d      	b.n	8005800 <HAL_RCC_ClockConfig+0x1bc>
 80057e4:	2302      	movs	r3, #2
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	fa93 f3a3 	rbit	r3, r3
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
 80057f0:	2302      	movs	r3, #2
 80057f2:	623b      	str	r3, [r7, #32]
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	fa93 f3a3 	rbit	r3, r3
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	2202      	movs	r2, #2
 8005802:	61ba      	str	r2, [r7, #24]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	fa92 f2a2 	rbit	r2, r2
 800580a:	617a      	str	r2, [r7, #20]
  return result;
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	fab2 f282 	clz	r2, r2
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	f042 0220 	orr.w	r2, r2, #32
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	f002 021f 	and.w	r2, r2, #31
 800581e:	2101      	movs	r1, #1
 8005820:	fa01 f202 	lsl.w	r2, r1, r2
 8005824:	4013      	ands	r3, r2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e079      	b.n	8005922 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582e:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f023 0203 	bic.w	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	491a      	ldr	r1, [pc, #104]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 800583c:	4313      	orrs	r3, r2
 800583e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005840:	f7fd fb12 	bl	8002e68 <HAL_GetTick>
 8005844:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	e00a      	b.n	800585e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005848:	f7fd fb0e 	bl	8002e68 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e061      	b.n	8005922 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 020c 	and.w	r2, r3, #12
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	429a      	cmp	r2, r3
 800586e:	d1eb      	bne.n	8005848 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_ClockConfig+0x25c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d214      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <HAL_RCC_ClockConfig+0x25c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 0207 	bic.w	r2, r3, #7
 8005886:	4906      	ldr	r1, [pc, #24]	; (80058a0 <HAL_RCC_ClockConfig+0x25c>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <HAL_RCC_ClockConfig+0x25c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e040      	b.n	8005922 <HAL_RCC_ClockConfig+0x2de>
 80058a0:	40022000 	.word	0x40022000
 80058a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4b1d      	ldr	r3, [pc, #116]	; (800592c <HAL_RCC_ClockConfig+0x2e8>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	491a      	ldr	r1, [pc, #104]	; (800592c <HAL_RCC_ClockConfig+0x2e8>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058d2:	4b16      	ldr	r3, [pc, #88]	; (800592c <HAL_RCC_ClockConfig+0x2e8>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4912      	ldr	r1, [pc, #72]	; (800592c <HAL_RCC_ClockConfig+0x2e8>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80058e6:	f000 f829 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80058ea:	4601      	mov	r1, r0
 80058ec:	4b0f      	ldr	r3, [pc, #60]	; (800592c <HAL_RCC_ClockConfig+0x2e8>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f4:	22f0      	movs	r2, #240	; 0xf0
 80058f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	fa92 f2a2 	rbit	r2, r2
 80058fe:	60fa      	str	r2, [r7, #12]
  return result;
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	fab2 f282 	clz	r2, r2
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	40d3      	lsrs	r3, r2
 800590a:	4a09      	ldr	r2, [pc, #36]	; (8005930 <HAL_RCC_ClockConfig+0x2ec>)
 800590c:	5cd3      	ldrb	r3, [r2, r3]
 800590e:	fa21 f303 	lsr.w	r3, r1, r3
 8005912:	4a08      	ldr	r2, [pc, #32]	; (8005934 <HAL_RCC_ClockConfig+0x2f0>)
 8005914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <HAL_RCC_ClockConfig+0x2f4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7fd fa60 	bl	8002de0 <HAL_InitTick>
  
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3778      	adds	r7, #120	; 0x78
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000
 8005930:	080089b4 	.word	0x080089b4
 8005934:	2000005c 	.word	0x2000005c
 8005938:	20000060 	.word	0x20000060

0800593c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800593c:	b480      	push	{r7}
 800593e:	b08b      	sub	sp, #44	; 0x2c
 8005940:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005956:	4b29      	ldr	r3, [pc, #164]	; (80059fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b04      	cmp	r3, #4
 8005964:	d002      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x30>
 8005966:	2b08      	cmp	r3, #8
 8005968:	d003      	beq.n	8005972 <HAL_RCC_GetSysClockFreq+0x36>
 800596a:	e03c      	b.n	80059e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800596c:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_GetSysClockFreq+0xc4>)
 800596e:	623b      	str	r3, [r7, #32]
      break;
 8005970:	e03c      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005978:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800597c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	fa92 f2a2 	rbit	r2, r2
 8005984:	607a      	str	r2, [r7, #4]
  return result;
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	fab2 f282 	clz	r2, r2
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	40d3      	lsrs	r3, r2
 8005990:	4a1c      	ldr	r2, [pc, #112]	; (8005a04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005992:	5cd3      	ldrb	r3, [r2, r3]
 8005994:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005996:	4b19      	ldr	r3, [pc, #100]	; (80059fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	220f      	movs	r2, #15
 80059a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	fa92 f2a2 	rbit	r2, r2
 80059a8:	60fa      	str	r2, [r7, #12]
  return result;
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	fab2 f282 	clz	r2, r2
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	40d3      	lsrs	r3, r2
 80059b4:	4a14      	ldr	r2, [pc, #80]	; (8005a08 <HAL_RCC_GetSysClockFreq+0xcc>)
 80059b6:	5cd3      	ldrb	r3, [r2, r3]
 80059b8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80059c4:	4a0e      	ldr	r2, [pc, #56]	; (8005a00 <HAL_RCC_GetSysClockFreq+0xc4>)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
 80059d4:	e004      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	4a0c      	ldr	r2, [pc, #48]	; (8005a0c <HAL_RCC_GetSysClockFreq+0xd0>)
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	623b      	str	r3, [r7, #32]
      break;
 80059e4:	e002      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <HAL_RCC_GetSysClockFreq+0xc4>)
 80059e8:	623b      	str	r3, [r7, #32]
      break;
 80059ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ec:	6a3b      	ldr	r3, [r7, #32]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	372c      	adds	r7, #44	; 0x2c
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40021000 	.word	0x40021000
 8005a00:	007a1200 	.word	0x007a1200
 8005a04:	080089c4 	.word	0x080089c4
 8005a08:	080089d4 	.word	0x080089d4
 8005a0c:	003d0900 	.word	0x003d0900

08005a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b092      	sub	sp, #72	; 0x48
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 80cd 	beq.w	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a34:	4b86      	ldr	r3, [pc, #536]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10e      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a40:	4b83      	ldr	r3, [pc, #524]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	4a82      	ldr	r2, [pc, #520]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	61d3      	str	r3, [r2, #28]
 8005a4c:	4b80      	ldr	r3, [pc, #512]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5e:	4b7d      	ldr	r3, [pc, #500]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d118      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a6a:	4b7a      	ldr	r3, [pc, #488]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a79      	ldr	r2, [pc, #484]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a76:	f7fd f9f7 	bl	8002e68 <HAL_GetTick>
 8005a7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7c:	e008      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7e:	f7fd f9f3 	bl	8002e68 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b64      	cmp	r3, #100	; 0x64
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e0db      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a90:	4b70      	ldr	r3, [pc, #448]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a9c:	4b6c      	ldr	r3, [pc, #432]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d07d      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d076      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005aba:	4b65      	ldr	r3, [pc, #404]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ac8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	fa93 f3a3 	rbit	r3, r3
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ad4:	fab3 f383 	clz	r3, r3
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	4b5e      	ldr	r3, [pc, #376]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	fa93 f3a3 	rbit	r3, r3
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005af8:	fab3 f383 	clz	r3, r3
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	4b55      	ldr	r3, [pc, #340]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	461a      	mov	r2, r3
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b0c:	4a50      	ldr	r2, [pc, #320]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d045      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1c:	f7fd f9a4 	bl	8002e68 <HAL_GetTick>
 8005b20:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b22:	e00a      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b24:	f7fd f9a0 	bl	8002e68 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e086      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	fa93 f3a3 	rbit	r3, r3
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
 8005b46:	2302      	movs	r3, #2
 8005b48:	623b      	str	r3, [r7, #32]
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	fa93 f3a3 	rbit	r3, r3
 8005b50:	61fb      	str	r3, [r7, #28]
  return result;
 8005b52:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b54:	fab3 f383 	clz	r3, r3
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f043 0302 	orr.w	r3, r3, #2
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d102      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005b68:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	e007      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	fa93 f3a3 	rbit	r3, r3
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	4b35      	ldr	r3, [pc, #212]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2202      	movs	r2, #2
 8005b80:	613a      	str	r2, [r7, #16]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	fa92 f2a2 	rbit	r2, r2
 8005b88:	60fa      	str	r2, [r7, #12]
  return result;
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	fab2 f282 	clz	r2, r2
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	f002 021f 	and.w	r2, r2, #31
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0bd      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005ba8:	4b29      	ldr	r3, [pc, #164]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4926      	ldr	r1, [pc, #152]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d105      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc2:	4b23      	ldr	r3, [pc, #140]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	4a22      	ldr	r2, [pc, #136]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bda:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	f023 0203 	bic.w	r2, r3, #3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	491a      	ldr	r1, [pc, #104]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bf8:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfc:	f023 0210 	bic.w	r2, r3, #16
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4912      	ldr	r1, [pc, #72]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d008      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c16:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	490b      	ldr	r1, [pc, #44]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c34:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	4903      	ldr	r1, [pc, #12]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3748      	adds	r7, #72	; 0x48
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40007000 	.word	0x40007000
 8005c58:	10908100 	.word	0x10908100

08005c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e095      	b.n	8005d9a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d108      	bne.n	8005c88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c7e:	d009      	beq.n	8005c94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	61da      	str	r2, [r3, #28]
 8005c86:	e005      	b.n	8005c94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fc fed6 	bl	8002a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd4:	d902      	bls.n	8005cdc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	e002      	b.n	8005ce2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cea:	d007      	beq.n	8005cfc <HAL_SPI_Init+0xa0>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cf4:	d002      	beq.n	8005cfc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	ea42 0103 	orr.w	r1, r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	0c1b      	lsrs	r3, r3, #16
 8005d58:	f003 0204 	and.w	r2, r3, #4
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d78:	ea42 0103 	orr.w	r1, r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b088      	sub	sp, #32
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_SPI_Transmit+0x22>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e158      	b.n	8006076 <HAL_SPI_Transmit+0x2d4>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dcc:	f7fd f84c 	bl	8002e68 <HAL_GetTick>
 8005dd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d002      	beq.n	8005de8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005de2:	2302      	movs	r3, #2
 8005de4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005de6:	e13d      	b.n	8006064 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_SPI_Transmit+0x52>
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005df8:	e134      	b.n	8006064 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	88fa      	ldrh	r2, [r7, #6]
 8005e12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	d10f      	bne.n	8005e66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d007      	beq.n	8005e84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e8c:	d94b      	bls.n	8005f26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_SPI_Transmit+0xfa>
 8005e96:	8afb      	ldrh	r3, [r7, #22]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d13e      	bne.n	8005f1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	881a      	ldrh	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ec0:	e02b      	b.n	8005f1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d112      	bne.n	8005ef6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	881a      	ldrh	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	1c9a      	adds	r2, r3, #2
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ef4:	e011      	b.n	8005f1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ef6:	f7fc ffb7 	bl	8002e68 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d803      	bhi.n	8005f0e <HAL_SPI_Transmit+0x16c>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d102      	bne.n	8005f14 <HAL_SPI_Transmit+0x172>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f18:	e0a4      	b.n	8006064 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1ce      	bne.n	8005ec2 <HAL_SPI_Transmit+0x120>
 8005f24:	e07c      	b.n	8006020 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_SPI_Transmit+0x192>
 8005f2e:	8afb      	ldrh	r3, [r7, #22]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d170      	bne.n	8006016 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d912      	bls.n	8005f64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	881a      	ldrh	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	1c9a      	adds	r2, r3, #2
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b02      	subs	r3, #2
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f62:	e058      	b.n	8006016 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	7812      	ldrb	r2, [r2, #0]
 8005f70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f8a:	e044      	b.n	8006016 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d12b      	bne.n	8005ff2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d912      	bls.n	8005fca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	881a      	ldrh	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	1c9a      	adds	r2, r3, #2
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b02      	subs	r3, #2
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fc8:	e025      	b.n	8006016 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ff0:	e011      	b.n	8006016 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff2:	f7fc ff39 	bl	8002e68 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d803      	bhi.n	800600a <HAL_SPI_Transmit+0x268>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d102      	bne.n	8006010 <HAL_SPI_Transmit+0x26e>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006014:	e026      	b.n	8006064 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1b5      	bne.n	8005f8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f949 	bl	80062bc <SPI_EndRxTxTransaction>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e000      	b.n	8006064 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006074:	7ffb      	ldrb	r3, [r7, #31]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006090:	f7fc feea 	bl	8002e68 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a0:	f7fc fee2 	bl	8002e68 <HAL_GetTick>
 80060a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060a6:	4b39      	ldr	r3, [pc, #228]	; (800618c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	015b      	lsls	r3, r3, #5
 80060ac:	0d1b      	lsrs	r3, r3, #20
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	fb02 f303 	mul.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060b6:	e054      	b.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d050      	beq.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c0:	f7fc fed2 	bl	8002e68 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d902      	bls.n	80060d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d13d      	bne.n	8006152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ee:	d111      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f8:	d004      	beq.n	8006104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006102:	d107      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800611c:	d10f      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800613c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e017      	b.n	8006182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3b01      	subs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4013      	ands	r3, r2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	bf0c      	ite	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	2300      	movne	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	429a      	cmp	r2, r3
 800617e:	d19b      	bne.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	2000005c 	.word	0x2000005c

08006190 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061a2:	f7fc fe61 	bl	8002e68 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	4413      	add	r3, r2
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80061b2:	f7fc fe59 	bl	8002e68 <HAL_GetTick>
 80061b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061c0:	4b3d      	ldr	r3, [pc, #244]	; (80062b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	00da      	lsls	r2, r3, #3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	0d1b      	lsrs	r3, r3, #20
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061d8:	e060      	b.n	800629c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061e0:	d107      	bne.n	80061f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d050      	beq.n	800629c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061fa:	f7fc fe35 	bl	8002e68 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	429a      	cmp	r2, r3
 8006208:	d902      	bls.n	8006210 <SPI_WaitFifoStateUntilTimeout+0x80>
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d13d      	bne.n	800628c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800621e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006228:	d111      	bne.n	800624e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006232:	d004      	beq.n	800623e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d107      	bne.n	800624e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006256:	d10f      	bne.n	8006278 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006276:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e010      	b.n	80062ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	3b01      	subs	r3, #1
 800629a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4013      	ands	r3, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d196      	bne.n	80061da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3728      	adds	r7, #40	; 0x28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	2000005c 	.word	0x2000005c

080062bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff ff5b 	bl	8006190 <SPI_WaitFifoStateUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e027      	b.n	8006340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	2180      	movs	r1, #128	; 0x80
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fec0 	bl	8006080 <SPI_WaitFlagStateUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d007      	beq.n	8006316 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630a:	f043 0220 	orr.w	r2, r3, #32
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e014      	b.n	8006340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff ff34 	bl	8006190 <SPI_WaitFifoStateUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006332:	f043 0220 	orr.w	r2, r3, #32
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e000      	b.n	8006340 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e049      	b.n	80063ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fc fbd6 	bl	8002b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f000 f94a 	bl	8006620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006412:	2302      	movs	r3, #2
 8006414:	e0ff      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b14      	cmp	r3, #20
 8006422:	f200 80f0 	bhi.w	8006606 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006481 	.word	0x08006481
 8006430:	08006607 	.word	0x08006607
 8006434:	08006607 	.word	0x08006607
 8006438:	08006607 	.word	0x08006607
 800643c:	080064c1 	.word	0x080064c1
 8006440:	08006607 	.word	0x08006607
 8006444:	08006607 	.word	0x08006607
 8006448:	08006607 	.word	0x08006607
 800644c:	08006503 	.word	0x08006503
 8006450:	08006607 	.word	0x08006607
 8006454:	08006607 	.word	0x08006607
 8006458:	08006607 	.word	0x08006607
 800645c:	08006543 	.word	0x08006543
 8006460:	08006607 	.word	0x08006607
 8006464:	08006607 	.word	0x08006607
 8006468:	08006607 	.word	0x08006607
 800646c:	08006585 	.word	0x08006585
 8006470:	08006607 	.word	0x08006607
 8006474:	08006607 	.word	0x08006607
 8006478:	08006607 	.word	0x08006607
 800647c:	080065c5 	.word	0x080065c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f942 	bl	8006710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0208 	orr.w	r2, r2, #8
 800649a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0204 	bic.w	r2, r2, #4
 80064aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6999      	ldr	r1, [r3, #24]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691a      	ldr	r2, [r3, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	619a      	str	r2, [r3, #24]
      break;
 80064be:	e0a5      	b.n	800660c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f9a8 	bl	800681c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6999      	ldr	r1, [r3, #24]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	021a      	lsls	r2, r3, #8
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	619a      	str	r2, [r3, #24]
      break;
 8006500:	e084      	b.n	800660c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fa07 	bl	800691c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0208 	orr.w	r2, r2, #8
 800651c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0204 	bic.w	r2, r2, #4
 800652c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69d9      	ldr	r1, [r3, #28]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	61da      	str	r2, [r3, #28]
      break;
 8006540:	e064      	b.n	800660c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fa65 	bl	8006a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800655c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800656c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69d9      	ldr	r1, [r3, #28]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	021a      	lsls	r2, r3, #8
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	61da      	str	r2, [r3, #28]
      break;
 8006582:	e043      	b.n	800660c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 faa8 	bl	8006ae0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0208 	orr.w	r2, r2, #8
 800659e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0204 	bic.w	r2, r2, #4
 80065ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065c2:	e023      	b.n	800660c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68b9      	ldr	r1, [r7, #8]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fae6 	bl	8006b9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	021a      	lsls	r2, r3, #8
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006604:	e002      	b.n	800660c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
      break;
 800660a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006614:	7dfb      	ldrb	r3, [r7, #23]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop

08006620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a32      	ldr	r2, [pc, #200]	; (80066fc <TIM_Base_SetConfig+0xdc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_Base_SetConfig+0x28>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663e:	d003      	beq.n	8006648 <TIM_Base_SetConfig+0x28>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a2f      	ldr	r2, [pc, #188]	; (8006700 <TIM_Base_SetConfig+0xe0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d108      	bne.n	800665a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a27      	ldr	r2, [pc, #156]	; (80066fc <TIM_Base_SetConfig+0xdc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <TIM_Base_SetConfig+0x6a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006668:	d00f      	beq.n	800668a <TIM_Base_SetConfig+0x6a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a24      	ldr	r2, [pc, #144]	; (8006700 <TIM_Base_SetConfig+0xe0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_Base_SetConfig+0x6a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a23      	ldr	r2, [pc, #140]	; (8006704 <TIM_Base_SetConfig+0xe4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_Base_SetConfig+0x6a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a22      	ldr	r2, [pc, #136]	; (8006708 <TIM_Base_SetConfig+0xe8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_Base_SetConfig+0x6a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a21      	ldr	r2, [pc, #132]	; (800670c <TIM_Base_SetConfig+0xec>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d108      	bne.n	800669c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a0e      	ldr	r2, [pc, #56]	; (80066fc <TIM_Base_SetConfig+0xdc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00b      	beq.n	80066e0 <TIM_Base_SetConfig+0xc0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a0e      	ldr	r2, [pc, #56]	; (8006704 <TIM_Base_SetConfig+0xe4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <TIM_Base_SetConfig+0xc0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a0d      	ldr	r2, [pc, #52]	; (8006708 <TIM_Base_SetConfig+0xe8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_Base_SetConfig+0xc0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a0c      	ldr	r2, [pc, #48]	; (800670c <TIM_Base_SetConfig+0xec>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d103      	bne.n	80066e8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	615a      	str	r2, [r3, #20]
}
 80066ee:	bf00      	nop
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40000400 	.word	0x40000400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800

08006710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	f023 0201 	bic.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800673e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f023 0302 	bic.w	r3, r3, #2
 800675c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a28      	ldr	r2, [pc, #160]	; (800680c <TIM_OC1_SetConfig+0xfc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00b      	beq.n	8006788 <TIM_OC1_SetConfig+0x78>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a27      	ldr	r2, [pc, #156]	; (8006810 <TIM_OC1_SetConfig+0x100>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d007      	beq.n	8006788 <TIM_OC1_SetConfig+0x78>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a26      	ldr	r2, [pc, #152]	; (8006814 <TIM_OC1_SetConfig+0x104>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC1_SetConfig+0x78>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a25      	ldr	r2, [pc, #148]	; (8006818 <TIM_OC1_SetConfig+0x108>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d10c      	bne.n	80067a2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0308 	bic.w	r3, r3, #8
 800678e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f023 0304 	bic.w	r3, r3, #4
 80067a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a19      	ldr	r2, [pc, #100]	; (800680c <TIM_OC1_SetConfig+0xfc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00b      	beq.n	80067c2 <TIM_OC1_SetConfig+0xb2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a18      	ldr	r2, [pc, #96]	; (8006810 <TIM_OC1_SetConfig+0x100>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d007      	beq.n	80067c2 <TIM_OC1_SetConfig+0xb2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a17      	ldr	r2, [pc, #92]	; (8006814 <TIM_OC1_SetConfig+0x104>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_OC1_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a16      	ldr	r2, [pc, #88]	; (8006818 <TIM_OC1_SetConfig+0x108>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d111      	bne.n	80067e6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	621a      	str	r2, [r3, #32]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800

0800681c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f023 0210 	bic.w	r2, r3, #16
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800684a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f023 0320 	bic.w	r3, r3, #32
 800686a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a24      	ldr	r2, [pc, #144]	; (800690c <TIM_OC2_SetConfig+0xf0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d10d      	bne.n	800689c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a1b      	ldr	r2, [pc, #108]	; (800690c <TIM_OC2_SetConfig+0xf0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00b      	beq.n	80068bc <TIM_OC2_SetConfig+0xa0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a1a      	ldr	r2, [pc, #104]	; (8006910 <TIM_OC2_SetConfig+0xf4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d007      	beq.n	80068bc <TIM_OC2_SetConfig+0xa0>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a19      	ldr	r2, [pc, #100]	; (8006914 <TIM_OC2_SetConfig+0xf8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d003      	beq.n	80068bc <TIM_OC2_SetConfig+0xa0>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a18      	ldr	r2, [pc, #96]	; (8006918 <TIM_OC2_SetConfig+0xfc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d113      	bne.n	80068e4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068c2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40012c00 	.word	0x40012c00
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800

0800691c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a23      	ldr	r2, [pc, #140]	; (8006a08 <TIM_OC3_SetConfig+0xec>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d10d      	bne.n	800699a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006998:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a1a      	ldr	r2, [pc, #104]	; (8006a08 <TIM_OC3_SetConfig+0xec>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00b      	beq.n	80069ba <TIM_OC3_SetConfig+0x9e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a19      	ldr	r2, [pc, #100]	; (8006a0c <TIM_OC3_SetConfig+0xf0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <TIM_OC3_SetConfig+0x9e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a18      	ldr	r2, [pc, #96]	; (8006a10 <TIM_OC3_SetConfig+0xf4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_OC3_SetConfig+0x9e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a17      	ldr	r2, [pc, #92]	; (8006a14 <TIM_OC3_SetConfig+0xf8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d113      	bne.n	80069e2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	621a      	str	r2, [r3, #32]
}
 80069fc:	bf00      	nop
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400
 8006a14:	40014800 	.word	0x40014800

08006a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	031b      	lsls	r3, r3, #12
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <TIM_OC4_SetConfig+0xb8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00b      	beq.n	8006a94 <TIM_OC4_SetConfig+0x7c>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <TIM_OC4_SetConfig+0xbc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <TIM_OC4_SetConfig+0x7c>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <TIM_OC4_SetConfig+0xc0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC4_SetConfig+0x7c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a13      	ldr	r2, [pc, #76]	; (8006adc <TIM_OC4_SetConfig+0xc4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d109      	bne.n	8006aa8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	019b      	lsls	r3, r3, #6
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40014000 	.word	0x40014000
 8006ad8:	40014400 	.word	0x40014400
 8006adc:	40014800 	.word	0x40014800

08006ae0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	041b      	lsls	r3, r3, #16
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <TIM_OC5_SetConfig+0xac>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00b      	beq.n	8006b52 <TIM_OC5_SetConfig+0x72>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a14      	ldr	r2, [pc, #80]	; (8006b90 <TIM_OC5_SetConfig+0xb0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d007      	beq.n	8006b52 <TIM_OC5_SetConfig+0x72>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a13      	ldr	r2, [pc, #76]	; (8006b94 <TIM_OC5_SetConfig+0xb4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_OC5_SetConfig+0x72>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a12      	ldr	r2, [pc, #72]	; (8006b98 <TIM_OC5_SetConfig+0xb8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d109      	bne.n	8006b66 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	621a      	str	r2, [r3, #32]
}
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40014000 	.word	0x40014000
 8006b94:	40014400 	.word	0x40014400
 8006b98:	40014800 	.word	0x40014800

08006b9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	051b      	lsls	r3, r3, #20
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a16      	ldr	r2, [pc, #88]	; (8006c4c <TIM_OC6_SetConfig+0xb0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00b      	beq.n	8006c10 <TIM_OC6_SetConfig+0x74>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <TIM_OC6_SetConfig+0xb4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d007      	beq.n	8006c10 <TIM_OC6_SetConfig+0x74>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <TIM_OC6_SetConfig+0xb8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_OC6_SetConfig+0x74>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <TIM_OC6_SetConfig+0xbc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d109      	bne.n	8006c24 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	029b      	lsls	r3, r3, #10
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40012c00 	.word	0x40012c00
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40014400 	.word	0x40014400
 8006c58:	40014800 	.word	0x40014800

08006c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e054      	b.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d108      	bne.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ca4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a17      	ldr	r2, [pc, #92]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cdc:	d009      	beq.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d10c      	bne.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40014000 	.word	0x40014000

08006d38 <__errno>:
 8006d38:	4b01      	ldr	r3, [pc, #4]	; (8006d40 <__errno+0x8>)
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	20000068 	.word	0x20000068

08006d44 <__libc_init_array>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	4d0d      	ldr	r5, [pc, #52]	; (8006d7c <__libc_init_array+0x38>)
 8006d48:	4c0d      	ldr	r4, [pc, #52]	; (8006d80 <__libc_init_array+0x3c>)
 8006d4a:	1b64      	subs	r4, r4, r5
 8006d4c:	10a4      	asrs	r4, r4, #2
 8006d4e:	2600      	movs	r6, #0
 8006d50:	42a6      	cmp	r6, r4
 8006d52:	d109      	bne.n	8006d68 <__libc_init_array+0x24>
 8006d54:	4d0b      	ldr	r5, [pc, #44]	; (8006d84 <__libc_init_array+0x40>)
 8006d56:	4c0c      	ldr	r4, [pc, #48]	; (8006d88 <__libc_init_array+0x44>)
 8006d58:	f001 fa96 	bl	8008288 <_init>
 8006d5c:	1b64      	subs	r4, r4, r5
 8006d5e:	10a4      	asrs	r4, r4, #2
 8006d60:	2600      	movs	r6, #0
 8006d62:	42a6      	cmp	r6, r4
 8006d64:	d105      	bne.n	8006d72 <__libc_init_array+0x2e>
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6c:	4798      	blx	r3
 8006d6e:	3601      	adds	r6, #1
 8006d70:	e7ee      	b.n	8006d50 <__libc_init_array+0xc>
 8006d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d76:	4798      	blx	r3
 8006d78:	3601      	adds	r6, #1
 8006d7a:	e7f2      	b.n	8006d62 <__libc_init_array+0x1e>
 8006d7c:	08008b2c 	.word	0x08008b2c
 8006d80:	08008b2c 	.word	0x08008b2c
 8006d84:	08008b2c 	.word	0x08008b2c
 8006d88:	08008b30 	.word	0x08008b30

08006d8c <memcpy>:
 8006d8c:	440a      	add	r2, r1
 8006d8e:	4291      	cmp	r1, r2
 8006d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d94:	d100      	bne.n	8006d98 <memcpy+0xc>
 8006d96:	4770      	bx	lr
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006da2:	4291      	cmp	r1, r2
 8006da4:	d1f9      	bne.n	8006d9a <memcpy+0xe>
 8006da6:	bd10      	pop	{r4, pc}

08006da8 <memset>:
 8006da8:	4402      	add	r2, r0
 8006daa:	4603      	mov	r3, r0
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d100      	bne.n	8006db2 <memset+0xa>
 8006db0:	4770      	bx	lr
 8006db2:	f803 1b01 	strb.w	r1, [r3], #1
 8006db6:	e7f9      	b.n	8006dac <memset+0x4>

08006db8 <srand>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <srand+0x44>)
 8006dbc:	681d      	ldr	r5, [r3, #0]
 8006dbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	b9b3      	cbnz	r3, 8006df2 <srand+0x3a>
 8006dc4:	2018      	movs	r0, #24
 8006dc6:	f000 f8df 	bl	8006f88 <malloc>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	63a8      	str	r0, [r5, #56]	; 0x38
 8006dce:	b920      	cbnz	r0, 8006dda <srand+0x22>
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <srand+0x48>)
 8006dd2:	480c      	ldr	r0, [pc, #48]	; (8006e04 <srand+0x4c>)
 8006dd4:	2142      	movs	r1, #66	; 0x42
 8006dd6:	f000 f895 	bl	8006f04 <__assert_func>
 8006dda:	490b      	ldr	r1, [pc, #44]	; (8006e08 <srand+0x50>)
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <srand+0x54>)
 8006dde:	e9c0 1300 	strd	r1, r3, [r0]
 8006de2:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <srand+0x58>)
 8006de4:	6083      	str	r3, [r0, #8]
 8006de6:	230b      	movs	r3, #11
 8006de8:	8183      	strh	r3, [r0, #12]
 8006dea:	2100      	movs	r1, #0
 8006dec:	2001      	movs	r0, #1
 8006dee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006df2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006df4:	2200      	movs	r2, #0
 8006df6:	611c      	str	r4, [r3, #16]
 8006df8:	615a      	str	r2, [r3, #20]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	20000068 	.word	0x20000068
 8006e00:	080089e8 	.word	0x080089e8
 8006e04:	080089ff 	.word	0x080089ff
 8006e08:	abcd330e 	.word	0xabcd330e
 8006e0c:	e66d1234 	.word	0xe66d1234
 8006e10:	0005deec 	.word	0x0005deec

08006e14 <rand>:
 8006e14:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <rand+0x5c>)
 8006e16:	b510      	push	{r4, lr}
 8006e18:	681c      	ldr	r4, [r3, #0]
 8006e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e1c:	b9b3      	cbnz	r3, 8006e4c <rand+0x38>
 8006e1e:	2018      	movs	r0, #24
 8006e20:	f000 f8b2 	bl	8006f88 <malloc>
 8006e24:	63a0      	str	r0, [r4, #56]	; 0x38
 8006e26:	b928      	cbnz	r0, 8006e34 <rand+0x20>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <rand+0x60>)
 8006e2c:	4812      	ldr	r0, [pc, #72]	; (8006e78 <rand+0x64>)
 8006e2e:	214e      	movs	r1, #78	; 0x4e
 8006e30:	f000 f868 	bl	8006f04 <__assert_func>
 8006e34:	4a11      	ldr	r2, [pc, #68]	; (8006e7c <rand+0x68>)
 8006e36:	4b12      	ldr	r3, [pc, #72]	; (8006e80 <rand+0x6c>)
 8006e38:	e9c0 2300 	strd	r2, r3, [r0]
 8006e3c:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <rand+0x70>)
 8006e3e:	6083      	str	r3, [r0, #8]
 8006e40:	230b      	movs	r3, #11
 8006e42:	8183      	strh	r3, [r0, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	2300      	movs	r3, #0
 8006e48:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006e4c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006e4e:	4a0e      	ldr	r2, [pc, #56]	; (8006e88 <rand+0x74>)
 8006e50:	6920      	ldr	r0, [r4, #16]
 8006e52:	6963      	ldr	r3, [r4, #20]
 8006e54:	490d      	ldr	r1, [pc, #52]	; (8006e8c <rand+0x78>)
 8006e56:	4342      	muls	r2, r0
 8006e58:	fb01 2203 	mla	r2, r1, r3, r2
 8006e5c:	fba0 0101 	umull	r0, r1, r0, r1
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	eb42 0001 	adc.w	r0, r2, r1
 8006e66:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006e6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006e6e:	bd10      	pop	{r4, pc}
 8006e70:	20000068 	.word	0x20000068
 8006e74:	080089e8 	.word	0x080089e8
 8006e78:	080089ff 	.word	0x080089ff
 8006e7c:	abcd330e 	.word	0xabcd330e
 8006e80:	e66d1234 	.word	0xe66d1234
 8006e84:	0005deec 	.word	0x0005deec
 8006e88:	5851f42d 	.word	0x5851f42d
 8006e8c:	4c957f2d 	.word	0x4c957f2d

08006e90 <siprintf>:
 8006e90:	b40e      	push	{r1, r2, r3}
 8006e92:	b500      	push	{lr}
 8006e94:	b09c      	sub	sp, #112	; 0x70
 8006e96:	ab1d      	add	r3, sp, #116	; 0x74
 8006e98:	9002      	str	r0, [sp, #8]
 8006e9a:	9006      	str	r0, [sp, #24]
 8006e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ea0:	4809      	ldr	r0, [pc, #36]	; (8006ec8 <siprintf+0x38>)
 8006ea2:	9107      	str	r1, [sp, #28]
 8006ea4:	9104      	str	r1, [sp, #16]
 8006ea6:	4909      	ldr	r1, [pc, #36]	; (8006ecc <siprintf+0x3c>)
 8006ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eac:	9105      	str	r1, [sp, #20]
 8006eae:	6800      	ldr	r0, [r0, #0]
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	a902      	add	r1, sp, #8
 8006eb4:	f000 f9ac 	bl	8007210 <_svfiprintf_r>
 8006eb8:	9b02      	ldr	r3, [sp, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	b01c      	add	sp, #112	; 0x70
 8006ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec4:	b003      	add	sp, #12
 8006ec6:	4770      	bx	lr
 8006ec8:	20000068 	.word	0x20000068
 8006ecc:	ffff0208 	.word	0xffff0208

08006ed0 <time>:
 8006ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ed2:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <time+0x30>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4669      	mov	r1, sp
 8006ed8:	4604      	mov	r4, r0
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	f000 f842 	bl	8006f64 <_gettimeofday_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	bfbe      	ittt	lt
 8006ee4:	f04f 32ff 	movlt.w	r2, #4294967295
 8006ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eec:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ef4:	b10c      	cbz	r4, 8006efa <time+0x2a>
 8006ef6:	e9c4 0100 	strd	r0, r1, [r4]
 8006efa:	b004      	add	sp, #16
 8006efc:	bd10      	pop	{r4, pc}
 8006efe:	bf00      	nop
 8006f00:	20000068 	.word	0x20000068

08006f04 <__assert_func>:
 8006f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f06:	4614      	mov	r4, r2
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <__assert_func+0x2c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4605      	mov	r5, r0
 8006f10:	68d8      	ldr	r0, [r3, #12]
 8006f12:	b14c      	cbz	r4, 8006f28 <__assert_func+0x24>
 8006f14:	4b07      	ldr	r3, [pc, #28]	; (8006f34 <__assert_func+0x30>)
 8006f16:	9100      	str	r1, [sp, #0]
 8006f18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f1c:	4906      	ldr	r1, [pc, #24]	; (8006f38 <__assert_func+0x34>)
 8006f1e:	462b      	mov	r3, r5
 8006f20:	f000 f80e 	bl	8006f40 <fiprintf>
 8006f24:	f000 fe32 	bl	8007b8c <abort>
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <__assert_func+0x38>)
 8006f2a:	461c      	mov	r4, r3
 8006f2c:	e7f3      	b.n	8006f16 <__assert_func+0x12>
 8006f2e:	bf00      	nop
 8006f30:	20000068 	.word	0x20000068
 8006f34:	08008a5a 	.word	0x08008a5a
 8006f38:	08008a67 	.word	0x08008a67
 8006f3c:	08008a95 	.word	0x08008a95

08006f40 <fiprintf>:
 8006f40:	b40e      	push	{r1, r2, r3}
 8006f42:	b503      	push	{r0, r1, lr}
 8006f44:	4601      	mov	r1, r0
 8006f46:	ab03      	add	r3, sp, #12
 8006f48:	4805      	ldr	r0, [pc, #20]	; (8006f60 <fiprintf+0x20>)
 8006f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f4e:	6800      	ldr	r0, [r0, #0]
 8006f50:	9301      	str	r3, [sp, #4]
 8006f52:	f000 fa87 	bl	8007464 <_vfiprintf_r>
 8006f56:	b002      	add	sp, #8
 8006f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f5c:	b003      	add	sp, #12
 8006f5e:	4770      	bx	lr
 8006f60:	20000068 	.word	0x20000068

08006f64 <_gettimeofday_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d07      	ldr	r5, [pc, #28]	; (8006f84 <_gettimeofday_r+0x20>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	4611      	mov	r1, r2
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	f001 f981 	bl	8008278 <_gettimeofday>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d102      	bne.n	8006f80 <_gettimeofday_r+0x1c>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	b103      	cbz	r3, 8006f80 <_gettimeofday_r+0x1c>
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	bd38      	pop	{r3, r4, r5, pc}
 8006f82:	bf00      	nop
 8006f84:	20000930 	.word	0x20000930

08006f88 <malloc>:
 8006f88:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <malloc+0xc>)
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	f000 b86f 	b.w	8007070 <_malloc_r>
 8006f92:	bf00      	nop
 8006f94:	20000068 	.word	0x20000068

08006f98 <_free_r>:
 8006f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f9a:	2900      	cmp	r1, #0
 8006f9c:	d044      	beq.n	8007028 <_free_r+0x90>
 8006f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa2:	9001      	str	r0, [sp, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8006faa:	bfb8      	it	lt
 8006fac:	18e4      	addlt	r4, r4, r3
 8006fae:	f001 f82f 	bl	8008010 <__malloc_lock>
 8006fb2:	4a1e      	ldr	r2, [pc, #120]	; (800702c <_free_r+0x94>)
 8006fb4:	9801      	ldr	r0, [sp, #4]
 8006fb6:	6813      	ldr	r3, [r2, #0]
 8006fb8:	b933      	cbnz	r3, 8006fc8 <_free_r+0x30>
 8006fba:	6063      	str	r3, [r4, #4]
 8006fbc:	6014      	str	r4, [r2, #0]
 8006fbe:	b003      	add	sp, #12
 8006fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fc4:	f001 b82a 	b.w	800801c <__malloc_unlock>
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	d908      	bls.n	8006fde <_free_r+0x46>
 8006fcc:	6825      	ldr	r5, [r4, #0]
 8006fce:	1961      	adds	r1, r4, r5
 8006fd0:	428b      	cmp	r3, r1
 8006fd2:	bf01      	itttt	eq
 8006fd4:	6819      	ldreq	r1, [r3, #0]
 8006fd6:	685b      	ldreq	r3, [r3, #4]
 8006fd8:	1949      	addeq	r1, r1, r5
 8006fda:	6021      	streq	r1, [r4, #0]
 8006fdc:	e7ed      	b.n	8006fba <_free_r+0x22>
 8006fde:	461a      	mov	r2, r3
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	b10b      	cbz	r3, 8006fe8 <_free_r+0x50>
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	d9fa      	bls.n	8006fde <_free_r+0x46>
 8006fe8:	6811      	ldr	r1, [r2, #0]
 8006fea:	1855      	adds	r5, r2, r1
 8006fec:	42a5      	cmp	r5, r4
 8006fee:	d10b      	bne.n	8007008 <_free_r+0x70>
 8006ff0:	6824      	ldr	r4, [r4, #0]
 8006ff2:	4421      	add	r1, r4
 8006ff4:	1854      	adds	r4, r2, r1
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	6011      	str	r1, [r2, #0]
 8006ffa:	d1e0      	bne.n	8006fbe <_free_r+0x26>
 8006ffc:	681c      	ldr	r4, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	6053      	str	r3, [r2, #4]
 8007002:	4421      	add	r1, r4
 8007004:	6011      	str	r1, [r2, #0]
 8007006:	e7da      	b.n	8006fbe <_free_r+0x26>
 8007008:	d902      	bls.n	8007010 <_free_r+0x78>
 800700a:	230c      	movs	r3, #12
 800700c:	6003      	str	r3, [r0, #0]
 800700e:	e7d6      	b.n	8006fbe <_free_r+0x26>
 8007010:	6825      	ldr	r5, [r4, #0]
 8007012:	1961      	adds	r1, r4, r5
 8007014:	428b      	cmp	r3, r1
 8007016:	bf04      	itt	eq
 8007018:	6819      	ldreq	r1, [r3, #0]
 800701a:	685b      	ldreq	r3, [r3, #4]
 800701c:	6063      	str	r3, [r4, #4]
 800701e:	bf04      	itt	eq
 8007020:	1949      	addeq	r1, r1, r5
 8007022:	6021      	streq	r1, [r4, #0]
 8007024:	6054      	str	r4, [r2, #4]
 8007026:	e7ca      	b.n	8006fbe <_free_r+0x26>
 8007028:	b003      	add	sp, #12
 800702a:	bd30      	pop	{r4, r5, pc}
 800702c:	20000928 	.word	0x20000928

08007030 <sbrk_aligned>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	4e0e      	ldr	r6, [pc, #56]	; (800706c <sbrk_aligned+0x3c>)
 8007034:	460c      	mov	r4, r1
 8007036:	6831      	ldr	r1, [r6, #0]
 8007038:	4605      	mov	r5, r0
 800703a:	b911      	cbnz	r1, 8007042 <sbrk_aligned+0x12>
 800703c:	f000 fcd6 	bl	80079ec <_sbrk_r>
 8007040:	6030      	str	r0, [r6, #0]
 8007042:	4621      	mov	r1, r4
 8007044:	4628      	mov	r0, r5
 8007046:	f000 fcd1 	bl	80079ec <_sbrk_r>
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	d00a      	beq.n	8007064 <sbrk_aligned+0x34>
 800704e:	1cc4      	adds	r4, r0, #3
 8007050:	f024 0403 	bic.w	r4, r4, #3
 8007054:	42a0      	cmp	r0, r4
 8007056:	d007      	beq.n	8007068 <sbrk_aligned+0x38>
 8007058:	1a21      	subs	r1, r4, r0
 800705a:	4628      	mov	r0, r5
 800705c:	f000 fcc6 	bl	80079ec <_sbrk_r>
 8007060:	3001      	adds	r0, #1
 8007062:	d101      	bne.n	8007068 <sbrk_aligned+0x38>
 8007064:	f04f 34ff 	mov.w	r4, #4294967295
 8007068:	4620      	mov	r0, r4
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	2000092c 	.word	0x2000092c

08007070 <_malloc_r>:
 8007070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007074:	1ccd      	adds	r5, r1, #3
 8007076:	f025 0503 	bic.w	r5, r5, #3
 800707a:	3508      	adds	r5, #8
 800707c:	2d0c      	cmp	r5, #12
 800707e:	bf38      	it	cc
 8007080:	250c      	movcc	r5, #12
 8007082:	2d00      	cmp	r5, #0
 8007084:	4607      	mov	r7, r0
 8007086:	db01      	blt.n	800708c <_malloc_r+0x1c>
 8007088:	42a9      	cmp	r1, r5
 800708a:	d905      	bls.n	8007098 <_malloc_r+0x28>
 800708c:	230c      	movs	r3, #12
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	2600      	movs	r6, #0
 8007092:	4630      	mov	r0, r6
 8007094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007098:	4e2e      	ldr	r6, [pc, #184]	; (8007154 <_malloc_r+0xe4>)
 800709a:	f000 ffb9 	bl	8008010 <__malloc_lock>
 800709e:	6833      	ldr	r3, [r6, #0]
 80070a0:	461c      	mov	r4, r3
 80070a2:	bb34      	cbnz	r4, 80070f2 <_malloc_r+0x82>
 80070a4:	4629      	mov	r1, r5
 80070a6:	4638      	mov	r0, r7
 80070a8:	f7ff ffc2 	bl	8007030 <sbrk_aligned>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	4604      	mov	r4, r0
 80070b0:	d14d      	bne.n	800714e <_malloc_r+0xde>
 80070b2:	6834      	ldr	r4, [r6, #0]
 80070b4:	4626      	mov	r6, r4
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	d140      	bne.n	800713c <_malloc_r+0xcc>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	4631      	mov	r1, r6
 80070be:	4638      	mov	r0, r7
 80070c0:	eb04 0803 	add.w	r8, r4, r3
 80070c4:	f000 fc92 	bl	80079ec <_sbrk_r>
 80070c8:	4580      	cmp	r8, r0
 80070ca:	d13a      	bne.n	8007142 <_malloc_r+0xd2>
 80070cc:	6821      	ldr	r1, [r4, #0]
 80070ce:	3503      	adds	r5, #3
 80070d0:	1a6d      	subs	r5, r5, r1
 80070d2:	f025 0503 	bic.w	r5, r5, #3
 80070d6:	3508      	adds	r5, #8
 80070d8:	2d0c      	cmp	r5, #12
 80070da:	bf38      	it	cc
 80070dc:	250c      	movcc	r5, #12
 80070de:	4629      	mov	r1, r5
 80070e0:	4638      	mov	r0, r7
 80070e2:	f7ff ffa5 	bl	8007030 <sbrk_aligned>
 80070e6:	3001      	adds	r0, #1
 80070e8:	d02b      	beq.n	8007142 <_malloc_r+0xd2>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	442b      	add	r3, r5
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	e00e      	b.n	8007110 <_malloc_r+0xa0>
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	1b52      	subs	r2, r2, r5
 80070f6:	d41e      	bmi.n	8007136 <_malloc_r+0xc6>
 80070f8:	2a0b      	cmp	r2, #11
 80070fa:	d916      	bls.n	800712a <_malloc_r+0xba>
 80070fc:	1961      	adds	r1, r4, r5
 80070fe:	42a3      	cmp	r3, r4
 8007100:	6025      	str	r5, [r4, #0]
 8007102:	bf18      	it	ne
 8007104:	6059      	strne	r1, [r3, #4]
 8007106:	6863      	ldr	r3, [r4, #4]
 8007108:	bf08      	it	eq
 800710a:	6031      	streq	r1, [r6, #0]
 800710c:	5162      	str	r2, [r4, r5]
 800710e:	604b      	str	r3, [r1, #4]
 8007110:	4638      	mov	r0, r7
 8007112:	f104 060b 	add.w	r6, r4, #11
 8007116:	f000 ff81 	bl	800801c <__malloc_unlock>
 800711a:	f026 0607 	bic.w	r6, r6, #7
 800711e:	1d23      	adds	r3, r4, #4
 8007120:	1af2      	subs	r2, r6, r3
 8007122:	d0b6      	beq.n	8007092 <_malloc_r+0x22>
 8007124:	1b9b      	subs	r3, r3, r6
 8007126:	50a3      	str	r3, [r4, r2]
 8007128:	e7b3      	b.n	8007092 <_malloc_r+0x22>
 800712a:	6862      	ldr	r2, [r4, #4]
 800712c:	42a3      	cmp	r3, r4
 800712e:	bf0c      	ite	eq
 8007130:	6032      	streq	r2, [r6, #0]
 8007132:	605a      	strne	r2, [r3, #4]
 8007134:	e7ec      	b.n	8007110 <_malloc_r+0xa0>
 8007136:	4623      	mov	r3, r4
 8007138:	6864      	ldr	r4, [r4, #4]
 800713a:	e7b2      	b.n	80070a2 <_malloc_r+0x32>
 800713c:	4634      	mov	r4, r6
 800713e:	6876      	ldr	r6, [r6, #4]
 8007140:	e7b9      	b.n	80070b6 <_malloc_r+0x46>
 8007142:	230c      	movs	r3, #12
 8007144:	603b      	str	r3, [r7, #0]
 8007146:	4638      	mov	r0, r7
 8007148:	f000 ff68 	bl	800801c <__malloc_unlock>
 800714c:	e7a1      	b.n	8007092 <_malloc_r+0x22>
 800714e:	6025      	str	r5, [r4, #0]
 8007150:	e7de      	b.n	8007110 <_malloc_r+0xa0>
 8007152:	bf00      	nop
 8007154:	20000928 	.word	0x20000928

08007158 <__ssputs_r>:
 8007158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800715c:	688e      	ldr	r6, [r1, #8]
 800715e:	429e      	cmp	r6, r3
 8007160:	4682      	mov	sl, r0
 8007162:	460c      	mov	r4, r1
 8007164:	4690      	mov	r8, r2
 8007166:	461f      	mov	r7, r3
 8007168:	d838      	bhi.n	80071dc <__ssputs_r+0x84>
 800716a:	898a      	ldrh	r2, [r1, #12]
 800716c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007170:	d032      	beq.n	80071d8 <__ssputs_r+0x80>
 8007172:	6825      	ldr	r5, [r4, #0]
 8007174:	6909      	ldr	r1, [r1, #16]
 8007176:	eba5 0901 	sub.w	r9, r5, r1
 800717a:	6965      	ldr	r5, [r4, #20]
 800717c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007180:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007184:	3301      	adds	r3, #1
 8007186:	444b      	add	r3, r9
 8007188:	106d      	asrs	r5, r5, #1
 800718a:	429d      	cmp	r5, r3
 800718c:	bf38      	it	cc
 800718e:	461d      	movcc	r5, r3
 8007190:	0553      	lsls	r3, r2, #21
 8007192:	d531      	bpl.n	80071f8 <__ssputs_r+0xa0>
 8007194:	4629      	mov	r1, r5
 8007196:	f7ff ff6b 	bl	8007070 <_malloc_r>
 800719a:	4606      	mov	r6, r0
 800719c:	b950      	cbnz	r0, 80071b4 <__ssputs_r+0x5c>
 800719e:	230c      	movs	r3, #12
 80071a0:	f8ca 3000 	str.w	r3, [sl]
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295
 80071b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b4:	6921      	ldr	r1, [r4, #16]
 80071b6:	464a      	mov	r2, r9
 80071b8:	f7ff fde8 	bl	8006d8c <memcpy>
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c6:	81a3      	strh	r3, [r4, #12]
 80071c8:	6126      	str	r6, [r4, #16]
 80071ca:	6165      	str	r5, [r4, #20]
 80071cc:	444e      	add	r6, r9
 80071ce:	eba5 0509 	sub.w	r5, r5, r9
 80071d2:	6026      	str	r6, [r4, #0]
 80071d4:	60a5      	str	r5, [r4, #8]
 80071d6:	463e      	mov	r6, r7
 80071d8:	42be      	cmp	r6, r7
 80071da:	d900      	bls.n	80071de <__ssputs_r+0x86>
 80071dc:	463e      	mov	r6, r7
 80071de:	6820      	ldr	r0, [r4, #0]
 80071e0:	4632      	mov	r2, r6
 80071e2:	4641      	mov	r1, r8
 80071e4:	f000 fefa 	bl	8007fdc <memmove>
 80071e8:	68a3      	ldr	r3, [r4, #8]
 80071ea:	1b9b      	subs	r3, r3, r6
 80071ec:	60a3      	str	r3, [r4, #8]
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	4433      	add	r3, r6
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	2000      	movs	r0, #0
 80071f6:	e7db      	b.n	80071b0 <__ssputs_r+0x58>
 80071f8:	462a      	mov	r2, r5
 80071fa:	f000 ff15 	bl	8008028 <_realloc_r>
 80071fe:	4606      	mov	r6, r0
 8007200:	2800      	cmp	r0, #0
 8007202:	d1e1      	bne.n	80071c8 <__ssputs_r+0x70>
 8007204:	6921      	ldr	r1, [r4, #16]
 8007206:	4650      	mov	r0, sl
 8007208:	f7ff fec6 	bl	8006f98 <_free_r>
 800720c:	e7c7      	b.n	800719e <__ssputs_r+0x46>
	...

08007210 <_svfiprintf_r>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	4698      	mov	r8, r3
 8007216:	898b      	ldrh	r3, [r1, #12]
 8007218:	061b      	lsls	r3, r3, #24
 800721a:	b09d      	sub	sp, #116	; 0x74
 800721c:	4607      	mov	r7, r0
 800721e:	460d      	mov	r5, r1
 8007220:	4614      	mov	r4, r2
 8007222:	d50e      	bpl.n	8007242 <_svfiprintf_r+0x32>
 8007224:	690b      	ldr	r3, [r1, #16]
 8007226:	b963      	cbnz	r3, 8007242 <_svfiprintf_r+0x32>
 8007228:	2140      	movs	r1, #64	; 0x40
 800722a:	f7ff ff21 	bl	8007070 <_malloc_r>
 800722e:	6028      	str	r0, [r5, #0]
 8007230:	6128      	str	r0, [r5, #16]
 8007232:	b920      	cbnz	r0, 800723e <_svfiprintf_r+0x2e>
 8007234:	230c      	movs	r3, #12
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e0d1      	b.n	80073e2 <_svfiprintf_r+0x1d2>
 800723e:	2340      	movs	r3, #64	; 0x40
 8007240:	616b      	str	r3, [r5, #20]
 8007242:	2300      	movs	r3, #0
 8007244:	9309      	str	r3, [sp, #36]	; 0x24
 8007246:	2320      	movs	r3, #32
 8007248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800724c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007250:	2330      	movs	r3, #48	; 0x30
 8007252:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073fc <_svfiprintf_r+0x1ec>
 8007256:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800725a:	f04f 0901 	mov.w	r9, #1
 800725e:	4623      	mov	r3, r4
 8007260:	469a      	mov	sl, r3
 8007262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007266:	b10a      	cbz	r2, 800726c <_svfiprintf_r+0x5c>
 8007268:	2a25      	cmp	r2, #37	; 0x25
 800726a:	d1f9      	bne.n	8007260 <_svfiprintf_r+0x50>
 800726c:	ebba 0b04 	subs.w	fp, sl, r4
 8007270:	d00b      	beq.n	800728a <_svfiprintf_r+0x7a>
 8007272:	465b      	mov	r3, fp
 8007274:	4622      	mov	r2, r4
 8007276:	4629      	mov	r1, r5
 8007278:	4638      	mov	r0, r7
 800727a:	f7ff ff6d 	bl	8007158 <__ssputs_r>
 800727e:	3001      	adds	r0, #1
 8007280:	f000 80aa 	beq.w	80073d8 <_svfiprintf_r+0x1c8>
 8007284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007286:	445a      	add	r2, fp
 8007288:	9209      	str	r2, [sp, #36]	; 0x24
 800728a:	f89a 3000 	ldrb.w	r3, [sl]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 80a2 	beq.w	80073d8 <_svfiprintf_r+0x1c8>
 8007294:	2300      	movs	r3, #0
 8007296:	f04f 32ff 	mov.w	r2, #4294967295
 800729a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800729e:	f10a 0a01 	add.w	sl, sl, #1
 80072a2:	9304      	str	r3, [sp, #16]
 80072a4:	9307      	str	r3, [sp, #28]
 80072a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072aa:	931a      	str	r3, [sp, #104]	; 0x68
 80072ac:	4654      	mov	r4, sl
 80072ae:	2205      	movs	r2, #5
 80072b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b4:	4851      	ldr	r0, [pc, #324]	; (80073fc <_svfiprintf_r+0x1ec>)
 80072b6:	f7f8 ff93 	bl	80001e0 <memchr>
 80072ba:	9a04      	ldr	r2, [sp, #16]
 80072bc:	b9d8      	cbnz	r0, 80072f6 <_svfiprintf_r+0xe6>
 80072be:	06d0      	lsls	r0, r2, #27
 80072c0:	bf44      	itt	mi
 80072c2:	2320      	movmi	r3, #32
 80072c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c8:	0711      	lsls	r1, r2, #28
 80072ca:	bf44      	itt	mi
 80072cc:	232b      	movmi	r3, #43	; 0x2b
 80072ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d2:	f89a 3000 	ldrb.w	r3, [sl]
 80072d6:	2b2a      	cmp	r3, #42	; 0x2a
 80072d8:	d015      	beq.n	8007306 <_svfiprintf_r+0xf6>
 80072da:	9a07      	ldr	r2, [sp, #28]
 80072dc:	4654      	mov	r4, sl
 80072de:	2000      	movs	r0, #0
 80072e0:	f04f 0c0a 	mov.w	ip, #10
 80072e4:	4621      	mov	r1, r4
 80072e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ea:	3b30      	subs	r3, #48	; 0x30
 80072ec:	2b09      	cmp	r3, #9
 80072ee:	d94e      	bls.n	800738e <_svfiprintf_r+0x17e>
 80072f0:	b1b0      	cbz	r0, 8007320 <_svfiprintf_r+0x110>
 80072f2:	9207      	str	r2, [sp, #28]
 80072f4:	e014      	b.n	8007320 <_svfiprintf_r+0x110>
 80072f6:	eba0 0308 	sub.w	r3, r0, r8
 80072fa:	fa09 f303 	lsl.w	r3, r9, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	9304      	str	r3, [sp, #16]
 8007302:	46a2      	mov	sl, r4
 8007304:	e7d2      	b.n	80072ac <_svfiprintf_r+0x9c>
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	1d19      	adds	r1, r3, #4
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	9103      	str	r1, [sp, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfbb      	ittet	lt
 8007312:	425b      	neglt	r3, r3
 8007314:	f042 0202 	orrlt.w	r2, r2, #2
 8007318:	9307      	strge	r3, [sp, #28]
 800731a:	9307      	strlt	r3, [sp, #28]
 800731c:	bfb8      	it	lt
 800731e:	9204      	strlt	r2, [sp, #16]
 8007320:	7823      	ldrb	r3, [r4, #0]
 8007322:	2b2e      	cmp	r3, #46	; 0x2e
 8007324:	d10c      	bne.n	8007340 <_svfiprintf_r+0x130>
 8007326:	7863      	ldrb	r3, [r4, #1]
 8007328:	2b2a      	cmp	r3, #42	; 0x2a
 800732a:	d135      	bne.n	8007398 <_svfiprintf_r+0x188>
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	1d1a      	adds	r2, r3, #4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	9203      	str	r2, [sp, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	bfb8      	it	lt
 8007338:	f04f 33ff 	movlt.w	r3, #4294967295
 800733c:	3402      	adds	r4, #2
 800733e:	9305      	str	r3, [sp, #20]
 8007340:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800740c <_svfiprintf_r+0x1fc>
 8007344:	7821      	ldrb	r1, [r4, #0]
 8007346:	2203      	movs	r2, #3
 8007348:	4650      	mov	r0, sl
 800734a:	f7f8 ff49 	bl	80001e0 <memchr>
 800734e:	b140      	cbz	r0, 8007362 <_svfiprintf_r+0x152>
 8007350:	2340      	movs	r3, #64	; 0x40
 8007352:	eba0 000a 	sub.w	r0, r0, sl
 8007356:	fa03 f000 	lsl.w	r0, r3, r0
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	4303      	orrs	r3, r0
 800735e:	3401      	adds	r4, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007366:	4826      	ldr	r0, [pc, #152]	; (8007400 <_svfiprintf_r+0x1f0>)
 8007368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800736c:	2206      	movs	r2, #6
 800736e:	f7f8 ff37 	bl	80001e0 <memchr>
 8007372:	2800      	cmp	r0, #0
 8007374:	d038      	beq.n	80073e8 <_svfiprintf_r+0x1d8>
 8007376:	4b23      	ldr	r3, [pc, #140]	; (8007404 <_svfiprintf_r+0x1f4>)
 8007378:	bb1b      	cbnz	r3, 80073c2 <_svfiprintf_r+0x1b2>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	3307      	adds	r3, #7
 800737e:	f023 0307 	bic.w	r3, r3, #7
 8007382:	3308      	adds	r3, #8
 8007384:	9303      	str	r3, [sp, #12]
 8007386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007388:	4433      	add	r3, r6
 800738a:	9309      	str	r3, [sp, #36]	; 0x24
 800738c:	e767      	b.n	800725e <_svfiprintf_r+0x4e>
 800738e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007392:	460c      	mov	r4, r1
 8007394:	2001      	movs	r0, #1
 8007396:	e7a5      	b.n	80072e4 <_svfiprintf_r+0xd4>
 8007398:	2300      	movs	r3, #0
 800739a:	3401      	adds	r4, #1
 800739c:	9305      	str	r3, [sp, #20]
 800739e:	4619      	mov	r1, r3
 80073a0:	f04f 0c0a 	mov.w	ip, #10
 80073a4:	4620      	mov	r0, r4
 80073a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073aa:	3a30      	subs	r2, #48	; 0x30
 80073ac:	2a09      	cmp	r2, #9
 80073ae:	d903      	bls.n	80073b8 <_svfiprintf_r+0x1a8>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0c5      	beq.n	8007340 <_svfiprintf_r+0x130>
 80073b4:	9105      	str	r1, [sp, #20]
 80073b6:	e7c3      	b.n	8007340 <_svfiprintf_r+0x130>
 80073b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073bc:	4604      	mov	r4, r0
 80073be:	2301      	movs	r3, #1
 80073c0:	e7f0      	b.n	80073a4 <_svfiprintf_r+0x194>
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	462a      	mov	r2, r5
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <_svfiprintf_r+0x1f8>)
 80073ca:	a904      	add	r1, sp, #16
 80073cc:	4638      	mov	r0, r7
 80073ce:	f3af 8000 	nop.w
 80073d2:	1c42      	adds	r2, r0, #1
 80073d4:	4606      	mov	r6, r0
 80073d6:	d1d6      	bne.n	8007386 <_svfiprintf_r+0x176>
 80073d8:	89ab      	ldrh	r3, [r5, #12]
 80073da:	065b      	lsls	r3, r3, #25
 80073dc:	f53f af2c 	bmi.w	8007238 <_svfiprintf_r+0x28>
 80073e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e2:	b01d      	add	sp, #116	; 0x74
 80073e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e8:	ab03      	add	r3, sp, #12
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	462a      	mov	r2, r5
 80073ee:	4b06      	ldr	r3, [pc, #24]	; (8007408 <_svfiprintf_r+0x1f8>)
 80073f0:	a904      	add	r1, sp, #16
 80073f2:	4638      	mov	r0, r7
 80073f4:	f000 f9d4 	bl	80077a0 <_printf_i>
 80073f8:	e7eb      	b.n	80073d2 <_svfiprintf_r+0x1c2>
 80073fa:	bf00      	nop
 80073fc:	08008a96 	.word	0x08008a96
 8007400:	08008aa0 	.word	0x08008aa0
 8007404:	00000000 	.word	0x00000000
 8007408:	08007159 	.word	0x08007159
 800740c:	08008a9c 	.word	0x08008a9c

08007410 <__sfputc_r>:
 8007410:	6893      	ldr	r3, [r2, #8]
 8007412:	3b01      	subs	r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	b410      	push	{r4}
 8007418:	6093      	str	r3, [r2, #8]
 800741a:	da08      	bge.n	800742e <__sfputc_r+0x1e>
 800741c:	6994      	ldr	r4, [r2, #24]
 800741e:	42a3      	cmp	r3, r4
 8007420:	db01      	blt.n	8007426 <__sfputc_r+0x16>
 8007422:	290a      	cmp	r1, #10
 8007424:	d103      	bne.n	800742e <__sfputc_r+0x1e>
 8007426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800742a:	f000 baef 	b.w	8007a0c <__swbuf_r>
 800742e:	6813      	ldr	r3, [r2, #0]
 8007430:	1c58      	adds	r0, r3, #1
 8007432:	6010      	str	r0, [r2, #0]
 8007434:	7019      	strb	r1, [r3, #0]
 8007436:	4608      	mov	r0, r1
 8007438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800743c:	4770      	bx	lr

0800743e <__sfputs_r>:
 800743e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007440:	4606      	mov	r6, r0
 8007442:	460f      	mov	r7, r1
 8007444:	4614      	mov	r4, r2
 8007446:	18d5      	adds	r5, r2, r3
 8007448:	42ac      	cmp	r4, r5
 800744a:	d101      	bne.n	8007450 <__sfputs_r+0x12>
 800744c:	2000      	movs	r0, #0
 800744e:	e007      	b.n	8007460 <__sfputs_r+0x22>
 8007450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007454:	463a      	mov	r2, r7
 8007456:	4630      	mov	r0, r6
 8007458:	f7ff ffda 	bl	8007410 <__sfputc_r>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d1f3      	bne.n	8007448 <__sfputs_r+0xa>
 8007460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007464 <_vfiprintf_r>:
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	460d      	mov	r5, r1
 800746a:	b09d      	sub	sp, #116	; 0x74
 800746c:	4614      	mov	r4, r2
 800746e:	4698      	mov	r8, r3
 8007470:	4606      	mov	r6, r0
 8007472:	b118      	cbz	r0, 800747c <_vfiprintf_r+0x18>
 8007474:	6983      	ldr	r3, [r0, #24]
 8007476:	b90b      	cbnz	r3, 800747c <_vfiprintf_r+0x18>
 8007478:	f000 fcaa 	bl	8007dd0 <__sinit>
 800747c:	4b89      	ldr	r3, [pc, #548]	; (80076a4 <_vfiprintf_r+0x240>)
 800747e:	429d      	cmp	r5, r3
 8007480:	d11b      	bne.n	80074ba <_vfiprintf_r+0x56>
 8007482:	6875      	ldr	r5, [r6, #4]
 8007484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007486:	07d9      	lsls	r1, r3, #31
 8007488:	d405      	bmi.n	8007496 <_vfiprintf_r+0x32>
 800748a:	89ab      	ldrh	r3, [r5, #12]
 800748c:	059a      	lsls	r2, r3, #22
 800748e:	d402      	bmi.n	8007496 <_vfiprintf_r+0x32>
 8007490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007492:	f000 fd3b 	bl	8007f0c <__retarget_lock_acquire_recursive>
 8007496:	89ab      	ldrh	r3, [r5, #12]
 8007498:	071b      	lsls	r3, r3, #28
 800749a:	d501      	bpl.n	80074a0 <_vfiprintf_r+0x3c>
 800749c:	692b      	ldr	r3, [r5, #16]
 800749e:	b9eb      	cbnz	r3, 80074dc <_vfiprintf_r+0x78>
 80074a0:	4629      	mov	r1, r5
 80074a2:	4630      	mov	r0, r6
 80074a4:	f000 fb04 	bl	8007ab0 <__swsetup_r>
 80074a8:	b1c0      	cbz	r0, 80074dc <_vfiprintf_r+0x78>
 80074aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ac:	07dc      	lsls	r4, r3, #31
 80074ae:	d50e      	bpl.n	80074ce <_vfiprintf_r+0x6a>
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	b01d      	add	sp, #116	; 0x74
 80074b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ba:	4b7b      	ldr	r3, [pc, #492]	; (80076a8 <_vfiprintf_r+0x244>)
 80074bc:	429d      	cmp	r5, r3
 80074be:	d101      	bne.n	80074c4 <_vfiprintf_r+0x60>
 80074c0:	68b5      	ldr	r5, [r6, #8]
 80074c2:	e7df      	b.n	8007484 <_vfiprintf_r+0x20>
 80074c4:	4b79      	ldr	r3, [pc, #484]	; (80076ac <_vfiprintf_r+0x248>)
 80074c6:	429d      	cmp	r5, r3
 80074c8:	bf08      	it	eq
 80074ca:	68f5      	ldreq	r5, [r6, #12]
 80074cc:	e7da      	b.n	8007484 <_vfiprintf_r+0x20>
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	0598      	lsls	r0, r3, #22
 80074d2:	d4ed      	bmi.n	80074b0 <_vfiprintf_r+0x4c>
 80074d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074d6:	f000 fd1a 	bl	8007f0e <__retarget_lock_release_recursive>
 80074da:	e7e9      	b.n	80074b0 <_vfiprintf_r+0x4c>
 80074dc:	2300      	movs	r3, #0
 80074de:	9309      	str	r3, [sp, #36]	; 0x24
 80074e0:	2320      	movs	r3, #32
 80074e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ea:	2330      	movs	r3, #48	; 0x30
 80074ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076b0 <_vfiprintf_r+0x24c>
 80074f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074f4:	f04f 0901 	mov.w	r9, #1
 80074f8:	4623      	mov	r3, r4
 80074fa:	469a      	mov	sl, r3
 80074fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007500:	b10a      	cbz	r2, 8007506 <_vfiprintf_r+0xa2>
 8007502:	2a25      	cmp	r2, #37	; 0x25
 8007504:	d1f9      	bne.n	80074fa <_vfiprintf_r+0x96>
 8007506:	ebba 0b04 	subs.w	fp, sl, r4
 800750a:	d00b      	beq.n	8007524 <_vfiprintf_r+0xc0>
 800750c:	465b      	mov	r3, fp
 800750e:	4622      	mov	r2, r4
 8007510:	4629      	mov	r1, r5
 8007512:	4630      	mov	r0, r6
 8007514:	f7ff ff93 	bl	800743e <__sfputs_r>
 8007518:	3001      	adds	r0, #1
 800751a:	f000 80aa 	beq.w	8007672 <_vfiprintf_r+0x20e>
 800751e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007520:	445a      	add	r2, fp
 8007522:	9209      	str	r2, [sp, #36]	; 0x24
 8007524:	f89a 3000 	ldrb.w	r3, [sl]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 80a2 	beq.w	8007672 <_vfiprintf_r+0x20e>
 800752e:	2300      	movs	r3, #0
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007538:	f10a 0a01 	add.w	sl, sl, #1
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	9307      	str	r3, [sp, #28]
 8007540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007544:	931a      	str	r3, [sp, #104]	; 0x68
 8007546:	4654      	mov	r4, sl
 8007548:	2205      	movs	r2, #5
 800754a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754e:	4858      	ldr	r0, [pc, #352]	; (80076b0 <_vfiprintf_r+0x24c>)
 8007550:	f7f8 fe46 	bl	80001e0 <memchr>
 8007554:	9a04      	ldr	r2, [sp, #16]
 8007556:	b9d8      	cbnz	r0, 8007590 <_vfiprintf_r+0x12c>
 8007558:	06d1      	lsls	r1, r2, #27
 800755a:	bf44      	itt	mi
 800755c:	2320      	movmi	r3, #32
 800755e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007562:	0713      	lsls	r3, r2, #28
 8007564:	bf44      	itt	mi
 8007566:	232b      	movmi	r3, #43	; 0x2b
 8007568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800756c:	f89a 3000 	ldrb.w	r3, [sl]
 8007570:	2b2a      	cmp	r3, #42	; 0x2a
 8007572:	d015      	beq.n	80075a0 <_vfiprintf_r+0x13c>
 8007574:	9a07      	ldr	r2, [sp, #28]
 8007576:	4654      	mov	r4, sl
 8007578:	2000      	movs	r0, #0
 800757a:	f04f 0c0a 	mov.w	ip, #10
 800757e:	4621      	mov	r1, r4
 8007580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007584:	3b30      	subs	r3, #48	; 0x30
 8007586:	2b09      	cmp	r3, #9
 8007588:	d94e      	bls.n	8007628 <_vfiprintf_r+0x1c4>
 800758a:	b1b0      	cbz	r0, 80075ba <_vfiprintf_r+0x156>
 800758c:	9207      	str	r2, [sp, #28]
 800758e:	e014      	b.n	80075ba <_vfiprintf_r+0x156>
 8007590:	eba0 0308 	sub.w	r3, r0, r8
 8007594:	fa09 f303 	lsl.w	r3, r9, r3
 8007598:	4313      	orrs	r3, r2
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	46a2      	mov	sl, r4
 800759e:	e7d2      	b.n	8007546 <_vfiprintf_r+0xe2>
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	1d19      	adds	r1, r3, #4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	9103      	str	r1, [sp, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bfbb      	ittet	lt
 80075ac:	425b      	neglt	r3, r3
 80075ae:	f042 0202 	orrlt.w	r2, r2, #2
 80075b2:	9307      	strge	r3, [sp, #28]
 80075b4:	9307      	strlt	r3, [sp, #28]
 80075b6:	bfb8      	it	lt
 80075b8:	9204      	strlt	r2, [sp, #16]
 80075ba:	7823      	ldrb	r3, [r4, #0]
 80075bc:	2b2e      	cmp	r3, #46	; 0x2e
 80075be:	d10c      	bne.n	80075da <_vfiprintf_r+0x176>
 80075c0:	7863      	ldrb	r3, [r4, #1]
 80075c2:	2b2a      	cmp	r3, #42	; 0x2a
 80075c4:	d135      	bne.n	8007632 <_vfiprintf_r+0x1ce>
 80075c6:	9b03      	ldr	r3, [sp, #12]
 80075c8:	1d1a      	adds	r2, r3, #4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	9203      	str	r2, [sp, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bfb8      	it	lt
 80075d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80075d6:	3402      	adds	r4, #2
 80075d8:	9305      	str	r3, [sp, #20]
 80075da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80076c0 <_vfiprintf_r+0x25c>
 80075de:	7821      	ldrb	r1, [r4, #0]
 80075e0:	2203      	movs	r2, #3
 80075e2:	4650      	mov	r0, sl
 80075e4:	f7f8 fdfc 	bl	80001e0 <memchr>
 80075e8:	b140      	cbz	r0, 80075fc <_vfiprintf_r+0x198>
 80075ea:	2340      	movs	r3, #64	; 0x40
 80075ec:	eba0 000a 	sub.w	r0, r0, sl
 80075f0:	fa03 f000 	lsl.w	r0, r3, r0
 80075f4:	9b04      	ldr	r3, [sp, #16]
 80075f6:	4303      	orrs	r3, r0
 80075f8:	3401      	adds	r4, #1
 80075fa:	9304      	str	r3, [sp, #16]
 80075fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007600:	482c      	ldr	r0, [pc, #176]	; (80076b4 <_vfiprintf_r+0x250>)
 8007602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007606:	2206      	movs	r2, #6
 8007608:	f7f8 fdea 	bl	80001e0 <memchr>
 800760c:	2800      	cmp	r0, #0
 800760e:	d03f      	beq.n	8007690 <_vfiprintf_r+0x22c>
 8007610:	4b29      	ldr	r3, [pc, #164]	; (80076b8 <_vfiprintf_r+0x254>)
 8007612:	bb1b      	cbnz	r3, 800765c <_vfiprintf_r+0x1f8>
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	3307      	adds	r3, #7
 8007618:	f023 0307 	bic.w	r3, r3, #7
 800761c:	3308      	adds	r3, #8
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007622:	443b      	add	r3, r7
 8007624:	9309      	str	r3, [sp, #36]	; 0x24
 8007626:	e767      	b.n	80074f8 <_vfiprintf_r+0x94>
 8007628:	fb0c 3202 	mla	r2, ip, r2, r3
 800762c:	460c      	mov	r4, r1
 800762e:	2001      	movs	r0, #1
 8007630:	e7a5      	b.n	800757e <_vfiprintf_r+0x11a>
 8007632:	2300      	movs	r3, #0
 8007634:	3401      	adds	r4, #1
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	4619      	mov	r1, r3
 800763a:	f04f 0c0a 	mov.w	ip, #10
 800763e:	4620      	mov	r0, r4
 8007640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007644:	3a30      	subs	r2, #48	; 0x30
 8007646:	2a09      	cmp	r2, #9
 8007648:	d903      	bls.n	8007652 <_vfiprintf_r+0x1ee>
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0c5      	beq.n	80075da <_vfiprintf_r+0x176>
 800764e:	9105      	str	r1, [sp, #20]
 8007650:	e7c3      	b.n	80075da <_vfiprintf_r+0x176>
 8007652:	fb0c 2101 	mla	r1, ip, r1, r2
 8007656:	4604      	mov	r4, r0
 8007658:	2301      	movs	r3, #1
 800765a:	e7f0      	b.n	800763e <_vfiprintf_r+0x1da>
 800765c:	ab03      	add	r3, sp, #12
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	462a      	mov	r2, r5
 8007662:	4b16      	ldr	r3, [pc, #88]	; (80076bc <_vfiprintf_r+0x258>)
 8007664:	a904      	add	r1, sp, #16
 8007666:	4630      	mov	r0, r6
 8007668:	f3af 8000 	nop.w
 800766c:	4607      	mov	r7, r0
 800766e:	1c78      	adds	r0, r7, #1
 8007670:	d1d6      	bne.n	8007620 <_vfiprintf_r+0x1bc>
 8007672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007674:	07d9      	lsls	r1, r3, #31
 8007676:	d405      	bmi.n	8007684 <_vfiprintf_r+0x220>
 8007678:	89ab      	ldrh	r3, [r5, #12]
 800767a:	059a      	lsls	r2, r3, #22
 800767c:	d402      	bmi.n	8007684 <_vfiprintf_r+0x220>
 800767e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007680:	f000 fc45 	bl	8007f0e <__retarget_lock_release_recursive>
 8007684:	89ab      	ldrh	r3, [r5, #12]
 8007686:	065b      	lsls	r3, r3, #25
 8007688:	f53f af12 	bmi.w	80074b0 <_vfiprintf_r+0x4c>
 800768c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800768e:	e711      	b.n	80074b4 <_vfiprintf_r+0x50>
 8007690:	ab03      	add	r3, sp, #12
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	462a      	mov	r2, r5
 8007696:	4b09      	ldr	r3, [pc, #36]	; (80076bc <_vfiprintf_r+0x258>)
 8007698:	a904      	add	r1, sp, #16
 800769a:	4630      	mov	r0, r6
 800769c:	f000 f880 	bl	80077a0 <_printf_i>
 80076a0:	e7e4      	b.n	800766c <_vfiprintf_r+0x208>
 80076a2:	bf00      	nop
 80076a4:	08008aec 	.word	0x08008aec
 80076a8:	08008b0c 	.word	0x08008b0c
 80076ac:	08008acc 	.word	0x08008acc
 80076b0:	08008a96 	.word	0x08008a96
 80076b4:	08008aa0 	.word	0x08008aa0
 80076b8:	00000000 	.word	0x00000000
 80076bc:	0800743f 	.word	0x0800743f
 80076c0:	08008a9c 	.word	0x08008a9c

080076c4 <_printf_common>:
 80076c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c8:	4616      	mov	r6, r2
 80076ca:	4699      	mov	r9, r3
 80076cc:	688a      	ldr	r2, [r1, #8]
 80076ce:	690b      	ldr	r3, [r1, #16]
 80076d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076d4:	4293      	cmp	r3, r2
 80076d6:	bfb8      	it	lt
 80076d8:	4613      	movlt	r3, r2
 80076da:	6033      	str	r3, [r6, #0]
 80076dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076e0:	4607      	mov	r7, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	b10a      	cbz	r2, 80076ea <_printf_common+0x26>
 80076e6:	3301      	adds	r3, #1
 80076e8:	6033      	str	r3, [r6, #0]
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	0699      	lsls	r1, r3, #26
 80076ee:	bf42      	ittt	mi
 80076f0:	6833      	ldrmi	r3, [r6, #0]
 80076f2:	3302      	addmi	r3, #2
 80076f4:	6033      	strmi	r3, [r6, #0]
 80076f6:	6825      	ldr	r5, [r4, #0]
 80076f8:	f015 0506 	ands.w	r5, r5, #6
 80076fc:	d106      	bne.n	800770c <_printf_common+0x48>
 80076fe:	f104 0a19 	add.w	sl, r4, #25
 8007702:	68e3      	ldr	r3, [r4, #12]
 8007704:	6832      	ldr	r2, [r6, #0]
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	42ab      	cmp	r3, r5
 800770a:	dc26      	bgt.n	800775a <_printf_common+0x96>
 800770c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007710:	1e13      	subs	r3, r2, #0
 8007712:	6822      	ldr	r2, [r4, #0]
 8007714:	bf18      	it	ne
 8007716:	2301      	movne	r3, #1
 8007718:	0692      	lsls	r2, r2, #26
 800771a:	d42b      	bmi.n	8007774 <_printf_common+0xb0>
 800771c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007720:	4649      	mov	r1, r9
 8007722:	4638      	mov	r0, r7
 8007724:	47c0      	blx	r8
 8007726:	3001      	adds	r0, #1
 8007728:	d01e      	beq.n	8007768 <_printf_common+0xa4>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	68e5      	ldr	r5, [r4, #12]
 800772e:	6832      	ldr	r2, [r6, #0]
 8007730:	f003 0306 	and.w	r3, r3, #6
 8007734:	2b04      	cmp	r3, #4
 8007736:	bf08      	it	eq
 8007738:	1aad      	subeq	r5, r5, r2
 800773a:	68a3      	ldr	r3, [r4, #8]
 800773c:	6922      	ldr	r2, [r4, #16]
 800773e:	bf0c      	ite	eq
 8007740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007744:	2500      	movne	r5, #0
 8007746:	4293      	cmp	r3, r2
 8007748:	bfc4      	itt	gt
 800774a:	1a9b      	subgt	r3, r3, r2
 800774c:	18ed      	addgt	r5, r5, r3
 800774e:	2600      	movs	r6, #0
 8007750:	341a      	adds	r4, #26
 8007752:	42b5      	cmp	r5, r6
 8007754:	d11a      	bne.n	800778c <_printf_common+0xc8>
 8007756:	2000      	movs	r0, #0
 8007758:	e008      	b.n	800776c <_printf_common+0xa8>
 800775a:	2301      	movs	r3, #1
 800775c:	4652      	mov	r2, sl
 800775e:	4649      	mov	r1, r9
 8007760:	4638      	mov	r0, r7
 8007762:	47c0      	blx	r8
 8007764:	3001      	adds	r0, #1
 8007766:	d103      	bne.n	8007770 <_printf_common+0xac>
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007770:	3501      	adds	r5, #1
 8007772:	e7c6      	b.n	8007702 <_printf_common+0x3e>
 8007774:	18e1      	adds	r1, r4, r3
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	2030      	movs	r0, #48	; 0x30
 800777a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800777e:	4422      	add	r2, r4
 8007780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007788:	3302      	adds	r3, #2
 800778a:	e7c7      	b.n	800771c <_printf_common+0x58>
 800778c:	2301      	movs	r3, #1
 800778e:	4622      	mov	r2, r4
 8007790:	4649      	mov	r1, r9
 8007792:	4638      	mov	r0, r7
 8007794:	47c0      	blx	r8
 8007796:	3001      	adds	r0, #1
 8007798:	d0e6      	beq.n	8007768 <_printf_common+0xa4>
 800779a:	3601      	adds	r6, #1
 800779c:	e7d9      	b.n	8007752 <_printf_common+0x8e>
	...

080077a0 <_printf_i>:
 80077a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	7e0f      	ldrb	r7, [r1, #24]
 80077a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077a8:	2f78      	cmp	r7, #120	; 0x78
 80077aa:	4691      	mov	r9, r2
 80077ac:	4680      	mov	r8, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	469a      	mov	sl, r3
 80077b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077b6:	d807      	bhi.n	80077c8 <_printf_i+0x28>
 80077b8:	2f62      	cmp	r7, #98	; 0x62
 80077ba:	d80a      	bhi.n	80077d2 <_printf_i+0x32>
 80077bc:	2f00      	cmp	r7, #0
 80077be:	f000 80d8 	beq.w	8007972 <_printf_i+0x1d2>
 80077c2:	2f58      	cmp	r7, #88	; 0x58
 80077c4:	f000 80a3 	beq.w	800790e <_printf_i+0x16e>
 80077c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077d0:	e03a      	b.n	8007848 <_printf_i+0xa8>
 80077d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077d6:	2b15      	cmp	r3, #21
 80077d8:	d8f6      	bhi.n	80077c8 <_printf_i+0x28>
 80077da:	a101      	add	r1, pc, #4	; (adr r1, 80077e0 <_printf_i+0x40>)
 80077dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077e0:	08007839 	.word	0x08007839
 80077e4:	0800784d 	.word	0x0800784d
 80077e8:	080077c9 	.word	0x080077c9
 80077ec:	080077c9 	.word	0x080077c9
 80077f0:	080077c9 	.word	0x080077c9
 80077f4:	080077c9 	.word	0x080077c9
 80077f8:	0800784d 	.word	0x0800784d
 80077fc:	080077c9 	.word	0x080077c9
 8007800:	080077c9 	.word	0x080077c9
 8007804:	080077c9 	.word	0x080077c9
 8007808:	080077c9 	.word	0x080077c9
 800780c:	08007959 	.word	0x08007959
 8007810:	0800787d 	.word	0x0800787d
 8007814:	0800793b 	.word	0x0800793b
 8007818:	080077c9 	.word	0x080077c9
 800781c:	080077c9 	.word	0x080077c9
 8007820:	0800797b 	.word	0x0800797b
 8007824:	080077c9 	.word	0x080077c9
 8007828:	0800787d 	.word	0x0800787d
 800782c:	080077c9 	.word	0x080077c9
 8007830:	080077c9 	.word	0x080077c9
 8007834:	08007943 	.word	0x08007943
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	1d1a      	adds	r2, r3, #4
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	602a      	str	r2, [r5, #0]
 8007840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007848:	2301      	movs	r3, #1
 800784a:	e0a3      	b.n	8007994 <_printf_i+0x1f4>
 800784c:	6820      	ldr	r0, [r4, #0]
 800784e:	6829      	ldr	r1, [r5, #0]
 8007850:	0606      	lsls	r6, r0, #24
 8007852:	f101 0304 	add.w	r3, r1, #4
 8007856:	d50a      	bpl.n	800786e <_printf_i+0xce>
 8007858:	680e      	ldr	r6, [r1, #0]
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	2e00      	cmp	r6, #0
 800785e:	da03      	bge.n	8007868 <_printf_i+0xc8>
 8007860:	232d      	movs	r3, #45	; 0x2d
 8007862:	4276      	negs	r6, r6
 8007864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007868:	485e      	ldr	r0, [pc, #376]	; (80079e4 <_printf_i+0x244>)
 800786a:	230a      	movs	r3, #10
 800786c:	e019      	b.n	80078a2 <_printf_i+0x102>
 800786e:	680e      	ldr	r6, [r1, #0]
 8007870:	602b      	str	r3, [r5, #0]
 8007872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007876:	bf18      	it	ne
 8007878:	b236      	sxthne	r6, r6
 800787a:	e7ef      	b.n	800785c <_printf_i+0xbc>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	6820      	ldr	r0, [r4, #0]
 8007880:	1d19      	adds	r1, r3, #4
 8007882:	6029      	str	r1, [r5, #0]
 8007884:	0601      	lsls	r1, r0, #24
 8007886:	d501      	bpl.n	800788c <_printf_i+0xec>
 8007888:	681e      	ldr	r6, [r3, #0]
 800788a:	e002      	b.n	8007892 <_printf_i+0xf2>
 800788c:	0646      	lsls	r6, r0, #25
 800788e:	d5fb      	bpl.n	8007888 <_printf_i+0xe8>
 8007890:	881e      	ldrh	r6, [r3, #0]
 8007892:	4854      	ldr	r0, [pc, #336]	; (80079e4 <_printf_i+0x244>)
 8007894:	2f6f      	cmp	r7, #111	; 0x6f
 8007896:	bf0c      	ite	eq
 8007898:	2308      	moveq	r3, #8
 800789a:	230a      	movne	r3, #10
 800789c:	2100      	movs	r1, #0
 800789e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078a2:	6865      	ldr	r5, [r4, #4]
 80078a4:	60a5      	str	r5, [r4, #8]
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	bfa2      	ittt	ge
 80078aa:	6821      	ldrge	r1, [r4, #0]
 80078ac:	f021 0104 	bicge.w	r1, r1, #4
 80078b0:	6021      	strge	r1, [r4, #0]
 80078b2:	b90e      	cbnz	r6, 80078b8 <_printf_i+0x118>
 80078b4:	2d00      	cmp	r5, #0
 80078b6:	d04d      	beq.n	8007954 <_printf_i+0x1b4>
 80078b8:	4615      	mov	r5, r2
 80078ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80078be:	fb03 6711 	mls	r7, r3, r1, r6
 80078c2:	5dc7      	ldrb	r7, [r0, r7]
 80078c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078c8:	4637      	mov	r7, r6
 80078ca:	42bb      	cmp	r3, r7
 80078cc:	460e      	mov	r6, r1
 80078ce:	d9f4      	bls.n	80078ba <_printf_i+0x11a>
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	d10b      	bne.n	80078ec <_printf_i+0x14c>
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	07de      	lsls	r6, r3, #31
 80078d8:	d508      	bpl.n	80078ec <_printf_i+0x14c>
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	6861      	ldr	r1, [r4, #4]
 80078de:	4299      	cmp	r1, r3
 80078e0:	bfde      	ittt	le
 80078e2:	2330      	movle	r3, #48	; 0x30
 80078e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078ec:	1b52      	subs	r2, r2, r5
 80078ee:	6122      	str	r2, [r4, #16]
 80078f0:	f8cd a000 	str.w	sl, [sp]
 80078f4:	464b      	mov	r3, r9
 80078f6:	aa03      	add	r2, sp, #12
 80078f8:	4621      	mov	r1, r4
 80078fa:	4640      	mov	r0, r8
 80078fc:	f7ff fee2 	bl	80076c4 <_printf_common>
 8007900:	3001      	adds	r0, #1
 8007902:	d14c      	bne.n	800799e <_printf_i+0x1fe>
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	b004      	add	sp, #16
 800790a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790e:	4835      	ldr	r0, [pc, #212]	; (80079e4 <_printf_i+0x244>)
 8007910:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007914:	6829      	ldr	r1, [r5, #0]
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	f851 6b04 	ldr.w	r6, [r1], #4
 800791c:	6029      	str	r1, [r5, #0]
 800791e:	061d      	lsls	r5, r3, #24
 8007920:	d514      	bpl.n	800794c <_printf_i+0x1ac>
 8007922:	07df      	lsls	r7, r3, #31
 8007924:	bf44      	itt	mi
 8007926:	f043 0320 	orrmi.w	r3, r3, #32
 800792a:	6023      	strmi	r3, [r4, #0]
 800792c:	b91e      	cbnz	r6, 8007936 <_printf_i+0x196>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	f023 0320 	bic.w	r3, r3, #32
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	2310      	movs	r3, #16
 8007938:	e7b0      	b.n	800789c <_printf_i+0xfc>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	f043 0320 	orr.w	r3, r3, #32
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	2378      	movs	r3, #120	; 0x78
 8007944:	4828      	ldr	r0, [pc, #160]	; (80079e8 <_printf_i+0x248>)
 8007946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800794a:	e7e3      	b.n	8007914 <_printf_i+0x174>
 800794c:	0659      	lsls	r1, r3, #25
 800794e:	bf48      	it	mi
 8007950:	b2b6      	uxthmi	r6, r6
 8007952:	e7e6      	b.n	8007922 <_printf_i+0x182>
 8007954:	4615      	mov	r5, r2
 8007956:	e7bb      	b.n	80078d0 <_printf_i+0x130>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	6826      	ldr	r6, [r4, #0]
 800795c:	6961      	ldr	r1, [r4, #20]
 800795e:	1d18      	adds	r0, r3, #4
 8007960:	6028      	str	r0, [r5, #0]
 8007962:	0635      	lsls	r5, r6, #24
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	d501      	bpl.n	800796c <_printf_i+0x1cc>
 8007968:	6019      	str	r1, [r3, #0]
 800796a:	e002      	b.n	8007972 <_printf_i+0x1d2>
 800796c:	0670      	lsls	r0, r6, #25
 800796e:	d5fb      	bpl.n	8007968 <_printf_i+0x1c8>
 8007970:	8019      	strh	r1, [r3, #0]
 8007972:	2300      	movs	r3, #0
 8007974:	6123      	str	r3, [r4, #16]
 8007976:	4615      	mov	r5, r2
 8007978:	e7ba      	b.n	80078f0 <_printf_i+0x150>
 800797a:	682b      	ldr	r3, [r5, #0]
 800797c:	1d1a      	adds	r2, r3, #4
 800797e:	602a      	str	r2, [r5, #0]
 8007980:	681d      	ldr	r5, [r3, #0]
 8007982:	6862      	ldr	r2, [r4, #4]
 8007984:	2100      	movs	r1, #0
 8007986:	4628      	mov	r0, r5
 8007988:	f7f8 fc2a 	bl	80001e0 <memchr>
 800798c:	b108      	cbz	r0, 8007992 <_printf_i+0x1f2>
 800798e:	1b40      	subs	r0, r0, r5
 8007990:	6060      	str	r0, [r4, #4]
 8007992:	6863      	ldr	r3, [r4, #4]
 8007994:	6123      	str	r3, [r4, #16]
 8007996:	2300      	movs	r3, #0
 8007998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800799c:	e7a8      	b.n	80078f0 <_printf_i+0x150>
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	462a      	mov	r2, r5
 80079a2:	4649      	mov	r1, r9
 80079a4:	4640      	mov	r0, r8
 80079a6:	47d0      	blx	sl
 80079a8:	3001      	adds	r0, #1
 80079aa:	d0ab      	beq.n	8007904 <_printf_i+0x164>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	079b      	lsls	r3, r3, #30
 80079b0:	d413      	bmi.n	80079da <_printf_i+0x23a>
 80079b2:	68e0      	ldr	r0, [r4, #12]
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	4298      	cmp	r0, r3
 80079b8:	bfb8      	it	lt
 80079ba:	4618      	movlt	r0, r3
 80079bc:	e7a4      	b.n	8007908 <_printf_i+0x168>
 80079be:	2301      	movs	r3, #1
 80079c0:	4632      	mov	r2, r6
 80079c2:	4649      	mov	r1, r9
 80079c4:	4640      	mov	r0, r8
 80079c6:	47d0      	blx	sl
 80079c8:	3001      	adds	r0, #1
 80079ca:	d09b      	beq.n	8007904 <_printf_i+0x164>
 80079cc:	3501      	adds	r5, #1
 80079ce:	68e3      	ldr	r3, [r4, #12]
 80079d0:	9903      	ldr	r1, [sp, #12]
 80079d2:	1a5b      	subs	r3, r3, r1
 80079d4:	42ab      	cmp	r3, r5
 80079d6:	dcf2      	bgt.n	80079be <_printf_i+0x21e>
 80079d8:	e7eb      	b.n	80079b2 <_printf_i+0x212>
 80079da:	2500      	movs	r5, #0
 80079dc:	f104 0619 	add.w	r6, r4, #25
 80079e0:	e7f5      	b.n	80079ce <_printf_i+0x22e>
 80079e2:	bf00      	nop
 80079e4:	08008aa7 	.word	0x08008aa7
 80079e8:	08008ab8 	.word	0x08008ab8

080079ec <_sbrk_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d06      	ldr	r5, [pc, #24]	; (8007a08 <_sbrk_r+0x1c>)
 80079f0:	2300      	movs	r3, #0
 80079f2:	4604      	mov	r4, r0
 80079f4:	4608      	mov	r0, r1
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	f7fb f96a 	bl	8002cd0 <_sbrk>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d102      	bne.n	8007a06 <_sbrk_r+0x1a>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	b103      	cbz	r3, 8007a06 <_sbrk_r+0x1a>
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
 8007a08:	20000930 	.word	0x20000930

08007a0c <__swbuf_r>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	460e      	mov	r6, r1
 8007a10:	4614      	mov	r4, r2
 8007a12:	4605      	mov	r5, r0
 8007a14:	b118      	cbz	r0, 8007a1e <__swbuf_r+0x12>
 8007a16:	6983      	ldr	r3, [r0, #24]
 8007a18:	b90b      	cbnz	r3, 8007a1e <__swbuf_r+0x12>
 8007a1a:	f000 f9d9 	bl	8007dd0 <__sinit>
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <__swbuf_r+0x98>)
 8007a20:	429c      	cmp	r4, r3
 8007a22:	d12b      	bne.n	8007a7c <__swbuf_r+0x70>
 8007a24:	686c      	ldr	r4, [r5, #4]
 8007a26:	69a3      	ldr	r3, [r4, #24]
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	071a      	lsls	r2, r3, #28
 8007a2e:	d52f      	bpl.n	8007a90 <__swbuf_r+0x84>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	b36b      	cbz	r3, 8007a90 <__swbuf_r+0x84>
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	6820      	ldr	r0, [r4, #0]
 8007a38:	1ac0      	subs	r0, r0, r3
 8007a3a:	6963      	ldr	r3, [r4, #20]
 8007a3c:	b2f6      	uxtb	r6, r6
 8007a3e:	4283      	cmp	r3, r0
 8007a40:	4637      	mov	r7, r6
 8007a42:	dc04      	bgt.n	8007a4e <__swbuf_r+0x42>
 8007a44:	4621      	mov	r1, r4
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 f92e 	bl	8007ca8 <_fflush_r>
 8007a4c:	bb30      	cbnz	r0, 8007a9c <__swbuf_r+0x90>
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	60a3      	str	r3, [r4, #8]
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	701e      	strb	r6, [r3, #0]
 8007a5c:	6963      	ldr	r3, [r4, #20]
 8007a5e:	3001      	adds	r0, #1
 8007a60:	4283      	cmp	r3, r0
 8007a62:	d004      	beq.n	8007a6e <__swbuf_r+0x62>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	07db      	lsls	r3, r3, #31
 8007a68:	d506      	bpl.n	8007a78 <__swbuf_r+0x6c>
 8007a6a:	2e0a      	cmp	r6, #10
 8007a6c:	d104      	bne.n	8007a78 <__swbuf_r+0x6c>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 f919 	bl	8007ca8 <_fflush_r>
 8007a76:	b988      	cbnz	r0, 8007a9c <__swbuf_r+0x90>
 8007a78:	4638      	mov	r0, r7
 8007a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <__swbuf_r+0x9c>)
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	d101      	bne.n	8007a86 <__swbuf_r+0x7a>
 8007a82:	68ac      	ldr	r4, [r5, #8]
 8007a84:	e7cf      	b.n	8007a26 <__swbuf_r+0x1a>
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <__swbuf_r+0xa0>)
 8007a88:	429c      	cmp	r4, r3
 8007a8a:	bf08      	it	eq
 8007a8c:	68ec      	ldreq	r4, [r5, #12]
 8007a8e:	e7ca      	b.n	8007a26 <__swbuf_r+0x1a>
 8007a90:	4621      	mov	r1, r4
 8007a92:	4628      	mov	r0, r5
 8007a94:	f000 f80c 	bl	8007ab0 <__swsetup_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d0cb      	beq.n	8007a34 <__swbuf_r+0x28>
 8007a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa0:	e7ea      	b.n	8007a78 <__swbuf_r+0x6c>
 8007aa2:	bf00      	nop
 8007aa4:	08008aec 	.word	0x08008aec
 8007aa8:	08008b0c 	.word	0x08008b0c
 8007aac:	08008acc 	.word	0x08008acc

08007ab0 <__swsetup_r>:
 8007ab0:	4b32      	ldr	r3, [pc, #200]	; (8007b7c <__swsetup_r+0xcc>)
 8007ab2:	b570      	push	{r4, r5, r6, lr}
 8007ab4:	681d      	ldr	r5, [r3, #0]
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	b125      	cbz	r5, 8007ac6 <__swsetup_r+0x16>
 8007abc:	69ab      	ldr	r3, [r5, #24]
 8007abe:	b913      	cbnz	r3, 8007ac6 <__swsetup_r+0x16>
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	f000 f985 	bl	8007dd0 <__sinit>
 8007ac6:	4b2e      	ldr	r3, [pc, #184]	; (8007b80 <__swsetup_r+0xd0>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d10f      	bne.n	8007aec <__swsetup_r+0x3c>
 8007acc:	686c      	ldr	r4, [r5, #4]
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ad4:	0719      	lsls	r1, r3, #28
 8007ad6:	d42c      	bmi.n	8007b32 <__swsetup_r+0x82>
 8007ad8:	06dd      	lsls	r5, r3, #27
 8007ada:	d411      	bmi.n	8007b00 <__swsetup_r+0x50>
 8007adc:	2309      	movs	r3, #9
 8007ade:	6033      	str	r3, [r6, #0]
 8007ae0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aea:	e03e      	b.n	8007b6a <__swsetup_r+0xba>
 8007aec:	4b25      	ldr	r3, [pc, #148]	; (8007b84 <__swsetup_r+0xd4>)
 8007aee:	429c      	cmp	r4, r3
 8007af0:	d101      	bne.n	8007af6 <__swsetup_r+0x46>
 8007af2:	68ac      	ldr	r4, [r5, #8]
 8007af4:	e7eb      	b.n	8007ace <__swsetup_r+0x1e>
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <__swsetup_r+0xd8>)
 8007af8:	429c      	cmp	r4, r3
 8007afa:	bf08      	it	eq
 8007afc:	68ec      	ldreq	r4, [r5, #12]
 8007afe:	e7e6      	b.n	8007ace <__swsetup_r+0x1e>
 8007b00:	0758      	lsls	r0, r3, #29
 8007b02:	d512      	bpl.n	8007b2a <__swsetup_r+0x7a>
 8007b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b06:	b141      	cbz	r1, 8007b1a <__swsetup_r+0x6a>
 8007b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	d002      	beq.n	8007b16 <__swsetup_r+0x66>
 8007b10:	4630      	mov	r0, r6
 8007b12:	f7ff fa41 	bl	8006f98 <_free_r>
 8007b16:	2300      	movs	r3, #0
 8007b18:	6363      	str	r3, [r4, #52]	; 0x34
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f043 0308 	orr.w	r3, r3, #8
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	b94b      	cbnz	r3, 8007b4a <__swsetup_r+0x9a>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b40:	d003      	beq.n	8007b4a <__swsetup_r+0x9a>
 8007b42:	4621      	mov	r1, r4
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 fa09 	bl	8007f5c <__smakebuf_r>
 8007b4a:	89a0      	ldrh	r0, [r4, #12]
 8007b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b50:	f010 0301 	ands.w	r3, r0, #1
 8007b54:	d00a      	beq.n	8007b6c <__swsetup_r+0xbc>
 8007b56:	2300      	movs	r3, #0
 8007b58:	60a3      	str	r3, [r4, #8]
 8007b5a:	6963      	ldr	r3, [r4, #20]
 8007b5c:	425b      	negs	r3, r3
 8007b5e:	61a3      	str	r3, [r4, #24]
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	b943      	cbnz	r3, 8007b76 <__swsetup_r+0xc6>
 8007b64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b68:	d1ba      	bne.n	8007ae0 <__swsetup_r+0x30>
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	0781      	lsls	r1, r0, #30
 8007b6e:	bf58      	it	pl
 8007b70:	6963      	ldrpl	r3, [r4, #20]
 8007b72:	60a3      	str	r3, [r4, #8]
 8007b74:	e7f4      	b.n	8007b60 <__swsetup_r+0xb0>
 8007b76:	2000      	movs	r0, #0
 8007b78:	e7f7      	b.n	8007b6a <__swsetup_r+0xba>
 8007b7a:	bf00      	nop
 8007b7c:	20000068 	.word	0x20000068
 8007b80:	08008aec 	.word	0x08008aec
 8007b84:	08008b0c 	.word	0x08008b0c
 8007b88:	08008acc 	.word	0x08008acc

08007b8c <abort>:
 8007b8c:	b508      	push	{r3, lr}
 8007b8e:	2006      	movs	r0, #6
 8007b90:	f000 faa2 	bl	80080d8 <raise>
 8007b94:	2001      	movs	r0, #1
 8007b96:	f7fb f823 	bl	8002be0 <_exit>
	...

08007b9c <__sflush_r>:
 8007b9c:	898a      	ldrh	r2, [r1, #12]
 8007b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	0710      	lsls	r0, r2, #28
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	d458      	bmi.n	8007c5c <__sflush_r+0xc0>
 8007baa:	684b      	ldr	r3, [r1, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc05      	bgt.n	8007bbc <__sflush_r+0x20>
 8007bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	dc02      	bgt.n	8007bbc <__sflush_r+0x20>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	d0f9      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bc8:	682f      	ldr	r7, [r5, #0]
 8007bca:	602b      	str	r3, [r5, #0]
 8007bcc:	d032      	beq.n	8007c34 <__sflush_r+0x98>
 8007bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	075a      	lsls	r2, r3, #29
 8007bd4:	d505      	bpl.n	8007be2 <__sflush_r+0x46>
 8007bd6:	6863      	ldr	r3, [r4, #4]
 8007bd8:	1ac0      	subs	r0, r0, r3
 8007bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bdc:	b10b      	cbz	r3, 8007be2 <__sflush_r+0x46>
 8007bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be0:	1ac0      	subs	r0, r0, r3
 8007be2:	2300      	movs	r3, #0
 8007be4:	4602      	mov	r2, r0
 8007be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007be8:	6a21      	ldr	r1, [r4, #32]
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b0      	blx	r6
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	d106      	bne.n	8007c02 <__sflush_r+0x66>
 8007bf4:	6829      	ldr	r1, [r5, #0]
 8007bf6:	291d      	cmp	r1, #29
 8007bf8:	d82c      	bhi.n	8007c54 <__sflush_r+0xb8>
 8007bfa:	4a2a      	ldr	r2, [pc, #168]	; (8007ca4 <__sflush_r+0x108>)
 8007bfc:	40ca      	lsrs	r2, r1
 8007bfe:	07d6      	lsls	r6, r2, #31
 8007c00:	d528      	bpl.n	8007c54 <__sflush_r+0xb8>
 8007c02:	2200      	movs	r2, #0
 8007c04:	6062      	str	r2, [r4, #4]
 8007c06:	04d9      	lsls	r1, r3, #19
 8007c08:	6922      	ldr	r2, [r4, #16]
 8007c0a:	6022      	str	r2, [r4, #0]
 8007c0c:	d504      	bpl.n	8007c18 <__sflush_r+0x7c>
 8007c0e:	1c42      	adds	r2, r0, #1
 8007c10:	d101      	bne.n	8007c16 <__sflush_r+0x7a>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	b903      	cbnz	r3, 8007c18 <__sflush_r+0x7c>
 8007c16:	6560      	str	r0, [r4, #84]	; 0x54
 8007c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c1a:	602f      	str	r7, [r5, #0]
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	d0ca      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c24:	4299      	cmp	r1, r3
 8007c26:	d002      	beq.n	8007c2e <__sflush_r+0x92>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f7ff f9b5 	bl	8006f98 <_free_r>
 8007c2e:	2000      	movs	r0, #0
 8007c30:	6360      	str	r0, [r4, #52]	; 0x34
 8007c32:	e7c1      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c34:	6a21      	ldr	r1, [r4, #32]
 8007c36:	2301      	movs	r3, #1
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b0      	blx	r6
 8007c3c:	1c41      	adds	r1, r0, #1
 8007c3e:	d1c7      	bne.n	8007bd0 <__sflush_r+0x34>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0c4      	beq.n	8007bd0 <__sflush_r+0x34>
 8007c46:	2b1d      	cmp	r3, #29
 8007c48:	d001      	beq.n	8007c4e <__sflush_r+0xb2>
 8007c4a:	2b16      	cmp	r3, #22
 8007c4c:	d101      	bne.n	8007c52 <__sflush_r+0xb6>
 8007c4e:	602f      	str	r7, [r5, #0]
 8007c50:	e7b1      	b.n	8007bb6 <__sflush_r+0x1a>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	e7ad      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c5c:	690f      	ldr	r7, [r1, #16]
 8007c5e:	2f00      	cmp	r7, #0
 8007c60:	d0a9      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007c62:	0793      	lsls	r3, r2, #30
 8007c64:	680e      	ldr	r6, [r1, #0]
 8007c66:	bf08      	it	eq
 8007c68:	694b      	ldreq	r3, [r1, #20]
 8007c6a:	600f      	str	r7, [r1, #0]
 8007c6c:	bf18      	it	ne
 8007c6e:	2300      	movne	r3, #0
 8007c70:	eba6 0807 	sub.w	r8, r6, r7
 8007c74:	608b      	str	r3, [r1, #8]
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	dd9c      	ble.n	8007bb6 <__sflush_r+0x1a>
 8007c7c:	6a21      	ldr	r1, [r4, #32]
 8007c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c80:	4643      	mov	r3, r8
 8007c82:	463a      	mov	r2, r7
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b0      	blx	r6
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	dc06      	bgt.n	8007c9a <__sflush_r+0xfe>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e78e      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c9a:	4407      	add	r7, r0
 8007c9c:	eba8 0800 	sub.w	r8, r8, r0
 8007ca0:	e7e9      	b.n	8007c76 <__sflush_r+0xda>
 8007ca2:	bf00      	nop
 8007ca4:	20400001 	.word	0x20400001

08007ca8 <_fflush_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	690b      	ldr	r3, [r1, #16]
 8007cac:	4605      	mov	r5, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	b913      	cbnz	r3, 8007cb8 <_fflush_r+0x10>
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	b118      	cbz	r0, 8007cc2 <_fflush_r+0x1a>
 8007cba:	6983      	ldr	r3, [r0, #24]
 8007cbc:	b90b      	cbnz	r3, 8007cc2 <_fflush_r+0x1a>
 8007cbe:	f000 f887 	bl	8007dd0 <__sinit>
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <_fflush_r+0x6c>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d11b      	bne.n	8007d00 <_fflush_r+0x58>
 8007cc8:	686c      	ldr	r4, [r5, #4]
 8007cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0ef      	beq.n	8007cb2 <_fflush_r+0xa>
 8007cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cd4:	07d0      	lsls	r0, r2, #31
 8007cd6:	d404      	bmi.n	8007ce2 <_fflush_r+0x3a>
 8007cd8:	0599      	lsls	r1, r3, #22
 8007cda:	d402      	bmi.n	8007ce2 <_fflush_r+0x3a>
 8007cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cde:	f000 f915 	bl	8007f0c <__retarget_lock_acquire_recursive>
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	f7ff ff59 	bl	8007b9c <__sflush_r>
 8007cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cec:	07da      	lsls	r2, r3, #31
 8007cee:	4605      	mov	r5, r0
 8007cf0:	d4e0      	bmi.n	8007cb4 <_fflush_r+0xc>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	059b      	lsls	r3, r3, #22
 8007cf6:	d4dd      	bmi.n	8007cb4 <_fflush_r+0xc>
 8007cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfa:	f000 f908 	bl	8007f0e <__retarget_lock_release_recursive>
 8007cfe:	e7d9      	b.n	8007cb4 <_fflush_r+0xc>
 8007d00:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <_fflush_r+0x70>)
 8007d02:	429c      	cmp	r4, r3
 8007d04:	d101      	bne.n	8007d0a <_fflush_r+0x62>
 8007d06:	68ac      	ldr	r4, [r5, #8]
 8007d08:	e7df      	b.n	8007cca <_fflush_r+0x22>
 8007d0a:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <_fflush_r+0x74>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	bf08      	it	eq
 8007d10:	68ec      	ldreq	r4, [r5, #12]
 8007d12:	e7da      	b.n	8007cca <_fflush_r+0x22>
 8007d14:	08008aec 	.word	0x08008aec
 8007d18:	08008b0c 	.word	0x08008b0c
 8007d1c:	08008acc 	.word	0x08008acc

08007d20 <std>:
 8007d20:	2300      	movs	r3, #0
 8007d22:	b510      	push	{r4, lr}
 8007d24:	4604      	mov	r4, r0
 8007d26:	e9c0 3300 	strd	r3, r3, [r0]
 8007d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d2e:	6083      	str	r3, [r0, #8]
 8007d30:	8181      	strh	r1, [r0, #12]
 8007d32:	6643      	str	r3, [r0, #100]	; 0x64
 8007d34:	81c2      	strh	r2, [r0, #14]
 8007d36:	6183      	str	r3, [r0, #24]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	305c      	adds	r0, #92	; 0x5c
 8007d3e:	f7ff f833 	bl	8006da8 <memset>
 8007d42:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <std+0x38>)
 8007d44:	6263      	str	r3, [r4, #36]	; 0x24
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <std+0x3c>)
 8007d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d4a:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <std+0x40>)
 8007d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d4e:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <std+0x44>)
 8007d50:	6224      	str	r4, [r4, #32]
 8007d52:	6323      	str	r3, [r4, #48]	; 0x30
 8007d54:	bd10      	pop	{r4, pc}
 8007d56:	bf00      	nop
 8007d58:	08008111 	.word	0x08008111
 8007d5c:	08008133 	.word	0x08008133
 8007d60:	0800816b 	.word	0x0800816b
 8007d64:	0800818f 	.word	0x0800818f

08007d68 <_cleanup_r>:
 8007d68:	4901      	ldr	r1, [pc, #4]	; (8007d70 <_cleanup_r+0x8>)
 8007d6a:	f000 b8af 	b.w	8007ecc <_fwalk_reent>
 8007d6e:	bf00      	nop
 8007d70:	08007ca9 	.word	0x08007ca9

08007d74 <__sfmoreglue>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	2268      	movs	r2, #104	; 0x68
 8007d78:	1e4d      	subs	r5, r1, #1
 8007d7a:	4355      	muls	r5, r2
 8007d7c:	460e      	mov	r6, r1
 8007d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d82:	f7ff f975 	bl	8007070 <_malloc_r>
 8007d86:	4604      	mov	r4, r0
 8007d88:	b140      	cbz	r0, 8007d9c <__sfmoreglue+0x28>
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8007d90:	300c      	adds	r0, #12
 8007d92:	60a0      	str	r0, [r4, #8]
 8007d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d98:	f7ff f806 	bl	8006da8 <memset>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}

08007da0 <__sfp_lock_acquire>:
 8007da0:	4801      	ldr	r0, [pc, #4]	; (8007da8 <__sfp_lock_acquire+0x8>)
 8007da2:	f000 b8b3 	b.w	8007f0c <__retarget_lock_acquire_recursive>
 8007da6:	bf00      	nop
 8007da8:	20000935 	.word	0x20000935

08007dac <__sfp_lock_release>:
 8007dac:	4801      	ldr	r0, [pc, #4]	; (8007db4 <__sfp_lock_release+0x8>)
 8007dae:	f000 b8ae 	b.w	8007f0e <__retarget_lock_release_recursive>
 8007db2:	bf00      	nop
 8007db4:	20000935 	.word	0x20000935

08007db8 <__sinit_lock_acquire>:
 8007db8:	4801      	ldr	r0, [pc, #4]	; (8007dc0 <__sinit_lock_acquire+0x8>)
 8007dba:	f000 b8a7 	b.w	8007f0c <__retarget_lock_acquire_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	20000936 	.word	0x20000936

08007dc4 <__sinit_lock_release>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	; (8007dcc <__sinit_lock_release+0x8>)
 8007dc6:	f000 b8a2 	b.w	8007f0e <__retarget_lock_release_recursive>
 8007dca:	bf00      	nop
 8007dcc:	20000936 	.word	0x20000936

08007dd0 <__sinit>:
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	f7ff fff0 	bl	8007db8 <__sinit_lock_acquire>
 8007dd8:	69a3      	ldr	r3, [r4, #24]
 8007dda:	b11b      	cbz	r3, 8007de4 <__sinit+0x14>
 8007ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de0:	f7ff bff0 	b.w	8007dc4 <__sinit_lock_release>
 8007de4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007de8:	6523      	str	r3, [r4, #80]	; 0x50
 8007dea:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <__sinit+0x68>)
 8007dec:	4a13      	ldr	r2, [pc, #76]	; (8007e3c <__sinit+0x6c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	bf04      	itt	eq
 8007df6:	2301      	moveq	r3, #1
 8007df8:	61a3      	streq	r3, [r4, #24]
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 f820 	bl	8007e40 <__sfp>
 8007e00:	6060      	str	r0, [r4, #4]
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 f81c 	bl	8007e40 <__sfp>
 8007e08:	60a0      	str	r0, [r4, #8]
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f000 f818 	bl	8007e40 <__sfp>
 8007e10:	2200      	movs	r2, #0
 8007e12:	60e0      	str	r0, [r4, #12]
 8007e14:	2104      	movs	r1, #4
 8007e16:	6860      	ldr	r0, [r4, #4]
 8007e18:	f7ff ff82 	bl	8007d20 <std>
 8007e1c:	68a0      	ldr	r0, [r4, #8]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	2109      	movs	r1, #9
 8007e22:	f7ff ff7d 	bl	8007d20 <std>
 8007e26:	68e0      	ldr	r0, [r4, #12]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	2112      	movs	r1, #18
 8007e2c:	f7ff ff78 	bl	8007d20 <std>
 8007e30:	2301      	movs	r3, #1
 8007e32:	61a3      	str	r3, [r4, #24]
 8007e34:	e7d2      	b.n	8007ddc <__sinit+0xc>
 8007e36:	bf00      	nop
 8007e38:	080089e4 	.word	0x080089e4
 8007e3c:	08007d69 	.word	0x08007d69

08007e40 <__sfp>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	4607      	mov	r7, r0
 8007e44:	f7ff ffac 	bl	8007da0 <__sfp_lock_acquire>
 8007e48:	4b1e      	ldr	r3, [pc, #120]	; (8007ec4 <__sfp+0x84>)
 8007e4a:	681e      	ldr	r6, [r3, #0]
 8007e4c:	69b3      	ldr	r3, [r6, #24]
 8007e4e:	b913      	cbnz	r3, 8007e56 <__sfp+0x16>
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff ffbd 	bl	8007dd0 <__sinit>
 8007e56:	3648      	adds	r6, #72	; 0x48
 8007e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	d503      	bpl.n	8007e68 <__sfp+0x28>
 8007e60:	6833      	ldr	r3, [r6, #0]
 8007e62:	b30b      	cbz	r3, 8007ea8 <__sfp+0x68>
 8007e64:	6836      	ldr	r6, [r6, #0]
 8007e66:	e7f7      	b.n	8007e58 <__sfp+0x18>
 8007e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e6c:	b9d5      	cbnz	r5, 8007ea4 <__sfp+0x64>
 8007e6e:	4b16      	ldr	r3, [pc, #88]	; (8007ec8 <__sfp+0x88>)
 8007e70:	60e3      	str	r3, [r4, #12]
 8007e72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e76:	6665      	str	r5, [r4, #100]	; 0x64
 8007e78:	f000 f847 	bl	8007f0a <__retarget_lock_init_recursive>
 8007e7c:	f7ff ff96 	bl	8007dac <__sfp_lock_release>
 8007e80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e88:	6025      	str	r5, [r4, #0]
 8007e8a:	61a5      	str	r5, [r4, #24]
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	4629      	mov	r1, r5
 8007e90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e94:	f7fe ff88 	bl	8006da8 <memset>
 8007e98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea4:	3468      	adds	r4, #104	; 0x68
 8007ea6:	e7d9      	b.n	8007e5c <__sfp+0x1c>
 8007ea8:	2104      	movs	r1, #4
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7ff ff62 	bl	8007d74 <__sfmoreglue>
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	6030      	str	r0, [r6, #0]
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d1d5      	bne.n	8007e64 <__sfp+0x24>
 8007eb8:	f7ff ff78 	bl	8007dac <__sfp_lock_release>
 8007ebc:	230c      	movs	r3, #12
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	e7ee      	b.n	8007ea0 <__sfp+0x60>
 8007ec2:	bf00      	nop
 8007ec4:	080089e4 	.word	0x080089e4
 8007ec8:	ffff0001 	.word	0xffff0001

08007ecc <_fwalk_reent>:
 8007ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	4688      	mov	r8, r1
 8007ed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ed8:	2700      	movs	r7, #0
 8007eda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ede:	f1b9 0901 	subs.w	r9, r9, #1
 8007ee2:	d505      	bpl.n	8007ef0 <_fwalk_reent+0x24>
 8007ee4:	6824      	ldr	r4, [r4, #0]
 8007ee6:	2c00      	cmp	r4, #0
 8007ee8:	d1f7      	bne.n	8007eda <_fwalk_reent+0xe>
 8007eea:	4638      	mov	r0, r7
 8007eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ef0:	89ab      	ldrh	r3, [r5, #12]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d907      	bls.n	8007f06 <_fwalk_reent+0x3a>
 8007ef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007efa:	3301      	adds	r3, #1
 8007efc:	d003      	beq.n	8007f06 <_fwalk_reent+0x3a>
 8007efe:	4629      	mov	r1, r5
 8007f00:	4630      	mov	r0, r6
 8007f02:	47c0      	blx	r8
 8007f04:	4307      	orrs	r7, r0
 8007f06:	3568      	adds	r5, #104	; 0x68
 8007f08:	e7e9      	b.n	8007ede <_fwalk_reent+0x12>

08007f0a <__retarget_lock_init_recursive>:
 8007f0a:	4770      	bx	lr

08007f0c <__retarget_lock_acquire_recursive>:
 8007f0c:	4770      	bx	lr

08007f0e <__retarget_lock_release_recursive>:
 8007f0e:	4770      	bx	lr

08007f10 <__swhatbuf_r>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	460e      	mov	r6, r1
 8007f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	b096      	sub	sp, #88	; 0x58
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	461d      	mov	r5, r3
 8007f20:	da08      	bge.n	8007f34 <__swhatbuf_r+0x24>
 8007f22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	602a      	str	r2, [r5, #0]
 8007f2a:	061a      	lsls	r2, r3, #24
 8007f2c:	d410      	bmi.n	8007f50 <__swhatbuf_r+0x40>
 8007f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f32:	e00e      	b.n	8007f52 <__swhatbuf_r+0x42>
 8007f34:	466a      	mov	r2, sp
 8007f36:	f000 f951 	bl	80081dc <_fstat_r>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	dbf1      	blt.n	8007f22 <__swhatbuf_r+0x12>
 8007f3e:	9a01      	ldr	r2, [sp, #4]
 8007f40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f48:	425a      	negs	r2, r3
 8007f4a:	415a      	adcs	r2, r3
 8007f4c:	602a      	str	r2, [r5, #0]
 8007f4e:	e7ee      	b.n	8007f2e <__swhatbuf_r+0x1e>
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	2000      	movs	r0, #0
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	b016      	add	sp, #88	; 0x58
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f5c <__smakebuf_r>:
 8007f5c:	898b      	ldrh	r3, [r1, #12]
 8007f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f60:	079d      	lsls	r5, r3, #30
 8007f62:	4606      	mov	r6, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	d507      	bpl.n	8007f78 <__smakebuf_r+0x1c>
 8007f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	2301      	movs	r3, #1
 8007f72:	6163      	str	r3, [r4, #20]
 8007f74:	b002      	add	sp, #8
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	ab01      	add	r3, sp, #4
 8007f7a:	466a      	mov	r2, sp
 8007f7c:	f7ff ffc8 	bl	8007f10 <__swhatbuf_r>
 8007f80:	9900      	ldr	r1, [sp, #0]
 8007f82:	4605      	mov	r5, r0
 8007f84:	4630      	mov	r0, r6
 8007f86:	f7ff f873 	bl	8007070 <_malloc_r>
 8007f8a:	b948      	cbnz	r0, 8007fa0 <__smakebuf_r+0x44>
 8007f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f90:	059a      	lsls	r2, r3, #22
 8007f92:	d4ef      	bmi.n	8007f74 <__smakebuf_r+0x18>
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	f043 0302 	orr.w	r3, r3, #2
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	e7e3      	b.n	8007f68 <__smakebuf_r+0xc>
 8007fa0:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <__smakebuf_r+0x7c>)
 8007fa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	6020      	str	r0, [r4, #0]
 8007fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	6163      	str	r3, [r4, #20]
 8007fb2:	9b01      	ldr	r3, [sp, #4]
 8007fb4:	6120      	str	r0, [r4, #16]
 8007fb6:	b15b      	cbz	r3, 8007fd0 <__smakebuf_r+0x74>
 8007fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f000 f91f 	bl	8008200 <_isatty_r>
 8007fc2:	b128      	cbz	r0, 8007fd0 <__smakebuf_r+0x74>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f023 0303 	bic.w	r3, r3, #3
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	89a0      	ldrh	r0, [r4, #12]
 8007fd2:	4305      	orrs	r5, r0
 8007fd4:	81a5      	strh	r5, [r4, #12]
 8007fd6:	e7cd      	b.n	8007f74 <__smakebuf_r+0x18>
 8007fd8:	08007d69 	.word	0x08007d69

08007fdc <memmove>:
 8007fdc:	4288      	cmp	r0, r1
 8007fde:	b510      	push	{r4, lr}
 8007fe0:	eb01 0402 	add.w	r4, r1, r2
 8007fe4:	d902      	bls.n	8007fec <memmove+0x10>
 8007fe6:	4284      	cmp	r4, r0
 8007fe8:	4623      	mov	r3, r4
 8007fea:	d807      	bhi.n	8007ffc <memmove+0x20>
 8007fec:	1e43      	subs	r3, r0, #1
 8007fee:	42a1      	cmp	r1, r4
 8007ff0:	d008      	beq.n	8008004 <memmove+0x28>
 8007ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ffa:	e7f8      	b.n	8007fee <memmove+0x12>
 8007ffc:	4402      	add	r2, r0
 8007ffe:	4601      	mov	r1, r0
 8008000:	428a      	cmp	r2, r1
 8008002:	d100      	bne.n	8008006 <memmove+0x2a>
 8008004:	bd10      	pop	{r4, pc}
 8008006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800800a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800800e:	e7f7      	b.n	8008000 <memmove+0x24>

08008010 <__malloc_lock>:
 8008010:	4801      	ldr	r0, [pc, #4]	; (8008018 <__malloc_lock+0x8>)
 8008012:	f7ff bf7b 	b.w	8007f0c <__retarget_lock_acquire_recursive>
 8008016:	bf00      	nop
 8008018:	20000934 	.word	0x20000934

0800801c <__malloc_unlock>:
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__malloc_unlock+0x8>)
 800801e:	f7ff bf76 	b.w	8007f0e <__retarget_lock_release_recursive>
 8008022:	bf00      	nop
 8008024:	20000934 	.word	0x20000934

08008028 <_realloc_r>:
 8008028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802c:	4680      	mov	r8, r0
 800802e:	4614      	mov	r4, r2
 8008030:	460e      	mov	r6, r1
 8008032:	b921      	cbnz	r1, 800803e <_realloc_r+0x16>
 8008034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	4611      	mov	r1, r2
 800803a:	f7ff b819 	b.w	8007070 <_malloc_r>
 800803e:	b92a      	cbnz	r2, 800804c <_realloc_r+0x24>
 8008040:	f7fe ffaa 	bl	8006f98 <_free_r>
 8008044:	4625      	mov	r5, r4
 8008046:	4628      	mov	r0, r5
 8008048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800804c:	f000 f8fa 	bl	8008244 <_malloc_usable_size_r>
 8008050:	4284      	cmp	r4, r0
 8008052:	4607      	mov	r7, r0
 8008054:	d802      	bhi.n	800805c <_realloc_r+0x34>
 8008056:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800805a:	d812      	bhi.n	8008082 <_realloc_r+0x5a>
 800805c:	4621      	mov	r1, r4
 800805e:	4640      	mov	r0, r8
 8008060:	f7ff f806 	bl	8007070 <_malloc_r>
 8008064:	4605      	mov	r5, r0
 8008066:	2800      	cmp	r0, #0
 8008068:	d0ed      	beq.n	8008046 <_realloc_r+0x1e>
 800806a:	42bc      	cmp	r4, r7
 800806c:	4622      	mov	r2, r4
 800806e:	4631      	mov	r1, r6
 8008070:	bf28      	it	cs
 8008072:	463a      	movcs	r2, r7
 8008074:	f7fe fe8a 	bl	8006d8c <memcpy>
 8008078:	4631      	mov	r1, r6
 800807a:	4640      	mov	r0, r8
 800807c:	f7fe ff8c 	bl	8006f98 <_free_r>
 8008080:	e7e1      	b.n	8008046 <_realloc_r+0x1e>
 8008082:	4635      	mov	r5, r6
 8008084:	e7df      	b.n	8008046 <_realloc_r+0x1e>

08008086 <_raise_r>:
 8008086:	291f      	cmp	r1, #31
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4604      	mov	r4, r0
 800808c:	460d      	mov	r5, r1
 800808e:	d904      	bls.n	800809a <_raise_r+0x14>
 8008090:	2316      	movs	r3, #22
 8008092:	6003      	str	r3, [r0, #0]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	bd38      	pop	{r3, r4, r5, pc}
 800809a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800809c:	b112      	cbz	r2, 80080a4 <_raise_r+0x1e>
 800809e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080a2:	b94b      	cbnz	r3, 80080b8 <_raise_r+0x32>
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 f831 	bl	800810c <_getpid_r>
 80080aa:	462a      	mov	r2, r5
 80080ac:	4601      	mov	r1, r0
 80080ae:	4620      	mov	r0, r4
 80080b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b4:	f000 b818 	b.w	80080e8 <_kill_r>
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d00a      	beq.n	80080d2 <_raise_r+0x4c>
 80080bc:	1c59      	adds	r1, r3, #1
 80080be:	d103      	bne.n	80080c8 <_raise_r+0x42>
 80080c0:	2316      	movs	r3, #22
 80080c2:	6003      	str	r3, [r0, #0]
 80080c4:	2001      	movs	r0, #1
 80080c6:	e7e7      	b.n	8008098 <_raise_r+0x12>
 80080c8:	2400      	movs	r4, #0
 80080ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080ce:	4628      	mov	r0, r5
 80080d0:	4798      	blx	r3
 80080d2:	2000      	movs	r0, #0
 80080d4:	e7e0      	b.n	8008098 <_raise_r+0x12>
	...

080080d8 <raise>:
 80080d8:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <raise+0xc>)
 80080da:	4601      	mov	r1, r0
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	f7ff bfd2 	b.w	8008086 <_raise_r>
 80080e2:	bf00      	nop
 80080e4:	20000068 	.word	0x20000068

080080e8 <_kill_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d07      	ldr	r5, [pc, #28]	; (8008108 <_kill_r+0x20>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	602b      	str	r3, [r5, #0]
 80080f6:	f7fa fd63 	bl	8002bc0 <_kill>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d102      	bne.n	8008104 <_kill_r+0x1c>
 80080fe:	682b      	ldr	r3, [r5, #0]
 8008100:	b103      	cbz	r3, 8008104 <_kill_r+0x1c>
 8008102:	6023      	str	r3, [r4, #0]
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	bf00      	nop
 8008108:	20000930 	.word	0x20000930

0800810c <_getpid_r>:
 800810c:	f7fa bd50 	b.w	8002bb0 <_getpid>

08008110 <__sread>:
 8008110:	b510      	push	{r4, lr}
 8008112:	460c      	mov	r4, r1
 8008114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008118:	f000 f89c 	bl	8008254 <_read_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	bfab      	itete	ge
 8008120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008122:	89a3      	ldrhlt	r3, [r4, #12]
 8008124:	181b      	addge	r3, r3, r0
 8008126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800812a:	bfac      	ite	ge
 800812c:	6563      	strge	r3, [r4, #84]	; 0x54
 800812e:	81a3      	strhlt	r3, [r4, #12]
 8008130:	bd10      	pop	{r4, pc}

08008132 <__swrite>:
 8008132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008136:	461f      	mov	r7, r3
 8008138:	898b      	ldrh	r3, [r1, #12]
 800813a:	05db      	lsls	r3, r3, #23
 800813c:	4605      	mov	r5, r0
 800813e:	460c      	mov	r4, r1
 8008140:	4616      	mov	r6, r2
 8008142:	d505      	bpl.n	8008150 <__swrite+0x1e>
 8008144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008148:	2302      	movs	r3, #2
 800814a:	2200      	movs	r2, #0
 800814c:	f000 f868 	bl	8008220 <_lseek_r>
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800815a:	81a3      	strh	r3, [r4, #12]
 800815c:	4632      	mov	r2, r6
 800815e:	463b      	mov	r3, r7
 8008160:	4628      	mov	r0, r5
 8008162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008166:	f000 b817 	b.w	8008198 <_write_r>

0800816a <__sseek>:
 800816a:	b510      	push	{r4, lr}
 800816c:	460c      	mov	r4, r1
 800816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008172:	f000 f855 	bl	8008220 <_lseek_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	bf15      	itete	ne
 800817c:	6560      	strne	r0, [r4, #84]	; 0x54
 800817e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008186:	81a3      	strheq	r3, [r4, #12]
 8008188:	bf18      	it	ne
 800818a:	81a3      	strhne	r3, [r4, #12]
 800818c:	bd10      	pop	{r4, pc}

0800818e <__sclose>:
 800818e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008192:	f000 b813 	b.w	80081bc <_close_r>
	...

08008198 <_write_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d07      	ldr	r5, [pc, #28]	; (80081b8 <_write_r+0x20>)
 800819c:	4604      	mov	r4, r0
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f7fa fd41 	bl	8002c2e <_write>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_write_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_write_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20000930 	.word	0x20000930

080081bc <_close_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d06      	ldr	r5, [pc, #24]	; (80081d8 <_close_r+0x1c>)
 80081c0:	2300      	movs	r3, #0
 80081c2:	4604      	mov	r4, r0
 80081c4:	4608      	mov	r0, r1
 80081c6:	602b      	str	r3, [r5, #0]
 80081c8:	f7fa fd4d 	bl	8002c66 <_close>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d102      	bne.n	80081d6 <_close_r+0x1a>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	b103      	cbz	r3, 80081d6 <_close_r+0x1a>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	20000930 	.word	0x20000930

080081dc <_fstat_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	; (80081fc <_fstat_r+0x20>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f7fa fd48 	bl	8002c7e <_fstat>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_fstat_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_fstat_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	20000930 	.word	0x20000930

08008200 <_isatty_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	; (800821c <_isatty_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7fa fd47 	bl	8002c9e <_isatty>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_isatty_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_isatty_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20000930 	.word	0x20000930

08008220 <_lseek_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	; (8008240 <_lseek_r+0x20>)
 8008224:	4604      	mov	r4, r0
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	2200      	movs	r2, #0
 800822c:	602a      	str	r2, [r5, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	f7fa fd40 	bl	8002cb4 <_lseek>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_lseek_r+0x1e>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_lseek_r+0x1e>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	20000930 	.word	0x20000930

08008244 <_malloc_usable_size_r>:
 8008244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008248:	1f18      	subs	r0, r3, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	bfbc      	itt	lt
 800824e:	580b      	ldrlt	r3, [r1, r0]
 8008250:	18c0      	addlt	r0, r0, r3
 8008252:	4770      	bx	lr

08008254 <_read_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	4d07      	ldr	r5, [pc, #28]	; (8008274 <_read_r+0x20>)
 8008258:	4604      	mov	r4, r0
 800825a:	4608      	mov	r0, r1
 800825c:	4611      	mov	r1, r2
 800825e:	2200      	movs	r2, #0
 8008260:	602a      	str	r2, [r5, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	f7fa fcc6 	bl	8002bf4 <_read>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_read_r+0x1e>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	b103      	cbz	r3, 8008272 <_read_r+0x1e>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	20000930 	.word	0x20000930

08008278 <_gettimeofday>:
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <_gettimeofday+0xc>)
 800827a:	2258      	movs	r2, #88	; 0x58
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	f04f 30ff 	mov.w	r0, #4294967295
 8008282:	4770      	bx	lr
 8008284:	20000930 	.word	0x20000930

08008288 <_init>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	bf00      	nop
 800828c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828e:	bc08      	pop	{r3}
 8008290:	469e      	mov	lr, r3
 8008292:	4770      	bx	lr

08008294 <_fini>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr
