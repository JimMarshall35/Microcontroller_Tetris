
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008794  08008794  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08008794  08008794  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008794  08008794  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800879c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          00000858  200000c8  200000c8  000200c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000920  20000920  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160b1  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d52  00000000  00000000  000361a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  00039ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  0003b290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f147  00000000  00000000  0003c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019335  00000000  00000000  0005b5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad3e6  00000000  00000000  000748e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121cca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a94  00000000  00000000  00121d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001277b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  001277d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ef0 	.word	0x08007ef0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08007ef0 	.word	0x08007ef0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStickChange>:

		*outputX = x;
		*outputY = y;
}

void ReadAnalogStickChange(ADC_HandleTypeDef* adc, i32* outputX, i32* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	//LCD_PCD8544_clear_ram(&gLcdScreen);
	HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f002 fde1 	bl	8002e54 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f002 fe93 	bl	8002fc0 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f002 ff5e 	bl	800315c <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002a6:	801a      	strh	r2, [r3, #0]
	uint16_t y = AD_RES;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

	// Start ADC Conversion
	HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f002 fdd0 	bl	8002e54 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f002 fe82 	bl	8002fc0 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f002 ff4d 	bl	800315c <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002c8:	801a      	strh	r2, [r3, #0]
	uint16_t x = AD_RES;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
	x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]
	y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	613b      	str	r3, [r7, #16]
	*outputX = (x - (twelveBitMax/2));
 80002e6:	8aba      	ldrh	r2, [r7, #20]
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	0fd9      	lsrs	r1, r3, #31
 80002ec:	440b      	add	r3, r1
 80002ee:	105b      	asrs	r3, r3, #1
 80002f0:	425b      	negs	r3, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	601a      	str	r2, [r3, #0]
	*outputY = (y - (twelveBitMax/2));
 80002f8:	8afa      	ldrh	r2, [r7, #22]
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	0fd9      	lsrs	r1, r3, #31
 80002fe:	440b      	add	r3, r1
 8000300:	105b      	asrs	r3, r3, #1
 8000302:	425b      	negs	r3, r3
 8000304:	441a      	add	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200000e4 	.word	0x200000e4

08000318 <gfxClearFrameBuffer>:
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
	}
}

void gfxClearFrameBuffer(){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 800031c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000320:	2100      	movs	r1, #0
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <gfxClearFrameBuffer+0x14>)
 8000324:	f006 fb74 	bl	8006a10 <memset>
	//UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000e8 	.word	0x200000e8

08000330 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	460a      	mov	r2, r1
 800033a:	71fb      	strb	r3, [r7, #7]
 800033c:	4613      	mov	r3, r2
 800033e:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b53      	cmp	r3, #83	; 0x53
 8000344:	d825      	bhi.n	8000392 <gfxPlotPixelInternal+0x62>
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	2b2e      	cmp	r3, #46	; 0x2e
 800034a:	d822      	bhi.n	8000392 <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	08db      	lsrs	r3, r3, #3
 8000350:	b2db      	uxtb	r3, r3
 8000352:	461a      	mov	r2, r3
 8000354:	2354      	movs	r3, #84	; 0x54
 8000356:	fb03 f202 	mul.w	r2, r3, r2
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4413      	add	r3, r2
 800035e:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000366:	d215      	bcs.n	8000394 <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <gfxPlotPixelInternal+0x70>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	b25a      	sxtb	r2, r3
 8000372:	79bb      	ldrb	r3, [r7, #6]
 8000374:	f003 0307 	and.w	r3, r3, #7
 8000378:	2101      	movs	r1, #1
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
 800037e:	b25b      	sxtb	r3, r3
 8000380:	4313      	orrs	r3, r2
 8000382:	b25b      	sxtb	r3, r3
 8000384:	b2d9      	uxtb	r1, r3
 8000386:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <gfxPlotPixelInternal+0x70>)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	460a      	mov	r2, r1
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	e000      	b.n	8000394 <gfxPlotPixelInternal+0x64>
		return;
 8000392:	bf00      	nop
}
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	200000e8 	.word	0x200000e8

080003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4604      	mov	r4, r0
 80003ac:	4608      	mov	r0, r1
 80003ae:	4611      	mov	r1, r2
 80003b0:	461a      	mov	r2, r3
 80003b2:	4623      	mov	r3, r4
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	4603      	mov	r3, r0
 80003b8:	71bb      	strb	r3, [r7, #6]
 80003ba:	460b      	mov	r3, r1
 80003bc:	717b      	strb	r3, [r7, #5]
 80003be:	4613      	mov	r3, r2
 80003c0:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	e01c      	b.n	8000402 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 80003c8:	4913      	ldr	r1, [pc, #76]	; (8000418 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80003ca:	68fa      	ldr	r2, [r7, #12]
 80003cc:	4613      	mov	r3, r2
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	4413      	add	r3, r2
 80003d2:	440b      	add	r3, r1
 80003d4:	2201      	movs	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 80003d8:	490f      	ldr	r1, [pc, #60]	; (8000418 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	4613      	mov	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	440b      	add	r3, r1
 80003e4:	3301      	adds	r3, #1
 80003e6:	797a      	ldrb	r2, [r7, #5]
 80003e8:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 80003ea:	490b      	ldr	r1, [pc, #44]	; (8000418 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	4613      	mov	r3, r2
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4413      	add	r3, r2
 80003f4:	440b      	add	r3, r1
 80003f6:	3302      	adds	r3, #2
 80003f8:	793a      	ldrb	r2, [r7, #4]
 80003fa:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	3301      	adds	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	429a      	cmp	r2, r3
 8000408:	ddde      	ble.n	80003c8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bc90      	pop	{r4, r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	200002e0 	.word	0x200002e0

0800041c <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
 8000422:	4604      	mov	r4, r0
 8000424:	4608      	mov	r0, r1
 8000426:	4611      	mov	r1, r2
 8000428:	461a      	mov	r2, r3
 800042a:	4623      	mov	r3, r4
 800042c:	71fb      	strb	r3, [r7, #7]
 800042e:	4603      	mov	r3, r0
 8000430:	71bb      	strb	r3, [r7, #6]
 8000432:	460b      	mov	r3, r1
 8000434:	717b      	strb	r3, [r7, #5]
 8000436:	4613      	mov	r3, r2
 8000438:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800043a:	797a      	ldrb	r2, [r7, #5]
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 8000442:	793a      	ldrb	r2, [r7, #4]
 8000444:	79bb      	ldrb	r3, [r7, #6]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 800044a:	2301      	movs	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	2b00      	cmp	r3, #0
 8000452:	da05      	bge.n	8000460 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
 8000458:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	425b      	negs	r3, r3
 800045e:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	005a      	lsls	r2, r3, #1
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	e01e      	b.n	80004b2 <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	b2d2      	uxtb	r2, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff56 	bl	8000330 <gfxPlotPixelInternal>
		if(D > 0){
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	2b00      	cmp	r3, #0
 8000488:	dd0b      	ble.n	80004a2 <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 800048a:	693a      	ldr	r2, [r7, #16]
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	4413      	add	r3, r2
 8000490:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	4413      	add	r3, r2
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	e004      	b.n	80004ac <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 80004a2:	69fb      	ldr	r3, [r7, #28]
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	4413      	add	r3, r2
 80004aa:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3301      	adds	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	797b      	ldrb	r3, [r7, #5]
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	dddc      	ble.n	8000474 <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	3724      	adds	r7, #36	; 0x24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd90      	pop	{r4, r7, pc}

080004c4 <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b089      	sub	sp, #36	; 0x24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4604      	mov	r4, r0
 80004cc:	4608      	mov	r0, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	461a      	mov	r2, r3
 80004d2:	4623      	mov	r3, r4
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	4603      	mov	r3, r0
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	460b      	mov	r3, r1
 80004dc:	717b      	strb	r3, [r7, #5]
 80004de:	4613      	mov	r3, r2
 80004e0:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 80004e2:	797a      	ldrb	r2, [r7, #5]
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 80004ea:	793a      	ldrb	r2, [r7, #4]
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	da04      	bge.n	8000506 <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	425b      	negs	r3, r3
 8000504:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	005a      	lsls	r2, r3, #1
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e01e      	b.n	8000558 <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	4611      	mov	r1, r2
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff03 	bl	8000330 <gfxPlotPixelInternal>
		if(D > 0){
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	2b00      	cmp	r3, #0
 800052e:	dd0b      	ble.n	8000548 <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	4413      	add	r3, r2
 8000536:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 8000538:	69fa      	ldr	r2, [r7, #28]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	4413      	add	r3, r2
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	e004      	b.n	8000552 <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	4413      	add	r3, r2
 8000550:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	793b      	ldrb	r3, [r7, #4]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	429a      	cmp	r2, r3
 800055e:	dddc      	ble.n	800051a <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3724      	adds	r7, #36	; 0x24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd90      	pop	{r4, r7, pc}

0800056a <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 800056a:	b590      	push	{r4, r7, lr}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	4604      	mov	r4, r0
 8000572:	4608      	mov	r0, r1
 8000574:	4611      	mov	r1, r2
 8000576:	461a      	mov	r2, r3
 8000578:	4623      	mov	r3, r4
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4603      	mov	r3, r0
 800057e:	71bb      	strb	r3, [r7, #6]
 8000580:	460b      	mov	r3, r1
 8000582:	717b      	strb	r3, [r7, #5]
 8000584:	4613      	mov	r3, r2
 8000586:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 8000588:	793a      	ldrb	r2, [r7, #4]
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000592:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000596:	7979      	ldrb	r1, [r7, #5]
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	1acb      	subs	r3, r1, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	bfb8      	it	lt
 80005a0:	425b      	neglt	r3, r3
 80005a2:	429a      	cmp	r2, r3
 80005a4:	da11      	bge.n	80005ca <gfxDrawLine+0x60>
		if(x0 > x1){
 80005a6:	79fa      	ldrb	r2, [r7, #7]
 80005a8:	797b      	ldrb	r3, [r7, #5]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d906      	bls.n	80005bc <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	79fa      	ldrb	r2, [r7, #7]
 80005b2:	7939      	ldrb	r1, [r7, #4]
 80005b4:	7978      	ldrb	r0, [r7, #5]
 80005b6:	f7ff ff31 	bl	800041c <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 80005ba:	e017      	b.n	80005ec <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 80005bc:	793b      	ldrb	r3, [r7, #4]
 80005be:	797a      	ldrb	r2, [r7, #5]
 80005c0:	79b9      	ldrb	r1, [r7, #6]
 80005c2:	79f8      	ldrb	r0, [r7, #7]
 80005c4:	f7ff ff2a 	bl	800041c <gfxDrawLineBresenhamLow>
}
 80005c8:	e010      	b.n	80005ec <gfxDrawLine+0x82>
		if(y0 > y1){
 80005ca:	79ba      	ldrb	r2, [r7, #6]
 80005cc:	793b      	ldrb	r3, [r7, #4]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d906      	bls.n	80005e0 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	7939      	ldrb	r1, [r7, #4]
 80005d8:	7978      	ldrb	r0, [r7, #5]
 80005da:	f7ff ff73 	bl	80004c4 <gfxDrawLineBresenhamHigh>
}
 80005de:	e005      	b.n	80005ec <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 80005e0:	793b      	ldrb	r3, [r7, #4]
 80005e2:	797a      	ldrb	r2, [r7, #5]
 80005e4:	79b9      	ldrb	r1, [r7, #6]
 80005e6:	79f8      	ldrb	r0, [r7, #7]
 80005e8:	f7ff ff6c 	bl	80004c4 <gfxDrawLineBresenhamHigh>
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd90      	pop	{r4, r7, pc}

080005f4 <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08e      	sub	sp, #56	; 0x38
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80005fc:	2300      	movs	r3, #0
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000600:	e067      	b.n	80006d2 <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 8000602:	4938      	ldr	r1, [pc, #224]	; (80006e4 <gfxFinishDrawing+0xf0>)
 8000604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	440b      	add	r3, r1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d15b      	bne.n	80006cc <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 8000614:	4933      	ldr	r1, [pc, #204]	; (80006e4 <gfxFinishDrawing+0xf0>)
 8000616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	440b      	add	r3, r1
 8000620:	3301      	adds	r3, #1
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 8000628:	492e      	ldr	r1, [pc, #184]	; (80006e4 <gfxFinishDrawing+0xf0>)
 800062a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	440b      	add	r3, r1
 8000634:	3302      	adds	r3, #2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 800063c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000644:	429a      	cmp	r2, r3
 8000646:	d20b      	bcs.n	8000660 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 8000648:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800064c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000650:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000658:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800065c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 8000660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000662:	2254      	movs	r2, #84	; 0x54
 8000664:	fb02 f303 	mul.w	r3, r2, r3
 8000668:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	b2d9      	uxtb	r1, r3
 800066e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	4413      	add	r3, r2
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <gfxFinishDrawing+0xf4>)
 8000678:	1898      	adds	r0, r3, r2
 800067a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800067e:	b29a      	uxth	r2, r3
 8000680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000684:	b29b      	uxth	r3, r3
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	b29b      	uxth	r3, r3
 800068a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	4603      	mov	r3, r0
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f82a 	bl	80006ec <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 8000698:	4912      	ldr	r1, [pc, #72]	; (80006e4 <gfxFinishDrawing+0xf0>)
 800069a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 80006a8:	490e      	ldr	r1, [pc, #56]	; (80006e4 <gfxFinishDrawing+0xf0>)
 80006aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	3301      	adds	r3, #1
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 80006ba:	490a      	ldr	r1, [pc, #40]	; (80006e4 <gfxFinishDrawing+0xf0>)
 80006bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006be:	4613      	mov	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	3302      	adds	r3, #2
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80006cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ce:	3301      	adds	r3, #1
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	2b05      	cmp	r3, #5
 80006d6:	dd94      	ble.n	8000602 <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3730      	adds	r7, #48	; 0x30
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200002e0 	.word	0x200002e0
 80006e8:	200000e8 	.word	0x200000e8

080006ec <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	72fb      	strb	r3, [r7, #11]
 80006fa:	4613      	mov	r3, r2
 80006fc:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f001 fd18 	bl	800213c <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f001 fd35 	bl	800217c <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8000712:	7dfa      	ldrb	r2, [r7, #23]
 8000714:	7db9      	ldrb	r1, [r7, #22]
 8000716:	2300      	movs	r3, #0
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f001 fc38 	bl	8001f8e <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 800071e:	7aba      	ldrb	r2, [r7, #10]
 8000720:	7afb      	ldrb	r3, [r7, #11]
 8000722:	4619      	mov	r1, r3
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f001 fc85 	bl	8002034 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f001 fd36 	bl	800219c <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f001 fd13 	bl	800215c <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f001 fd20 	bl	800217c <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 800073c:	8c3b      	ldrh	r3, [r7, #32]
 800073e:	461a      	mov	r2, r3
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f001 fbf0 	bl	8001f28 <LCD_PCD8544_LL_send_data>
 8000748:	4603      	mov	r3, r0
 800074a:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f001 fd25 	bl	800219c <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8000752:	7d7b      	ldrb	r3, [r7, #21]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 800075c:	b580      	push	{r7, lr}
 800075e:	b09c      	sub	sp, #112	; 0x70
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	603a      	str	r2, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	460b      	mov	r3, r1
 800076a:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 800076c:	6838      	ldr	r0, [r7, #0]
 800076e:	f7ff fd2f 	bl	80001d0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 8000778:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	461a      	mov	r2, r3
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	4413      	add	r3, r2
 800078a:	2b54      	cmp	r3, #84	; 0x54
 800078c:	dd04      	ble.n	8000798 <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 800078e:	230e      	movs	r3, #14
 8000790:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2254      	movs	r2, #84	; 0x54
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f006 f935 	bl	8006a10 <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 80007ac:	e029      	b.n	8000802 <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 80007ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d029      	beq.n	8000810 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 80007bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 80007ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	461a      	mov	r2, r3
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	1898      	adds	r0, r3, r2
 80007de:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <gfxWriteTextLineToFrameBuffer+0xf4>)
 80007ee:	4413      	add	r3, r2
 80007f0:	2206      	movs	r2, #6
 80007f2:	4619      	mov	r1, r3
 80007f4:	f006 f8fe 	bl	80069f4 <memcpy>
	for ( ; nChars<strLen; nChars++) {
 80007f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80007fc:	3301      	adds	r3, #1
 80007fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000802:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000806:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800080a:	429a      	cmp	r2, r3
 800080c:	d3cf      	bcc.n	80007ae <gfxWriteTextLineToFrameBuffer+0x52>
 800080e:	e000      	b.n	8000812 <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 8000810:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2254      	movs	r2, #84	; 0x54
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 800081c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	0052      	lsls	r2, r2, #1
 8000826:	4413      	add	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 800082e:	79ba      	ldrb	r2, [r7, #6]
 8000830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000832:	4413      	add	r3, r2
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <gfxWriteTextLineToFrameBuffer+0xf8>)
 8000836:	4413      	add	r3, r2
 8000838:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800083c:	f107 010c 	add.w	r1, r7, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f006 f8d7 	bl	80069f4 <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 8000846:	bf00      	nop
 8000848:	3770      	adds	r7, #112	; 0x70
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	08007f3c 	.word	0x08007f3c
 8000854:	200000e8 	.word	0x200000e8

08000858 <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4604      	mov	r4, r0
 8000860:	4608      	mov	r0, r1
 8000862:	4611      	mov	r1, r2
 8000864:	461a      	mov	r2, r3
 8000866:	4623      	mov	r3, r4
 8000868:	71fb      	strb	r3, [r7, #7]
 800086a:	4603      	mov	r3, r0
 800086c:	71bb      	strb	r3, [r7, #6]
 800086e:	460b      	mov	r3, r1
 8000870:	717b      	strb	r3, [r7, #5]
 8000872:	4613      	mov	r3, r2
 8000874:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	797a      	ldrb	r2, [r7, #5]
 800087a:	79b9      	ldrb	r1, [r7, #6]
 800087c:	79f8      	ldrb	r0, [r7, #7]
 800087e:	f7ff fe74 	bl	800056a <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 8000882:	793b      	ldrb	r3, [r7, #4]
 8000884:	797a      	ldrb	r2, [r7, #5]
 8000886:	79b9      	ldrb	r1, [r7, #6]
 8000888:	7978      	ldrb	r0, [r7, #5]
 800088a:	f7ff fe6e 	bl	800056a <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 800088e:	793b      	ldrb	r3, [r7, #4]
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	7939      	ldrb	r1, [r7, #4]
 8000894:	7978      	ldrb	r0, [r7, #5]
 8000896:	f7ff fe68 	bl	800056a <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	7939      	ldrb	r1, [r7, #4]
 80008a0:	79f8      	ldrb	r0, [r7, #7]
 80008a2:	f7ff fe62 	bl	800056a <gfxDrawLine>


}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd90      	pop	{r4, r7, pc}
	...

080008b0 <ClearUpdateRegions>:

void ClearUpdateRegions(){
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	e01c      	b.n	80008f6 <ClearUpdateRegions+0x46>
		gScreenRegionsToUpdate[i].updateColumnFinish = 0;
 80008bc:	4913      	ldr	r1, [pc, #76]	; (800090c <ClearUpdateRegions+0x5c>)
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	3302      	adds	r3, #2
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 80008ce:	490f      	ldr	r1, [pc, #60]	; (800090c <ClearUpdateRegions+0x5c>)
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	440b      	add	r3, r1
 80008da:	3301      	adds	r3, #1
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 0;
 80008e0:	490a      	ldr	r1, [pc, #40]	; (800090c <ClearUpdateRegions+0x5c>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b05      	cmp	r3, #5
 80008fa:	dddf      	ble.n	80008bc <ClearUpdateRegions+0xc>


	}
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	200002e0 	.word	0x200002e0

08000910 <ClearScreen>:


void ClearScreen(LCD_PCD8544_screen_t* scr){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	gfxClearFrameBuffer();
 8000918:	f7ff fcfe 	bl	8000318 <gfxClearFrameBuffer>
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e01c      	b.n	800095c <ClearScreen+0x4c>
		gScreenRegionsToUpdate[i].updateColumnFinish = 83;
 8000922:	4913      	ldr	r1, [pc, #76]	; (8000970 <ClearScreen+0x60>)
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	440b      	add	r3, r1
 800092e:	3302      	adds	r3, #2
 8000930:	2253      	movs	r2, #83	; 0x53
 8000932:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000934:	490e      	ldr	r1, [pc, #56]	; (8000970 <ClearScreen+0x60>)
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	440b      	add	r3, r1
 8000940:	3301      	adds	r3, #1
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 1;
 8000946:	490a      	ldr	r1, [pc, #40]	; (8000970 <ClearScreen+0x60>)
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	440b      	add	r3, r1
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3301      	adds	r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b05      	cmp	r3, #5
 8000960:	dddf      	ble.n	8000922 <ClearScreen+0x12>
	}
	gfxFinishDrawing(scr);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fe46 	bl	80005f4 <gfxFinishDrawing>

}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200002e0 	.word	0x200002e0

08000974 <TetrisAccumulatedPlaytime_Load>:
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

static u32 _accumulatedPlaytime = 0;//0xdeadbeef;

u32 TetrisAccumulatedPlaytime_Load(u32 startAddress){
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	_accumulatedPlaytime = *((u32*)startAddress);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <TetrisAccumulatedPlaytime_Load+0x24>)
 8000982:	6013      	str	r3, [r2, #0]
	return startAddress += sizeof(u32);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3304      	adds	r3, #4
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	200002f4 	.word	0x200002f4

0800099c <TetrisAccumulatedPlaytime_Save>:


u32 TetrisAccumulatedPlaytime_Save(u32 startAddress){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,startAddress, _accumulatedPlaytime);
 80009a4:	4908      	ldr	r1, [pc, #32]	; (80009c8 <TetrisAccumulatedPlaytime_Save+0x2c>)
 80009a6:	6809      	ldr	r1, [r1, #0]
 80009a8:	2000      	movs	r0, #0
 80009aa:	460a      	mov	r2, r1
 80009ac:	4603      	mov	r3, r0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	2002      	movs	r0, #2
 80009b2:	f003 f8c3 	bl	8003b3c <HAL_FLASH_Program>
	return startAddress += sizeof(u32);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3304      	adds	r3, #4
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002f4 	.word	0x200002f4

080009cc <TetrisAccumulatedPlaytime_GetAccumulatedPlaytime>:

u32 TetrisAccumulatedPlaytime_GetAccumulatedPlaytime(){
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	return _accumulatedPlaytime;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <TetrisAccumulatedPlaytime_GetAccumulatedPlaytime+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200002f4 	.word	0x200002f4

080009e4 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime>:

u32 TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime(u32 amountToIncrementBy){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	_accumulatedPlaytime += amountToIncrementBy;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime+0x24>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime+0x24>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	200002f4 	.word	0x200002f4

08000a0c <GetStateAtXY>:
static u8* _TetrisPieces[NUM_TETRIS_PIECES]  = {_ZPieceOccupiedIndicies, _SPieceOccupiedIndicies,_OPieceOccupiedIndicies,_LPieceOccupiedIndicies,_TPieceOccupiedIndicies,_JPieceOccupiedIndicies,_IPieceOccupiedIndices, };




static BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <GetStateAtXY+0x3c>)
 8000a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a24:	461a      	mov	r2, r3
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	fa42 f303 	asr.w	r3, r2, r3
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf14      	ite	ne
 8000a34:	2301      	movne	r3, #1
 8000a36:	2300      	moveq	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	200002f8 	.word	0x200002f8

08000a4c <SetStateAtXY>:

static void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	460b      	mov	r3, r1
 8000a58:	71bb      	strb	r3, [r7, #6]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000a5e:	797b      	ldrb	r3, [r7, #5]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d111      	bne.n	8000a88 <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <SetStateAtXY+0x70>)
 8000a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2101      	movs	r1, #1
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	b291      	uxth	r1, r2
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <SetStateAtXY+0x70>)
 8000a82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 8000a86:	e012      	b.n	8000aae <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <SetStateAtXY+0x70>)
 8000a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2101      	movs	r1, #1
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	b291      	uxth	r1, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <SetStateAtXY+0x70>)
 8000aaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200002f8 	.word	0x200002f8

08000ac0 <Tetris_DrawCurentPiece>:




static void Tetris_DrawCurentPiece(){
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000ac6:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <Tetris_DrawCurentPiece+0xb8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a2b      	ldr	r2, [pc, #172]	; (8000b78 <Tetris_DrawCurentPiece+0xb8>)
 8000acc:	7912      	ldrb	r2, [r2, #4]
 8000ace:	0092      	lsls	r2, r2, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e045      	b.n	8000b66 <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	0052      	lsls	r2, r2, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	0052      	lsls	r2, r2, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <Tetris_DrawCurentPiece+0xb8>)
 8000b04:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	0052      	lsls	r2, r2, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	4413      	add	r3, r2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <Tetris_DrawCurentPiece+0xb8>)
 8000b1c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	0052      	lsls	r2, r2, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	797b      	ldrb	r3, [r7, #5]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db12      	blt.n	8000b60 <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <Tetris_DrawCurentPiece+0xbc>)
 8000b3c:	681c      	ldr	r4, [r3, #0]
 8000b3e:	793a      	ldrb	r2, [r7, #4]
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <Tetris_DrawCurentPiece+0xc0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	b2d8      	uxtb	r0, r3
 8000b48:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000b4a:	793a      	ldrb	r2, [r7, #4]
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <Tetris_DrawCurentPiece+0xc0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000b54:	3303      	adds	r3, #3
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	3303      	adds	r3, #3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3301      	adds	r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	ddb6      	ble.n	8000ada <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000330 	.word	0x20000330
 8000b7c:	2000031c 	.word	0x2000031c
 8000b80:	20000000 	.word	0x20000000

08000b84 <Tetris_DrawNextPiece>:

static void Tetris_DrawNextPiece(){
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <Tetris_DrawNextPiece+0x94>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <Tetris_DrawNextPiece+0x94>)
 8000b90:	7912      	ldrb	r2, [r2, #4]
 8000b92:	0092      	lsls	r2, r2, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	e033      	b.n	8000c06 <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0052      	lsls	r2, r2, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	0052      	lsls	r2, r2, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	3321      	adds	r3, #33	; 0x21
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000bce:	797b      	ldrb	r3, [r7, #5]
 8000bd0:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db12      	blt.n	8000c00 <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <Tetris_DrawNextPiece+0x98>)
 8000bdc:	681c      	ldr	r4, [r3, #0]
 8000bde:	793a      	ldrb	r2, [r7, #4]
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <Tetris_DrawNextPiece+0x9c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	b2d8      	uxtb	r0, r3
 8000be8:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000bea:	793a      	ldrb	r2, [r7, #4]
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <Tetris_DrawNextPiece+0x9c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000bf4:	3303      	adds	r3, #3
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	3303      	adds	r3, #3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	ddc8      	ble.n	8000b9e <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000338 	.word	0x20000338
 8000c1c:	2000031c 	.word	0x2000031c
 8000c20:	20000000 	.word	0x20000000

08000c24 <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000c2e:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <Tetris_DrawTetrisBoard+0xe0>)
 8000c30:	681c      	ldr	r4, [r3, #0]
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <Tetris_DrawTetrisBoard+0xe4>)
 8000c34:	7818      	ldrb	r0, [r3, #0]
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <Tetris_DrawTetrisBoard+0xe8>)
 8000c38:	7819      	ldrb	r1, [r3, #0]
 8000c3a:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <Tetris_DrawTetrisBoard+0xe4>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	331e      	adds	r3, #30
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <Tetris_DrawTetrisBoard+0xe8>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	332d      	adds	r3, #45	; 0x2d
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e049      	b.n	8000ce6 <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	e040      	b.n	8000cda <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fed2 	bl	8000a0c <GetStateAtXY>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d132      	bne.n	8000cd4 <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	0052      	lsls	r2, r2, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <Tetris_DrawTetrisBoard+0xe4>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	0052      	lsls	r2, r2, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <Tetris_DrawTetrisBoard+0xe8>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	0052      	lsls	r2, r2, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <Tetris_DrawTetrisBoard+0xe4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	3303      	adds	r3, #3
 8000cac:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	0052      	lsls	r2, r2, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <Tetris_DrawTetrisBoard+0xe8>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	3303      	adds	r3, #3
 8000cc4:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <Tetris_DrawTetrisBoard+0xec>)
 8000cc8:	681c      	ldr	r4, [r3, #0]
 8000cca:	7b3b      	ldrb	r3, [r7, #12]
 8000ccc:	7b7a      	ldrb	r2, [r7, #13]
 8000cce:	7bb9      	ldrb	r1, [r7, #14]
 8000cd0:	7bf8      	ldrb	r0, [r7, #15]
 8000cd2:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	2b09      	cmp	r3, #9
 8000cde:	ddbb      	ble.n	8000c58 <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2b0e      	cmp	r3, #14
 8000cea:	ddb2      	ble.n	8000c52 <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 8000cec:	f7ff fee8 	bl	8000ac0 <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d101      	bne.n	8000cfa <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8000cf6:	f7ff ff45 	bl	8000b84 <Tetris_DrawNextPiece>
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	371c      	adds	r7, #28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd90      	pop	{r4, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000318 	.word	0x20000318
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000340 	.word	0x20000340
 8000d10:	20000320 	.word	0x20000320

08000d14 <InitNewCurrentPiece>:

static void InitNewCurrentPiece(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <InitNewCurrentPiece+0x30>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <InitNewCurrentPiece+0x30>)
 8000d20:	22fe      	movs	r2, #254	; 0xfe
 8000d22:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <InitNewCurrentPiece+0x34>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4798      	blx	r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <InitNewCurrentPiece+0x38>)
 8000d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <InitNewCurrentPiece+0x30>)
 8000d36:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8000d38:	4b02      	ldr	r3, [pc, #8]	; (8000d44 <InitNewCurrentPiece+0x30>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	711a      	strb	r2, [r3, #4]
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000330 	.word	0x20000330
 8000d48:	20000324 	.word	0x20000324
 8000d4c:	20000004 	.word	0x20000004

08000d50 <InitNewNextPiece>:

static void InitNewNextPiece(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <InitNewNextPiece+0x30>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <InitNewNextPiece+0x30>)
 8000d5c:	22fe      	movs	r2, #254	; 0xfe
 8000d5e:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <InitNewNextPiece+0x34>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4798      	blx	r3
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <InitNewNextPiece+0x38>)
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <InitNewNextPiece+0x30>)
 8000d72:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <InitNewNextPiece+0x30>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	711a      	strb	r2, [r3, #4]
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000338 	.word	0x20000338
 8000d84:	20000324 	.word	0x20000324
 8000d88:	20000004 	.word	0x20000004

08000d8c <CopyNextPieceToCurrent>:

static void CopyNextPieceToCurrent(){
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <CopyNextPieceToCurrent+0x1c>)
 8000d92:	4a06      	ldr	r2, [pc, #24]	; (8000dac <CopyNextPieceToCurrent+0x20>)
 8000d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d98:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000330 	.word	0x20000330
 8000dac:	20000338 	.word	0x20000338

08000db0 <Tetris_ResetTetrisBoard>:

void Tetris_ResetTetrisBoard(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 8000db4:	221e      	movs	r2, #30
 8000db6:	2100      	movs	r1, #0
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <Tetris_ResetTetrisBoard+0x1c>)
 8000dba:	f005 fe29 	bl	8006a10 <memset>
	InitNewCurrentPiece();
 8000dbe:	f7ff ffa9 	bl	8000d14 <InitNewCurrentPiece>
	InitNewNextPiece();
 8000dc2:	f7ff ffc5 	bl	8000d50 <InitNewNextPiece>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200002f8 	.word	0x200002f8

08000dd0 <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 8000dde:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <Tetris_Init+0x40>)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 8000de4:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <Tetris_Init+0x44>)
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <Tetris_Init+0x48>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <Tetris_Init+0x4c>)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <Tetris_Init+0x50>)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 8000dfc:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <Tetris_Init+0x54>)
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	6013      	str	r3, [r2, #0]
	//Tetris_ResetTetrisBoard();
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000318 	.word	0x20000318
 8000e14:	20000320 	.word	0x20000320
 8000e18:	2000031c 	.word	0x2000031c
 8000e1c:	20000324 	.word	0x20000324
 8000e20:	20000328 	.word	0x20000328
 8000e24:	2000032c 	.word	0x2000032c

08000e28 <IsBlockAllowedToBeHere>:

static bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	4613      	mov	r3, r2
 8000e36:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8000e38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	da09      	bge.n	8000e54 <IsBlockAllowedToBeHere+0x2c>
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db05      	blt.n	8000e54 <IsBlockAllowedToBeHere+0x2c>
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b09      	cmp	r3, #9
 8000e4e:	dc01      	bgt.n	8000e54 <IsBlockAllowedToBeHere+0x2c>
		return true;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e01b      	b.n	8000e8c <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fdd6 	bl	8000a0c <GetStateAtXY>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d101      	bne.n	8000e6a <IsBlockAllowedToBeHere+0x42>
		return false;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e010      	b.n	8000e8c <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	dc03      	bgt.n	8000e7a <IsBlockAllowedToBeHere+0x52>
 8000e72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e76:	2b0e      	cmp	r3, #14
 8000e78:	dd01      	ble.n	8000e7e <IsBlockAllowedToBeHere+0x56>
		return false;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e006      	b.n	8000e8c <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da01      	bge.n	8000e8a <IsBlockAllowedToBeHere+0x62>
		return false;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <WriteCurrentPieceToGameBoardArray>:

static bool WriteCurrentPieceToGameBoardArray(){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <WriteCurrentPieceToGameBoardArray+0x88>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <WriteCurrentPieceToGameBoardArray+0x88>)
 8000ea0:	7912      	ldrb	r2, [r2, #4]
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	e02e      	b.n	8000f0c <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <WriteCurrentPieceToGameBoardArray+0x88>)
 8000ec8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <WriteCurrentPieceToGameBoardArray+0x88>)
 8000ed8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	797b      	ldrb	r3, [r7, #5]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 8000ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da01      	bge.n	8000ef2 <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e010      	b.n	8000f14 <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 8000ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db05      	blt.n	8000f06 <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 8000efa:	793b      	ldrb	r3, [r7, #4]
 8000efc:	78f9      	ldrb	r1, [r7, #3]
 8000efe:	2201      	movs	r2, #1
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fda3 	bl	8000a4c <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	ddcd      	ble.n	8000eae <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000330 	.word	0x20000330

08000f20 <IsMoveValid>:

static u8 IsMoveValid(){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <IsMoveValid+0x84>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <IsMoveValid+0x84>)
 8000f2c:	7912      	ldrb	r2, [r2, #4]
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e02b      	b.n	8000f92 <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <IsMoveValid+0x84>)
 8000f54:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <IsMoveValid+0x84>)
 8000f64:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 8000f72:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000f76:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff53 	bl	8000e28 <IsBlockAllowedToBeHere>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <IsMoveValid+0x6c>
			return 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e006      	b.n	8000f9a <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	ddd0      	ble.n	8000f3a <IsMoveValid+0x1a>
		}
	}
	return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000330 	.word	0x20000330

08000fa8 <CheckForAndClearLines>:

static u8 CheckForAndClearLines(){
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8000fb6:	230e      	movs	r3, #14
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	e027      	b.n	800100c <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 8000fbc:	4a18      	ldr	r2, [pc, #96]	; (8001020 <CheckForAndClearLines+0x78>)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d105      	bne.n	8000fd8 <CheckForAndClearLines+0x30>
			linesToClear++;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	71bb      	strb	r3, [r7, #6]
 8000fd6:	e001      	b.n	8000fdc <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d011      	beq.n	8001006 <CheckForAndClearLines+0x5e>
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10e      	bne.n	8001006 <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 8000fe8:	79fa      	ldrb	r2, [r7, #7]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	490c      	ldr	r1, [pc, #48]	; (8001020 <CheckForAndClearLines+0x78>)
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <CheckForAndClearLines+0x78>)
 8000ff8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <CheckForAndClearLines+0x78>)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2100      	movs	r1, #0
 8001002:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	dad4      	bge.n	8000fbc <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 8001012:	79fb      	ldrb	r3, [r7, #7]
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	200002f8 	.word	0x200002f8

08001024 <Tetris_Rotate>:

void Tetris_Rotate(){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 8001028:	4b10      	ldr	r3, [pc, #64]	; (800106c <Tetris_Rotate+0x48>)
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	3301      	adds	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <Tetris_Rotate+0x48>)
 8001032:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <Tetris_Rotate+0x48>)
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d902      	bls.n	8001042 <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <Tetris_Rotate+0x48>)
 800103e:	2200      	movs	r2, #0
 8001040:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 8001042:	f7ff ff6d 	bl	8000f20 <IsMoveValid>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10d      	bne.n	8001068 <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <Tetris_Rotate+0x48>)
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d103      	bne.n	800105c <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <Tetris_Rotate+0x48>)
 8001056:	2203      	movs	r2, #3
 8001058:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 800105a:	e005      	b.n	8001068 <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <Tetris_Rotate+0x48>)
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	3b01      	subs	r3, #1
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b01      	ldr	r3, [pc, #4]	; (800106c <Tetris_Rotate+0x48>)
 8001066:	711a      	strb	r2, [r3, #4]
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000330 	.word	0x20000330

08001070 <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <Tetris_MoveDown+0x80>)
 8001078:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3301      	adds	r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	b25a      	sxtb	r2, r3
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <Tetris_MoveDown+0x80>)
 8001086:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 8001088:	f7ff ff4a 	bl	8000f20 <IsMoveValid>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d128      	bne.n	80010e4 <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <Tetris_MoveDown+0x80>)
 8001094:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3b01      	subs	r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <Tetris_MoveDown+0x80>)
 80010a2:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 80010a4:	f7ff fef6 	bl	8000e94 <WriteCurrentPieceToGameBoardArray>
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 80010ac:	f7ff ff7c 	bl	8000fa8 <CheckForAndClearLines>
 80010b0:	4603      	mov	r3, r0
 80010b2:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 80010b4:	f7ff fe6a 	bl	8000d8c <CopyNextPieceToCurrent>
		InitNewNextPiece();
 80010b8:	f7ff fe4a 	bl	8000d50 <InitNewNextPiece>
		if(hasGameOverOccured == true){
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d106      	bne.n	80010d0 <Tetris_MoveDown+0x60>
			_onGameOver();
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <Tetris_MoveDown+0x84>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4798      	blx	r3
			Tetris_ResetTetrisBoard();
 80010c8:	f7ff fe72 	bl	8000db0 <Tetris_ResetTetrisBoard>
			return MoveDownResultGameOver;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e00a      	b.n	80010e6 <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d004      	beq.n	80010e0 <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <Tetris_MoveDown+0x88>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	79ba      	ldrb	r2, [r7, #6]
 80010dc:	4610      	mov	r0, r2
 80010de:	4798      	blx	r3
		}
		return Settled;
 80010e0:	2302      	movs	r3, #2
 80010e2:	e000      	b.n	80010e6 <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000330 	.word	0x20000330
 80010f4:	2000032c 	.word	0x2000032c
 80010f8:	20000328 	.word	0x20000328

080010fc <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <Tetris_MoveLeft+0x38>)
 8001102:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25a      	sxtb	r2, r3
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <Tetris_MoveLeft+0x38>)
 8001110:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8001112:	f7ff ff05 	bl	8000f20 <IsMoveValid>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d108      	bne.n	800112e <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <Tetris_MoveLeft+0x38>)
 800111e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	3301      	adds	r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	b25a      	sxtb	r2, r3
 800112a:	4b02      	ldr	r3, [pc, #8]	; (8001134 <Tetris_MoveLeft+0x38>)
 800112c:	715a      	strb	r2, [r3, #5]
	}
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000330 	.word	0x20000330

08001138 <Tetris_MoveRight>:

void Tetris_MoveRight(){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <Tetris_MoveRight+0x38>)
 800113e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3301      	adds	r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	b25a      	sxtb	r2, r3
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <Tetris_MoveRight+0x38>)
 800114c:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 800114e:	f7ff fee7 	bl	8000f20 <IsMoveValid>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d108      	bne.n	800116a <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <Tetris_MoveRight+0x38>)
 800115a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3b01      	subs	r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	b25a      	sxtb	r2, r3
 8001166:	4b02      	ldr	r3, [pc, #8]	; (8001170 <Tetris_MoveRight+0x38>)
 8001168:	715a      	strb	r2, [r3, #5]
	}
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000330 	.word	0x20000330

08001174 <DrawHighScoresToFrameBuffer>:
extern  ADC_HandleTypeDef hadc2;
extern LCD_PCD8544_screen_t gLcdScreen;

static u8 _startLevel;

void DrawHighScoresToFrameBuffer(){
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af02      	add	r7, sp, #8
	char highScoreLineBuffer[10];
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e024      	b.n	80011ca <DrawHighScoresToFrameBuffer+0x56>
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(i);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fc63 	bl	8001a50 <TetrisHighScores_GetHighScoreAtIndex>
 800118a:	6138      	str	r0, [r7, #16]
		sprintf(highScoreLineBuffer,"%c%c%c %lu",
				highScore->Initials[0],
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	781b      	ldrb	r3, [r3, #0]
		sprintf(highScoreLineBuffer,"%c%c%c %lu",
 8001190:	4619      	mov	r1, r3
				highScore->Initials[1],
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	785b      	ldrb	r3, [r3, #1]
		sprintf(highScoreLineBuffer,"%c%c%c %lu",
 8001196:	461c      	mov	r4, r3
				highScore->Initials[2],
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	789b      	ldrb	r3, [r3, #2]
		sprintf(highScoreLineBuffer,"%c%c%c %lu",
 800119c:	461a      	mov	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	1d38      	adds	r0, r7, #4
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	9200      	str	r2, [sp, #0]
 80011a8:	4623      	mov	r3, r4
 80011aa:	460a      	mov	r2, r1
 80011ac:	490b      	ldr	r1, [pc, #44]	; (80011dc <DrawHighScoresToFrameBuffer+0x68>)
 80011ae:	f005 fca3 	bl	8006af8 <siprintf>
				highScore->Score);
		gfxWriteTextLineToFrameBuffer(i+1,0,highScoreLineBuffer);
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	1d3a      	adds	r2, r7, #4
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff facc 	bl	800075c <gfxWriteTextLineToFrameBuffer>
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d9d7      	bls.n	8001180 <DrawHighScoresToFrameBuffer+0xc>

	}
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	08007f08 	.word	0x08007f08

080011e0 <TetrisEnterHighScore_Update>:

Tetris_Modes_StateTriggers TetrisEnterHighScore_Update(u32 TimePassed){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	/* Will have option to go back to main menu.  67 */
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80011e8:	2101      	movs	r1, #1
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <TetrisEnterHighScore_Update+0x30>)
 80011ec:	f002 fff0 	bl	80041d0 <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
	if(buttonBState == GPIO_PIN_SET){
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d104      	bne.n	8001204 <TetrisEnterHighScore_Update+0x24>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <TetrisEnterHighScore_Update+0x34>)
 80011fc:	f000 fc78 	bl	8001af0 <TetrisMain_SetStateMachineDataPointer>
		return HighScoreEntered;
 8001200:	2305      	movs	r3, #5
 8001202:	e000      	b.n	8001206 <TetrisEnterHighScore_Update+0x26>
	}

	return NoChange;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	20000341 	.word	0x20000341

08001218 <TetrisEnterHighScore_OnEnter>:

void TetrisEnterHighScore_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
	_startLevel = *((u8*)stateMachineDataPtr);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <TetrisEnterHighScore_OnEnter+0x80>)
 800122a:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 800122c:	f7ff f874 	bl	8000318 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 8001230:	f7ff fb3e 	bl	80008b0 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8001234:	2354      	movs	r3, #84	; 0x54
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff f8b2 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 8001240:	2354      	movs	r3, #84	; 0x54
 8001242:	2200      	movs	r2, #0
 8001244:	2101      	movs	r1, #1
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff f8ac 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 800124c:	2354      	movs	r3, #84	; 0x54
 800124e:	2200      	movs	r2, #0
 8001250:	2102      	movs	r1, #2
 8001252:	2002      	movs	r0, #2
 8001254:	f7ff f8a6 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(3,3,0,84);
 8001258:	2354      	movs	r3, #84	; 0x54
 800125a:	2200      	movs	r2, #0
 800125c:	2103      	movs	r1, #3
 800125e:	2003      	movs	r0, #3
 8001260:	f7ff f8a0 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(4,4,0,84);
 8001264:	2354      	movs	r3, #84	; 0x54
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	2004      	movs	r0, #4
 800126c:	f7ff f89a 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(5,5,0,84);
 8001270:	2354      	movs	r3, #84	; 0x54
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2005      	movs	r0, #5
 8001278:	f7ff f894 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	gfxWriteTextLineToFrameBuffer(0,0,"High Score");
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <TetrisEnterHighScore_OnEnter+0x84>)
 800127e:	2100      	movs	r1, #0
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fa6b 	bl	800075c <gfxWriteTextLineToFrameBuffer>
	DrawHighScoresToFrameBuffer();
 8001286:	f7ff ff75 	bl	8001174 <DrawHighScoresToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <TetrisEnterHighScore_OnEnter+0x88>)
 800128c:	f7ff f9b2 	bl	80005f4 <gfxFinishDrawing>

}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000341 	.word	0x20000341
 800129c:	08007f14 	.word	0x08007f14
 80012a0:	200005cc 	.word	0x200005cc

080012a4 <TetrisEnterHighScore_OnExit>:

void TetrisEnterHighScore_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <TetrisEnterHighScore_OnExit+0x1c>)
 80012b2:	f7ff fb2d 	bl	8000910 <ClearScreen>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200005cc 	.word	0x200005cc

080012c4 <GetRandomNumberBetweenZeroAndSix>:
static u8 _currentLevel = 5;

//u32 FlashAddress = 0x08040000;
static void InitCurrentLevelTetrisScores();

static u8 GetRandomNumberBetweenZeroAndSix(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 80012c8:	f005 fbd8 	bl	8006a7c <rand>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <GetRandomNumberBetweenZeroAndSix+0x28>)
 80012d2:	fba3 1302 	umull	r1, r3, r3, r2
 80012d6:	1ad1      	subs	r1, r2, r3
 80012d8:	0849      	lsrs	r1, r1, #1
 80012da:	440b      	add	r3, r1
 80012dc:	0899      	lsrs	r1, r3, #2
 80012de:	460b      	mov	r3, r1
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	1a5b      	subs	r3, r3, r1
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	b2db      	uxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	24924925 	.word	0x24924925

080012f0 <DrawStationaryBlock>:


static void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4604      	mov	r4, r0
 80012f8:	4608      	mov	r0, r1
 80012fa:	4611      	mov	r1, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	4623      	mov	r3, r4
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	4603      	mov	r3, r0
 8001304:	71bb      	strb	r3, [r7, #6]
 8001306:	460b      	mov	r3, r1
 8001308:	717b      	strb	r3, [r7, #5]
 800130a:	4613      	mov	r3, r2
 800130c:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 800130e:	793b      	ldrb	r3, [r7, #4]
 8001310:	797a      	ldrb	r2, [r7, #5]
 8001312:	79b9      	ldrb	r1, [r7, #6]
 8001314:	79f8      	ldrb	r0, [r7, #7]
 8001316:	f7ff fa9f 	bl	8000858 <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 800131a:	793b      	ldrb	r3, [r7, #4]
 800131c:	797a      	ldrb	r2, [r7, #5]
 800131e:	79b9      	ldrb	r1, [r7, #6]
 8001320:	79f8      	ldrb	r0, [r7, #7]
 8001322:	f7ff f922 	bl	800056a <gfxDrawLine>
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}
	...

08001330 <WriteLevelToFrameBuffer>:

static void WriteLevelToFrameBuffer(){
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
	u8 levelBuffer[11];
	sprintf(levelBuffer, "Lvl: %lu",_currentLevel);
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <WriteLevelToFrameBuffer+0x2c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <WriteLevelToFrameBuffer+0x30>)
 8001340:	4618      	mov	r0, r3
 8001342:	f005 fbd9 	bl	8006af8 <siprintf>
	gfxWriteTextLineToFrameBuffer(2,TETRIS_BOARD_RIGHT_EDGE_COL + 1,levelBuffer);
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	461a      	mov	r2, r3
 800134a:	2126      	movs	r1, #38	; 0x26
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff fa05 	bl	800075c <gfxWriteTextLineToFrameBuffer>

}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000027 	.word	0x20000027
 8001360:	08007f20 	.word	0x08007f20

08001364 <SetLevel>:

static void SetLevel(u8 level){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	_currentLevel = level;
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SetLevel+0x34>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	7013      	strb	r3, [r2, #0]
	_newLevelToDisplay = true;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <SetLevel+0x38>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
	_autoMoveInterval = _levelsMoveIntervals[_currentLevel];
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <SetLevel+0x34>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <SetLevel+0x3c>)
 8001382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001386:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <SetLevel+0x40>)
 8001388:	6013      	str	r3, [r2, #0]
	InitCurrentLevelTetrisScores();
 800138a:	f000 f965 	bl	8001658 <InitCurrentLevelTetrisScores>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000027 	.word	0x20000027
 800139c:	20000025 	.word	0x20000025
 80013a0:	080085b8 	.word	0x080085b8
 80013a4:	20000020 	.word	0x20000020

080013a8 <OnLinesCleared>:

static void OnLinesCleared(u8 numLinesCleared){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <OnLinesCleared+0xa4>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <OnLinesCleared+0xa4>)
 80013c0:	801a      	strh	r2, [r3, #0]
	if(_linesCleared >= TETRIS_LINES_PER_LEVEL_UP){
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <OnLinesCleared+0xa4>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	2b09      	cmp	r3, #9
 80013c8:	d909      	bls.n	80013de <OnLinesCleared+0x36>
		_linesCleared = 0;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <OnLinesCleared+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	801a      	strh	r2, [r3, #0]
		SetLevel(_currentLevel + 1);
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <OnLinesCleared+0xa8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ffc3 	bl	8001364 <SetLevel>
	}
	switch(numLinesCleared){
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d82a      	bhi.n	800143c <OnLinesCleared+0x94>
 80013e6:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <OnLinesCleared+0x44>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	0800140d 	.word	0x0800140d
 80013f4:	0800141d 	.word	0x0800141d
 80013f8:	0800142d 	.word	0x0800142d
	case 1:
		_score += _currentLevelTetrisScores[0];
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <OnLinesCleared+0xac>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <OnLinesCleared+0xb0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4413      	add	r3, r2
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <OnLinesCleared+0xb0>)
 8001408:	6013      	str	r3, [r2, #0]
		break;
 800140a:	e017      	b.n	800143c <OnLinesCleared+0x94>
	case 2:
		_score += _currentLevelTetrisScores[1];
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <OnLinesCleared+0xac>)
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <OnLinesCleared+0xb0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4413      	add	r3, r2
 8001416:	4a10      	ldr	r2, [pc, #64]	; (8001458 <OnLinesCleared+0xb0>)
 8001418:	6013      	str	r3, [r2, #0]
		break;
 800141a:	e00f      	b.n	800143c <OnLinesCleared+0x94>
	case 3:
		_score += _currentLevelTetrisScores[2];
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <OnLinesCleared+0xac>)
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <OnLinesCleared+0xb0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4413      	add	r3, r2
 8001426:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <OnLinesCleared+0xb0>)
 8001428:	6013      	str	r3, [r2, #0]
		break;
 800142a:	e007      	b.n	800143c <OnLinesCleared+0x94>
	case 4:
		_score += _currentLevelTetrisScores[3];
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <OnLinesCleared+0xac>)
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <OnLinesCleared+0xb0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <OnLinesCleared+0xb0>)
 8001438:	6013      	str	r3, [r2, #0]
		break;
 800143a:	bf00      	nop
	}
	_newScoreToDisplay = true;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <OnLinesCleared+0xb4>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000034a 	.word	0x2000034a
 8001450:	20000027 	.word	0x20000027
 8001454:	20000354 	.word	0x20000354
 8001458:	2000034c 	.word	0x2000034c
 800145c:	20000024 	.word	0x20000024

08001460 <OnGameOver>:

static void OnGameOver(){
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	//_linesCleared = 0;
	//_score = 0;
	//_newScoreToDisplay = true;
	//SetLevel(TETRIS_START_LEVEL);
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <IncrementTetrisTimer>:

static void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <IncrementTetrisTimer+0x44>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <IncrementTetrisTimer+0x44>)
 8001486:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <IncrementTetrisTimer+0x44>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <IncrementTetrisTimer+0x48>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d90b      	bls.n	80014ac <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d105      	bne.n	80014a6 <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 800149a:	f7ff fde9 	bl	8001070 <Tetris_MoveDown>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <IncrementTetrisTimer+0x4c>)
 80014a4:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <IncrementTetrisTimer+0x44>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
	}
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000344 	.word	0x20000344
 80014b8:	20000020 	.word	0x20000020
 80014bc:	20000026 	.word	0x20000026

080014c0 <WriteScoreToFrameBuffer>:

static void WriteScoreToFrameBuffer(){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%lu",_score);
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <WriteScoreToFrameBuffer+0x28>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	463b      	mov	r3, r7
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <WriteScoreToFrameBuffer+0x2c>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fb12 	bl	8006af8 <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 80014d4:	463b      	mov	r3, r7
 80014d6:	461a      	mov	r2, r3
 80014d8:	2126      	movs	r1, #38	; 0x26
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff f93e 	bl	800075c <gfxWriteTextLineToFrameBuffer>

}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000034c 	.word	0x2000034c
 80014ec:	08007f2c 	.word	0x08007f2c

080014f0 <UpdateTetrisGame>:


static void UpdateTetrisGame(u32 timePassed){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 80014f8:	f107 0208 	add.w	r2, r7, #8
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	4827      	ldr	r0, [pc, #156]	; (80015a0 <UpdateTetrisGame+0xb0>)
 8001504:	f7fe febc 	bl	8000280 <ReadAnalogStickChange>

	bool movingDown = true;
 8001508:	2301      	movs	r3, #1
 800150a:	75fb      	strb	r3, [r7, #23]

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 800150c:	2101      	movs	r1, #1
 800150e:	4825      	ldr	r0, [pc, #148]	; (80015a4 <UpdateTetrisGame+0xb4>)
 8001510:	f002 fe5e 	bl	80041d0 <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	75bb      	strb	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	613b      	str	r3, [r7, #16]
	if(analogXChange > (twelveBitMax/5)){
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <UpdateTetrisGame+0xb8>)
 8001522:	fb82 1203 	smull	r1, r2, r2, r3
 8001526:	1052      	asrs	r2, r2, #1
 8001528:	17db      	asrs	r3, r3, #31
 800152a:	1ad2      	subs	r2, r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	429a      	cmp	r2, r3
 8001530:	da02      	bge.n	8001538 <UpdateTetrisGame+0x48>
		Tetris_MoveRight();
 8001532:	f7ff fe01 	bl	8001138 <Tetris_MoveRight>
 8001536:	e01e      	b.n	8001576 <UpdateTetrisGame+0x86>
	}
	else if(analogXChange < -(twelveBitMax/5)){
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <UpdateTetrisGame+0xb8>)
 800153c:	fb82 1203 	smull	r1, r2, r2, r3
 8001540:	1052      	asrs	r2, r2, #1
 8001542:	17db      	asrs	r3, r3, #31
 8001544:	1a9a      	subs	r2, r3, r2
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	dd02      	ble.n	8001552 <UpdateTetrisGame+0x62>
		Tetris_MoveLeft();
 800154c:	f7ff fdd6 	bl	80010fc <Tetris_MoveLeft>
 8001550:	e011      	b.n	8001576 <UpdateTetrisGame+0x86>
	}
	else if(analogYChange > (twelveBitMax/5)){
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <UpdateTetrisGame+0xb8>)
 8001556:	fb82 1203 	smull	r1, r2, r2, r3
 800155a:	1052      	asrs	r2, r2, #1
 800155c:	17db      	asrs	r3, r3, #31
 800155e:	1ad2      	subs	r2, r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	429a      	cmp	r2, r3
 8001564:	da07      	bge.n	8001576 <UpdateTetrisGame+0x86>
		_movingDownResult = Tetris_MoveDown();
 8001566:	f7ff fd83 	bl	8001070 <Tetris_MoveDown>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <UpdateTetrisGame+0xbc>)
 8001570:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 8001576:	7dbb      	ldrb	r3, [r7, #22]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <UpdateTetrisGame+0x98>
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <UpdateTetrisGame+0xc0>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <UpdateTetrisGame+0x98>
		Tetris_Rotate();
 8001584:	f7ff fd4e 	bl	8001024 <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 8001588:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <UpdateTetrisGame+0xc0>)
 800158a:	7dbb      	ldrb	r3, [r7, #22]
 800158c:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff6c 	bl	8001470 <IncrementTetrisTimer>

}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200007e8 	.word	0x200007e8
 80015a4:	48000400 	.word	0x48000400
 80015a8:	66666667 	.word	0x66666667
 80015ac:	20000026 	.word	0x20000026
 80015b0:	20000348 	.word	0x20000348

080015b4 <DrawTetrisGame>:

static void DrawTetrisGame(){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	gfxClearFrameBuffer();
 80015b8:	f7fe feae 	bl	8000318 <gfxClearFrameBuffer>

	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <DrawTetrisGame+0x94>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d003      	beq.n	80015cc <DrawTetrisGame+0x18>
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <DrawTetrisGame+0x94>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d101      	bne.n	80015d0 <DrawTetrisGame+0x1c>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <DrawTetrisGame+0x1e>
 80015d0:	2300      	movs	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fb25 	bl	8000c24 <Tetris_DrawTetrisBoard>

	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 80015da:	2325      	movs	r3, #37	; 0x25
 80015dc:	2204      	movs	r2, #4
 80015de:	2105      	movs	r1, #5
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7fe fedf 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <DrawTetrisGame+0x94>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d003      	beq.n	80015f6 <DrawTetrisGame+0x42>
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <DrawTetrisGame+0x94>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d105      	bne.n	8001602 <DrawTetrisGame+0x4e>
		/* update the area where the next block is shown */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 80015f6:	2335      	movs	r3, #53	; 0x35
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7fe fed1 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay == true){
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <DrawTetrisGame+0x98>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10a      	bne.n	8001620 <DrawTetrisGame+0x6c>
		/* Update the new area of the screen with the new score.
		 * TODO: get actual length of score string instead of using 84 */
		WriteScoreToFrameBuffer();
 800160a:	f7ff ff59 	bl	80014c0 <WriteScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 800160e:	2354      	movs	r3, #84	; 0x54
 8001610:	2200      	movs	r2, #0
 8001612:	2101      	movs	r1, #1
 8001614:	2001      	movs	r0, #1
 8001616:	f7fe fec5 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <DrawTetrisGame+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
	}
	if(_newLevelToDisplay){
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <DrawTetrisGame+0x9c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00a      	beq.n	800163e <DrawTetrisGame+0x8a>
		WriteLevelToFrameBuffer();
 8001628:	f7ff fe82 	bl	8001330 <WriteLevelToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 800162c:	2354      	movs	r3, #84	; 0x54
 800162e:	2200      	movs	r2, #0
 8001630:	2102      	movs	r1, #2
 8001632:	2002      	movs	r0, #2
 8001634:	f7fe feb6 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newLevelToDisplay = false;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <DrawTetrisGame+0x9c>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <DrawTetrisGame+0xa0>)
 8001640:	f7fe ffd8 	bl	80005f4 <gfxFinishDrawing>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000026 	.word	0x20000026
 800164c:	20000024 	.word	0x20000024
 8001650:	20000025 	.word	0x20000025
 8001654:	200005cc 	.word	0x200005cc

08001658 <InitCurrentLevelTetrisScores>:

static void InitCurrentLevelTetrisScores(){
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	/* score setting function derived from information from https://tetris.fandom.com/wiki/Scoring */

	if(_currentLevel == 0){
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <InitCurrentLevelTetrisScores+0x104>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10e      	bne.n	8001682 <InitCurrentLevelTetrisScores+0x2a>
		_currentLevelTetrisScores[0] = 40;
 8001664:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 8001666:	2228      	movs	r2, #40	; 0x28
 8001668:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100;
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 800166c:	2264      	movs	r2, #100	; 0x64
 800166e:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300;
 8001670:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 8001672:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001676:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200;
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 800167a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800167e:	60da      	str	r2, [r3, #12]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);

	}
}
 8001680:	e066      	b.n	8001750 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 1){
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <InitCurrentLevelTetrisScores+0x104>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d10e      	bne.n	80016a8 <InitCurrentLevelTetrisScores+0x50>
		_currentLevelTetrisScores[0] = 80;
 800168a:	4b35      	ldr	r3, [pc, #212]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 800168c:	2250      	movs	r2, #80	; 0x50
 800168e:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 200;
 8001690:	4b33      	ldr	r3, [pc, #204]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 8001692:	22c8      	movs	r2, #200	; 0xc8
 8001694:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 600;
 8001696:	4b32      	ldr	r3, [pc, #200]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 8001698:	f44f 7216 	mov.w	r2, #600	; 0x258
 800169c:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 2400;
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 80016a0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80016a4:	60da      	str	r2, [r3, #12]
}
 80016a6:	e053      	b.n	8001750 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel >=2 && _currentLevel < 9){
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <InitCurrentLevelTetrisScores+0x104>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d913      	bls.n	80016d8 <InitCurrentLevelTetrisScores+0x80>
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <InitCurrentLevelTetrisScores+0x104>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d80f      	bhi.n	80016d8 <InitCurrentLevelTetrisScores+0x80>
		_currentLevelTetrisScores[0] = 120;
 80016b8:	4b29      	ldr	r3, [pc, #164]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 80016ba:	2278      	movs	r2, #120	; 0x78
 80016bc:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 300;
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 80016c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016c4:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 900;
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 80016c8:	f44f 7261 	mov.w	r2, #900	; 0x384
 80016cc:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 3600;
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 80016d0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80016d4:	60da      	str	r2, [r3, #12]
}
 80016d6:	e03b      	b.n	8001750 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 9){
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <InitCurrentLevelTetrisScores+0x104>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d110      	bne.n	8001702 <InitCurrentLevelTetrisScores+0xaa>
		_currentLevelTetrisScores[0] = 400;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 80016e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016e6:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 1000;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 80016ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ee:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 3000;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 80016f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016f6:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 12000;
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 80016fa:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80016fe:	60da      	str	r2, [r3, #12]
}
 8001700:	e026      	b.n	8001750 <InitCurrentLevelTetrisScores+0xf8>
		_currentLevelTetrisScores[0] = 40 * (_currentLevel + 1);
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <InitCurrentLevelTetrisScores+0x104>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	461a      	mov	r2, r3
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 8001714:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <InitCurrentLevelTetrisScores+0x104>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	2264      	movs	r2, #100	; 0x64
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	461a      	mov	r2, r3
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 8001726:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <InitCurrentLevelTetrisScores+0x104>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	461a      	mov	r2, r3
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 800173a:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <InitCurrentLevelTetrisScores+0x104>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	461a      	mov	r2, r3
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <InitCurrentLevelTetrisScores+0x108>)
 800174e:	60da      	str	r2, [r3, #12]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000027 	.word	0x20000027
 8001760:	20000354 	.word	0x20000354

08001764 <CheckForHighScore>:


Tetris_Modes_StateTriggers CheckForHighScore(){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	if(TetrisHighScores_IsNewHighScore(_score) == true){
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <CheckForHighScore+0x20>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f94f 	bl	8001a10 <TetrisHighScores_IsNewHighScore>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <CheckForHighScore+0x18>
		return GameOverNewHighScore;
 8001778:	2303      	movs	r3, #3
 800177a:	e000      	b.n	800177e <CheckForHighScore+0x1a>
	}
	else{
		return GameOver;
 800177c:	2302      	movs	r3, #2
	}
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000034c 	.word	0x2000034c

08001788 <TetrisGame_Update>:


Tetris_Modes_StateTriggers TetrisGame_Update(u32 timePassed){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime(timePassed);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff f927 	bl	80009e4 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime>
	UpdateTetrisGame(timePassed);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff feaa 	bl	80014f0 <UpdateTetrisGame>
	DrawTetrisGame();
 800179c:	f7ff ff0a 	bl	80015b4 <DrawTetrisGame>
	if(_movingDownResult == MoveDownResultGameOver){
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <TetrisGame_Update+0x34>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d103      	bne.n	80017b0 <TetrisGame_Update+0x28>
		return CheckForHighScore();
 80017a8:	f7ff ffdc 	bl	8001764 <CheckForHighScore>
 80017ac:	4603      	mov	r3, r0
 80017ae:	e000      	b.n	80017b2 <TetrisGame_Update+0x2a>
	}
	return NoChange;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000026 	.word	0x20000026

080017c0 <TetrisGame_Init>:



void TetrisGame_Init(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af02      	add	r7, sp, #8
	Tetris_Init(
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <TetrisGame_Init+0x2c>)
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <TetrisGame_Init+0x30>)
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <TetrisGame_Init+0x34>)
 80017d0:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <TetrisGame_Init+0x38>)
 80017d2:	490a      	ldr	r1, [pc, #40]	; (80017fc <TetrisGame_Init+0x3c>)
 80017d4:	4808      	ldr	r0, [pc, #32]	; (80017f8 <TetrisGame_Init+0x38>)
 80017d6:	f7ff fafb 	bl	8000dd0 <Tetris_Init>
			&gfxDrawAxisAlignedRect,
			&GetRandomNumberBetweenZeroAndSix,
			&OnLinesCleared,
			&OnGameOver);
	//TetrisHighScores_Init();
	srand(TetrisAccumulatedPlaytime_GetAccumulatedPlaytime());
 80017da:	f7ff f8f7 	bl	80009cc <TetrisAccumulatedPlaytime_GetAccumulatedPlaytime>
 80017de:	4603      	mov	r3, r0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f005 f91d 	bl	8006a20 <srand>

}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	08001461 	.word	0x08001461
 80017f0:	080013a9 	.word	0x080013a9
 80017f4:	080012c5 	.word	0x080012c5
 80017f8:	08000859 	.word	0x08000859
 80017fc:	080012f1 	.word	0x080012f1

08001800 <TetrisGame_OnEnter>:

void TetrisGame_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
	if(previousState == LevelSelect || previousState == NoState){
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <TetrisGame_OnEnter+0x18>
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d103      	bne.n	8001820 <TetrisGame_OnEnter+0x20>
		_startLevel = *((u8*)stateMachineDataPtr);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <TetrisGame_OnEnter+0x54>)
 800181e:	701a      	strb	r2, [r3, #0]
	}
	SetLevel(_startLevel);
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <TetrisGame_OnEnter+0x54>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fd9d 	bl	8001364 <SetLevel>
	Tetris_ResetTetrisBoard();
 800182a:	f7ff fac1 	bl	8000db0 <Tetris_ResetTetrisBoard>
	InitCurrentLevelTetrisScores();
 800182e:	f7ff ff13 	bl	8001658 <InitCurrentLevelTetrisScores>
	_movingDownResult = Settled;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <TetrisGame_OnEnter+0x58>)
 8001834:	2202      	movs	r2, #2
 8001836:	701a      	strb	r2, [r3, #0]
	_score = 0;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <TetrisGame_OnEnter+0x5c>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
	_newScoreToDisplay = true;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <TetrisGame_OnEnter+0x60>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
	_newLevelToDisplay = true;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <TetrisGame_OnEnter+0x64>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000350 	.word	0x20000350
 8001858:	20000026 	.word	0x20000026
 800185c:	2000034c 	.word	0x2000034c
 8001860:	20000024 	.word	0x20000024
 8001864:	20000025 	.word	0x20000025

08001868 <TetrisGame_OnExit>:



void TetrisGame_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <TetrisGame_OnExit+0x20>)
 8001876:	f7ff f84b 	bl	8000910 <ClearScreen>
	TetrisPersistantData_SaveAllPersistantData();
 800187a:	f000 fa49 	bl	8001d10 <TetrisPersistantData_SaveAllPersistantData>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200005cc 	.word	0x200005cc

0800188c <SetHighScoreCellSize>:
		{{'J','i','m'}, 25000},
		{{'J','i','m'}, 5000},
};
static u32 _highScoreCellSize = 0;

static void SetHighScoreCellSize(){
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
	u32 size = sizeof(HighScore);
 8001892:	2308      	movs	r3, #8
 8001894:	607b      	str	r3, [r7, #4]
	_highScoreCellSize = size;
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <SetHighScoreCellSize+0x38>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6013      	str	r3, [r2, #0]

	while(_highScoreCellSize % 4 != 0)
 800189c:	e004      	b.n	80018a8 <SetHighScoreCellSize+0x1c>
		_highScoreCellSize++;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <SetHighScoreCellSize+0x38>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <SetHighScoreCellSize+0x38>)
 80018a6:	6013      	str	r3, [r2, #0]
	while(_highScoreCellSize % 4 != 0)
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SetHighScoreCellSize+0x38>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f4      	bne.n	800189e <SetHighScoreCellSize+0x12>

}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000364 	.word	0x20000364

080018c8 <LoadHighScores>:
static void LoadHighScores(HighScore* output, u32 startAddress){
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e026      	b.n	8001926 <LoadHighScores+0x5e>
		HighScore* hs = startAddress + (i * _highScoreCellSize);
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <LoadHighScores+0x74>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	fb03 f202 	mul.w	r2, r3, r2
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
		output[i].Initials[0] = hs->Initials[0];
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	7812      	ldrb	r2, [r2, #0]
 80018f4:	701a      	strb	r2, [r3, #0]
		output[i].Initials[1] = hs->Initials[1];
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	7852      	ldrb	r2, [r2, #1]
 8001902:	705a      	strb	r2, [r3, #1]
		output[i].Initials[2] = hs->Initials[2];
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	7892      	ldrb	r2, [r2, #2]
 8001910:	709a      	strb	r2, [r3, #2]
		output[i].Score = hs->Score;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	6852      	ldr	r2, [r2, #4]
 800191e:	605a      	str	r2, [r3, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	3301      	adds	r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d9d5      	bls.n	80018d8 <LoadHighScores+0x10>
	}

}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000364 	.word	0x20000364

08001940 <SaveSingleHighScore>:

static void SaveSingleHighScore(HighScore* input, u32 address){
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	for(int i=0; i<_highScoreCellSize/4; i++){
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e016      	b.n	800197e <SaveSingleHighScore+0x3e>
		u32 wordToWrite = *((u32*)input + i);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address + (i*4), wordToWrite);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	461a      	mov	r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	18d1      	adds	r1, r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2200      	movs	r2, #0
 800196a:	461c      	mov	r4, r3
 800196c:	4615      	mov	r5, r2
 800196e:	4622      	mov	r2, r4
 8001970:	462b      	mov	r3, r5
 8001972:	2002      	movs	r0, #2
 8001974:	f002 f8e2 	bl	8003b3c <HAL_FLASH_Program>
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SaveSingleHighScore+0x54>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	089a      	lsrs	r2, r3, #2
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	429a      	cmp	r2, r3
 8001988:	d8e2      	bhi.n	8001950 <SaveSingleHighScore+0x10>
	}
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bdb0      	pop	{r4, r5, r7, pc}
 8001994:	20000364 	.word	0x20000364

08001998 <SaveHighScores>:

static void SaveHighScores(HighScore* input, u32 addressToWrite){
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e00f      	b.n	80019c8 <SaveHighScores+0x30>
		SaveSingleHighScore(&input[i], addressToWrite);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ffc4 	bl	8001940 <SaveSingleHighScore>
		addressToWrite += _highScoreCellSize;
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <SaveHighScores+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	603b      	str	r3, [r7, #0]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d9ec      	bls.n	80019a8 <SaveHighScores+0x10>
	}

}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000364 	.word	0x20000364

080019dc <TetrisHighScores_Load>:

u32 TetrisHighScores_Load(u32 startAddress){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
				{{'J','i','m'}, 25000},
				{{'J','i','m'}, 5000},
		};
	SaveHighScores(hs);
	*/
	SetHighScoreCellSize();
 80019e4:	f7ff ff52 	bl	800188c <SetHighScoreCellSize>
	LoadHighScores(_highScores, startAddress);
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <TetrisHighScores_Load+0x2c>)
 80019ec:	f7ff ff6c 	bl	80018c8 <LoadHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <TetrisHighScores_Load+0x30>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	441a      	add	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000028 	.word	0x20000028
 8001a0c:	20000364 	.word	0x20000364

08001a10 <TetrisHighScores_IsNewHighScore>:


bool TetrisHighScores_IsNewHighScore(u32 potentialHighScore){
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e00c      	b.n	8001a38 <TetrisHighScores_IsNewHighScore+0x28>
		if(potentialHighScore > _highScores[i].Score){
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <TetrisHighScores_IsNewHighScore+0x3c>)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d901      	bls.n	8001a32 <TetrisHighScores_IsNewHighScore+0x22>
			return true;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e006      	b.n	8001a40 <TetrisHighScores_IsNewHighScore+0x30>
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3301      	adds	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d9ef      	bls.n	8001a1e <TetrisHighScores_IsNewHighScore+0xe>
		}
	}
	return false;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	20000028 	.word	0x20000028

08001a50 <TetrisHighScores_GetHighScoreAtIndex>:

HighScore* TetrisHighScores_GetHighScoreAtIndex(u8 atIndex){
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
	return &_highScores[atIndex];
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <TetrisHighScores_GetHighScoreAtIndex+0x20>)
 8001a60:	4413      	add	r3, r2
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000028 	.word	0x20000028

08001a74 <TetrisHighScores_Save>:


u32 TetrisHighScores_Save(u32 startAddress){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	SetHighScoreCellSize();
 8001a7c:	f7ff ff06 	bl	800188c <SetHighScoreCellSize>

	SaveHighScores(_highScores, startAddress);
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <TetrisHighScores_Save+0x2c>)
 8001a84:	f7ff ff88 	bl	8001998 <SaveHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <TetrisHighScores_Save+0x30>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	441a      	add	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000028 	.word	0x20000028
 8001aa4:	20000364 	.word	0x20000364

08001aa8 <TetrisLevelSelect_Update>:


#include "TetrisLevelSelectScreen.h"
#include "LcdGraphics.h"

Tetris_Modes_StateTriggers TetrisLevelSelect_Update(u32 TimePassed){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

}
 8001ab0:	bf00      	nop
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <TetrisLevelSelect_OnEnter>:

void TetrisLevelSelect_Init(){

}

void TetrisLevelSelect_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	70fb      	strb	r3, [r7, #3]

}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <TetrisLevelSelect_OnExit>:

void TetrisLevelSelect_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70fb      	strb	r3, [r7, #3]

}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <TetrisMain_SetStateMachineDataPointer>:
#define ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS 1


static void* _stateMachineDataPointer = 0;

void TetrisMain_SetStateMachineDataPointer(void* dataPtr){
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	_stateMachineDataPointer = dataPtr;
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <TetrisMain_SetStateMachineDataPointer+0x1c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000368 	.word	0x20000368

08001b10 <TetrisMain_Init>:

static State _states[NumStates];
static Tetris_Modes_States _currentState = Playing;


void TetrisMain_Init(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	TetrisPersistantData_LoadAllPeristantData();
 8001b16:	f000 f8e9 	bl	8001cec <TetrisPersistantData_LoadAllPeristantData>
	TetrisGame_Init();
 8001b1a:	f7ff fe51 	bl	80017c0 <TetrisGame_Init>
	u8 startLevel = 8;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	71fb      	strb	r3, [r7, #7]
	TetrisGame_OnEnter(&startLevel,NoState);
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	2104      	movs	r1, #4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe6a 	bl	8001800 <TetrisGame_OnEnter>
	_states[Playing].NumTransitions = PLAYING_NUM_TRANSITIONS;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2020 	strb.w	r2, [r3, #32]
	_states[Playing].Transitions = _playingTransitions;
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b36:	4a20      	ldr	r2, [pc, #128]	; (8001bb8 <TetrisMain_Init+0xa8>)
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
	_states[Playing].UpdateFunction = &TetrisGame_Update;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <TetrisMain_Init+0xac>)
 8001b3e:	615a      	str	r2, [r3, #20]
	_states[Playing].OnEnterFunction = &TetrisGame_OnEnter;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <TetrisMain_Init+0xb0>)
 8001b44:	619a      	str	r2, [r3, #24]
	_states[Playing].OnExitFunction = &TetrisGame_OnExit;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b48:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <TetrisMain_Init+0xb4>)
 8001b4a:	61da      	str	r2, [r3, #28]

	_states[LevelSelect].NumTransitions = LEVEL_SELECT_NUM_TRANSITIONS;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	731a      	strb	r2, [r3, #12]
	_states[LevelSelect].Transitions = _levelSelectTransitions;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <TetrisMain_Init+0xb8>)
 8001b56:	611a      	str	r2, [r3, #16]
	_states[LevelSelect].UpdateFunction = &TetrisLevelSelect_Update;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <TetrisMain_Init+0xbc>)
 8001b5c:	601a      	str	r2, [r3, #0]
	_states[LevelSelect].OnEnterFunction = &TetrisLevelSelect_OnEnter;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <TetrisMain_Init+0xc0>)
 8001b62:	605a      	str	r2, [r3, #4]
	_states[LevelSelect].OnExitFunction = &TetrisLevelSelect_OnExit;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b66:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <TetrisMain_Init+0xc4>)
 8001b68:	609a      	str	r2, [r3, #8]

	_states[PlayAgainDialogue].NumTransitions = PLAY_AGAIN_SCREEN_NUM_TRANSITIONS;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	_states[PlayAgainDialogue].Transitions = _playAgainScreenTransitions;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <TetrisMain_Init+0xc8>)
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
	_states[PlayAgainDialogue].UpdateFunction = &TetrisPlayAgain_Update;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <TetrisMain_Init+0xcc>)
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
	_states[PlayAgainDialogue].OnEnterFunction = &TetrisPlayAgain_OnEnter;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <TetrisMain_Init+0xd0>)
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
	_states[PlayAgainDialogue].OnExitFunction = &TetrisPlayAgain_OnExit;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <TetrisMain_Init+0xd4>)
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30

	_states[EnterNewHighScoreScreen].NumTransitions = ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	_states[EnterNewHighScoreScreen].Transitions = _enterNewHighScoreScreenTransitions;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <TetrisMain_Init+0xd8>)
 8001b96:	64da      	str	r2, [r3, #76]	; 0x4c
	_states[EnterNewHighScoreScreen].UpdateFunction = &TetrisEnterHighScore_Update;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <TetrisMain_Init+0xdc>)
 8001b9c:	63da      	str	r2, [r3, #60]	; 0x3c
	_states[EnterNewHighScoreScreen].OnEnterFunction = &TetrisEnterHighScore_OnEnter;
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <TetrisMain_Init+0xe0>)
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
	_states[EnterNewHighScoreScreen].OnExitFunction = &TetrisEnterHighScore_OnExit;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <TetrisMain_Init+0xa4>)
 8001ba6:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <TetrisMain_Init+0xe4>)
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44


}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000036c 	.word	0x2000036c
 8001bb8:	08008610 	.word	0x08008610
 8001bbc:	08001789 	.word	0x08001789
 8001bc0:	08001801 	.word	0x08001801
 8001bc4:	08001869 	.word	0x08001869
 8001bc8:	0800860c 	.word	0x0800860c
 8001bcc:	08001aa9 	.word	0x08001aa9
 8001bd0:	08001abf 	.word	0x08001abf
 8001bd4:	08001ad7 	.word	0x08001ad7
 8001bd8:	08008614 	.word	0x08008614
 8001bdc:	08001d55 	.word	0x08001d55
 8001be0:	08001d8d 	.word	0x08001d8d
 8001be4:	08001dd9 	.word	0x08001dd9
 8001be8:	08008618 	.word	0x08008618
 8001bec:	080011e1 	.word	0x080011e1
 8001bf0:	08001219 	.word	0x08001219
 8001bf4:	080012a5 	.word	0x080012a5

08001bf8 <TetrisMain_Update>:

void TetrisMain_Update(u32 timePassed){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	Tetris_Modes_StateTriggers updateResult = _states[_currentState].UpdateFunction(timePassed);
 8001c00:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <TetrisMain_Update+0xe8>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4a37      	ldr	r2, [pc, #220]	; (8001ce4 <TetrisMain_Update+0xec>)
 8001c08:	460b      	mov	r3, r1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
 8001c18:	4603      	mov	r3, r0
 8001c1a:	76fb      	strb	r3, [r7, #27]
	if(updateResult == NoChange){
 8001c1c:	7efb      	ldrb	r3, [r7, #27]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d059      	beq.n	8001cd6 <TetrisMain_Update+0xde>
		return;
	}
	u32 numTransitions = _states[_currentState].NumTransitions;
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <TetrisMain_Update+0xe8>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	4619      	mov	r1, r3
 8001c28:	4a2e      	ldr	r2, [pc, #184]	; (8001ce4 <TetrisMain_Update+0xec>)
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	330c      	adds	r3, #12
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	617b      	str	r3, [r7, #20]
	Transition* transitions = _states[_currentState].Transitions;
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <TetrisMain_Update+0xe8>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4a28      	ldr	r2, [pc, #160]	; (8001ce4 <TetrisMain_Update+0xec>)
 8001c42:	460b      	mov	r3, r1
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3310      	adds	r3, #16
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	613b      	str	r3, [r7, #16]
	for(i32 i=0; i<numTransitions; i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e039      	b.n	8001ccc <TetrisMain_Update+0xd4>
		if(transitions[i].trigger == updateResult){
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	7efa      	ldrb	r2, [r7, #27]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d12e      	bne.n	8001cc6 <TetrisMain_Update+0xce>
			Tetris_Modes_States last = _currentState;
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <TetrisMain_Update+0xe8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	73fb      	strb	r3, [r7, #15]
			_states[_currentState].OnExitFunction(_stateMachineDataPointer, transitions[i].destination);
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <TetrisMain_Update+0xe8>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	4a1b      	ldr	r2, [pc, #108]	; (8001ce4 <TetrisMain_Update+0xec>)
 8001c76:	460b      	mov	r3, r1
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	3308      	adds	r3, #8
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <TetrisMain_Update+0xf0>)
 8001c86:	6810      	ldr	r0, [r2, #0]
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	0052      	lsls	r2, r2, #1
 8001c8c:	6939      	ldr	r1, [r7, #16]
 8001c8e:	440a      	add	r2, r1
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4798      	blx	r3
			_currentState = transitions[i].destination;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <TetrisMain_Update+0xe8>)
 8001ca2:	701a      	strb	r2, [r3, #0]
			_states[_currentState].OnEnterFunction(_stateMachineDataPointer, last);
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <TetrisMain_Update+0xe8>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <TetrisMain_Update+0xec>)
 8001cac:	460b      	mov	r3, r1
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <TetrisMain_Update+0xf0>)
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	7bf9      	ldrb	r1, [r7, #15]
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4798      	blx	r3
			return;
 8001cc4:	e008      	b.n	8001cd8 <TetrisMain_Update+0xe0>
	for(i32 i=0; i<numTransitions; i++){
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8c1      	bhi.n	8001c58 <TetrisMain_Update+0x60>
 8001cd4:	e000      	b.n	8001cd8 <TetrisMain_Update+0xe0>
		return;
 8001cd6:	bf00      	nop
		}
	}
}
 8001cd8:	3720      	adds	r7, #32
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000050 	.word	0x20000050
 8001ce4:	2000036c 	.word	0x2000036c
 8001ce8:	20000368 	.word	0x20000368

08001cec <TetrisPersistantData_LoadAllPeristantData>:
#include "TetrisHighScores.h"
#include "TetrisAccumulatedPlaytime.h"
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

void TetrisPersistantData_LoadAllPeristantData(){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
	u32 nextAddress = TetrisHighScores_Load(FINAL_PAGE_START_ADDRESS);
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <TetrisPersistantData_LoadAllPeristantData+0x20>)
 8001cf4:	f7ff fe72 	bl	80019dc <TetrisHighScores_Load>
 8001cf8:	6078      	str	r0, [r7, #4]
	nextAddress = TetrisAccumulatedPlaytime_Load(nextAddress);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fe3a 	bl	8000974 <TetrisAccumulatedPlaytime_Load>
 8001d00:	6078      	str	r0, [r7, #4]

}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	0800f800 	.word	0x0800f800

08001d10 <TetrisPersistantData_SaveAllPersistantData>:
void TetrisPersistantData_SaveAllPersistantData(){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001d16:	f001 ff81 	bl	8003c1c <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	613b      	str	r3, [r7, #16]
	eraseInit.PageAddress = FINAL_PAGE_START_ADDRESS;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <TetrisPersistantData_SaveAllPersistantData+0x40>)
 8001d20:	60fb      	str	r3, [r7, #12]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
 8001d26:	1d3a      	adds	r2, r7, #4
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 f838 	bl	8003da4 <HAL_FLASHEx_Erase>

	u32 nextAddress = TetrisHighScores_Save(FINAL_PAGE_START_ADDRESS);
 8001d34:	4806      	ldr	r0, [pc, #24]	; (8001d50 <TetrisPersistantData_SaveAllPersistantData+0x40>)
 8001d36:	f7ff fe9d 	bl	8001a74 <TetrisHighScores_Save>
 8001d3a:	6178      	str	r0, [r7, #20]
	nextAddress = TetrisAccumulatedPlaytime_Save(nextAddress);
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f7fe fe2d 	bl	800099c <TetrisAccumulatedPlaytime_Save>
 8001d42:	6178      	str	r0, [r7, #20]

	HAL_FLASH_Lock();
 8001d44:	f001 ff90 	bl	8003c68 <HAL_FLASH_Lock>

}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	0800f800 	.word	0x0800f800

08001d54 <TetrisPlayAgain_Update>:
extern  ADC_HandleTypeDef hadc2;
extern LCD_PCD8544_screen_t gLcdScreen;

static u8 _startLevel;

Tetris_Modes_StateTriggers TetrisPlayAgain_Update(u32 TimePassed){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

	/* Will have option to go back to main menu.  67 */
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4809      	ldr	r0, [pc, #36]	; (8001d84 <TetrisPlayAgain_Update+0x30>)
 8001d60:	f002 fa36 	bl	80041d0 <HAL_GPIO_ReadPin>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]
	if(buttonBState == GPIO_PIN_SET){
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d104      	bne.n	8001d78 <TetrisPlayAgain_Update+0x24>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <TetrisPlayAgain_Update+0x34>)
 8001d70:	f7ff febe 	bl	8001af0 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <TetrisPlayAgain_Update+0x26>
	}

	return NoChange;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	48000400 	.word	0x48000400
 8001d88:	200003d0 	.word	0x200003d0

08001d8c <TetrisPlayAgain_OnEnter>:

void TetrisPlayAgain_Init(){

}

void TetrisPlayAgain_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
	_startLevel = *((u8*)stateMachineDataPtr);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <TetrisPlayAgain_OnEnter+0x40>)
 8001d9e:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 8001da0:	f7fe faba 	bl	8000318 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 8001da4:	f7fe fd84 	bl	80008b0 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8001da8:	2354      	movs	r3, #84	; 0x54
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7fe faf8 	bl	80003a4 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxWriteTextLineToFrameBuffer(0,0,"Play Again?");
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <TetrisPlayAgain_OnEnter+0x44>)
 8001db6:	2100      	movs	r1, #0
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7fe fccf 	bl	800075c <gfxWriteTextLineToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <TetrisPlayAgain_OnEnter+0x48>)
 8001dc0:	f7fe fc18 	bl	80005f4 <gfxFinishDrawing>

}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200003d0 	.word	0x200003d0
 8001dd0:	08007f30 	.word	0x08007f30
 8001dd4:	200005cc 	.word	0x200005cc

08001dd8 <TetrisPlayAgain_OnExit>:

void TetrisPlayAgain_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <TetrisPlayAgain_OnExit+0x1c>)
 8001de6:	f7fe fd93 	bl	8000910 <ClearScreen>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200005cc 	.word	0x200005cc

08001df8 <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 8001e00:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001e04:	2100      	movs	r1, #0
 8001e06:	481e      	ldr	r0, [pc, #120]	; (8001e80 <LCD_PCD8544_init+0x88>)
 8001e08:	f004 fe02 	bl	8006a10 <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f976 	bl	8002106 <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f98e 	bl	800213c <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f9ab 	bl	800217c <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	7bb9      	ldrb	r1, [r7, #14]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8ae 	bl	8001f8e <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 8001e32:	2103      	movs	r1, #3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f939 	bl	80020ac <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 8001e3a:	2140      	movs	r1, #64	; 0x40
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f94e 	bl	80020de <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 8001e42:	2102      	movs	r1, #2
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f918 	bl	800207a <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	7bb9      	ldrb	r1, [r7, #14]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f89c 	bl	8001f8e <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2101      	movs	r1, #1
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8c7 	bl	8001fee <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f8e5 	bl	8002034 <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f996 	bl	800219c <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f845 	bl	8001f00 <LCD_PCD8544_clear_ram>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200003d4 	.word	0x200003d4

08001e84 <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	72fb      	strb	r3, [r7, #11]
 8001e92:	4613      	mov	r3, r2
 8001e94:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f94c 	bl	800213c <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f969 	bl	800217c <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8001eaa:	7dfa      	ldrb	r2, [r7, #23]
 8001eac:	7db9      	ldrb	r1, [r7, #22]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f86c 	bl	8001f8e <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 8001eb6:	7abb      	ldrb	r3, [r7, #10]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	0052      	lsls	r2, r2, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f8b4 	bl	8002034 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f965 	bl	800219c <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f942 	bl	800215c <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f94f 	bl	800217c <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8001ede:	8c3b      	ldrh	r3, [r7, #32]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f81f 	bl	8001f28 <LCD_PCD8544_LL_send_data>
 8001eea:	4603      	mov	r3, r0
 8001eec:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f954 	bl	800219c <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8001ef4:	7d7b      	ldrb	r3, [r7, #21]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 8001f08:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <LCD_PCD8544_clear_ram+0x24>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ffb5 	bl	8001e84 <LCD_PCD8544_write_bytes>
 8001f1a:	4603      	mov	r3, r0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200003d4 	.word	0x200003d4

08001f28 <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	f003 fd63 	bl	8005a0a <HAL_SPI_Transmit>
 8001f44:	4603      	mov	r3, r0
 8001f46:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	69d8      	ldr	r0, [r3, #28]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8c1b      	ldrh	r3, [r3, #32]
 8001f56:	2200      	movs	r2, #0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f002 f951 	bl	8004200 <HAL_GPIO_WritePin>
	}
	return stat;
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8001f78:	89fa      	ldrh	r2, [r7, #14]
 8001f7a:	1cfb      	adds	r3, r7, #3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffd2 	bl	8001f28 <LCD_PCD8544_LL_send_data>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	4608      	mov	r0, r1
 8001f98:	4611      	mov	r1, r2
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	70fb      	strb	r3, [r7, #3]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70bb      	strb	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	f043 0320 	orr.w	r3, r3, #32
 8001fb8:	b25a      	sxtb	r2, r3
 8001fba:	78bb      	ldrb	r3, [r7, #2]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b25a      	sxtb	r2, r3
 8001fca:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	b25b      	sxtb	r3, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffc2 	bl	8001f68 <LCD_PCD8544_LL_send_byte>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	70fb      	strb	r3, [r7, #3]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	b25b      	sxtb	r3, r3
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	b25b      	sxtb	r3, r3
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	b25a      	sxtb	r2, r3
 8002010:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	b25b      	sxtb	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b25b      	sxtb	r3, r3
 800201e:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff9f 	bl	8001f68 <LCD_PCD8544_LL_send_byte>
 800202a:	4603      	mov	r3, r0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
 8002040:	4613      	mov	r3, r2
 8002042:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 8002044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	b25b      	sxtb	r3, r3
 800204e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002052:	b25b      	sxtb	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 8002058:	78bb      	ldrb	r3, [r7, #2]
 800205a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800205e:	b2db      	uxtb	r3, r3
 8002060:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	2202      	movs	r2, #2
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff5c 	bl	8001f28 <LCD_PCD8544_LL_send_data>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 8002086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	b25b      	sxtb	r3, r3
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	b25b      	sxtb	r3, r3
 8002096:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff63 	bl	8001f68 <LCD_PCD8544_LL_send_byte>
 80020a2:	4603      	mov	r3, r0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	f043 0310 	orr.w	r3, r3, #16
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff4a 	bl	8001f68 <LCD_PCD8544_LL_send_byte>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020f0:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	4619      	mov	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ff36 	bl	8001f68 <LCD_PCD8544_LL_send_byte>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6858      	ldr	r0, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	891b      	ldrh	r3, [r3, #8]
 8002116:	2200      	movs	r2, #0
 8002118:	4619      	mov	r1, r3
 800211a:	f002 f871 	bl	8004200 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 800211e:	2001      	movs	r0, #1
 8002120:	f000 fce2 	bl	8002ae8 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6858      	ldr	r0, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	891b      	ldrh	r3, [r3, #8]
 800212c:	2201      	movs	r2, #1
 800212e:	4619      	mov	r1, r3
 8002130:	f002 f866 	bl	8004200 <HAL_GPIO_WritePin>
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6958      	ldr	r0, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	8b1b      	ldrh	r3, [r3, #24]
 800214c:	2200      	movs	r2, #0
 800214e:	4619      	mov	r1, r3
 8002150:	f002 f856 	bl	8004200 <HAL_GPIO_WritePin>
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6958      	ldr	r0, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	8b1b      	ldrh	r3, [r3, #24]
 800216c:	2201      	movs	r2, #1
 800216e:	4619      	mov	r1, r3
 8002170:	f002 f846 	bl	8004200 <HAL_GPIO_WritePin>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68d8      	ldr	r0, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8a1b      	ldrh	r3, [r3, #16]
 800218c:	2200      	movs	r2, #0
 800218e:	4619      	mov	r1, r3
 8002190:	f002 f836 	bl	8004200 <HAL_GPIO_WritePin>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68d8      	ldr	r0, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	8a1b      	ldrh	r3, [r3, #16]
 80021ac:	2201      	movs	r2, #1
 80021ae:	4619      	mov	r1, r3
 80021b0:	f002 f826 	bl	8004200 <HAL_GPIO_WritePin>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c0:	f000 fc2c 	bl	8002a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c4:	f000 f83e 	bl	8002244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c8:	f000 f996 	bl	80024f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80021cc:	f000 f900 	bl	80023d0 <MX_SPI1_Init>
  MX_ADC2_Init();
 80021d0:	f000 f890 	bl	80022f4 <MX_ADC2_Init>
  MX_TIM2_Init();
 80021d4:	f000 f93a 	bl	800244c <MX_TIM2_Init>
  //HAL_ADCEx_Calibration_Start(&hadc2);



  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <main+0x7c>)
 80021da:	4a18      	ldr	r2, [pc, #96]	; (800223c <main+0x80>)
 80021dc:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <main+0x7c>)
 80021e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80021e4:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 80021e6:	4b14      	ldr	r3, [pc, #80]	; (8002238 <main+0x7c>)
 80021e8:	2208      	movs	r2, #8
 80021ea:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <main+0x7c>)
 80021ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80021f2:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <main+0x7c>)
 80021f6:	2202      	movs	r2, #2
 80021f8:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <main+0x7c>)
 80021fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002200:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <main+0x7c>)
 8002204:	2210      	movs	r2, #16
 8002206:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 8002208:	480b      	ldr	r0, [pc, #44]	; (8002238 <main+0x7c>)
 800220a:	f7ff fdf5 	bl	8001df8 <LCD_PCD8544_init>

    // LCD - welcome screen
  //static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800220e:	2100      	movs	r1, #0
 8002210:	480b      	ldr	r0, [pc, #44]	; (8002240 <main+0x84>)
 8002212:	f000 ffb0 	bl	8003176 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   srand(time(NULL));   // Initialization, should only be called once.
 8002216:	2000      	movs	r0, #0
 8002218:	f004 fc8e 	bl	8006b38 <time>
 800221c:	4603      	mov	r3, r0
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fbfe 	bl	8006a20 <srand>
   TetrisMain_Init();
 8002224:	f7ff fc74 	bl	8001b10 <TetrisMain_Init>



  while (1)
  {
	  TetrisMain_Update(50);
 8002228:	2032      	movs	r0, #50	; 0x32
 800222a:	f7ff fce5 	bl	8001bf8 <TetrisMain_Update>
	  HAL_Delay(50);
 800222e:	2032      	movs	r0, #50	; 0x32
 8002230:	f000 fc5a 	bl	8002ae8 <HAL_Delay>
	  TetrisMain_Update(50);
 8002234:	e7f8      	b.n	8002228 <main+0x6c>
 8002236:	bf00      	nop
 8002238:	200005cc 	.word	0x200005cc
 800223c:	20000838 	.word	0x20000838
 8002240:	200007e8 	.word	0x200007e8

08002244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b096      	sub	sp, #88	; 0x58
 8002248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800224e:	2228      	movs	r2, #40	; 0x28
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f004 fbdc 	bl	8006a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002278:	2302      	movs	r3, #2
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800227c:	2301      	movs	r3, #1
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002280:	2310      	movs	r3, #16
 8002282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002284:	2302      	movs	r3, #2
 8002286:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002288:	2300      	movs	r3, #0
 800228a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800228c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002290:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002296:	4618      	mov	r0, r3
 8002298:	f001 ffca 	bl	8004230 <HAL_RCC_OscConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80022a2:	f000 f9a5 	bl	80025f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a6:	230f      	movs	r3, #15
 80022a8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 fff3 	bl	80052ac <HAL_RCC_ClockConfig>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80022cc:	f000 f990 	bl	80025f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80022d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 f9cb 	bl	8005678 <HAL_RCCEx_PeriphCLKConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80022e8:	f000 f982 	bl	80025f0 <Error_Handler>
  }
}
 80022ec:	bf00      	nop
 80022ee:	3758      	adds	r7, #88	; 0x58
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022fa:	463b      	mov	r3, r7
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
 8002308:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800230a:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <MX_ADC2_Init+0xd4>)
 800230c:	4a2f      	ldr	r2, [pc, #188]	; (80023cc <MX_ADC2_Init+0xd8>)
 800230e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002312:	2200      	movs	r2, #0
 8002314:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002316:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <MX_ADC2_Init+0xd4>)
 800231e:	2201      	movs	r2, #1
 8002320:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002324:	2200      	movs	r2, #0
 8002326:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8002328:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <MX_ADC2_Init+0xd4>)
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002332:	2201      	movs	r2, #1
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002338:	2200      	movs	r2, #0
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800233c:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <MX_ADC2_Init+0xd4>)
 800233e:	2201      	movs	r2, #1
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002344:	2200      	movs	r2, #0
 8002346:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002348:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <MX_ADC2_Init+0xd4>)
 800234a:	2202      	movs	r2, #2
 800234c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002356:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002358:	2204      	movs	r2, #4
 800235a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <MX_ADC2_Init+0xd4>)
 800235e:	2200      	movs	r2, #0
 8002360:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002364:	2200      	movs	r2, #0
 8002366:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002368:	4817      	ldr	r0, [pc, #92]	; (80023c8 <MX_ADC2_Init+0xd4>)
 800236a:	f000 fbe1 	bl	8002b30 <HAL_ADC_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8002374:	f000 f93c 	bl	80025f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002378:	2302      	movs	r3, #2
 800237a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800237c:	2301      	movs	r3, #1
 800237e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002390:	463b      	mov	r3, r7
 8002392:	4619      	mov	r1, r3
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <MX_ADC2_Init+0xd4>)
 8002396:	f000 ff61 	bl	800325c <HAL_ADC_ConfigChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80023a0:	f000 f926 	bl	80025f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80023a4:	2303      	movs	r3, #3
 80023a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_ADC2_Init+0xd4>)
 80023b2:	f000 ff53 	bl	800325c <HAL_ADC_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80023bc:	f000 f918 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200007e8 	.word	0x200007e8
 80023cc:	50000100 	.word	0x50000100

080023d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <MX_SPI1_Init+0x74>)
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <MX_SPI1_Init+0x78>)
 80023d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <MX_SPI1_Init+0x74>)
 80023dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <MX_SPI1_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e8:	4b16      	ldr	r3, [pc, #88]	; (8002444 <MX_SPI1_Init+0x74>)
 80023ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <MX_SPI1_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <MX_SPI1_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_SPI1_Init+0x74>)
 80023fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002402:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <MX_SPI1_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_SPI1_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_SPI1_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_SPI1_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_SPI1_Init+0x74>)
 800241e:	2207      	movs	r2, #7
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <MX_SPI1_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_SPI1_Init+0x74>)
 800242a:	2208      	movs	r2, #8
 800242c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_SPI1_Init+0x74>)
 8002430:	f003 fa48 	bl	80058c4 <HAL_SPI_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800243a:	f000 f8d9 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000838 	.word	0x20000838
 8002448:	40013000 	.word	0x40013000

0800244c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800245e:	463b      	mov	r3, r7
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
 800246c:	615a      	str	r2, [r3, #20]
 800246e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002470:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <MX_TIM2_Init+0xa8>)
 8002472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002476:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002478:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <MX_TIM2_Init+0xa8>)
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <MX_TIM2_Init+0xa8>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <MX_TIM2_Init+0xa8>)
 8002486:	f04f 32ff 	mov.w	r2, #4294967295
 800248a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <MX_TIM2_Init+0xa8>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <MX_TIM2_Init+0xa8>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002498:	4816      	ldr	r0, [pc, #88]	; (80024f4 <MX_TIM2_Init+0xa8>)
 800249a:	f003 fd89 	bl	8005fb0 <HAL_TIM_PWM_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80024a4:	f000 f8a4 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	480f      	ldr	r0, [pc, #60]	; (80024f4 <MX_TIM2_Init+0xa8>)
 80024b8:	f004 fa04 	bl	80068c4 <HAL_TIMEx_MasterConfigSynchronization>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80024c2:	f000 f895 	bl	80025f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024c6:	2360      	movs	r3, #96	; 0x60
 80024c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024d6:	463b      	mov	r3, r7
 80024d8:	2204      	movs	r2, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4805      	ldr	r0, [pc, #20]	; (80024f4 <MX_TIM2_Init+0xa8>)
 80024de:	f003 fdbf 	bl	8006060 <HAL_TIM_PWM_ConfigChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80024e8:	f000 f882 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ec:	bf00      	nop
 80024ee:	3728      	adds	r7, #40	; 0x28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	2000089c 	.word	0x2000089c

080024f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fe:	f107 030c 	add.w	r3, r7, #12
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800250e:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <MX_GPIO_Init+0xf0>)
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	4a35      	ldr	r2, [pc, #212]	; (80025e8 <MX_GPIO_Init+0xf0>)
 8002514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002518:	6153      	str	r3, [r2, #20]
 800251a:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <MX_GPIO_Init+0xf0>)
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <MX_GPIO_Init+0xf0>)
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <MX_GPIO_Init+0xf0>)
 800252c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002530:	6153      	str	r3, [r2, #20]
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <MX_GPIO_Init+0xf0>)
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <MX_GPIO_Init+0xf0>)
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <MX_GPIO_Init+0xf0>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6153      	str	r3, [r2, #20]
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <MX_GPIO_Init+0xf0>)
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8002556:	2201      	movs	r2, #1
 8002558:	210a      	movs	r1, #10
 800255a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255e:	f001 fe4f 	bl	8004200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	2110      	movs	r1, #16
 8002566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256a:	f001 fe49 	bl	8004200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 800256e:	231a      	movs	r3, #26
 8002570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	4619      	mov	r1, r3
 8002584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002588:	f001 fcb0 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800258c:	f248 0304 	movw	r3, #32772	; 0x8004
 8002590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800259e:	2307      	movs	r3, #7
 80025a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f001 fc9e 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 80025b0:	2301      	movs	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025b8:	2302      	movs	r3, #2
 80025ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	4619      	mov	r1, r3
 80025c2:	480a      	ldr	r0, [pc, #40]	; (80025ec <MX_GPIO_Init+0xf4>)
 80025c4:	f001 fc92 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = ANALOGUE_STICK_BUTTON_Pin;
 80025c8:	2302      	movs	r3, #2
 80025ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANALOGUE_STICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	4619      	mov	r1, r3
 80025da:	4804      	ldr	r0, [pc, #16]	; (80025ec <MX_GPIO_Init+0xf4>)
 80025dc:	f001 fc86 	bl	8003eec <HAL_GPIO_Init>

}
 80025e0:	bf00      	nop
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000
 80025ec:	48000400 	.word	0x48000400

080025f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f4:	b672      	cpsid	i
}
 80025f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <Error_Handler+0x8>
	...

080025fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_MspInit+0x4c>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_MspInit+0x4c>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6193      	str	r3, [r2, #24]
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_MspInit+0x4c>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_MspInit+0x4c>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_MspInit+0x4c>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	61d3      	str	r3, [r2, #28]
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_MspInit+0x4c>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	210f      	movs	r1, #15
 8002636:	f06f 0001 	mvn.w	r0, #1
 800263a:	f001 fa56 	bl	8003aea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <HAL_ADC_MspInit+0x74>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d124      	bne.n	80026b8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_ADC_MspInit+0x78>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_ADC_MspInit+0x78>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6153      	str	r3, [r2, #20]
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_ADC_MspInit+0x78>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_ADC_MspInit+0x78>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <HAL_ADC_MspInit+0x78>)
 800268c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002690:	6153      	str	r3, [r2, #20]
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_ADC_MspInit+0x78>)
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 800269e:	2360      	movs	r3, #96	; 0x60
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a2:	2303      	movs	r3, #3
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b4:	f001 fc1a 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80026b8:	bf00      	nop
 80026ba:	3728      	adds	r7, #40	; 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	50000100 	.word	0x50000100
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_SPI_MspInit+0xb4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d144      	bne.n	8002774 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_SPI_MspInit+0xb8>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_SPI_MspInit+0xb8>)
 80026f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f4:	6193      	str	r3, [r2, #24]
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <HAL_SPI_MspInit+0xb8>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_SPI_MspInit+0xb8>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <HAL_SPI_MspInit+0xb8>)
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	6153      	str	r3, [r2, #20]
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_SPI_MspInit+0xb8>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_SPI_MspInit+0xb8>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <HAL_SPI_MspInit+0xb8>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6153      	str	r3, [r2, #20]
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_SPI_MspInit+0xb8>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800273e:	2303      	movs	r3, #3
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002742:	2305      	movs	r3, #5
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002750:	f001 fbcc 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002754:	2308      	movs	r3, #8
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002760:	2303      	movs	r3, #3
 8002762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002764:	2305      	movs	r3, #5
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	4805      	ldr	r0, [pc, #20]	; (8002784 <HAL_SPI_MspInit+0xbc>)
 8002770:	f001 fbbc 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002774:	bf00      	nop
 8002776:	3728      	adds	r7, #40	; 0x28
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40013000 	.word	0x40013000
 8002780:	40021000 	.word	0x40021000
 8002784:	48000400 	.word	0x48000400

08002788 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002798:	d10b      	bne.n	80027b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_TIM_PWM_MspInit+0x38>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <HAL_TIM_PWM_MspInit+0x38>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	61d3      	str	r3, [r2, #28]
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_TIM_PWM_MspInit+0x38>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <NMI_Handler+0x4>

080027ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <HardFault_Handler+0x4>

080027d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <MemManage_Handler+0x4>

080027d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <BusFault_Handler+0x4>

080027dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <UsageFault_Handler+0x4>

080027e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002810:	f000 f94a 	bl	8002aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}

08002818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
	return 1;
 800281c:	2301      	movs	r3, #1
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_kill>:

int _kill(int pid, int sig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002832:	f004 f8b5 	bl	80069a0 <__errno>
 8002836:	4603      	mov	r3, r0
 8002838:	2216      	movs	r2, #22
 800283a:	601a      	str	r2, [r3, #0]
	return -1;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_exit>:

void _exit (int status)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ffe7 	bl	8002828 <_kill>
	while (1) {}		/* Make sure we hang here */
 800285a:	e7fe      	b.n	800285a <_exit+0x12>

0800285c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e00a      	b.n	8002884 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800286e:	f3af 8000 	nop.w
 8002872:	4601      	mov	r1, r0
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	60ba      	str	r2, [r7, #8]
 800287a:	b2ca      	uxtb	r2, r1
 800287c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3301      	adds	r3, #1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	dbf0      	blt.n	800286e <_read+0x12>
	}

return len;
 800288c:	687b      	ldr	r3, [r7, #4]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	e009      	b.n	80028bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	60ba      	str	r2, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dbf1      	blt.n	80028a8 <_write+0x12>
	}
	return len;
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_close>:

int _close(int file)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
	return -1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028f6:	605a      	str	r2, [r3, #4]
	return 0;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <_isatty>:

int _isatty(int file)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
	return 1;
 800290e:	2301      	movs	r3, #1
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
	return 0;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <_sbrk+0x5c>)
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <_sbrk+0x60>)
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <_sbrk+0x64>)
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <_sbrk+0x68>)
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	429a      	cmp	r2, r3
 8002966:	d207      	bcs.n	8002978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002968:	f004 f81a 	bl	80069a0 <__errno>
 800296c:	4603      	mov	r3, r0
 800296e:	220c      	movs	r2, #12
 8002970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	e009      	b.n	800298c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <_sbrk+0x64>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <_sbrk+0x64>)
 8002988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20003000 	.word	0x20003000
 8002998:	00000400 	.word	0x00000400
 800299c:	200008e8 	.word	0x200008e8
 80029a0:	20000920 	.word	0x20000920

080029a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <SystemInit+0x20>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <SystemInit+0x20>)
 80029b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029cc:	480d      	ldr	r0, [pc, #52]	; (8002a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80029ce:	490e      	ldr	r1, [pc, #56]	; (8002a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d0:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <LoopForever+0xe>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d4:	e002      	b.n	80029dc <LoopCopyDataInit>

080029d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029da:	3304      	adds	r3, #4

080029dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e0:	d3f9      	bcc.n	80029d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029e4:	4c0b      	ldr	r4, [pc, #44]	; (8002a14 <LoopForever+0x16>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e8:	e001      	b.n	80029ee <LoopFillZerobss>

080029ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ec:	3204      	adds	r2, #4

080029ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f0:	d3fb      	bcc.n	80029ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029f2:	f7ff ffd7 	bl	80029a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f003 ffd9 	bl	80069ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029fa:	f7ff fbdf 	bl	80021bc <main>

080029fe <LoopForever>:

LoopForever:
    b LoopForever
 80029fe:	e7fe      	b.n	80029fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a00:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a08:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002a0c:	0800879c 	.word	0x0800879c
  ldr r2, =_sbss
 8002a10:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002a14:	20000920 	.word	0x20000920

08002a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC1_2_IRQHandler>
	...

08002a1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_Init+0x28>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_Init+0x28>)
 8002a26:	f043 0310 	orr.w	r3, r3, #16
 8002a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a2c:	2003      	movs	r0, #3
 8002a2e:	f001 f851 	bl	8003ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f000 f808 	bl	8002a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a38:	f7ff fde0 	bl	80025fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40022000 	.word	0x40022000

08002a48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_InitTick+0x54>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_InitTick+0x58>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 f85b 	bl	8003b22 <HAL_SYSTICK_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00e      	b.n	8002a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b0f      	cmp	r3, #15
 8002a7a:	d80a      	bhi.n	8002a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f001 f831 	bl	8003aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a88:	4a06      	ldr	r2, [pc, #24]	; (8002aa4 <HAL_InitTick+0x5c>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000054 	.word	0x20000054
 8002aa0:	2000005c 	.word	0x2000005c
 8002aa4:	20000058 	.word	0x20000058

08002aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x20>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_IncTick+0x24>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_IncTick+0x24>)
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	2000005c 	.word	0x2000005c
 8002acc:	200008ec 	.word	0x200008ec

08002ad0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_GetTick+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	200008ec 	.word	0x200008ec

08002ae8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff ffee 	bl	8002ad0 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d005      	beq.n	8002b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_Delay+0x44>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b0e:	bf00      	nop
 8002b10:	f7ff ffde 	bl	8002ad0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d8f7      	bhi.n	8002b10 <HAL_Delay+0x28>
  {
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000005c 	.word	0x2000005c

08002b30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b09a      	sub	sp, #104	; 0x68
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e172      	b.n	8002e36 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d176      	bne.n	8002c50 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d152      	bne.n	8002c10 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fd61 	bl	800264c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d13b      	bne.n	8002c10 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fe83 	bl	80038a4 <ADC_Disable>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d12f      	bne.n	8002c10 <HAL_ADC_Init+0xe0>
 8002bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d12b      	bne.n	8002c10 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bc0:	f023 0302 	bic.w	r3, r3, #2
 8002bc4:	f043 0202 	orr.w	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bda:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bec:	4b94      	ldr	r3, [pc, #592]	; (8002e40 <HAL_ADC_Init+0x310>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a94      	ldr	r2, [pc, #592]	; (8002e44 <HAL_ADC_Init+0x314>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0c9a      	lsrs	r2, r3, #18
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c02:	e002      	b.n	8002c0a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f9      	bne.n	8002c04 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2c:	d110      	bne.n	8002c50 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f023 0312 	bic.w	r3, r3, #18
 8002c36:	f043 0210 	orr.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f040 80df 	bne.w	8002e1c <HAL_ADC_Init+0x2ec>
 8002c5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 80da 	bne.w	8002e1c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 80d2 	bne.w	8002e1c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c80:	f043 0202 	orr.w	r2, r3, #2
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_ADC_Init+0x318>)
 8002c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c94:	d102      	bne.n	8002c9c <HAL_ADC_Init+0x16c>
 8002c96:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <HAL_ADC_Init+0x31c>)
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e002      	b.n	8002ca2 <HAL_ADC_Init+0x172>
 8002c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ca0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d108      	bne.n	8002cc2 <HAL_ADC_Init+0x192>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Init+0x192>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_ADC_Init+0x194>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d11c      	bne.n	8002d02 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_ADC_Init+0x1ba>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_Init+0x1ba>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_ADC_Init+0x1bc>
 8002cea:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d108      	bne.n	8002d02 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d00:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7e5b      	ldrb	r3, [r3, #25]
 8002d06:	035b      	lsls	r3, r3, #13
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d0c:	2a01      	cmp	r2, #1
 8002d0e:	d002      	beq.n	8002d16 <HAL_ADC_Init+0x1e6>
 8002d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d14:	e000      	b.n	8002d18 <HAL_ADC_Init+0x1e8>
 8002d16:	2200      	movs	r2, #0
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d11b      	bne.n	8002d6e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7e5b      	ldrb	r3, [r3, #25]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	3b01      	subs	r3, #1
 8002d44:	045a      	lsls	r2, r3, #17
 8002d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4e:	663b      	str	r3, [r7, #96]	; 0x60
 8002d50:	e00d      	b.n	8002d6e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f043 0201 	orr.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d007      	beq.n	8002d86 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d82:	4313      	orrs	r3, r2
 8002d84:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d114      	bne.n	8002dbe <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002da2:	f023 0302 	bic.w	r3, r3, #2
 8002da6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	7e1b      	ldrb	r3, [r3, #24]
 8002dac:	039a      	lsls	r2, r3, #14
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4313      	orrs	r3, r2
 8002db8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_ADC_Init+0x320>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10c      	bne.n	8002df4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	f023 010f 	bic.w	r1, r3, #15
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	1e5a      	subs	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
 8002df2:	e007      	b.n	8002e04 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 020f 	bic.w	r2, r2, #15
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
 8002e1a:	e00a      	b.n	8002e32 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f023 0312 	bic.w	r3, r3, #18
 8002e24:	f043 0210 	orr.w	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002e32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3768      	adds	r7, #104	; 0x68
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000054 	.word	0x20000054
 8002e44:	431bde83 	.word	0x431bde83
 8002e48:	50000300 	.word	0x50000300
 8002e4c:	50000100 	.word	0x50000100
 8002e50:	fff0c007 	.word	0xfff0c007

08002e54 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 809c 	bne.w	8002fa8 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_Start+0x2a>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e097      	b.n	8002fae <HAL_ADC_Start+0x15a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fca8 	bl	80037dc <ADC_Enable>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 8083 	bne.w	8002f9e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002eac:	4b42      	ldr	r3, [pc, #264]	; (8002fb8 <HAL_ADC_Start+0x164>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_ADC_Start+0x6e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec0:	d115      	bne.n	8002eee <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d027      	beq.n	8002f2c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ee4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002eec:	e01e      	b.n	8002f2c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f02:	d004      	beq.n	8002f0e <HAL_ADC_Start+0xba>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <HAL_ADC_Start+0x168>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10e      	bne.n	8002f2c <HAL_ADC_Start+0xd8>
 8002f0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d106      	bne.n	8002f48 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f023 0206 	bic.w	r2, r3, #6
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
 8002f46:	e002      	b.n	8002f4e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	221c      	movs	r2, #28
 8002f5c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_ADC_Start+0x164>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_ADC_Start+0x138>
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_ADC_Start+0x164>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d00a      	beq.n	8002f8c <HAL_ADC_Start+0x138>
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_ADC_Start+0x164>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d004      	beq.n	8002f8c <HAL_ADC_Start+0x138>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f8a:	d10f      	bne.n	8002fac <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0204 	orr.w	r2, r2, #4
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	e006      	b.n	8002fac <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fa6:	e001      	b.n	8002fac <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	50000300 	.word	0x50000300
 8002fbc:	50000100 	.word	0x50000100

08002fc0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d102      	bne.n	8002fdc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e02e      	b.n	800303a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fdc:	4b5e      	ldr	r3, [pc, #376]	; (8003158 <HAL_ADC_PollForConversion+0x198>)
 8002fde:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d112      	bne.n	8003012 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d11d      	bne.n	8003036 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e09d      	b.n	800314e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e08b      	b.n	800314e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003036:	230c      	movs	r3, #12
 8003038:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_ADC_PollForConversion+0x198>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <HAL_ADC_PollForConversion+0x90>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800304e:	d104      	bne.n	800305a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	e003      	b.n	8003062 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800305a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003062:	f7ff fd35 	bl	8002ad0 <HAL_GetTick>
 8003066:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003068:	e021      	b.n	80030ae <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d01d      	beq.n	80030ae <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_ADC_PollForConversion+0xc8>
 8003078:	f7ff fd2a 	bl	8002ad0 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d212      	bcs.n	80030ae <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04f      	b.n	800314e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0d6      	beq.n	800306a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d131      	bne.n	800313a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d12c      	bne.n	800313a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d125      	bne.n	800313a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d112      	bne.n	8003122 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d112      	bne.n	800313a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
 8003120:	e00b      	b.n	800313a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	50000300 	.word	0x50000300

0800315c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_ADCEx_Calibration_Start+0x1c>
 800318e:	2302      	movs	r3, #2
 8003190:	e05f      	b.n	8003252 <HAL_ADCEx_Calibration_Start+0xdc>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fb82 	bl	80038a4 <ADC_Disable>
 80031a0:	4603      	mov	r3, r0
 80031a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d14e      	bne.n	8003248 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80031be:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031d4:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031e4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80031e6:	f7ff fc73 	bl	8002ad0 <HAL_GetTick>
 80031ea:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80031ec:	e01c      	b.n	8003228 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80031ee:	f7ff fc6f 	bl	8002ad0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b0a      	cmp	r3, #10
 80031fa:	d915      	bls.n	8003228 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800320a:	d10d      	bne.n	8003228 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f023 0312 	bic.w	r3, r3, #18
 8003214:	f043 0210 	orr.w	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e014      	b.n	8003252 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003236:	d0da      	beq.n	80031ee <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f023 0303 	bic.w	r3, r3, #3
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800325c:	b480      	push	{r7}
 800325e:	b09b      	sub	sp, #108	; 0x6c
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_ADC_ConfigChannel+0x22>
 800327a:	2302      	movs	r3, #2
 800327c:	e2a4      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x56c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 8288 	bne.w	80037a6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b04      	cmp	r3, #4
 800329c:	d81c      	bhi.n	80032d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	461a      	mov	r2, r3
 80032b2:	231f      	movs	r3, #31
 80032b4:	4093      	lsls	r3, r2
 80032b6:	43db      	mvns	r3, r3
 80032b8:	4019      	ands	r1, r3
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	fa00 f203 	lsl.w	r2, r0, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
 80032d6:	e063      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b09      	cmp	r3, #9
 80032de:	d81e      	bhi.n	800331e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	3b1e      	subs	r3, #30
 80032f4:	221f      	movs	r2, #31
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	4019      	ands	r1, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	3b1e      	subs	r3, #30
 8003310:	fa00 f203 	lsl.w	r2, r0, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	635a      	str	r2, [r3, #52]	; 0x34
 800331c:	e040      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b0e      	cmp	r3, #14
 8003324:	d81e      	bhi.n	8003364 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	3b3c      	subs	r3, #60	; 0x3c
 800333a:	221f      	movs	r2, #31
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	4019      	ands	r1, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	3b3c      	subs	r3, #60	; 0x3c
 8003356:	fa00 f203 	lsl.w	r2, r0, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
 8003362:	e01d      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	3b5a      	subs	r3, #90	; 0x5a
 8003378:	221f      	movs	r2, #31
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	4019      	ands	r1, r3
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	3b5a      	subs	r3, #90	; 0x5a
 8003394:	fa00 f203 	lsl.w	r2, r0, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 80e5 	bne.w	800357a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b09      	cmp	r3, #9
 80033b6:	d91c      	bls.n	80033f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6999      	ldr	r1, [r3, #24]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	3b1e      	subs	r3, #30
 80033ca:	2207      	movs	r2, #7
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	4019      	ands	r1, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6898      	ldr	r0, [r3, #8]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	3b1e      	subs	r3, #30
 80033e4:	fa00 f203 	lsl.w	r2, r0, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	619a      	str	r2, [r3, #24]
 80033f0:	e019      	b.n	8003426 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6959      	ldr	r1, [r3, #20]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	2207      	movs	r2, #7
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	4019      	ands	r1, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6898      	ldr	r0, [r3, #8]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	fa00 f203 	lsl.w	r2, r0, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	3b01      	subs	r3, #1
 8003444:	2b03      	cmp	r3, #3
 8003446:	d84f      	bhi.n	80034e8 <HAL_ADC_ConfigChannel+0x28c>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_ADC_ConfigChannel+0x1f4>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003461 	.word	0x08003461
 8003454:	08003483 	.word	0x08003483
 8003458:	080034a5 	.word	0x080034a5
 800345c:	080034c7 	.word	0x080034c7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003466:	4b94      	ldr	r3, [pc, #592]	; (80036b8 <HAL_ADC_ConfigChannel+0x45c>)
 8003468:	4013      	ands	r3, r2
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	0691      	lsls	r1, r2, #26
 8003470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003472:	430a      	orrs	r2, r1
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800347e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003480:	e07e      	b.n	8003580 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003488:	4b8b      	ldr	r3, [pc, #556]	; (80036b8 <HAL_ADC_ConfigChannel+0x45c>)
 800348a:	4013      	ands	r3, r2
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	0691      	lsls	r1, r2, #26
 8003492:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003494:	430a      	orrs	r2, r1
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034a0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034a2:	e06d      	b.n	8003580 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034aa:	4b83      	ldr	r3, [pc, #524]	; (80036b8 <HAL_ADC_ConfigChannel+0x45c>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	0691      	lsls	r1, r2, #26
 80034b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034b6:	430a      	orrs	r2, r1
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034c2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034c4:	e05c      	b.n	8003580 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034cc:	4b7a      	ldr	r3, [pc, #488]	; (80036b8 <HAL_ADC_ConfigChannel+0x45c>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	0691      	lsls	r1, r2, #26
 80034d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034d8:	430a      	orrs	r2, r1
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034e4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034e6:	e04b      	b.n	8003580 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	069b      	lsls	r3, r3, #26
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d107      	bne.n	800350c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800350a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	069b      	lsls	r3, r3, #26
 800351c:	429a      	cmp	r2, r3
 800351e:	d107      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800352e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	069b      	lsls	r3, r3, #26
 8003540:	429a      	cmp	r2, r3
 8003542:	d107      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003552:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	069b      	lsls	r3, r3, #26
 8003564:	429a      	cmp	r2, r3
 8003566:	d10a      	bne.n	800357e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003576:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003578:	e001      	b.n	800357e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <HAL_ADC_ConfigChannel+0x324>
      break;
 800357e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d108      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x344>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x344>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x346>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 810a 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d00f      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	400a      	ands	r2, r1
 80035ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80035ce:	e049      	b.n	8003664 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	409a      	lsls	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b09      	cmp	r3, #9
 80035f0:	d91c      	bls.n	800362c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6999      	ldr	r1, [r3, #24]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4413      	add	r3, r2
 8003602:	3b1b      	subs	r3, #27
 8003604:	2207      	movs	r2, #7
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	4019      	ands	r1, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6898      	ldr	r0, [r3, #8]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	3b1b      	subs	r3, #27
 800361e:	fa00 f203 	lsl.w	r2, r0, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	619a      	str	r2, [r3, #24]
 800362a:	e01b      	b.n	8003664 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6959      	ldr	r1, [r3, #20]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	2207      	movs	r2, #7
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	4019      	ands	r1, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6898      	ldr	r0, [r3, #8]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	fa00 f203 	lsl.w	r2, r0, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_ADC_ConfigChannel+0x460>)
 8003666:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b10      	cmp	r3, #16
 800366e:	d105      	bne.n	800367c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003680:	2b11      	cmp	r3, #17
 8003682:	d105      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003694:	2b12      	cmp	r3, #18
 8003696:	f040 8091 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800369a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f040 808a 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b0:	d108      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x468>
 80036b2:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_ADC_ConfigChannel+0x464>)
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e008      	b.n	80036ca <HAL_ADC_ConfigChannel+0x46e>
 80036b8:	83fff000 	.word	0x83fff000
 80036bc:	50000300 	.word	0x50000300
 80036c0:	50000100 	.word	0x50000100
 80036c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036c8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d108      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x48e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x48e>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_ADC_ConfigChannel+0x490>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d150      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d107      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x4b6>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x4b6>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_ADC_ConfigChannel+0x4b8>
 8003712:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003714:	2b00      	cmp	r3, #0
 8003716:	d13c      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b10      	cmp	r3, #16
 800371e:	d11d      	bne.n	800375c <HAL_ADC_ConfigChannel+0x500>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003728:	d118      	bne.n	800375c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800372a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003736:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <HAL_ADC_ConfigChannel+0x578>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a27      	ldr	r2, [pc, #156]	; (80037d8 <HAL_ADC_ConfigChannel+0x57c>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	0c9a      	lsrs	r2, r3, #18
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800374c:	e002      	b.n	8003754 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3b01      	subs	r3, #1
 8003752:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f9      	bne.n	800374e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800375a:	e02e      	b.n	80037ba <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b11      	cmp	r3, #17
 8003762:	d10b      	bne.n	800377c <HAL_ADC_ConfigChannel+0x520>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800376c:	d106      	bne.n	800377c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800376e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003778:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800377a:	e01e      	b.n	80037ba <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b12      	cmp	r3, #18
 8003782:	d11a      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800378c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003790:	e013      	b.n	80037ba <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80037a4:	e00a      	b.n	80037bc <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80037b8:	e000      	b.n	80037bc <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037ba:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80037c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	376c      	adds	r7, #108	; 0x6c
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	20000054 	.word	0x20000054
 80037d8:	431bde83 	.word	0x431bde83

080037dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d108      	bne.n	8003808 <ADC_Enable+0x2c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <ADC_Enable+0x2c>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <ADC_Enable+0x2e>
 8003808:	2300      	movs	r3, #0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d143      	bne.n	8003896 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <ADC_Enable+0xc4>)
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0210 	orr.w	r2, r3, #16
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e02f      	b.n	8003898 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003848:	f7ff f942 	bl	8002ad0 <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800384e:	e01b      	b.n	8003888 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003850:	f7ff f93e 	bl	8002ad0 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d914      	bls.n	8003888 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d00d      	beq.n	8003888 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f043 0210 	orr.w	r2, r3, #16
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e007      	b.n	8003898 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d1dc      	bne.n	8003850 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	8000003f 	.word	0x8000003f

080038a4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d108      	bne.n	80038d0 <ADC_Disable+0x2c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <ADC_Disable+0x2c>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <ADC_Disable+0x2e>
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d047      	beq.n	8003966 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030d 	and.w	r3, r3, #13
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10f      	bne.n	8003904 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0202 	orr.w	r2, r2, #2
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2203      	movs	r2, #3
 80038fa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80038fc:	f7ff f8e8 	bl	8002ad0 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003902:	e029      	b.n	8003958 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0210 	orr.w	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0201 	orr.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e023      	b.n	8003968 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003920:	f7ff f8d6 	bl	8002ad0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d914      	bls.n	8003958 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10d      	bne.n	8003958 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f043 0210 	orr.w	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	f043 0201 	orr.w	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e007      	b.n	8003968 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d0dc      	beq.n	8003920 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800398c:	4013      	ands	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a2:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	60d3      	str	r3, [r2, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <__NVIC_GetPriorityGrouping+0x18>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0307 	and.w	r3, r3, #7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db0a      	blt.n	80039fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	490c      	ldr	r1, [pc, #48]	; (8003a20 <__NVIC_SetPriority+0x4c>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	0112      	lsls	r2, r2, #4
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	440b      	add	r3, r1
 80039f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039fc:	e00a      	b.n	8003a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4908      	ldr	r1, [pc, #32]	; (8003a24 <__NVIC_SetPriority+0x50>)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3b04      	subs	r3, #4
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	440b      	add	r3, r1
 8003a12:	761a      	strb	r2, [r3, #24]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000e100 	.word	0xe000e100
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f1c3 0307 	rsb	r3, r3, #7
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	bf28      	it	cs
 8003a46:	2304      	movcs	r3, #4
 8003a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d902      	bls.n	8003a58 <NVIC_EncodePriority+0x30>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3b03      	subs	r3, #3
 8003a56:	e000      	b.n	8003a5a <NVIC_EncodePriority+0x32>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43da      	mvns	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43d9      	mvns	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	4313      	orrs	r3, r2
         );
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa0:	d301      	bcc.n	8003aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00f      	b.n	8003ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <SysTick_Config+0x40>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aae:	210f      	movs	r1, #15
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab4:	f7ff ff8e 	bl	80039d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <SysTick_Config+0x40>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <SysTick_Config+0x40>)
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	e000e010 	.word	0xe000e010

08003ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff47 	bl	8003970 <__NVIC_SetPriorityGrouping>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003afc:	f7ff ff5c 	bl	80039b8 <__NVIC_GetPriorityGrouping>
 8003b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff8e 	bl	8003a28 <NVIC_EncodePriority>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff5d 	bl	80039d4 <__NVIC_SetPriority>
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ffb0 	bl	8003a90 <SysTick_Config>
 8003b30:	4603      	mov	r3, r0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <HAL_FLASH_Program+0xd8>)
 8003b58:	7e1b      	ldrb	r3, [r3, #24]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_FLASH_Program+0x26>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e054      	b.n	8003c0c <HAL_FLASH_Program+0xd0>
 8003b62:	4b2c      	ldr	r3, [pc, #176]	; (8003c14 <HAL_FLASH_Program+0xd8>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b6c:	f000 f8a8 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003b70:	4603      	mov	r3, r0
 8003b72:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d144      	bne.n	8003c04 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d102      	bne.n	8003b86 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003b80:	2301      	movs	r3, #1
 8003b82:	757b      	strb	r3, [r7, #21]
 8003b84:	e007      	b.n	8003b96 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d102      	bne.n	8003b92 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	757b      	strb	r3, [r7, #21]
 8003b90:	e001      	b.n	8003b96 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003b92:	2304      	movs	r3, #4
 8003b94:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	75bb      	strb	r3, [r7, #22]
 8003b9a:	e02d      	b.n	8003bf8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003b9c:	7dbb      	ldrb	r3, [r7, #22]
 8003b9e:	005a      	lsls	r2, r3, #1
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	eb02 0c03 	add.w	ip, r2, r3
 8003ba6:	7dbb      	ldrb	r3, [r7, #22]
 8003ba8:	0119      	lsls	r1, r3, #4
 8003baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bae:	f1c1 0620 	rsb	r6, r1, #32
 8003bb2:	f1a1 0020 	sub.w	r0, r1, #32
 8003bb6:	fa22 f401 	lsr.w	r4, r2, r1
 8003bba:	fa03 f606 	lsl.w	r6, r3, r6
 8003bbe:	4334      	orrs	r4, r6
 8003bc0:	fa23 f000 	lsr.w	r0, r3, r0
 8003bc4:	4304      	orrs	r4, r0
 8003bc6:	fa23 f501 	lsr.w	r5, r3, r1
 8003bca:	b2a3      	uxth	r3, r4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4660      	mov	r0, ip
 8003bd0:	f000 f85a 	bl	8003c88 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bd8:	f000 f872 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <HAL_FLASH_Program+0xdc>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <HAL_FLASH_Program+0xdc>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d107      	bne.n	8003c02 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003bf2:	7dbb      	ldrb	r3, [r7, #22]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	75bb      	strb	r3, [r7, #22]
 8003bf8:	7dba      	ldrb	r2, [r7, #22]
 8003bfa:	7d7b      	ldrb	r3, [r7, #21]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3cd      	bcc.n	8003b9c <HAL_FLASH_Program+0x60>
 8003c00:	e000      	b.n	8003c04 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003c02:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_FLASH_Program+0xd8>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	761a      	strb	r2, [r3, #24]

  return status;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c14:	200008f0 	.word	0x200008f0
 8003c18:	40022000 	.word	0x40022000

08003c1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_FLASH_Unlock+0x40>)
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_FLASH_Unlock+0x40>)
 8003c34:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <HAL_FLASH_Unlock+0x44>)
 8003c36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_FLASH_Unlock+0x40>)
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_FLASH_Unlock+0x48>)
 8003c3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_FLASH_Unlock+0x40>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	45670123 	.word	0x45670123
 8003c64:	cdef89ab 	.word	0xcdef89ab

08003c68 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_FLASH_Lock+0x1c>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_FLASH_Lock+0x1c>)
 8003c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c76:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40022000 	.word	0x40022000

08003c88 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c94:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <FLASH_Program_HalfWord+0x30>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <FLASH_Program_HalfWord+0x34>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <FLASH_Program_HalfWord+0x34>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	887a      	ldrh	r2, [r7, #2]
 8003caa:	801a      	strh	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	200008f0 	.word	0x200008f0
 8003cbc:	40022000 	.word	0x40022000

08003cc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003cc8:	f7fe ff02 	bl	8002ad0 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003cce:	e010      	b.n	8003cf2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d00c      	beq.n	8003cf2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <FLASH_WaitForLastOperation+0x2e>
 8003cde:	f7fe fef7 	bl	8002ad0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d201      	bcs.n	8003cf2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e01f      	b.n	8003d32 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <FLASH_WaitForLastOperation+0x7c>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d0e8      	beq.n	8003cd0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <FLASH_WaitForLastOperation+0x7c>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d102      	bne.n	8003d10 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <FLASH_WaitForLastOperation+0x7c>)
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <FLASH_WaitForLastOperation+0x7c>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d005      	beq.n	8003d28 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <FLASH_WaitForLastOperation+0x7c>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d103      	bne.n	8003d30 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d28:	f000 f80a 	bl	8003d40 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40022000 	.word	0x40022000

08003d40 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <FLASH_SetErrorCode+0x5c>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d109      	bne.n	8003d6a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d56:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <FLASH_SetErrorCode+0x60>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <FLASH_SetErrorCode+0x60>)
 8003d60:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f043 0310 	orr.w	r3, r3, #16
 8003d68:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <FLASH_SetErrorCode+0x5c>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d109      	bne.n	8003d8a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003d76:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <FLASH_SetErrorCode+0x60>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <FLASH_SetErrorCode+0x60>)
 8003d80:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003d8a:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <FLASH_SetErrorCode+0x5c>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60d3      	str	r3, [r2, #12]
}  
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40022000 	.word	0x40022000
 8003da0:	200008f0 	.word	0x200008f0

08003da4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003db6:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <HAL_FLASHEx_Erase+0xcc>)
 8003db8:	7e1b      	ldrb	r3, [r3, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_FLASHEx_Erase+0x1e>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e052      	b.n	8003e68 <HAL_FLASHEx_Erase+0xc4>
 8003dc2:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_FLASHEx_Erase+0xcc>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d115      	bne.n	8003dfc <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003dd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dd4:	f7ff ff74 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d140      	bne.n	8003e60 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003dde:	f000 f84b 	bl	8003e78 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003de2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003de6:	f7ff ff6b 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003dea:	4603      	mov	r3, r0
 8003dec:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <HAL_FLASHEx_Erase+0xd0>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4a20      	ldr	r2, [pc, #128]	; (8003e74 <HAL_FLASHEx_Erase+0xd0>)
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	6113      	str	r3, [r2, #16]
 8003dfa:	e031      	b.n	8003e60 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003dfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e00:	f7ff ff5e 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d12a      	bne.n	8003e60 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e10:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	e019      	b.n	8003e4e <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003e1a:	68b8      	ldr	r0, [r7, #8]
 8003e1c:	f000 f846 	bl	8003eac <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e24:	f7ff ff4c 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <HAL_FLASHEx_Erase+0xd0>)
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4a10      	ldr	r2, [pc, #64]	; (8003e74 <HAL_FLASHEx_Erase+0xd0>)
 8003e32:	f023 0302 	bic.w	r3, r3, #2
 8003e36:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	601a      	str	r2, [r3, #0]
            break;
 8003e44:	e00c      	b.n	8003e60 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	02da      	lsls	r2, r3, #11
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3dc      	bcc.n	8003e1a <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_FLASHEx_Erase+0xcc>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	761a      	strb	r2, [r3, #24]

  return status;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	200008f0 	.word	0x200008f0
 8003e74:	40022000 	.word	0x40022000

08003e78 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <FLASH_MassErase+0x2c>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <FLASH_MassErase+0x30>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <FLASH_MassErase+0x30>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <FLASH_MassErase+0x30>)
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <FLASH_MassErase+0x30>)
 8003e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e98:	6113      	str	r3, [r2, #16]
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	200008f0 	.word	0x200008f0
 8003ea8:	40022000 	.word	0x40022000

08003eac <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <FLASH_PageErase+0x38>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <FLASH_PageErase+0x3c>)
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <FLASH_PageErase+0x3c>)
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003ec6:	4a08      	ldr	r2, [pc, #32]	; (8003ee8 <FLASH_PageErase+0x3c>)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <FLASH_PageErase+0x3c>)
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <FLASH_PageErase+0x3c>)
 8003ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed6:	6113      	str	r3, [r2, #16]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	200008f0 	.word	0x200008f0
 8003ee8:	40022000 	.word	0x40022000

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efa:	e14e      	b.n	800419a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8140 	beq.w	8004194 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d005      	beq.n	8003f2c <HAL_GPIO_Init+0x40>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d130      	bne.n	8003f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	2203      	movs	r2, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f62:	2201      	movs	r2, #1
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0201 	and.w	r2, r3, #1
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d017      	beq.n	8003fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d123      	bne.n	800401e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3208      	adds	r2, #8
 8003fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	08da      	lsrs	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3208      	adds	r2, #8
 8004018:	6939      	ldr	r1, [r7, #16]
 800401a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	2203      	movs	r2, #3
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0203 	and.w	r2, r3, #3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 809a 	beq.w	8004194 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004060:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <HAL_GPIO_Init+0x2cc>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4a54      	ldr	r2, [pc, #336]	; (80041b8 <HAL_GPIO_Init+0x2cc>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6193      	str	r3, [r2, #24]
 800406c:	4b52      	ldr	r3, [pc, #328]	; (80041b8 <HAL_GPIO_Init+0x2cc>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004078:	4a50      	ldr	r2, [pc, #320]	; (80041bc <HAL_GPIO_Init+0x2d0>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	220f      	movs	r2, #15
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040a2:	d013      	beq.n	80040cc <HAL_GPIO_Init+0x1e0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a46      	ldr	r2, [pc, #280]	; (80041c0 <HAL_GPIO_Init+0x2d4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00d      	beq.n	80040c8 <HAL_GPIO_Init+0x1dc>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a45      	ldr	r2, [pc, #276]	; (80041c4 <HAL_GPIO_Init+0x2d8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <HAL_GPIO_Init+0x1d8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a44      	ldr	r2, [pc, #272]	; (80041c8 <HAL_GPIO_Init+0x2dc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_GPIO_Init+0x1d4>
 80040bc:	2303      	movs	r3, #3
 80040be:	e006      	b.n	80040ce <HAL_GPIO_Init+0x1e2>
 80040c0:	2305      	movs	r3, #5
 80040c2:	e004      	b.n	80040ce <HAL_GPIO_Init+0x1e2>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e002      	b.n	80040ce <HAL_GPIO_Init+0x1e2>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_GPIO_Init+0x1e2>
 80040cc:	2300      	movs	r3, #0
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	f002 0203 	and.w	r2, r2, #3
 80040d4:	0092      	lsls	r2, r2, #2
 80040d6:	4093      	lsls	r3, r2
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040de:	4937      	ldr	r1, [pc, #220]	; (80041bc <HAL_GPIO_Init+0x2d0>)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	089b      	lsrs	r3, r3, #2
 80040e4:	3302      	adds	r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ec:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004110:	4a2e      	ldr	r2, [pc, #184]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	43db      	mvns	r3, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4013      	ands	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800413a:	4a24      	ldr	r2, [pc, #144]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004140:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	43db      	mvns	r3, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800418e:	4a0f      	ldr	r2, [pc, #60]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3301      	adds	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f47f aea9 	bne.w	8003efc <HAL_GPIO_Init+0x10>
  }
}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40010000 	.word	0x40010000
 80041c0:	48000400 	.word	0x48000400
 80041c4:	48000800 	.word	0x48000800
 80041c8:	48000c00 	.word	0x48000c00
 80041cc:	40010400 	.word	0x40010400

080041d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	887b      	ldrh	r3, [r7, #2]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
 80041ec:	e001      	b.n	80041f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]
 800420c:	4613      	mov	r3, r2
 800420e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004210:	787b      	ldrb	r3, [r7, #1]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004216:	887a      	ldrh	r2, [r7, #2]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800421c:	e002      	b.n	8004224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004236:	af00      	add	r7, sp, #0
 8004238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004240:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f001 b823 	b.w	800529c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 817d 	beq.w	8004566 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800426c:	4bbc      	ldr	r3, [pc, #752]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b04      	cmp	r3, #4
 8004276:	d00c      	beq.n	8004292 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004278:	4bb9      	ldr	r3, [pc, #740]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b08      	cmp	r3, #8
 8004282:	d15c      	bne.n	800433e <HAL_RCC_OscConfig+0x10e>
 8004284:	4bb6      	ldr	r3, [pc, #728]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d155      	bne.n	800433e <HAL_RCC_OscConfig+0x10e>
 8004292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004296:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d102      	bne.n	80042c4 <HAL_RCC_OscConfig+0x94>
 80042be:	4ba8      	ldr	r3, [pc, #672]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	e015      	b.n	80042f0 <HAL_RCC_OscConfig+0xc0>
 80042c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80042d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80042e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80042ec:	4b9c      	ldr	r3, [pc, #624]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80042f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80042fc:	fa92 f2a2 	rbit	r2, r2
 8004300:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004304:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004308:	fab2 f282 	clz	r2, r2
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	f042 0220 	orr.w	r2, r2, #32
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	f002 021f 	and.w	r2, r2, #31
 8004318:	2101      	movs	r1, #1
 800431a:	fa01 f202 	lsl.w	r2, r1, r2
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 811f 	beq.w	8004564 <HAL_RCC_OscConfig+0x334>
 8004326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f040 8116 	bne.w	8004564 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	f000 bfaf 	b.w	800529c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434e:	d106      	bne.n	800435e <HAL_RCC_OscConfig+0x12e>
 8004350:	4b83      	ldr	r3, [pc, #524]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a82      	ldr	r2, [pc, #520]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 8004356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	e036      	b.n	80043cc <HAL_RCC_OscConfig+0x19c>
 800435e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x158>
 800436e:	4b7c      	ldr	r3, [pc, #496]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7b      	ldr	r2, [pc, #492]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 8004374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b79      	ldr	r3, [pc, #484]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a78      	ldr	r2, [pc, #480]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 8004380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e021      	b.n	80043cc <HAL_RCC_OscConfig+0x19c>
 8004388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x184>
 800439a:	4b71      	ldr	r3, [pc, #452]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a70      	ldr	r2, [pc, #448]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b6e      	ldr	r3, [pc, #440]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6d      	ldr	r2, [pc, #436]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e00b      	b.n	80043cc <HAL_RCC_OscConfig+0x19c>
 80043b4:	4b6a      	ldr	r3, [pc, #424]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a69      	ldr	r2, [pc, #420]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b67      	ldr	r3, [pc, #412]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a66      	ldr	r2, [pc, #408]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80043c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043cc:	4b64      	ldr	r3, [pc, #400]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	f023 020f 	bic.w	r2, r3, #15
 80043d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	495f      	ldr	r1, [pc, #380]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d059      	beq.n	80044aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f6:	f7fe fb6b 	bl	8002ad0 <HAL_GetTick>
 80043fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004400:	f7fe fb66 	bl	8002ad0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b64      	cmp	r3, #100	; 0x64
 800440e:	d902      	bls.n	8004416 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	f000 bf43 	b.w	800529c <HAL_RCC_OscConfig+0x106c>
 8004416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800441a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800442a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d102      	bne.n	8004448 <HAL_RCC_OscConfig+0x218>
 8004442:	4b47      	ldr	r3, [pc, #284]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	e015      	b.n	8004474 <HAL_RCC_OscConfig+0x244>
 8004448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800444c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800445c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004460:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004464:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004470:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004478:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800447c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004480:	fa92 f2a2 	rbit	r2, r2
 8004484:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004488:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800448c:	fab2 f282 	clz	r2, r2
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	f042 0220 	orr.w	r2, r2, #32
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	f002 021f 	and.w	r2, r2, #31
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f202 	lsl.w	r2, r1, r2
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ab      	beq.n	8004400 <HAL_RCC_OscConfig+0x1d0>
 80044a8:	e05d      	b.n	8004566 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fe fb11 	bl	8002ad0 <HAL_GetTick>
 80044ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	e00a      	b.n	80044ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fe fb0c 	bl	8002ad0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b64      	cmp	r3, #100	; 0x64
 80044c2:	d902      	bls.n	80044ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	f000 bee9 	b.w	800529c <HAL_RCC_OscConfig+0x106c>
 80044ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80044de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d102      	bne.n	80044fc <HAL_RCC_OscConfig+0x2cc>
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	e015      	b.n	8004528 <HAL_RCC_OscConfig+0x2f8>
 80044fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004500:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004508:	fa93 f3a3 	rbit	r3, r3
 800450c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004514:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004518:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800451c:	fa93 f3a3 	rbit	r3, r3
 8004520:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <HAL_RCC_OscConfig+0x330>)
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800452c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004530:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004534:	fa92 f2a2 	rbit	r2, r2
 8004538:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800453c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004540:	fab2 f282 	clz	r2, r2
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	f042 0220 	orr.w	r2, r2, #32
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	f002 021f 	and.w	r2, r2, #31
 8004550:	2101      	movs	r1, #1
 8004552:	fa01 f202 	lsl.w	r2, r1, r2
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ab      	bne.n	80044b4 <HAL_RCC_OscConfig+0x284>
 800455c:	e003      	b.n	8004566 <HAL_RCC_OscConfig+0x336>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 817d 	beq.w	8004876 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800457c:	4ba6      	ldr	r3, [pc, #664]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004588:	4ba3      	ldr	r3, [pc, #652]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b08      	cmp	r3, #8
 8004592:	d172      	bne.n	800467a <HAL_RCC_OscConfig+0x44a>
 8004594:	4ba0      	ldr	r3, [pc, #640]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d16c      	bne.n	800467a <HAL_RCC_OscConfig+0x44a>
 80045a0:	2302      	movs	r3, #2
 80045a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80045b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_RCC_OscConfig+0x3a0>
 80045ca:	4b93      	ldr	r3, [pc, #588]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	e013      	b.n	80045f8 <HAL_RCC_OscConfig+0x3c8>
 80045d0:	2302      	movs	r3, #2
 80045d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80045da:	fa93 f3a3 	rbit	r3, r3
 80045de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80045e2:	2302      	movs	r3, #2
 80045e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80045e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80045ec:	fa93 f3a3 	rbit	r3, r3
 80045f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80045f4:	4b88      	ldr	r3, [pc, #544]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	2202      	movs	r2, #2
 80045fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80045fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004602:	fa92 f2a2 	rbit	r2, r2
 8004606:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800460a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800460e:	fab2 f282 	clz	r2, r2
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	f042 0220 	orr.w	r2, r2, #32
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	f002 021f 	and.w	r2, r2, #31
 800461e:	2101      	movs	r1, #1
 8004620:	fa01 f202 	lsl.w	r2, r1, r2
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCC_OscConfig+0x410>
 800462a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d002      	beq.n	8004640 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f000 be2e 	b.w	800529c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004640:	4b75      	ldr	r3, [pc, #468]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	21f8      	movs	r1, #248	; 0xf8
 8004656:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800465e:	fa91 f1a1 	rbit	r1, r1
 8004662:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004666:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800466a:	fab1 f181 	clz	r1, r1
 800466e:	b2c9      	uxtb	r1, r1
 8004670:	408b      	lsls	r3, r1
 8004672:	4969      	ldr	r1, [pc, #420]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 8004674:	4313      	orrs	r3, r2
 8004676:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004678:	e0fd      	b.n	8004876 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800467a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8088 	beq.w	800479c <HAL_RCC_OscConfig+0x56c>
 800468c:	2301      	movs	r3, #1
 800468e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800469e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	461a      	mov	r2, r3
 80046b4:	2301      	movs	r3, #1
 80046b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fe fa0a 	bl	8002ad0 <HAL_GetTick>
 80046bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fe fa05 	bl	8002ad0 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d902      	bls.n	80046d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	f000 bde2 	b.w	800529c <HAL_RCC_OscConfig+0x106c>
 80046d8:	2302      	movs	r3, #2
 80046da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80046ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HAL_RCC_OscConfig+0x4d8>
 8004702:	4b45      	ldr	r3, [pc, #276]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	e013      	b.n	8004730 <HAL_RCC_OscConfig+0x500>
 8004708:	2302      	movs	r3, #2
 800470a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800471a:	2302      	movs	r3, #2
 800471c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004720:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800472c:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2202      	movs	r2, #2
 8004732:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004736:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800473a:	fa92 f2a2 	rbit	r2, r2
 800473e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004742:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004746:	fab2 f282 	clz	r2, r2
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	f042 0220 	orr.w	r2, r2, #32
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	f002 021f 	and.w	r2, r2, #31
 8004756:	2101      	movs	r1, #1
 8004758:	fa01 f202 	lsl.w	r2, r1, r2
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0af      	beq.n	80046c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004762:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800476a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	21f8      	movs	r1, #248	; 0xf8
 8004778:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004780:	fa91 f1a1 	rbit	r1, r1
 8004784:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004788:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800478c:	fab1 f181 	clz	r1, r1
 8004790:	b2c9      	uxtb	r1, r1
 8004792:	408b      	lsls	r3, r1
 8004794:	4920      	ldr	r1, [pc, #128]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
 800479a:	e06c      	b.n	8004876 <HAL_RCC_OscConfig+0x646>
 800479c:	2301      	movs	r3, #1
 800479e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80047ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	461a      	mov	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fe f982 	bl	8002ad0 <HAL_GetTick>
 80047cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d2:	f7fe f97d 	bl	8002ad0 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d902      	bls.n	80047e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	f000 bd5a 	b.w	800529c <HAL_RCC_OscConfig+0x106c>
 80047e8:	2302      	movs	r3, #2
 80047ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80047fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d104      	bne.n	800481c <HAL_RCC_OscConfig+0x5ec>
 8004812:	4b01      	ldr	r3, [pc, #4]	; (8004818 <HAL_RCC_OscConfig+0x5e8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	e015      	b.n	8004844 <HAL_RCC_OscConfig+0x614>
 8004818:	40021000 	.word	0x40021000
 800481c:	2302      	movs	r3, #2
 800481e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004826:	fa93 f3a3 	rbit	r3, r3
 800482a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800482e:	2302      	movs	r3, #2
 8004830:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004834:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004838:	fa93 f3a3 	rbit	r3, r3
 800483c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004840:	4bc8      	ldr	r3, [pc, #800]	; (8004b64 <HAL_RCC_OscConfig+0x934>)
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2202      	movs	r2, #2
 8004846:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800484a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800484e:	fa92 f2a2 	rbit	r2, r2
 8004852:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004856:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800485a:	fab2 f282 	clz	r2, r2
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	f042 0220 	orr.w	r2, r2, #32
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	f002 021f 	and.w	r2, r2, #31
 800486a:	2101      	movs	r1, #1
 800486c:	fa01 f202 	lsl.w	r2, r1, r2
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ad      	bne.n	80047d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8110 	beq.w	8004aac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800488c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d079      	beq.n	8004990 <HAL_RCC_OscConfig+0x760>
 800489c:	2301      	movs	r3, #1
 800489e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80048ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	4bab      	ldr	r3, [pc, #684]	; (8004b68 <HAL_RCC_OscConfig+0x938>)
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	461a      	mov	r2, r3
 80048c2:	2301      	movs	r3, #1
 80048c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fe f903 	bl	8002ad0 <HAL_GetTick>
 80048ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d0:	f7fe f8fe 	bl	8002ad0 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d902      	bls.n	80048e6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	f000 bcdb 	b.w	800529c <HAL_RCC_OscConfig+0x106c>
 80048e6:	2302      	movs	r3, #2
 80048e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048f0:	fa93 f3a3 	rbit	r3, r3
 80048f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004900:	2202      	movs	r2, #2
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004908:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	fa93 f2a3 	rbit	r2, r3
 8004912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004924:	2202      	movs	r2, #2
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	fa93 f2a3 	rbit	r2, r3
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800493e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004940:	4b88      	ldr	r3, [pc, #544]	; (8004b64 <HAL_RCC_OscConfig+0x934>)
 8004942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800494c:	2102      	movs	r1, #2
 800494e:	6019      	str	r1, [r3, #0]
 8004950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004954:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	fa93 f1a3 	rbit	r1, r3
 800495e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004962:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004966:	6019      	str	r1, [r3, #0]
  return result;
 8004968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	2101      	movs	r1, #1
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0a0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x6a0>
 800498e:	e08d      	b.n	8004aac <HAL_RCC_OscConfig+0x87c>
 8004990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004994:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004998:	2201      	movs	r2, #1
 800499a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	fa93 f2a3 	rbit	r2, r3
 80049aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049b2:	601a      	str	r2, [r3, #0]
  return result;
 80049b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049be:	fab3 f383 	clz	r3, r3
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b68      	ldr	r3, [pc, #416]	; (8004b68 <HAL_RCC_OscConfig+0x938>)
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	461a      	mov	r2, r3
 80049ce:	2300      	movs	r3, #0
 80049d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d2:	f7fe f87d 	bl	8002ad0 <HAL_GetTick>
 80049d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049dc:	f7fe f878 	bl	8002ad0 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d902      	bls.n	80049f2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	f000 bc55 	b.w	800529c <HAL_RCC_OscConfig+0x106c>
 80049f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049fa:	2202      	movs	r2, #2
 80049fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	fa93 f2a3 	rbit	r2, r3
 8004a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a1e:	2202      	movs	r2, #2
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	fa93 f2a3 	rbit	r2, r3
 8004a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a42:	2202      	movs	r2, #2
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	fa93 f2a3 	rbit	r2, r3
 8004a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <HAL_RCC_OscConfig+0x934>)
 8004a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	6019      	str	r1, [r3, #0]
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	fa93 f1a3 	rbit	r1, r3
 8004a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a84:	6019      	str	r1, [r3, #0]
  return result;
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d197      	bne.n	80049dc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 81a1 	beq.w	8004e04 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac8:	4b26      	ldr	r3, [pc, #152]	; (8004b64 <HAL_RCC_OscConfig+0x934>)
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d116      	bne.n	8004b02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad4:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <HAL_RCC_OscConfig+0x934>)
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	4a22      	ldr	r2, [pc, #136]	; (8004b64 <HAL_RCC_OscConfig+0x934>)
 8004ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ade:	61d3      	str	r3, [r2, #28]
 8004ae0:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <HAL_RCC_OscConfig+0x934>)
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004afa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCC_OscConfig+0x93c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d11a      	bne.n	8004b44 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b0e:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <HAL_RCC_OscConfig+0x93c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_RCC_OscConfig+0x93c>)
 8004b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b1a:	f7fd ffd9 	bl	8002ad0 <HAL_GetTick>
 8004b1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	e009      	b.n	8004b38 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b24:	f7fd ffd4 	bl	8002ad0 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b64      	cmp	r3, #100	; 0x64
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e3b1      	b.n	800529c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_RCC_OscConfig+0x93c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ef      	beq.n	8004b24 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d10d      	bne.n	8004b70 <HAL_RCC_OscConfig+0x940>
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <HAL_RCC_OscConfig+0x934>)
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	4a02      	ldr	r2, [pc, #8]	; (8004b64 <HAL_RCC_OscConfig+0x934>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6213      	str	r3, [r2, #32]
 8004b60:	e03c      	b.n	8004bdc <HAL_RCC_OscConfig+0x9ac>
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	10908120 	.word	0x10908120
 8004b6c:	40007000 	.word	0x40007000
 8004b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10c      	bne.n	8004b9a <HAL_RCC_OscConfig+0x96a>
 8004b80:	4bc1      	ldr	r3, [pc, #772]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4ac0      	ldr	r2, [pc, #768]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	6213      	str	r3, [r2, #32]
 8004b8c:	4bbe      	ldr	r3, [pc, #760]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4abd      	ldr	r2, [pc, #756]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004b92:	f023 0304 	bic.w	r3, r3, #4
 8004b96:	6213      	str	r3, [r2, #32]
 8004b98:	e020      	b.n	8004bdc <HAL_RCC_OscConfig+0x9ac>
 8004b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x994>
 8004baa:	4bb7      	ldr	r3, [pc, #732]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	4ab6      	ldr	r2, [pc, #728]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004bb0:	f043 0304 	orr.w	r3, r3, #4
 8004bb4:	6213      	str	r3, [r2, #32]
 8004bb6:	4bb4      	ldr	r3, [pc, #720]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4ab3      	ldr	r2, [pc, #716]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6213      	str	r3, [r2, #32]
 8004bc2:	e00b      	b.n	8004bdc <HAL_RCC_OscConfig+0x9ac>
 8004bc4:	4bb0      	ldr	r3, [pc, #704]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4aaf      	ldr	r2, [pc, #700]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	6213      	str	r3, [r2, #32]
 8004bd0:	4bad      	ldr	r3, [pc, #692]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	4aac      	ldr	r2, [pc, #688]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004bd6:	f023 0304 	bic.w	r3, r3, #4
 8004bda:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8081 	beq.w	8004cf0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7fd ff6f 	bl	8002ad0 <HAL_GetTick>
 8004bf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fd ff6a 	bl	8002ad0 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e345      	b.n	800529c <HAL_RCC_OscConfig+0x106c>
 8004c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c18:	2202      	movs	r2, #2
 8004c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	fa93 f2a3 	rbit	r2, r3
 8004c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	fa93 f2a3 	rbit	r2, r3
 8004c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c56:	601a      	str	r2, [r3, #0]
  return result;
 8004c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c62:	fab3 f383 	clz	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d102      	bne.n	8004c7c <HAL_RCC_OscConfig+0xa4c>
 8004c76:	4b84      	ldr	r3, [pc, #528]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	e013      	b.n	8004ca4 <HAL_RCC_OscConfig+0xa74>
 8004c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c84:	2202      	movs	r2, #2
 8004c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	fa93 f2a3 	rbit	r2, r3
 8004c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	4b79      	ldr	r3, [pc, #484]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ca8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004cac:	2102      	movs	r1, #2
 8004cae:	6011      	str	r1, [r2, #0]
 8004cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	fa92 f1a2 	rbit	r1, r2
 8004cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cc2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004cc6:	6011      	str	r1, [r2, #0]
  return result;
 8004cc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ccc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	fab2 f282 	clz	r2, r2
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	f002 021f 	and.w	r2, r2, #31
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d084      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x9c8>
 8004cee:	e07f      	b.n	8004df0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf0:	f7fd feee 	bl	8002ad0 <HAL_GetTick>
 8004cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf8:	e00b      	b.n	8004d12 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fd fee9 	bl	8002ad0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e2c4      	b.n	800529c <HAL_RCC_OscConfig+0x106c>
 8004d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	fa93 f2a3 	rbit	r2, r3
 8004d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d3e:	2202      	movs	r2, #2
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	fa93 f2a3 	rbit	r2, r3
 8004d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d58:	601a      	str	r2, [r3, #0]
  return result;
 8004d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d64:	fab3 f383 	clz	r3, r3
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f043 0302 	orr.w	r3, r3, #2
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d102      	bne.n	8004d7e <HAL_RCC_OscConfig+0xb4e>
 8004d78:	4b43      	ldr	r3, [pc, #268]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	e013      	b.n	8004da6 <HAL_RCC_OscConfig+0xb76>
 8004d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d86:	2202      	movs	r2, #2
 8004d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	fa93 f2a3 	rbit	r2, r3
 8004d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	4b39      	ldr	r3, [pc, #228]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004daa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004dae:	2102      	movs	r1, #2
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004db6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	fa92 f1a2 	rbit	r1, r2
 8004dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dc8:	6011      	str	r1, [r2, #0]
  return result;
 8004dca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	fab2 f282 	clz	r2, r2
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	f002 021f 	and.w	r2, r2, #31
 8004de4:	2101      	movs	r1, #1
 8004de6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d184      	bne.n	8004cfa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004df0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df8:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	4a22      	ldr	r2, [pc, #136]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8242 	beq.w	800529a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e16:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <HAL_RCC_OscConfig+0xc58>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	f000 8213 	beq.w	800524a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f040 8162 	bne.w	80050fa <HAL_RCC_OscConfig+0xeca>
 8004e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e48:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	fa93 f2a3 	rbit	r2, r3
 8004e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e5a:	601a      	str	r2, [r3, #0]
  return result;
 8004e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	461a      	mov	r2, r3
 8004e78:	2300      	movs	r3, #0
 8004e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fe28 	bl	8002ad0 <HAL_GetTick>
 8004e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e84:	e00c      	b.n	8004ea0 <HAL_RCC_OscConfig+0xc70>
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fd fe20 	bl	8002ad0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1fd      	b.n	800529c <HAL_RCC_OscConfig+0x106c>
 8004ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	fa93 f2a3 	rbit	r2, r3
 8004ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ec4:	601a      	str	r2, [r3, #0]
  return result;
 8004ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ece:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed0:	fab3 f383 	clz	r3, r3
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d102      	bne.n	8004eea <HAL_RCC_OscConfig+0xcba>
 8004ee4:	4bb0      	ldr	r3, [pc, #704]	; (80051a8 <HAL_RCC_OscConfig+0xf78>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	e027      	b.n	8004f3a <HAL_RCC_OscConfig+0xd0a>
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	fa93 f2a3 	rbit	r2, r3
 8004f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f14:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f22:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	fa93 f2a3 	rbit	r2, r3
 8004f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	4b9c      	ldr	r3, [pc, #624]	; (80051a8 <HAL_RCC_OscConfig+0xf78>)
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f3e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f42:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f46:	6011      	str	r1, [r2, #0]
 8004f48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f4c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	fa92 f1a2 	rbit	r1, r2
 8004f56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f5e:	6011      	str	r1, [r2, #0]
  return result;
 8004f60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f64:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	fab2 f282 	clz	r2, r2
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	f042 0220 	orr.w	r2, r2, #32
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	f002 021f 	and.w	r2, r2, #31
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d182      	bne.n	8004e8c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f86:	4b88      	ldr	r3, [pc, #544]	; (80051a8 <HAL_RCC_OscConfig+0xf78>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	497f      	ldr	r1, [pc, #508]	; (80051a8 <HAL_RCC_OscConfig+0xf78>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
 8004fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	fa93 f2a3 	rbit	r2, r3
 8004fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fd2:	601a      	str	r2, [r3, #0]
  return result;
 8004fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fdc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fde:	fab3 f383 	clz	r3, r3
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fe8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fd fd6c 	bl	8002ad0 <HAL_GetTick>
 8004ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ffc:	e009      	b.n	8005012 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fd fd67 	bl	8002ad0 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e144      	b.n	800529c <HAL_RCC_OscConfig+0x106c>
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800501a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800501e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	fa93 f2a3 	rbit	r2, r3
 800502e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005032:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005036:	601a      	str	r2, [r3, #0]
  return result;
 8005038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005040:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b01      	cmp	r3, #1
 8005054:	d102      	bne.n	800505c <HAL_RCC_OscConfig+0xe2c>
 8005056:	4b54      	ldr	r3, [pc, #336]	; (80051a8 <HAL_RCC_OscConfig+0xf78>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	e027      	b.n	80050ac <HAL_RCC_OscConfig+0xe7c>
 800505c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005060:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	fa93 f2a3 	rbit	r2, r3
 8005078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005086:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800508a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005094:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	fa93 f2a3 	rbit	r2, r3
 800509e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <HAL_RCC_OscConfig+0xf78>)
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80050b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050b8:	6011      	str	r1, [r2, #0]
 80050ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050be:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	fa92 f1a2 	rbit	r1, r2
 80050c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050d0:	6011      	str	r1, [r2, #0]
  return result;
 80050d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	fab2 f282 	clz	r2, r2
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	f042 0220 	orr.w	r2, r2, #32
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	f002 021f 	and.w	r2, r2, #31
 80050ec:	2101      	movs	r1, #1
 80050ee:	fa01 f202 	lsl.w	r2, r1, r2
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d082      	beq.n	8004ffe <HAL_RCC_OscConfig+0xdce>
 80050f8:	e0cf      	b.n	800529a <HAL_RCC_OscConfig+0x106a>
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005102:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	fa93 f2a3 	rbit	r2, r3
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800511e:	601a      	str	r2, [r3, #0]
  return result;
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005128:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005134:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	461a      	mov	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005140:	f7fd fcc6 	bl	8002ad0 <HAL_GetTick>
 8005144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005148:	e009      	b.n	800515e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514a:	f7fd fcc1 	bl	8002ad0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e09e      	b.n	800529c <HAL_RCC_OscConfig+0x106c>
 800515e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005162:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005166:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800516a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005170:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	fa93 f2a3 	rbit	r2, r3
 800517a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005182:	601a      	str	r2, [r3, #0]
  return result;
 8005184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005188:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800518c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800518e:	fab3 f383 	clz	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d104      	bne.n	80051ac <HAL_RCC_OscConfig+0xf7c>
 80051a2:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <HAL_RCC_OscConfig+0xf78>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	e029      	b.n	80051fc <HAL_RCC_OscConfig+0xfcc>
 80051a8:	40021000 	.word	0x40021000
 80051ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	fa93 f2a3 	rbit	r2, r3
 80051c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	fa93 f2a3 	rbit	r2, r3
 80051ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_RCC_OscConfig+0x1078>)
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005200:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005204:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800520e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	fa92 f1a2 	rbit	r1, r2
 8005218:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800521c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005220:	6011      	str	r1, [r2, #0]
  return result;
 8005222:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005226:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	fab2 f282 	clz	r2, r2
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	f042 0220 	orr.w	r2, r2, #32
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	f002 021f 	and.w	r2, r2, #31
 800523c:	2101      	movs	r1, #1
 800523e:	fa01 f202 	lsl.w	r2, r1, r2
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d180      	bne.n	800514a <HAL_RCC_OscConfig+0xf1a>
 8005248:	e027      	b.n	800529a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e01e      	b.n	800529c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_RCC_OscConfig+0x1078>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005266:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800526a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800526e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	429a      	cmp	r2, r3
 800527c:	d10b      	bne.n	8005296 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800527e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005282:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005292:	429a      	cmp	r2, r3
 8005294:	d001      	beq.n	800529a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000

080052ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b09e      	sub	sp, #120	; 0x78
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e162      	b.n	800558a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052c4:	4b90      	ldr	r3, [pc, #576]	; (8005508 <HAL_RCC_ClockConfig+0x25c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d910      	bls.n	80052f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d2:	4b8d      	ldr	r3, [pc, #564]	; (8005508 <HAL_RCC_ClockConfig+0x25c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 0207 	bic.w	r2, r3, #7
 80052da:	498b      	ldr	r1, [pc, #556]	; (8005508 <HAL_RCC_ClockConfig+0x25c>)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e2:	4b89      	ldr	r3, [pc, #548]	; (8005508 <HAL_RCC_ClockConfig+0x25c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e14a      	b.n	800558a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005300:	4b82      	ldr	r3, [pc, #520]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	497f      	ldr	r1, [pc, #508]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80dc 	beq.w	80054d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d13c      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xf6>
 8005328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800532c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005330:	fa93 f3a3 	rbit	r3, r3
 8005334:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005338:	fab3 f383 	clz	r3, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d102      	bne.n	8005352 <HAL_RCC_ClockConfig+0xa6>
 800534c:	4b6f      	ldr	r3, [pc, #444]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	e00f      	b.n	8005372 <HAL_RCC_ClockConfig+0xc6>
 8005352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005356:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800535a:	fa93 f3a3 	rbit	r3, r3
 800535e:	667b      	str	r3, [r7, #100]	; 0x64
 8005360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005364:	663b      	str	r3, [r7, #96]	; 0x60
 8005366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005368:	fa93 f3a3 	rbit	r3, r3
 800536c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800536e:	4b67      	ldr	r3, [pc, #412]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005376:	65ba      	str	r2, [r7, #88]	; 0x58
 8005378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800537a:	fa92 f2a2 	rbit	r2, r2
 800537e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005382:	fab2 f282 	clz	r2, r2
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	f042 0220 	orr.w	r2, r2, #32
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	f002 021f 	and.w	r2, r2, #31
 8005392:	2101      	movs	r1, #1
 8005394:	fa01 f202 	lsl.w	r2, r1, r2
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d17b      	bne.n	8005496 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e0f3      	b.n	800558a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d13c      	bne.n	8005424 <HAL_RCC_ClockConfig+0x178>
 80053aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b2:	fa93 f3a3 	rbit	r3, r3
 80053b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80053b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ba:	fab3 f383 	clz	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d102      	bne.n	80053d4 <HAL_RCC_ClockConfig+0x128>
 80053ce:	4b4f      	ldr	r3, [pc, #316]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	e00f      	b.n	80053f4 <HAL_RCC_ClockConfig+0x148>
 80053d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053dc:	fa93 f3a3 	rbit	r3, r3
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
 80053e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053e6:	643b      	str	r3, [r7, #64]	; 0x40
 80053e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ea:	fa93 f3a3 	rbit	r3, r3
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f0:	4b46      	ldr	r3, [pc, #280]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80053fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053fc:	fa92 f2a2 	rbit	r2, r2
 8005400:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005404:	fab2 f282 	clz	r2, r2
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	f042 0220 	orr.w	r2, r2, #32
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	f002 021f 	and.w	r2, r2, #31
 8005414:	2101      	movs	r1, #1
 8005416:	fa01 f202 	lsl.w	r2, r1, r2
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d13a      	bne.n	8005496 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0b2      	b.n	800558a <HAL_RCC_ClockConfig+0x2de>
 8005424:	2302      	movs	r3, #2
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005432:	fab3 f383 	clz	r3, r3
 8005436:	b2db      	uxtb	r3, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b01      	cmp	r3, #1
 8005444:	d102      	bne.n	800544c <HAL_RCC_ClockConfig+0x1a0>
 8005446:	4b31      	ldr	r3, [pc, #196]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	e00d      	b.n	8005468 <HAL_RCC_ClockConfig+0x1bc>
 800544c:	2302      	movs	r3, #2
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	fa93 f3a3 	rbit	r3, r3
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
 8005458:	2302      	movs	r3, #2
 800545a:	623b      	str	r3, [r7, #32]
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	fa93 f3a3 	rbit	r3, r3
 8005462:	61fb      	str	r3, [r7, #28]
 8005464:	4b29      	ldr	r3, [pc, #164]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	2202      	movs	r2, #2
 800546a:	61ba      	str	r2, [r7, #24]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	fa92 f2a2 	rbit	r2, r2
 8005472:	617a      	str	r2, [r7, #20]
  return result;
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	fab2 f282 	clz	r2, r2
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	f042 0220 	orr.w	r2, r2, #32
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	f002 021f 	and.w	r2, r2, #31
 8005486:	2101      	movs	r1, #1
 8005488:	fa01 f202 	lsl.w	r2, r1, r2
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e079      	b.n	800558a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005496:	4b1d      	ldr	r3, [pc, #116]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f023 0203 	bic.w	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	491a      	ldr	r1, [pc, #104]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054a8:	f7fd fb12 	bl	8002ad0 <HAL_GetTick>
 80054ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ae:	e00a      	b.n	80054c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b0:	f7fd fb0e 	bl	8002ad0 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e061      	b.n	800558a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <HAL_RCC_ClockConfig+0x260>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 020c 	and.w	r2, r3, #12
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d1eb      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_ClockConfig+0x25c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d214      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e6:	4b08      	ldr	r3, [pc, #32]	; (8005508 <HAL_RCC_ClockConfig+0x25c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 0207 	bic.w	r2, r3, #7
 80054ee:	4906      	ldr	r1, [pc, #24]	; (8005508 <HAL_RCC_ClockConfig+0x25c>)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b04      	ldr	r3, [pc, #16]	; (8005508 <HAL_RCC_ClockConfig+0x25c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d005      	beq.n	8005510 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e040      	b.n	800558a <HAL_RCC_ClockConfig+0x2de>
 8005508:	40022000 	.word	0x40022000
 800550c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <HAL_RCC_ClockConfig+0x2e8>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	491a      	ldr	r1, [pc, #104]	; (8005594 <HAL_RCC_ClockConfig+0x2e8>)
 800552a:	4313      	orrs	r3, r2
 800552c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800553a:	4b16      	ldr	r3, [pc, #88]	; (8005594 <HAL_RCC_ClockConfig+0x2e8>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4912      	ldr	r1, [pc, #72]	; (8005594 <HAL_RCC_ClockConfig+0x2e8>)
 800554a:	4313      	orrs	r3, r2
 800554c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800554e:	f000 f829 	bl	80055a4 <HAL_RCC_GetSysClockFreq>
 8005552:	4601      	mov	r1, r0
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <HAL_RCC_ClockConfig+0x2e8>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800555c:	22f0      	movs	r2, #240	; 0xf0
 800555e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	fa92 f2a2 	rbit	r2, r2
 8005566:	60fa      	str	r2, [r7, #12]
  return result;
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	fab2 f282 	clz	r2, r2
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	40d3      	lsrs	r3, r2
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <HAL_RCC_ClockConfig+0x2ec>)
 8005574:	5cd3      	ldrb	r3, [r2, r3]
 8005576:	fa21 f303 	lsr.w	r3, r1, r3
 800557a:	4a08      	ldr	r2, [pc, #32]	; (800559c <HAL_RCC_ClockConfig+0x2f0>)
 800557c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800557e:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <HAL_RCC_ClockConfig+0x2f4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fd fa60 	bl	8002a48 <HAL_InitTick>
  
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3778      	adds	r7, #120	; 0x78
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40021000 	.word	0x40021000
 8005598:	0800861c 	.word	0x0800861c
 800559c:	20000054 	.word	0x20000054
 80055a0:	20000058 	.word	0x20000058

080055a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b08b      	sub	sp, #44	; 0x2c
 80055a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	2300      	movs	r3, #0
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80055be:	4b29      	ldr	r3, [pc, #164]	; (8005664 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f003 030c 	and.w	r3, r3, #12
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d002      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x30>
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d003      	beq.n	80055da <HAL_RCC_GetSysClockFreq+0x36>
 80055d2:	e03c      	b.n	800564e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055d4:	4b24      	ldr	r3, [pc, #144]	; (8005668 <HAL_RCC_GetSysClockFreq+0xc4>)
 80055d6:	623b      	str	r3, [r7, #32]
      break;
 80055d8:	e03c      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80055e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80055e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	fa92 f2a2 	rbit	r2, r2
 80055ec:	607a      	str	r2, [r7, #4]
  return result;
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	fab2 f282 	clz	r2, r2
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	40d3      	lsrs	r3, r2
 80055f8:	4a1c      	ldr	r2, [pc, #112]	; (800566c <HAL_RCC_GetSysClockFreq+0xc8>)
 80055fa:	5cd3      	ldrb	r3, [r2, r3]
 80055fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80055fe:	4b19      	ldr	r3, [pc, #100]	; (8005664 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	220f      	movs	r2, #15
 8005608:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	fa92 f2a2 	rbit	r2, r2
 8005610:	60fa      	str	r2, [r7, #12]
  return result;
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	fab2 f282 	clz	r2, r2
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	40d3      	lsrs	r3, r2
 800561c:	4a14      	ldr	r2, [pc, #80]	; (8005670 <HAL_RCC_GetSysClockFreq+0xcc>)
 800561e:	5cd3      	ldrb	r3, [r2, r3]
 8005620:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800562c:	4a0e      	ldr	r2, [pc, #56]	; (8005668 <HAL_RCC_GetSysClockFreq+0xc4>)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	fbb2 f2f3 	udiv	r2, r2, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
 800563c:	e004      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	4a0c      	ldr	r2, [pc, #48]	; (8005674 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	623b      	str	r3, [r7, #32]
      break;
 800564c:	e002      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005650:	623b      	str	r3, [r7, #32]
      break;
 8005652:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005654:	6a3b      	ldr	r3, [r7, #32]
}
 8005656:	4618      	mov	r0, r3
 8005658:	372c      	adds	r7, #44	; 0x2c
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000
 8005668:	007a1200 	.word	0x007a1200
 800566c:	0800862c 	.word	0x0800862c
 8005670:	0800863c 	.word	0x0800863c
 8005674:	003d0900 	.word	0x003d0900

08005678 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b092      	sub	sp, #72	; 0x48
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005688:	2300      	movs	r3, #0
 800568a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80cd 	beq.w	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800569c:	4b86      	ldr	r3, [pc, #536]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10e      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a8:	4b83      	ldr	r3, [pc, #524]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	4a82      	ldr	r2, [pc, #520]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b2:	61d3      	str	r3, [r2, #28]
 80056b4:	4b80      	ldr	r3, [pc, #512]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c6:	4b7d      	ldr	r3, [pc, #500]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d118      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056d2:	4b7a      	ldr	r3, [pc, #488]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a79      	ldr	r2, [pc, #484]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80056d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056de:	f7fd f9f7 	bl	8002ad0 <HAL_GetTick>
 80056e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e4:	e008      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e6:	f7fd f9f3 	bl	8002ad0 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b64      	cmp	r3, #100	; 0x64
 80056f2:	d901      	bls.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e0db      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f8:	4b70      	ldr	r3, [pc, #448]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0f0      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005704:	4b6c      	ldr	r3, [pc, #432]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d07d      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800571e:	429a      	cmp	r2, r3
 8005720:	d076      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005722:	4b65      	ldr	r3, [pc, #404]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800572c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005730:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	fa93 f3a3 	rbit	r3, r3
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800573c:	fab3 f383 	clz	r3, r3
 8005740:	b2db      	uxtb	r3, r3
 8005742:	461a      	mov	r2, r3
 8005744:	4b5e      	ldr	r3, [pc, #376]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	461a      	mov	r2, r3
 800574c:	2301      	movs	r3, #1
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	fa93 f3a3 	rbit	r3, r3
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005760:	fab3 f383 	clz	r3, r3
 8005764:	b2db      	uxtb	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	461a      	mov	r2, r3
 8005770:	2300      	movs	r3, #0
 8005772:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005774:	4a50      	ldr	r2, [pc, #320]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005778:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d045      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fd f9a4 	bl	8002ad0 <HAL_GetTick>
 8005788:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578a:	e00a      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578c:	f7fd f9a0 	bl	8002ad0 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f241 3288 	movw	r2, #5000	; 0x1388
 800579a:	4293      	cmp	r3, r2
 800579c:	d901      	bls.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e086      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80057a2:	2302      	movs	r3, #2
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	fa93 f3a3 	rbit	r3, r3
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
 80057ae:	2302      	movs	r3, #2
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	fa93 f3a3 	rbit	r3, r3
 80057b8:	61fb      	str	r3, [r7, #28]
  return result;
 80057ba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057bc:	fab3 f383 	clz	r3, r3
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f043 0302 	orr.w	r3, r3, #2
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d102      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80057d0:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	e007      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80057d6:	2302      	movs	r3, #2
 80057d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	fa93 f3a3 	rbit	r3, r3
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	4b35      	ldr	r3, [pc, #212]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2202      	movs	r2, #2
 80057e8:	613a      	str	r2, [r7, #16]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	fa92 f2a2 	rbit	r2, r2
 80057f0:	60fa      	str	r2, [r7, #12]
  return result;
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	fab2 f282 	clz	r2, r2
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	f002 021f 	and.w	r2, r2, #31
 8005804:	2101      	movs	r1, #1
 8005806:	fa01 f202 	lsl.w	r2, r1, r2
 800580a:	4013      	ands	r3, r2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0bd      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005810:	4b29      	ldr	r3, [pc, #164]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4926      	ldr	r1, [pc, #152]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800581e:	4313      	orrs	r3, r2
 8005820:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005822:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005826:	2b01      	cmp	r3, #1
 8005828:	d105      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800582a:	4b23      	ldr	r3, [pc, #140]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4a22      	ldr	r2, [pc, #136]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005834:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005842:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f023 0203 	bic.w	r2, r3, #3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	491a      	ldr	r1, [pc, #104]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005850:	4313      	orrs	r3, r2
 8005852:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005860:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	f023 0210 	bic.w	r2, r3, #16
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4912      	ldr	r1, [pc, #72]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800586e:	4313      	orrs	r3, r2
 8005870:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587a:	2b00      	cmp	r3, #0
 800587c:	d008      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800587e:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	490b      	ldr	r1, [pc, #44]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800588c:	4313      	orrs	r3, r2
 800588e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d008      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	4903      	ldr	r1, [pc, #12]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3748      	adds	r7, #72	; 0x48
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40007000 	.word	0x40007000
 80058c0:	10908100 	.word	0x10908100

080058c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e095      	b.n	8005a02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d108      	bne.n	80058f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e6:	d009      	beq.n	80058fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	61da      	str	r2, [r3, #28]
 80058ee:	e005      	b.n	80058fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fc fed6 	bl	80026c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005932:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800593c:	d902      	bls.n	8005944 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e002      	b.n	800594a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005948:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005952:	d007      	beq.n	8005964 <HAL_SPI_Init+0xa0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800595c:	d002      	beq.n	8005964 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	ea42 0103 	orr.w	r1, r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	0c1b      	lsrs	r3, r3, #16
 80059c0:	f003 0204 	and.w	r2, r3, #4
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059e0:	ea42 0103 	orr.w	r1, r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b088      	sub	sp, #32
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	4613      	mov	r3, r2
 8005a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_SPI_Transmit+0x22>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e158      	b.n	8005cde <HAL_SPI_Transmit+0x2d4>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a34:	f7fd f84c 	bl	8002ad0 <HAL_GetTick>
 8005a38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d002      	beq.n	8005a50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a4e:	e13d      	b.n	8005ccc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_SPI_Transmit+0x52>
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a60:	e134      	b.n	8005ccc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2203      	movs	r2, #3
 8005a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aac:	d10f      	bne.n	8005ace <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005acc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d007      	beq.n	8005aec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005af4:	d94b      	bls.n	8005b8e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_SPI_Transmit+0xfa>
 8005afe:	8afb      	ldrh	r3, [r7, #22]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d13e      	bne.n	8005b82 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	881a      	ldrh	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b28:	e02b      	b.n	8005b82 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d112      	bne.n	8005b5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3c:	881a      	ldrh	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	1c9a      	adds	r2, r3, #2
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b5c:	e011      	b.n	8005b82 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b5e:	f7fc ffb7 	bl	8002ad0 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d803      	bhi.n	8005b76 <HAL_SPI_Transmit+0x16c>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d102      	bne.n	8005b7c <HAL_SPI_Transmit+0x172>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b80:	e0a4      	b.n	8005ccc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1ce      	bne.n	8005b2a <HAL_SPI_Transmit+0x120>
 8005b8c:	e07c      	b.n	8005c88 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_SPI_Transmit+0x192>
 8005b96:	8afb      	ldrh	r3, [r7, #22]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d170      	bne.n	8005c7e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d912      	bls.n	8005bcc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	881a      	ldrh	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	1c9a      	adds	r2, r3, #2
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b02      	subs	r3, #2
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bca:	e058      	b.n	8005c7e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	7812      	ldrb	r2, [r2, #0]
 8005bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005bf2:	e044      	b.n	8005c7e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d12b      	bne.n	8005c5a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d912      	bls.n	8005c32 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	881a      	ldrh	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	1c9a      	adds	r2, r3, #2
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b02      	subs	r3, #2
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c30:	e025      	b.n	8005c7e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	7812      	ldrb	r2, [r2, #0]
 8005c3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c58:	e011      	b.n	8005c7e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c5a:	f7fc ff39 	bl	8002ad0 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d803      	bhi.n	8005c72 <HAL_SPI_Transmit+0x268>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d102      	bne.n	8005c78 <HAL_SPI_Transmit+0x26e>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c7c:	e026      	b.n	8005ccc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1b5      	bne.n	8005bf4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f949 	bl	8005f24 <SPI_EndRxTxTransaction>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	e000      	b.n	8005ccc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005cca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cf8:	f7fc feea 	bl	8002ad0 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	4413      	add	r3, r2
 8005d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d08:	f7fc fee2 	bl	8002ad0 <HAL_GetTick>
 8005d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d0e:	4b39      	ldr	r3, [pc, #228]	; (8005df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	015b      	lsls	r3, r3, #5
 8005d14:	0d1b      	lsrs	r3, r3, #20
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	fb02 f303 	mul.w	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d1e:	e054      	b.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d050      	beq.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d28:	f7fc fed2 	bl	8002ad0 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d902      	bls.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d13d      	bne.n	8005dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d56:	d111      	bne.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d60:	d004      	beq.n	8005d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6a:	d107      	bne.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d84:	d10f      	bne.n	8005da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e017      	b.n	8005dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d19b      	bne.n	8005d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000054 	.word	0x20000054

08005df8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	; 0x28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e0a:	f7fc fe61 	bl	8002ad0 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	4413      	add	r3, r2
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005e1a:	f7fc fe59 	bl	8002ad0 <HAL_GetTick>
 8005e1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	330c      	adds	r3, #12
 8005e26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e28:	4b3d      	ldr	r3, [pc, #244]	; (8005f20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	00da      	lsls	r2, r3, #3
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	0d1b      	lsrs	r3, r3, #20
 8005e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e40:	e060      	b.n	8005f04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e48:	d107      	bne.n	8005e5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d104      	bne.n	8005e5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d050      	beq.n	8005f04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e62:	f7fc fe35 	bl	8002ad0 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d902      	bls.n	8005e78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d13d      	bne.n	8005ef4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e90:	d111      	bne.n	8005eb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9a:	d004      	beq.n	8005ea6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea4:	d107      	bne.n	8005eb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebe:	d10f      	bne.n	8005ee0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ede:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e010      	b.n	8005f16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d196      	bne.n	8005e42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3728      	adds	r7, #40	; 0x28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000054 	.word	0x20000054

08005f24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff ff5b 	bl	8005df8 <SPI_WaitFifoStateUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4c:	f043 0220 	orr.w	r2, r3, #32
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e027      	b.n	8005fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2180      	movs	r1, #128	; 0x80
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff fec0 	bl	8005ce8 <SPI_WaitFlagStateUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d007      	beq.n	8005f7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e014      	b.n	8005fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff ff34 	bl	8005df8 <SPI_WaitFifoStateUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9a:	f043 0220 	orr.w	r2, r3, #32
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e000      	b.n	8005fa8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e049      	b.n	8006056 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fc fbd6 	bl	8002788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f000 f94a 	bl	8006288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006076:	2b01      	cmp	r3, #1
 8006078:	d101      	bne.n	800607e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800607a:	2302      	movs	r3, #2
 800607c:	e0ff      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b14      	cmp	r3, #20
 800608a:	f200 80f0 	bhi.w	800626e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060e9 	.word	0x080060e9
 8006098:	0800626f 	.word	0x0800626f
 800609c:	0800626f 	.word	0x0800626f
 80060a0:	0800626f 	.word	0x0800626f
 80060a4:	08006129 	.word	0x08006129
 80060a8:	0800626f 	.word	0x0800626f
 80060ac:	0800626f 	.word	0x0800626f
 80060b0:	0800626f 	.word	0x0800626f
 80060b4:	0800616b 	.word	0x0800616b
 80060b8:	0800626f 	.word	0x0800626f
 80060bc:	0800626f 	.word	0x0800626f
 80060c0:	0800626f 	.word	0x0800626f
 80060c4:	080061ab 	.word	0x080061ab
 80060c8:	0800626f 	.word	0x0800626f
 80060cc:	0800626f 	.word	0x0800626f
 80060d0:	0800626f 	.word	0x0800626f
 80060d4:	080061ed 	.word	0x080061ed
 80060d8:	0800626f 	.word	0x0800626f
 80060dc:	0800626f 	.word	0x0800626f
 80060e0:	0800626f 	.word	0x0800626f
 80060e4:	0800622d 	.word	0x0800622d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 f942 	bl	8006378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0208 	orr.w	r2, r2, #8
 8006102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0204 	bic.w	r2, r2, #4
 8006112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6999      	ldr	r1, [r3, #24]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	619a      	str	r2, [r3, #24]
      break;
 8006126:	e0a5      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f9a8 	bl	8006484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6999      	ldr	r1, [r3, #24]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	021a      	lsls	r2, r3, #8
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	619a      	str	r2, [r3, #24]
      break;
 8006168:	e084      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fa07 	bl	8006584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0208 	orr.w	r2, r2, #8
 8006184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0204 	bic.w	r2, r2, #4
 8006194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69d9      	ldr	r1, [r3, #28]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	61da      	str	r2, [r3, #28]
      break;
 80061a8:	e064      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fa65 	bl	8006680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69d9      	ldr	r1, [r3, #28]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	021a      	lsls	r2, r3, #8
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	61da      	str	r2, [r3, #28]
      break;
 80061ea:	e043      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 faa8 	bl	8006748 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0208 	orr.w	r2, r2, #8
 8006206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0204 	bic.w	r2, r2, #4
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800622a:	e023      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fae6 	bl	8006804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006246:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006256:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	021a      	lsls	r2, r3, #8
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800626c:	e002      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
      break;
 8006272:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800627c:	7dfb      	ldrb	r3, [r7, #23]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a32      	ldr	r2, [pc, #200]	; (8006364 <TIM_Base_SetConfig+0xdc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d007      	beq.n	80062b0 <TIM_Base_SetConfig+0x28>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d003      	beq.n	80062b0 <TIM_Base_SetConfig+0x28>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <TIM_Base_SetConfig+0xe0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d108      	bne.n	80062c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a27      	ldr	r2, [pc, #156]	; (8006364 <TIM_Base_SetConfig+0xdc>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <TIM_Base_SetConfig+0x6a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d0:	d00f      	beq.n	80062f2 <TIM_Base_SetConfig+0x6a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a24      	ldr	r2, [pc, #144]	; (8006368 <TIM_Base_SetConfig+0xe0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00b      	beq.n	80062f2 <TIM_Base_SetConfig+0x6a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a23      	ldr	r2, [pc, #140]	; (800636c <TIM_Base_SetConfig+0xe4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d007      	beq.n	80062f2 <TIM_Base_SetConfig+0x6a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a22      	ldr	r2, [pc, #136]	; (8006370 <TIM_Base_SetConfig+0xe8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_Base_SetConfig+0x6a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a21      	ldr	r2, [pc, #132]	; (8006374 <TIM_Base_SetConfig+0xec>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d108      	bne.n	8006304 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a0e      	ldr	r2, [pc, #56]	; (8006364 <TIM_Base_SetConfig+0xdc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00b      	beq.n	8006348 <TIM_Base_SetConfig+0xc0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a0e      	ldr	r2, [pc, #56]	; (800636c <TIM_Base_SetConfig+0xe4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d007      	beq.n	8006348 <TIM_Base_SetConfig+0xc0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a0d      	ldr	r2, [pc, #52]	; (8006370 <TIM_Base_SetConfig+0xe8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_Base_SetConfig+0xc0>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a0c      	ldr	r2, [pc, #48]	; (8006374 <TIM_Base_SetConfig+0xec>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d103      	bne.n	8006350 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	615a      	str	r2, [r3, #20]
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40000400 	.word	0x40000400
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800

08006378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f023 0201 	bic.w	r2, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f023 0302 	bic.w	r3, r3, #2
 80063c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a28      	ldr	r2, [pc, #160]	; (8006474 <TIM_OC1_SetConfig+0xfc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00b      	beq.n	80063f0 <TIM_OC1_SetConfig+0x78>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a27      	ldr	r2, [pc, #156]	; (8006478 <TIM_OC1_SetConfig+0x100>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d007      	beq.n	80063f0 <TIM_OC1_SetConfig+0x78>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a26      	ldr	r2, [pc, #152]	; (800647c <TIM_OC1_SetConfig+0x104>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_OC1_SetConfig+0x78>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a25      	ldr	r2, [pc, #148]	; (8006480 <TIM_OC1_SetConfig+0x108>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10c      	bne.n	800640a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0308 	bic.w	r3, r3, #8
 80063f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f023 0304 	bic.w	r3, r3, #4
 8006408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a19      	ldr	r2, [pc, #100]	; (8006474 <TIM_OC1_SetConfig+0xfc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_OC1_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a18      	ldr	r2, [pc, #96]	; (8006478 <TIM_OC1_SetConfig+0x100>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_OC1_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a17      	ldr	r2, [pc, #92]	; (800647c <TIM_OC1_SetConfig+0x104>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_OC1_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a16      	ldr	r2, [pc, #88]	; (8006480 <TIM_OC1_SetConfig+0x108>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d111      	bne.n	800644e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	621a      	str	r2, [r3, #32]
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40014000 	.word	0x40014000
 800647c:	40014400 	.word	0x40014400
 8006480:	40014800 	.word	0x40014800

08006484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f023 0210 	bic.w	r2, r3, #16
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0320 	bic.w	r3, r3, #32
 80064d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a24      	ldr	r2, [pc, #144]	; (8006574 <TIM_OC2_SetConfig+0xf0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10d      	bne.n	8006504 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <TIM_OC2_SetConfig+0xf0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00b      	beq.n	8006524 <TIM_OC2_SetConfig+0xa0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a1a      	ldr	r2, [pc, #104]	; (8006578 <TIM_OC2_SetConfig+0xf4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_OC2_SetConfig+0xa0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a19      	ldr	r2, [pc, #100]	; (800657c <TIM_OC2_SetConfig+0xf8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_OC2_SetConfig+0xa0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a18      	ldr	r2, [pc, #96]	; (8006580 <TIM_OC2_SetConfig+0xfc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d113      	bne.n	800654c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800652a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006532:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	621a      	str	r2, [r3, #32]
}
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800

08006584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a23      	ldr	r2, [pc, #140]	; (8006670 <TIM_OC3_SetConfig+0xec>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d10d      	bne.n	8006602 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006600:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <TIM_OC3_SetConfig+0xec>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00b      	beq.n	8006622 <TIM_OC3_SetConfig+0x9e>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a19      	ldr	r2, [pc, #100]	; (8006674 <TIM_OC3_SetConfig+0xf0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <TIM_OC3_SetConfig+0x9e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a18      	ldr	r2, [pc, #96]	; (8006678 <TIM_OC3_SetConfig+0xf4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_OC3_SetConfig+0x9e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a17      	ldr	r2, [pc, #92]	; (800667c <TIM_OC3_SetConfig+0xf8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d113      	bne.n	800664a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40014000 	.word	0x40014000
 8006678:	40014400 	.word	0x40014400
 800667c:	40014800 	.word	0x40014800

08006680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	031b      	lsls	r3, r3, #12
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a16      	ldr	r2, [pc, #88]	; (8006738 <TIM_OC4_SetConfig+0xb8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00b      	beq.n	80066fc <TIM_OC4_SetConfig+0x7c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a15      	ldr	r2, [pc, #84]	; (800673c <TIM_OC4_SetConfig+0xbc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d007      	beq.n	80066fc <TIM_OC4_SetConfig+0x7c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a14      	ldr	r2, [pc, #80]	; (8006740 <TIM_OC4_SetConfig+0xc0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_OC4_SetConfig+0x7c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a13      	ldr	r2, [pc, #76]	; (8006744 <TIM_OC4_SetConfig+0xc4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d109      	bne.n	8006710 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	019b      	lsls	r3, r3, #6
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40014000 	.word	0x40014000
 8006740:	40014400 	.word	0x40014400
 8006744:	40014800 	.word	0x40014800

08006748 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800678c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	041b      	lsls	r3, r3, #16
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <TIM_OC5_SetConfig+0xac>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00b      	beq.n	80067ba <TIM_OC5_SetConfig+0x72>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <TIM_OC5_SetConfig+0xb0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d007      	beq.n	80067ba <TIM_OC5_SetConfig+0x72>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a13      	ldr	r2, [pc, #76]	; (80067fc <TIM_OC5_SetConfig+0xb4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_OC5_SetConfig+0x72>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a12      	ldr	r2, [pc, #72]	; (8006800 <TIM_OC5_SetConfig+0xb8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d109      	bne.n	80067ce <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800684a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	051b      	lsls	r3, r3, #20
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a16      	ldr	r2, [pc, #88]	; (80068b4 <TIM_OC6_SetConfig+0xb0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00b      	beq.n	8006878 <TIM_OC6_SetConfig+0x74>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <TIM_OC6_SetConfig+0xb4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_OC6_SetConfig+0x74>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a14      	ldr	r2, [pc, #80]	; (80068bc <TIM_OC6_SetConfig+0xb8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_OC6_SetConfig+0x74>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a13      	ldr	r2, [pc, #76]	; (80068c0 <TIM_OC6_SetConfig+0xbc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d109      	bne.n	800688c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	029b      	lsls	r3, r3, #10
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40014400 	.word	0x40014400
 80068c0:	40014800 	.word	0x40014800

080068c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d8:	2302      	movs	r3, #2
 80068da:	e054      	b.n	8006986 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a24      	ldr	r2, [pc, #144]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d108      	bne.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800690c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a17      	ldr	r2, [pc, #92]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00e      	beq.n	800695a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006944:	d009      	beq.n	800695a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a13      	ldr	r2, [pc, #76]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a11      	ldr	r2, [pc, #68]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d10c      	bne.n	8006974 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	4313      	orrs	r3, r2
 800696a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40000400 	.word	0x40000400
 800699c:	40014000 	.word	0x40014000

080069a0 <__errno>:
 80069a0:	4b01      	ldr	r3, [pc, #4]	; (80069a8 <__errno+0x8>)
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20000060 	.word	0x20000060

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	4d0d      	ldr	r5, [pc, #52]	; (80069e4 <__libc_init_array+0x38>)
 80069b0:	4c0d      	ldr	r4, [pc, #52]	; (80069e8 <__libc_init_array+0x3c>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	2600      	movs	r6, #0
 80069b8:	42a6      	cmp	r6, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	4d0b      	ldr	r5, [pc, #44]	; (80069ec <__libc_init_array+0x40>)
 80069be:	4c0c      	ldr	r4, [pc, #48]	; (80069f0 <__libc_init_array+0x44>)
 80069c0:	f001 fa96 	bl	8007ef0 <_init>
 80069c4:	1b64      	subs	r4, r4, r5
 80069c6:	10a4      	asrs	r4, r4, #2
 80069c8:	2600      	movs	r6, #0
 80069ca:	42a6      	cmp	r6, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d4:	4798      	blx	r3
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	f855 3b04 	ldr.w	r3, [r5], #4
 80069de:	4798      	blx	r3
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	08008794 	.word	0x08008794
 80069e8:	08008794 	.word	0x08008794
 80069ec:	08008794 	.word	0x08008794
 80069f0:	08008798 	.word	0x08008798

080069f4 <memcpy>:
 80069f4:	440a      	add	r2, r1
 80069f6:	4291      	cmp	r1, r2
 80069f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069fc:	d100      	bne.n	8006a00 <memcpy+0xc>
 80069fe:	4770      	bx	lr
 8006a00:	b510      	push	{r4, lr}
 8006a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	d1f9      	bne.n	8006a02 <memcpy+0xe>
 8006a0e:	bd10      	pop	{r4, pc}

08006a10 <memset>:
 8006a10:	4402      	add	r2, r0
 8006a12:	4603      	mov	r3, r0
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d100      	bne.n	8006a1a <memset+0xa>
 8006a18:	4770      	bx	lr
 8006a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1e:	e7f9      	b.n	8006a14 <memset+0x4>

08006a20 <srand>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <srand+0x44>)
 8006a24:	681d      	ldr	r5, [r3, #0]
 8006a26:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006a28:	4604      	mov	r4, r0
 8006a2a:	b9b3      	cbnz	r3, 8006a5a <srand+0x3a>
 8006a2c:	2018      	movs	r0, #24
 8006a2e:	f000 f8df 	bl	8006bf0 <malloc>
 8006a32:	4602      	mov	r2, r0
 8006a34:	63a8      	str	r0, [r5, #56]	; 0x38
 8006a36:	b920      	cbnz	r0, 8006a42 <srand+0x22>
 8006a38:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <srand+0x48>)
 8006a3a:	480c      	ldr	r0, [pc, #48]	; (8006a6c <srand+0x4c>)
 8006a3c:	2142      	movs	r1, #66	; 0x42
 8006a3e:	f000 f895 	bl	8006b6c <__assert_func>
 8006a42:	490b      	ldr	r1, [pc, #44]	; (8006a70 <srand+0x50>)
 8006a44:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <srand+0x54>)
 8006a46:	e9c0 1300 	strd	r1, r3, [r0]
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <srand+0x58>)
 8006a4c:	6083      	str	r3, [r0, #8]
 8006a4e:	230b      	movs	r3, #11
 8006a50:	8183      	strh	r3, [r0, #12]
 8006a52:	2100      	movs	r1, #0
 8006a54:	2001      	movs	r0, #1
 8006a56:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006a5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	611c      	str	r4, [r3, #16]
 8006a60:	615a      	str	r2, [r3, #20]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	20000060 	.word	0x20000060
 8006a68:	08008650 	.word	0x08008650
 8006a6c:	08008667 	.word	0x08008667
 8006a70:	abcd330e 	.word	0xabcd330e
 8006a74:	e66d1234 	.word	0xe66d1234
 8006a78:	0005deec 	.word	0x0005deec

08006a7c <rand>:
 8006a7c:	4b16      	ldr	r3, [pc, #88]	; (8006ad8 <rand+0x5c>)
 8006a7e:	b510      	push	{r4, lr}
 8006a80:	681c      	ldr	r4, [r3, #0]
 8006a82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a84:	b9b3      	cbnz	r3, 8006ab4 <rand+0x38>
 8006a86:	2018      	movs	r0, #24
 8006a88:	f000 f8b2 	bl	8006bf0 <malloc>
 8006a8c:	63a0      	str	r0, [r4, #56]	; 0x38
 8006a8e:	b928      	cbnz	r0, 8006a9c <rand+0x20>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b12      	ldr	r3, [pc, #72]	; (8006adc <rand+0x60>)
 8006a94:	4812      	ldr	r0, [pc, #72]	; (8006ae0 <rand+0x64>)
 8006a96:	214e      	movs	r1, #78	; 0x4e
 8006a98:	f000 f868 	bl	8006b6c <__assert_func>
 8006a9c:	4a11      	ldr	r2, [pc, #68]	; (8006ae4 <rand+0x68>)
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <rand+0x6c>)
 8006aa0:	e9c0 2300 	strd	r2, r3, [r0]
 8006aa4:	4b11      	ldr	r3, [pc, #68]	; (8006aec <rand+0x70>)
 8006aa6:	6083      	str	r3, [r0, #8]
 8006aa8:	230b      	movs	r3, #11
 8006aaa:	8183      	strh	r3, [r0, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006ab4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006ab6:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <rand+0x74>)
 8006ab8:	6920      	ldr	r0, [r4, #16]
 8006aba:	6963      	ldr	r3, [r4, #20]
 8006abc:	490d      	ldr	r1, [pc, #52]	; (8006af4 <rand+0x78>)
 8006abe:	4342      	muls	r2, r0
 8006ac0:	fb01 2203 	mla	r2, r1, r3, r2
 8006ac4:	fba0 0101 	umull	r0, r1, r0, r1
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	eb42 0001 	adc.w	r0, r2, r1
 8006ace:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006ad2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006ad6:	bd10      	pop	{r4, pc}
 8006ad8:	20000060 	.word	0x20000060
 8006adc:	08008650 	.word	0x08008650
 8006ae0:	08008667 	.word	0x08008667
 8006ae4:	abcd330e 	.word	0xabcd330e
 8006ae8:	e66d1234 	.word	0xe66d1234
 8006aec:	0005deec 	.word	0x0005deec
 8006af0:	5851f42d 	.word	0x5851f42d
 8006af4:	4c957f2d 	.word	0x4c957f2d

08006af8 <siprintf>:
 8006af8:	b40e      	push	{r1, r2, r3}
 8006afa:	b500      	push	{lr}
 8006afc:	b09c      	sub	sp, #112	; 0x70
 8006afe:	ab1d      	add	r3, sp, #116	; 0x74
 8006b00:	9002      	str	r0, [sp, #8]
 8006b02:	9006      	str	r0, [sp, #24]
 8006b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b08:	4809      	ldr	r0, [pc, #36]	; (8006b30 <siprintf+0x38>)
 8006b0a:	9107      	str	r1, [sp, #28]
 8006b0c:	9104      	str	r1, [sp, #16]
 8006b0e:	4909      	ldr	r1, [pc, #36]	; (8006b34 <siprintf+0x3c>)
 8006b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b14:	9105      	str	r1, [sp, #20]
 8006b16:	6800      	ldr	r0, [r0, #0]
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	a902      	add	r1, sp, #8
 8006b1c:	f000 f9ac 	bl	8006e78 <_svfiprintf_r>
 8006b20:	9b02      	ldr	r3, [sp, #8]
 8006b22:	2200      	movs	r2, #0
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	b01c      	add	sp, #112	; 0x70
 8006b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b2c:	b003      	add	sp, #12
 8006b2e:	4770      	bx	lr
 8006b30:	20000060 	.word	0x20000060
 8006b34:	ffff0208 	.word	0xffff0208

08006b38 <time>:
 8006b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <time+0x30>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4669      	mov	r1, sp
 8006b40:	4604      	mov	r4, r0
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	f000 f842 	bl	8006bcc <_gettimeofday_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	bfbe      	ittt	lt
 8006b4c:	f04f 32ff 	movlt.w	r2, #4294967295
 8006b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b54:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b5c:	b10c      	cbz	r4, 8006b62 <time+0x2a>
 8006b5e:	e9c4 0100 	strd	r0, r1, [r4]
 8006b62:	b004      	add	sp, #16
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	bf00      	nop
 8006b68:	20000060 	.word	0x20000060

08006b6c <__assert_func>:
 8006b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b6e:	4614      	mov	r4, r2
 8006b70:	461a      	mov	r2, r3
 8006b72:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <__assert_func+0x2c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4605      	mov	r5, r0
 8006b78:	68d8      	ldr	r0, [r3, #12]
 8006b7a:	b14c      	cbz	r4, 8006b90 <__assert_func+0x24>
 8006b7c:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <__assert_func+0x30>)
 8006b7e:	9100      	str	r1, [sp, #0]
 8006b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b84:	4906      	ldr	r1, [pc, #24]	; (8006ba0 <__assert_func+0x34>)
 8006b86:	462b      	mov	r3, r5
 8006b88:	f000 f80e 	bl	8006ba8 <fiprintf>
 8006b8c:	f000 fe32 	bl	80077f4 <abort>
 8006b90:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <__assert_func+0x38>)
 8006b92:	461c      	mov	r4, r3
 8006b94:	e7f3      	b.n	8006b7e <__assert_func+0x12>
 8006b96:	bf00      	nop
 8006b98:	20000060 	.word	0x20000060
 8006b9c:	080086c2 	.word	0x080086c2
 8006ba0:	080086cf 	.word	0x080086cf
 8006ba4:	080086fd 	.word	0x080086fd

08006ba8 <fiprintf>:
 8006ba8:	b40e      	push	{r1, r2, r3}
 8006baa:	b503      	push	{r0, r1, lr}
 8006bac:	4601      	mov	r1, r0
 8006bae:	ab03      	add	r3, sp, #12
 8006bb0:	4805      	ldr	r0, [pc, #20]	; (8006bc8 <fiprintf+0x20>)
 8006bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb6:	6800      	ldr	r0, [r0, #0]
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	f000 fa87 	bl	80070cc <_vfiprintf_r>
 8006bbe:	b002      	add	sp, #8
 8006bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc4:	b003      	add	sp, #12
 8006bc6:	4770      	bx	lr
 8006bc8:	20000060 	.word	0x20000060

08006bcc <_gettimeofday_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4d07      	ldr	r5, [pc, #28]	; (8006bec <_gettimeofday_r+0x20>)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	f001 f981 	bl	8007ee0 <_gettimeofday>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d102      	bne.n	8006be8 <_gettimeofday_r+0x1c>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	b103      	cbz	r3, 8006be8 <_gettimeofday_r+0x1c>
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	bd38      	pop	{r3, r4, r5, pc}
 8006bea:	bf00      	nop
 8006bec:	20000918 	.word	0x20000918

08006bf0 <malloc>:
 8006bf0:	4b02      	ldr	r3, [pc, #8]	; (8006bfc <malloc+0xc>)
 8006bf2:	4601      	mov	r1, r0
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	f000 b86f 	b.w	8006cd8 <_malloc_r>
 8006bfa:	bf00      	nop
 8006bfc:	20000060 	.word	0x20000060

08006c00 <_free_r>:
 8006c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d044      	beq.n	8006c90 <_free_r+0x90>
 8006c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c0a:	9001      	str	r0, [sp, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c12:	bfb8      	it	lt
 8006c14:	18e4      	addlt	r4, r4, r3
 8006c16:	f001 f82f 	bl	8007c78 <__malloc_lock>
 8006c1a:	4a1e      	ldr	r2, [pc, #120]	; (8006c94 <_free_r+0x94>)
 8006c1c:	9801      	ldr	r0, [sp, #4]
 8006c1e:	6813      	ldr	r3, [r2, #0]
 8006c20:	b933      	cbnz	r3, 8006c30 <_free_r+0x30>
 8006c22:	6063      	str	r3, [r4, #4]
 8006c24:	6014      	str	r4, [r2, #0]
 8006c26:	b003      	add	sp, #12
 8006c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c2c:	f001 b82a 	b.w	8007c84 <__malloc_unlock>
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	d908      	bls.n	8006c46 <_free_r+0x46>
 8006c34:	6825      	ldr	r5, [r4, #0]
 8006c36:	1961      	adds	r1, r4, r5
 8006c38:	428b      	cmp	r3, r1
 8006c3a:	bf01      	itttt	eq
 8006c3c:	6819      	ldreq	r1, [r3, #0]
 8006c3e:	685b      	ldreq	r3, [r3, #4]
 8006c40:	1949      	addeq	r1, r1, r5
 8006c42:	6021      	streq	r1, [r4, #0]
 8006c44:	e7ed      	b.n	8006c22 <_free_r+0x22>
 8006c46:	461a      	mov	r2, r3
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	b10b      	cbz	r3, 8006c50 <_free_r+0x50>
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	d9fa      	bls.n	8006c46 <_free_r+0x46>
 8006c50:	6811      	ldr	r1, [r2, #0]
 8006c52:	1855      	adds	r5, r2, r1
 8006c54:	42a5      	cmp	r5, r4
 8006c56:	d10b      	bne.n	8006c70 <_free_r+0x70>
 8006c58:	6824      	ldr	r4, [r4, #0]
 8006c5a:	4421      	add	r1, r4
 8006c5c:	1854      	adds	r4, r2, r1
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	6011      	str	r1, [r2, #0]
 8006c62:	d1e0      	bne.n	8006c26 <_free_r+0x26>
 8006c64:	681c      	ldr	r4, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	6053      	str	r3, [r2, #4]
 8006c6a:	4421      	add	r1, r4
 8006c6c:	6011      	str	r1, [r2, #0]
 8006c6e:	e7da      	b.n	8006c26 <_free_r+0x26>
 8006c70:	d902      	bls.n	8006c78 <_free_r+0x78>
 8006c72:	230c      	movs	r3, #12
 8006c74:	6003      	str	r3, [r0, #0]
 8006c76:	e7d6      	b.n	8006c26 <_free_r+0x26>
 8006c78:	6825      	ldr	r5, [r4, #0]
 8006c7a:	1961      	adds	r1, r4, r5
 8006c7c:	428b      	cmp	r3, r1
 8006c7e:	bf04      	itt	eq
 8006c80:	6819      	ldreq	r1, [r3, #0]
 8006c82:	685b      	ldreq	r3, [r3, #4]
 8006c84:	6063      	str	r3, [r4, #4]
 8006c86:	bf04      	itt	eq
 8006c88:	1949      	addeq	r1, r1, r5
 8006c8a:	6021      	streq	r1, [r4, #0]
 8006c8c:	6054      	str	r4, [r2, #4]
 8006c8e:	e7ca      	b.n	8006c26 <_free_r+0x26>
 8006c90:	b003      	add	sp, #12
 8006c92:	bd30      	pop	{r4, r5, pc}
 8006c94:	20000910 	.word	0x20000910

08006c98 <sbrk_aligned>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4e0e      	ldr	r6, [pc, #56]	; (8006cd4 <sbrk_aligned+0x3c>)
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	6831      	ldr	r1, [r6, #0]
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	b911      	cbnz	r1, 8006caa <sbrk_aligned+0x12>
 8006ca4:	f000 fcd6 	bl	8007654 <_sbrk_r>
 8006ca8:	6030      	str	r0, [r6, #0]
 8006caa:	4621      	mov	r1, r4
 8006cac:	4628      	mov	r0, r5
 8006cae:	f000 fcd1 	bl	8007654 <_sbrk_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	d00a      	beq.n	8006ccc <sbrk_aligned+0x34>
 8006cb6:	1cc4      	adds	r4, r0, #3
 8006cb8:	f024 0403 	bic.w	r4, r4, #3
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d007      	beq.n	8006cd0 <sbrk_aligned+0x38>
 8006cc0:	1a21      	subs	r1, r4, r0
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 fcc6 	bl	8007654 <_sbrk_r>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d101      	bne.n	8006cd0 <sbrk_aligned+0x38>
 8006ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	20000914 	.word	0x20000914

08006cd8 <_malloc_r>:
 8006cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cdc:	1ccd      	adds	r5, r1, #3
 8006cde:	f025 0503 	bic.w	r5, r5, #3
 8006ce2:	3508      	adds	r5, #8
 8006ce4:	2d0c      	cmp	r5, #12
 8006ce6:	bf38      	it	cc
 8006ce8:	250c      	movcc	r5, #12
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	4607      	mov	r7, r0
 8006cee:	db01      	blt.n	8006cf4 <_malloc_r+0x1c>
 8006cf0:	42a9      	cmp	r1, r5
 8006cf2:	d905      	bls.n	8006d00 <_malloc_r+0x28>
 8006cf4:	230c      	movs	r3, #12
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d00:	4e2e      	ldr	r6, [pc, #184]	; (8006dbc <_malloc_r+0xe4>)
 8006d02:	f000 ffb9 	bl	8007c78 <__malloc_lock>
 8006d06:	6833      	ldr	r3, [r6, #0]
 8006d08:	461c      	mov	r4, r3
 8006d0a:	bb34      	cbnz	r4, 8006d5a <_malloc_r+0x82>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f7ff ffc2 	bl	8006c98 <sbrk_aligned>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	4604      	mov	r4, r0
 8006d18:	d14d      	bne.n	8006db6 <_malloc_r+0xde>
 8006d1a:	6834      	ldr	r4, [r6, #0]
 8006d1c:	4626      	mov	r6, r4
 8006d1e:	2e00      	cmp	r6, #0
 8006d20:	d140      	bne.n	8006da4 <_malloc_r+0xcc>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	4631      	mov	r1, r6
 8006d26:	4638      	mov	r0, r7
 8006d28:	eb04 0803 	add.w	r8, r4, r3
 8006d2c:	f000 fc92 	bl	8007654 <_sbrk_r>
 8006d30:	4580      	cmp	r8, r0
 8006d32:	d13a      	bne.n	8006daa <_malloc_r+0xd2>
 8006d34:	6821      	ldr	r1, [r4, #0]
 8006d36:	3503      	adds	r5, #3
 8006d38:	1a6d      	subs	r5, r5, r1
 8006d3a:	f025 0503 	bic.w	r5, r5, #3
 8006d3e:	3508      	adds	r5, #8
 8006d40:	2d0c      	cmp	r5, #12
 8006d42:	bf38      	it	cc
 8006d44:	250c      	movcc	r5, #12
 8006d46:	4629      	mov	r1, r5
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ffa5 	bl	8006c98 <sbrk_aligned>
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d02b      	beq.n	8006daa <_malloc_r+0xd2>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	442b      	add	r3, r5
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	e00e      	b.n	8006d78 <_malloc_r+0xa0>
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	1b52      	subs	r2, r2, r5
 8006d5e:	d41e      	bmi.n	8006d9e <_malloc_r+0xc6>
 8006d60:	2a0b      	cmp	r2, #11
 8006d62:	d916      	bls.n	8006d92 <_malloc_r+0xba>
 8006d64:	1961      	adds	r1, r4, r5
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	6025      	str	r5, [r4, #0]
 8006d6a:	bf18      	it	ne
 8006d6c:	6059      	strne	r1, [r3, #4]
 8006d6e:	6863      	ldr	r3, [r4, #4]
 8006d70:	bf08      	it	eq
 8006d72:	6031      	streq	r1, [r6, #0]
 8006d74:	5162      	str	r2, [r4, r5]
 8006d76:	604b      	str	r3, [r1, #4]
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f104 060b 	add.w	r6, r4, #11
 8006d7e:	f000 ff81 	bl	8007c84 <__malloc_unlock>
 8006d82:	f026 0607 	bic.w	r6, r6, #7
 8006d86:	1d23      	adds	r3, r4, #4
 8006d88:	1af2      	subs	r2, r6, r3
 8006d8a:	d0b6      	beq.n	8006cfa <_malloc_r+0x22>
 8006d8c:	1b9b      	subs	r3, r3, r6
 8006d8e:	50a3      	str	r3, [r4, r2]
 8006d90:	e7b3      	b.n	8006cfa <_malloc_r+0x22>
 8006d92:	6862      	ldr	r2, [r4, #4]
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	bf0c      	ite	eq
 8006d98:	6032      	streq	r2, [r6, #0]
 8006d9a:	605a      	strne	r2, [r3, #4]
 8006d9c:	e7ec      	b.n	8006d78 <_malloc_r+0xa0>
 8006d9e:	4623      	mov	r3, r4
 8006da0:	6864      	ldr	r4, [r4, #4]
 8006da2:	e7b2      	b.n	8006d0a <_malloc_r+0x32>
 8006da4:	4634      	mov	r4, r6
 8006da6:	6876      	ldr	r6, [r6, #4]
 8006da8:	e7b9      	b.n	8006d1e <_malloc_r+0x46>
 8006daa:	230c      	movs	r3, #12
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	4638      	mov	r0, r7
 8006db0:	f000 ff68 	bl	8007c84 <__malloc_unlock>
 8006db4:	e7a1      	b.n	8006cfa <_malloc_r+0x22>
 8006db6:	6025      	str	r5, [r4, #0]
 8006db8:	e7de      	b.n	8006d78 <_malloc_r+0xa0>
 8006dba:	bf00      	nop
 8006dbc:	20000910 	.word	0x20000910

08006dc0 <__ssputs_r>:
 8006dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc4:	688e      	ldr	r6, [r1, #8]
 8006dc6:	429e      	cmp	r6, r3
 8006dc8:	4682      	mov	sl, r0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	4690      	mov	r8, r2
 8006dce:	461f      	mov	r7, r3
 8006dd0:	d838      	bhi.n	8006e44 <__ssputs_r+0x84>
 8006dd2:	898a      	ldrh	r2, [r1, #12]
 8006dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dd8:	d032      	beq.n	8006e40 <__ssputs_r+0x80>
 8006dda:	6825      	ldr	r5, [r4, #0]
 8006ddc:	6909      	ldr	r1, [r1, #16]
 8006dde:	eba5 0901 	sub.w	r9, r5, r1
 8006de2:	6965      	ldr	r5, [r4, #20]
 8006de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006de8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dec:	3301      	adds	r3, #1
 8006dee:	444b      	add	r3, r9
 8006df0:	106d      	asrs	r5, r5, #1
 8006df2:	429d      	cmp	r5, r3
 8006df4:	bf38      	it	cc
 8006df6:	461d      	movcc	r5, r3
 8006df8:	0553      	lsls	r3, r2, #21
 8006dfa:	d531      	bpl.n	8006e60 <__ssputs_r+0xa0>
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	f7ff ff6b 	bl	8006cd8 <_malloc_r>
 8006e02:	4606      	mov	r6, r0
 8006e04:	b950      	cbnz	r0, 8006e1c <__ssputs_r+0x5c>
 8006e06:	230c      	movs	r3, #12
 8006e08:	f8ca 3000 	str.w	r3, [sl]
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1c:	6921      	ldr	r1, [r4, #16]
 8006e1e:	464a      	mov	r2, r9
 8006e20:	f7ff fde8 	bl	80069f4 <memcpy>
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	6126      	str	r6, [r4, #16]
 8006e32:	6165      	str	r5, [r4, #20]
 8006e34:	444e      	add	r6, r9
 8006e36:	eba5 0509 	sub.w	r5, r5, r9
 8006e3a:	6026      	str	r6, [r4, #0]
 8006e3c:	60a5      	str	r5, [r4, #8]
 8006e3e:	463e      	mov	r6, r7
 8006e40:	42be      	cmp	r6, r7
 8006e42:	d900      	bls.n	8006e46 <__ssputs_r+0x86>
 8006e44:	463e      	mov	r6, r7
 8006e46:	6820      	ldr	r0, [r4, #0]
 8006e48:	4632      	mov	r2, r6
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	f000 fefa 	bl	8007c44 <memmove>
 8006e50:	68a3      	ldr	r3, [r4, #8]
 8006e52:	1b9b      	subs	r3, r3, r6
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	4433      	add	r3, r6
 8006e5a:	6023      	str	r3, [r4, #0]
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e7db      	b.n	8006e18 <__ssputs_r+0x58>
 8006e60:	462a      	mov	r2, r5
 8006e62:	f000 ff15 	bl	8007c90 <_realloc_r>
 8006e66:	4606      	mov	r6, r0
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d1e1      	bne.n	8006e30 <__ssputs_r+0x70>
 8006e6c:	6921      	ldr	r1, [r4, #16]
 8006e6e:	4650      	mov	r0, sl
 8006e70:	f7ff fec6 	bl	8006c00 <_free_r>
 8006e74:	e7c7      	b.n	8006e06 <__ssputs_r+0x46>
	...

08006e78 <_svfiprintf_r>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	4698      	mov	r8, r3
 8006e7e:	898b      	ldrh	r3, [r1, #12]
 8006e80:	061b      	lsls	r3, r3, #24
 8006e82:	b09d      	sub	sp, #116	; 0x74
 8006e84:	4607      	mov	r7, r0
 8006e86:	460d      	mov	r5, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	d50e      	bpl.n	8006eaa <_svfiprintf_r+0x32>
 8006e8c:	690b      	ldr	r3, [r1, #16]
 8006e8e:	b963      	cbnz	r3, 8006eaa <_svfiprintf_r+0x32>
 8006e90:	2140      	movs	r1, #64	; 0x40
 8006e92:	f7ff ff21 	bl	8006cd8 <_malloc_r>
 8006e96:	6028      	str	r0, [r5, #0]
 8006e98:	6128      	str	r0, [r5, #16]
 8006e9a:	b920      	cbnz	r0, 8006ea6 <_svfiprintf_r+0x2e>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea4:	e0d1      	b.n	800704a <_svfiprintf_r+0x1d2>
 8006ea6:	2340      	movs	r3, #64	; 0x40
 8006ea8:	616b      	str	r3, [r5, #20]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9309      	str	r3, [sp, #36]	; 0x24
 8006eae:	2320      	movs	r3, #32
 8006eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb8:	2330      	movs	r3, #48	; 0x30
 8006eba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007064 <_svfiprintf_r+0x1ec>
 8006ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ec2:	f04f 0901 	mov.w	r9, #1
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	469a      	mov	sl, r3
 8006eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ece:	b10a      	cbz	r2, 8006ed4 <_svfiprintf_r+0x5c>
 8006ed0:	2a25      	cmp	r2, #37	; 0x25
 8006ed2:	d1f9      	bne.n	8006ec8 <_svfiprintf_r+0x50>
 8006ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed8:	d00b      	beq.n	8006ef2 <_svfiprintf_r+0x7a>
 8006eda:	465b      	mov	r3, fp
 8006edc:	4622      	mov	r2, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7ff ff6d 	bl	8006dc0 <__ssputs_r>
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f000 80aa 	beq.w	8007040 <_svfiprintf_r+0x1c8>
 8006eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eee:	445a      	add	r2, fp
 8006ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 80a2 	beq.w	8007040 <_svfiprintf_r+0x1c8>
 8006efc:	2300      	movs	r3, #0
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f06:	f10a 0a01 	add.w	sl, sl, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	9307      	str	r3, [sp, #28]
 8006f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f12:	931a      	str	r3, [sp, #104]	; 0x68
 8006f14:	4654      	mov	r4, sl
 8006f16:	2205      	movs	r2, #5
 8006f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1c:	4851      	ldr	r0, [pc, #324]	; (8007064 <_svfiprintf_r+0x1ec>)
 8006f1e:	f7f9 f95f 	bl	80001e0 <memchr>
 8006f22:	9a04      	ldr	r2, [sp, #16]
 8006f24:	b9d8      	cbnz	r0, 8006f5e <_svfiprintf_r+0xe6>
 8006f26:	06d0      	lsls	r0, r2, #27
 8006f28:	bf44      	itt	mi
 8006f2a:	2320      	movmi	r3, #32
 8006f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f30:	0711      	lsls	r1, r2, #28
 8006f32:	bf44      	itt	mi
 8006f34:	232b      	movmi	r3, #43	; 0x2b
 8006f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f40:	d015      	beq.n	8006f6e <_svfiprintf_r+0xf6>
 8006f42:	9a07      	ldr	r2, [sp, #28]
 8006f44:	4654      	mov	r4, sl
 8006f46:	2000      	movs	r0, #0
 8006f48:	f04f 0c0a 	mov.w	ip, #10
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f52:	3b30      	subs	r3, #48	; 0x30
 8006f54:	2b09      	cmp	r3, #9
 8006f56:	d94e      	bls.n	8006ff6 <_svfiprintf_r+0x17e>
 8006f58:	b1b0      	cbz	r0, 8006f88 <_svfiprintf_r+0x110>
 8006f5a:	9207      	str	r2, [sp, #28]
 8006f5c:	e014      	b.n	8006f88 <_svfiprintf_r+0x110>
 8006f5e:	eba0 0308 	sub.w	r3, r0, r8
 8006f62:	fa09 f303 	lsl.w	r3, r9, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	46a2      	mov	sl, r4
 8006f6c:	e7d2      	b.n	8006f14 <_svfiprintf_r+0x9c>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	1d19      	adds	r1, r3, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	9103      	str	r1, [sp, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbb      	ittet	lt
 8006f7a:	425b      	neglt	r3, r3
 8006f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f80:	9307      	strge	r3, [sp, #28]
 8006f82:	9307      	strlt	r3, [sp, #28]
 8006f84:	bfb8      	it	lt
 8006f86:	9204      	strlt	r2, [sp, #16]
 8006f88:	7823      	ldrb	r3, [r4, #0]
 8006f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8c:	d10c      	bne.n	8006fa8 <_svfiprintf_r+0x130>
 8006f8e:	7863      	ldrb	r3, [r4, #1]
 8006f90:	2b2a      	cmp	r3, #42	; 0x2a
 8006f92:	d135      	bne.n	8007000 <_svfiprintf_r+0x188>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	1d1a      	adds	r2, r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	9203      	str	r2, [sp, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bfb8      	it	lt
 8006fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa4:	3402      	adds	r4, #2
 8006fa6:	9305      	str	r3, [sp, #20]
 8006fa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007074 <_svfiprintf_r+0x1fc>
 8006fac:	7821      	ldrb	r1, [r4, #0]
 8006fae:	2203      	movs	r2, #3
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	f7f9 f915 	bl	80001e0 <memchr>
 8006fb6:	b140      	cbz	r0, 8006fca <_svfiprintf_r+0x152>
 8006fb8:	2340      	movs	r3, #64	; 0x40
 8006fba:	eba0 000a 	sub.w	r0, r0, sl
 8006fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	4303      	orrs	r3, r0
 8006fc6:	3401      	adds	r4, #1
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fce:	4826      	ldr	r0, [pc, #152]	; (8007068 <_svfiprintf_r+0x1f0>)
 8006fd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd4:	2206      	movs	r2, #6
 8006fd6:	f7f9 f903 	bl	80001e0 <memchr>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d038      	beq.n	8007050 <_svfiprintf_r+0x1d8>
 8006fde:	4b23      	ldr	r3, [pc, #140]	; (800706c <_svfiprintf_r+0x1f4>)
 8006fe0:	bb1b      	cbnz	r3, 800702a <_svfiprintf_r+0x1b2>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	3307      	adds	r3, #7
 8006fe6:	f023 0307 	bic.w	r3, r3, #7
 8006fea:	3308      	adds	r3, #8
 8006fec:	9303      	str	r3, [sp, #12]
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	4433      	add	r3, r6
 8006ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff4:	e767      	b.n	8006ec6 <_svfiprintf_r+0x4e>
 8006ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	e7a5      	b.n	8006f4c <_svfiprintf_r+0xd4>
 8007000:	2300      	movs	r3, #0
 8007002:	3401      	adds	r4, #1
 8007004:	9305      	str	r3, [sp, #20]
 8007006:	4619      	mov	r1, r3
 8007008:	f04f 0c0a 	mov.w	ip, #10
 800700c:	4620      	mov	r0, r4
 800700e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007012:	3a30      	subs	r2, #48	; 0x30
 8007014:	2a09      	cmp	r2, #9
 8007016:	d903      	bls.n	8007020 <_svfiprintf_r+0x1a8>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0c5      	beq.n	8006fa8 <_svfiprintf_r+0x130>
 800701c:	9105      	str	r1, [sp, #20]
 800701e:	e7c3      	b.n	8006fa8 <_svfiprintf_r+0x130>
 8007020:	fb0c 2101 	mla	r1, ip, r1, r2
 8007024:	4604      	mov	r4, r0
 8007026:	2301      	movs	r3, #1
 8007028:	e7f0      	b.n	800700c <_svfiprintf_r+0x194>
 800702a:	ab03      	add	r3, sp, #12
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	462a      	mov	r2, r5
 8007030:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <_svfiprintf_r+0x1f8>)
 8007032:	a904      	add	r1, sp, #16
 8007034:	4638      	mov	r0, r7
 8007036:	f3af 8000 	nop.w
 800703a:	1c42      	adds	r2, r0, #1
 800703c:	4606      	mov	r6, r0
 800703e:	d1d6      	bne.n	8006fee <_svfiprintf_r+0x176>
 8007040:	89ab      	ldrh	r3, [r5, #12]
 8007042:	065b      	lsls	r3, r3, #25
 8007044:	f53f af2c 	bmi.w	8006ea0 <_svfiprintf_r+0x28>
 8007048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800704a:	b01d      	add	sp, #116	; 0x74
 800704c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007050:	ab03      	add	r3, sp, #12
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	462a      	mov	r2, r5
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <_svfiprintf_r+0x1f8>)
 8007058:	a904      	add	r1, sp, #16
 800705a:	4638      	mov	r0, r7
 800705c:	f000 f9d4 	bl	8007408 <_printf_i>
 8007060:	e7eb      	b.n	800703a <_svfiprintf_r+0x1c2>
 8007062:	bf00      	nop
 8007064:	080086fe 	.word	0x080086fe
 8007068:	08008708 	.word	0x08008708
 800706c:	00000000 	.word	0x00000000
 8007070:	08006dc1 	.word	0x08006dc1
 8007074:	08008704 	.word	0x08008704

08007078 <__sfputc_r>:
 8007078:	6893      	ldr	r3, [r2, #8]
 800707a:	3b01      	subs	r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	b410      	push	{r4}
 8007080:	6093      	str	r3, [r2, #8]
 8007082:	da08      	bge.n	8007096 <__sfputc_r+0x1e>
 8007084:	6994      	ldr	r4, [r2, #24]
 8007086:	42a3      	cmp	r3, r4
 8007088:	db01      	blt.n	800708e <__sfputc_r+0x16>
 800708a:	290a      	cmp	r1, #10
 800708c:	d103      	bne.n	8007096 <__sfputc_r+0x1e>
 800708e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007092:	f000 baef 	b.w	8007674 <__swbuf_r>
 8007096:	6813      	ldr	r3, [r2, #0]
 8007098:	1c58      	adds	r0, r3, #1
 800709a:	6010      	str	r0, [r2, #0]
 800709c:	7019      	strb	r1, [r3, #0]
 800709e:	4608      	mov	r0, r1
 80070a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <__sfputs_r>:
 80070a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a8:	4606      	mov	r6, r0
 80070aa:	460f      	mov	r7, r1
 80070ac:	4614      	mov	r4, r2
 80070ae:	18d5      	adds	r5, r2, r3
 80070b0:	42ac      	cmp	r4, r5
 80070b2:	d101      	bne.n	80070b8 <__sfputs_r+0x12>
 80070b4:	2000      	movs	r0, #0
 80070b6:	e007      	b.n	80070c8 <__sfputs_r+0x22>
 80070b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070bc:	463a      	mov	r2, r7
 80070be:	4630      	mov	r0, r6
 80070c0:	f7ff ffda 	bl	8007078 <__sfputc_r>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d1f3      	bne.n	80070b0 <__sfputs_r+0xa>
 80070c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070cc <_vfiprintf_r>:
 80070cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d0:	460d      	mov	r5, r1
 80070d2:	b09d      	sub	sp, #116	; 0x74
 80070d4:	4614      	mov	r4, r2
 80070d6:	4698      	mov	r8, r3
 80070d8:	4606      	mov	r6, r0
 80070da:	b118      	cbz	r0, 80070e4 <_vfiprintf_r+0x18>
 80070dc:	6983      	ldr	r3, [r0, #24]
 80070de:	b90b      	cbnz	r3, 80070e4 <_vfiprintf_r+0x18>
 80070e0:	f000 fcaa 	bl	8007a38 <__sinit>
 80070e4:	4b89      	ldr	r3, [pc, #548]	; (800730c <_vfiprintf_r+0x240>)
 80070e6:	429d      	cmp	r5, r3
 80070e8:	d11b      	bne.n	8007122 <_vfiprintf_r+0x56>
 80070ea:	6875      	ldr	r5, [r6, #4]
 80070ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ee:	07d9      	lsls	r1, r3, #31
 80070f0:	d405      	bmi.n	80070fe <_vfiprintf_r+0x32>
 80070f2:	89ab      	ldrh	r3, [r5, #12]
 80070f4:	059a      	lsls	r2, r3, #22
 80070f6:	d402      	bmi.n	80070fe <_vfiprintf_r+0x32>
 80070f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070fa:	f000 fd3b 	bl	8007b74 <__retarget_lock_acquire_recursive>
 80070fe:	89ab      	ldrh	r3, [r5, #12]
 8007100:	071b      	lsls	r3, r3, #28
 8007102:	d501      	bpl.n	8007108 <_vfiprintf_r+0x3c>
 8007104:	692b      	ldr	r3, [r5, #16]
 8007106:	b9eb      	cbnz	r3, 8007144 <_vfiprintf_r+0x78>
 8007108:	4629      	mov	r1, r5
 800710a:	4630      	mov	r0, r6
 800710c:	f000 fb04 	bl	8007718 <__swsetup_r>
 8007110:	b1c0      	cbz	r0, 8007144 <_vfiprintf_r+0x78>
 8007112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007114:	07dc      	lsls	r4, r3, #31
 8007116:	d50e      	bpl.n	8007136 <_vfiprintf_r+0x6a>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	b01d      	add	sp, #116	; 0x74
 800711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007122:	4b7b      	ldr	r3, [pc, #492]	; (8007310 <_vfiprintf_r+0x244>)
 8007124:	429d      	cmp	r5, r3
 8007126:	d101      	bne.n	800712c <_vfiprintf_r+0x60>
 8007128:	68b5      	ldr	r5, [r6, #8]
 800712a:	e7df      	b.n	80070ec <_vfiprintf_r+0x20>
 800712c:	4b79      	ldr	r3, [pc, #484]	; (8007314 <_vfiprintf_r+0x248>)
 800712e:	429d      	cmp	r5, r3
 8007130:	bf08      	it	eq
 8007132:	68f5      	ldreq	r5, [r6, #12]
 8007134:	e7da      	b.n	80070ec <_vfiprintf_r+0x20>
 8007136:	89ab      	ldrh	r3, [r5, #12]
 8007138:	0598      	lsls	r0, r3, #22
 800713a:	d4ed      	bmi.n	8007118 <_vfiprintf_r+0x4c>
 800713c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800713e:	f000 fd1a 	bl	8007b76 <__retarget_lock_release_recursive>
 8007142:	e7e9      	b.n	8007118 <_vfiprintf_r+0x4c>
 8007144:	2300      	movs	r3, #0
 8007146:	9309      	str	r3, [sp, #36]	; 0x24
 8007148:	2320      	movs	r3, #32
 800714a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800714e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007152:	2330      	movs	r3, #48	; 0x30
 8007154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007318 <_vfiprintf_r+0x24c>
 8007158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800715c:	f04f 0901 	mov.w	r9, #1
 8007160:	4623      	mov	r3, r4
 8007162:	469a      	mov	sl, r3
 8007164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007168:	b10a      	cbz	r2, 800716e <_vfiprintf_r+0xa2>
 800716a:	2a25      	cmp	r2, #37	; 0x25
 800716c:	d1f9      	bne.n	8007162 <_vfiprintf_r+0x96>
 800716e:	ebba 0b04 	subs.w	fp, sl, r4
 8007172:	d00b      	beq.n	800718c <_vfiprintf_r+0xc0>
 8007174:	465b      	mov	r3, fp
 8007176:	4622      	mov	r2, r4
 8007178:	4629      	mov	r1, r5
 800717a:	4630      	mov	r0, r6
 800717c:	f7ff ff93 	bl	80070a6 <__sfputs_r>
 8007180:	3001      	adds	r0, #1
 8007182:	f000 80aa 	beq.w	80072da <_vfiprintf_r+0x20e>
 8007186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007188:	445a      	add	r2, fp
 800718a:	9209      	str	r2, [sp, #36]	; 0x24
 800718c:	f89a 3000 	ldrb.w	r3, [sl]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80a2 	beq.w	80072da <_vfiprintf_r+0x20e>
 8007196:	2300      	movs	r3, #0
 8007198:	f04f 32ff 	mov.w	r2, #4294967295
 800719c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071a0:	f10a 0a01 	add.w	sl, sl, #1
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	9307      	str	r3, [sp, #28]
 80071a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ac:	931a      	str	r3, [sp, #104]	; 0x68
 80071ae:	4654      	mov	r4, sl
 80071b0:	2205      	movs	r2, #5
 80071b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b6:	4858      	ldr	r0, [pc, #352]	; (8007318 <_vfiprintf_r+0x24c>)
 80071b8:	f7f9 f812 	bl	80001e0 <memchr>
 80071bc:	9a04      	ldr	r2, [sp, #16]
 80071be:	b9d8      	cbnz	r0, 80071f8 <_vfiprintf_r+0x12c>
 80071c0:	06d1      	lsls	r1, r2, #27
 80071c2:	bf44      	itt	mi
 80071c4:	2320      	movmi	r3, #32
 80071c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ca:	0713      	lsls	r3, r2, #28
 80071cc:	bf44      	itt	mi
 80071ce:	232b      	movmi	r3, #43	; 0x2b
 80071d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d4:	f89a 3000 	ldrb.w	r3, [sl]
 80071d8:	2b2a      	cmp	r3, #42	; 0x2a
 80071da:	d015      	beq.n	8007208 <_vfiprintf_r+0x13c>
 80071dc:	9a07      	ldr	r2, [sp, #28]
 80071de:	4654      	mov	r4, sl
 80071e0:	2000      	movs	r0, #0
 80071e2:	f04f 0c0a 	mov.w	ip, #10
 80071e6:	4621      	mov	r1, r4
 80071e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ec:	3b30      	subs	r3, #48	; 0x30
 80071ee:	2b09      	cmp	r3, #9
 80071f0:	d94e      	bls.n	8007290 <_vfiprintf_r+0x1c4>
 80071f2:	b1b0      	cbz	r0, 8007222 <_vfiprintf_r+0x156>
 80071f4:	9207      	str	r2, [sp, #28]
 80071f6:	e014      	b.n	8007222 <_vfiprintf_r+0x156>
 80071f8:	eba0 0308 	sub.w	r3, r0, r8
 80071fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	9304      	str	r3, [sp, #16]
 8007204:	46a2      	mov	sl, r4
 8007206:	e7d2      	b.n	80071ae <_vfiprintf_r+0xe2>
 8007208:	9b03      	ldr	r3, [sp, #12]
 800720a:	1d19      	adds	r1, r3, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	9103      	str	r1, [sp, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	bfbb      	ittet	lt
 8007214:	425b      	neglt	r3, r3
 8007216:	f042 0202 	orrlt.w	r2, r2, #2
 800721a:	9307      	strge	r3, [sp, #28]
 800721c:	9307      	strlt	r3, [sp, #28]
 800721e:	bfb8      	it	lt
 8007220:	9204      	strlt	r2, [sp, #16]
 8007222:	7823      	ldrb	r3, [r4, #0]
 8007224:	2b2e      	cmp	r3, #46	; 0x2e
 8007226:	d10c      	bne.n	8007242 <_vfiprintf_r+0x176>
 8007228:	7863      	ldrb	r3, [r4, #1]
 800722a:	2b2a      	cmp	r3, #42	; 0x2a
 800722c:	d135      	bne.n	800729a <_vfiprintf_r+0x1ce>
 800722e:	9b03      	ldr	r3, [sp, #12]
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	9203      	str	r2, [sp, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	bfb8      	it	lt
 800723a:	f04f 33ff 	movlt.w	r3, #4294967295
 800723e:	3402      	adds	r4, #2
 8007240:	9305      	str	r3, [sp, #20]
 8007242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007328 <_vfiprintf_r+0x25c>
 8007246:	7821      	ldrb	r1, [r4, #0]
 8007248:	2203      	movs	r2, #3
 800724a:	4650      	mov	r0, sl
 800724c:	f7f8 ffc8 	bl	80001e0 <memchr>
 8007250:	b140      	cbz	r0, 8007264 <_vfiprintf_r+0x198>
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	eba0 000a 	sub.w	r0, r0, sl
 8007258:	fa03 f000 	lsl.w	r0, r3, r0
 800725c:	9b04      	ldr	r3, [sp, #16]
 800725e:	4303      	orrs	r3, r0
 8007260:	3401      	adds	r4, #1
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007268:	482c      	ldr	r0, [pc, #176]	; (800731c <_vfiprintf_r+0x250>)
 800726a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800726e:	2206      	movs	r2, #6
 8007270:	f7f8 ffb6 	bl	80001e0 <memchr>
 8007274:	2800      	cmp	r0, #0
 8007276:	d03f      	beq.n	80072f8 <_vfiprintf_r+0x22c>
 8007278:	4b29      	ldr	r3, [pc, #164]	; (8007320 <_vfiprintf_r+0x254>)
 800727a:	bb1b      	cbnz	r3, 80072c4 <_vfiprintf_r+0x1f8>
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	3307      	adds	r3, #7
 8007280:	f023 0307 	bic.w	r3, r3, #7
 8007284:	3308      	adds	r3, #8
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728a:	443b      	add	r3, r7
 800728c:	9309      	str	r3, [sp, #36]	; 0x24
 800728e:	e767      	b.n	8007160 <_vfiprintf_r+0x94>
 8007290:	fb0c 3202 	mla	r2, ip, r2, r3
 8007294:	460c      	mov	r4, r1
 8007296:	2001      	movs	r0, #1
 8007298:	e7a5      	b.n	80071e6 <_vfiprintf_r+0x11a>
 800729a:	2300      	movs	r3, #0
 800729c:	3401      	adds	r4, #1
 800729e:	9305      	str	r3, [sp, #20]
 80072a0:	4619      	mov	r1, r3
 80072a2:	f04f 0c0a 	mov.w	ip, #10
 80072a6:	4620      	mov	r0, r4
 80072a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ac:	3a30      	subs	r2, #48	; 0x30
 80072ae:	2a09      	cmp	r2, #9
 80072b0:	d903      	bls.n	80072ba <_vfiprintf_r+0x1ee>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0c5      	beq.n	8007242 <_vfiprintf_r+0x176>
 80072b6:	9105      	str	r1, [sp, #20]
 80072b8:	e7c3      	b.n	8007242 <_vfiprintf_r+0x176>
 80072ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80072be:	4604      	mov	r4, r0
 80072c0:	2301      	movs	r3, #1
 80072c2:	e7f0      	b.n	80072a6 <_vfiprintf_r+0x1da>
 80072c4:	ab03      	add	r3, sp, #12
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	462a      	mov	r2, r5
 80072ca:	4b16      	ldr	r3, [pc, #88]	; (8007324 <_vfiprintf_r+0x258>)
 80072cc:	a904      	add	r1, sp, #16
 80072ce:	4630      	mov	r0, r6
 80072d0:	f3af 8000 	nop.w
 80072d4:	4607      	mov	r7, r0
 80072d6:	1c78      	adds	r0, r7, #1
 80072d8:	d1d6      	bne.n	8007288 <_vfiprintf_r+0x1bc>
 80072da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072dc:	07d9      	lsls	r1, r3, #31
 80072de:	d405      	bmi.n	80072ec <_vfiprintf_r+0x220>
 80072e0:	89ab      	ldrh	r3, [r5, #12]
 80072e2:	059a      	lsls	r2, r3, #22
 80072e4:	d402      	bmi.n	80072ec <_vfiprintf_r+0x220>
 80072e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072e8:	f000 fc45 	bl	8007b76 <__retarget_lock_release_recursive>
 80072ec:	89ab      	ldrh	r3, [r5, #12]
 80072ee:	065b      	lsls	r3, r3, #25
 80072f0:	f53f af12 	bmi.w	8007118 <_vfiprintf_r+0x4c>
 80072f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072f6:	e711      	b.n	800711c <_vfiprintf_r+0x50>
 80072f8:	ab03      	add	r3, sp, #12
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	462a      	mov	r2, r5
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <_vfiprintf_r+0x258>)
 8007300:	a904      	add	r1, sp, #16
 8007302:	4630      	mov	r0, r6
 8007304:	f000 f880 	bl	8007408 <_printf_i>
 8007308:	e7e4      	b.n	80072d4 <_vfiprintf_r+0x208>
 800730a:	bf00      	nop
 800730c:	08008754 	.word	0x08008754
 8007310:	08008774 	.word	0x08008774
 8007314:	08008734 	.word	0x08008734
 8007318:	080086fe 	.word	0x080086fe
 800731c:	08008708 	.word	0x08008708
 8007320:	00000000 	.word	0x00000000
 8007324:	080070a7 	.word	0x080070a7
 8007328:	08008704 	.word	0x08008704

0800732c <_printf_common>:
 800732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	4616      	mov	r6, r2
 8007332:	4699      	mov	r9, r3
 8007334:	688a      	ldr	r2, [r1, #8]
 8007336:	690b      	ldr	r3, [r1, #16]
 8007338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800733c:	4293      	cmp	r3, r2
 800733e:	bfb8      	it	lt
 8007340:	4613      	movlt	r3, r2
 8007342:	6033      	str	r3, [r6, #0]
 8007344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007348:	4607      	mov	r7, r0
 800734a:	460c      	mov	r4, r1
 800734c:	b10a      	cbz	r2, 8007352 <_printf_common+0x26>
 800734e:	3301      	adds	r3, #1
 8007350:	6033      	str	r3, [r6, #0]
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	0699      	lsls	r1, r3, #26
 8007356:	bf42      	ittt	mi
 8007358:	6833      	ldrmi	r3, [r6, #0]
 800735a:	3302      	addmi	r3, #2
 800735c:	6033      	strmi	r3, [r6, #0]
 800735e:	6825      	ldr	r5, [r4, #0]
 8007360:	f015 0506 	ands.w	r5, r5, #6
 8007364:	d106      	bne.n	8007374 <_printf_common+0x48>
 8007366:	f104 0a19 	add.w	sl, r4, #25
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	6832      	ldr	r2, [r6, #0]
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	42ab      	cmp	r3, r5
 8007372:	dc26      	bgt.n	80073c2 <_printf_common+0x96>
 8007374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007378:	1e13      	subs	r3, r2, #0
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	bf18      	it	ne
 800737e:	2301      	movne	r3, #1
 8007380:	0692      	lsls	r2, r2, #26
 8007382:	d42b      	bmi.n	80073dc <_printf_common+0xb0>
 8007384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007388:	4649      	mov	r1, r9
 800738a:	4638      	mov	r0, r7
 800738c:	47c0      	blx	r8
 800738e:	3001      	adds	r0, #1
 8007390:	d01e      	beq.n	80073d0 <_printf_common+0xa4>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	68e5      	ldr	r5, [r4, #12]
 8007396:	6832      	ldr	r2, [r6, #0]
 8007398:	f003 0306 	and.w	r3, r3, #6
 800739c:	2b04      	cmp	r3, #4
 800739e:	bf08      	it	eq
 80073a0:	1aad      	subeq	r5, r5, r2
 80073a2:	68a3      	ldr	r3, [r4, #8]
 80073a4:	6922      	ldr	r2, [r4, #16]
 80073a6:	bf0c      	ite	eq
 80073a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073ac:	2500      	movne	r5, #0
 80073ae:	4293      	cmp	r3, r2
 80073b0:	bfc4      	itt	gt
 80073b2:	1a9b      	subgt	r3, r3, r2
 80073b4:	18ed      	addgt	r5, r5, r3
 80073b6:	2600      	movs	r6, #0
 80073b8:	341a      	adds	r4, #26
 80073ba:	42b5      	cmp	r5, r6
 80073bc:	d11a      	bne.n	80073f4 <_printf_common+0xc8>
 80073be:	2000      	movs	r0, #0
 80073c0:	e008      	b.n	80073d4 <_printf_common+0xa8>
 80073c2:	2301      	movs	r3, #1
 80073c4:	4652      	mov	r2, sl
 80073c6:	4649      	mov	r1, r9
 80073c8:	4638      	mov	r0, r7
 80073ca:	47c0      	blx	r8
 80073cc:	3001      	adds	r0, #1
 80073ce:	d103      	bne.n	80073d8 <_printf_common+0xac>
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d8:	3501      	adds	r5, #1
 80073da:	e7c6      	b.n	800736a <_printf_common+0x3e>
 80073dc:	18e1      	adds	r1, r4, r3
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	2030      	movs	r0, #48	; 0x30
 80073e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073e6:	4422      	add	r2, r4
 80073e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073f0:	3302      	adds	r3, #2
 80073f2:	e7c7      	b.n	8007384 <_printf_common+0x58>
 80073f4:	2301      	movs	r3, #1
 80073f6:	4622      	mov	r2, r4
 80073f8:	4649      	mov	r1, r9
 80073fa:	4638      	mov	r0, r7
 80073fc:	47c0      	blx	r8
 80073fe:	3001      	adds	r0, #1
 8007400:	d0e6      	beq.n	80073d0 <_printf_common+0xa4>
 8007402:	3601      	adds	r6, #1
 8007404:	e7d9      	b.n	80073ba <_printf_common+0x8e>
	...

08007408 <_printf_i>:
 8007408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800740c:	7e0f      	ldrb	r7, [r1, #24]
 800740e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007410:	2f78      	cmp	r7, #120	; 0x78
 8007412:	4691      	mov	r9, r2
 8007414:	4680      	mov	r8, r0
 8007416:	460c      	mov	r4, r1
 8007418:	469a      	mov	sl, r3
 800741a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800741e:	d807      	bhi.n	8007430 <_printf_i+0x28>
 8007420:	2f62      	cmp	r7, #98	; 0x62
 8007422:	d80a      	bhi.n	800743a <_printf_i+0x32>
 8007424:	2f00      	cmp	r7, #0
 8007426:	f000 80d8 	beq.w	80075da <_printf_i+0x1d2>
 800742a:	2f58      	cmp	r7, #88	; 0x58
 800742c:	f000 80a3 	beq.w	8007576 <_printf_i+0x16e>
 8007430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007438:	e03a      	b.n	80074b0 <_printf_i+0xa8>
 800743a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800743e:	2b15      	cmp	r3, #21
 8007440:	d8f6      	bhi.n	8007430 <_printf_i+0x28>
 8007442:	a101      	add	r1, pc, #4	; (adr r1, 8007448 <_printf_i+0x40>)
 8007444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007448:	080074a1 	.word	0x080074a1
 800744c:	080074b5 	.word	0x080074b5
 8007450:	08007431 	.word	0x08007431
 8007454:	08007431 	.word	0x08007431
 8007458:	08007431 	.word	0x08007431
 800745c:	08007431 	.word	0x08007431
 8007460:	080074b5 	.word	0x080074b5
 8007464:	08007431 	.word	0x08007431
 8007468:	08007431 	.word	0x08007431
 800746c:	08007431 	.word	0x08007431
 8007470:	08007431 	.word	0x08007431
 8007474:	080075c1 	.word	0x080075c1
 8007478:	080074e5 	.word	0x080074e5
 800747c:	080075a3 	.word	0x080075a3
 8007480:	08007431 	.word	0x08007431
 8007484:	08007431 	.word	0x08007431
 8007488:	080075e3 	.word	0x080075e3
 800748c:	08007431 	.word	0x08007431
 8007490:	080074e5 	.word	0x080074e5
 8007494:	08007431 	.word	0x08007431
 8007498:	08007431 	.word	0x08007431
 800749c:	080075ab 	.word	0x080075ab
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	1d1a      	adds	r2, r3, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	602a      	str	r2, [r5, #0]
 80074a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074b0:	2301      	movs	r3, #1
 80074b2:	e0a3      	b.n	80075fc <_printf_i+0x1f4>
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	6829      	ldr	r1, [r5, #0]
 80074b8:	0606      	lsls	r6, r0, #24
 80074ba:	f101 0304 	add.w	r3, r1, #4
 80074be:	d50a      	bpl.n	80074d6 <_printf_i+0xce>
 80074c0:	680e      	ldr	r6, [r1, #0]
 80074c2:	602b      	str	r3, [r5, #0]
 80074c4:	2e00      	cmp	r6, #0
 80074c6:	da03      	bge.n	80074d0 <_printf_i+0xc8>
 80074c8:	232d      	movs	r3, #45	; 0x2d
 80074ca:	4276      	negs	r6, r6
 80074cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d0:	485e      	ldr	r0, [pc, #376]	; (800764c <_printf_i+0x244>)
 80074d2:	230a      	movs	r3, #10
 80074d4:	e019      	b.n	800750a <_printf_i+0x102>
 80074d6:	680e      	ldr	r6, [r1, #0]
 80074d8:	602b      	str	r3, [r5, #0]
 80074da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074de:	bf18      	it	ne
 80074e0:	b236      	sxthne	r6, r6
 80074e2:	e7ef      	b.n	80074c4 <_printf_i+0xbc>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	6820      	ldr	r0, [r4, #0]
 80074e8:	1d19      	adds	r1, r3, #4
 80074ea:	6029      	str	r1, [r5, #0]
 80074ec:	0601      	lsls	r1, r0, #24
 80074ee:	d501      	bpl.n	80074f4 <_printf_i+0xec>
 80074f0:	681e      	ldr	r6, [r3, #0]
 80074f2:	e002      	b.n	80074fa <_printf_i+0xf2>
 80074f4:	0646      	lsls	r6, r0, #25
 80074f6:	d5fb      	bpl.n	80074f0 <_printf_i+0xe8>
 80074f8:	881e      	ldrh	r6, [r3, #0]
 80074fa:	4854      	ldr	r0, [pc, #336]	; (800764c <_printf_i+0x244>)
 80074fc:	2f6f      	cmp	r7, #111	; 0x6f
 80074fe:	bf0c      	ite	eq
 8007500:	2308      	moveq	r3, #8
 8007502:	230a      	movne	r3, #10
 8007504:	2100      	movs	r1, #0
 8007506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800750a:	6865      	ldr	r5, [r4, #4]
 800750c:	60a5      	str	r5, [r4, #8]
 800750e:	2d00      	cmp	r5, #0
 8007510:	bfa2      	ittt	ge
 8007512:	6821      	ldrge	r1, [r4, #0]
 8007514:	f021 0104 	bicge.w	r1, r1, #4
 8007518:	6021      	strge	r1, [r4, #0]
 800751a:	b90e      	cbnz	r6, 8007520 <_printf_i+0x118>
 800751c:	2d00      	cmp	r5, #0
 800751e:	d04d      	beq.n	80075bc <_printf_i+0x1b4>
 8007520:	4615      	mov	r5, r2
 8007522:	fbb6 f1f3 	udiv	r1, r6, r3
 8007526:	fb03 6711 	mls	r7, r3, r1, r6
 800752a:	5dc7      	ldrb	r7, [r0, r7]
 800752c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007530:	4637      	mov	r7, r6
 8007532:	42bb      	cmp	r3, r7
 8007534:	460e      	mov	r6, r1
 8007536:	d9f4      	bls.n	8007522 <_printf_i+0x11a>
 8007538:	2b08      	cmp	r3, #8
 800753a:	d10b      	bne.n	8007554 <_printf_i+0x14c>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	07de      	lsls	r6, r3, #31
 8007540:	d508      	bpl.n	8007554 <_printf_i+0x14c>
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6861      	ldr	r1, [r4, #4]
 8007546:	4299      	cmp	r1, r3
 8007548:	bfde      	ittt	le
 800754a:	2330      	movle	r3, #48	; 0x30
 800754c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007550:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007554:	1b52      	subs	r2, r2, r5
 8007556:	6122      	str	r2, [r4, #16]
 8007558:	f8cd a000 	str.w	sl, [sp]
 800755c:	464b      	mov	r3, r9
 800755e:	aa03      	add	r2, sp, #12
 8007560:	4621      	mov	r1, r4
 8007562:	4640      	mov	r0, r8
 8007564:	f7ff fee2 	bl	800732c <_printf_common>
 8007568:	3001      	adds	r0, #1
 800756a:	d14c      	bne.n	8007606 <_printf_i+0x1fe>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	b004      	add	sp, #16
 8007572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007576:	4835      	ldr	r0, [pc, #212]	; (800764c <_printf_i+0x244>)
 8007578:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800757c:	6829      	ldr	r1, [r5, #0]
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	f851 6b04 	ldr.w	r6, [r1], #4
 8007584:	6029      	str	r1, [r5, #0]
 8007586:	061d      	lsls	r5, r3, #24
 8007588:	d514      	bpl.n	80075b4 <_printf_i+0x1ac>
 800758a:	07df      	lsls	r7, r3, #31
 800758c:	bf44      	itt	mi
 800758e:	f043 0320 	orrmi.w	r3, r3, #32
 8007592:	6023      	strmi	r3, [r4, #0]
 8007594:	b91e      	cbnz	r6, 800759e <_printf_i+0x196>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	f023 0320 	bic.w	r3, r3, #32
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	2310      	movs	r3, #16
 80075a0:	e7b0      	b.n	8007504 <_printf_i+0xfc>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	f043 0320 	orr.w	r3, r3, #32
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	2378      	movs	r3, #120	; 0x78
 80075ac:	4828      	ldr	r0, [pc, #160]	; (8007650 <_printf_i+0x248>)
 80075ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075b2:	e7e3      	b.n	800757c <_printf_i+0x174>
 80075b4:	0659      	lsls	r1, r3, #25
 80075b6:	bf48      	it	mi
 80075b8:	b2b6      	uxthmi	r6, r6
 80075ba:	e7e6      	b.n	800758a <_printf_i+0x182>
 80075bc:	4615      	mov	r5, r2
 80075be:	e7bb      	b.n	8007538 <_printf_i+0x130>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	6826      	ldr	r6, [r4, #0]
 80075c4:	6961      	ldr	r1, [r4, #20]
 80075c6:	1d18      	adds	r0, r3, #4
 80075c8:	6028      	str	r0, [r5, #0]
 80075ca:	0635      	lsls	r5, r6, #24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	d501      	bpl.n	80075d4 <_printf_i+0x1cc>
 80075d0:	6019      	str	r1, [r3, #0]
 80075d2:	e002      	b.n	80075da <_printf_i+0x1d2>
 80075d4:	0670      	lsls	r0, r6, #25
 80075d6:	d5fb      	bpl.n	80075d0 <_printf_i+0x1c8>
 80075d8:	8019      	strh	r1, [r3, #0]
 80075da:	2300      	movs	r3, #0
 80075dc:	6123      	str	r3, [r4, #16]
 80075de:	4615      	mov	r5, r2
 80075e0:	e7ba      	b.n	8007558 <_printf_i+0x150>
 80075e2:	682b      	ldr	r3, [r5, #0]
 80075e4:	1d1a      	adds	r2, r3, #4
 80075e6:	602a      	str	r2, [r5, #0]
 80075e8:	681d      	ldr	r5, [r3, #0]
 80075ea:	6862      	ldr	r2, [r4, #4]
 80075ec:	2100      	movs	r1, #0
 80075ee:	4628      	mov	r0, r5
 80075f0:	f7f8 fdf6 	bl	80001e0 <memchr>
 80075f4:	b108      	cbz	r0, 80075fa <_printf_i+0x1f2>
 80075f6:	1b40      	subs	r0, r0, r5
 80075f8:	6060      	str	r0, [r4, #4]
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	2300      	movs	r3, #0
 8007600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007604:	e7a8      	b.n	8007558 <_printf_i+0x150>
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	462a      	mov	r2, r5
 800760a:	4649      	mov	r1, r9
 800760c:	4640      	mov	r0, r8
 800760e:	47d0      	blx	sl
 8007610:	3001      	adds	r0, #1
 8007612:	d0ab      	beq.n	800756c <_printf_i+0x164>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	079b      	lsls	r3, r3, #30
 8007618:	d413      	bmi.n	8007642 <_printf_i+0x23a>
 800761a:	68e0      	ldr	r0, [r4, #12]
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	4298      	cmp	r0, r3
 8007620:	bfb8      	it	lt
 8007622:	4618      	movlt	r0, r3
 8007624:	e7a4      	b.n	8007570 <_printf_i+0x168>
 8007626:	2301      	movs	r3, #1
 8007628:	4632      	mov	r2, r6
 800762a:	4649      	mov	r1, r9
 800762c:	4640      	mov	r0, r8
 800762e:	47d0      	blx	sl
 8007630:	3001      	adds	r0, #1
 8007632:	d09b      	beq.n	800756c <_printf_i+0x164>
 8007634:	3501      	adds	r5, #1
 8007636:	68e3      	ldr	r3, [r4, #12]
 8007638:	9903      	ldr	r1, [sp, #12]
 800763a:	1a5b      	subs	r3, r3, r1
 800763c:	42ab      	cmp	r3, r5
 800763e:	dcf2      	bgt.n	8007626 <_printf_i+0x21e>
 8007640:	e7eb      	b.n	800761a <_printf_i+0x212>
 8007642:	2500      	movs	r5, #0
 8007644:	f104 0619 	add.w	r6, r4, #25
 8007648:	e7f5      	b.n	8007636 <_printf_i+0x22e>
 800764a:	bf00      	nop
 800764c:	0800870f 	.word	0x0800870f
 8007650:	08008720 	.word	0x08008720

08007654 <_sbrk_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d06      	ldr	r5, [pc, #24]	; (8007670 <_sbrk_r+0x1c>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	f7fb f96a 	bl	8002938 <_sbrk>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_sbrk_r+0x1a>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_sbrk_r+0x1a>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	20000918 	.word	0x20000918

08007674 <__swbuf_r>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	460e      	mov	r6, r1
 8007678:	4614      	mov	r4, r2
 800767a:	4605      	mov	r5, r0
 800767c:	b118      	cbz	r0, 8007686 <__swbuf_r+0x12>
 800767e:	6983      	ldr	r3, [r0, #24]
 8007680:	b90b      	cbnz	r3, 8007686 <__swbuf_r+0x12>
 8007682:	f000 f9d9 	bl	8007a38 <__sinit>
 8007686:	4b21      	ldr	r3, [pc, #132]	; (800770c <__swbuf_r+0x98>)
 8007688:	429c      	cmp	r4, r3
 800768a:	d12b      	bne.n	80076e4 <__swbuf_r+0x70>
 800768c:	686c      	ldr	r4, [r5, #4]
 800768e:	69a3      	ldr	r3, [r4, #24]
 8007690:	60a3      	str	r3, [r4, #8]
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	071a      	lsls	r2, r3, #28
 8007696:	d52f      	bpl.n	80076f8 <__swbuf_r+0x84>
 8007698:	6923      	ldr	r3, [r4, #16]
 800769a:	b36b      	cbz	r3, 80076f8 <__swbuf_r+0x84>
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	1ac0      	subs	r0, r0, r3
 80076a2:	6963      	ldr	r3, [r4, #20]
 80076a4:	b2f6      	uxtb	r6, r6
 80076a6:	4283      	cmp	r3, r0
 80076a8:	4637      	mov	r7, r6
 80076aa:	dc04      	bgt.n	80076b6 <__swbuf_r+0x42>
 80076ac:	4621      	mov	r1, r4
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 f92e 	bl	8007910 <_fflush_r>
 80076b4:	bb30      	cbnz	r0, 8007704 <__swbuf_r+0x90>
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	60a3      	str	r3, [r4, #8]
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	701e      	strb	r6, [r3, #0]
 80076c4:	6963      	ldr	r3, [r4, #20]
 80076c6:	3001      	adds	r0, #1
 80076c8:	4283      	cmp	r3, r0
 80076ca:	d004      	beq.n	80076d6 <__swbuf_r+0x62>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	07db      	lsls	r3, r3, #31
 80076d0:	d506      	bpl.n	80076e0 <__swbuf_r+0x6c>
 80076d2:	2e0a      	cmp	r6, #10
 80076d4:	d104      	bne.n	80076e0 <__swbuf_r+0x6c>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f000 f919 	bl	8007910 <_fflush_r>
 80076de:	b988      	cbnz	r0, 8007704 <__swbuf_r+0x90>
 80076e0:	4638      	mov	r0, r7
 80076e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <__swbuf_r+0x9c>)
 80076e6:	429c      	cmp	r4, r3
 80076e8:	d101      	bne.n	80076ee <__swbuf_r+0x7a>
 80076ea:	68ac      	ldr	r4, [r5, #8]
 80076ec:	e7cf      	b.n	800768e <__swbuf_r+0x1a>
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <__swbuf_r+0xa0>)
 80076f0:	429c      	cmp	r4, r3
 80076f2:	bf08      	it	eq
 80076f4:	68ec      	ldreq	r4, [r5, #12]
 80076f6:	e7ca      	b.n	800768e <__swbuf_r+0x1a>
 80076f8:	4621      	mov	r1, r4
 80076fa:	4628      	mov	r0, r5
 80076fc:	f000 f80c 	bl	8007718 <__swsetup_r>
 8007700:	2800      	cmp	r0, #0
 8007702:	d0cb      	beq.n	800769c <__swbuf_r+0x28>
 8007704:	f04f 37ff 	mov.w	r7, #4294967295
 8007708:	e7ea      	b.n	80076e0 <__swbuf_r+0x6c>
 800770a:	bf00      	nop
 800770c:	08008754 	.word	0x08008754
 8007710:	08008774 	.word	0x08008774
 8007714:	08008734 	.word	0x08008734

08007718 <__swsetup_r>:
 8007718:	4b32      	ldr	r3, [pc, #200]	; (80077e4 <__swsetup_r+0xcc>)
 800771a:	b570      	push	{r4, r5, r6, lr}
 800771c:	681d      	ldr	r5, [r3, #0]
 800771e:	4606      	mov	r6, r0
 8007720:	460c      	mov	r4, r1
 8007722:	b125      	cbz	r5, 800772e <__swsetup_r+0x16>
 8007724:	69ab      	ldr	r3, [r5, #24]
 8007726:	b913      	cbnz	r3, 800772e <__swsetup_r+0x16>
 8007728:	4628      	mov	r0, r5
 800772a:	f000 f985 	bl	8007a38 <__sinit>
 800772e:	4b2e      	ldr	r3, [pc, #184]	; (80077e8 <__swsetup_r+0xd0>)
 8007730:	429c      	cmp	r4, r3
 8007732:	d10f      	bne.n	8007754 <__swsetup_r+0x3c>
 8007734:	686c      	ldr	r4, [r5, #4]
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800773c:	0719      	lsls	r1, r3, #28
 800773e:	d42c      	bmi.n	800779a <__swsetup_r+0x82>
 8007740:	06dd      	lsls	r5, r3, #27
 8007742:	d411      	bmi.n	8007768 <__swsetup_r+0x50>
 8007744:	2309      	movs	r3, #9
 8007746:	6033      	str	r3, [r6, #0]
 8007748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800774c:	81a3      	strh	r3, [r4, #12]
 800774e:	f04f 30ff 	mov.w	r0, #4294967295
 8007752:	e03e      	b.n	80077d2 <__swsetup_r+0xba>
 8007754:	4b25      	ldr	r3, [pc, #148]	; (80077ec <__swsetup_r+0xd4>)
 8007756:	429c      	cmp	r4, r3
 8007758:	d101      	bne.n	800775e <__swsetup_r+0x46>
 800775a:	68ac      	ldr	r4, [r5, #8]
 800775c:	e7eb      	b.n	8007736 <__swsetup_r+0x1e>
 800775e:	4b24      	ldr	r3, [pc, #144]	; (80077f0 <__swsetup_r+0xd8>)
 8007760:	429c      	cmp	r4, r3
 8007762:	bf08      	it	eq
 8007764:	68ec      	ldreq	r4, [r5, #12]
 8007766:	e7e6      	b.n	8007736 <__swsetup_r+0x1e>
 8007768:	0758      	lsls	r0, r3, #29
 800776a:	d512      	bpl.n	8007792 <__swsetup_r+0x7a>
 800776c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800776e:	b141      	cbz	r1, 8007782 <__swsetup_r+0x6a>
 8007770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007774:	4299      	cmp	r1, r3
 8007776:	d002      	beq.n	800777e <__swsetup_r+0x66>
 8007778:	4630      	mov	r0, r6
 800777a:	f7ff fa41 	bl	8006c00 <_free_r>
 800777e:	2300      	movs	r3, #0
 8007780:	6363      	str	r3, [r4, #52]	; 0x34
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	2300      	movs	r3, #0
 800778c:	6063      	str	r3, [r4, #4]
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f043 0308 	orr.w	r3, r3, #8
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	b94b      	cbnz	r3, 80077b2 <__swsetup_r+0x9a>
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a8:	d003      	beq.n	80077b2 <__swsetup_r+0x9a>
 80077aa:	4621      	mov	r1, r4
 80077ac:	4630      	mov	r0, r6
 80077ae:	f000 fa09 	bl	8007bc4 <__smakebuf_r>
 80077b2:	89a0      	ldrh	r0, [r4, #12]
 80077b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077b8:	f010 0301 	ands.w	r3, r0, #1
 80077bc:	d00a      	beq.n	80077d4 <__swsetup_r+0xbc>
 80077be:	2300      	movs	r3, #0
 80077c0:	60a3      	str	r3, [r4, #8]
 80077c2:	6963      	ldr	r3, [r4, #20]
 80077c4:	425b      	negs	r3, r3
 80077c6:	61a3      	str	r3, [r4, #24]
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	b943      	cbnz	r3, 80077de <__swsetup_r+0xc6>
 80077cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077d0:	d1ba      	bne.n	8007748 <__swsetup_r+0x30>
 80077d2:	bd70      	pop	{r4, r5, r6, pc}
 80077d4:	0781      	lsls	r1, r0, #30
 80077d6:	bf58      	it	pl
 80077d8:	6963      	ldrpl	r3, [r4, #20]
 80077da:	60a3      	str	r3, [r4, #8]
 80077dc:	e7f4      	b.n	80077c8 <__swsetup_r+0xb0>
 80077de:	2000      	movs	r0, #0
 80077e0:	e7f7      	b.n	80077d2 <__swsetup_r+0xba>
 80077e2:	bf00      	nop
 80077e4:	20000060 	.word	0x20000060
 80077e8:	08008754 	.word	0x08008754
 80077ec:	08008774 	.word	0x08008774
 80077f0:	08008734 	.word	0x08008734

080077f4 <abort>:
 80077f4:	b508      	push	{r3, lr}
 80077f6:	2006      	movs	r0, #6
 80077f8:	f000 faa2 	bl	8007d40 <raise>
 80077fc:	2001      	movs	r0, #1
 80077fe:	f7fb f823 	bl	8002848 <_exit>
	...

08007804 <__sflush_r>:
 8007804:	898a      	ldrh	r2, [r1, #12]
 8007806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800780a:	4605      	mov	r5, r0
 800780c:	0710      	lsls	r0, r2, #28
 800780e:	460c      	mov	r4, r1
 8007810:	d458      	bmi.n	80078c4 <__sflush_r+0xc0>
 8007812:	684b      	ldr	r3, [r1, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	dc05      	bgt.n	8007824 <__sflush_r+0x20>
 8007818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	dc02      	bgt.n	8007824 <__sflush_r+0x20>
 800781e:	2000      	movs	r0, #0
 8007820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007826:	2e00      	cmp	r6, #0
 8007828:	d0f9      	beq.n	800781e <__sflush_r+0x1a>
 800782a:	2300      	movs	r3, #0
 800782c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007830:	682f      	ldr	r7, [r5, #0]
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	d032      	beq.n	800789c <__sflush_r+0x98>
 8007836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	075a      	lsls	r2, r3, #29
 800783c:	d505      	bpl.n	800784a <__sflush_r+0x46>
 800783e:	6863      	ldr	r3, [r4, #4]
 8007840:	1ac0      	subs	r0, r0, r3
 8007842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007844:	b10b      	cbz	r3, 800784a <__sflush_r+0x46>
 8007846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007848:	1ac0      	subs	r0, r0, r3
 800784a:	2300      	movs	r3, #0
 800784c:	4602      	mov	r2, r0
 800784e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007850:	6a21      	ldr	r1, [r4, #32]
 8007852:	4628      	mov	r0, r5
 8007854:	47b0      	blx	r6
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	d106      	bne.n	800786a <__sflush_r+0x66>
 800785c:	6829      	ldr	r1, [r5, #0]
 800785e:	291d      	cmp	r1, #29
 8007860:	d82c      	bhi.n	80078bc <__sflush_r+0xb8>
 8007862:	4a2a      	ldr	r2, [pc, #168]	; (800790c <__sflush_r+0x108>)
 8007864:	40ca      	lsrs	r2, r1
 8007866:	07d6      	lsls	r6, r2, #31
 8007868:	d528      	bpl.n	80078bc <__sflush_r+0xb8>
 800786a:	2200      	movs	r2, #0
 800786c:	6062      	str	r2, [r4, #4]
 800786e:	04d9      	lsls	r1, r3, #19
 8007870:	6922      	ldr	r2, [r4, #16]
 8007872:	6022      	str	r2, [r4, #0]
 8007874:	d504      	bpl.n	8007880 <__sflush_r+0x7c>
 8007876:	1c42      	adds	r2, r0, #1
 8007878:	d101      	bne.n	800787e <__sflush_r+0x7a>
 800787a:	682b      	ldr	r3, [r5, #0]
 800787c:	b903      	cbnz	r3, 8007880 <__sflush_r+0x7c>
 800787e:	6560      	str	r0, [r4, #84]	; 0x54
 8007880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007882:	602f      	str	r7, [r5, #0]
 8007884:	2900      	cmp	r1, #0
 8007886:	d0ca      	beq.n	800781e <__sflush_r+0x1a>
 8007888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800788c:	4299      	cmp	r1, r3
 800788e:	d002      	beq.n	8007896 <__sflush_r+0x92>
 8007890:	4628      	mov	r0, r5
 8007892:	f7ff f9b5 	bl	8006c00 <_free_r>
 8007896:	2000      	movs	r0, #0
 8007898:	6360      	str	r0, [r4, #52]	; 0x34
 800789a:	e7c1      	b.n	8007820 <__sflush_r+0x1c>
 800789c:	6a21      	ldr	r1, [r4, #32]
 800789e:	2301      	movs	r3, #1
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b0      	blx	r6
 80078a4:	1c41      	adds	r1, r0, #1
 80078a6:	d1c7      	bne.n	8007838 <__sflush_r+0x34>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0c4      	beq.n	8007838 <__sflush_r+0x34>
 80078ae:	2b1d      	cmp	r3, #29
 80078b0:	d001      	beq.n	80078b6 <__sflush_r+0xb2>
 80078b2:	2b16      	cmp	r3, #22
 80078b4:	d101      	bne.n	80078ba <__sflush_r+0xb6>
 80078b6:	602f      	str	r7, [r5, #0]
 80078b8:	e7b1      	b.n	800781e <__sflush_r+0x1a>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	e7ad      	b.n	8007820 <__sflush_r+0x1c>
 80078c4:	690f      	ldr	r7, [r1, #16]
 80078c6:	2f00      	cmp	r7, #0
 80078c8:	d0a9      	beq.n	800781e <__sflush_r+0x1a>
 80078ca:	0793      	lsls	r3, r2, #30
 80078cc:	680e      	ldr	r6, [r1, #0]
 80078ce:	bf08      	it	eq
 80078d0:	694b      	ldreq	r3, [r1, #20]
 80078d2:	600f      	str	r7, [r1, #0]
 80078d4:	bf18      	it	ne
 80078d6:	2300      	movne	r3, #0
 80078d8:	eba6 0807 	sub.w	r8, r6, r7
 80078dc:	608b      	str	r3, [r1, #8]
 80078de:	f1b8 0f00 	cmp.w	r8, #0
 80078e2:	dd9c      	ble.n	800781e <__sflush_r+0x1a>
 80078e4:	6a21      	ldr	r1, [r4, #32]
 80078e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078e8:	4643      	mov	r3, r8
 80078ea:	463a      	mov	r2, r7
 80078ec:	4628      	mov	r0, r5
 80078ee:	47b0      	blx	r6
 80078f0:	2800      	cmp	r0, #0
 80078f2:	dc06      	bgt.n	8007902 <__sflush_r+0xfe>
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fa:	81a3      	strh	r3, [r4, #12]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e78e      	b.n	8007820 <__sflush_r+0x1c>
 8007902:	4407      	add	r7, r0
 8007904:	eba8 0800 	sub.w	r8, r8, r0
 8007908:	e7e9      	b.n	80078de <__sflush_r+0xda>
 800790a:	bf00      	nop
 800790c:	20400001 	.word	0x20400001

08007910 <_fflush_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	690b      	ldr	r3, [r1, #16]
 8007914:	4605      	mov	r5, r0
 8007916:	460c      	mov	r4, r1
 8007918:	b913      	cbnz	r3, 8007920 <_fflush_r+0x10>
 800791a:	2500      	movs	r5, #0
 800791c:	4628      	mov	r0, r5
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	b118      	cbz	r0, 800792a <_fflush_r+0x1a>
 8007922:	6983      	ldr	r3, [r0, #24]
 8007924:	b90b      	cbnz	r3, 800792a <_fflush_r+0x1a>
 8007926:	f000 f887 	bl	8007a38 <__sinit>
 800792a:	4b14      	ldr	r3, [pc, #80]	; (800797c <_fflush_r+0x6c>)
 800792c:	429c      	cmp	r4, r3
 800792e:	d11b      	bne.n	8007968 <_fflush_r+0x58>
 8007930:	686c      	ldr	r4, [r5, #4]
 8007932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0ef      	beq.n	800791a <_fflush_r+0xa>
 800793a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800793c:	07d0      	lsls	r0, r2, #31
 800793e:	d404      	bmi.n	800794a <_fflush_r+0x3a>
 8007940:	0599      	lsls	r1, r3, #22
 8007942:	d402      	bmi.n	800794a <_fflush_r+0x3a>
 8007944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007946:	f000 f915 	bl	8007b74 <__retarget_lock_acquire_recursive>
 800794a:	4628      	mov	r0, r5
 800794c:	4621      	mov	r1, r4
 800794e:	f7ff ff59 	bl	8007804 <__sflush_r>
 8007952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007954:	07da      	lsls	r2, r3, #31
 8007956:	4605      	mov	r5, r0
 8007958:	d4e0      	bmi.n	800791c <_fflush_r+0xc>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	059b      	lsls	r3, r3, #22
 800795e:	d4dd      	bmi.n	800791c <_fflush_r+0xc>
 8007960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007962:	f000 f908 	bl	8007b76 <__retarget_lock_release_recursive>
 8007966:	e7d9      	b.n	800791c <_fflush_r+0xc>
 8007968:	4b05      	ldr	r3, [pc, #20]	; (8007980 <_fflush_r+0x70>)
 800796a:	429c      	cmp	r4, r3
 800796c:	d101      	bne.n	8007972 <_fflush_r+0x62>
 800796e:	68ac      	ldr	r4, [r5, #8]
 8007970:	e7df      	b.n	8007932 <_fflush_r+0x22>
 8007972:	4b04      	ldr	r3, [pc, #16]	; (8007984 <_fflush_r+0x74>)
 8007974:	429c      	cmp	r4, r3
 8007976:	bf08      	it	eq
 8007978:	68ec      	ldreq	r4, [r5, #12]
 800797a:	e7da      	b.n	8007932 <_fflush_r+0x22>
 800797c:	08008754 	.word	0x08008754
 8007980:	08008774 	.word	0x08008774
 8007984:	08008734 	.word	0x08008734

08007988 <std>:
 8007988:	2300      	movs	r3, #0
 800798a:	b510      	push	{r4, lr}
 800798c:	4604      	mov	r4, r0
 800798e:	e9c0 3300 	strd	r3, r3, [r0]
 8007992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007996:	6083      	str	r3, [r0, #8]
 8007998:	8181      	strh	r1, [r0, #12]
 800799a:	6643      	str	r3, [r0, #100]	; 0x64
 800799c:	81c2      	strh	r2, [r0, #14]
 800799e:	6183      	str	r3, [r0, #24]
 80079a0:	4619      	mov	r1, r3
 80079a2:	2208      	movs	r2, #8
 80079a4:	305c      	adds	r0, #92	; 0x5c
 80079a6:	f7ff f833 	bl	8006a10 <memset>
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <std+0x38>)
 80079ac:	6263      	str	r3, [r4, #36]	; 0x24
 80079ae:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <std+0x3c>)
 80079b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80079b2:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <std+0x40>)
 80079b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079b6:	4b05      	ldr	r3, [pc, #20]	; (80079cc <std+0x44>)
 80079b8:	6224      	str	r4, [r4, #32]
 80079ba:	6323      	str	r3, [r4, #48]	; 0x30
 80079bc:	bd10      	pop	{r4, pc}
 80079be:	bf00      	nop
 80079c0:	08007d79 	.word	0x08007d79
 80079c4:	08007d9b 	.word	0x08007d9b
 80079c8:	08007dd3 	.word	0x08007dd3
 80079cc:	08007df7 	.word	0x08007df7

080079d0 <_cleanup_r>:
 80079d0:	4901      	ldr	r1, [pc, #4]	; (80079d8 <_cleanup_r+0x8>)
 80079d2:	f000 b8af 	b.w	8007b34 <_fwalk_reent>
 80079d6:	bf00      	nop
 80079d8:	08007911 	.word	0x08007911

080079dc <__sfmoreglue>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	2268      	movs	r2, #104	; 0x68
 80079e0:	1e4d      	subs	r5, r1, #1
 80079e2:	4355      	muls	r5, r2
 80079e4:	460e      	mov	r6, r1
 80079e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079ea:	f7ff f975 	bl	8006cd8 <_malloc_r>
 80079ee:	4604      	mov	r4, r0
 80079f0:	b140      	cbz	r0, 8007a04 <__sfmoreglue+0x28>
 80079f2:	2100      	movs	r1, #0
 80079f4:	e9c0 1600 	strd	r1, r6, [r0]
 80079f8:	300c      	adds	r0, #12
 80079fa:	60a0      	str	r0, [r4, #8]
 80079fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a00:	f7ff f806 	bl	8006a10 <memset>
 8007a04:	4620      	mov	r0, r4
 8007a06:	bd70      	pop	{r4, r5, r6, pc}

08007a08 <__sfp_lock_acquire>:
 8007a08:	4801      	ldr	r0, [pc, #4]	; (8007a10 <__sfp_lock_acquire+0x8>)
 8007a0a:	f000 b8b3 	b.w	8007b74 <__retarget_lock_acquire_recursive>
 8007a0e:	bf00      	nop
 8007a10:	2000091d 	.word	0x2000091d

08007a14 <__sfp_lock_release>:
 8007a14:	4801      	ldr	r0, [pc, #4]	; (8007a1c <__sfp_lock_release+0x8>)
 8007a16:	f000 b8ae 	b.w	8007b76 <__retarget_lock_release_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	2000091d 	.word	0x2000091d

08007a20 <__sinit_lock_acquire>:
 8007a20:	4801      	ldr	r0, [pc, #4]	; (8007a28 <__sinit_lock_acquire+0x8>)
 8007a22:	f000 b8a7 	b.w	8007b74 <__retarget_lock_acquire_recursive>
 8007a26:	bf00      	nop
 8007a28:	2000091e 	.word	0x2000091e

08007a2c <__sinit_lock_release>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	; (8007a34 <__sinit_lock_release+0x8>)
 8007a2e:	f000 b8a2 	b.w	8007b76 <__retarget_lock_release_recursive>
 8007a32:	bf00      	nop
 8007a34:	2000091e 	.word	0x2000091e

08007a38 <__sinit>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	f7ff fff0 	bl	8007a20 <__sinit_lock_acquire>
 8007a40:	69a3      	ldr	r3, [r4, #24]
 8007a42:	b11b      	cbz	r3, 8007a4c <__sinit+0x14>
 8007a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a48:	f7ff bff0 	b.w	8007a2c <__sinit_lock_release>
 8007a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a50:	6523      	str	r3, [r4, #80]	; 0x50
 8007a52:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <__sinit+0x68>)
 8007a54:	4a13      	ldr	r2, [pc, #76]	; (8007aa4 <__sinit+0x6c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a5a:	42a3      	cmp	r3, r4
 8007a5c:	bf04      	itt	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	61a3      	streq	r3, [r4, #24]
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f820 	bl	8007aa8 <__sfp>
 8007a68:	6060      	str	r0, [r4, #4]
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 f81c 	bl	8007aa8 <__sfp>
 8007a70:	60a0      	str	r0, [r4, #8]
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 f818 	bl	8007aa8 <__sfp>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	60e0      	str	r0, [r4, #12]
 8007a7c:	2104      	movs	r1, #4
 8007a7e:	6860      	ldr	r0, [r4, #4]
 8007a80:	f7ff ff82 	bl	8007988 <std>
 8007a84:	68a0      	ldr	r0, [r4, #8]
 8007a86:	2201      	movs	r2, #1
 8007a88:	2109      	movs	r1, #9
 8007a8a:	f7ff ff7d 	bl	8007988 <std>
 8007a8e:	68e0      	ldr	r0, [r4, #12]
 8007a90:	2202      	movs	r2, #2
 8007a92:	2112      	movs	r1, #18
 8007a94:	f7ff ff78 	bl	8007988 <std>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	61a3      	str	r3, [r4, #24]
 8007a9c:	e7d2      	b.n	8007a44 <__sinit+0xc>
 8007a9e:	bf00      	nop
 8007aa0:	0800864c 	.word	0x0800864c
 8007aa4:	080079d1 	.word	0x080079d1

08007aa8 <__sfp>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	4607      	mov	r7, r0
 8007aac:	f7ff ffac 	bl	8007a08 <__sfp_lock_acquire>
 8007ab0:	4b1e      	ldr	r3, [pc, #120]	; (8007b2c <__sfp+0x84>)
 8007ab2:	681e      	ldr	r6, [r3, #0]
 8007ab4:	69b3      	ldr	r3, [r6, #24]
 8007ab6:	b913      	cbnz	r3, 8007abe <__sfp+0x16>
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f7ff ffbd 	bl	8007a38 <__sinit>
 8007abe:	3648      	adds	r6, #72	; 0x48
 8007ac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	d503      	bpl.n	8007ad0 <__sfp+0x28>
 8007ac8:	6833      	ldr	r3, [r6, #0]
 8007aca:	b30b      	cbz	r3, 8007b10 <__sfp+0x68>
 8007acc:	6836      	ldr	r6, [r6, #0]
 8007ace:	e7f7      	b.n	8007ac0 <__sfp+0x18>
 8007ad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ad4:	b9d5      	cbnz	r5, 8007b0c <__sfp+0x64>
 8007ad6:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <__sfp+0x88>)
 8007ad8:	60e3      	str	r3, [r4, #12]
 8007ada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ade:	6665      	str	r5, [r4, #100]	; 0x64
 8007ae0:	f000 f847 	bl	8007b72 <__retarget_lock_init_recursive>
 8007ae4:	f7ff ff96 	bl	8007a14 <__sfp_lock_release>
 8007ae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007aec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007af0:	6025      	str	r5, [r4, #0]
 8007af2:	61a5      	str	r5, [r4, #24]
 8007af4:	2208      	movs	r2, #8
 8007af6:	4629      	mov	r1, r5
 8007af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007afc:	f7fe ff88 	bl	8006a10 <memset>
 8007b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b08:	4620      	mov	r0, r4
 8007b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b0c:	3468      	adds	r4, #104	; 0x68
 8007b0e:	e7d9      	b.n	8007ac4 <__sfp+0x1c>
 8007b10:	2104      	movs	r1, #4
 8007b12:	4638      	mov	r0, r7
 8007b14:	f7ff ff62 	bl	80079dc <__sfmoreglue>
 8007b18:	4604      	mov	r4, r0
 8007b1a:	6030      	str	r0, [r6, #0]
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d1d5      	bne.n	8007acc <__sfp+0x24>
 8007b20:	f7ff ff78 	bl	8007a14 <__sfp_lock_release>
 8007b24:	230c      	movs	r3, #12
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	e7ee      	b.n	8007b08 <__sfp+0x60>
 8007b2a:	bf00      	nop
 8007b2c:	0800864c 	.word	0x0800864c
 8007b30:	ffff0001 	.word	0xffff0001

08007b34 <_fwalk_reent>:
 8007b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	4606      	mov	r6, r0
 8007b3a:	4688      	mov	r8, r1
 8007b3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b40:	2700      	movs	r7, #0
 8007b42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b46:	f1b9 0901 	subs.w	r9, r9, #1
 8007b4a:	d505      	bpl.n	8007b58 <_fwalk_reent+0x24>
 8007b4c:	6824      	ldr	r4, [r4, #0]
 8007b4e:	2c00      	cmp	r4, #0
 8007b50:	d1f7      	bne.n	8007b42 <_fwalk_reent+0xe>
 8007b52:	4638      	mov	r0, r7
 8007b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b58:	89ab      	ldrh	r3, [r5, #12]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d907      	bls.n	8007b6e <_fwalk_reent+0x3a>
 8007b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b62:	3301      	adds	r3, #1
 8007b64:	d003      	beq.n	8007b6e <_fwalk_reent+0x3a>
 8007b66:	4629      	mov	r1, r5
 8007b68:	4630      	mov	r0, r6
 8007b6a:	47c0      	blx	r8
 8007b6c:	4307      	orrs	r7, r0
 8007b6e:	3568      	adds	r5, #104	; 0x68
 8007b70:	e7e9      	b.n	8007b46 <_fwalk_reent+0x12>

08007b72 <__retarget_lock_init_recursive>:
 8007b72:	4770      	bx	lr

08007b74 <__retarget_lock_acquire_recursive>:
 8007b74:	4770      	bx	lr

08007b76 <__retarget_lock_release_recursive>:
 8007b76:	4770      	bx	lr

08007b78 <__swhatbuf_r>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	460e      	mov	r6, r1
 8007b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b80:	2900      	cmp	r1, #0
 8007b82:	b096      	sub	sp, #88	; 0x58
 8007b84:	4614      	mov	r4, r2
 8007b86:	461d      	mov	r5, r3
 8007b88:	da08      	bge.n	8007b9c <__swhatbuf_r+0x24>
 8007b8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	602a      	str	r2, [r5, #0]
 8007b92:	061a      	lsls	r2, r3, #24
 8007b94:	d410      	bmi.n	8007bb8 <__swhatbuf_r+0x40>
 8007b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b9a:	e00e      	b.n	8007bba <__swhatbuf_r+0x42>
 8007b9c:	466a      	mov	r2, sp
 8007b9e:	f000 f951 	bl	8007e44 <_fstat_r>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	dbf1      	blt.n	8007b8a <__swhatbuf_r+0x12>
 8007ba6:	9a01      	ldr	r2, [sp, #4]
 8007ba8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bb0:	425a      	negs	r2, r3
 8007bb2:	415a      	adcs	r2, r3
 8007bb4:	602a      	str	r2, [r5, #0]
 8007bb6:	e7ee      	b.n	8007b96 <__swhatbuf_r+0x1e>
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	2000      	movs	r0, #0
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	b016      	add	sp, #88	; 0x58
 8007bc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bc4 <__smakebuf_r>:
 8007bc4:	898b      	ldrh	r3, [r1, #12]
 8007bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bc8:	079d      	lsls	r5, r3, #30
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460c      	mov	r4, r1
 8007bce:	d507      	bpl.n	8007be0 <__smakebuf_r+0x1c>
 8007bd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	6123      	str	r3, [r4, #16]
 8007bd8:	2301      	movs	r3, #1
 8007bda:	6163      	str	r3, [r4, #20]
 8007bdc:	b002      	add	sp, #8
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	ab01      	add	r3, sp, #4
 8007be2:	466a      	mov	r2, sp
 8007be4:	f7ff ffc8 	bl	8007b78 <__swhatbuf_r>
 8007be8:	9900      	ldr	r1, [sp, #0]
 8007bea:	4605      	mov	r5, r0
 8007bec:	4630      	mov	r0, r6
 8007bee:	f7ff f873 	bl	8006cd8 <_malloc_r>
 8007bf2:	b948      	cbnz	r0, 8007c08 <__smakebuf_r+0x44>
 8007bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf8:	059a      	lsls	r2, r3, #22
 8007bfa:	d4ef      	bmi.n	8007bdc <__smakebuf_r+0x18>
 8007bfc:	f023 0303 	bic.w	r3, r3, #3
 8007c00:	f043 0302 	orr.w	r3, r3, #2
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	e7e3      	b.n	8007bd0 <__smakebuf_r+0xc>
 8007c08:	4b0d      	ldr	r3, [pc, #52]	; (8007c40 <__smakebuf_r+0x7c>)
 8007c0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	6020      	str	r0, [r4, #0]
 8007c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	9b00      	ldr	r3, [sp, #0]
 8007c18:	6163      	str	r3, [r4, #20]
 8007c1a:	9b01      	ldr	r3, [sp, #4]
 8007c1c:	6120      	str	r0, [r4, #16]
 8007c1e:	b15b      	cbz	r3, 8007c38 <__smakebuf_r+0x74>
 8007c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c24:	4630      	mov	r0, r6
 8007c26:	f000 f91f 	bl	8007e68 <_isatty_r>
 8007c2a:	b128      	cbz	r0, 8007c38 <__smakebuf_r+0x74>
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	f043 0301 	orr.w	r3, r3, #1
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	89a0      	ldrh	r0, [r4, #12]
 8007c3a:	4305      	orrs	r5, r0
 8007c3c:	81a5      	strh	r5, [r4, #12]
 8007c3e:	e7cd      	b.n	8007bdc <__smakebuf_r+0x18>
 8007c40:	080079d1 	.word	0x080079d1

08007c44 <memmove>:
 8007c44:	4288      	cmp	r0, r1
 8007c46:	b510      	push	{r4, lr}
 8007c48:	eb01 0402 	add.w	r4, r1, r2
 8007c4c:	d902      	bls.n	8007c54 <memmove+0x10>
 8007c4e:	4284      	cmp	r4, r0
 8007c50:	4623      	mov	r3, r4
 8007c52:	d807      	bhi.n	8007c64 <memmove+0x20>
 8007c54:	1e43      	subs	r3, r0, #1
 8007c56:	42a1      	cmp	r1, r4
 8007c58:	d008      	beq.n	8007c6c <memmove+0x28>
 8007c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c62:	e7f8      	b.n	8007c56 <memmove+0x12>
 8007c64:	4402      	add	r2, r0
 8007c66:	4601      	mov	r1, r0
 8007c68:	428a      	cmp	r2, r1
 8007c6a:	d100      	bne.n	8007c6e <memmove+0x2a>
 8007c6c:	bd10      	pop	{r4, pc}
 8007c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c76:	e7f7      	b.n	8007c68 <memmove+0x24>

08007c78 <__malloc_lock>:
 8007c78:	4801      	ldr	r0, [pc, #4]	; (8007c80 <__malloc_lock+0x8>)
 8007c7a:	f7ff bf7b 	b.w	8007b74 <__retarget_lock_acquire_recursive>
 8007c7e:	bf00      	nop
 8007c80:	2000091c 	.word	0x2000091c

08007c84 <__malloc_unlock>:
 8007c84:	4801      	ldr	r0, [pc, #4]	; (8007c8c <__malloc_unlock+0x8>)
 8007c86:	f7ff bf76 	b.w	8007b76 <__retarget_lock_release_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	2000091c 	.word	0x2000091c

08007c90 <_realloc_r>:
 8007c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c94:	4680      	mov	r8, r0
 8007c96:	4614      	mov	r4, r2
 8007c98:	460e      	mov	r6, r1
 8007c9a:	b921      	cbnz	r1, 8007ca6 <_realloc_r+0x16>
 8007c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	f7ff b819 	b.w	8006cd8 <_malloc_r>
 8007ca6:	b92a      	cbnz	r2, 8007cb4 <_realloc_r+0x24>
 8007ca8:	f7fe ffaa 	bl	8006c00 <_free_r>
 8007cac:	4625      	mov	r5, r4
 8007cae:	4628      	mov	r0, r5
 8007cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb4:	f000 f8fa 	bl	8007eac <_malloc_usable_size_r>
 8007cb8:	4284      	cmp	r4, r0
 8007cba:	4607      	mov	r7, r0
 8007cbc:	d802      	bhi.n	8007cc4 <_realloc_r+0x34>
 8007cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cc2:	d812      	bhi.n	8007cea <_realloc_r+0x5a>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f7ff f806 	bl	8006cd8 <_malloc_r>
 8007ccc:	4605      	mov	r5, r0
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d0ed      	beq.n	8007cae <_realloc_r+0x1e>
 8007cd2:	42bc      	cmp	r4, r7
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	bf28      	it	cs
 8007cda:	463a      	movcs	r2, r7
 8007cdc:	f7fe fe8a 	bl	80069f4 <memcpy>
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	f7fe ff8c 	bl	8006c00 <_free_r>
 8007ce8:	e7e1      	b.n	8007cae <_realloc_r+0x1e>
 8007cea:	4635      	mov	r5, r6
 8007cec:	e7df      	b.n	8007cae <_realloc_r+0x1e>

08007cee <_raise_r>:
 8007cee:	291f      	cmp	r1, #31
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	460d      	mov	r5, r1
 8007cf6:	d904      	bls.n	8007d02 <_raise_r+0x14>
 8007cf8:	2316      	movs	r3, #22
 8007cfa:	6003      	str	r3, [r0, #0]
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d04:	b112      	cbz	r2, 8007d0c <_raise_r+0x1e>
 8007d06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d0a:	b94b      	cbnz	r3, 8007d20 <_raise_r+0x32>
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 f831 	bl	8007d74 <_getpid_r>
 8007d12:	462a      	mov	r2, r5
 8007d14:	4601      	mov	r1, r0
 8007d16:	4620      	mov	r0, r4
 8007d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d1c:	f000 b818 	b.w	8007d50 <_kill_r>
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d00a      	beq.n	8007d3a <_raise_r+0x4c>
 8007d24:	1c59      	adds	r1, r3, #1
 8007d26:	d103      	bne.n	8007d30 <_raise_r+0x42>
 8007d28:	2316      	movs	r3, #22
 8007d2a:	6003      	str	r3, [r0, #0]
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	e7e7      	b.n	8007d00 <_raise_r+0x12>
 8007d30:	2400      	movs	r4, #0
 8007d32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d36:	4628      	mov	r0, r5
 8007d38:	4798      	blx	r3
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e7e0      	b.n	8007d00 <_raise_r+0x12>
	...

08007d40 <raise>:
 8007d40:	4b02      	ldr	r3, [pc, #8]	; (8007d4c <raise+0xc>)
 8007d42:	4601      	mov	r1, r0
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f7ff bfd2 	b.w	8007cee <_raise_r>
 8007d4a:	bf00      	nop
 8007d4c:	20000060 	.word	0x20000060

08007d50 <_kill_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d07      	ldr	r5, [pc, #28]	; (8007d70 <_kill_r+0x20>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	602b      	str	r3, [r5, #0]
 8007d5e:	f7fa fd63 	bl	8002828 <_kill>
 8007d62:	1c43      	adds	r3, r0, #1
 8007d64:	d102      	bne.n	8007d6c <_kill_r+0x1c>
 8007d66:	682b      	ldr	r3, [r5, #0]
 8007d68:	b103      	cbz	r3, 8007d6c <_kill_r+0x1c>
 8007d6a:	6023      	str	r3, [r4, #0]
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000918 	.word	0x20000918

08007d74 <_getpid_r>:
 8007d74:	f7fa bd50 	b.w	8002818 <_getpid>

08007d78 <__sread>:
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d80:	f000 f89c 	bl	8007ebc <_read_r>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	bfab      	itete	ge
 8007d88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d8c:	181b      	addge	r3, r3, r0
 8007d8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d92:	bfac      	ite	ge
 8007d94:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d96:	81a3      	strhlt	r3, [r4, #12]
 8007d98:	bd10      	pop	{r4, pc}

08007d9a <__swrite>:
 8007d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9e:	461f      	mov	r7, r3
 8007da0:	898b      	ldrh	r3, [r1, #12]
 8007da2:	05db      	lsls	r3, r3, #23
 8007da4:	4605      	mov	r5, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	4616      	mov	r6, r2
 8007daa:	d505      	bpl.n	8007db8 <__swrite+0x1e>
 8007dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db0:	2302      	movs	r3, #2
 8007db2:	2200      	movs	r2, #0
 8007db4:	f000 f868 	bl	8007e88 <_lseek_r>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	463b      	mov	r3, r7
 8007dc8:	4628      	mov	r0, r5
 8007dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dce:	f000 b817 	b.w	8007e00 <_write_r>

08007dd2 <__sseek>:
 8007dd2:	b510      	push	{r4, lr}
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dda:	f000 f855 	bl	8007e88 <_lseek_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	89a3      	ldrh	r3, [r4, #12]
 8007de2:	bf15      	itete	ne
 8007de4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dee:	81a3      	strheq	r3, [r4, #12]
 8007df0:	bf18      	it	ne
 8007df2:	81a3      	strhne	r3, [r4, #12]
 8007df4:	bd10      	pop	{r4, pc}

08007df6 <__sclose>:
 8007df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfa:	f000 b813 	b.w	8007e24 <_close_r>
	...

08007e00 <_write_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4d07      	ldr	r5, [pc, #28]	; (8007e20 <_write_r+0x20>)
 8007e04:	4604      	mov	r4, r0
 8007e06:	4608      	mov	r0, r1
 8007e08:	4611      	mov	r1, r2
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	602a      	str	r2, [r5, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f7fa fd41 	bl	8002896 <_write>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_write_r+0x1e>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_write_r+0x1e>
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	20000918 	.word	0x20000918

08007e24 <_close_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d06      	ldr	r5, [pc, #24]	; (8007e40 <_close_r+0x1c>)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	602b      	str	r3, [r5, #0]
 8007e30:	f7fa fd4d 	bl	80028ce <_close>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_close_r+0x1a>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_close_r+0x1a>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	20000918 	.word	0x20000918

08007e44 <_fstat_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d07      	ldr	r5, [pc, #28]	; (8007e64 <_fstat_r+0x20>)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	4611      	mov	r1, r2
 8007e50:	602b      	str	r3, [r5, #0]
 8007e52:	f7fa fd48 	bl	80028e6 <_fstat>
 8007e56:	1c43      	adds	r3, r0, #1
 8007e58:	d102      	bne.n	8007e60 <_fstat_r+0x1c>
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	b103      	cbz	r3, 8007e60 <_fstat_r+0x1c>
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	bd38      	pop	{r3, r4, r5, pc}
 8007e62:	bf00      	nop
 8007e64:	20000918 	.word	0x20000918

08007e68 <_isatty_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d06      	ldr	r5, [pc, #24]	; (8007e84 <_isatty_r+0x1c>)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	602b      	str	r3, [r5, #0]
 8007e74:	f7fa fd47 	bl	8002906 <_isatty>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d102      	bne.n	8007e82 <_isatty_r+0x1a>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	b103      	cbz	r3, 8007e82 <_isatty_r+0x1a>
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	20000918 	.word	0x20000918

08007e88 <_lseek_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d07      	ldr	r5, [pc, #28]	; (8007ea8 <_lseek_r+0x20>)
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	4608      	mov	r0, r1
 8007e90:	4611      	mov	r1, r2
 8007e92:	2200      	movs	r2, #0
 8007e94:	602a      	str	r2, [r5, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f7fa fd40 	bl	800291c <_lseek>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_lseek_r+0x1e>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_lseek_r+0x1e>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	20000918 	.word	0x20000918

08007eac <_malloc_usable_size_r>:
 8007eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb0:	1f18      	subs	r0, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bfbc      	itt	lt
 8007eb6:	580b      	ldrlt	r3, [r1, r0]
 8007eb8:	18c0      	addlt	r0, r0, r3
 8007eba:	4770      	bx	lr

08007ebc <_read_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d07      	ldr	r5, [pc, #28]	; (8007edc <_read_r+0x20>)
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	602a      	str	r2, [r5, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f7fa fcc6 	bl	800285c <_read>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_read_r+0x1e>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_read_r+0x1e>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20000918 	.word	0x20000918

08007ee0 <_gettimeofday>:
 8007ee0:	4b02      	ldr	r3, [pc, #8]	; (8007eec <_gettimeofday+0xc>)
 8007ee2:	2258      	movs	r2, #88	; 0x58
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eea:	4770      	bx	lr
 8007eec:	20000918 	.word	0x20000918

08007ef0 <_init>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr

08007efc <_fini>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	bf00      	nop
 8007f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f02:	bc08      	pop	{r3}
 8007f04:	469e      	mov	lr, r3
 8007f06:	4770      	bx	lr
