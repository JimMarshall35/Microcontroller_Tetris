
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08007110  08007110  00017110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007908  08007908  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08007908  08007908  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007908  08007908  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000007b0  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000848  20000848  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e35  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d06  00000000  00000000  00032efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00035c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f68  00000000  00000000  00036ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dc29  00000000  00000000  00037c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143a9  00000000  00000000  00055831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac254  00000000  00000000  00069bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115e2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005034  00000000  00000000  00115e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0011aeb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0011aed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070f8 	.word	0x080070f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080070f8 	.word	0x080070f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStick>:

#include "AnalogStick.h"

u16 AD_RES = 0;

void ReadAnalogStick(ADC_HandleTypeDef* adc, u16* outputX, u16* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
		//LCD_PCD8544_clear_ram(&gLcdScreen);
		HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f002 f8bd 	bl	800240c <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f002 f96f 	bl	8002578 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Map It To PWM DutyCycle
		AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f002 fa3a 	bl	8002714 <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <ReadAnalogStick+0x74>)
 80002a6:	801a      	strh	r2, [r3, #0]
		uint16_t y = AD_RES;
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <ReadAnalogStick+0x74>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

		// Start ADC Conversion
		HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f002 f8ac 	bl	800240c <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f002 f95e 	bl	8002578 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Map It To PWM DutyCycle
		AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f002 fa29 	bl	8002714 <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <ReadAnalogStick+0x74>)
 80002c8:	801a      	strh	r2, [r3, #0]
		uint16_t x = AD_RES;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <ReadAnalogStick+0x74>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
		x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]

		y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

		*outputX = x;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	8aba      	ldrh	r2, [r7, #20]
 80002e4:	801a      	strh	r2, [r3, #0]
		*outputY = y;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	8afa      	ldrh	r2, [r7, #22]
 80002ea:	801a      	strh	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	3718      	adds	r7, #24
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200000b4 	.word	0x200000b4

080002f8 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer>:
// copy all the regions of the frame buffer that are marked as needing to be updated
// to the lcd screen
void gfxFinishDrawing(LCD_PCD8544_screen_t* scr);


void UpdateScreenRegionsToUpdate_ClearedFrameBuffer(){
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	e01c      	b.n	800033e <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x46>
		gScreenRegionsToUpdate[i].updateNeeded = true;
 8000304:	4913      	ldr	r1, [pc, #76]	; (8000354 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x5c>)
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	4613      	mov	r3, r2
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	4413      	add	r3, r2
 800030e:	440b      	add	r3, r1
 8000310:	2201      	movs	r2, #1
 8000312:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000314:	490f      	ldr	r1, [pc, #60]	; (8000354 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x5c>)
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4613      	mov	r3, r2
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	4413      	add	r3, r2
 800031e:	440b      	add	r3, r1
 8000320:	3301      	adds	r3, #1
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
 8000326:	490b      	ldr	r1, [pc, #44]	; (8000354 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x5c>)
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	4613      	mov	r3, r2
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	4413      	add	r3, r2
 8000330:	440b      	add	r3, r1
 8000332:	3302      	adds	r3, #2
 8000334:	2254      	movs	r2, #84	; 0x54
 8000336:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3301      	adds	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b05      	cmp	r3, #5
 8000342:	dddf      	ble.n	8000304 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0xc>
	}
}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	200002b0 	.word	0x200002b0

08000358 <gfxClearFrameBuffer>:

void gfxClearFrameBuffer(){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 800035c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000360:	2100      	movs	r1, #0
 8000362:	4803      	ldr	r0, [pc, #12]	; (8000370 <gfxClearFrameBuffer+0x18>)
 8000364:	f005 fc58 	bl	8005c18 <memset>
	UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
 8000368:	f7ff ffc6 	bl	80002f8 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer>
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200000b8 	.word	0x200000b8

08000374 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	460a      	mov	r2, r1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	4613      	mov	r3, r2
 8000382:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b53      	cmp	r3, #83	; 0x53
 8000388:	d825      	bhi.n	80003d6 <gfxPlotPixelInternal+0x62>
 800038a:	79bb      	ldrb	r3, [r7, #6]
 800038c:	2b2e      	cmp	r3, #46	; 0x2e
 800038e:	d822      	bhi.n	80003d6 <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	08db      	lsrs	r3, r3, #3
 8000394:	b2db      	uxtb	r3, r3
 8000396:	461a      	mov	r2, r3
 8000398:	2354      	movs	r3, #84	; 0x54
 800039a:	fb03 f202 	mul.w	r2, r3, r2
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4413      	add	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80003aa:	d215      	bcs.n	80003d8 <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <gfxPlotPixelInternal+0x70>)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	b25a      	sxtb	r2, r3
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	f003 0307 	and.w	r3, r3, #7
 80003bc:	2101      	movs	r1, #1
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	b25b      	sxtb	r3, r3
 80003c4:	4313      	orrs	r3, r2
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	b2d9      	uxtb	r1, r3
 80003ca:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <gfxPlotPixelInternal+0x70>)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	4413      	add	r3, r2
 80003d0:	460a      	mov	r2, r1
 80003d2:	701a      	strb	r2, [r3, #0]
 80003d4:	e000      	b.n	80003d8 <gfxPlotPixelInternal+0x64>
		return;
 80003d6:	bf00      	nop
}
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	200000b8 	.word	0x200000b8

080003e8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4604      	mov	r4, r0
 80003f0:	4608      	mov	r0, r1
 80003f2:	4611      	mov	r1, r2
 80003f4:	461a      	mov	r2, r3
 80003f6:	4623      	mov	r3, r4
 80003f8:	71fb      	strb	r3, [r7, #7]
 80003fa:	4603      	mov	r3, r0
 80003fc:	71bb      	strb	r3, [r7, #6]
 80003fe:	460b      	mov	r3, r1
 8000400:	717b      	strb	r3, [r7, #5]
 8000402:	4613      	mov	r3, r2
 8000404:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	e01c      	b.n	8000446 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 800040c:	4913      	ldr	r1, [pc, #76]	; (800045c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4613      	mov	r3, r2
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	4413      	add	r3, r2
 8000416:	440b      	add	r3, r1
 8000418:	2201      	movs	r2, #1
 800041a:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 800041c:	490f      	ldr	r1, [pc, #60]	; (800045c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	4613      	mov	r3, r2
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	4413      	add	r3, r2
 8000426:	440b      	add	r3, r1
 8000428:	3301      	adds	r3, #1
 800042a:	797a      	ldrb	r2, [r7, #5]
 800042c:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 800042e:	490b      	ldr	r1, [pc, #44]	; (800045c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	4613      	mov	r3, r2
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	4413      	add	r3, r2
 8000438:	440b      	add	r3, r1
 800043a:	3302      	adds	r3, #2
 800043c:	793a      	ldrb	r2, [r7, #4]
 800043e:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	3301      	adds	r3, #1
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	429a      	cmp	r2, r3
 800044c:	ddde      	ble.n	800040c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 800044e:	bf00      	nop
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bc90      	pop	{r4, r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	200002b0 	.word	0x200002b0

08000460 <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b089      	sub	sp, #36	; 0x24
 8000464:	af00      	add	r7, sp, #0
 8000466:	4604      	mov	r4, r0
 8000468:	4608      	mov	r0, r1
 800046a:	4611      	mov	r1, r2
 800046c:	461a      	mov	r2, r3
 800046e:	4623      	mov	r3, r4
 8000470:	71fb      	strb	r3, [r7, #7]
 8000472:	4603      	mov	r3, r0
 8000474:	71bb      	strb	r3, [r7, #6]
 8000476:	460b      	mov	r3, r1
 8000478:	717b      	strb	r3, [r7, #5]
 800047a:	4613      	mov	r3, r2
 800047c:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800047e:	797a      	ldrb	r2, [r7, #5]
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 8000486:	793a      	ldrb	r2, [r7, #4]
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 800048e:	2301      	movs	r3, #1
 8000490:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	2b00      	cmp	r3, #0
 8000496:	da05      	bge.n	80004a4 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 8000498:	f04f 33ff 	mov.w	r3, #4294967295
 800049c:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	425b      	negs	r3, r3
 80004a2:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 80004a4:	69fb      	ldr	r3, [r7, #28]
 80004a6:	005a      	lsls	r2, r3, #1
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	e01e      	b.n	80004f6 <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	693a      	ldr	r2, [r7, #16]
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff56 	bl	8000374 <gfxPlotPixelInternal>
		if(D > 0){
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	dd0b      	ble.n	80004e6 <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 80004ce:	693a      	ldr	r2, [r7, #16]
 80004d0:	69bb      	ldr	r3, [r7, #24]
 80004d2:	4413      	add	r3, r2
 80004d4:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 80004d6:	69fa      	ldr	r2, [r7, #28]
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	4413      	add	r3, r2
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e004      	b.n	80004f0 <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	697a      	ldr	r2, [r7, #20]
 80004ec:	4413      	add	r3, r2
 80004ee:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	797b      	ldrb	r3, [r7, #5]
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dddc      	ble.n	80004b8 <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	3724      	adds	r7, #36	; 0x24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd90      	pop	{r4, r7, pc}

08000508 <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	4604      	mov	r4, r0
 8000510:	4608      	mov	r0, r1
 8000512:	4611      	mov	r1, r2
 8000514:	461a      	mov	r2, r3
 8000516:	4623      	mov	r3, r4
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	4603      	mov	r3, r0
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	460b      	mov	r3, r1
 8000520:	717b      	strb	r3, [r7, #5]
 8000522:	4613      	mov	r3, r2
 8000524:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 8000526:	797a      	ldrb	r2, [r7, #5]
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 800052e:	793a      	ldrb	r2, [r7, #4]
 8000530:	79bb      	ldrb	r3, [r7, #6]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	2b00      	cmp	r3, #0
 800053e:	da04      	bge.n	800054a <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	425b      	negs	r3, r3
 8000548:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	005a      	lsls	r2, r3, #1
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e01e      	b.n	800059c <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff03 	bl	8000374 <gfxPlotPixelInternal>
		if(D > 0){
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	2b00      	cmp	r3, #0
 8000572:	dd0b      	ble.n	800058c <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 8000574:	693a      	ldr	r2, [r7, #16]
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	4413      	add	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 800057c:	69fa      	ldr	r2, [r7, #28]
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	4413      	add	r3, r2
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	e004      	b.n	8000596 <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	4413      	add	r3, r2
 8000594:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	793b      	ldrb	r3, [r7, #4]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dddc      	ble.n	800055e <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3724      	adds	r7, #36	; 0x24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd90      	pop	{r4, r7, pc}

080005ae <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 80005ae:	b590      	push	{r4, r7, lr}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	4604      	mov	r4, r0
 80005b6:	4608      	mov	r0, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	461a      	mov	r2, r3
 80005bc:	4623      	mov	r3, r4
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4603      	mov	r3, r0
 80005c2:	71bb      	strb	r3, [r7, #6]
 80005c4:	460b      	mov	r3, r1
 80005c6:	717b      	strb	r3, [r7, #5]
 80005c8:	4613      	mov	r3, r2
 80005ca:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 80005cc:	793a      	ldrb	r2, [r7, #4]
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005d6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005da:	7979      	ldrb	r1, [r7, #5]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	1acb      	subs	r3, r1, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bfb8      	it	lt
 80005e4:	425b      	neglt	r3, r3
 80005e6:	429a      	cmp	r2, r3
 80005e8:	da11      	bge.n	800060e <gfxDrawLine+0x60>
		if(x0 > x1){
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	797b      	ldrb	r3, [r7, #5]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d906      	bls.n	8000600 <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	79fa      	ldrb	r2, [r7, #7]
 80005f6:	7939      	ldrb	r1, [r7, #4]
 80005f8:	7978      	ldrb	r0, [r7, #5]
 80005fa:	f7ff ff31 	bl	8000460 <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 80005fe:	e017      	b.n	8000630 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 8000600:	793b      	ldrb	r3, [r7, #4]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	79b9      	ldrb	r1, [r7, #6]
 8000606:	79f8      	ldrb	r0, [r7, #7]
 8000608:	f7ff ff2a 	bl	8000460 <gfxDrawLineBresenhamLow>
}
 800060c:	e010      	b.n	8000630 <gfxDrawLine+0x82>
		if(y0 > y1){
 800060e:	79ba      	ldrb	r2, [r7, #6]
 8000610:	793b      	ldrb	r3, [r7, #4]
 8000612:	429a      	cmp	r2, r3
 8000614:	d906      	bls.n	8000624 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	7939      	ldrb	r1, [r7, #4]
 800061c:	7978      	ldrb	r0, [r7, #5]
 800061e:	f7ff ff73 	bl	8000508 <gfxDrawLineBresenhamHigh>
}
 8000622:	e005      	b.n	8000630 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	797a      	ldrb	r2, [r7, #5]
 8000628:	79b9      	ldrb	r1, [r7, #6]
 800062a:	79f8      	ldrb	r0, [r7, #7]
 800062c:	f7ff ff6c 	bl	8000508 <gfxDrawLineBresenhamHigh>
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bd90      	pop	{r4, r7, pc}

08000638 <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 8000638:	b580      	push	{r7, lr}
 800063a:	b08e      	sub	sp, #56	; 0x38
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 8000640:	2300      	movs	r3, #0
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000644:	e067      	b.n	8000716 <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 8000646:	4938      	ldr	r1, [pc, #224]	; (8000728 <gfxFinishDrawing+0xf0>)
 8000648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	440b      	add	r3, r1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d15b      	bne.n	8000710 <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 8000658:	4933      	ldr	r1, [pc, #204]	; (8000728 <gfxFinishDrawing+0xf0>)
 800065a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800065c:	4613      	mov	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4413      	add	r3, r2
 8000662:	440b      	add	r3, r1
 8000664:	3301      	adds	r3, #1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 800066c:	492e      	ldr	r1, [pc, #184]	; (8000728 <gfxFinishDrawing+0xf0>)
 800066e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	440b      	add	r3, r1
 8000678:	3302      	adds	r3, #2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 8000680:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000688:	429a      	cmp	r2, r3
 800068a:	d20b      	bcs.n	80006a4 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 800068c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000690:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000694:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800069c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80006a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 80006a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a6:	2254      	movs	r2, #84	; 0x54
 80006a8:	fb02 f303 	mul.w	r3, r2, r3
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 80006ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b0:	b2d9      	uxtb	r1, r3
 80006b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80006b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b8:	4413      	add	r3, r2
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <gfxFinishDrawing+0xf4>)
 80006bc:	1898      	adds	r0, r3, r2
 80006be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4603      	mov	r3, r0
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f82a 	bl	8000730 <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 80006dc:	4912      	ldr	r1, [pc, #72]	; (8000728 <gfxFinishDrawing+0xf0>)
 80006de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 80006ec:	490e      	ldr	r1, [pc, #56]	; (8000728 <gfxFinishDrawing+0xf0>)
 80006ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	3301      	adds	r3, #1
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 80006fe:	490a      	ldr	r1, [pc, #40]	; (8000728 <gfxFinishDrawing+0xf0>)
 8000700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	440b      	add	r3, r1
 800070a:	3302      	adds	r3, #2
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 8000710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000712:	3301      	adds	r3, #1
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000718:	2b05      	cmp	r3, #5
 800071a:	dd94      	ble.n	8000646 <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3730      	adds	r7, #48	; 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200002b0 	.word	0x200002b0
 800072c:	200000b8 	.word	0x200000b8

08000730 <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	72fb      	strb	r3, [r7, #11]
 800073e:	4613      	mov	r3, r2
 8000740:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f000 ffde 	bl	800170c <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 fffb 	bl	800174c <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8000756:	7dfa      	ldrb	r2, [r7, #23]
 8000758:	7db9      	ldrb	r1, [r7, #22]
 800075a:	2300      	movs	r3, #0
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f000 fefe 	bl	800155e <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 8000762:	7aba      	ldrb	r2, [r7, #10]
 8000764:	7afb      	ldrb	r3, [r7, #11]
 8000766:	4619      	mov	r1, r3
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f000 ff4b 	bl	8001604 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f000 fffc 	bl	800176c <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f000 ffd9 	bl	800172c <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f000 ffe6 	bl	800174c <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8000780:	8c3b      	ldrh	r3, [r7, #32]
 8000782:	461a      	mov	r2, r3
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f000 feb6 	bl	80014f8 <LCD_PCD8544_LL_send_data>
 800078c:	4603      	mov	r3, r0
 800078e:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f000 ffeb 	bl	800176c <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8000796:	7d7b      	ldrb	r3, [r7, #21]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	603a      	str	r2, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	460b      	mov	r3, r1
 80007ae:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 80007b0:	6838      	ldr	r0, [r7, #0]
 80007b2:	f7ff fd0d 	bl	80001d0 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 80007bc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	461a      	mov	r2, r3
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	4413      	add	r3, r2
 80007ce:	2b54      	cmp	r3, #84	; 0x54
 80007d0:	dd04      	ble.n	80007dc <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 80007d2:	230e      	movs	r3, #14
 80007d4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2254      	movs	r2, #84	; 0x54
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f005 fa17 	bl	8005c18 <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 80007f0:	e029      	b.n	8000846 <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 80007f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d029      	beq.n	8000854 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 8000800:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 800080e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	461a      	mov	r2, r3
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	1898      	adds	r0, r3, r2
 8000822:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	461a      	mov	r2, r3
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <gfxWriteTextLineToFrameBuffer+0xf4>)
 8000832:	4413      	add	r3, r2
 8000834:	2206      	movs	r2, #6
 8000836:	4619      	mov	r1, r3
 8000838:	f005 f9e0 	bl	8005bfc <memcpy>
	for ( ; nChars<strLen; nChars++) {
 800083c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000840:	3301      	adds	r3, #1
 8000842:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000846:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800084a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800084e:	429a      	cmp	r2, r3
 8000850:	d3cf      	bcc.n	80007f2 <gfxWriteTextLineToFrameBuffer+0x52>
 8000852:	e000      	b.n	8000856 <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 8000854:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2254      	movs	r2, #84	; 0x54
 800085a:	fb02 f303 	mul.w	r3, r2, r3
 800085e:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 8000860:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000864:	b2db      	uxtb	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	0052      	lsls	r2, r2, #1
 800086a:	4413      	add	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 8000872:	79ba      	ldrb	r2, [r7, #6]
 8000874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000876:	4413      	add	r3, r2
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <gfxWriteTextLineToFrameBuffer+0xf8>)
 800087a:	4413      	add	r3, r2
 800087c:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000880:	f107 010c 	add.w	r1, r7, #12
 8000884:	4618      	mov	r0, r3
 8000886:	f005 f9b9 	bl	8005bfc <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 800088a:	bf00      	nop
 800088c:	3770      	adds	r7, #112	; 0x70
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	08007114 	.word	0x08007114
 8000898:	200000b8 	.word	0x200000b8

0800089c <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4604      	mov	r4, r0
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4623      	mov	r3, r4
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
 80008b2:	460b      	mov	r3, r1
 80008b4:	717b      	strb	r3, [r7, #5]
 80008b6:	4613      	mov	r3, r2
 80008b8:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	797a      	ldrb	r2, [r7, #5]
 80008be:	79b9      	ldrb	r1, [r7, #6]
 80008c0:	79f8      	ldrb	r0, [r7, #7]
 80008c2:	f7ff fe74 	bl	80005ae <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	797a      	ldrb	r2, [r7, #5]
 80008ca:	79b9      	ldrb	r1, [r7, #6]
 80008cc:	7978      	ldrb	r0, [r7, #5]
 80008ce:	f7ff fe6e 	bl	80005ae <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 80008d2:	793b      	ldrb	r3, [r7, #4]
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	7939      	ldrb	r1, [r7, #4]
 80008d8:	7978      	ldrb	r0, [r7, #5]
 80008da:	f7ff fe68 	bl	80005ae <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	7939      	ldrb	r1, [r7, #4]
 80008e4:	79f8      	ldrb	r0, [r7, #7]
 80008e6:	f7ff fe62 	bl	80005ae <gfxDrawLine>


}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd90      	pop	{r4, r7, pc}
	...

080008f4 <GetStateAtXY>:
typedef enum {
	EMPTY,
	FULL
}BOARD_CELL_STATE;

BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	4613      	mov	r3, r2
 8000902:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <GetStateAtXY+0x3c>)
 8000908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090c:	461a      	mov	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	fa42 f303 	asr.w	r3, r2, r3
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	b2db      	uxtb	r3, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200002c4 	.word	0x200002c4

08000934 <SetStateAtXY>:

void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	460b      	mov	r3, r1
 8000940:	71bb      	strb	r3, [r7, #6]
 8000942:	4613      	mov	r3, r2
 8000944:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000946:	797b      	ldrb	r3, [r7, #5]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d111      	bne.n	8000970 <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <SetStateAtXY+0x70>)
 8000950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000954:	b21a      	sxth	r2, r3
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	b291      	uxth	r1, r2
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <SetStateAtXY+0x70>)
 800096a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 800096e:	e012      	b.n	8000996 <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <SetStateAtXY+0x70>)
 8000974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000978:	b21a      	sxth	r2, r3
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	b21b      	sxth	r3, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	b21b      	sxth	r3, r3
 8000988:	4013      	ands	r3, r2
 800098a:	b21a      	sxth	r2, r3
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	b291      	uxth	r1, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <SetStateAtXY+0x70>)
 8000992:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200002c4 	.word	0x200002c4

080009a8 <Tetris_DrawCurentPiece>:




void Tetris_DrawCurentPiece(){
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 80009ae:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <Tetris_DrawCurentPiece+0xb8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <Tetris_DrawCurentPiece+0xb8>)
 80009b4:	7912      	ldrb	r2, [r2, #4]
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e045      	b.n	8000a4e <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	0052      	lsls	r2, r2, #1
 80009d8:	4413      	add	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	0052      	lsls	r2, r2, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <Tetris_DrawCurentPiece+0xb8>)
 80009ec:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	0052      	lsls	r2, r2, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	4413      	add	r3, r2
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <Tetris_DrawCurentPiece+0xb8>)
 8000a04:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	0052      	lsls	r2, r2, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	797b      	ldrb	r3, [r7, #5]
 8000a14:	4413      	add	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db12      	blt.n	8000a48 <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <Tetris_DrawCurentPiece+0xbc>)
 8000a24:	681c      	ldr	r4, [r3, #0]
 8000a26:	793a      	ldrb	r2, [r7, #4]
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <Tetris_DrawCurentPiece+0xc0>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b2d8      	uxtb	r0, r3
 8000a30:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000a32:	793a      	ldrb	r2, [r7, #4]
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <Tetris_DrawCurentPiece+0xc0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000a3c:	3303      	adds	r3, #3
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	3303      	adds	r3, #3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	ddb6      	ble.n	80009c2 <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200002fc 	.word	0x200002fc
 8000a64:	200002e8 	.word	0x200002e8
 8000a68:	20000000 	.word	0x20000000

08000a6c <Tetris_DrawNextPiece>:

void Tetris_DrawNextPiece(){
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <Tetris_DrawNextPiece+0x94>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <Tetris_DrawNextPiece+0x94>)
 8000a78:	7912      	ldrb	r2, [r2, #4]
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e033      	b.n	8000aee <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	0052      	lsls	r2, r2, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	0052      	lsls	r2, r2, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000aae:	79bb      	ldrb	r3, [r7, #6]
 8000ab0:	3321      	adds	r3, #33	; 0x21
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000ab6:	797b      	ldrb	r3, [r7, #5]
 8000ab8:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db12      	blt.n	8000ae8 <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <Tetris_DrawNextPiece+0x98>)
 8000ac4:	681c      	ldr	r4, [r3, #0]
 8000ac6:	793a      	ldrb	r2, [r7, #4]
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <Tetris_DrawNextPiece+0x9c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	b2d8      	uxtb	r0, r3
 8000ad0:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000ad2:	793a      	ldrb	r2, [r7, #4]
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <Tetris_DrawNextPiece+0x9c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000adc:	3303      	adds	r3, #3
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	3303      	adds	r3, #3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	ddc8      	ble.n	8000a86 <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd90      	pop	{r4, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000304 	.word	0x20000304
 8000b04:	200002e8 	.word	0x200002e8
 8000b08:	20000000 	.word	0x20000000

08000b0c <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000b16:	4b35      	ldr	r3, [pc, #212]	; (8000bec <Tetris_DrawTetrisBoard+0xe0>)
 8000b18:	681c      	ldr	r4, [r3, #0]
 8000b1a:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <Tetris_DrawTetrisBoard+0xe4>)
 8000b1c:	7818      	ldrb	r0, [r3, #0]
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <Tetris_DrawTetrisBoard+0xe8>)
 8000b20:	7819      	ldrb	r1, [r3, #0]
 8000b22:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <Tetris_DrawTetrisBoard+0xe4>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	331e      	adds	r3, #30
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <Tetris_DrawTetrisBoard+0xe8>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	332d      	adds	r3, #45	; 0x2d
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e049      	b.n	8000bce <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	e040      	b.n	8000bc2 <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fed2 	bl	80008f4 <GetStateAtXY>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d132      	bne.n	8000bbc <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	0052      	lsls	r2, r2, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <Tetris_DrawTetrisBoard+0xe4>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	0052      	lsls	r2, r2, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <Tetris_DrawTetrisBoard+0xe8>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	0052      	lsls	r2, r2, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <Tetris_DrawTetrisBoard+0xe4>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	3303      	adds	r3, #3
 8000b94:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	0052      	lsls	r2, r2, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <Tetris_DrawTetrisBoard+0xe8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	3303      	adds	r3, #3
 8000bac:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <Tetris_DrawTetrisBoard+0xec>)
 8000bb0:	681c      	ldr	r4, [r3, #0]
 8000bb2:	7b3b      	ldrb	r3, [r7, #12]
 8000bb4:	7b7a      	ldrb	r2, [r7, #13]
 8000bb6:	7bb9      	ldrb	r1, [r7, #14]
 8000bb8:	7bf8      	ldrb	r0, [r7, #15]
 8000bba:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2b09      	cmp	r3, #9
 8000bc6:	ddbb      	ble.n	8000b40 <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2b0e      	cmp	r3, #14
 8000bd2:	ddb2      	ble.n	8000b3a <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 8000bd4:	f7ff fee8 	bl	80009a8 <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d101      	bne.n	8000be2 <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8000bde:	f7ff ff45 	bl	8000a6c <Tetris_DrawNextPiece>
	}
}
 8000be2:	bf00      	nop
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200002e4 	.word	0x200002e4
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	2000030c 	.word	0x2000030c
 8000bf8:	200002ec 	.word	0x200002ec

08000bfc <InitNewCurrentPiece>:

void InitNewCurrentPiece(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <InitNewCurrentPiece+0x30>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <InitNewCurrentPiece+0x30>)
 8000c08:	22fe      	movs	r2, #254	; 0xfe
 8000c0a:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <InitNewCurrentPiece+0x34>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4798      	blx	r3
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <InitNewCurrentPiece+0x38>)
 8000c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <InitNewCurrentPiece+0x30>)
 8000c1e:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <InitNewCurrentPiece+0x30>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	711a      	strb	r2, [r3, #4]
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200002fc 	.word	0x200002fc
 8000c30:	200002f0 	.word	0x200002f0
 8000c34:	20000004 	.word	0x20000004

08000c38 <InitNewNextPiece>:

void InitNewNextPiece(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <InitNewNextPiece+0x30>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <InitNewNextPiece+0x30>)
 8000c44:	22fe      	movs	r2, #254	; 0xfe
 8000c46:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <InitNewNextPiece+0x34>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4798      	blx	r3
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <InitNewNextPiece+0x38>)
 8000c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <InitNewNextPiece+0x30>)
 8000c5a:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <InitNewNextPiece+0x30>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	711a      	strb	r2, [r3, #4]
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000304 	.word	0x20000304
 8000c6c:	200002f0 	.word	0x200002f0
 8000c70:	20000004 	.word	0x20000004

08000c74 <CopyNextPieceToCurrent>:

void CopyNextPieceToCurrent(){
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <CopyNextPieceToCurrent+0x1c>)
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <CopyNextPieceToCurrent+0x20>)
 8000c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c80:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200002fc 	.word	0x200002fc
 8000c94:	20000304 	.word	0x20000304

08000c98 <ResetBoard>:

void ResetBoard(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 8000c9c:	221e      	movs	r2, #30
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <ResetBoard+0x1c>)
 8000ca2:	f004 ffb9 	bl	8005c18 <memset>
	InitNewCurrentPiece();
 8000ca6:	f7ff ffa9 	bl	8000bfc <InitNewCurrentPiece>
	InitNewNextPiece();
 8000caa:	f7ff ffc5 	bl	8000c38 <InitNewNextPiece>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200002c4 	.word	0x200002c4

08000cb8 <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <Tetris_Init+0x40>)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <Tetris_Init+0x44>)
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <Tetris_Init+0x48>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <Tetris_Init+0x4c>)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <Tetris_Init+0x50>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <Tetris_Init+0x54>)
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	6013      	str	r3, [r2, #0]
	ResetBoard();
 8000cea:	f7ff ffd5 	bl	8000c98 <ResetBoard>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200002e4 	.word	0x200002e4
 8000cfc:	200002ec 	.word	0x200002ec
 8000d00:	200002e8 	.word	0x200002e8
 8000d04:	200002f0 	.word	0x200002f0
 8000d08:	200002f4 	.word	0x200002f4
 8000d0c:	200002f8 	.word	0x200002f8

08000d10 <IsBlockAllowedToBeHere>:

bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8000d20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	da09      	bge.n	8000d3c <IsBlockAllowedToBeHere+0x2c>
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db05      	blt.n	8000d3c <IsBlockAllowedToBeHere+0x2c>
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	dc01      	bgt.n	8000d3c <IsBlockAllowedToBeHere+0x2c>
		return true;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e01b      	b.n	8000d74 <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	79ba      	ldrb	r2, [r7, #6]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fdd6 	bl	80008f4 <GetStateAtXY>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <IsBlockAllowedToBeHere+0x42>
		return false;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e010      	b.n	8000d74 <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b09      	cmp	r3, #9
 8000d58:	dc03      	bgt.n	8000d62 <IsBlockAllowedToBeHere+0x52>
 8000d5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d5e:	2b0e      	cmp	r3, #14
 8000d60:	dd01      	ble.n	8000d66 <IsBlockAllowedToBeHere+0x56>
		return false;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e006      	b.n	8000d74 <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	da01      	bge.n	8000d72 <IsBlockAllowedToBeHere+0x62>
		return false;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <WriteCurrentPieceToGameBoardArray>:

bool WriteCurrentPieceToGameBoardArray(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000d88:	7912      	ldrb	r2, [r2, #4]
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e02e      	b.n	8000df4 <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000db0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	4413      	add	r3, r2
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000dc0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	797b      	ldrb	r3, [r7, #5]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 8000dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da01      	bge.n	8000dda <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e010      	b.n	8000dfc <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 8000dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db05      	blt.n	8000dee <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 8000de2:	793b      	ldrb	r3, [r7, #4]
 8000de4:	78f9      	ldrb	r1, [r7, #3]
 8000de6:	2201      	movs	r2, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fda3 	bl	8000934 <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	ddcd      	ble.n	8000d96 <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200002fc 	.word	0x200002fc

08000e08 <IsMoveValid>:

u8 IsMoveValid(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <IsMoveValid+0x84>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <IsMoveValid+0x84>)
 8000e14:	7912      	ldrb	r2, [r2, #4]
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e02b      	b.n	8000e7a <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <IsMoveValid+0x84>)
 8000e3c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	4413      	add	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <IsMoveValid+0x84>)
 8000e4c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	4413      	add	r3, r2
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 8000e5a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000e5e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff53 	bl	8000d10 <IsBlockAllowedToBeHere>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <IsMoveValid+0x6c>
			return 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	e006      	b.n	8000e82 <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	ddd0      	ble.n	8000e22 <IsMoveValid+0x1a>
		}
	}
	return 1;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200002fc 	.word	0x200002fc

08000e90 <CheckForAndClearLines>:

u8 CheckForAndClearLines(){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8000e9e:	230e      	movs	r3, #14
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	e027      	b.n	8000ef4 <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <CheckForAndClearLines+0x78>)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d105      	bne.n	8000ec0 <CheckForAndClearLines+0x30>
			linesToClear++;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	71bb      	strb	r3, [r7, #6]
 8000ebe:	e001      	b.n	8000ec4 <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d011      	beq.n	8000eee <CheckForAndClearLines+0x5e>
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10e      	bne.n	8000eee <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 8000ed0:	79fa      	ldrb	r2, [r7, #7]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	490c      	ldr	r1, [pc, #48]	; (8000f08 <CheckForAndClearLines+0x78>)
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <CheckForAndClearLines+0x78>)
 8000ee0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <CheckForAndClearLines+0x78>)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	dad4      	bge.n	8000ea4 <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	200002c4 	.word	0x200002c4

08000f0c <Tetris_Rotate>:

void Tetris_Rotate(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f1a:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f1e:	791b      	ldrb	r3, [r3, #4]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d902      	bls.n	8000f2a <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 8000f2a:	f7ff ff6d 	bl	8000e08 <IsMoveValid>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10d      	bne.n	8000f50 <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f36:	791b      	ldrb	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d103      	bne.n	8000f44 <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f3e:	2203      	movs	r2, #3
 8000f40:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 8000f42:	e005      	b.n	8000f50 <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f46:	791b      	ldrb	r3, [r3, #4]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b01      	ldr	r3, [pc, #4]	; (8000f54 <Tetris_Rotate+0x48>)
 8000f4e:	711a      	strb	r2, [r3, #4]
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200002fc 	.word	0x200002fc

08000f58 <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <Tetris_MoveDown+0x80>)
 8000f60:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b25a      	sxtb	r2, r3
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <Tetris_MoveDown+0x80>)
 8000f6e:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 8000f70:	f7ff ff4a 	bl	8000e08 <IsMoveValid>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d128      	bne.n	8000fcc <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <Tetris_MoveDown+0x80>)
 8000f7c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3b01      	subs	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	b25a      	sxtb	r2, r3
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <Tetris_MoveDown+0x80>)
 8000f8a:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 8000f8c:	f7ff fef6 	bl	8000d7c <WriteCurrentPieceToGameBoardArray>
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 8000f94:	f7ff ff7c 	bl	8000e90 <CheckForAndClearLines>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 8000f9c:	f7ff fe6a 	bl	8000c74 <CopyNextPieceToCurrent>
		InitNewNextPiece();
 8000fa0:	f7ff fe4a 	bl	8000c38 <InitNewNextPiece>
		if(hasGameOverOccured == true){
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d106      	bne.n	8000fb8 <Tetris_MoveDown+0x60>
			_onGameOver();
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <Tetris_MoveDown+0x84>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4798      	blx	r3
			ResetBoard();
 8000fb0:	f7ff fe72 	bl	8000c98 <ResetBoard>
			return GameOver;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e00a      	b.n	8000fce <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <Tetris_MoveDown+0x88>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	79ba      	ldrb	r2, [r7, #6]
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4798      	blx	r3
		}
		return Settled;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e000      	b.n	8000fce <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200002fc 	.word	0x200002fc
 8000fdc:	200002f8 	.word	0x200002f8
 8000fe0:	200002f4 	.word	0x200002f4

08000fe4 <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <Tetris_MoveLeft+0x38>)
 8000fea:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <Tetris_MoveLeft+0x38>)
 8000ff8:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8000ffa:	f7ff ff05 	bl	8000e08 <IsMoveValid>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d108      	bne.n	8001016 <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <Tetris_MoveLeft+0x38>)
 8001006:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3301      	adds	r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	b25a      	sxtb	r2, r3
 8001012:	4b02      	ldr	r3, [pc, #8]	; (800101c <Tetris_MoveLeft+0x38>)
 8001014:	715a      	strb	r2, [r3, #5]
	}
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002fc 	.word	0x200002fc

08001020 <Tetris_MoveRight>:

void Tetris_MoveRight(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <Tetris_MoveRight+0x38>)
 8001026:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	3301      	adds	r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b25a      	sxtb	r2, r3
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <Tetris_MoveRight+0x38>)
 8001034:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8001036:	f7ff fee7 	bl	8000e08 <IsMoveValid>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d108      	bne.n	8001052 <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <Tetris_MoveRight+0x38>)
 8001042:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3b01      	subs	r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	b25a      	sxtb	r2, r3
 800104e:	4b02      	ldr	r3, [pc, #8]	; (8001058 <Tetris_MoveRight+0x38>)
 8001050:	715a      	strb	r2, [r3, #5]
	}
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200002fc 	.word	0x200002fc

0800105c <Write_Flash>:

//u32 FlashAddress = 0x08040000;


void Write_Flash(u8 data, u8 index)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <GetRandomNumberBetweenZeroAndSix>:


u8 GetRandomNumberBetweenZeroAndSix(){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 800107c:	f004 fe02 	bl	8005c84 <rand>
 8001080:	4603      	mov	r3, r0
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <GetRandomNumberBetweenZeroAndSix+0x28>)
 8001086:	fba3 1302 	umull	r1, r3, r3, r2
 800108a:	1ad1      	subs	r1, r2, r3
 800108c:	0849      	lsrs	r1, r1, #1
 800108e:	440b      	add	r3, r1
 8001090:	0899      	lsrs	r1, r3, #2
 8001092:	460b      	mov	r3, r1
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	1a5b      	subs	r3, r3, r1
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b2db      	uxtb	r3, r3
}
 800109c:	4618      	mov	r0, r3
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	24924925 	.word	0x24924925

080010a4 <DrawStationaryBlock>:


void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4604      	mov	r4, r0
 80010ac:	4608      	mov	r0, r1
 80010ae:	4611      	mov	r1, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	4623      	mov	r3, r4
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	4603      	mov	r3, r0
 80010b8:	71bb      	strb	r3, [r7, #6]
 80010ba:	460b      	mov	r3, r1
 80010bc:	717b      	strb	r3, [r7, #5]
 80010be:	4613      	mov	r3, r2
 80010c0:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 80010c2:	793b      	ldrb	r3, [r7, #4]
 80010c4:	797a      	ldrb	r2, [r7, #5]
 80010c6:	79b9      	ldrb	r1, [r7, #6]
 80010c8:	79f8      	ldrb	r0, [r7, #7]
 80010ca:	f7ff fbe7 	bl	800089c <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 80010ce:	793b      	ldrb	r3, [r7, #4]
 80010d0:	797a      	ldrb	r2, [r7, #5]
 80010d2:	79b9      	ldrb	r1, [r7, #6]
 80010d4:	79f8      	ldrb	r0, [r7, #7]
 80010d6:	f7ff fa6a 	bl	80005ae <gfxDrawLine>
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd90      	pop	{r4, r7, pc}
	...

080010e4 <OnLinesCleared>:

void OnLinesCleared(u8 numLinesCleared){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <OnLinesCleared+0x78>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <OnLinesCleared+0x78>)
 80010fc:	801a      	strh	r2, [r3, #0]
	switch(numLinesCleared){
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	3b01      	subs	r3, #1
 8001102:	2b03      	cmp	r3, #3
 8001104:	d824      	bhi.n	8001150 <OnLinesCleared+0x6c>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <OnLinesCleared+0x28>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800111d 	.word	0x0800111d
 8001110:	08001129 	.word	0x08001129
 8001114:	08001135 	.word	0x08001135
 8001118:	08001143 	.word	0x08001143
	case 1:
		_score += TETRIS_SCORE_SINGLE;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <OnLinesCleared+0x7c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3328      	adds	r3, #40	; 0x28
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <OnLinesCleared+0x7c>)
 8001124:	6013      	str	r3, [r2, #0]
		break;
 8001126:	e013      	b.n	8001150 <OnLinesCleared+0x6c>
	case 2:
		_score += TETRIS_SCORE_DOUBLE;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <OnLinesCleared+0x7c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3364      	adds	r3, #100	; 0x64
 800112e:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <OnLinesCleared+0x7c>)
 8001130:	6013      	str	r3, [r2, #0]
		break;
 8001132:	e00d      	b.n	8001150 <OnLinesCleared+0x6c>
	case 3:
		_score += TETRIS_SCORE_TRIPLE;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <OnLinesCleared+0x7c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800113c:	4a08      	ldr	r2, [pc, #32]	; (8001160 <OnLinesCleared+0x7c>)
 800113e:	6013      	str	r3, [r2, #0]
		break;
 8001140:	e006      	b.n	8001150 <OnLinesCleared+0x6c>
	case 4:
		_score += TETRIS_SCORE_TETRIS;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <OnLinesCleared+0x7c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <OnLinesCleared+0x7c>)
 800114c:	6013      	str	r3, [r2, #0]
		break;
 800114e:	bf00      	nop
	}
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000316 	.word	0x20000316
 8001160:	20000318 	.word	0x20000318

08001164 <OnGameOver>:

void OnGameOver(){
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	_linesCleared = 0;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <OnGameOver+0x1c>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
	_score = 0;
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <OnGameOver+0x20>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000316 	.word	0x20000316
 8001184:	20000318 	.word	0x20000318

08001188 <IncrementTetrisTimer>:

void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <IncrementTetrisTimer+0x44>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <IncrementTetrisTimer+0x44>)
 800119e:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <IncrementTetrisTimer+0x44>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <IncrementTetrisTimer+0x48>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d90b      	bls.n	80011c4 <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d105      	bne.n	80011be <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 80011b2:	f7ff fed1 	bl	8000f58 <Tetris_MoveDown>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <IncrementTetrisTimer+0x4c>)
 80011bc:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 80011be:	4b03      	ldr	r3, [pc, #12]	; (80011cc <IncrementTetrisTimer+0x44>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
	}
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000310 	.word	0x20000310
 80011d0:	20000020 	.word	0x20000020
 80011d4:	20000025 	.word	0x20000025

080011d8 <WriteScoreToFrameBuffer>:

void WriteScoreToFrameBuffer(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%u",_score);
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <WriteScoreToFrameBuffer+0x28>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	463b      	mov	r3, r7
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <WriteScoreToFrameBuffer+0x2c>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 fd8a 	bl	8005d00 <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 80011ec:	463b      	mov	r3, r7
 80011ee:	461a      	mov	r2, r3
 80011f0:	2126      	movs	r1, #38	; 0x26
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fad4 	bl	80007a0 <gfxWriteTextLineToFrameBuffer>

}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000318 	.word	0x20000318
 8001204:	08007110 	.word	0x08007110

08001208 <TetrisGame>:

void TetrisGame(u32 timePassed){
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

	const i32 twelveBitMax = 4096;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	61bb      	str	r3, [r7, #24]
	u16 x, y;
	ReadAnalogStick(&hadc2,&x,&y);
 8001216:	f107 020a 	add.w	r2, r7, #10
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4619      	mov	r1, r3
 8001220:	4848      	ldr	r0, [pc, #288]	; (8001344 <TetrisGame+0x13c>)
 8001222:	f7ff f82d 	bl	8000280 <ReadAnalogStick>
	i32 analogXChange = (x - (twelveBitMax/2));
 8001226:	89bb      	ldrh	r3, [r7, #12]
 8001228:	4619      	mov	r1, r3
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	0fda      	lsrs	r2, r3, #31
 800122e:	4413      	add	r3, r2
 8001230:	105b      	asrs	r3, r3, #1
 8001232:	425b      	negs	r3, r3
 8001234:	440b      	add	r3, r1
 8001236:	617b      	str	r3, [r7, #20]
	i32 analogYChange = (y - (twelveBitMax/2));
 8001238:	897b      	ldrh	r3, [r7, #10]
 800123a:	4619      	mov	r1, r3
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	0fda      	lsrs	r2, r3, #31
 8001240:	4413      	add	r3, r2
 8001242:	105b      	asrs	r3, r3, #1
 8001244:	425b      	negs	r3, r3
 8001246:	440b      	add	r3, r1
 8001248:	613b      	str	r3, [r7, #16]
	bool movingDown = true;
 800124a:	2301      	movs	r3, #1
 800124c:	77fb      	strb	r3, [r7, #31]
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 800124e:	2101      	movs	r1, #1
 8001250:	483d      	ldr	r0, [pc, #244]	; (8001348 <TetrisGame+0x140>)
 8001252:	f002 f8c1 	bl	80033d8 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
	if(analogXChange > (twelveBitMax/3)){
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4a3b      	ldr	r2, [pc, #236]	; (800134c <TetrisGame+0x144>)
 800125e:	fb82 1203 	smull	r1, r2, r2, r3
 8001262:	17db      	asrs	r3, r3, #31
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	dd02      	ble.n	8001272 <TetrisGame+0x6a>
		Tetris_MoveRight();
 800126c:	f7ff fed8 	bl	8001020 <Tetris_MoveRight>
 8001270:	e01c      	b.n	80012ac <TetrisGame+0xa4>
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4a35      	ldr	r2, [pc, #212]	; (800134c <TetrisGame+0x144>)
 8001276:	fb82 1203 	smull	r1, r2, r2, r3
 800127a:	17db      	asrs	r3, r3, #31
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	da02      	bge.n	800128a <TetrisGame+0x82>
		Tetris_MoveLeft();
 8001284:	f7ff feae 	bl	8000fe4 <Tetris_MoveLeft>
 8001288:	e010      	b.n	80012ac <TetrisGame+0xa4>
	}
	else if(analogYChange > (twelveBitMax/3)){
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4a2f      	ldr	r2, [pc, #188]	; (800134c <TetrisGame+0x144>)
 800128e:	fb82 1203 	smull	r1, r2, r2, r3
 8001292:	17db      	asrs	r3, r3, #31
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	dd07      	ble.n	80012ac <TetrisGame+0xa4>
		_movingDownResult = Tetris_MoveDown();
 800129c:	f7ff fe5c 	bl	8000f58 <Tetris_MoveDown>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <TetrisGame+0x148>)
 80012a6:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 80012a8:	2300      	movs	r3, #0
 80012aa:	77fb      	strb	r3, [r7, #31]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <TetrisGame+0xb6>
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <TetrisGame+0x14c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <TetrisGame+0xb6>
		Tetris_Rotate();
 80012ba:	f7ff fe27 	bl	8000f0c <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 80012be:	4a25      	ldr	r2, [pc, #148]	; (8001354 <TetrisGame+0x14c>)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	4619      	mov	r1, r3
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff5d 	bl	8001188 <IncrementTetrisTimer>

	gfxClearFrameBuffer();
 80012ce:	f7ff f843 	bl	8000358 <gfxClearFrameBuffer>


	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <TetrisGame+0x148>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d003      	beq.n	80012e2 <TetrisGame+0xda>
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <TetrisGame+0x148>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d101      	bne.n	80012e6 <TetrisGame+0xde>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <TetrisGame+0xe0>
 80012e6:	2300      	movs	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fc0e 	bl	8000b0c <Tetris_DrawTetrisBoard>

	WriteScoreToFrameBuffer();
 80012f0:	f7ff ff72 	bl	80011d8 <WriteScoreToFrameBuffer>


	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 80012f4:	2325      	movs	r3, #37	; 0x25
 80012f6:	2204      	movs	r2, #4
 80012f8:	2105      	movs	r1, #5
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff f874 	bl	80003e8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <TetrisGame+0x148>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d003      	beq.n	8001310 <TetrisGame+0x108>
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <TetrisGame+0x148>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d105      	bne.n	800131c <TetrisGame+0x114>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 8001310:	2335      	movs	r3, #53	; 0x35
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff f866 	bl	80003e8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay = true){
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <TetrisGame+0x150>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 8001322:	2354      	movs	r3, #84	; 0x54
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff f85d 	bl	80003e8 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <TetrisGame+0x150>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <TetrisGame+0x154>)
 8001336:	f7ff f97f 	bl	8000638 <gfxFinishDrawing>

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000730 	.word	0x20000730
 8001348:	48000400 	.word	0x48000400
 800134c:	55555556 	.word	0x55555556
 8001350:	20000025 	.word	0x20000025
 8001354:	20000314 	.word	0x20000314
 8001358:	20000024 	.word	0x20000024
 800135c:	20000514 	.word	0x20000514

08001360 <TetrisGame_Init>:

void TetrisGame_Init(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af02      	add	r7, sp, #8
	Tetris_Init(
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <TetrisGame_Init+0x50>)
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <TetrisGame_Init+0x54>)
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <TetrisGame_Init+0x58>)
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <TetrisGame_Init+0x5c>)
 8001372:	4913      	ldr	r1, [pc, #76]	; (80013c0 <TetrisGame_Init+0x60>)
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <TetrisGame_Init+0x5c>)
 8001376:	f7ff fc9f 	bl	8000cb8 <Tetris_Init>
			&DrawStationaryBlock,
			&gfxDrawAxisAlignedRect,
			&GetRandomNumberBetweenZeroAndSix,
			&OnLinesCleared,
			&OnGameOver);
	u8 flashData[4] = {0xde,0xad,0xbe,0xef};
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <TetrisGame_Init+0x64>)
 800137c:	603b      	str	r3, [r7, #0]
	for(int i=0; i< 4; i++){
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e00c      	b.n	800139e <TetrisGame_Init+0x3e>
		Write_Flash(flashData[i], i);
 8001384:	463a      	mov	r2, r7
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe62 	bl	800105c <Write_Flash>
	for(int i=0; i< 4; i++){
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	ddef      	ble.n	8001384 <TetrisGame_Init+0x24>
	}
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08001165 	.word	0x08001165
 80013b4:	080010e5 	.word	0x080010e5
 80013b8:	08001079 	.word	0x08001079
 80013bc:	0800089d 	.word	0x0800089d
 80013c0:	080010a5 	.word	0x080010a5
 80013c4:	efbeadde 	.word	0xefbeadde

080013c8 <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 80013d0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80013d4:	2100      	movs	r1, #0
 80013d6:	481e      	ldr	r0, [pc, #120]	; (8001450 <LCD_PCD8544_init+0x88>)
 80013d8:	f004 fc1e 	bl	8005c18 <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f976 	bl	80016d6 <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f98e 	bl	800170c <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f9ab 	bl	800174c <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	7bb9      	ldrb	r1, [r7, #14]
 80013fa:	2301      	movs	r3, #1
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f8ae 	bl	800155e <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 8001402:	2103      	movs	r1, #3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f939 	bl	800167c <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 800140a:	2140      	movs	r1, #64	; 0x40
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f94e 	bl	80016ae <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 8001412:	2102      	movs	r1, #2
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f918 	bl	800164a <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	7bb9      	ldrb	r1, [r7, #14]
 800141e:	2300      	movs	r3, #0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f89c 	bl	800155e <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f8c7 	bl	80015be <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f8e5 	bl	8001604 <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f996 	bl	800176c <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f845 	bl	80014d0 <LCD_PCD8544_clear_ram>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000031c 	.word	0x2000031c

08001454 <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	460b      	mov	r3, r1
 8001460:	72fb      	strb	r3, [r7, #11]
 8001462:	4613      	mov	r3, r2
 8001464:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f94c 	bl	800170c <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 f969 	bl	800174c <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 800147a:	7dfa      	ldrb	r2, [r7, #23]
 800147c:	7db9      	ldrb	r1, [r7, #22]
 800147e:	2300      	movs	r3, #0
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f86c 	bl	800155e <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 8001486:	7abb      	ldrb	r3, [r7, #10]
 8001488:	461a      	mov	r2, r3
 800148a:	0052      	lsls	r2, r2, #1
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	7afb      	ldrb	r3, [r7, #11]
 8001494:	4619      	mov	r1, r3
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f8b4 	bl	8001604 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 f965 	bl	800176c <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f942 	bl	800172c <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 f94f 	bl	800174c <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 80014ae:	8c3b      	ldrh	r3, [r7, #32]
 80014b0:	461a      	mov	r2, r3
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 f81f 	bl	80014f8 <LCD_PCD8544_LL_send_data>
 80014ba:	4603      	mov	r3, r0
 80014bc:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 f954 	bl	800176c <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 80014c4:	7d7b      	ldrb	r3, [r7, #21]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 80014d8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <LCD_PCD8544_clear_ram+0x24>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffb5 	bl	8001454 <LCD_PCD8544_write_bytes>
 80014ea:	4603      	mov	r3, r0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000031c 	.word	0x2000031c

080014f8 <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	4613      	mov	r3, r2
 8001504:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	88fa      	ldrh	r2, [r7, #6]
 800150c:	2302      	movs	r3, #2
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	f003 fb7f 	bl	8004c12 <HAL_SPI_Transmit>
 8001514:	4603      	mov	r3, r0
 8001516:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d007      	beq.n	800152e <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	69d8      	ldr	r0, [r3, #28]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8c1b      	ldrh	r3, [r3, #32]
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	f001 ff6d 	bl	8003408 <HAL_GPIO_WritePin>
	}
	return stat;
 800152e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 8001544:	2301      	movs	r3, #1
 8001546:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8001548:	89fa      	ldrh	r2, [r7, #14]
 800154a:	1cfb      	adds	r3, r7, #3
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffd2 	bl	80014f8 <LCD_PCD8544_LL_send_data>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	4608      	mov	r0, r1
 8001568:	4611      	mov	r1, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4603      	mov	r3, r0
 800156e:	70fb      	strb	r3, [r7, #3]
 8001570:	460b      	mov	r3, r1
 8001572:	70bb      	strb	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	b25b      	sxtb	r3, r3
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	b25b      	sxtb	r3, r3
 8001584:	f043 0320 	orr.w	r3, r3, #32
 8001588:	b25a      	sxtb	r2, r3
 800158a:	78bb      	ldrb	r3, [r7, #2]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	b25b      	sxtb	r3, r3
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	b25b      	sxtb	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b25a      	sxtb	r2, r3
 800159a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffc2 	bl	8001538 <LCD_PCD8544_LL_send_byte>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	70fb      	strb	r3, [r7, #3]
 80015ca:	4613      	mov	r3, r2
 80015cc:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	4619      	mov	r1, r3
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff9f 	bl	8001538 <LCD_PCD8544_LL_send_byte>
 80015fa:	4603      	mov	r3, r0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
 8001610:	4613      	mov	r3, r2
 8001612:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 8001614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	b25b      	sxtb	r3, r3
 800161e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001622:	b25b      	sxtb	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 8001628:	78bb      	ldrb	r3, [r7, #2]
 800162a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800162e:	b2db      	uxtb	r3, r3
 8001630:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2202      	movs	r2, #2
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff5c 	bl	80014f8 <LCD_PCD8544_LL_send_data>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 8001656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	b25b      	sxtb	r3, r3
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	b25b      	sxtb	r3, r3
 8001666:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	4619      	mov	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff63 	bl	8001538 <LCD_PCD8544_LL_send_byte>
 8001672:	4603      	mov	r3, r0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 8001688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	b25b      	sxtb	r3, r3
 8001692:	f043 0310 	orr.w	r3, r3, #16
 8001696:	b25b      	sxtb	r3, r3
 8001698:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ff4a 	bl	8001538 <LCD_PCD8544_LL_send_byte>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016c0:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff36 	bl	8001538 <LCD_PCD8544_LL_send_byte>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6858      	ldr	r0, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	891b      	ldrh	r3, [r3, #8]
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	f001 fe8d 	bl	8003408 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 fcd6 	bl	80020a0 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6858      	ldr	r0, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	891b      	ldrh	r3, [r3, #8]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4619      	mov	r1, r3
 8001700:	f001 fe82 	bl	8003408 <HAL_GPIO_WritePin>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6958      	ldr	r0, [r3, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	8b1b      	ldrh	r3, [r3, #24]
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	f001 fe72 	bl	8003408 <HAL_GPIO_WritePin>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6958      	ldr	r0, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	8b1b      	ldrh	r3, [r3, #24]
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	f001 fe62 	bl	8003408 <HAL_GPIO_WritePin>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68d8      	ldr	r0, [r3, #12]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	8a1b      	ldrh	r3, [r3, #16]
 800175c:	2200      	movs	r2, #0
 800175e:	4619      	mov	r1, r3
 8001760:	f001 fe52 	bl	8003408 <HAL_GPIO_WritePin>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68d8      	ldr	r0, [r3, #12]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	8a1b      	ldrh	r3, [r3, #16]
 800177c:	2201      	movs	r2, #1
 800177e:	4619      	mov	r1, r3
 8001780:	f001 fe42 	bl	8003408 <HAL_GPIO_WritePin>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001790:	f000 fc20 	bl	8001fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001794:	f000 f83e 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001798:	f000 f996 	bl	8001ac8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800179c:	f000 f900 	bl	80019a0 <MX_SPI1_Init>
  MX_ADC2_Init();
 80017a0:	f000 f890 	bl	80018c4 <MX_ADC2_Init>
  MX_TIM2_Init();
 80017a4:	f000 f93a 	bl	8001a1c <MX_TIM2_Init>
  //HAL_ADCEx_Calibration_Start(&hadc2);



  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <main+0x7c>)
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <main+0x80>)
 80017ac:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <main+0x7c>)
 80017b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017b4:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <main+0x7c>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <main+0x7c>)
 80017be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017c2:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <main+0x7c>)
 80017c6:	2202      	movs	r2, #2
 80017c8:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <main+0x7c>)
 80017cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017d0:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <main+0x7c>)
 80017d4:	2210      	movs	r2, #16
 80017d6:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <main+0x7c>)
 80017da:	f7ff fdf5 	bl	80013c8 <LCD_PCD8544_init>
  //HAL_Delay(1000);
  static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };

  //LCD_PCD8544_write_bytes(&gLcdScreen,0,0,squarepusher,504);
  //HAL_Delay(2000);
   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80017de:	2100      	movs	r1, #0
 80017e0:	480b      	ldr	r0, [pc, #44]	; (8001810 <main+0x84>)
 80017e2:	f000 ffa4 	bl	800272e <HAL_ADCEx_Calibration_Start>
  //gfxCopyAreaOfFrameBufferToScreen(&gLcdScreen, 3, 5, 0, 84);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   srand(time(NULL));   // Initialization, should only be called once.
 80017e6:	2000      	movs	r0, #0
 80017e8:	f004 faaa 	bl	8005d40 <time>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 fa1a 	bl	8005c28 <srand>
   TetrisGame_Init();
 80017f4:	f7ff fdb4 	bl	8001360 <TetrisGame_Init>



  while (1)
  {
	  TetrisGame(125);
 80017f8:	207d      	movs	r0, #125	; 0x7d
 80017fa:	f7ff fd05 	bl	8001208 <TetrisGame>


	  HAL_Delay(125);
 80017fe:	207d      	movs	r0, #125	; 0x7d
 8001800:	f000 fc4e 	bl	80020a0 <HAL_Delay>
	  TetrisGame(125);
 8001804:	e7f8      	b.n	80017f8 <main+0x6c>
 8001806:	bf00      	nop
 8001808:	20000514 	.word	0x20000514
 800180c:	20000780 	.word	0x20000780
 8001810:	20000730 	.word	0x20000730

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b096      	sub	sp, #88	; 0x58
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800181e:	2228      	movs	r2, #40	; 0x28
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f004 f9f8 	bl	8005c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001848:	2302      	movs	r3, #2
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184c:	2301      	movs	r3, #1
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001850:	2310      	movs	r3, #16
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001854:	2302      	movs	r3, #2
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001858:	2300      	movs	r3, #0
 800185a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800185c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001860:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fde6 	bl	8003438 <HAL_RCC_OscConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001872:	f000 f999 	bl	8001ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001876:	230f      	movs	r3, #15
 8001878:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fe0f 	bl	80044b4 <HAL_RCC_ClockConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800189c:	f000 f984 	bl	8001ba8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80018a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 ffe7 	bl	8004880 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80018b8:	f000 f976 	bl	8001ba8 <Error_Handler>
  }
}
 80018bc:	bf00      	nop
 80018be:	3758      	adds	r7, #88	; 0x58
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <MX_ADC2_Init+0xd4>)
 80018dc:	4a2f      	ldr	r2, [pc, #188]	; (800199c <MX_ADC2_Init+0xd8>)
 80018de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <MX_ADC2_Init+0xd4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <MX_ADC2_Init+0xd4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <MX_ADC2_Init+0xd4>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <MX_ADC2_Init+0xd4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <MX_ADC2_Init+0xd4>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <MX_ADC2_Init+0xd4>)
 8001902:	2201      	movs	r2, #1
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <MX_ADC2_Init+0xd4>)
 8001908:	2200      	movs	r2, #0
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <MX_ADC2_Init+0xd4>)
 800190e:	2201      	movs	r2, #1
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <MX_ADC2_Init+0xd4>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <MX_ADC2_Init+0xd4>)
 800191a:	2202      	movs	r2, #2
 800191c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_ADC2_Init+0xd4>)
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_ADC2_Init+0xd4>)
 8001928:	2204      	movs	r2, #4
 800192a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_ADC2_Init+0xd4>)
 800192e:	2200      	movs	r2, #0
 8001930:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_ADC2_Init+0xd4>)
 8001934:	2200      	movs	r2, #0
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001938:	4817      	ldr	r0, [pc, #92]	; (8001998 <MX_ADC2_Init+0xd4>)
 800193a:	f000 fbd5 	bl	80020e8 <HAL_ADC_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001944:	f000 f930 	bl	8001ba8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001948:	2302      	movs	r3, #2
 800194a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800194c:	2301      	movs	r3, #1
 800194e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <MX_ADC2_Init+0xd4>)
 8001966:	f000 ff55 	bl	8002814 <HAL_ADC_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001970:	f000 f91a 	bl	8001ba8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001974:	2303      	movs	r3, #3
 8001976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001978:	2302      	movs	r3, #2
 800197a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800197c:	463b      	mov	r3, r7
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_ADC2_Init+0xd4>)
 8001982:	f000 ff47 	bl	8002814 <HAL_ADC_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 800198c:	f000 f90c 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000730 	.word	0x20000730
 800199c:	50000100 	.word	0x50000100

080019a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <MX_SPI1_Init+0x78>)
 80019a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019ee:	2207      	movs	r2, #7
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019fa:	2208      	movs	r2, #8
 80019fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_SPI1_Init+0x74>)
 8001a00:	f003 f864 	bl	8004acc <HAL_SPI_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a0a:	f000 f8cd 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000780 	.word	0x20000780
 8001a18:	40013000 	.word	0x40013000

08001a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MX_TIM2_Init+0xa8>)
 8001a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <MX_TIM2_Init+0xa8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_TIM2_Init+0xa8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_TIM2_Init+0xa8>)
 8001a56:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_TIM2_Init+0xa8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_TIM2_Init+0xa8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a68:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <MX_TIM2_Init+0xa8>)
 8001a6a:	f003 fba5 	bl	80051b8 <HAL_TIM_PWM_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a74:	f000 f898 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <MX_TIM2_Init+0xa8>)
 8001a88:	f004 f820 	bl	8005acc <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a92:	f000 f889 	bl	8001ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a96:	2360      	movs	r3, #96	; 0x60
 8001a98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_TIM2_Init+0xa8>)
 8001aae:	f003 fbdb 	bl	8005268 <HAL_TIM_PWM_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ab8:	f000 f876 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200007e4 	.word	0x200007e4

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001ae4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ae8:	6153      	str	r3, [r2, #20]
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6153      	str	r3, [r2, #20]
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <MX_GPIO_Init+0xd8>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	210a      	movs	r1, #10
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2e:	f001 fc6b 	bl	8003408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2110      	movs	r1, #16
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3a:	f001 fc65 	bl	8003408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8001b3e:	231a      	movs	r3, #26
 8001b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	4619      	mov	r1, r3
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f001 facc 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001b5c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7c:	f001 faba 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_B_Pin ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin|ANALOGUE_STICK_BUTTON_Pin;
 8001b80:	2303      	movs	r3, #3
 8001b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4619      	mov	r1, r3
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_GPIO_Init+0xdc>)
 8001b94:	f001 faae 	bl	80030f4 <HAL_GPIO_Init>

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <Error_Handler+0x8>
	...

08001bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6193      	str	r3, [r2, #24]
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_MspInit+0x4c>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	210f      	movs	r1, #15
 8001bee:	f06f 0001 	mvn.w	r0, #1
 8001bf2:	f001 fa56 	bl	80030a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_ADC_MspInit+0x74>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d124      	bne.n	8001c70 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_ADC_MspInit+0x78>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <HAL_ADC_MspInit+0x78>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6153      	str	r3, [r2, #20]
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_ADC_MspInit+0x78>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <HAL_ADC_MspInit+0x78>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <HAL_ADC_MspInit+0x78>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	6153      	str	r3, [r2, #20]
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_ADC_MspInit+0x78>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 8001c56:	2360      	movs	r3, #96	; 0x60
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6c:	f001 fa42 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	50000100 	.word	0x50000100
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a25      	ldr	r2, [pc, #148]	; (8001d34 <HAL_SPI_MspInit+0xb4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d144      	bne.n	8001d2c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_SPI_MspInit+0xb8>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <HAL_SPI_MspInit+0xb8>)
 8001ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cac:	6193      	str	r3, [r2, #24]
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_SPI_MspInit+0xb8>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_SPI_MspInit+0xb8>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_SPI_MspInit+0xb8>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	6153      	str	r3, [r2, #20]
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_SPI_MspInit+0xb8>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_SPI_MspInit+0xb8>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_SPI_MspInit+0xb8>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6153      	str	r3, [r2, #20]
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_SPI_MspInit+0xb8>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d08:	f001 f9f4 	bl	80030f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4619      	mov	r1, r3
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <HAL_SPI_MspInit+0xbc>)
 8001d28:	f001 f9e4 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d2c:	bf00      	nop
 8001d2e:	3728      	adds	r7, #40	; 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40013000 	.word	0x40013000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000400 	.word	0x48000400

08001d40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d50:	d10b      	bne.n	8001d6a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_TIM_PWM_MspInit+0x38>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_TIM_PWM_MspInit+0x38>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_TIM_PWM_MspInit+0x38>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <NMI_Handler+0x4>

08001d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler+0x4>

08001d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc8:	f000 f94a 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	return 1;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_kill>:

int _kill(int pid, int sig)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dea:	f003 fedd 	bl	8005ba8 <__errno>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2216      	movs	r2, #22
 8001df2:	601a      	str	r2, [r3, #0]
	return -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_exit>:

void _exit (int status)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ffe7 	bl	8001de0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e12:	e7fe      	b.n	8001e12 <_exit+0x12>

08001e14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e00a      	b.n	8001e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e26:	f3af 8000 	nop.w
 8001e2a:	4601      	mov	r1, r0
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60ba      	str	r2, [r7, #8]
 8001e32:	b2ca      	uxtb	r2, r1
 8001e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dbf0      	blt.n	8001e26 <_read+0x12>
	}

return len;
 8001e44:	687b      	ldr	r3, [r7, #4]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e009      	b.n	8001e74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	60ba      	str	r2, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbf1      	blt.n	8001e60 <_write+0x12>
	}
	return len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_close>:

int _close(int file)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eae:	605a      	str	r2, [r3, #4]
	return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <_isatty>:

int _isatty(int file)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
	return 0;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f003 fe42 	bl	8005ba8 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	220c      	movs	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20003000 	.word	0x20003000
 8001f50:	00000400 	.word	0x00000400
 8001f54:	20000830 	.word	0x20000830
 8001f58:	20000848 	.word	0x20000848

08001f5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <SystemInit+0x20>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <SystemInit+0x20>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001f86:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <LoopForever+0xe>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f9c:	4c0b      	ldr	r4, [pc, #44]	; (8001fcc <LoopForever+0x16>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff ffd7 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f003 fe01 	bl	8005bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb2:	f7ff fbeb 	bl	800178c <main>

08001fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fb8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001fc4:	08007910 	.word	0x08007910
  ldr r2, =_sbss
 8001fc8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001fcc:	20000848 	.word	0x20000848

08001fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC1_2_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_Init+0x28>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_Init+0x28>)
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f001 f851 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f808 	bl	8002000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff fde0 	bl	8001bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40022000 	.word	0x40022000

08002000 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x54>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_InitTick+0x58>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f001 f85b 	bl	80030da <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00e      	b.n	800204c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d80a      	bhi.n	800204a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002034:	2200      	movs	r2, #0
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f001 f831 	bl	80030a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <HAL_InitTick+0x5c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000028 	.word	0x20000028
 8002058:	20000030 	.word	0x20000030
 800205c:	2000002c 	.word	0x2000002c

08002060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000030 	.word	0x20000030
 8002084:	20000834 	.word	0x20000834

08002088 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;  
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000834 	.word	0x20000834

080020a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff ffee 	bl	8002088 <HAL_GetTick>
 80020ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d005      	beq.n	80020c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_Delay+0x44>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020c6:	bf00      	nop
 80020c8:	f7ff ffde 	bl	8002088 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d8f7      	bhi.n	80020c8 <HAL_Delay+0x28>
  {
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000030 	.word	0x20000030

080020e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b09a      	sub	sp, #104	; 0x68
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e172      	b.n	80023ee <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d176      	bne.n	8002208 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d152      	bne.n	80021c8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fd61 	bl	8001c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d13b      	bne.n	80021c8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fe83 	bl	8002e5c <ADC_Disable>
 8002156:	4603      	mov	r3, r0
 8002158:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d12f      	bne.n	80021c8 <HAL_ADC_Init+0xe0>
 8002168:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800216c:	2b00      	cmp	r3, #0
 800216e:	d12b      	bne.n	80021c8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002192:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021a2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021a4:	4b94      	ldr	r3, [pc, #592]	; (80023f8 <HAL_ADC_Init+0x310>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a94      	ldr	r2, [pc, #592]	; (80023fc <HAL_ADC_Init+0x314>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9a      	lsrs	r2, r3, #18
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021ba:	e002      	b.n	80021c2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3b01      	subs	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f9      	bne.n	80021bc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021e4:	d110      	bne.n	8002208 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f023 0312 	bic.w	r3, r3, #18
 80021ee:	f043 0210 	orr.w	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 80df 	bne.w	80023d4 <HAL_ADC_Init+0x2ec>
 8002216:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 80da 	bne.w	80023d4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 80d2 	bne.w	80023d4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002238:	f043 0202 	orr.w	r2, r3, #2
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002240:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <HAL_ADC_Init+0x318>)
 8002242:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800224c:	d102      	bne.n	8002254 <HAL_ADC_Init+0x16c>
 800224e:	4b6d      	ldr	r3, [pc, #436]	; (8002404 <HAL_ADC_Init+0x31c>)
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e002      	b.n	800225a <HAL_ADC_Init+0x172>
 8002254:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002258:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d108      	bne.n	800227a <HAL_ADC_Init+0x192>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_ADC_Init+0x192>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_ADC_Init+0x194>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d11c      	bne.n	80022ba <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002280:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	d010      	beq.n	80022a8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_ADC_Init+0x1ba>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Init+0x1ba>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_ADC_Init+0x1bc>
 80022a2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d108      	bne.n	80022ba <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80022a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7e5b      	ldrb	r3, [r3, #25]
 80022be:	035b      	lsls	r3, r3, #13
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022c4:	2a01      	cmp	r2, #1
 80022c6:	d002      	beq.n	80022ce <HAL_ADC_Init+0x1e6>
 80022c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022cc:	e000      	b.n	80022d0 <HAL_ADC_Init+0x1e8>
 80022ce:	2200      	movs	r2, #0
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4313      	orrs	r3, r2
 80022de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022e0:	4313      	orrs	r3, r2
 80022e2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d11b      	bne.n	8002326 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e5b      	ldrb	r3, [r3, #25]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	3b01      	subs	r3, #1
 80022fc:	045a      	lsls	r2, r3, #17
 80022fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002300:	4313      	orrs	r3, r2
 8002302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002306:	663b      	str	r3, [r7, #96]	; 0x60
 8002308:	e00d      	b.n	8002326 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	2b01      	cmp	r3, #1
 800232c:	d007      	beq.n	800233e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	4313      	orrs	r3, r2
 8002338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800233a:	4313      	orrs	r3, r2
 800233c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b00      	cmp	r3, #0
 800234a:	d114      	bne.n	8002376 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800235a:	f023 0302 	bic.w	r3, r3, #2
 800235e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7e1b      	ldrb	r3, [r3, #24]
 8002364:	039a      	lsls	r2, r3, #14
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4313      	orrs	r3, r2
 8002370:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002372:	4313      	orrs	r3, r2
 8002374:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_ADC_Init+0x320>)
 800237e:	4013      	ands	r3, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002386:	430b      	orrs	r3, r1
 8002388:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d10c      	bne.n	80023ac <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	f023 010f 	bic.w	r1, r3, #15
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
 80023aa:	e007      	b.n	80023bc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020f 	bic.w	r2, r2, #15
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f023 0303 	bic.w	r3, r3, #3
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
 80023d2:	e00a      	b.n	80023ea <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f023 0312 	bic.w	r3, r3, #18
 80023dc:	f043 0210 	orr.w	r2, r3, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3768      	adds	r7, #104	; 0x68
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000028 	.word	0x20000028
 80023fc:	431bde83 	.word	0x431bde83
 8002400:	50000300 	.word	0x50000300
 8002404:	50000100 	.word	0x50000100
 8002408:	fff0c007 	.word	0xfff0c007

0800240c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 809c 	bne.w	8002560 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_ADC_Start+0x2a>
 8002432:	2302      	movs	r3, #2
 8002434:	e097      	b.n	8002566 <HAL_ADC_Start+0x15a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fca8 	bl	8002d94 <ADC_Enable>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 8083 	bne.w	8002556 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_ADC_Start+0x164>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <HAL_ADC_Start+0x6e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002478:	d115      	bne.n	80024a6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d027      	beq.n	80024e4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80024a4:	e01e      	b.n	80024e4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ba:	d004      	beq.n	80024c6 <HAL_ADC_Start+0xba>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2c      	ldr	r2, [pc, #176]	; (8002574 <HAL_ADC_Start+0x168>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10e      	bne.n	80024e4 <HAL_ADC_Start+0xd8>
 80024c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f0:	d106      	bne.n	8002500 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f023 0206 	bic.w	r2, r3, #6
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
 80024fe:	e002      	b.n	8002506 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	221c      	movs	r2, #28
 8002514:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_ADC_Start+0x164>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2b00      	cmp	r3, #0
 8002520:	d010      	beq.n	8002544 <HAL_ADC_Start+0x138>
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_ADC_Start+0x164>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2b05      	cmp	r3, #5
 800252c:	d00a      	beq.n	8002544 <HAL_ADC_Start+0x138>
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_ADC_Start+0x164>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2b09      	cmp	r3, #9
 8002538:	d004      	beq.n	8002544 <HAL_ADC_Start+0x138>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002542:	d10f      	bne.n	8002564 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0204 	orr.w	r2, r2, #4
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	e006      	b.n	8002564 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800255e:	e001      	b.n	8002564 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002560:	2302      	movs	r3, #2
 8002562:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	50000300 	.word	0x50000300
 8002574:	50000100 	.word	0x50000100

08002578 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d102      	bne.n	8002594 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800258e:	2308      	movs	r3, #8
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e02e      	b.n	80025f2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002594:	4b5e      	ldr	r3, [pc, #376]	; (8002710 <HAL_ADC_PollForConversion+0x198>)
 8002596:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d112      	bne.n	80025ca <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d11d      	bne.n	80025ee <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f043 0220 	orr.w	r2, r3, #32
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e09d      	b.n	8002706 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e08b      	b.n	8002706 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80025ee:	230c      	movs	r3, #12
 80025f0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <HAL_ADC_PollForConversion+0x198>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_ADC_PollForConversion+0x90>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002606:	d104      	bne.n	8002612 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	e003      	b.n	800261a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002612:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800261a:	f7ff fd35 	bl	8002088 <HAL_GetTick>
 800261e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002620:	e021      	b.n	8002666 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d01d      	beq.n	8002666 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_ADC_PollForConversion+0xc8>
 8002630:	f7ff fd2a 	bl	8002088 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d212      	bcs.n	8002666 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f043 0204 	orr.w	r2, r3, #4
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e04f      	b.n	8002706 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0d6      	beq.n	8002622 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800268a:	2b00      	cmp	r3, #0
 800268c:	d131      	bne.n	80026f2 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002694:	2b00      	cmp	r3, #0
 8002696:	d12c      	bne.n	80026f2 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d125      	bne.n	80026f2 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d112      	bne.n	80026da <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d112      	bne.n	80026f2 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
 80026d8:	e00b      	b.n	80026f2 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	50000300 	.word	0x50000300

08002714 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADCEx_Calibration_Start+0x1c>
 8002746:	2302      	movs	r3, #2
 8002748:	e05f      	b.n	800280a <HAL_ADCEx_Calibration_Start+0xdc>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fb82 	bl	8002e5c <ADC_Disable>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d14e      	bne.n	8002800 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002776:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800278c:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800279c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800279e:	f7ff fc73 	bl	8002088 <HAL_GetTick>
 80027a2:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027a4:	e01c      	b.n	80027e0 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80027a6:	f7ff fc6f 	bl	8002088 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b0a      	cmp	r3, #10
 80027b2:	d915      	bls.n	80027e0 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027c2:	d10d      	bne.n	80027e0 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f023 0312 	bic.w	r3, r3, #18
 80027cc:	f043 0210 	orr.w	r2, r3, #16
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e014      	b.n	800280a <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ee:	d0da      	beq.n	80027a6 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f023 0303 	bic.w	r3, r3, #3
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002814:	b480      	push	{r7}
 8002816:	b09b      	sub	sp, #108	; 0x6c
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x22>
 8002832:	2302      	movs	r3, #2
 8002834:	e2a4      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x56c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f040 8288 	bne.w	8002d5e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d81c      	bhi.n	8002890 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	461a      	mov	r2, r3
 800286a:	231f      	movs	r3, #31
 800286c:	4093      	lsls	r3, r2
 800286e:	43db      	mvns	r3, r3
 8002870:	4019      	ands	r1, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa00 f203 	lsl.w	r2, r0, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
 800288e:	e063      	b.n	8002958 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b09      	cmp	r3, #9
 8002896:	d81e      	bhi.n	80028d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	3b1e      	subs	r3, #30
 80028ac:	221f      	movs	r2, #31
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	4019      	ands	r1, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	3b1e      	subs	r3, #30
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	635a      	str	r2, [r3, #52]	; 0x34
 80028d4:	e040      	b.n	8002958 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b0e      	cmp	r3, #14
 80028dc:	d81e      	bhi.n	800291c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	3b3c      	subs	r3, #60	; 0x3c
 80028f2:	221f      	movs	r2, #31
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	4019      	ands	r1, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	3b3c      	subs	r3, #60	; 0x3c
 800290e:	fa00 f203 	lsl.w	r2, r0, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
 800291a:	e01d      	b.n	8002958 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	3b5a      	subs	r3, #90	; 0x5a
 8002930:	221f      	movs	r2, #31
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	4019      	ands	r1, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	3b5a      	subs	r3, #90	; 0x5a
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 80e5 	bne.w	8002b32 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b09      	cmp	r3, #9
 800296e:	d91c      	bls.n	80029aa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6999      	ldr	r1, [r3, #24]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	3b1e      	subs	r3, #30
 8002982:	2207      	movs	r2, #7
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	4019      	ands	r1, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6898      	ldr	r0, [r3, #8]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	3b1e      	subs	r3, #30
 800299c:	fa00 f203 	lsl.w	r2, r0, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	619a      	str	r2, [r3, #24]
 80029a8:	e019      	b.n	80029de <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6959      	ldr	r1, [r3, #20]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	2207      	movs	r2, #7
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	4019      	ands	r1, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6898      	ldr	r0, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	fa00 f203 	lsl.w	r2, r0, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	08db      	lsrs	r3, r3, #3
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d84f      	bhi.n	8002aa0 <HAL_ADC_ConfigChannel+0x28c>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a3b 	.word	0x08002a3b
 8002a10:	08002a5d 	.word	0x08002a5d
 8002a14:	08002a7f 	.word	0x08002a7f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a1e:	4b94      	ldr	r3, [pc, #592]	; (8002c70 <HAL_ADC_ConfigChannel+0x45c>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	0691      	lsls	r1, r2, #26
 8002a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a38:	e07e      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a40:	4b8b      	ldr	r3, [pc, #556]	; (8002c70 <HAL_ADC_ConfigChannel+0x45c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	0691      	lsls	r1, r2, #26
 8002a4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a58:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a5a:	e06d      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a62:	4b83      	ldr	r3, [pc, #524]	; (8002c70 <HAL_ADC_ConfigChannel+0x45c>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	0691      	lsls	r1, r2, #26
 8002a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a7a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a7c:	e05c      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a84:	4b7a      	ldr	r3, [pc, #488]	; (8002c70 <HAL_ADC_ConfigChannel+0x45c>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	0691      	lsls	r1, r2, #26
 8002a8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a90:	430a      	orrs	r2, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a9c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a9e:	e04b      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	069b      	lsls	r3, r3, #26
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d107      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ac2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	069b      	lsls	r3, r3, #26
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d107      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ae6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	069b      	lsls	r3, r3, #26
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d107      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b0a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	069b      	lsls	r3, r3, #26
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d10a      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b2e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b30:	e001      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002b36:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d108      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x344>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x344>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x346>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 810a 	bne.w	8002d74 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d00f      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2201      	movs	r2, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	400a      	ands	r2, r1
 8002b82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b86:	e049      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2201      	movs	r2, #1
 8002b96:	409a      	lsls	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b09      	cmp	r3, #9
 8002ba8:	d91c      	bls.n	8002be4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6999      	ldr	r1, [r3, #24]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b1b      	subs	r3, #27
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	4019      	ands	r1, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6898      	ldr	r0, [r3, #8]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3b1b      	subs	r3, #27
 8002bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	619a      	str	r2, [r3, #24]
 8002be2:	e01b      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6959      	ldr	r1, [r3, #20]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	4019      	ands	r1, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6898      	ldr	r0, [r3, #8]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	fa00 f203 	lsl.w	r2, r0, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c1c:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_ADC_ConfigChannel+0x460>)
 8002c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d105      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c38:	2b11      	cmp	r3, #17
 8002c3a:	d105      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c4c:	2b12      	cmp	r3, #18
 8002c4e:	f040 8091 	bne.w	8002d74 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 808a 	bne.w	8002d74 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c68:	d108      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x468>
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_ADC_ConfigChannel+0x464>)
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e008      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x46e>
 8002c70:	83fff000 	.word	0x83fff000
 8002c74:	50000300 	.word	0x50000300
 8002c78:	50000100 	.word	0x50000100
 8002c7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c80:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d108      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x48e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x48e>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x490>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d150      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d010      	beq.n	8002cd0 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x4b6>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x4b6>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x4b8>
 8002cca:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d13c      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d11d      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x500>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce0:	d118      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cec:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cee:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_ADC_ConfigChannel+0x578>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <HAL_ADC_ConfigChannel+0x57c>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	0c9a      	lsrs	r2, r3, #18
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d04:	e002      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f9      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d12:	e02e      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b11      	cmp	r3, #17
 8002d1a:	d10b      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x520>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d24:	d106      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d30:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d32:	e01e      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b12      	cmp	r3, #18
 8002d3a:	d11a      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d46:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d48:	e013      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d5c:	e00a      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d70:	e000      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d72:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	376c      	adds	r7, #108	; 0x6c
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	20000028 	.word	0x20000028
 8002d90:	431bde83 	.word	0x431bde83

08002d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d108      	bne.n	8002dc0 <ADC_Enable+0x2c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <ADC_Enable+0x2c>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <ADC_Enable+0x2e>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d143      	bne.n	8002e4e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <ADC_Enable+0xc4>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00d      	beq.n	8002df0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0210 	orr.w	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e02f      	b.n	8002e50 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e00:	f7ff f942 	bl	8002088 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e06:	e01b      	b.n	8002e40 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e08:	f7ff f93e 	bl	8002088 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d914      	bls.n	8002e40 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d00d      	beq.n	8002e40 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0210 	orr.w	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e007      	b.n	8002e50 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d1dc      	bne.n	8002e08 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	8000003f 	.word	0x8000003f

08002e5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d108      	bne.n	8002e88 <ADC_Disable+0x2c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <ADC_Disable+0x2c>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <ADC_Disable+0x2e>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d047      	beq.n	8002f1e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030d 	and.w	r3, r3, #13
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10f      	bne.n	8002ebc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0202 	orr.w	r2, r2, #2
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002eb4:	f7ff f8e8 	bl	8002088 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eba:	e029      	b.n	8002f10 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f043 0210 	orr.w	r2, r3, #16
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e023      	b.n	8002f20 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ed8:	f7ff f8d6 	bl	8002088 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d914      	bls.n	8002f10 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10d      	bne.n	8002f10 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f043 0210 	orr.w	r2, r3, #16
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f043 0201 	orr.w	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e007      	b.n	8002f20 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d0dc      	beq.n	8002ed8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff47 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b4:	f7ff ff5c 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff8e 	bl	8002fe0 <NVIC_EncodePriority>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff5d 	bl	8002f8c <__NVIC_SetPriority>
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffb0 	bl	8003048 <SysTick_Config>
 80030e8:	4603      	mov	r3, r0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003102:	e14e      	b.n	80033a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	4013      	ands	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8140 	beq.w	800339c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d005      	beq.n	8003134 <HAL_GPIO_Init+0x40>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d130      	bne.n	8003196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316a:	2201      	movs	r2, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 0201 	and.w	r2, r3, #1
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d017      	beq.n	80031d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d123      	bne.n	8003226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	08da      	lsrs	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3208      	adds	r2, #8
 80031e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	6939      	ldr	r1, [r7, #16]
 8003222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0203 	and.w	r2, r3, #3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 809a 	beq.w	800339c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003268:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <HAL_GPIO_Init+0x2cc>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	4a54      	ldr	r2, [pc, #336]	; (80033c0 <HAL_GPIO_Init+0x2cc>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6193      	str	r3, [r2, #24]
 8003274:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <HAL_GPIO_Init+0x2cc>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003280:	4a50      	ldr	r2, [pc, #320]	; (80033c4 <HAL_GPIO_Init+0x2d0>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	220f      	movs	r2, #15
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032aa:	d013      	beq.n	80032d4 <HAL_GPIO_Init+0x1e0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a46      	ldr	r2, [pc, #280]	; (80033c8 <HAL_GPIO_Init+0x2d4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00d      	beq.n	80032d0 <HAL_GPIO_Init+0x1dc>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a45      	ldr	r2, [pc, #276]	; (80033cc <HAL_GPIO_Init+0x2d8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <HAL_GPIO_Init+0x1d8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a44      	ldr	r2, [pc, #272]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <HAL_GPIO_Init+0x1d4>
 80032c4:	2303      	movs	r3, #3
 80032c6:	e006      	b.n	80032d6 <HAL_GPIO_Init+0x1e2>
 80032c8:	2305      	movs	r3, #5
 80032ca:	e004      	b.n	80032d6 <HAL_GPIO_Init+0x1e2>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e002      	b.n	80032d6 <HAL_GPIO_Init+0x1e2>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_GPIO_Init+0x1e2>
 80032d4:	2300      	movs	r3, #0
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	f002 0203 	and.w	r2, r2, #3
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	4093      	lsls	r3, r2
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032e6:	4937      	ldr	r1, [pc, #220]	; (80033c4 <HAL_GPIO_Init+0x2d0>)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3302      	adds	r3, #2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f4:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003318:	4a2e      	ldr	r2, [pc, #184]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800331e:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003342:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	43db      	mvns	r3, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800336c:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003372:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003396:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	3301      	adds	r3, #1
 80033a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f47f aea9 	bne.w	8003104 <HAL_GPIO_Init+0x10>
  }
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40010000 	.word	0x40010000
 80033c8:	48000400 	.word	0x48000400
 80033cc:	48000800 	.word	0x48000800
 80033d0:	48000c00 	.word	0x48000c00
 80033d4:	40010400 	.word	0x40010400

080033d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	887b      	ldrh	r3, [r7, #2]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	e001      	b.n	80033fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
 8003414:	4613      	mov	r3, r2
 8003416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003418:	787b      	ldrb	r3, [r7, #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003424:	e002      	b.n	800342c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800343e:	af00      	add	r7, sp, #0
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003448:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d102      	bne.n	800345e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f001 b823 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 817d 	beq.w	800376e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003474:	4bbc      	ldr	r3, [pc, #752]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b04      	cmp	r3, #4
 800347e:	d00c      	beq.n	800349a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003480:	4bb9      	ldr	r3, [pc, #740]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b08      	cmp	r3, #8
 800348a:	d15c      	bne.n	8003546 <HAL_RCC_OscConfig+0x10e>
 800348c:	4bb6      	ldr	r3, [pc, #728]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d155      	bne.n	8003546 <HAL_RCC_OscConfig+0x10e>
 800349a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_RCC_OscConfig+0x94>
 80034c6:	4ba8      	ldr	r3, [pc, #672]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	e015      	b.n	80034f8 <HAL_RCC_OscConfig+0xc0>
 80034cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80034f4:	4b9c      	ldr	r3, [pc, #624]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003500:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003504:	fa92 f2a2 	rbit	r2, r2
 8003508:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800350c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f042 0220 	orr.w	r2, r2, #32
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f002 021f 	and.w	r2, r2, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 811f 	beq.w	800376c <HAL_RCC_OscConfig+0x334>
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 8116 	bne.w	800376c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f000 bfaf 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x12e>
 8003558:	4b83      	ldr	r3, [pc, #524]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a82      	ldr	r2, [pc, #520]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e036      	b.n	80035d4 <HAL_RCC_OscConfig+0x19c>
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x158>
 8003576:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7b      	ldr	r2, [pc, #492]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 800357c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b79      	ldr	r3, [pc, #484]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a78      	ldr	r2, [pc, #480]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 8003588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e021      	b.n	80035d4 <HAL_RCC_OscConfig+0x19c>
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x184>
 80035a2:	4b71      	ldr	r3, [pc, #452]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a70      	ldr	r2, [pc, #448]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b6e      	ldr	r3, [pc, #440]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a6d      	ldr	r2, [pc, #436]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e00b      	b.n	80035d4 <HAL_RCC_OscConfig+0x19c>
 80035bc:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a69      	ldr	r2, [pc, #420]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b67      	ldr	r3, [pc, #412]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a66      	ldr	r2, [pc, #408]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035d4:	4b64      	ldr	r3, [pc, #400]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	f023 020f 	bic.w	r2, r3, #15
 80035dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	495f      	ldr	r1, [pc, #380]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d059      	beq.n	80036b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fd43 	bl	8002088 <HAL_GetTick>
 8003602:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003608:	f7fe fd3e 	bl	8002088 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b64      	cmp	r3, #100	; 0x64
 8003616:	d902      	bls.n	800361e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	f000 bf43 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 800361e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003622:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003632:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d102      	bne.n	8003650 <HAL_RCC_OscConfig+0x218>
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	e015      	b.n	800367c <HAL_RCC_OscConfig+0x244>
 8003650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003654:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003668:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800366c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003678:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003680:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003684:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003688:	fa92 f2a2 	rbit	r2, r2
 800368c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003690:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f042 0220 	orr.w	r2, r2, #32
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	f002 021f 	and.w	r2, r2, #31
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ab      	beq.n	8003608 <HAL_RCC_OscConfig+0x1d0>
 80036b0:	e05d      	b.n	800376e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fe fce9 	bl	8002088 <HAL_GetTick>
 80036b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036bc:	f7fe fce4 	bl	8002088 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b64      	cmp	r3, #100	; 0x64
 80036ca:	d902      	bls.n	80036d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	f000 bee9 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 80036d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80036e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d102      	bne.n	8003704 <HAL_RCC_OscConfig+0x2cc>
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	e015      	b.n	8003730 <HAL_RCC_OscConfig+0x2f8>
 8003704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003708:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800371c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003720:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCC_OscConfig+0x330>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003734:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003738:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800373c:	fa92 f2a2 	rbit	r2, r2
 8003740:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003744:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f042 0220 	orr.w	r2, r2, #32
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f002 021f 	and.w	r2, r2, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ab      	bne.n	80036bc <HAL_RCC_OscConfig+0x284>
 8003764:	e003      	b.n	800376e <HAL_RCC_OscConfig+0x336>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 817d 	beq.w	8003a7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003784:	4ba6      	ldr	r3, [pc, #664]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003790:	4ba3      	ldr	r3, [pc, #652]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d172      	bne.n	8003882 <HAL_RCC_OscConfig+0x44a>
 800379c:	4ba0      	ldr	r3, [pc, #640]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d16c      	bne.n	8003882 <HAL_RCC_OscConfig+0x44a>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80037ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d102      	bne.n	80037d8 <HAL_RCC_OscConfig+0x3a0>
 80037d2:	4b93      	ldr	r3, [pc, #588]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	e013      	b.n	8003800 <HAL_RCC_OscConfig+0x3c8>
 80037d8:	2302      	movs	r3, #2
 80037da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037ea:	2302      	movs	r3, #2
 80037ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037fc:	4b88      	ldr	r3, [pc, #544]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2202      	movs	r2, #2
 8003802:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003806:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800380a:	fa92 f2a2 	rbit	r2, r2
 800380e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003812:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003816:	fab2 f282 	clz	r2, r2
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f042 0220 	orr.w	r2, r2, #32
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f002 021f 	and.w	r2, r2, #31
 8003826:	2101      	movs	r1, #1
 8003828:	fa01 f202 	lsl.w	r2, r1, r2
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCC_OscConfig+0x410>
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d002      	beq.n	8003848 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	f000 be2e 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003848:	4b75      	ldr	r3, [pc, #468]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	21f8      	movs	r1, #248	; 0xf8
 800385e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003866:	fa91 f1a1 	rbit	r1, r1
 800386a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800386e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003872:	fab1 f181 	clz	r1, r1
 8003876:	b2c9      	uxtb	r1, r1
 8003878:	408b      	lsls	r3, r1
 800387a:	4969      	ldr	r1, [pc, #420]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003880:	e0fd      	b.n	8003a7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8088 	beq.w	80039a4 <HAL_RCC_OscConfig+0x56c>
 8003894:	2301      	movs	r3, #1
 8003896:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80038a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	461a      	mov	r2, r3
 80038bc:	2301      	movs	r3, #1
 80038be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe fbe2 	bl	8002088 <HAL_GetTick>
 80038c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fe fbdd 	bl	8002088 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d902      	bls.n	80038e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	f000 bde2 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 80038e0:	2302      	movs	r3, #2
 80038e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80038f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d102      	bne.n	8003910 <HAL_RCC_OscConfig+0x4d8>
 800390a:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e013      	b.n	8003938 <HAL_RCC_OscConfig+0x500>
 8003910:	2302      	movs	r3, #2
 8003912:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003922:	2302      	movs	r3, #2
 8003924:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003928:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2202      	movs	r2, #2
 800393a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800393e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003942:	fa92 f2a2 	rbit	r2, r2
 8003946:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800394a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800394e:	fab2 f282 	clz	r2, r2
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	f042 0220 	orr.w	r2, r2, #32
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f002 021f 	and.w	r2, r2, #31
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f202 	lsl.w	r2, r1, r2
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0af      	beq.n	80038ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	21f8      	movs	r1, #248	; 0xf8
 8003980:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003988:	fa91 f1a1 	rbit	r1, r1
 800398c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003990:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003994:	fab1 f181 	clz	r1, r1
 8003998:	b2c9      	uxtb	r1, r1
 800399a:	408b      	lsls	r3, r1
 800399c:	4920      	ldr	r1, [pc, #128]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
 80039a2:	e06c      	b.n	8003a7e <HAL_RCC_OscConfig+0x646>
 80039a4:	2301      	movs	r3, #1
 80039a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80039b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	461a      	mov	r2, r3
 80039cc:	2300      	movs	r3, #0
 80039ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fe fb5a 	bl	8002088 <HAL_GetTick>
 80039d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039da:	f7fe fb55 	bl	8002088 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d902      	bls.n	80039f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	f000 bd5a 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 80039f0:	2302      	movs	r3, #2
 80039f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d104      	bne.n	8003a24 <HAL_RCC_OscConfig+0x5ec>
 8003a1a:	4b01      	ldr	r3, [pc, #4]	; (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	e015      	b.n	8003a4c <HAL_RCC_OscConfig+0x614>
 8003a20:	40021000 	.word	0x40021000
 8003a24:	2302      	movs	r3, #2
 8003a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a36:	2302      	movs	r3, #2
 8003a38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a40:	fa93 f3a3 	rbit	r3, r3
 8003a44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a48:	4bc8      	ldr	r3, [pc, #800]	; (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003a52:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a56:	fa92 f2a2 	rbit	r2, r2
 8003a5a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003a5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003a62:	fab2 f282 	clz	r2, r2
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	f042 0220 	orr.w	r2, r2, #32
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	f002 021f 	and.w	r2, r2, #31
 8003a72:	2101      	movs	r1, #1
 8003a74:	fa01 f202 	lsl.w	r2, r1, r2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ad      	bne.n	80039da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8110 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d079      	beq.n	8003b98 <HAL_RCC_OscConfig+0x760>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4bab      	ldr	r3, [pc, #684]	; (8003d70 <HAL_RCC_OscConfig+0x938>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2301      	movs	r3, #1
 8003acc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ace:	f7fe fadb 	bl	8002088 <HAL_GetTick>
 8003ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fe fad6 	bl	8002088 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d902      	bls.n	8003aee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	f000 bcdb 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 8003aee:	2302      	movs	r3, #2
 8003af0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b08:	2202      	movs	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	fa93 f2a3 	rbit	r2, r3
 8003b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	fa93 f2a3 	rbit	r2, r3
 8003b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b48:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b54:	2102      	movs	r1, #2
 8003b56:	6019      	str	r1, [r3, #0]
 8003b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	fa93 f1a3 	rbit	r1, r3
 8003b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b6e:	6019      	str	r1, [r3, #0]
  return result;
 8003b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0a0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x6a0>
 8003b96:	e08d      	b.n	8003cb4 <HAL_RCC_OscConfig+0x87c>
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bba:	601a      	str	r2, [r3, #0]
  return result;
 8003bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b68      	ldr	r3, [pc, #416]	; (8003d70 <HAL_RCC_OscConfig+0x938>)
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fe fa55 	bl	8002088 <HAL_GetTick>
 8003bde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fe fa50 	bl	8002088 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d902      	bls.n	8003bfa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	f000 bc55 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 8003bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c02:	2202      	movs	r2, #2
 8003c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fa93 f2a3 	rbit	r2, r3
 8003c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	fa93 f2a3 	rbit	r2, r3
 8003c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c72:	2102      	movs	r1, #2
 8003c74:	6019      	str	r1, [r3, #0]
 8003c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f1a3 	rbit	r1, r3
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c8c:	6019      	str	r1, [r3, #0]
  return result;
 8003c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c92:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	fab3 f383 	clz	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d197      	bne.n	8003be4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 81a1 	beq.w	800400c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd0:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	61d3      	str	r3, [r2, #28]
 8003ce8:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <HAL_RCC_OscConfig+0x93c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11a      	bne.n	8003d4c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_RCC_OscConfig+0x93c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a16      	ldr	r2, [pc, #88]	; (8003d74 <HAL_RCC_OscConfig+0x93c>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7fe f9b1 	bl	8002088 <HAL_GetTick>
 8003d26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	e009      	b.n	8003d40 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fe f9ac 	bl	8002088 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	; 0x64
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e3b1      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <HAL_RCC_OscConfig+0x93c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ef      	beq.n	8003d2c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10d      	bne.n	8003d78 <HAL_RCC_OscConfig+0x940>
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	4a02      	ldr	r2, [pc, #8]	; (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6213      	str	r3, [r2, #32]
 8003d68:	e03c      	b.n	8003de4 <HAL_RCC_OscConfig+0x9ac>
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	10908120 	.word	0x10908120
 8003d74:	40007000 	.word	0x40007000
 8003d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCC_OscConfig+0x96a>
 8003d88:	4bc1      	ldr	r3, [pc, #772]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4ac0      	ldr	r2, [pc, #768]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	6213      	str	r3, [r2, #32]
 8003d94:	4bbe      	ldr	r3, [pc, #760]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	4abd      	ldr	r2, [pc, #756]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003d9a:	f023 0304 	bic.w	r3, r3, #4
 8003d9e:	6213      	str	r3, [r2, #32]
 8003da0:	e020      	b.n	8003de4 <HAL_RCC_OscConfig+0x9ac>
 8003da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x994>
 8003db2:	4bb7      	ldr	r3, [pc, #732]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4ab6      	ldr	r2, [pc, #728]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	6213      	str	r3, [r2, #32]
 8003dbe:	4bb4      	ldr	r3, [pc, #720]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4ab3      	ldr	r2, [pc, #716]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6213      	str	r3, [r2, #32]
 8003dca:	e00b      	b.n	8003de4 <HAL_RCC_OscConfig+0x9ac>
 8003dcc:	4bb0      	ldr	r3, [pc, #704]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4aaf      	ldr	r2, [pc, #700]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	6213      	str	r3, [r2, #32]
 8003dd8:	4bad      	ldr	r3, [pc, #692]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	4aac      	ldr	r2, [pc, #688]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dde:	f023 0304 	bic.w	r3, r3, #4
 8003de2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8081 	beq.w	8003ef8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe f947 	bl	8002088 <HAL_GetTick>
 8003dfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fe f942 	bl	8002088 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e345      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 8003e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e20:	2202      	movs	r2, #2
 8003e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e28:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	fa93 f2a3 	rbit	r2, r3
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e44:	2202      	movs	r2, #2
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	fa93 f2a3 	rbit	r2, r3
 8003e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e5e:	601a      	str	r2, [r3, #0]
  return result;
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCC_OscConfig+0xa4c>
 8003e7e:	4b84      	ldr	r3, [pc, #528]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	e013      	b.n	8003eac <HAL_RCC_OscConfig+0xa74>
 8003e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	fa93 f2a3 	rbit	r2, r3
 8003e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	4b79      	ldr	r3, [pc, #484]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eb0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	6011      	str	r1, [r2, #0]
 8003eb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ebc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	fa92 f1a2 	rbit	r1, r2
 8003ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ece:	6011      	str	r1, [r2, #0]
  return result;
 8003ed0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ed4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	fab2 f282 	clz	r2, r2
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	f002 021f 	and.w	r2, r2, #31
 8003eea:	2101      	movs	r1, #1
 8003eec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d084      	beq.n	8003e00 <HAL_RCC_OscConfig+0x9c8>
 8003ef6:	e07f      	b.n	8003ff8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef8:	f7fe f8c6 	bl	8002088 <HAL_GetTick>
 8003efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	e00b      	b.n	8003f1a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fe f8c1 	bl	8002088 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e2c4      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f22:	2202      	movs	r2, #2
 8003f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	fa93 f2a3 	rbit	r2, r3
 8003f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f38:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f42:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f46:	2202      	movs	r2, #2
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fa93 f2a3 	rbit	r2, r3
 8003f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f60:	601a      	str	r2, [r3, #0]
  return result;
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d102      	bne.n	8003f86 <HAL_RCC_OscConfig+0xb4e>
 8003f80:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	e013      	b.n	8003fae <HAL_RCC_OscConfig+0xb76>
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f8e:	2202      	movs	r2, #2
 8003f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	fa93 f2a3 	rbit	r2, r3
 8003fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fb2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fbe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	fa92 f1a2 	rbit	r1, r2
 8003fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fcc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fd0:	6011      	str	r1, [r2, #0]
  return result;
 8003fd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fd6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	fab2 f282 	clz	r2, r2
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	f002 021f 	and.w	r2, r2, #31
 8003fec:	2101      	movs	r1, #1
 8003fee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d184      	bne.n	8003f02 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ff8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004000:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8004006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8242 	beq.w	80044a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <HAL_RCC_OscConfig+0xc58>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b08      	cmp	r3, #8
 8004028:	f000 8213 	beq.w	8004452 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	2b02      	cmp	r3, #2
 800403a:	f040 8162 	bne.w	8004302 <HAL_RCC_OscConfig+0xeca>
 800403e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004042:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004046:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800404a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004050:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	fa93 f2a3 	rbit	r2, r3
 800405a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004062:	601a      	str	r2, [r3, #0]
  return result;
 8004064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004068:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800406c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004078:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	461a      	mov	r2, r3
 8004080:	2300      	movs	r3, #0
 8004082:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe f800 	bl	8002088 <HAL_GetTick>
 8004088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800408c:	e00c      	b.n	80040a8 <HAL_RCC_OscConfig+0xc70>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd fff8 	bl	8002088 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e1fd      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 80040a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80040b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f2a3 	rbit	r2, r3
 80040c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80040cc:	601a      	str	r2, [r3, #0]
  return result;
 80040ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80040d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d102      	bne.n	80040f2 <HAL_RCC_OscConfig+0xcba>
 80040ec:	4bb0      	ldr	r3, [pc, #704]	; (80043b0 <HAL_RCC_OscConfig+0xf78>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	e027      	b.n	8004142 <HAL_RCC_OscConfig+0xd0a>
 80040f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80040fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	fa93 f2a3 	rbit	r2, r3
 800410e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004112:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	fa93 f2a3 	rbit	r2, r3
 8004134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004138:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	4b9c      	ldr	r3, [pc, #624]	; (80043b0 <HAL_RCC_OscConfig+0xf78>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004146:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800414a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800414e:	6011      	str	r1, [r2, #0]
 8004150:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004154:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	fa92 f1a2 	rbit	r1, r2
 800415e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004162:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004166:	6011      	str	r1, [r2, #0]
  return result;
 8004168:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800416c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	fab2 f282 	clz	r2, r2
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	f042 0220 	orr.w	r2, r2, #32
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	f002 021f 	and.w	r2, r2, #31
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f202 	lsl.w	r2, r1, r2
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d182      	bne.n	8004094 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800418e:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <HAL_RCC_OscConfig+0xf78>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	430b      	orrs	r3, r1
 80041b0:	497f      	ldr	r1, [pc, #508]	; (80043b0 <HAL_RCC_OscConfig+0xf78>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
 80041b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80041be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	fa93 f2a3 	rbit	r2, r3
 80041d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041da:	601a      	str	r2, [r3, #0]
  return result;
 80041dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	461a      	mov	r2, r3
 80041f8:	2301      	movs	r3, #1
 80041fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fd ff44 	bl	8002088 <HAL_GetTick>
 8004200:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004204:	e009      	b.n	800421a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004206:	f7fd ff3f 	bl	8002088 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e144      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 800421a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	fa93 f2a3 	rbit	r2, r3
 8004236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800423e:	601a      	str	r2, [r3, #0]
  return result;
 8004240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004244:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004248:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_RCC_OscConfig+0xe2c>
 800425e:	4b54      	ldr	r3, [pc, #336]	; (80043b0 <HAL_RCC_OscConfig+0xf78>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	e027      	b.n	80042b4 <HAL_RCC_OscConfig+0xe7c>
 8004264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004268:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800426c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004276:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	fa93 f2a3 	rbit	r2, r3
 8004280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004284:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fa93 f2a3 	rbit	r2, r3
 80042a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	4b3f      	ldr	r3, [pc, #252]	; (80043b0 <HAL_RCC_OscConfig+0xf78>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80042bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042c0:	6011      	str	r1, [r2, #0]
 80042c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	fa92 f1a2 	rbit	r1, r2
 80042d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042d8:	6011      	str	r1, [r2, #0]
  return result;
 80042da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	fab2 f282 	clz	r2, r2
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	f042 0220 	orr.w	r2, r2, #32
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	f002 021f 	and.w	r2, r2, #31
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f202 	lsl.w	r2, r1, r2
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d082      	beq.n	8004206 <HAL_RCC_OscConfig+0xdce>
 8004300:	e0cf      	b.n	80044a2 <HAL_RCC_OscConfig+0x106a>
 8004302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004306:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800430a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800430e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004314:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fa93 f2a3 	rbit	r2, r3
 800431e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004322:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004326:	601a      	str	r2, [r3, #0]
  return result;
 8004328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004330:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800433c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	461a      	mov	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fd fe9e 	bl	8002088 <HAL_GetTick>
 800434c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004350:	e009      	b.n	8004366 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004352:	f7fd fe99 	bl	8002088 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e09e      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800436e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004378:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	fa93 f2a3 	rbit	r2, r3
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800438a:	601a      	str	r2, [r3, #0]
  return result;
 800438c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004390:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004394:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d104      	bne.n	80043b4 <HAL_RCC_OscConfig+0xf7c>
 80043aa:	4b01      	ldr	r3, [pc, #4]	; (80043b0 <HAL_RCC_OscConfig+0xf78>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	e029      	b.n	8004404 <HAL_RCC_OscConfig+0xfcc>
 80043b0:	40021000 	.word	0x40021000
 80043b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80043bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	fa93 f2a3 	rbit	r2, r3
 80043d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	fa93 f2a3 	rbit	r2, r3
 80043f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCC_OscConfig+0x1078>)
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004408:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800440c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004410:	6011      	str	r1, [r2, #0]
 8004412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004416:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	fa92 f1a2 	rbit	r1, r2
 8004420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004424:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004428:	6011      	str	r1, [r2, #0]
  return result;
 800442a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800442e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	fab2 f282 	clz	r2, r2
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	f042 0220 	orr.w	r2, r2, #32
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	f002 021f 	and.w	r2, r2, #31
 8004444:	2101      	movs	r1, #1
 8004446:	fa01 f202 	lsl.w	r2, r1, r2
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d180      	bne.n	8004352 <HAL_RCC_OscConfig+0xf1a>
 8004450:	e027      	b.n	80044a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004456:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e01e      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004466:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <HAL_RCC_OscConfig+0x1078>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800446e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004472:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	429a      	cmp	r2, r3
 8004484:	d10b      	bne.n	800449e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004486:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800448a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800448e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000

080044b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b09e      	sub	sp, #120	; 0x78
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e162      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044cc:	4b90      	ldr	r3, [pc, #576]	; (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d910      	bls.n	80044fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b8d      	ldr	r3, [pc, #564]	; (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 0207 	bic.w	r2, r3, #7
 80044e2:	498b      	ldr	r1, [pc, #556]	; (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b89      	ldr	r3, [pc, #548]	; (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e14a      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004508:	4b82      	ldr	r3, [pc, #520]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	497f      	ldr	r1, [pc, #508]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 8004516:	4313      	orrs	r3, r2
 8004518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80dc 	beq.w	80046e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d13c      	bne.n	80045aa <HAL_RCC_ClockConfig+0xf6>
 8004530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004534:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800453e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004540:	fab3 f383 	clz	r3, r3
 8004544:	b2db      	uxtb	r3, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d102      	bne.n	800455a <HAL_RCC_ClockConfig+0xa6>
 8004554:	4b6f      	ldr	r3, [pc, #444]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	e00f      	b.n	800457a <HAL_RCC_ClockConfig+0xc6>
 800455a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800455e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	667b      	str	r3, [r7, #100]	; 0x64
 8004568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800456c:	663b      	str	r3, [r7, #96]	; 0x60
 800456e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004576:	4b67      	ldr	r3, [pc, #412]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800457e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004582:	fa92 f2a2 	rbit	r2, r2
 8004586:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800458a:	fab2 f282 	clz	r2, r2
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	f042 0220 	orr.w	r2, r2, #32
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	f002 021f 	and.w	r2, r2, #31
 800459a:	2101      	movs	r1, #1
 800459c:	fa01 f202 	lsl.w	r2, r1, r2
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d17b      	bne.n	800469e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0f3      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d13c      	bne.n	800462c <HAL_RCC_ClockConfig+0x178>
 80045b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80045c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	fab3 f383 	clz	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d102      	bne.n	80045dc <HAL_RCC_ClockConfig+0x128>
 80045d6:	4b4f      	ldr	r3, [pc, #316]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	e00f      	b.n	80045fc <HAL_RCC_ClockConfig+0x148>
 80045dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ee:	643b      	str	r3, [r7, #64]	; 0x40
 80045f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f8:	4b46      	ldr	r3, [pc, #280]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004600:	63ba      	str	r2, [r7, #56]	; 0x38
 8004602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004604:	fa92 f2a2 	rbit	r2, r2
 8004608:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800460a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800460c:	fab2 f282 	clz	r2, r2
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	f042 0220 	orr.w	r2, r2, #32
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	f002 021f 	and.w	r2, r2, #31
 800461c:	2101      	movs	r1, #1
 800461e:	fa01 f202 	lsl.w	r2, r1, r2
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d13a      	bne.n	800469e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0b2      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
 800462c:	2302      	movs	r3, #2
 800462e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d102      	bne.n	8004654 <HAL_RCC_ClockConfig+0x1a0>
 800464e:	4b31      	ldr	r3, [pc, #196]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	e00d      	b.n	8004670 <HAL_RCC_ClockConfig+0x1bc>
 8004654:	2302      	movs	r3, #2
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	2302      	movs	r3, #2
 8004662:	623b      	str	r3, [r7, #32]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	4b29      	ldr	r3, [pc, #164]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2202      	movs	r2, #2
 8004672:	61ba      	str	r2, [r7, #24]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	fa92 f2a2 	rbit	r2, r2
 800467a:	617a      	str	r2, [r7, #20]
  return result;
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	fab2 f282 	clz	r2, r2
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	f042 0220 	orr.w	r2, r2, #32
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	f002 021f 	and.w	r2, r2, #31
 800468e:	2101      	movs	r1, #1
 8004690:	fa01 f202 	lsl.w	r2, r1, r2
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e079      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	491a      	ldr	r1, [pc, #104]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fd fcea 	bl	8002088 <HAL_GetTick>
 80046b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd fce6 	bl	8002088 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e061      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <HAL_RCC_ClockConfig+0x260>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d214      	bcs.n	8004718 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 0207 	bic.w	r2, r3, #7
 80046f6:	4906      	ldr	r1, [pc, #24]	; (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <HAL_RCC_ClockConfig+0x25c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e040      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
 8004710:	40022000 	.word	0x40022000
 8004714:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_RCC_ClockConfig+0x2e8>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	491a      	ldr	r1, [pc, #104]	; (800479c <HAL_RCC_ClockConfig+0x2e8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004742:	4b16      	ldr	r3, [pc, #88]	; (800479c <HAL_RCC_ClockConfig+0x2e8>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4912      	ldr	r1, [pc, #72]	; (800479c <HAL_RCC_ClockConfig+0x2e8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004756:	f000 f829 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800475a:	4601      	mov	r1, r0
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <HAL_RCC_ClockConfig+0x2e8>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004764:	22f0      	movs	r2, #240	; 0xf0
 8004766:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	fa92 f2a2 	rbit	r2, r2
 800476e:	60fa      	str	r2, [r7, #12]
  return result;
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	fab2 f282 	clz	r2, r2
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	40d3      	lsrs	r3, r2
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <HAL_RCC_ClockConfig+0x2ec>)
 800477c:	5cd3      	ldrb	r3, [r2, r3]
 800477e:	fa21 f303 	lsr.w	r3, r1, r3
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <HAL_RCC_ClockConfig+0x2f0>)
 8004784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <HAL_RCC_ClockConfig+0x2f4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd fc38 	bl	8002000 <HAL_InitTick>
  
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3778      	adds	r7, #120	; 0x78
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	08007790 	.word	0x08007790
 80047a4:	20000028 	.word	0x20000028
 80047a8:	2000002c 	.word	0x2000002c

080047ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b08b      	sub	sp, #44	; 0x2c
 80047b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	2300      	movs	r3, #0
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80047c6:	4b29      	ldr	r3, [pc, #164]	; (800486c <HAL_RCC_GetSysClockFreq+0xc0>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d002      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x30>
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x36>
 80047da:	e03c      	b.n	8004856 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047dc:	4b24      	ldr	r3, [pc, #144]	; (8004870 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047de:	623b      	str	r3, [r7, #32]
      break;
 80047e0:	e03c      	b.n	800485c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	fa92 f2a2 	rbit	r2, r2
 80047f4:	607a      	str	r2, [r7, #4]
  return result;
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	fab2 f282 	clz	r2, r2
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	40d3      	lsrs	r3, r2
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004806:	4b19      	ldr	r3, [pc, #100]	; (800486c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	220f      	movs	r2, #15
 8004810:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	fa92 f2a2 	rbit	r2, r2
 8004818:	60fa      	str	r2, [r7, #12]
  return result;
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	fab2 f282 	clz	r2, r2
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	40d3      	lsrs	r3, r2
 8004824:	4a14      	ldr	r2, [pc, #80]	; (8004878 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004826:	5cd3      	ldrb	r3, [r2, r3]
 8004828:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004834:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	fbb2 f2f3 	udiv	r2, r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
 8004844:	e004      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	4a0c      	ldr	r2, [pc, #48]	; (800487c <HAL_RCC_GetSysClockFreq+0xd0>)
 800484a:	fb02 f303 	mul.w	r3, r2, r3
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	623b      	str	r3, [r7, #32]
      break;
 8004854:	e002      	b.n	800485c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004858:	623b      	str	r3, [r7, #32]
      break;
 800485a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800485c:	6a3b      	ldr	r3, [r7, #32]
}
 800485e:	4618      	mov	r0, r3
 8004860:	372c      	adds	r7, #44	; 0x2c
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	007a1200 	.word	0x007a1200
 8004874:	080077a0 	.word	0x080077a0
 8004878:	080077b0 	.word	0x080077b0
 800487c:	003d0900 	.word	0x003d0900

08004880 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b092      	sub	sp, #72	; 0x48
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004890:	2300      	movs	r3, #0
 8004892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80cd 	beq.w	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a4:	4b86      	ldr	r3, [pc, #536]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10e      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b0:	4b83      	ldr	r3, [pc, #524]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4a82      	ldr	r2, [pc, #520]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ba:	61d3      	str	r3, [r2, #28]
 80048bc:	4b80      	ldr	r3, [pc, #512]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ce:	4b7d      	ldr	r3, [pc, #500]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d118      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048da:	4b7a      	ldr	r3, [pc, #488]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a79      	ldr	r2, [pc, #484]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80048e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e6:	f7fd fbcf 	bl	8002088 <HAL_GetTick>
 80048ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	e008      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ee:	f7fd fbcb 	bl	8002088 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b64      	cmp	r3, #100	; 0x64
 80048fa:	d901      	bls.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e0db      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004900:	4b70      	ldr	r3, [pc, #448]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800490c:	4b6c      	ldr	r3, [pc, #432]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d07d      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004926:	429a      	cmp	r2, r3
 8004928:	d076      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800492a:	4b65      	ldr	r3, [pc, #404]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004938:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004944:	fab3 f383 	clz	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	4b5e      	ldr	r3, [pc, #376]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	461a      	mov	r2, r3
 8004954:	2301      	movs	r3, #1
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800495c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	fa93 f3a3 	rbit	r3, r3
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	4b55      	ldr	r3, [pc, #340]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004972:	4413      	add	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	461a      	mov	r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800497c:	4a50      	ldr	r2, [pc, #320]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800497e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004980:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d045      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fd fb7c 	bl	8002088 <HAL_GetTick>
 8004990:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004992:	e00a      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004994:	f7fd fb78 	bl	8002088 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e086      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80049aa:	2302      	movs	r3, #2
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
 80049b6:	2302      	movs	r3, #2
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	61fb      	str	r3, [r7, #28]
  return result;
 80049c2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c4:	fab3 f383 	clz	r3, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f043 0302 	orr.w	r3, r3, #2
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d102      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80049d8:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	e007      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80049de:	2302      	movs	r3, #2
 80049e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2202      	movs	r2, #2
 80049f0:	613a      	str	r2, [r7, #16]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	fa92 f2a2 	rbit	r2, r2
 80049f8:	60fa      	str	r2, [r7, #12]
  return result;
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	fab2 f282 	clz	r2, r2
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	f002 021f 	and.w	r2, r2, #31
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0bd      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a18:	4b29      	ldr	r3, [pc, #164]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4926      	ldr	r1, [pc, #152]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d105      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a32:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	491a      	ldr	r1, [pc, #104]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	f023 0210 	bic.w	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4912      	ldr	r1, [pc, #72]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	490b      	ldr	r1, [pc, #44]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	4903      	ldr	r1, [pc, #12]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3748      	adds	r7, #72	; 0x48
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	10908100 	.word	0x10908100

08004acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e095      	b.n	8004c0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d108      	bne.n	8004af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aee:	d009      	beq.n	8004b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	61da      	str	r2, [r3, #28]
 8004af6:	e005      	b.n	8004b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd f8ae 	bl	8001c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b44:	d902      	bls.n	8004b4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	e002      	b.n	8004b52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b5a:	d007      	beq.n	8004b6c <HAL_SPI_Init+0xa0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b64:	d002      	beq.n	8004b6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	ea42 0103 	orr.w	r1, r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	0c1b      	lsrs	r3, r3, #16
 8004bc8:	f003 0204 	and.w	r2, r3, #4
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004be8:	ea42 0103 	orr.w	r1, r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b088      	sub	sp, #32
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_SPI_Transmit+0x22>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e158      	b.n	8004ee6 <HAL_SPI_Transmit+0x2d4>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c3c:	f7fd fa24 	bl	8002088 <HAL_GetTick>
 8004c40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c52:	2302      	movs	r3, #2
 8004c54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c56:	e13d      	b.n	8004ed4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_SPI_Transmit+0x52>
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d102      	bne.n	8004c6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c68:	e134      	b.n	8004ed4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb4:	d10f      	bne.n	8004cd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d007      	beq.n	8004cf4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cfc:	d94b      	bls.n	8004d96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_Transmit+0xfa>
 8004d06:	8afb      	ldrh	r3, [r7, #22]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d13e      	bne.n	8004d8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	881a      	ldrh	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	1c9a      	adds	r2, r3, #2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d30:	e02b      	b.n	8004d8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d112      	bne.n	8004d66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	881a      	ldrh	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	1c9a      	adds	r2, r3, #2
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d64:	e011      	b.n	8004d8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d66:	f7fd f98f 	bl	8002088 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d803      	bhi.n	8004d7e <HAL_SPI_Transmit+0x16c>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d102      	bne.n	8004d84 <HAL_SPI_Transmit+0x172>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d88:	e0a4      	b.n	8004ed4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1ce      	bne.n	8004d32 <HAL_SPI_Transmit+0x120>
 8004d94:	e07c      	b.n	8004e90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_SPI_Transmit+0x192>
 8004d9e:	8afb      	ldrh	r3, [r7, #22]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d170      	bne.n	8004e86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d912      	bls.n	8004dd4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b02      	subs	r3, #2
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dd2:	e058      	b.n	8004e86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	7812      	ldrb	r2, [r2, #0]
 8004de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004dfa:	e044      	b.n	8004e86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d12b      	bne.n	8004e62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d912      	bls.n	8004e3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b02      	subs	r3, #2
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e38:	e025      	b.n	8004e86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	330c      	adds	r3, #12
 8004e44:	7812      	ldrb	r2, [r2, #0]
 8004e46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e60:	e011      	b.n	8004e86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e62:	f7fd f911 	bl	8002088 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d803      	bhi.n	8004e7a <HAL_SPI_Transmit+0x268>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d102      	bne.n	8004e80 <HAL_SPI_Transmit+0x26e>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e84:	e026      	b.n	8004ed4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1b5      	bne.n	8004dfc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f949 	bl	800512c <SPI_EndRxTxTransaction>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e000      	b.n	8004ed4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004ed2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f00:	f7fd f8c2 	bl	8002088 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f10:	f7fd f8ba 	bl	8002088 <HAL_GetTick>
 8004f14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f16:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	015b      	lsls	r3, r3, #5
 8004f1c:	0d1b      	lsrs	r3, r3, #20
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f26:	e054      	b.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d050      	beq.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f30:	f7fd f8aa 	bl	8002088 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d902      	bls.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d13d      	bne.n	8004fc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5e:	d111      	bne.n	8004f84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f68:	d004      	beq.n	8004f74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f72:	d107      	bne.n	8004f84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8c:	d10f      	bne.n	8004fae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e017      	b.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	bf0c      	ite	eq
 8004fe2:	2301      	moveq	r3, #1
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d19b      	bne.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000028 	.word	0x20000028

08005000 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005012:	f7fd f839 	bl	8002088 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	4413      	add	r3, r2
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005022:	f7fd f831 	bl	8002088 <HAL_GetTick>
 8005026:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005030:	4b3d      	ldr	r3, [pc, #244]	; (8005128 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	00da      	lsls	r2, r3, #3
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	0d1b      	lsrs	r3, r3, #20
 8005040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005048:	e060      	b.n	800510c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005050:	d107      	bne.n	8005062 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005060:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d050      	beq.n	800510c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800506a:	f7fd f80d 	bl	8002088 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	429a      	cmp	r2, r3
 8005078:	d902      	bls.n	8005080 <SPI_WaitFifoStateUntilTimeout+0x80>
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d13d      	bne.n	80050fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800508e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005098:	d111      	bne.n	80050be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a2:	d004      	beq.n	80050ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d107      	bne.n	80050be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c6:	d10f      	bne.n	80050e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e010      	b.n	800511e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	3b01      	subs	r3, #1
 800510a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4013      	ands	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	429a      	cmp	r2, r3
 800511a:	d196      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3728      	adds	r7, #40	; 0x28
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000028 	.word	0x20000028

0800512c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2200      	movs	r2, #0
 8005140:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff ff5b 	bl	8005000 <SPI_WaitFifoStateUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005154:	f043 0220 	orr.w	r2, r3, #32
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e027      	b.n	80051b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	2180      	movs	r1, #128	; 0x80
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fec0 	bl	8004ef0 <SPI_WaitFlagStateUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e014      	b.n	80051b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2200      	movs	r2, #0
 800518e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff ff34 	bl	8005000 <SPI_WaitFifoStateUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e000      	b.n	80051b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e049      	b.n	800525e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc fdae 	bl	8001d40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 f94a 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005282:	2302      	movs	r3, #2
 8005284:	e0ff      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b14      	cmp	r3, #20
 8005292:	f200 80f0 	bhi.w	8005476 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052f1 	.word	0x080052f1
 80052a0:	08005477 	.word	0x08005477
 80052a4:	08005477 	.word	0x08005477
 80052a8:	08005477 	.word	0x08005477
 80052ac:	08005331 	.word	0x08005331
 80052b0:	08005477 	.word	0x08005477
 80052b4:	08005477 	.word	0x08005477
 80052b8:	08005477 	.word	0x08005477
 80052bc:	08005373 	.word	0x08005373
 80052c0:	08005477 	.word	0x08005477
 80052c4:	08005477 	.word	0x08005477
 80052c8:	08005477 	.word	0x08005477
 80052cc:	080053b3 	.word	0x080053b3
 80052d0:	08005477 	.word	0x08005477
 80052d4:	08005477 	.word	0x08005477
 80052d8:	08005477 	.word	0x08005477
 80052dc:	080053f5 	.word	0x080053f5
 80052e0:	08005477 	.word	0x08005477
 80052e4:	08005477 	.word	0x08005477
 80052e8:	08005477 	.word	0x08005477
 80052ec:	08005435 	.word	0x08005435
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f942 	bl	8005580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0208 	orr.w	r2, r2, #8
 800530a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0204 	bic.w	r2, r2, #4
 800531a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6999      	ldr	r1, [r3, #24]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	619a      	str	r2, [r3, #24]
      break;
 800532e:	e0a5      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f9a8 	bl	800568c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800534a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6999      	ldr	r1, [r3, #24]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	021a      	lsls	r2, r3, #8
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	619a      	str	r2, [r3, #24]
      break;
 8005370:	e084      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fa07 	bl	800578c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0208 	orr.w	r2, r2, #8
 800538c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0204 	bic.w	r2, r2, #4
 800539c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69d9      	ldr	r1, [r3, #28]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	61da      	str	r2, [r3, #28]
      break;
 80053b0:	e064      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fa65 	bl	8005888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69d9      	ldr	r1, [r3, #28]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	021a      	lsls	r2, r3, #8
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	61da      	str	r2, [r3, #28]
      break;
 80053f2:	e043      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 faa8 	bl	8005950 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0208 	orr.w	r2, r2, #8
 800540e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0204 	bic.w	r2, r2, #4
 800541e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005432:	e023      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fae6 	bl	8005a0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	021a      	lsls	r2, r3, #8
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005474:	e002      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	75fb      	strb	r3, [r7, #23]
      break;
 800547a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop

08005490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a32      	ldr	r2, [pc, #200]	; (800556c <TIM_Base_SetConfig+0xdc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_Base_SetConfig+0x28>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0x28>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a2f      	ldr	r2, [pc, #188]	; (8005570 <TIM_Base_SetConfig+0xe0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a27      	ldr	r2, [pc, #156]	; (800556c <TIM_Base_SetConfig+0xdc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <TIM_Base_SetConfig+0x6a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d00f      	beq.n	80054fa <TIM_Base_SetConfig+0x6a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a24      	ldr	r2, [pc, #144]	; (8005570 <TIM_Base_SetConfig+0xe0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00b      	beq.n	80054fa <TIM_Base_SetConfig+0x6a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a23      	ldr	r2, [pc, #140]	; (8005574 <TIM_Base_SetConfig+0xe4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d007      	beq.n	80054fa <TIM_Base_SetConfig+0x6a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <TIM_Base_SetConfig+0xe8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <TIM_Base_SetConfig+0x6a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a21      	ldr	r2, [pc, #132]	; (800557c <TIM_Base_SetConfig+0xec>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d108      	bne.n	800550c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a0e      	ldr	r2, [pc, #56]	; (800556c <TIM_Base_SetConfig+0xdc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_Base_SetConfig+0xc0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a0e      	ldr	r2, [pc, #56]	; (8005574 <TIM_Base_SetConfig+0xe4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0xc0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a0d      	ldr	r2, [pc, #52]	; (8005578 <TIM_Base_SetConfig+0xe8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0xc0>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a0c      	ldr	r2, [pc, #48]	; (800557c <TIM_Base_SetConfig+0xec>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d103      	bne.n	8005558 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	615a      	str	r2, [r3, #20]
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40000400 	.word	0x40000400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 0302 	bic.w	r3, r3, #2
 80055cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a28      	ldr	r2, [pc, #160]	; (800567c <TIM_OC1_SetConfig+0xfc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_OC1_SetConfig+0x78>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a27      	ldr	r2, [pc, #156]	; (8005680 <TIM_OC1_SetConfig+0x100>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_OC1_SetConfig+0x78>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a26      	ldr	r2, [pc, #152]	; (8005684 <TIM_OC1_SetConfig+0x104>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_OC1_SetConfig+0x78>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a25      	ldr	r2, [pc, #148]	; (8005688 <TIM_OC1_SetConfig+0x108>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d10c      	bne.n	8005612 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f023 0308 	bic.w	r3, r3, #8
 80055fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f023 0304 	bic.w	r3, r3, #4
 8005610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a19      	ldr	r2, [pc, #100]	; (800567c <TIM_OC1_SetConfig+0xfc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00b      	beq.n	8005632 <TIM_OC1_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a18      	ldr	r2, [pc, #96]	; (8005680 <TIM_OC1_SetConfig+0x100>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d007      	beq.n	8005632 <TIM_OC1_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a17      	ldr	r2, [pc, #92]	; (8005684 <TIM_OC1_SetConfig+0x104>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_OC1_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a16      	ldr	r2, [pc, #88]	; (8005688 <TIM_OC1_SetConfig+0x108>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d111      	bne.n	8005656 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	621a      	str	r2, [r3, #32]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40014000 	.word	0x40014000
 8005684:	40014400 	.word	0x40014400
 8005688:	40014800 	.word	0x40014800

0800568c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0210 	bic.w	r2, r3, #16
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0320 	bic.w	r3, r3, #32
 80056da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a24      	ldr	r2, [pc, #144]	; (800577c <TIM_OC2_SetConfig+0xf0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d10d      	bne.n	800570c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a1b      	ldr	r2, [pc, #108]	; (800577c <TIM_OC2_SetConfig+0xf0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00b      	beq.n	800572c <TIM_OC2_SetConfig+0xa0>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <TIM_OC2_SetConfig+0xf4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_OC2_SetConfig+0xa0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a19      	ldr	r2, [pc, #100]	; (8005784 <TIM_OC2_SetConfig+0xf8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_OC2_SetConfig+0xa0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a18      	ldr	r2, [pc, #96]	; (8005788 <TIM_OC2_SetConfig+0xfc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d113      	bne.n	8005754 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005732:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800573a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40014000 	.word	0x40014000
 8005784:	40014400 	.word	0x40014400
 8005788:	40014800 	.word	0x40014800

0800578c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0303 	bic.w	r3, r3, #3
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a23      	ldr	r2, [pc, #140]	; (8005878 <TIM_OC3_SetConfig+0xec>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d10d      	bne.n	800580a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005808:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1a      	ldr	r2, [pc, #104]	; (8005878 <TIM_OC3_SetConfig+0xec>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_OC3_SetConfig+0x9e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a19      	ldr	r2, [pc, #100]	; (800587c <TIM_OC3_SetConfig+0xf0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_OC3_SetConfig+0x9e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a18      	ldr	r2, [pc, #96]	; (8005880 <TIM_OC3_SetConfig+0xf4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_OC3_SetConfig+0x9e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a17      	ldr	r2, [pc, #92]	; (8005884 <TIM_OC3_SetConfig+0xf8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d113      	bne.n	8005852 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	621a      	str	r2, [r3, #32]
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	031b      	lsls	r3, r3, #12
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a16      	ldr	r2, [pc, #88]	; (8005940 <TIM_OC4_SetConfig+0xb8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00b      	beq.n	8005904 <TIM_OC4_SetConfig+0x7c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a15      	ldr	r2, [pc, #84]	; (8005944 <TIM_OC4_SetConfig+0xbc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d007      	beq.n	8005904 <TIM_OC4_SetConfig+0x7c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <TIM_OC4_SetConfig+0xc0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC4_SetConfig+0x7c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a13      	ldr	r2, [pc, #76]	; (800594c <TIM_OC4_SetConfig+0xc4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d109      	bne.n	8005918 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800590a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	019b      	lsls	r3, r3, #6
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800

08005950 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005994:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	041b      	lsls	r3, r3, #16
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a15      	ldr	r2, [pc, #84]	; (80059fc <TIM_OC5_SetConfig+0xac>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_OC5_SetConfig+0x72>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <TIM_OC5_SetConfig+0xb0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_OC5_SetConfig+0x72>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <TIM_OC5_SetConfig+0xb4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_OC5_SetConfig+0x72>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a12      	ldr	r2, [pc, #72]	; (8005a08 <TIM_OC5_SetConfig+0xb8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d109      	bne.n	80059d6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	621a      	str	r2, [r3, #32]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800

08005a0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	051b      	lsls	r3, r3, #20
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a16      	ldr	r2, [pc, #88]	; (8005abc <TIM_OC6_SetConfig+0xb0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <TIM_OC6_SetConfig+0x74>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a15      	ldr	r2, [pc, #84]	; (8005ac0 <TIM_OC6_SetConfig+0xb4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <TIM_OC6_SetConfig+0x74>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a14      	ldr	r2, [pc, #80]	; (8005ac4 <TIM_OC6_SetConfig+0xb8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC6_SetConfig+0x74>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <TIM_OC6_SetConfig+0xbc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d109      	bne.n	8005a94 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40014000 	.word	0x40014000
 8005ac4:	40014400 	.word	0x40014400
 8005ac8:	40014800 	.word	0x40014800

08005acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e054      	b.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a24      	ldr	r2, [pc, #144]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d108      	bne.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a17      	ldr	r2, [pc, #92]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d009      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a11      	ldr	r2, [pc, #68]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d10c      	bne.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40014000 	.word	0x40014000

08005ba8 <__errno>:
 8005ba8:	4b01      	ldr	r3, [pc, #4]	; (8005bb0 <__errno+0x8>)
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000034 	.word	0x20000034

08005bb4 <__libc_init_array>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4d0d      	ldr	r5, [pc, #52]	; (8005bec <__libc_init_array+0x38>)
 8005bb8:	4c0d      	ldr	r4, [pc, #52]	; (8005bf0 <__libc_init_array+0x3c>)
 8005bba:	1b64      	subs	r4, r4, r5
 8005bbc:	10a4      	asrs	r4, r4, #2
 8005bbe:	2600      	movs	r6, #0
 8005bc0:	42a6      	cmp	r6, r4
 8005bc2:	d109      	bne.n	8005bd8 <__libc_init_array+0x24>
 8005bc4:	4d0b      	ldr	r5, [pc, #44]	; (8005bf4 <__libc_init_array+0x40>)
 8005bc6:	4c0c      	ldr	r4, [pc, #48]	; (8005bf8 <__libc_init_array+0x44>)
 8005bc8:	f001 fa96 	bl	80070f8 <_init>
 8005bcc:	1b64      	subs	r4, r4, r5
 8005bce:	10a4      	asrs	r4, r4, #2
 8005bd0:	2600      	movs	r6, #0
 8005bd2:	42a6      	cmp	r6, r4
 8005bd4:	d105      	bne.n	8005be2 <__libc_init_array+0x2e>
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bdc:	4798      	blx	r3
 8005bde:	3601      	adds	r6, #1
 8005be0:	e7ee      	b.n	8005bc0 <__libc_init_array+0xc>
 8005be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be6:	4798      	blx	r3
 8005be8:	3601      	adds	r6, #1
 8005bea:	e7f2      	b.n	8005bd2 <__libc_init_array+0x1e>
 8005bec:	08007908 	.word	0x08007908
 8005bf0:	08007908 	.word	0x08007908
 8005bf4:	08007908 	.word	0x08007908
 8005bf8:	0800790c 	.word	0x0800790c

08005bfc <memcpy>:
 8005bfc:	440a      	add	r2, r1
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c04:	d100      	bne.n	8005c08 <memcpy+0xc>
 8005c06:	4770      	bx	lr
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c12:	4291      	cmp	r1, r2
 8005c14:	d1f9      	bne.n	8005c0a <memcpy+0xe>
 8005c16:	bd10      	pop	{r4, pc}

08005c18 <memset>:
 8005c18:	4402      	add	r2, r0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d100      	bne.n	8005c22 <memset+0xa>
 8005c20:	4770      	bx	lr
 8005c22:	f803 1b01 	strb.w	r1, [r3], #1
 8005c26:	e7f9      	b.n	8005c1c <memset+0x4>

08005c28 <srand>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <srand+0x44>)
 8005c2c:	681d      	ldr	r5, [r3, #0]
 8005c2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c30:	4604      	mov	r4, r0
 8005c32:	b9b3      	cbnz	r3, 8005c62 <srand+0x3a>
 8005c34:	2018      	movs	r0, #24
 8005c36:	f000 f8df 	bl	8005df8 <malloc>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	63a8      	str	r0, [r5, #56]	; 0x38
 8005c3e:	b920      	cbnz	r0, 8005c4a <srand+0x22>
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <srand+0x48>)
 8005c42:	480c      	ldr	r0, [pc, #48]	; (8005c74 <srand+0x4c>)
 8005c44:	2142      	movs	r1, #66	; 0x42
 8005c46:	f000 f895 	bl	8005d74 <__assert_func>
 8005c4a:	490b      	ldr	r1, [pc, #44]	; (8005c78 <srand+0x50>)
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <srand+0x54>)
 8005c4e:	e9c0 1300 	strd	r1, r3, [r0]
 8005c52:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <srand+0x58>)
 8005c54:	6083      	str	r3, [r0, #8]
 8005c56:	230b      	movs	r3, #11
 8005c58:	8183      	strh	r3, [r0, #12]
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005c62:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c64:	2200      	movs	r2, #0
 8005c66:	611c      	str	r4, [r3, #16]
 8005c68:	615a      	str	r2, [r3, #20]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	20000034 	.word	0x20000034
 8005c70:	080077c4 	.word	0x080077c4
 8005c74:	080077db 	.word	0x080077db
 8005c78:	abcd330e 	.word	0xabcd330e
 8005c7c:	e66d1234 	.word	0xe66d1234
 8005c80:	0005deec 	.word	0x0005deec

08005c84 <rand>:
 8005c84:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <rand+0x5c>)
 8005c86:	b510      	push	{r4, lr}
 8005c88:	681c      	ldr	r4, [r3, #0]
 8005c8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c8c:	b9b3      	cbnz	r3, 8005cbc <rand+0x38>
 8005c8e:	2018      	movs	r0, #24
 8005c90:	f000 f8b2 	bl	8005df8 <malloc>
 8005c94:	63a0      	str	r0, [r4, #56]	; 0x38
 8005c96:	b928      	cbnz	r0, 8005ca4 <rand+0x20>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <rand+0x60>)
 8005c9c:	4812      	ldr	r0, [pc, #72]	; (8005ce8 <rand+0x64>)
 8005c9e:	214e      	movs	r1, #78	; 0x4e
 8005ca0:	f000 f868 	bl	8005d74 <__assert_func>
 8005ca4:	4a11      	ldr	r2, [pc, #68]	; (8005cec <rand+0x68>)
 8005ca6:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <rand+0x6c>)
 8005ca8:	e9c0 2300 	strd	r2, r3, [r0]
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <rand+0x70>)
 8005cae:	6083      	str	r3, [r0, #8]
 8005cb0:	230b      	movs	r3, #11
 8005cb2:	8183      	strh	r3, [r0, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005cbc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005cbe:	4a0e      	ldr	r2, [pc, #56]	; (8005cf8 <rand+0x74>)
 8005cc0:	6920      	ldr	r0, [r4, #16]
 8005cc2:	6963      	ldr	r3, [r4, #20]
 8005cc4:	490d      	ldr	r1, [pc, #52]	; (8005cfc <rand+0x78>)
 8005cc6:	4342      	muls	r2, r0
 8005cc8:	fb01 2203 	mla	r2, r1, r3, r2
 8005ccc:	fba0 0101 	umull	r0, r1, r0, r1
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	eb42 0001 	adc.w	r0, r2, r1
 8005cd6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005cda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cde:	bd10      	pop	{r4, pc}
 8005ce0:	20000034 	.word	0x20000034
 8005ce4:	080077c4 	.word	0x080077c4
 8005ce8:	080077db 	.word	0x080077db
 8005cec:	abcd330e 	.word	0xabcd330e
 8005cf0:	e66d1234 	.word	0xe66d1234
 8005cf4:	0005deec 	.word	0x0005deec
 8005cf8:	5851f42d 	.word	0x5851f42d
 8005cfc:	4c957f2d 	.word	0x4c957f2d

08005d00 <siprintf>:
 8005d00:	b40e      	push	{r1, r2, r3}
 8005d02:	b500      	push	{lr}
 8005d04:	b09c      	sub	sp, #112	; 0x70
 8005d06:	ab1d      	add	r3, sp, #116	; 0x74
 8005d08:	9002      	str	r0, [sp, #8]
 8005d0a:	9006      	str	r0, [sp, #24]
 8005d0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d10:	4809      	ldr	r0, [pc, #36]	; (8005d38 <siprintf+0x38>)
 8005d12:	9107      	str	r1, [sp, #28]
 8005d14:	9104      	str	r1, [sp, #16]
 8005d16:	4909      	ldr	r1, [pc, #36]	; (8005d3c <siprintf+0x3c>)
 8005d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1c:	9105      	str	r1, [sp, #20]
 8005d1e:	6800      	ldr	r0, [r0, #0]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	a902      	add	r1, sp, #8
 8005d24:	f000 f9ac 	bl	8006080 <_svfiprintf_r>
 8005d28:	9b02      	ldr	r3, [sp, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	b01c      	add	sp, #112	; 0x70
 8005d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d34:	b003      	add	sp, #12
 8005d36:	4770      	bx	lr
 8005d38:	20000034 	.word	0x20000034
 8005d3c:	ffff0208 	.word	0xffff0208

08005d40 <time>:
 8005d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d42:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <time+0x30>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	4669      	mov	r1, sp
 8005d48:	4604      	mov	r4, r0
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	f000 f842 	bl	8005dd4 <_gettimeofday_r>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	bfbe      	ittt	lt
 8005d54:	f04f 32ff 	movlt.w	r2, #4294967295
 8005d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d5c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d64:	b10c      	cbz	r4, 8005d6a <time+0x2a>
 8005d66:	e9c4 0100 	strd	r0, r1, [r4]
 8005d6a:	b004      	add	sp, #16
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000034 	.word	0x20000034

08005d74 <__assert_func>:
 8005d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d76:	4614      	mov	r4, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <__assert_func+0x2c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4605      	mov	r5, r0
 8005d80:	68d8      	ldr	r0, [r3, #12]
 8005d82:	b14c      	cbz	r4, 8005d98 <__assert_func+0x24>
 8005d84:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <__assert_func+0x30>)
 8005d86:	9100      	str	r1, [sp, #0]
 8005d88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d8c:	4906      	ldr	r1, [pc, #24]	; (8005da8 <__assert_func+0x34>)
 8005d8e:	462b      	mov	r3, r5
 8005d90:	f000 f80e 	bl	8005db0 <fiprintf>
 8005d94:	f000 fe32 	bl	80069fc <abort>
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <__assert_func+0x38>)
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	e7f3      	b.n	8005d86 <__assert_func+0x12>
 8005d9e:	bf00      	nop
 8005da0:	20000034 	.word	0x20000034
 8005da4:	08007836 	.word	0x08007836
 8005da8:	08007843 	.word	0x08007843
 8005dac:	08007871 	.word	0x08007871

08005db0 <fiprintf>:
 8005db0:	b40e      	push	{r1, r2, r3}
 8005db2:	b503      	push	{r0, r1, lr}
 8005db4:	4601      	mov	r1, r0
 8005db6:	ab03      	add	r3, sp, #12
 8005db8:	4805      	ldr	r0, [pc, #20]	; (8005dd0 <fiprintf+0x20>)
 8005dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dbe:	6800      	ldr	r0, [r0, #0]
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	f000 fa87 	bl	80062d4 <_vfiprintf_r>
 8005dc6:	b002      	add	sp, #8
 8005dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dcc:	b003      	add	sp, #12
 8005dce:	4770      	bx	lr
 8005dd0:	20000034 	.word	0x20000034

08005dd4 <_gettimeofday_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	; (8005df4 <_gettimeofday_r+0x20>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	f001 f981 	bl	80070e8 <_gettimeofday>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	d102      	bne.n	8005df0 <_gettimeofday_r+0x1c>
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	b103      	cbz	r3, 8005df0 <_gettimeofday_r+0x1c>
 8005dee:	6023      	str	r3, [r4, #0]
 8005df0:	bd38      	pop	{r3, r4, r5, pc}
 8005df2:	bf00      	nop
 8005df4:	20000840 	.word	0x20000840

08005df8 <malloc>:
 8005df8:	4b02      	ldr	r3, [pc, #8]	; (8005e04 <malloc+0xc>)
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	f000 b86f 	b.w	8005ee0 <_malloc_r>
 8005e02:	bf00      	nop
 8005e04:	20000034 	.word	0x20000034

08005e08 <_free_r>:
 8005e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	d044      	beq.n	8005e98 <_free_r+0x90>
 8005e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e12:	9001      	str	r0, [sp, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f1a1 0404 	sub.w	r4, r1, #4
 8005e1a:	bfb8      	it	lt
 8005e1c:	18e4      	addlt	r4, r4, r3
 8005e1e:	f001 f82f 	bl	8006e80 <__malloc_lock>
 8005e22:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <_free_r+0x94>)
 8005e24:	9801      	ldr	r0, [sp, #4]
 8005e26:	6813      	ldr	r3, [r2, #0]
 8005e28:	b933      	cbnz	r3, 8005e38 <_free_r+0x30>
 8005e2a:	6063      	str	r3, [r4, #4]
 8005e2c:	6014      	str	r4, [r2, #0]
 8005e2e:	b003      	add	sp, #12
 8005e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e34:	f001 b82a 	b.w	8006e8c <__malloc_unlock>
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d908      	bls.n	8005e4e <_free_r+0x46>
 8005e3c:	6825      	ldr	r5, [r4, #0]
 8005e3e:	1961      	adds	r1, r4, r5
 8005e40:	428b      	cmp	r3, r1
 8005e42:	bf01      	itttt	eq
 8005e44:	6819      	ldreq	r1, [r3, #0]
 8005e46:	685b      	ldreq	r3, [r3, #4]
 8005e48:	1949      	addeq	r1, r1, r5
 8005e4a:	6021      	streq	r1, [r4, #0]
 8005e4c:	e7ed      	b.n	8005e2a <_free_r+0x22>
 8005e4e:	461a      	mov	r2, r3
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	b10b      	cbz	r3, 8005e58 <_free_r+0x50>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d9fa      	bls.n	8005e4e <_free_r+0x46>
 8005e58:	6811      	ldr	r1, [r2, #0]
 8005e5a:	1855      	adds	r5, r2, r1
 8005e5c:	42a5      	cmp	r5, r4
 8005e5e:	d10b      	bne.n	8005e78 <_free_r+0x70>
 8005e60:	6824      	ldr	r4, [r4, #0]
 8005e62:	4421      	add	r1, r4
 8005e64:	1854      	adds	r4, r2, r1
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	6011      	str	r1, [r2, #0]
 8005e6a:	d1e0      	bne.n	8005e2e <_free_r+0x26>
 8005e6c:	681c      	ldr	r4, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	6053      	str	r3, [r2, #4]
 8005e72:	4421      	add	r1, r4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	e7da      	b.n	8005e2e <_free_r+0x26>
 8005e78:	d902      	bls.n	8005e80 <_free_r+0x78>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6003      	str	r3, [r0, #0]
 8005e7e:	e7d6      	b.n	8005e2e <_free_r+0x26>
 8005e80:	6825      	ldr	r5, [r4, #0]
 8005e82:	1961      	adds	r1, r4, r5
 8005e84:	428b      	cmp	r3, r1
 8005e86:	bf04      	itt	eq
 8005e88:	6819      	ldreq	r1, [r3, #0]
 8005e8a:	685b      	ldreq	r3, [r3, #4]
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	bf04      	itt	eq
 8005e90:	1949      	addeq	r1, r1, r5
 8005e92:	6021      	streq	r1, [r4, #0]
 8005e94:	6054      	str	r4, [r2, #4]
 8005e96:	e7ca      	b.n	8005e2e <_free_r+0x26>
 8005e98:	b003      	add	sp, #12
 8005e9a:	bd30      	pop	{r4, r5, pc}
 8005e9c:	20000838 	.word	0x20000838

08005ea0 <sbrk_aligned>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4e0e      	ldr	r6, [pc, #56]	; (8005edc <sbrk_aligned+0x3c>)
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	b911      	cbnz	r1, 8005eb2 <sbrk_aligned+0x12>
 8005eac:	f000 fcd6 	bl	800685c <_sbrk_r>
 8005eb0:	6030      	str	r0, [r6, #0]
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fcd1 	bl	800685c <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d00a      	beq.n	8005ed4 <sbrk_aligned+0x34>
 8005ebe:	1cc4      	adds	r4, r0, #3
 8005ec0:	f024 0403 	bic.w	r4, r4, #3
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d007      	beq.n	8005ed8 <sbrk_aligned+0x38>
 8005ec8:	1a21      	subs	r1, r4, r0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fcc6 	bl	800685c <_sbrk_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d101      	bne.n	8005ed8 <sbrk_aligned+0x38>
 8005ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ed8:	4620      	mov	r0, r4
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	2000083c 	.word	0x2000083c

08005ee0 <_malloc_r>:
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	1ccd      	adds	r5, r1, #3
 8005ee6:	f025 0503 	bic.w	r5, r5, #3
 8005eea:	3508      	adds	r5, #8
 8005eec:	2d0c      	cmp	r5, #12
 8005eee:	bf38      	it	cc
 8005ef0:	250c      	movcc	r5, #12
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	db01      	blt.n	8005efc <_malloc_r+0x1c>
 8005ef8:	42a9      	cmp	r1, r5
 8005efa:	d905      	bls.n	8005f08 <_malloc_r+0x28>
 8005efc:	230c      	movs	r3, #12
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	2600      	movs	r6, #0
 8005f02:	4630      	mov	r0, r6
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	4e2e      	ldr	r6, [pc, #184]	; (8005fc4 <_malloc_r+0xe4>)
 8005f0a:	f000 ffb9 	bl	8006e80 <__malloc_lock>
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	461c      	mov	r4, r3
 8005f12:	bb34      	cbnz	r4, 8005f62 <_malloc_r+0x82>
 8005f14:	4629      	mov	r1, r5
 8005f16:	4638      	mov	r0, r7
 8005f18:	f7ff ffc2 	bl	8005ea0 <sbrk_aligned>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	4604      	mov	r4, r0
 8005f20:	d14d      	bne.n	8005fbe <_malloc_r+0xde>
 8005f22:	6834      	ldr	r4, [r6, #0]
 8005f24:	4626      	mov	r6, r4
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	d140      	bne.n	8005fac <_malloc_r+0xcc>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4638      	mov	r0, r7
 8005f30:	eb04 0803 	add.w	r8, r4, r3
 8005f34:	f000 fc92 	bl	800685c <_sbrk_r>
 8005f38:	4580      	cmp	r8, r0
 8005f3a:	d13a      	bne.n	8005fb2 <_malloc_r+0xd2>
 8005f3c:	6821      	ldr	r1, [r4, #0]
 8005f3e:	3503      	adds	r5, #3
 8005f40:	1a6d      	subs	r5, r5, r1
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff ffa5 	bl	8005ea0 <sbrk_aligned>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d02b      	beq.n	8005fb2 <_malloc_r+0xd2>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	442b      	add	r3, r5
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	e00e      	b.n	8005f80 <_malloc_r+0xa0>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	1b52      	subs	r2, r2, r5
 8005f66:	d41e      	bmi.n	8005fa6 <_malloc_r+0xc6>
 8005f68:	2a0b      	cmp	r2, #11
 8005f6a:	d916      	bls.n	8005f9a <_malloc_r+0xba>
 8005f6c:	1961      	adds	r1, r4, r5
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	6025      	str	r5, [r4, #0]
 8005f72:	bf18      	it	ne
 8005f74:	6059      	strne	r1, [r3, #4]
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	bf08      	it	eq
 8005f7a:	6031      	streq	r1, [r6, #0]
 8005f7c:	5162      	str	r2, [r4, r5]
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	4638      	mov	r0, r7
 8005f82:	f104 060b 	add.w	r6, r4, #11
 8005f86:	f000 ff81 	bl	8006e8c <__malloc_unlock>
 8005f8a:	f026 0607 	bic.w	r6, r6, #7
 8005f8e:	1d23      	adds	r3, r4, #4
 8005f90:	1af2      	subs	r2, r6, r3
 8005f92:	d0b6      	beq.n	8005f02 <_malloc_r+0x22>
 8005f94:	1b9b      	subs	r3, r3, r6
 8005f96:	50a3      	str	r3, [r4, r2]
 8005f98:	e7b3      	b.n	8005f02 <_malloc_r+0x22>
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	bf0c      	ite	eq
 8005fa0:	6032      	streq	r2, [r6, #0]
 8005fa2:	605a      	strne	r2, [r3, #4]
 8005fa4:	e7ec      	b.n	8005f80 <_malloc_r+0xa0>
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	6864      	ldr	r4, [r4, #4]
 8005faa:	e7b2      	b.n	8005f12 <_malloc_r+0x32>
 8005fac:	4634      	mov	r4, r6
 8005fae:	6876      	ldr	r6, [r6, #4]
 8005fb0:	e7b9      	b.n	8005f26 <_malloc_r+0x46>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f000 ff68 	bl	8006e8c <__malloc_unlock>
 8005fbc:	e7a1      	b.n	8005f02 <_malloc_r+0x22>
 8005fbe:	6025      	str	r5, [r4, #0]
 8005fc0:	e7de      	b.n	8005f80 <_malloc_r+0xa0>
 8005fc2:	bf00      	nop
 8005fc4:	20000838 	.word	0x20000838

08005fc8 <__ssputs_r>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	688e      	ldr	r6, [r1, #8]
 8005fce:	429e      	cmp	r6, r3
 8005fd0:	4682      	mov	sl, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4690      	mov	r8, r2
 8005fd6:	461f      	mov	r7, r3
 8005fd8:	d838      	bhi.n	800604c <__ssputs_r+0x84>
 8005fda:	898a      	ldrh	r2, [r1, #12]
 8005fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fe0:	d032      	beq.n	8006048 <__ssputs_r+0x80>
 8005fe2:	6825      	ldr	r5, [r4, #0]
 8005fe4:	6909      	ldr	r1, [r1, #16]
 8005fe6:	eba5 0901 	sub.w	r9, r5, r1
 8005fea:	6965      	ldr	r5, [r4, #20]
 8005fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	444b      	add	r3, r9
 8005ff8:	106d      	asrs	r5, r5, #1
 8005ffa:	429d      	cmp	r5, r3
 8005ffc:	bf38      	it	cc
 8005ffe:	461d      	movcc	r5, r3
 8006000:	0553      	lsls	r3, r2, #21
 8006002:	d531      	bpl.n	8006068 <__ssputs_r+0xa0>
 8006004:	4629      	mov	r1, r5
 8006006:	f7ff ff6b 	bl	8005ee0 <_malloc_r>
 800600a:	4606      	mov	r6, r0
 800600c:	b950      	cbnz	r0, 8006024 <__ssputs_r+0x5c>
 800600e:	230c      	movs	r3, #12
 8006010:	f8ca 3000 	str.w	r3, [sl]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	6921      	ldr	r1, [r4, #16]
 8006026:	464a      	mov	r2, r9
 8006028:	f7ff fde8 	bl	8005bfc <memcpy>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	6126      	str	r6, [r4, #16]
 800603a:	6165      	str	r5, [r4, #20]
 800603c:	444e      	add	r6, r9
 800603e:	eba5 0509 	sub.w	r5, r5, r9
 8006042:	6026      	str	r6, [r4, #0]
 8006044:	60a5      	str	r5, [r4, #8]
 8006046:	463e      	mov	r6, r7
 8006048:	42be      	cmp	r6, r7
 800604a:	d900      	bls.n	800604e <__ssputs_r+0x86>
 800604c:	463e      	mov	r6, r7
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	4632      	mov	r2, r6
 8006052:	4641      	mov	r1, r8
 8006054:	f000 fefa 	bl	8006e4c <memmove>
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	1b9b      	subs	r3, r3, r6
 800605c:	60a3      	str	r3, [r4, #8]
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	4433      	add	r3, r6
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	2000      	movs	r0, #0
 8006066:	e7db      	b.n	8006020 <__ssputs_r+0x58>
 8006068:	462a      	mov	r2, r5
 800606a:	f000 ff15 	bl	8006e98 <_realloc_r>
 800606e:	4606      	mov	r6, r0
 8006070:	2800      	cmp	r0, #0
 8006072:	d1e1      	bne.n	8006038 <__ssputs_r+0x70>
 8006074:	6921      	ldr	r1, [r4, #16]
 8006076:	4650      	mov	r0, sl
 8006078:	f7ff fec6 	bl	8005e08 <_free_r>
 800607c:	e7c7      	b.n	800600e <__ssputs_r+0x46>
	...

08006080 <_svfiprintf_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	4698      	mov	r8, r3
 8006086:	898b      	ldrh	r3, [r1, #12]
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	b09d      	sub	sp, #116	; 0x74
 800608c:	4607      	mov	r7, r0
 800608e:	460d      	mov	r5, r1
 8006090:	4614      	mov	r4, r2
 8006092:	d50e      	bpl.n	80060b2 <_svfiprintf_r+0x32>
 8006094:	690b      	ldr	r3, [r1, #16]
 8006096:	b963      	cbnz	r3, 80060b2 <_svfiprintf_r+0x32>
 8006098:	2140      	movs	r1, #64	; 0x40
 800609a:	f7ff ff21 	bl	8005ee0 <_malloc_r>
 800609e:	6028      	str	r0, [r5, #0]
 80060a0:	6128      	str	r0, [r5, #16]
 80060a2:	b920      	cbnz	r0, 80060ae <_svfiprintf_r+0x2e>
 80060a4:	230c      	movs	r3, #12
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	e0d1      	b.n	8006252 <_svfiprintf_r+0x1d2>
 80060ae:	2340      	movs	r3, #64	; 0x40
 80060b0:	616b      	str	r3, [r5, #20]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9309      	str	r3, [sp, #36]	; 0x24
 80060b6:	2320      	movs	r3, #32
 80060b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c0:	2330      	movs	r3, #48	; 0x30
 80060c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800626c <_svfiprintf_r+0x1ec>
 80060c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ca:	f04f 0901 	mov.w	r9, #1
 80060ce:	4623      	mov	r3, r4
 80060d0:	469a      	mov	sl, r3
 80060d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d6:	b10a      	cbz	r2, 80060dc <_svfiprintf_r+0x5c>
 80060d8:	2a25      	cmp	r2, #37	; 0x25
 80060da:	d1f9      	bne.n	80060d0 <_svfiprintf_r+0x50>
 80060dc:	ebba 0b04 	subs.w	fp, sl, r4
 80060e0:	d00b      	beq.n	80060fa <_svfiprintf_r+0x7a>
 80060e2:	465b      	mov	r3, fp
 80060e4:	4622      	mov	r2, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7ff ff6d 	bl	8005fc8 <__ssputs_r>
 80060ee:	3001      	adds	r0, #1
 80060f0:	f000 80aa 	beq.w	8006248 <_svfiprintf_r+0x1c8>
 80060f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f6:	445a      	add	r2, fp
 80060f8:	9209      	str	r2, [sp, #36]	; 0x24
 80060fa:	f89a 3000 	ldrb.w	r3, [sl]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80a2 	beq.w	8006248 <_svfiprintf_r+0x1c8>
 8006104:	2300      	movs	r3, #0
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610e:	f10a 0a01 	add.w	sl, sl, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800611a:	931a      	str	r3, [sp, #104]	; 0x68
 800611c:	4654      	mov	r4, sl
 800611e:	2205      	movs	r2, #5
 8006120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006124:	4851      	ldr	r0, [pc, #324]	; (800626c <_svfiprintf_r+0x1ec>)
 8006126:	f7fa f85b 	bl	80001e0 <memchr>
 800612a:	9a04      	ldr	r2, [sp, #16]
 800612c:	b9d8      	cbnz	r0, 8006166 <_svfiprintf_r+0xe6>
 800612e:	06d0      	lsls	r0, r2, #27
 8006130:	bf44      	itt	mi
 8006132:	2320      	movmi	r3, #32
 8006134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006138:	0711      	lsls	r1, r2, #28
 800613a:	bf44      	itt	mi
 800613c:	232b      	movmi	r3, #43	; 0x2b
 800613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006142:	f89a 3000 	ldrb.w	r3, [sl]
 8006146:	2b2a      	cmp	r3, #42	; 0x2a
 8006148:	d015      	beq.n	8006176 <_svfiprintf_r+0xf6>
 800614a:	9a07      	ldr	r2, [sp, #28]
 800614c:	4654      	mov	r4, sl
 800614e:	2000      	movs	r0, #0
 8006150:	f04f 0c0a 	mov.w	ip, #10
 8006154:	4621      	mov	r1, r4
 8006156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800615a:	3b30      	subs	r3, #48	; 0x30
 800615c:	2b09      	cmp	r3, #9
 800615e:	d94e      	bls.n	80061fe <_svfiprintf_r+0x17e>
 8006160:	b1b0      	cbz	r0, 8006190 <_svfiprintf_r+0x110>
 8006162:	9207      	str	r2, [sp, #28]
 8006164:	e014      	b.n	8006190 <_svfiprintf_r+0x110>
 8006166:	eba0 0308 	sub.w	r3, r0, r8
 800616a:	fa09 f303 	lsl.w	r3, r9, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	46a2      	mov	sl, r4
 8006174:	e7d2      	b.n	800611c <_svfiprintf_r+0x9c>
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	1d19      	adds	r1, r3, #4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	9103      	str	r1, [sp, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	bfbb      	ittet	lt
 8006182:	425b      	neglt	r3, r3
 8006184:	f042 0202 	orrlt.w	r2, r2, #2
 8006188:	9307      	strge	r3, [sp, #28]
 800618a:	9307      	strlt	r3, [sp, #28]
 800618c:	bfb8      	it	lt
 800618e:	9204      	strlt	r2, [sp, #16]
 8006190:	7823      	ldrb	r3, [r4, #0]
 8006192:	2b2e      	cmp	r3, #46	; 0x2e
 8006194:	d10c      	bne.n	80061b0 <_svfiprintf_r+0x130>
 8006196:	7863      	ldrb	r3, [r4, #1]
 8006198:	2b2a      	cmp	r3, #42	; 0x2a
 800619a:	d135      	bne.n	8006208 <_svfiprintf_r+0x188>
 800619c:	9b03      	ldr	r3, [sp, #12]
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	9203      	str	r2, [sp, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfb8      	it	lt
 80061a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ac:	3402      	adds	r4, #2
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800627c <_svfiprintf_r+0x1fc>
 80061b4:	7821      	ldrb	r1, [r4, #0]
 80061b6:	2203      	movs	r2, #3
 80061b8:	4650      	mov	r0, sl
 80061ba:	f7fa f811 	bl	80001e0 <memchr>
 80061be:	b140      	cbz	r0, 80061d2 <_svfiprintf_r+0x152>
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	eba0 000a 	sub.w	r0, r0, sl
 80061c6:	fa03 f000 	lsl.w	r0, r3, r0
 80061ca:	9b04      	ldr	r3, [sp, #16]
 80061cc:	4303      	orrs	r3, r0
 80061ce:	3401      	adds	r4, #1
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d6:	4826      	ldr	r0, [pc, #152]	; (8006270 <_svfiprintf_r+0x1f0>)
 80061d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061dc:	2206      	movs	r2, #6
 80061de:	f7f9 ffff 	bl	80001e0 <memchr>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d038      	beq.n	8006258 <_svfiprintf_r+0x1d8>
 80061e6:	4b23      	ldr	r3, [pc, #140]	; (8006274 <_svfiprintf_r+0x1f4>)
 80061e8:	bb1b      	cbnz	r3, 8006232 <_svfiprintf_r+0x1b2>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	3307      	adds	r3, #7
 80061ee:	f023 0307 	bic.w	r3, r3, #7
 80061f2:	3308      	adds	r3, #8
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f8:	4433      	add	r3, r6
 80061fa:	9309      	str	r3, [sp, #36]	; 0x24
 80061fc:	e767      	b.n	80060ce <_svfiprintf_r+0x4e>
 80061fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006202:	460c      	mov	r4, r1
 8006204:	2001      	movs	r0, #1
 8006206:	e7a5      	b.n	8006154 <_svfiprintf_r+0xd4>
 8006208:	2300      	movs	r3, #0
 800620a:	3401      	adds	r4, #1
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	4619      	mov	r1, r3
 8006210:	f04f 0c0a 	mov.w	ip, #10
 8006214:	4620      	mov	r0, r4
 8006216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621a:	3a30      	subs	r2, #48	; 0x30
 800621c:	2a09      	cmp	r2, #9
 800621e:	d903      	bls.n	8006228 <_svfiprintf_r+0x1a8>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0c5      	beq.n	80061b0 <_svfiprintf_r+0x130>
 8006224:	9105      	str	r1, [sp, #20]
 8006226:	e7c3      	b.n	80061b0 <_svfiprintf_r+0x130>
 8006228:	fb0c 2101 	mla	r1, ip, r1, r2
 800622c:	4604      	mov	r4, r0
 800622e:	2301      	movs	r3, #1
 8006230:	e7f0      	b.n	8006214 <_svfiprintf_r+0x194>
 8006232:	ab03      	add	r3, sp, #12
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	462a      	mov	r2, r5
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <_svfiprintf_r+0x1f8>)
 800623a:	a904      	add	r1, sp, #16
 800623c:	4638      	mov	r0, r7
 800623e:	f3af 8000 	nop.w
 8006242:	1c42      	adds	r2, r0, #1
 8006244:	4606      	mov	r6, r0
 8006246:	d1d6      	bne.n	80061f6 <_svfiprintf_r+0x176>
 8006248:	89ab      	ldrh	r3, [r5, #12]
 800624a:	065b      	lsls	r3, r3, #25
 800624c:	f53f af2c 	bmi.w	80060a8 <_svfiprintf_r+0x28>
 8006250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006252:	b01d      	add	sp, #116	; 0x74
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	ab03      	add	r3, sp, #12
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	462a      	mov	r2, r5
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <_svfiprintf_r+0x1f8>)
 8006260:	a904      	add	r1, sp, #16
 8006262:	4638      	mov	r0, r7
 8006264:	f000 f9d4 	bl	8006610 <_printf_i>
 8006268:	e7eb      	b.n	8006242 <_svfiprintf_r+0x1c2>
 800626a:	bf00      	nop
 800626c:	08007872 	.word	0x08007872
 8006270:	0800787c 	.word	0x0800787c
 8006274:	00000000 	.word	0x00000000
 8006278:	08005fc9 	.word	0x08005fc9
 800627c:	08007878 	.word	0x08007878

08006280 <__sfputc_r>:
 8006280:	6893      	ldr	r3, [r2, #8]
 8006282:	3b01      	subs	r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	b410      	push	{r4}
 8006288:	6093      	str	r3, [r2, #8]
 800628a:	da08      	bge.n	800629e <__sfputc_r+0x1e>
 800628c:	6994      	ldr	r4, [r2, #24]
 800628e:	42a3      	cmp	r3, r4
 8006290:	db01      	blt.n	8006296 <__sfputc_r+0x16>
 8006292:	290a      	cmp	r1, #10
 8006294:	d103      	bne.n	800629e <__sfputc_r+0x1e>
 8006296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800629a:	f000 baef 	b.w	800687c <__swbuf_r>
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	1c58      	adds	r0, r3, #1
 80062a2:	6010      	str	r0, [r2, #0]
 80062a4:	7019      	strb	r1, [r3, #0]
 80062a6:	4608      	mov	r0, r1
 80062a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <__sfputs_r>:
 80062ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b0:	4606      	mov	r6, r0
 80062b2:	460f      	mov	r7, r1
 80062b4:	4614      	mov	r4, r2
 80062b6:	18d5      	adds	r5, r2, r3
 80062b8:	42ac      	cmp	r4, r5
 80062ba:	d101      	bne.n	80062c0 <__sfputs_r+0x12>
 80062bc:	2000      	movs	r0, #0
 80062be:	e007      	b.n	80062d0 <__sfputs_r+0x22>
 80062c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c4:	463a      	mov	r2, r7
 80062c6:	4630      	mov	r0, r6
 80062c8:	f7ff ffda 	bl	8006280 <__sfputc_r>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d1f3      	bne.n	80062b8 <__sfputs_r+0xa>
 80062d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062d4 <_vfiprintf_r>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	460d      	mov	r5, r1
 80062da:	b09d      	sub	sp, #116	; 0x74
 80062dc:	4614      	mov	r4, r2
 80062de:	4698      	mov	r8, r3
 80062e0:	4606      	mov	r6, r0
 80062e2:	b118      	cbz	r0, 80062ec <_vfiprintf_r+0x18>
 80062e4:	6983      	ldr	r3, [r0, #24]
 80062e6:	b90b      	cbnz	r3, 80062ec <_vfiprintf_r+0x18>
 80062e8:	f000 fcaa 	bl	8006c40 <__sinit>
 80062ec:	4b89      	ldr	r3, [pc, #548]	; (8006514 <_vfiprintf_r+0x240>)
 80062ee:	429d      	cmp	r5, r3
 80062f0:	d11b      	bne.n	800632a <_vfiprintf_r+0x56>
 80062f2:	6875      	ldr	r5, [r6, #4]
 80062f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f6:	07d9      	lsls	r1, r3, #31
 80062f8:	d405      	bmi.n	8006306 <_vfiprintf_r+0x32>
 80062fa:	89ab      	ldrh	r3, [r5, #12]
 80062fc:	059a      	lsls	r2, r3, #22
 80062fe:	d402      	bmi.n	8006306 <_vfiprintf_r+0x32>
 8006300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006302:	f000 fd3b 	bl	8006d7c <__retarget_lock_acquire_recursive>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	071b      	lsls	r3, r3, #28
 800630a:	d501      	bpl.n	8006310 <_vfiprintf_r+0x3c>
 800630c:	692b      	ldr	r3, [r5, #16]
 800630e:	b9eb      	cbnz	r3, 800634c <_vfiprintf_r+0x78>
 8006310:	4629      	mov	r1, r5
 8006312:	4630      	mov	r0, r6
 8006314:	f000 fb04 	bl	8006920 <__swsetup_r>
 8006318:	b1c0      	cbz	r0, 800634c <_vfiprintf_r+0x78>
 800631a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800631c:	07dc      	lsls	r4, r3, #31
 800631e:	d50e      	bpl.n	800633e <_vfiprintf_r+0x6a>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	b01d      	add	sp, #116	; 0x74
 8006326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632a:	4b7b      	ldr	r3, [pc, #492]	; (8006518 <_vfiprintf_r+0x244>)
 800632c:	429d      	cmp	r5, r3
 800632e:	d101      	bne.n	8006334 <_vfiprintf_r+0x60>
 8006330:	68b5      	ldr	r5, [r6, #8]
 8006332:	e7df      	b.n	80062f4 <_vfiprintf_r+0x20>
 8006334:	4b79      	ldr	r3, [pc, #484]	; (800651c <_vfiprintf_r+0x248>)
 8006336:	429d      	cmp	r5, r3
 8006338:	bf08      	it	eq
 800633a:	68f5      	ldreq	r5, [r6, #12]
 800633c:	e7da      	b.n	80062f4 <_vfiprintf_r+0x20>
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	0598      	lsls	r0, r3, #22
 8006342:	d4ed      	bmi.n	8006320 <_vfiprintf_r+0x4c>
 8006344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006346:	f000 fd1a 	bl	8006d7e <__retarget_lock_release_recursive>
 800634a:	e7e9      	b.n	8006320 <_vfiprintf_r+0x4c>
 800634c:	2300      	movs	r3, #0
 800634e:	9309      	str	r3, [sp, #36]	; 0x24
 8006350:	2320      	movs	r3, #32
 8006352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006356:	f8cd 800c 	str.w	r8, [sp, #12]
 800635a:	2330      	movs	r3, #48	; 0x30
 800635c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006520 <_vfiprintf_r+0x24c>
 8006360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006364:	f04f 0901 	mov.w	r9, #1
 8006368:	4623      	mov	r3, r4
 800636a:	469a      	mov	sl, r3
 800636c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006370:	b10a      	cbz	r2, 8006376 <_vfiprintf_r+0xa2>
 8006372:	2a25      	cmp	r2, #37	; 0x25
 8006374:	d1f9      	bne.n	800636a <_vfiprintf_r+0x96>
 8006376:	ebba 0b04 	subs.w	fp, sl, r4
 800637a:	d00b      	beq.n	8006394 <_vfiprintf_r+0xc0>
 800637c:	465b      	mov	r3, fp
 800637e:	4622      	mov	r2, r4
 8006380:	4629      	mov	r1, r5
 8006382:	4630      	mov	r0, r6
 8006384:	f7ff ff93 	bl	80062ae <__sfputs_r>
 8006388:	3001      	adds	r0, #1
 800638a:	f000 80aa 	beq.w	80064e2 <_vfiprintf_r+0x20e>
 800638e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006390:	445a      	add	r2, fp
 8006392:	9209      	str	r2, [sp, #36]	; 0x24
 8006394:	f89a 3000 	ldrb.w	r3, [sl]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80a2 	beq.w	80064e2 <_vfiprintf_r+0x20e>
 800639e:	2300      	movs	r3, #0
 80063a0:	f04f 32ff 	mov.w	r2, #4294967295
 80063a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a8:	f10a 0a01 	add.w	sl, sl, #1
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	9307      	str	r3, [sp, #28]
 80063b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063b4:	931a      	str	r3, [sp, #104]	; 0x68
 80063b6:	4654      	mov	r4, sl
 80063b8:	2205      	movs	r2, #5
 80063ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063be:	4858      	ldr	r0, [pc, #352]	; (8006520 <_vfiprintf_r+0x24c>)
 80063c0:	f7f9 ff0e 	bl	80001e0 <memchr>
 80063c4:	9a04      	ldr	r2, [sp, #16]
 80063c6:	b9d8      	cbnz	r0, 8006400 <_vfiprintf_r+0x12c>
 80063c8:	06d1      	lsls	r1, r2, #27
 80063ca:	bf44      	itt	mi
 80063cc:	2320      	movmi	r3, #32
 80063ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063d2:	0713      	lsls	r3, r2, #28
 80063d4:	bf44      	itt	mi
 80063d6:	232b      	movmi	r3, #43	; 0x2b
 80063d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063dc:	f89a 3000 	ldrb.w	r3, [sl]
 80063e0:	2b2a      	cmp	r3, #42	; 0x2a
 80063e2:	d015      	beq.n	8006410 <_vfiprintf_r+0x13c>
 80063e4:	9a07      	ldr	r2, [sp, #28]
 80063e6:	4654      	mov	r4, sl
 80063e8:	2000      	movs	r0, #0
 80063ea:	f04f 0c0a 	mov.w	ip, #10
 80063ee:	4621      	mov	r1, r4
 80063f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063f4:	3b30      	subs	r3, #48	; 0x30
 80063f6:	2b09      	cmp	r3, #9
 80063f8:	d94e      	bls.n	8006498 <_vfiprintf_r+0x1c4>
 80063fa:	b1b0      	cbz	r0, 800642a <_vfiprintf_r+0x156>
 80063fc:	9207      	str	r2, [sp, #28]
 80063fe:	e014      	b.n	800642a <_vfiprintf_r+0x156>
 8006400:	eba0 0308 	sub.w	r3, r0, r8
 8006404:	fa09 f303 	lsl.w	r3, r9, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	46a2      	mov	sl, r4
 800640e:	e7d2      	b.n	80063b6 <_vfiprintf_r+0xe2>
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	1d19      	adds	r1, r3, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	9103      	str	r1, [sp, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	bfbb      	ittet	lt
 800641c:	425b      	neglt	r3, r3
 800641e:	f042 0202 	orrlt.w	r2, r2, #2
 8006422:	9307      	strge	r3, [sp, #28]
 8006424:	9307      	strlt	r3, [sp, #28]
 8006426:	bfb8      	it	lt
 8006428:	9204      	strlt	r2, [sp, #16]
 800642a:	7823      	ldrb	r3, [r4, #0]
 800642c:	2b2e      	cmp	r3, #46	; 0x2e
 800642e:	d10c      	bne.n	800644a <_vfiprintf_r+0x176>
 8006430:	7863      	ldrb	r3, [r4, #1]
 8006432:	2b2a      	cmp	r3, #42	; 0x2a
 8006434:	d135      	bne.n	80064a2 <_vfiprintf_r+0x1ce>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	1d1a      	adds	r2, r3, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	9203      	str	r2, [sp, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	bfb8      	it	lt
 8006442:	f04f 33ff 	movlt.w	r3, #4294967295
 8006446:	3402      	adds	r4, #2
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006530 <_vfiprintf_r+0x25c>
 800644e:	7821      	ldrb	r1, [r4, #0]
 8006450:	2203      	movs	r2, #3
 8006452:	4650      	mov	r0, sl
 8006454:	f7f9 fec4 	bl	80001e0 <memchr>
 8006458:	b140      	cbz	r0, 800646c <_vfiprintf_r+0x198>
 800645a:	2340      	movs	r3, #64	; 0x40
 800645c:	eba0 000a 	sub.w	r0, r0, sl
 8006460:	fa03 f000 	lsl.w	r0, r3, r0
 8006464:	9b04      	ldr	r3, [sp, #16]
 8006466:	4303      	orrs	r3, r0
 8006468:	3401      	adds	r4, #1
 800646a:	9304      	str	r3, [sp, #16]
 800646c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006470:	482c      	ldr	r0, [pc, #176]	; (8006524 <_vfiprintf_r+0x250>)
 8006472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006476:	2206      	movs	r2, #6
 8006478:	f7f9 feb2 	bl	80001e0 <memchr>
 800647c:	2800      	cmp	r0, #0
 800647e:	d03f      	beq.n	8006500 <_vfiprintf_r+0x22c>
 8006480:	4b29      	ldr	r3, [pc, #164]	; (8006528 <_vfiprintf_r+0x254>)
 8006482:	bb1b      	cbnz	r3, 80064cc <_vfiprintf_r+0x1f8>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	3307      	adds	r3, #7
 8006488:	f023 0307 	bic.w	r3, r3, #7
 800648c:	3308      	adds	r3, #8
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006492:	443b      	add	r3, r7
 8006494:	9309      	str	r3, [sp, #36]	; 0x24
 8006496:	e767      	b.n	8006368 <_vfiprintf_r+0x94>
 8006498:	fb0c 3202 	mla	r2, ip, r2, r3
 800649c:	460c      	mov	r4, r1
 800649e:	2001      	movs	r0, #1
 80064a0:	e7a5      	b.n	80063ee <_vfiprintf_r+0x11a>
 80064a2:	2300      	movs	r3, #0
 80064a4:	3401      	adds	r4, #1
 80064a6:	9305      	str	r3, [sp, #20]
 80064a8:	4619      	mov	r1, r3
 80064aa:	f04f 0c0a 	mov.w	ip, #10
 80064ae:	4620      	mov	r0, r4
 80064b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064b4:	3a30      	subs	r2, #48	; 0x30
 80064b6:	2a09      	cmp	r2, #9
 80064b8:	d903      	bls.n	80064c2 <_vfiprintf_r+0x1ee>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0c5      	beq.n	800644a <_vfiprintf_r+0x176>
 80064be:	9105      	str	r1, [sp, #20]
 80064c0:	e7c3      	b.n	800644a <_vfiprintf_r+0x176>
 80064c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064c6:	4604      	mov	r4, r0
 80064c8:	2301      	movs	r3, #1
 80064ca:	e7f0      	b.n	80064ae <_vfiprintf_r+0x1da>
 80064cc:	ab03      	add	r3, sp, #12
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	462a      	mov	r2, r5
 80064d2:	4b16      	ldr	r3, [pc, #88]	; (800652c <_vfiprintf_r+0x258>)
 80064d4:	a904      	add	r1, sp, #16
 80064d6:	4630      	mov	r0, r6
 80064d8:	f3af 8000 	nop.w
 80064dc:	4607      	mov	r7, r0
 80064de:	1c78      	adds	r0, r7, #1
 80064e0:	d1d6      	bne.n	8006490 <_vfiprintf_r+0x1bc>
 80064e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064e4:	07d9      	lsls	r1, r3, #31
 80064e6:	d405      	bmi.n	80064f4 <_vfiprintf_r+0x220>
 80064e8:	89ab      	ldrh	r3, [r5, #12]
 80064ea:	059a      	lsls	r2, r3, #22
 80064ec:	d402      	bmi.n	80064f4 <_vfiprintf_r+0x220>
 80064ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064f0:	f000 fc45 	bl	8006d7e <__retarget_lock_release_recursive>
 80064f4:	89ab      	ldrh	r3, [r5, #12]
 80064f6:	065b      	lsls	r3, r3, #25
 80064f8:	f53f af12 	bmi.w	8006320 <_vfiprintf_r+0x4c>
 80064fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fe:	e711      	b.n	8006324 <_vfiprintf_r+0x50>
 8006500:	ab03      	add	r3, sp, #12
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	462a      	mov	r2, r5
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <_vfiprintf_r+0x258>)
 8006508:	a904      	add	r1, sp, #16
 800650a:	4630      	mov	r0, r6
 800650c:	f000 f880 	bl	8006610 <_printf_i>
 8006510:	e7e4      	b.n	80064dc <_vfiprintf_r+0x208>
 8006512:	bf00      	nop
 8006514:	080078c8 	.word	0x080078c8
 8006518:	080078e8 	.word	0x080078e8
 800651c:	080078a8 	.word	0x080078a8
 8006520:	08007872 	.word	0x08007872
 8006524:	0800787c 	.word	0x0800787c
 8006528:	00000000 	.word	0x00000000
 800652c:	080062af 	.word	0x080062af
 8006530:	08007878 	.word	0x08007878

08006534 <_printf_common>:
 8006534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006538:	4616      	mov	r6, r2
 800653a:	4699      	mov	r9, r3
 800653c:	688a      	ldr	r2, [r1, #8]
 800653e:	690b      	ldr	r3, [r1, #16]
 8006540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006544:	4293      	cmp	r3, r2
 8006546:	bfb8      	it	lt
 8006548:	4613      	movlt	r3, r2
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006550:	4607      	mov	r7, r0
 8006552:	460c      	mov	r4, r1
 8006554:	b10a      	cbz	r2, 800655a <_printf_common+0x26>
 8006556:	3301      	adds	r3, #1
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	0699      	lsls	r1, r3, #26
 800655e:	bf42      	ittt	mi
 8006560:	6833      	ldrmi	r3, [r6, #0]
 8006562:	3302      	addmi	r3, #2
 8006564:	6033      	strmi	r3, [r6, #0]
 8006566:	6825      	ldr	r5, [r4, #0]
 8006568:	f015 0506 	ands.w	r5, r5, #6
 800656c:	d106      	bne.n	800657c <_printf_common+0x48>
 800656e:	f104 0a19 	add.w	sl, r4, #25
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	6832      	ldr	r2, [r6, #0]
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	42ab      	cmp	r3, r5
 800657a:	dc26      	bgt.n	80065ca <_printf_common+0x96>
 800657c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006580:	1e13      	subs	r3, r2, #0
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	bf18      	it	ne
 8006586:	2301      	movne	r3, #1
 8006588:	0692      	lsls	r2, r2, #26
 800658a:	d42b      	bmi.n	80065e4 <_printf_common+0xb0>
 800658c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006590:	4649      	mov	r1, r9
 8006592:	4638      	mov	r0, r7
 8006594:	47c0      	blx	r8
 8006596:	3001      	adds	r0, #1
 8006598:	d01e      	beq.n	80065d8 <_printf_common+0xa4>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	68e5      	ldr	r5, [r4, #12]
 800659e:	6832      	ldr	r2, [r6, #0]
 80065a0:	f003 0306 	and.w	r3, r3, #6
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	bf08      	it	eq
 80065a8:	1aad      	subeq	r5, r5, r2
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	6922      	ldr	r2, [r4, #16]
 80065ae:	bf0c      	ite	eq
 80065b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b4:	2500      	movne	r5, #0
 80065b6:	4293      	cmp	r3, r2
 80065b8:	bfc4      	itt	gt
 80065ba:	1a9b      	subgt	r3, r3, r2
 80065bc:	18ed      	addgt	r5, r5, r3
 80065be:	2600      	movs	r6, #0
 80065c0:	341a      	adds	r4, #26
 80065c2:	42b5      	cmp	r5, r6
 80065c4:	d11a      	bne.n	80065fc <_printf_common+0xc8>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e008      	b.n	80065dc <_printf_common+0xa8>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4652      	mov	r2, sl
 80065ce:	4649      	mov	r1, r9
 80065d0:	4638      	mov	r0, r7
 80065d2:	47c0      	blx	r8
 80065d4:	3001      	adds	r0, #1
 80065d6:	d103      	bne.n	80065e0 <_printf_common+0xac>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	3501      	adds	r5, #1
 80065e2:	e7c6      	b.n	8006572 <_printf_common+0x3e>
 80065e4:	18e1      	adds	r1, r4, r3
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	2030      	movs	r0, #48	; 0x30
 80065ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ee:	4422      	add	r2, r4
 80065f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f8:	3302      	adds	r3, #2
 80065fa:	e7c7      	b.n	800658c <_printf_common+0x58>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4622      	mov	r2, r4
 8006600:	4649      	mov	r1, r9
 8006602:	4638      	mov	r0, r7
 8006604:	47c0      	blx	r8
 8006606:	3001      	adds	r0, #1
 8006608:	d0e6      	beq.n	80065d8 <_printf_common+0xa4>
 800660a:	3601      	adds	r6, #1
 800660c:	e7d9      	b.n	80065c2 <_printf_common+0x8e>
	...

08006610 <_printf_i>:
 8006610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	7e0f      	ldrb	r7, [r1, #24]
 8006616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006618:	2f78      	cmp	r7, #120	; 0x78
 800661a:	4691      	mov	r9, r2
 800661c:	4680      	mov	r8, r0
 800661e:	460c      	mov	r4, r1
 8006620:	469a      	mov	sl, r3
 8006622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006626:	d807      	bhi.n	8006638 <_printf_i+0x28>
 8006628:	2f62      	cmp	r7, #98	; 0x62
 800662a:	d80a      	bhi.n	8006642 <_printf_i+0x32>
 800662c:	2f00      	cmp	r7, #0
 800662e:	f000 80d8 	beq.w	80067e2 <_printf_i+0x1d2>
 8006632:	2f58      	cmp	r7, #88	; 0x58
 8006634:	f000 80a3 	beq.w	800677e <_printf_i+0x16e>
 8006638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800663c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006640:	e03a      	b.n	80066b8 <_printf_i+0xa8>
 8006642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006646:	2b15      	cmp	r3, #21
 8006648:	d8f6      	bhi.n	8006638 <_printf_i+0x28>
 800664a:	a101      	add	r1, pc, #4	; (adr r1, 8006650 <_printf_i+0x40>)
 800664c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066bd 	.word	0x080066bd
 8006658:	08006639 	.word	0x08006639
 800665c:	08006639 	.word	0x08006639
 8006660:	08006639 	.word	0x08006639
 8006664:	08006639 	.word	0x08006639
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006639 	.word	0x08006639
 8006670:	08006639 	.word	0x08006639
 8006674:	08006639 	.word	0x08006639
 8006678:	08006639 	.word	0x08006639
 800667c:	080067c9 	.word	0x080067c9
 8006680:	080066ed 	.word	0x080066ed
 8006684:	080067ab 	.word	0x080067ab
 8006688:	08006639 	.word	0x08006639
 800668c:	08006639 	.word	0x08006639
 8006690:	080067eb 	.word	0x080067eb
 8006694:	08006639 	.word	0x08006639
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006639 	.word	0x08006639
 80066a0:	08006639 	.word	0x08006639
 80066a4:	080067b3 	.word	0x080067b3
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	1d1a      	adds	r2, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	602a      	str	r2, [r5, #0]
 80066b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0a3      	b.n	8006804 <_printf_i+0x1f4>
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	6829      	ldr	r1, [r5, #0]
 80066c0:	0606      	lsls	r6, r0, #24
 80066c2:	f101 0304 	add.w	r3, r1, #4
 80066c6:	d50a      	bpl.n	80066de <_printf_i+0xce>
 80066c8:	680e      	ldr	r6, [r1, #0]
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	2e00      	cmp	r6, #0
 80066ce:	da03      	bge.n	80066d8 <_printf_i+0xc8>
 80066d0:	232d      	movs	r3, #45	; 0x2d
 80066d2:	4276      	negs	r6, r6
 80066d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d8:	485e      	ldr	r0, [pc, #376]	; (8006854 <_printf_i+0x244>)
 80066da:	230a      	movs	r3, #10
 80066dc:	e019      	b.n	8006712 <_printf_i+0x102>
 80066de:	680e      	ldr	r6, [r1, #0]
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e6:	bf18      	it	ne
 80066e8:	b236      	sxthne	r6, r6
 80066ea:	e7ef      	b.n	80066cc <_printf_i+0xbc>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	1d19      	adds	r1, r3, #4
 80066f2:	6029      	str	r1, [r5, #0]
 80066f4:	0601      	lsls	r1, r0, #24
 80066f6:	d501      	bpl.n	80066fc <_printf_i+0xec>
 80066f8:	681e      	ldr	r6, [r3, #0]
 80066fa:	e002      	b.n	8006702 <_printf_i+0xf2>
 80066fc:	0646      	lsls	r6, r0, #25
 80066fe:	d5fb      	bpl.n	80066f8 <_printf_i+0xe8>
 8006700:	881e      	ldrh	r6, [r3, #0]
 8006702:	4854      	ldr	r0, [pc, #336]	; (8006854 <_printf_i+0x244>)
 8006704:	2f6f      	cmp	r7, #111	; 0x6f
 8006706:	bf0c      	ite	eq
 8006708:	2308      	moveq	r3, #8
 800670a:	230a      	movne	r3, #10
 800670c:	2100      	movs	r1, #0
 800670e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006712:	6865      	ldr	r5, [r4, #4]
 8006714:	60a5      	str	r5, [r4, #8]
 8006716:	2d00      	cmp	r5, #0
 8006718:	bfa2      	ittt	ge
 800671a:	6821      	ldrge	r1, [r4, #0]
 800671c:	f021 0104 	bicge.w	r1, r1, #4
 8006720:	6021      	strge	r1, [r4, #0]
 8006722:	b90e      	cbnz	r6, 8006728 <_printf_i+0x118>
 8006724:	2d00      	cmp	r5, #0
 8006726:	d04d      	beq.n	80067c4 <_printf_i+0x1b4>
 8006728:	4615      	mov	r5, r2
 800672a:	fbb6 f1f3 	udiv	r1, r6, r3
 800672e:	fb03 6711 	mls	r7, r3, r1, r6
 8006732:	5dc7      	ldrb	r7, [r0, r7]
 8006734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006738:	4637      	mov	r7, r6
 800673a:	42bb      	cmp	r3, r7
 800673c:	460e      	mov	r6, r1
 800673e:	d9f4      	bls.n	800672a <_printf_i+0x11a>
 8006740:	2b08      	cmp	r3, #8
 8006742:	d10b      	bne.n	800675c <_printf_i+0x14c>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	07de      	lsls	r6, r3, #31
 8006748:	d508      	bpl.n	800675c <_printf_i+0x14c>
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	6861      	ldr	r1, [r4, #4]
 800674e:	4299      	cmp	r1, r3
 8006750:	bfde      	ittt	le
 8006752:	2330      	movle	r3, #48	; 0x30
 8006754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800675c:	1b52      	subs	r2, r2, r5
 800675e:	6122      	str	r2, [r4, #16]
 8006760:	f8cd a000 	str.w	sl, [sp]
 8006764:	464b      	mov	r3, r9
 8006766:	aa03      	add	r2, sp, #12
 8006768:	4621      	mov	r1, r4
 800676a:	4640      	mov	r0, r8
 800676c:	f7ff fee2 	bl	8006534 <_printf_common>
 8006770:	3001      	adds	r0, #1
 8006772:	d14c      	bne.n	800680e <_printf_i+0x1fe>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b004      	add	sp, #16
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677e:	4835      	ldr	r0, [pc, #212]	; (8006854 <_printf_i+0x244>)
 8006780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006784:	6829      	ldr	r1, [r5, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f851 6b04 	ldr.w	r6, [r1], #4
 800678c:	6029      	str	r1, [r5, #0]
 800678e:	061d      	lsls	r5, r3, #24
 8006790:	d514      	bpl.n	80067bc <_printf_i+0x1ac>
 8006792:	07df      	lsls	r7, r3, #31
 8006794:	bf44      	itt	mi
 8006796:	f043 0320 	orrmi.w	r3, r3, #32
 800679a:	6023      	strmi	r3, [r4, #0]
 800679c:	b91e      	cbnz	r6, 80067a6 <_printf_i+0x196>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	f023 0320 	bic.w	r3, r3, #32
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	2310      	movs	r3, #16
 80067a8:	e7b0      	b.n	800670c <_printf_i+0xfc>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	f043 0320 	orr.w	r3, r3, #32
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	2378      	movs	r3, #120	; 0x78
 80067b4:	4828      	ldr	r0, [pc, #160]	; (8006858 <_printf_i+0x248>)
 80067b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ba:	e7e3      	b.n	8006784 <_printf_i+0x174>
 80067bc:	0659      	lsls	r1, r3, #25
 80067be:	bf48      	it	mi
 80067c0:	b2b6      	uxthmi	r6, r6
 80067c2:	e7e6      	b.n	8006792 <_printf_i+0x182>
 80067c4:	4615      	mov	r5, r2
 80067c6:	e7bb      	b.n	8006740 <_printf_i+0x130>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	6826      	ldr	r6, [r4, #0]
 80067cc:	6961      	ldr	r1, [r4, #20]
 80067ce:	1d18      	adds	r0, r3, #4
 80067d0:	6028      	str	r0, [r5, #0]
 80067d2:	0635      	lsls	r5, r6, #24
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	d501      	bpl.n	80067dc <_printf_i+0x1cc>
 80067d8:	6019      	str	r1, [r3, #0]
 80067da:	e002      	b.n	80067e2 <_printf_i+0x1d2>
 80067dc:	0670      	lsls	r0, r6, #25
 80067de:	d5fb      	bpl.n	80067d8 <_printf_i+0x1c8>
 80067e0:	8019      	strh	r1, [r3, #0]
 80067e2:	2300      	movs	r3, #0
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	4615      	mov	r5, r2
 80067e8:	e7ba      	b.n	8006760 <_printf_i+0x150>
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	1d1a      	adds	r2, r3, #4
 80067ee:	602a      	str	r2, [r5, #0]
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	6862      	ldr	r2, [r4, #4]
 80067f4:	2100      	movs	r1, #0
 80067f6:	4628      	mov	r0, r5
 80067f8:	f7f9 fcf2 	bl	80001e0 <memchr>
 80067fc:	b108      	cbz	r0, 8006802 <_printf_i+0x1f2>
 80067fe:	1b40      	subs	r0, r0, r5
 8006800:	6060      	str	r0, [r4, #4]
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	2300      	movs	r3, #0
 8006808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800680c:	e7a8      	b.n	8006760 <_printf_i+0x150>
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	462a      	mov	r2, r5
 8006812:	4649      	mov	r1, r9
 8006814:	4640      	mov	r0, r8
 8006816:	47d0      	blx	sl
 8006818:	3001      	adds	r0, #1
 800681a:	d0ab      	beq.n	8006774 <_printf_i+0x164>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	079b      	lsls	r3, r3, #30
 8006820:	d413      	bmi.n	800684a <_printf_i+0x23a>
 8006822:	68e0      	ldr	r0, [r4, #12]
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	4298      	cmp	r0, r3
 8006828:	bfb8      	it	lt
 800682a:	4618      	movlt	r0, r3
 800682c:	e7a4      	b.n	8006778 <_printf_i+0x168>
 800682e:	2301      	movs	r3, #1
 8006830:	4632      	mov	r2, r6
 8006832:	4649      	mov	r1, r9
 8006834:	4640      	mov	r0, r8
 8006836:	47d0      	blx	sl
 8006838:	3001      	adds	r0, #1
 800683a:	d09b      	beq.n	8006774 <_printf_i+0x164>
 800683c:	3501      	adds	r5, #1
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	9903      	ldr	r1, [sp, #12]
 8006842:	1a5b      	subs	r3, r3, r1
 8006844:	42ab      	cmp	r3, r5
 8006846:	dcf2      	bgt.n	800682e <_printf_i+0x21e>
 8006848:	e7eb      	b.n	8006822 <_printf_i+0x212>
 800684a:	2500      	movs	r5, #0
 800684c:	f104 0619 	add.w	r6, r4, #25
 8006850:	e7f5      	b.n	800683e <_printf_i+0x22e>
 8006852:	bf00      	nop
 8006854:	08007883 	.word	0x08007883
 8006858:	08007894 	.word	0x08007894

0800685c <_sbrk_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4d06      	ldr	r5, [pc, #24]	; (8006878 <_sbrk_r+0x1c>)
 8006860:	2300      	movs	r3, #0
 8006862:	4604      	mov	r4, r0
 8006864:	4608      	mov	r0, r1
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	f7fb fb42 	bl	8001ef0 <_sbrk>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_sbrk_r+0x1a>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_sbrk_r+0x1a>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	20000840 	.word	0x20000840

0800687c <__swbuf_r>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	460e      	mov	r6, r1
 8006880:	4614      	mov	r4, r2
 8006882:	4605      	mov	r5, r0
 8006884:	b118      	cbz	r0, 800688e <__swbuf_r+0x12>
 8006886:	6983      	ldr	r3, [r0, #24]
 8006888:	b90b      	cbnz	r3, 800688e <__swbuf_r+0x12>
 800688a:	f000 f9d9 	bl	8006c40 <__sinit>
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <__swbuf_r+0x98>)
 8006890:	429c      	cmp	r4, r3
 8006892:	d12b      	bne.n	80068ec <__swbuf_r+0x70>
 8006894:	686c      	ldr	r4, [r5, #4]
 8006896:	69a3      	ldr	r3, [r4, #24]
 8006898:	60a3      	str	r3, [r4, #8]
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	071a      	lsls	r2, r3, #28
 800689e:	d52f      	bpl.n	8006900 <__swbuf_r+0x84>
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	b36b      	cbz	r3, 8006900 <__swbuf_r+0x84>
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	1ac0      	subs	r0, r0, r3
 80068aa:	6963      	ldr	r3, [r4, #20]
 80068ac:	b2f6      	uxtb	r6, r6
 80068ae:	4283      	cmp	r3, r0
 80068b0:	4637      	mov	r7, r6
 80068b2:	dc04      	bgt.n	80068be <__swbuf_r+0x42>
 80068b4:	4621      	mov	r1, r4
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f92e 	bl	8006b18 <_fflush_r>
 80068bc:	bb30      	cbnz	r0, 800690c <__swbuf_r+0x90>
 80068be:	68a3      	ldr	r3, [r4, #8]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	60a3      	str	r3, [r4, #8]
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	6022      	str	r2, [r4, #0]
 80068ca:	701e      	strb	r6, [r3, #0]
 80068cc:	6963      	ldr	r3, [r4, #20]
 80068ce:	3001      	adds	r0, #1
 80068d0:	4283      	cmp	r3, r0
 80068d2:	d004      	beq.n	80068de <__swbuf_r+0x62>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	07db      	lsls	r3, r3, #31
 80068d8:	d506      	bpl.n	80068e8 <__swbuf_r+0x6c>
 80068da:	2e0a      	cmp	r6, #10
 80068dc:	d104      	bne.n	80068e8 <__swbuf_r+0x6c>
 80068de:	4621      	mov	r1, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 f919 	bl	8006b18 <_fflush_r>
 80068e6:	b988      	cbnz	r0, 800690c <__swbuf_r+0x90>
 80068e8:	4638      	mov	r0, r7
 80068ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <__swbuf_r+0x9c>)
 80068ee:	429c      	cmp	r4, r3
 80068f0:	d101      	bne.n	80068f6 <__swbuf_r+0x7a>
 80068f2:	68ac      	ldr	r4, [r5, #8]
 80068f4:	e7cf      	b.n	8006896 <__swbuf_r+0x1a>
 80068f6:	4b09      	ldr	r3, [pc, #36]	; (800691c <__swbuf_r+0xa0>)
 80068f8:	429c      	cmp	r4, r3
 80068fa:	bf08      	it	eq
 80068fc:	68ec      	ldreq	r4, [r5, #12]
 80068fe:	e7ca      	b.n	8006896 <__swbuf_r+0x1a>
 8006900:	4621      	mov	r1, r4
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f80c 	bl	8006920 <__swsetup_r>
 8006908:	2800      	cmp	r0, #0
 800690a:	d0cb      	beq.n	80068a4 <__swbuf_r+0x28>
 800690c:	f04f 37ff 	mov.w	r7, #4294967295
 8006910:	e7ea      	b.n	80068e8 <__swbuf_r+0x6c>
 8006912:	bf00      	nop
 8006914:	080078c8 	.word	0x080078c8
 8006918:	080078e8 	.word	0x080078e8
 800691c:	080078a8 	.word	0x080078a8

08006920 <__swsetup_r>:
 8006920:	4b32      	ldr	r3, [pc, #200]	; (80069ec <__swsetup_r+0xcc>)
 8006922:	b570      	push	{r4, r5, r6, lr}
 8006924:	681d      	ldr	r5, [r3, #0]
 8006926:	4606      	mov	r6, r0
 8006928:	460c      	mov	r4, r1
 800692a:	b125      	cbz	r5, 8006936 <__swsetup_r+0x16>
 800692c:	69ab      	ldr	r3, [r5, #24]
 800692e:	b913      	cbnz	r3, 8006936 <__swsetup_r+0x16>
 8006930:	4628      	mov	r0, r5
 8006932:	f000 f985 	bl	8006c40 <__sinit>
 8006936:	4b2e      	ldr	r3, [pc, #184]	; (80069f0 <__swsetup_r+0xd0>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d10f      	bne.n	800695c <__swsetup_r+0x3c>
 800693c:	686c      	ldr	r4, [r5, #4]
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006944:	0719      	lsls	r1, r3, #28
 8006946:	d42c      	bmi.n	80069a2 <__swsetup_r+0x82>
 8006948:	06dd      	lsls	r5, r3, #27
 800694a:	d411      	bmi.n	8006970 <__swsetup_r+0x50>
 800694c:	2309      	movs	r3, #9
 800694e:	6033      	str	r3, [r6, #0]
 8006950:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	e03e      	b.n	80069da <__swsetup_r+0xba>
 800695c:	4b25      	ldr	r3, [pc, #148]	; (80069f4 <__swsetup_r+0xd4>)
 800695e:	429c      	cmp	r4, r3
 8006960:	d101      	bne.n	8006966 <__swsetup_r+0x46>
 8006962:	68ac      	ldr	r4, [r5, #8]
 8006964:	e7eb      	b.n	800693e <__swsetup_r+0x1e>
 8006966:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <__swsetup_r+0xd8>)
 8006968:	429c      	cmp	r4, r3
 800696a:	bf08      	it	eq
 800696c:	68ec      	ldreq	r4, [r5, #12]
 800696e:	e7e6      	b.n	800693e <__swsetup_r+0x1e>
 8006970:	0758      	lsls	r0, r3, #29
 8006972:	d512      	bpl.n	800699a <__swsetup_r+0x7a>
 8006974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006976:	b141      	cbz	r1, 800698a <__swsetup_r+0x6a>
 8006978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800697c:	4299      	cmp	r1, r3
 800697e:	d002      	beq.n	8006986 <__swsetup_r+0x66>
 8006980:	4630      	mov	r0, r6
 8006982:	f7ff fa41 	bl	8005e08 <_free_r>
 8006986:	2300      	movs	r3, #0
 8006988:	6363      	str	r3, [r4, #52]	; 0x34
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	2300      	movs	r3, #0
 8006994:	6063      	str	r3, [r4, #4]
 8006996:	6923      	ldr	r3, [r4, #16]
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f043 0308 	orr.w	r3, r3, #8
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	b94b      	cbnz	r3, 80069ba <__swsetup_r+0x9a>
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069b0:	d003      	beq.n	80069ba <__swsetup_r+0x9a>
 80069b2:	4621      	mov	r1, r4
 80069b4:	4630      	mov	r0, r6
 80069b6:	f000 fa09 	bl	8006dcc <__smakebuf_r>
 80069ba:	89a0      	ldrh	r0, [r4, #12]
 80069bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069c0:	f010 0301 	ands.w	r3, r0, #1
 80069c4:	d00a      	beq.n	80069dc <__swsetup_r+0xbc>
 80069c6:	2300      	movs	r3, #0
 80069c8:	60a3      	str	r3, [r4, #8]
 80069ca:	6963      	ldr	r3, [r4, #20]
 80069cc:	425b      	negs	r3, r3
 80069ce:	61a3      	str	r3, [r4, #24]
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	b943      	cbnz	r3, 80069e6 <__swsetup_r+0xc6>
 80069d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069d8:	d1ba      	bne.n	8006950 <__swsetup_r+0x30>
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	0781      	lsls	r1, r0, #30
 80069de:	bf58      	it	pl
 80069e0:	6963      	ldrpl	r3, [r4, #20]
 80069e2:	60a3      	str	r3, [r4, #8]
 80069e4:	e7f4      	b.n	80069d0 <__swsetup_r+0xb0>
 80069e6:	2000      	movs	r0, #0
 80069e8:	e7f7      	b.n	80069da <__swsetup_r+0xba>
 80069ea:	bf00      	nop
 80069ec:	20000034 	.word	0x20000034
 80069f0:	080078c8 	.word	0x080078c8
 80069f4:	080078e8 	.word	0x080078e8
 80069f8:	080078a8 	.word	0x080078a8

080069fc <abort>:
 80069fc:	b508      	push	{r3, lr}
 80069fe:	2006      	movs	r0, #6
 8006a00:	f000 faa2 	bl	8006f48 <raise>
 8006a04:	2001      	movs	r0, #1
 8006a06:	f7fb f9fb 	bl	8001e00 <_exit>
	...

08006a0c <__sflush_r>:
 8006a0c:	898a      	ldrh	r2, [r1, #12]
 8006a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a12:	4605      	mov	r5, r0
 8006a14:	0710      	lsls	r0, r2, #28
 8006a16:	460c      	mov	r4, r1
 8006a18:	d458      	bmi.n	8006acc <__sflush_r+0xc0>
 8006a1a:	684b      	ldr	r3, [r1, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dc05      	bgt.n	8006a2c <__sflush_r+0x20>
 8006a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	dc02      	bgt.n	8006a2c <__sflush_r+0x20>
 8006a26:	2000      	movs	r0, #0
 8006a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	d0f9      	beq.n	8006a26 <__sflush_r+0x1a>
 8006a32:	2300      	movs	r3, #0
 8006a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a38:	682f      	ldr	r7, [r5, #0]
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	d032      	beq.n	8006aa4 <__sflush_r+0x98>
 8006a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	075a      	lsls	r2, r3, #29
 8006a44:	d505      	bpl.n	8006a52 <__sflush_r+0x46>
 8006a46:	6863      	ldr	r3, [r4, #4]
 8006a48:	1ac0      	subs	r0, r0, r3
 8006a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a4c:	b10b      	cbz	r3, 8006a52 <__sflush_r+0x46>
 8006a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a50:	1ac0      	subs	r0, r0, r3
 8006a52:	2300      	movs	r3, #0
 8006a54:	4602      	mov	r2, r0
 8006a56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a58:	6a21      	ldr	r1, [r4, #32]
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	47b0      	blx	r6
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	d106      	bne.n	8006a72 <__sflush_r+0x66>
 8006a64:	6829      	ldr	r1, [r5, #0]
 8006a66:	291d      	cmp	r1, #29
 8006a68:	d82c      	bhi.n	8006ac4 <__sflush_r+0xb8>
 8006a6a:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <__sflush_r+0x108>)
 8006a6c:	40ca      	lsrs	r2, r1
 8006a6e:	07d6      	lsls	r6, r2, #31
 8006a70:	d528      	bpl.n	8006ac4 <__sflush_r+0xb8>
 8006a72:	2200      	movs	r2, #0
 8006a74:	6062      	str	r2, [r4, #4]
 8006a76:	04d9      	lsls	r1, r3, #19
 8006a78:	6922      	ldr	r2, [r4, #16]
 8006a7a:	6022      	str	r2, [r4, #0]
 8006a7c:	d504      	bpl.n	8006a88 <__sflush_r+0x7c>
 8006a7e:	1c42      	adds	r2, r0, #1
 8006a80:	d101      	bne.n	8006a86 <__sflush_r+0x7a>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	b903      	cbnz	r3, 8006a88 <__sflush_r+0x7c>
 8006a86:	6560      	str	r0, [r4, #84]	; 0x54
 8006a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a8a:	602f      	str	r7, [r5, #0]
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	d0ca      	beq.n	8006a26 <__sflush_r+0x1a>
 8006a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a94:	4299      	cmp	r1, r3
 8006a96:	d002      	beq.n	8006a9e <__sflush_r+0x92>
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f7ff f9b5 	bl	8005e08 <_free_r>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8006aa2:	e7c1      	b.n	8006a28 <__sflush_r+0x1c>
 8006aa4:	6a21      	ldr	r1, [r4, #32]
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b0      	blx	r6
 8006aac:	1c41      	adds	r1, r0, #1
 8006aae:	d1c7      	bne.n	8006a40 <__sflush_r+0x34>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0c4      	beq.n	8006a40 <__sflush_r+0x34>
 8006ab6:	2b1d      	cmp	r3, #29
 8006ab8:	d001      	beq.n	8006abe <__sflush_r+0xb2>
 8006aba:	2b16      	cmp	r3, #22
 8006abc:	d101      	bne.n	8006ac2 <__sflush_r+0xb6>
 8006abe:	602f      	str	r7, [r5, #0]
 8006ac0:	e7b1      	b.n	8006a26 <__sflush_r+0x1a>
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	e7ad      	b.n	8006a28 <__sflush_r+0x1c>
 8006acc:	690f      	ldr	r7, [r1, #16]
 8006ace:	2f00      	cmp	r7, #0
 8006ad0:	d0a9      	beq.n	8006a26 <__sflush_r+0x1a>
 8006ad2:	0793      	lsls	r3, r2, #30
 8006ad4:	680e      	ldr	r6, [r1, #0]
 8006ad6:	bf08      	it	eq
 8006ad8:	694b      	ldreq	r3, [r1, #20]
 8006ada:	600f      	str	r7, [r1, #0]
 8006adc:	bf18      	it	ne
 8006ade:	2300      	movne	r3, #0
 8006ae0:	eba6 0807 	sub.w	r8, r6, r7
 8006ae4:	608b      	str	r3, [r1, #8]
 8006ae6:	f1b8 0f00 	cmp.w	r8, #0
 8006aea:	dd9c      	ble.n	8006a26 <__sflush_r+0x1a>
 8006aec:	6a21      	ldr	r1, [r4, #32]
 8006aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006af0:	4643      	mov	r3, r8
 8006af2:	463a      	mov	r2, r7
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b0      	blx	r6
 8006af8:	2800      	cmp	r0, #0
 8006afa:	dc06      	bgt.n	8006b0a <__sflush_r+0xfe>
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b02:	81a3      	strh	r3, [r4, #12]
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	e78e      	b.n	8006a28 <__sflush_r+0x1c>
 8006b0a:	4407      	add	r7, r0
 8006b0c:	eba8 0800 	sub.w	r8, r8, r0
 8006b10:	e7e9      	b.n	8006ae6 <__sflush_r+0xda>
 8006b12:	bf00      	nop
 8006b14:	20400001 	.word	0x20400001

08006b18 <_fflush_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	690b      	ldr	r3, [r1, #16]
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	b913      	cbnz	r3, 8006b28 <_fflush_r+0x10>
 8006b22:	2500      	movs	r5, #0
 8006b24:	4628      	mov	r0, r5
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	b118      	cbz	r0, 8006b32 <_fflush_r+0x1a>
 8006b2a:	6983      	ldr	r3, [r0, #24]
 8006b2c:	b90b      	cbnz	r3, 8006b32 <_fflush_r+0x1a>
 8006b2e:	f000 f887 	bl	8006c40 <__sinit>
 8006b32:	4b14      	ldr	r3, [pc, #80]	; (8006b84 <_fflush_r+0x6c>)
 8006b34:	429c      	cmp	r4, r3
 8006b36:	d11b      	bne.n	8006b70 <_fflush_r+0x58>
 8006b38:	686c      	ldr	r4, [r5, #4]
 8006b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0ef      	beq.n	8006b22 <_fflush_r+0xa>
 8006b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b44:	07d0      	lsls	r0, r2, #31
 8006b46:	d404      	bmi.n	8006b52 <_fflush_r+0x3a>
 8006b48:	0599      	lsls	r1, r3, #22
 8006b4a:	d402      	bmi.n	8006b52 <_fflush_r+0x3a>
 8006b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b4e:	f000 f915 	bl	8006d7c <__retarget_lock_acquire_recursive>
 8006b52:	4628      	mov	r0, r5
 8006b54:	4621      	mov	r1, r4
 8006b56:	f7ff ff59 	bl	8006a0c <__sflush_r>
 8006b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b5c:	07da      	lsls	r2, r3, #31
 8006b5e:	4605      	mov	r5, r0
 8006b60:	d4e0      	bmi.n	8006b24 <_fflush_r+0xc>
 8006b62:	89a3      	ldrh	r3, [r4, #12]
 8006b64:	059b      	lsls	r3, r3, #22
 8006b66:	d4dd      	bmi.n	8006b24 <_fflush_r+0xc>
 8006b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b6a:	f000 f908 	bl	8006d7e <__retarget_lock_release_recursive>
 8006b6e:	e7d9      	b.n	8006b24 <_fflush_r+0xc>
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <_fflush_r+0x70>)
 8006b72:	429c      	cmp	r4, r3
 8006b74:	d101      	bne.n	8006b7a <_fflush_r+0x62>
 8006b76:	68ac      	ldr	r4, [r5, #8]
 8006b78:	e7df      	b.n	8006b3a <_fflush_r+0x22>
 8006b7a:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <_fflush_r+0x74>)
 8006b7c:	429c      	cmp	r4, r3
 8006b7e:	bf08      	it	eq
 8006b80:	68ec      	ldreq	r4, [r5, #12]
 8006b82:	e7da      	b.n	8006b3a <_fflush_r+0x22>
 8006b84:	080078c8 	.word	0x080078c8
 8006b88:	080078e8 	.word	0x080078e8
 8006b8c:	080078a8 	.word	0x080078a8

08006b90 <std>:
 8006b90:	2300      	movs	r3, #0
 8006b92:	b510      	push	{r4, lr}
 8006b94:	4604      	mov	r4, r0
 8006b96:	e9c0 3300 	strd	r3, r3, [r0]
 8006b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b9e:	6083      	str	r3, [r0, #8]
 8006ba0:	8181      	strh	r1, [r0, #12]
 8006ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ba4:	81c2      	strh	r2, [r0, #14]
 8006ba6:	6183      	str	r3, [r0, #24]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	2208      	movs	r2, #8
 8006bac:	305c      	adds	r0, #92	; 0x5c
 8006bae:	f7ff f833 	bl	8005c18 <memset>
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <std+0x38>)
 8006bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <std+0x3c>)
 8006bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <std+0x40>)
 8006bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <std+0x44>)
 8006bc0:	6224      	str	r4, [r4, #32]
 8006bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	bf00      	nop
 8006bc8:	08006f81 	.word	0x08006f81
 8006bcc:	08006fa3 	.word	0x08006fa3
 8006bd0:	08006fdb 	.word	0x08006fdb
 8006bd4:	08006fff 	.word	0x08006fff

08006bd8 <_cleanup_r>:
 8006bd8:	4901      	ldr	r1, [pc, #4]	; (8006be0 <_cleanup_r+0x8>)
 8006bda:	f000 b8af 	b.w	8006d3c <_fwalk_reent>
 8006bde:	bf00      	nop
 8006be0:	08006b19 	.word	0x08006b19

08006be4 <__sfmoreglue>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	2268      	movs	r2, #104	; 0x68
 8006be8:	1e4d      	subs	r5, r1, #1
 8006bea:	4355      	muls	r5, r2
 8006bec:	460e      	mov	r6, r1
 8006bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bf2:	f7ff f975 	bl	8005ee0 <_malloc_r>
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	b140      	cbz	r0, 8006c0c <__sfmoreglue+0x28>
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8006c00:	300c      	adds	r0, #12
 8006c02:	60a0      	str	r0, [r4, #8]
 8006c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c08:	f7ff f806 	bl	8005c18 <memset>
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}

08006c10 <__sfp_lock_acquire>:
 8006c10:	4801      	ldr	r0, [pc, #4]	; (8006c18 <__sfp_lock_acquire+0x8>)
 8006c12:	f000 b8b3 	b.w	8006d7c <__retarget_lock_acquire_recursive>
 8006c16:	bf00      	nop
 8006c18:	20000845 	.word	0x20000845

08006c1c <__sfp_lock_release>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	; (8006c24 <__sfp_lock_release+0x8>)
 8006c1e:	f000 b8ae 	b.w	8006d7e <__retarget_lock_release_recursive>
 8006c22:	bf00      	nop
 8006c24:	20000845 	.word	0x20000845

08006c28 <__sinit_lock_acquire>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__sinit_lock_acquire+0x8>)
 8006c2a:	f000 b8a7 	b.w	8006d7c <__retarget_lock_acquire_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20000846 	.word	0x20000846

08006c34 <__sinit_lock_release>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__sinit_lock_release+0x8>)
 8006c36:	f000 b8a2 	b.w	8006d7e <__retarget_lock_release_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	20000846 	.word	0x20000846

08006c40 <__sinit>:
 8006c40:	b510      	push	{r4, lr}
 8006c42:	4604      	mov	r4, r0
 8006c44:	f7ff fff0 	bl	8006c28 <__sinit_lock_acquire>
 8006c48:	69a3      	ldr	r3, [r4, #24]
 8006c4a:	b11b      	cbz	r3, 8006c54 <__sinit+0x14>
 8006c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c50:	f7ff bff0 	b.w	8006c34 <__sinit_lock_release>
 8006c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c58:	6523      	str	r3, [r4, #80]	; 0x50
 8006c5a:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <__sinit+0x68>)
 8006c5c:	4a13      	ldr	r2, [pc, #76]	; (8006cac <__sinit+0x6c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c62:	42a3      	cmp	r3, r4
 8006c64:	bf04      	itt	eq
 8006c66:	2301      	moveq	r3, #1
 8006c68:	61a3      	streq	r3, [r4, #24]
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 f820 	bl	8006cb0 <__sfp>
 8006c70:	6060      	str	r0, [r4, #4]
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 f81c 	bl	8006cb0 <__sfp>
 8006c78:	60a0      	str	r0, [r4, #8]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 f818 	bl	8006cb0 <__sfp>
 8006c80:	2200      	movs	r2, #0
 8006c82:	60e0      	str	r0, [r4, #12]
 8006c84:	2104      	movs	r1, #4
 8006c86:	6860      	ldr	r0, [r4, #4]
 8006c88:	f7ff ff82 	bl	8006b90 <std>
 8006c8c:	68a0      	ldr	r0, [r4, #8]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	2109      	movs	r1, #9
 8006c92:	f7ff ff7d 	bl	8006b90 <std>
 8006c96:	68e0      	ldr	r0, [r4, #12]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	2112      	movs	r1, #18
 8006c9c:	f7ff ff78 	bl	8006b90 <std>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	61a3      	str	r3, [r4, #24]
 8006ca4:	e7d2      	b.n	8006c4c <__sinit+0xc>
 8006ca6:	bf00      	nop
 8006ca8:	080077c0 	.word	0x080077c0
 8006cac:	08006bd9 	.word	0x08006bd9

08006cb0 <__sfp>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	f7ff ffac 	bl	8006c10 <__sfp_lock_acquire>
 8006cb8:	4b1e      	ldr	r3, [pc, #120]	; (8006d34 <__sfp+0x84>)
 8006cba:	681e      	ldr	r6, [r3, #0]
 8006cbc:	69b3      	ldr	r3, [r6, #24]
 8006cbe:	b913      	cbnz	r3, 8006cc6 <__sfp+0x16>
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f7ff ffbd 	bl	8006c40 <__sinit>
 8006cc6:	3648      	adds	r6, #72	; 0x48
 8006cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	d503      	bpl.n	8006cd8 <__sfp+0x28>
 8006cd0:	6833      	ldr	r3, [r6, #0]
 8006cd2:	b30b      	cbz	r3, 8006d18 <__sfp+0x68>
 8006cd4:	6836      	ldr	r6, [r6, #0]
 8006cd6:	e7f7      	b.n	8006cc8 <__sfp+0x18>
 8006cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cdc:	b9d5      	cbnz	r5, 8006d14 <__sfp+0x64>
 8006cde:	4b16      	ldr	r3, [pc, #88]	; (8006d38 <__sfp+0x88>)
 8006ce0:	60e3      	str	r3, [r4, #12]
 8006ce2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ce6:	6665      	str	r5, [r4, #100]	; 0x64
 8006ce8:	f000 f847 	bl	8006d7a <__retarget_lock_init_recursive>
 8006cec:	f7ff ff96 	bl	8006c1c <__sfp_lock_release>
 8006cf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cf8:	6025      	str	r5, [r4, #0]
 8006cfa:	61a5      	str	r5, [r4, #24]
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d04:	f7fe ff88 	bl	8005c18 <memset>
 8006d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d10:	4620      	mov	r0, r4
 8006d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d14:	3468      	adds	r4, #104	; 0x68
 8006d16:	e7d9      	b.n	8006ccc <__sfp+0x1c>
 8006d18:	2104      	movs	r1, #4
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	f7ff ff62 	bl	8006be4 <__sfmoreglue>
 8006d20:	4604      	mov	r4, r0
 8006d22:	6030      	str	r0, [r6, #0]
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d1d5      	bne.n	8006cd4 <__sfp+0x24>
 8006d28:	f7ff ff78 	bl	8006c1c <__sfp_lock_release>
 8006d2c:	230c      	movs	r3, #12
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	e7ee      	b.n	8006d10 <__sfp+0x60>
 8006d32:	bf00      	nop
 8006d34:	080077c0 	.word	0x080077c0
 8006d38:	ffff0001 	.word	0xffff0001

08006d3c <_fwalk_reent>:
 8006d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d40:	4606      	mov	r6, r0
 8006d42:	4688      	mov	r8, r1
 8006d44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d48:	2700      	movs	r7, #0
 8006d4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d4e:	f1b9 0901 	subs.w	r9, r9, #1
 8006d52:	d505      	bpl.n	8006d60 <_fwalk_reent+0x24>
 8006d54:	6824      	ldr	r4, [r4, #0]
 8006d56:	2c00      	cmp	r4, #0
 8006d58:	d1f7      	bne.n	8006d4a <_fwalk_reent+0xe>
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d60:	89ab      	ldrh	r3, [r5, #12]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d907      	bls.n	8006d76 <_fwalk_reent+0x3a>
 8006d66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	d003      	beq.n	8006d76 <_fwalk_reent+0x3a>
 8006d6e:	4629      	mov	r1, r5
 8006d70:	4630      	mov	r0, r6
 8006d72:	47c0      	blx	r8
 8006d74:	4307      	orrs	r7, r0
 8006d76:	3568      	adds	r5, #104	; 0x68
 8006d78:	e7e9      	b.n	8006d4e <_fwalk_reent+0x12>

08006d7a <__retarget_lock_init_recursive>:
 8006d7a:	4770      	bx	lr

08006d7c <__retarget_lock_acquire_recursive>:
 8006d7c:	4770      	bx	lr

08006d7e <__retarget_lock_release_recursive>:
 8006d7e:	4770      	bx	lr

08006d80 <__swhatbuf_r>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	460e      	mov	r6, r1
 8006d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	b096      	sub	sp, #88	; 0x58
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	461d      	mov	r5, r3
 8006d90:	da08      	bge.n	8006da4 <__swhatbuf_r+0x24>
 8006d92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	602a      	str	r2, [r5, #0]
 8006d9a:	061a      	lsls	r2, r3, #24
 8006d9c:	d410      	bmi.n	8006dc0 <__swhatbuf_r+0x40>
 8006d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da2:	e00e      	b.n	8006dc2 <__swhatbuf_r+0x42>
 8006da4:	466a      	mov	r2, sp
 8006da6:	f000 f951 	bl	800704c <_fstat_r>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	dbf1      	blt.n	8006d92 <__swhatbuf_r+0x12>
 8006dae:	9a01      	ldr	r2, [sp, #4]
 8006db0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006db4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006db8:	425a      	negs	r2, r3
 8006dba:	415a      	adcs	r2, r3
 8006dbc:	602a      	str	r2, [r5, #0]
 8006dbe:	e7ee      	b.n	8006d9e <__swhatbuf_r+0x1e>
 8006dc0:	2340      	movs	r3, #64	; 0x40
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	b016      	add	sp, #88	; 0x58
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006dcc <__smakebuf_r>:
 8006dcc:	898b      	ldrh	r3, [r1, #12]
 8006dce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dd0:	079d      	lsls	r5, r3, #30
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	d507      	bpl.n	8006de8 <__smakebuf_r+0x1c>
 8006dd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	6123      	str	r3, [r4, #16]
 8006de0:	2301      	movs	r3, #1
 8006de2:	6163      	str	r3, [r4, #20]
 8006de4:	b002      	add	sp, #8
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	ab01      	add	r3, sp, #4
 8006dea:	466a      	mov	r2, sp
 8006dec:	f7ff ffc8 	bl	8006d80 <__swhatbuf_r>
 8006df0:	9900      	ldr	r1, [sp, #0]
 8006df2:	4605      	mov	r5, r0
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7ff f873 	bl	8005ee0 <_malloc_r>
 8006dfa:	b948      	cbnz	r0, 8006e10 <__smakebuf_r+0x44>
 8006dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e00:	059a      	lsls	r2, r3, #22
 8006e02:	d4ef      	bmi.n	8006de4 <__smakebuf_r+0x18>
 8006e04:	f023 0303 	bic.w	r3, r3, #3
 8006e08:	f043 0302 	orr.w	r3, r3, #2
 8006e0c:	81a3      	strh	r3, [r4, #12]
 8006e0e:	e7e3      	b.n	8006dd8 <__smakebuf_r+0xc>
 8006e10:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <__smakebuf_r+0x7c>)
 8006e12:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	6020      	str	r0, [r4, #0]
 8006e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	9b00      	ldr	r3, [sp, #0]
 8006e20:	6163      	str	r3, [r4, #20]
 8006e22:	9b01      	ldr	r3, [sp, #4]
 8006e24:	6120      	str	r0, [r4, #16]
 8006e26:	b15b      	cbz	r3, 8006e40 <__smakebuf_r+0x74>
 8006e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f000 f91f 	bl	8007070 <_isatty_r>
 8006e32:	b128      	cbz	r0, 8006e40 <__smakebuf_r+0x74>
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	89a0      	ldrh	r0, [r4, #12]
 8006e42:	4305      	orrs	r5, r0
 8006e44:	81a5      	strh	r5, [r4, #12]
 8006e46:	e7cd      	b.n	8006de4 <__smakebuf_r+0x18>
 8006e48:	08006bd9 	.word	0x08006bd9

08006e4c <memmove>:
 8006e4c:	4288      	cmp	r0, r1
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	eb01 0402 	add.w	r4, r1, r2
 8006e54:	d902      	bls.n	8006e5c <memmove+0x10>
 8006e56:	4284      	cmp	r4, r0
 8006e58:	4623      	mov	r3, r4
 8006e5a:	d807      	bhi.n	8006e6c <memmove+0x20>
 8006e5c:	1e43      	subs	r3, r0, #1
 8006e5e:	42a1      	cmp	r1, r4
 8006e60:	d008      	beq.n	8006e74 <memmove+0x28>
 8006e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e6a:	e7f8      	b.n	8006e5e <memmove+0x12>
 8006e6c:	4402      	add	r2, r0
 8006e6e:	4601      	mov	r1, r0
 8006e70:	428a      	cmp	r2, r1
 8006e72:	d100      	bne.n	8006e76 <memmove+0x2a>
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e7e:	e7f7      	b.n	8006e70 <memmove+0x24>

08006e80 <__malloc_lock>:
 8006e80:	4801      	ldr	r0, [pc, #4]	; (8006e88 <__malloc_lock+0x8>)
 8006e82:	f7ff bf7b 	b.w	8006d7c <__retarget_lock_acquire_recursive>
 8006e86:	bf00      	nop
 8006e88:	20000844 	.word	0x20000844

08006e8c <__malloc_unlock>:
 8006e8c:	4801      	ldr	r0, [pc, #4]	; (8006e94 <__malloc_unlock+0x8>)
 8006e8e:	f7ff bf76 	b.w	8006d7e <__retarget_lock_release_recursive>
 8006e92:	bf00      	nop
 8006e94:	20000844 	.word	0x20000844

08006e98 <_realloc_r>:
 8006e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	460e      	mov	r6, r1
 8006ea2:	b921      	cbnz	r1, 8006eae <_realloc_r+0x16>
 8006ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	f7ff b819 	b.w	8005ee0 <_malloc_r>
 8006eae:	b92a      	cbnz	r2, 8006ebc <_realloc_r+0x24>
 8006eb0:	f7fe ffaa 	bl	8005e08 <_free_r>
 8006eb4:	4625      	mov	r5, r4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ebc:	f000 f8fa 	bl	80070b4 <_malloc_usable_size_r>
 8006ec0:	4284      	cmp	r4, r0
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	d802      	bhi.n	8006ecc <_realloc_r+0x34>
 8006ec6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eca:	d812      	bhi.n	8006ef2 <_realloc_r+0x5a>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4640      	mov	r0, r8
 8006ed0:	f7ff f806 	bl	8005ee0 <_malloc_r>
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d0ed      	beq.n	8006eb6 <_realloc_r+0x1e>
 8006eda:	42bc      	cmp	r4, r7
 8006edc:	4622      	mov	r2, r4
 8006ede:	4631      	mov	r1, r6
 8006ee0:	bf28      	it	cs
 8006ee2:	463a      	movcs	r2, r7
 8006ee4:	f7fe fe8a 	bl	8005bfc <memcpy>
 8006ee8:	4631      	mov	r1, r6
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7fe ff8c 	bl	8005e08 <_free_r>
 8006ef0:	e7e1      	b.n	8006eb6 <_realloc_r+0x1e>
 8006ef2:	4635      	mov	r5, r6
 8006ef4:	e7df      	b.n	8006eb6 <_realloc_r+0x1e>

08006ef6 <_raise_r>:
 8006ef6:	291f      	cmp	r1, #31
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4604      	mov	r4, r0
 8006efc:	460d      	mov	r5, r1
 8006efe:	d904      	bls.n	8006f0a <_raise_r+0x14>
 8006f00:	2316      	movs	r3, #22
 8006f02:	6003      	str	r3, [r0, #0]
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	bd38      	pop	{r3, r4, r5, pc}
 8006f0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f0c:	b112      	cbz	r2, 8006f14 <_raise_r+0x1e>
 8006f0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f12:	b94b      	cbnz	r3, 8006f28 <_raise_r+0x32>
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 f831 	bl	8006f7c <_getpid_r>
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	4601      	mov	r1, r0
 8006f1e:	4620      	mov	r0, r4
 8006f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f24:	f000 b818 	b.w	8006f58 <_kill_r>
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d00a      	beq.n	8006f42 <_raise_r+0x4c>
 8006f2c:	1c59      	adds	r1, r3, #1
 8006f2e:	d103      	bne.n	8006f38 <_raise_r+0x42>
 8006f30:	2316      	movs	r3, #22
 8006f32:	6003      	str	r3, [r0, #0]
 8006f34:	2001      	movs	r0, #1
 8006f36:	e7e7      	b.n	8006f08 <_raise_r+0x12>
 8006f38:	2400      	movs	r4, #0
 8006f3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f3e:	4628      	mov	r0, r5
 8006f40:	4798      	blx	r3
 8006f42:	2000      	movs	r0, #0
 8006f44:	e7e0      	b.n	8006f08 <_raise_r+0x12>
	...

08006f48 <raise>:
 8006f48:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <raise+0xc>)
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	f7ff bfd2 	b.w	8006ef6 <_raise_r>
 8006f52:	bf00      	nop
 8006f54:	20000034 	.word	0x20000034

08006f58 <_kill_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d07      	ldr	r5, [pc, #28]	; (8006f78 <_kill_r+0x20>)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	4611      	mov	r1, r2
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	f7fa ff3b 	bl	8001de0 <_kill>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	d102      	bne.n	8006f74 <_kill_r+0x1c>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	b103      	cbz	r3, 8006f74 <_kill_r+0x1c>
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	bd38      	pop	{r3, r4, r5, pc}
 8006f76:	bf00      	nop
 8006f78:	20000840 	.word	0x20000840

08006f7c <_getpid_r>:
 8006f7c:	f7fa bf28 	b.w	8001dd0 <_getpid>

08006f80 <__sread>:
 8006f80:	b510      	push	{r4, lr}
 8006f82:	460c      	mov	r4, r1
 8006f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f88:	f000 f89c 	bl	80070c4 <_read_r>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	bfab      	itete	ge
 8006f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f92:	89a3      	ldrhlt	r3, [r4, #12]
 8006f94:	181b      	addge	r3, r3, r0
 8006f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f9a:	bfac      	ite	ge
 8006f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f9e:	81a3      	strhlt	r3, [r4, #12]
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <__swrite>:
 8006fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	898b      	ldrh	r3, [r1, #12]
 8006faa:	05db      	lsls	r3, r3, #23
 8006fac:	4605      	mov	r5, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	d505      	bpl.n	8006fc0 <__swrite+0x1e>
 8006fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb8:	2302      	movs	r3, #2
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f000 f868 	bl	8007090 <_lseek_r>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	4632      	mov	r2, r6
 8006fce:	463b      	mov	r3, r7
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	f000 b817 	b.w	8007008 <_write_r>

08006fda <__sseek>:
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	460c      	mov	r4, r1
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 f855 	bl	8007090 <_lseek_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	bf15      	itete	ne
 8006fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ff6:	81a3      	strheq	r3, [r4, #12]
 8006ff8:	bf18      	it	ne
 8006ffa:	81a3      	strhne	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__sclose>:
 8006ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007002:	f000 b813 	b.w	800702c <_close_r>
	...

08007008 <_write_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d07      	ldr	r5, [pc, #28]	; (8007028 <_write_r+0x20>)
 800700c:	4604      	mov	r4, r0
 800700e:	4608      	mov	r0, r1
 8007010:	4611      	mov	r1, r2
 8007012:	2200      	movs	r2, #0
 8007014:	602a      	str	r2, [r5, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	f7fa ff19 	bl	8001e4e <_write>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_write_r+0x1e>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_write_r+0x1e>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	20000840 	.word	0x20000840

0800702c <_close_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d06      	ldr	r5, [pc, #24]	; (8007048 <_close_r+0x1c>)
 8007030:	2300      	movs	r3, #0
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	f7fa ff25 	bl	8001e86 <_close>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_close_r+0x1a>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_close_r+0x1a>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20000840 	.word	0x20000840

0800704c <_fstat_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4d07      	ldr	r5, [pc, #28]	; (800706c <_fstat_r+0x20>)
 8007050:	2300      	movs	r3, #0
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	f7fa ff20 	bl	8001e9e <_fstat>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	d102      	bne.n	8007068 <_fstat_r+0x1c>
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	b103      	cbz	r3, 8007068 <_fstat_r+0x1c>
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	bd38      	pop	{r3, r4, r5, pc}
 800706a:	bf00      	nop
 800706c:	20000840 	.word	0x20000840

08007070 <_isatty_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d06      	ldr	r5, [pc, #24]	; (800708c <_isatty_r+0x1c>)
 8007074:	2300      	movs	r3, #0
 8007076:	4604      	mov	r4, r0
 8007078:	4608      	mov	r0, r1
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	f7fa ff1f 	bl	8001ebe <_isatty>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_isatty_r+0x1a>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_isatty_r+0x1a>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20000840 	.word	0x20000840

08007090 <_lseek_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d07      	ldr	r5, [pc, #28]	; (80070b0 <_lseek_r+0x20>)
 8007094:	4604      	mov	r4, r0
 8007096:	4608      	mov	r0, r1
 8007098:	4611      	mov	r1, r2
 800709a:	2200      	movs	r2, #0
 800709c:	602a      	str	r2, [r5, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	f7fa ff18 	bl	8001ed4 <_lseek>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_lseek_r+0x1e>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_lseek_r+0x1e>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	20000840 	.word	0x20000840

080070b4 <_malloc_usable_size_r>:
 80070b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070b8:	1f18      	subs	r0, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	bfbc      	itt	lt
 80070be:	580b      	ldrlt	r3, [r1, r0]
 80070c0:	18c0      	addlt	r0, r0, r3
 80070c2:	4770      	bx	lr

080070c4 <_read_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4d07      	ldr	r5, [pc, #28]	; (80070e4 <_read_r+0x20>)
 80070c8:	4604      	mov	r4, r0
 80070ca:	4608      	mov	r0, r1
 80070cc:	4611      	mov	r1, r2
 80070ce:	2200      	movs	r2, #0
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f7fa fe9e 	bl	8001e14 <_read>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_read_r+0x1e>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_read_r+0x1e>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20000840 	.word	0x20000840

080070e8 <_gettimeofday>:
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <_gettimeofday+0xc>)
 80070ea:	2258      	movs	r2, #88	; 0x58
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	f04f 30ff 	mov.w	r0, #4294967295
 80070f2:	4770      	bx	lr
 80070f4:	20000840 	.word	0x20000840

080070f8 <_init>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	bf00      	nop
 80070fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fe:	bc08      	pop	{r3}
 8007100:	469e      	mov	lr, r3
 8007102:	4770      	bx	lr

08007104 <_fini>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	bf00      	nop
 8007108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710a:	bc08      	pop	{r3}
 800710c:	469e      	mov	lr, r3
 800710e:	4770      	bx	lr
