
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008350  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  080084e0  080084e0  000184e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d88  08008d88  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08008d88  08008d88  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d88  08008d88  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d8c  08008d8c  00018d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08008d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          00000868  200000d0  200000d0  000200d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000938  20000938  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001759c  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f94  00000000  00000000  00037698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  0003b630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001218  00000000  00000000  0003ca08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f174  00000000  00000000  0003dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001969e  00000000  00000000  0005cd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad5eb  00000000  00000000  00076432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00123a1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bb0  00000000  00000000  00123a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00129620  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00129644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084c8 	.word	0x080084c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	080084c8 	.word	0x080084c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStickChange>:

		*outputX = x;
		*outputY = y;
}

void ReadAnalogStickChange(ADC_HandleTypeDef* adc, i32* outputX, i32* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	//LCD_PCD8544_clear_ram(&gLcdScreen);
	HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f003 f8cd 	bl	800342c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f003 f97f 	bl	8003598 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f003 fa4a 	bl	8003734 <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002a6:	801a      	strh	r2, [r3, #0]
	uint16_t y = AD_RES;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

	// Start ADC Conversion
	HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f003 f8bc 	bl	800342c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f003 f96e 	bl	8003598 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f003 fa39 	bl	8003734 <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002c8:	801a      	strh	r2, [r3, #0]
	uint16_t x = AD_RES;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
	x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]
	y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	613b      	str	r3, [r7, #16]
	*outputX = (x - (twelveBitMax/2));
 80002e6:	8aba      	ldrh	r2, [r7, #20]
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	0fd9      	lsrs	r1, r3, #31
 80002ec:	440b      	add	r3, r1
 80002ee:	105b      	asrs	r3, r3, #1
 80002f0:	425b      	negs	r3, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	601a      	str	r2, [r3, #0]
	*outputY = (y - (twelveBitMax/2));
 80002f8:	8afa      	ldrh	r2, [r7, #22]
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	0fd9      	lsrs	r1, r3, #31
 80002fe:	440b      	add	r3, r1
 8000300:	105b      	asrs	r3, r3, #1
 8000302:	425b      	negs	r3, r3
 8000304:	441a      	add	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200000ec 	.word	0x200000ec

08000318 <EmulateDPadReturningXAndYChange>:
	}
	return res;
}


ANALOG_STICK_DPAD_RESULT EmulateDPadReturningXAndYChange(ADC_HandleTypeDef* adc, i32* rXChange, i32* rYChange){
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	607a      	str	r2, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 8000324:	f107 0210 	add.w	r2, r7, #16
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	68f8      	ldr	r0, [r7, #12]
 8000330:	f7ff ffa6 	bl	8000280 <ReadAnalogStickChange>
	*rXChange = analogXChange;
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	601a      	str	r2, [r3, #0]
	*rYChange = analogYChange;
 800033a:	693a      	ldr	r2, [r7, #16]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000340:	2300      	movs	r3, #0
 8000342:	77fb      	strb	r3, [r7, #31]
	const i32 twelveBitMax = 4096;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	61bb      	str	r3, [r7, #24]
	if(analogYChange > (twelveBitMax/3)){
 800034a:	69bb      	ldr	r3, [r7, #24]
 800034c:	4a29      	ldr	r2, [pc, #164]	; (80003f4 <EmulateDPadReturningXAndYChange+0xdc>)
 800034e:	fb82 1203 	smull	r1, r2, r2, r3
 8000352:	17db      	asrs	r3, r3, #31
 8000354:	1ad2      	subs	r2, r2, r3
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	429a      	cmp	r2, r3
 800035a:	da09      	bge.n	8000370 <EmulateDPadReturningXAndYChange+0x58>
		if(_isAnalogStickExtended == false){
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <EmulateDPadReturningXAndYChange+0xe0>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d141      	bne.n	80003e8 <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000364:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <EmulateDPadReturningXAndYChange+0xe0>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800036a:	2302      	movs	r3, #2
 800036c:	77fb      	strb	r3, [r7, #31]
 800036e:	e03b      	b.n	80003e8 <EmulateDPadReturningXAndYChange+0xd0>
		}

	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	4a20      	ldr	r2, [pc, #128]	; (80003f4 <EmulateDPadReturningXAndYChange+0xdc>)
 8000374:	fb82 1203 	smull	r1, r2, r2, r3
 8000378:	17db      	asrs	r3, r3, #31
 800037a:	1a9a      	subs	r2, r3, r2
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	429a      	cmp	r2, r3
 8000380:	dd09      	ble.n	8000396 <EmulateDPadReturningXAndYChange+0x7e>
		if(_isAnalogStickExtended == false){
 8000382:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <EmulateDPadReturningXAndYChange+0xe0>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d12e      	bne.n	80003e8 <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 800038a:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <EmulateDPadReturningXAndYChange+0xe0>)
 800038c:	2201      	movs	r2, #1
 800038e:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000390:	2301      	movs	r3, #1
 8000392:	77fb      	strb	r3, [r7, #31]
 8000394:	e028      	b.n	80003e8 <EmulateDPadReturningXAndYChange+0xd0>

		}

	}
	else if(analogXChange > (twelveBitMax/3)){
 8000396:	69bb      	ldr	r3, [r7, #24]
 8000398:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <EmulateDPadReturningXAndYChange+0xdc>)
 800039a:	fb82 1203 	smull	r1, r2, r2, r3
 800039e:	17db      	asrs	r3, r3, #31
 80003a0:	1ad2      	subs	r2, r2, r3
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	da09      	bge.n	80003bc <EmulateDPadReturningXAndYChange+0xa4>
		if(_isAnalogStickExtended == false){
 80003a8:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <EmulateDPadReturningXAndYChange+0xe0>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d11b      	bne.n	80003e8 <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <EmulateDPadReturningXAndYChange+0xe0>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 80003b6:	2304      	movs	r3, #4
 80003b8:	77fb      	strb	r3, [r7, #31]
 80003ba:	e015      	b.n	80003e8 <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <EmulateDPadReturningXAndYChange+0xdc>)
 80003c0:	fb82 1203 	smull	r1, r2, r2, r3
 80003c4:	17db      	asrs	r3, r3, #31
 80003c6:	1a9a      	subs	r2, r3, r2
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	dd09      	ble.n	80003e2 <EmulateDPadReturningXAndYChange+0xca>
		if(_isAnalogStickExtended == false){
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <EmulateDPadReturningXAndYChange+0xe0>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d108      	bne.n	80003e8 <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <EmulateDPadReturningXAndYChange+0xe0>)
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80003dc:	2303      	movs	r3, #3
 80003de:	77fb      	strb	r3, [r7, #31]
 80003e0:	e002      	b.n	80003e8 <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <EmulateDPadReturningXAndYChange+0xe0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80003e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	55555556 	.word	0x55555556
 80003f8:	200000ee 	.word	0x200000ee

080003fc <gfxClearFrameBuffer>:
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
	}
}

void gfxClearFrameBuffer(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 8000400:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000404:	2100      	movs	r1, #0
 8000406:	4802      	ldr	r0, [pc, #8]	; (8000410 <gfxClearFrameBuffer+0x14>)
 8000408:	f006 fdee 	bl	8006fe8 <memset>
	//UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	200000f0 	.word	0x200000f0

08000414 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	460a      	mov	r2, r1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	4613      	mov	r3, r2
 8000422:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	2b53      	cmp	r3, #83	; 0x53
 8000428:	d825      	bhi.n	8000476 <gfxPlotPixelInternal+0x62>
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	2b2e      	cmp	r3, #46	; 0x2e
 800042e:	d822      	bhi.n	8000476 <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 8000430:	79bb      	ldrb	r3, [r7, #6]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	b2db      	uxtb	r3, r3
 8000436:	461a      	mov	r2, r3
 8000438:	2354      	movs	r3, #84	; 0x54
 800043a:	fb03 f202 	mul.w	r2, r3, r2
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	4413      	add	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800044a:	d215      	bcs.n	8000478 <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 800044c:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <gfxPlotPixelInternal+0x70>)
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	4413      	add	r3, r2
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b25a      	sxtb	r2, r3
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	2101      	movs	r1, #1
 800045e:	fa01 f303 	lsl.w	r3, r1, r3
 8000462:	b25b      	sxtb	r3, r3
 8000464:	4313      	orrs	r3, r2
 8000466:	b25b      	sxtb	r3, r3
 8000468:	b2d9      	uxtb	r1, r3
 800046a:	4a06      	ldr	r2, [pc, #24]	; (8000484 <gfxPlotPixelInternal+0x70>)
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	4413      	add	r3, r2
 8000470:	460a      	mov	r2, r1
 8000472:	701a      	strb	r2, [r3, #0]
 8000474:	e000      	b.n	8000478 <gfxPlotPixelInternal+0x64>
		return;
 8000476:	bf00      	nop
}
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	200000f0 	.word	0x200000f0

08000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 8000488:	b490      	push	{r4, r7}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	4604      	mov	r4, r0
 8000490:	4608      	mov	r0, r1
 8000492:	4611      	mov	r1, r2
 8000494:	461a      	mov	r2, r3
 8000496:	4623      	mov	r3, r4
 8000498:	71fb      	strb	r3, [r7, #7]
 800049a:	4603      	mov	r3, r0
 800049c:	71bb      	strb	r3, [r7, #6]
 800049e:	460b      	mov	r3, r1
 80004a0:	717b      	strb	r3, [r7, #5]
 80004a2:	4613      	mov	r3, r2
 80004a4:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	e01c      	b.n	80004e6 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 80004ac:	4913      	ldr	r1, [pc, #76]	; (80004fc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4613      	mov	r3, r2
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4413      	add	r3, r2
 80004b6:	440b      	add	r3, r1
 80004b8:	2201      	movs	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 80004bc:	490f      	ldr	r1, [pc, #60]	; (80004fc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	440b      	add	r3, r1
 80004c8:	3301      	adds	r3, #1
 80004ca:	797a      	ldrb	r2, [r7, #5]
 80004cc:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 80004ce:	490b      	ldr	r1, [pc, #44]	; (80004fc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	4613      	mov	r3, r2
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	4413      	add	r3, r2
 80004d8:	440b      	add	r3, r1
 80004da:	3302      	adds	r3, #2
 80004dc:	793a      	ldrb	r2, [r7, #4]
 80004de:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	79bb      	ldrb	r3, [r7, #6]
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	ddde      	ble.n	80004ac <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc90      	pop	{r4, r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	200002e8 	.word	0x200002e8

08000500 <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b089      	sub	sp, #36	; 0x24
 8000504:	af00      	add	r7, sp, #0
 8000506:	4604      	mov	r4, r0
 8000508:	4608      	mov	r0, r1
 800050a:	4611      	mov	r1, r2
 800050c:	461a      	mov	r2, r3
 800050e:	4623      	mov	r3, r4
 8000510:	71fb      	strb	r3, [r7, #7]
 8000512:	4603      	mov	r3, r0
 8000514:	71bb      	strb	r3, [r7, #6]
 8000516:	460b      	mov	r3, r1
 8000518:	717b      	strb	r3, [r7, #5]
 800051a:	4613      	mov	r3, r2
 800051c:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800051e:	797a      	ldrb	r2, [r7, #5]
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 8000526:	793a      	ldrb	r2, [r7, #4]
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	2b00      	cmp	r3, #0
 8000536:	da05      	bge.n	8000544 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	425b      	negs	r3, r3
 8000542:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	005a      	lsls	r2, r3, #1
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e01e      	b.n	8000596 <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff56 	bl	8000414 <gfxPlotPixelInternal>
		if(D > 0){
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	2b00      	cmp	r3, #0
 800056c:	dd0b      	ble.n	8000586 <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	4413      	add	r3, r2
 8000574:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 8000576:	69fa      	ldr	r2, [r7, #28]
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	e004      	b.n	8000590 <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	429a      	cmp	r2, r3
 800059c:	dddc      	ble.n	8000558 <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3724      	adds	r7, #36	; 0x24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd90      	pop	{r4, r7, pc}

080005a8 <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4604      	mov	r4, r0
 80005b0:	4608      	mov	r0, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	461a      	mov	r2, r3
 80005b6:	4623      	mov	r3, r4
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	4603      	mov	r3, r0
 80005bc:	71bb      	strb	r3, [r7, #6]
 80005be:	460b      	mov	r3, r1
 80005c0:	717b      	strb	r3, [r7, #5]
 80005c2:	4613      	mov	r3, r2
 80005c4:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 80005c6:	797a      	ldrb	r2, [r7, #5]
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 80005ce:	793a      	ldrb	r2, [r7, #4]
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	da04      	bge.n	80005ea <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	425b      	negs	r3, r3
 80005e8:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	005a      	lsls	r2, r3, #1
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e01e      	b.n	800063c <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff03 	bl	8000414 <gfxPlotPixelInternal>
		if(D > 0){
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	2b00      	cmp	r3, #0
 8000612:	dd0b      	ble.n	800062c <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	4413      	add	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 800061c:	69fa      	ldr	r2, [r7, #28]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	4413      	add	r3, r2
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	e004      	b.n	8000636 <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	4413      	add	r3, r2
 8000634:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	793b      	ldrb	r3, [r7, #4]
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	dddc      	ble.n	80005fe <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3724      	adds	r7, #36	; 0x24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd90      	pop	{r4, r7, pc}

0800064e <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 800064e:	b590      	push	{r4, r7, lr}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	4604      	mov	r4, r0
 8000656:	4608      	mov	r0, r1
 8000658:	4611      	mov	r1, r2
 800065a:	461a      	mov	r2, r3
 800065c:	4623      	mov	r3, r4
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4603      	mov	r3, r0
 8000662:	71bb      	strb	r3, [r7, #6]
 8000664:	460b      	mov	r3, r1
 8000666:	717b      	strb	r3, [r7, #5]
 8000668:	4613      	mov	r3, r2
 800066a:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 800066c:	793a      	ldrb	r2, [r7, #4]
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000676:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800067a:	7979      	ldrb	r1, [r7, #5]
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	1acb      	subs	r3, r1, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	bfb8      	it	lt
 8000684:	425b      	neglt	r3, r3
 8000686:	429a      	cmp	r2, r3
 8000688:	da11      	bge.n	80006ae <gfxDrawLine+0x60>
		if(x0 > x1){
 800068a:	79fa      	ldrb	r2, [r7, #7]
 800068c:	797b      	ldrb	r3, [r7, #5]
 800068e:	429a      	cmp	r2, r3
 8000690:	d906      	bls.n	80006a0 <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	79fa      	ldrb	r2, [r7, #7]
 8000696:	7939      	ldrb	r1, [r7, #4]
 8000698:	7978      	ldrb	r0, [r7, #5]
 800069a:	f7ff ff31 	bl	8000500 <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 800069e:	e017      	b.n	80006d0 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 80006a0:	793b      	ldrb	r3, [r7, #4]
 80006a2:	797a      	ldrb	r2, [r7, #5]
 80006a4:	79b9      	ldrb	r1, [r7, #6]
 80006a6:	79f8      	ldrb	r0, [r7, #7]
 80006a8:	f7ff ff2a 	bl	8000500 <gfxDrawLineBresenhamLow>
}
 80006ac:	e010      	b.n	80006d0 <gfxDrawLine+0x82>
		if(y0 > y1){
 80006ae:	79ba      	ldrb	r2, [r7, #6]
 80006b0:	793b      	ldrb	r3, [r7, #4]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d906      	bls.n	80006c4 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	79fa      	ldrb	r2, [r7, #7]
 80006ba:	7939      	ldrb	r1, [r7, #4]
 80006bc:	7978      	ldrb	r0, [r7, #5]
 80006be:	f7ff ff73 	bl	80005a8 <gfxDrawLineBresenhamHigh>
}
 80006c2:	e005      	b.n	80006d0 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 80006c4:	793b      	ldrb	r3, [r7, #4]
 80006c6:	797a      	ldrb	r2, [r7, #5]
 80006c8:	79b9      	ldrb	r1, [r7, #6]
 80006ca:	79f8      	ldrb	r0, [r7, #7]
 80006cc:	f7ff ff6c 	bl	80005a8 <gfxDrawLineBresenhamHigh>
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd90      	pop	{r4, r7, pc}

080006d8 <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af02      	add	r7, sp, #8
 80006de:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80006e0:	2300      	movs	r3, #0
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006e4:	e067      	b.n	80007b6 <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 80006e6:	4938      	ldr	r1, [pc, #224]	; (80007c8 <gfxFinishDrawing+0xf0>)
 80006e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006ea:	4613      	mov	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	440b      	add	r3, r1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d15b      	bne.n	80007b0 <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 80006f8:	4933      	ldr	r1, [pc, #204]	; (80007c8 <gfxFinishDrawing+0xf0>)
 80006fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006fc:	4613      	mov	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	440b      	add	r3, r1
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 800070c:	492e      	ldr	r1, [pc, #184]	; (80007c8 <gfxFinishDrawing+0xf0>)
 800070e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	440b      	add	r3, r1
 8000718:	3302      	adds	r3, #2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 8000720:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000724:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000728:	429a      	cmp	r2, r3
 800072a:	d20b      	bcs.n	8000744 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 800072c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000730:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000734:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800073c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 8000744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000746:	2254      	movs	r2, #84	; 0x54
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 800074e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000750:	b2d9      	uxtb	r1, r3
 8000752:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000758:	4413      	add	r3, r2
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <gfxFinishDrawing+0xf4>)
 800075c:	1898      	adds	r0, r3, r2
 800075e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000762:	b29a      	uxth	r2, r3
 8000764:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000768:	b29b      	uxth	r3, r3
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	b29b      	uxth	r3, r3
 800076e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4603      	mov	r3, r0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f82a 	bl	80007d0 <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 800077c:	4912      	ldr	r1, [pc, #72]	; (80007c8 <gfxFinishDrawing+0xf0>)
 800077e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	440b      	add	r3, r1
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 800078c:	490e      	ldr	r1, [pc, #56]	; (80007c8 <gfxFinishDrawing+0xf0>)
 800078e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	440b      	add	r3, r1
 8000798:	3301      	adds	r3, #1
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 800079e:	490a      	ldr	r1, [pc, #40]	; (80007c8 <gfxFinishDrawing+0xf0>)
 80007a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007a2:	4613      	mov	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	4413      	add	r3, r2
 80007a8:	440b      	add	r3, r1
 80007aa:	3302      	adds	r3, #2
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80007b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b2:	3301      	adds	r3, #1
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b8:	2b05      	cmp	r3, #5
 80007ba:	dd94      	ble.n	80006e6 <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3730      	adds	r7, #48	; 0x30
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200002e8 	.word	0x200002e8
 80007cc:	200000f0 	.word	0x200000f0

080007d0 <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	72fb      	strb	r3, [r7, #11]
 80007de:	4613      	mov	r3, r2
 80007e0:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f001 ff92 	bl	8002714 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f001 ffaf 	bl	8002754 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 80007f6:	7dfa      	ldrb	r2, [r7, #23]
 80007f8:	7db9      	ldrb	r1, [r7, #22]
 80007fa:	2300      	movs	r3, #0
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f001 feb2 	bl	8002566 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 8000802:	7aba      	ldrb	r2, [r7, #10]
 8000804:	7afb      	ldrb	r3, [r7, #11]
 8000806:	4619      	mov	r1, r3
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f001 feff 	bl	800260c <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f001 ffb0 	bl	8002774 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f001 ff8d 	bl	8002734 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f001 ff9a 	bl	8002754 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8000820:	8c3b      	ldrh	r3, [r7, #32]
 8000822:	461a      	mov	r2, r3
 8000824:	6879      	ldr	r1, [r7, #4]
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	f001 fe6a 	bl	8002500 <LCD_PCD8544_LL_send_data>
 800082c:	4603      	mov	r3, r0
 800082e:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f001 ff9f 	bl	8002774 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8000836:	7d7b      	ldrb	r3, [r7, #21]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 8000840:	b580      	push	{r7, lr}
 8000842:	b09c      	sub	sp, #112	; 0x70
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	603a      	str	r2, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	460b      	mov	r3, r1
 800084e:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 8000850:	6838      	ldr	r0, [r7, #0]
 8000852:	f7ff fcbd 	bl	80001d0 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 800085c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000860:	4613      	mov	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4413      	add	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	461a      	mov	r2, r3
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	4413      	add	r3, r2
 800086e:	2b54      	cmp	r3, #84	; 0x54
 8000870:	dd04      	ble.n	800087c <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 8000872:	230e      	movs	r3, #14
 8000874:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2254      	movs	r2, #84	; 0x54
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f006 fbaf 	bl	8006fe8 <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 800088a:	2300      	movs	r3, #0
 800088c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 8000890:	e029      	b.n	80008e6 <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 8000892:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d029      	beq.n	80008f4 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 80008a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 80008ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	461a      	mov	r2, r3
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	1898      	adds	r0, r3, r2
 80008c2:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <gfxWriteTextLineToFrameBuffer+0xf4>)
 80008d2:	4413      	add	r3, r2
 80008d4:	2206      	movs	r2, #6
 80008d6:	4619      	mov	r1, r3
 80008d8:	f006 fb78 	bl	8006fcc <memcpy>
	for ( ; nChars<strLen; nChars++) {
 80008dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80008e0:	3301      	adds	r3, #1
 80008e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80008e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80008ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d3cf      	bcc.n	8000892 <gfxWriteTextLineToFrameBuffer+0x52>
 80008f2:	e000      	b.n	80008f6 <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 80008f4:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2254      	movs	r2, #84	; 0x54
 80008fa:	fb02 f303 	mul.w	r3, r2, r3
 80008fe:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 8000900:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000904:	b2db      	uxtb	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	0052      	lsls	r2, r2, #1
 800090a:	4413      	add	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000916:	4413      	add	r3, r2
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <gfxWriteTextLineToFrameBuffer+0xf8>)
 800091a:	4413      	add	r3, r2
 800091c:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000920:	f107 010c 	add.w	r1, r7, #12
 8000924:	4618      	mov	r0, r3
 8000926:	f006 fb51 	bl	8006fcc <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 800092a:	bf00      	nop
 800092c:	3770      	adds	r7, #112	; 0x70
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	08008530 	.word	0x08008530
 8000938:	200000f0 	.word	0x200000f0

0800093c <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4604      	mov	r4, r0
 8000944:	4608      	mov	r0, r1
 8000946:	4611      	mov	r1, r2
 8000948:	461a      	mov	r2, r3
 800094a:	4623      	mov	r3, r4
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	4603      	mov	r3, r0
 8000950:	71bb      	strb	r3, [r7, #6]
 8000952:	460b      	mov	r3, r1
 8000954:	717b      	strb	r3, [r7, #5]
 8000956:	4613      	mov	r3, r2
 8000958:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	797a      	ldrb	r2, [r7, #5]
 800095e:	79b9      	ldrb	r1, [r7, #6]
 8000960:	79f8      	ldrb	r0, [r7, #7]
 8000962:	f7ff fe74 	bl	800064e <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 8000966:	793b      	ldrb	r3, [r7, #4]
 8000968:	797a      	ldrb	r2, [r7, #5]
 800096a:	79b9      	ldrb	r1, [r7, #6]
 800096c:	7978      	ldrb	r0, [r7, #5]
 800096e:	f7ff fe6e 	bl	800064e <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 8000972:	793b      	ldrb	r3, [r7, #4]
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	7939      	ldrb	r1, [r7, #4]
 8000978:	7978      	ldrb	r0, [r7, #5]
 800097a:	f7ff fe68 	bl	800064e <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 800097e:	79bb      	ldrb	r3, [r7, #6]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	7939      	ldrb	r1, [r7, #4]
 8000984:	79f8      	ldrb	r0, [r7, #7]
 8000986:	f7ff fe62 	bl	800064e <gfxDrawLine>


}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bd90      	pop	{r4, r7, pc}
	...

08000994 <ClearUpdateRegions>:

void ClearUpdateRegions(){
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	e01c      	b.n	80009da <ClearUpdateRegions+0x46>
		gScreenRegionsToUpdate[i].updateColumnFinish = 0;
 80009a0:	4913      	ldr	r1, [pc, #76]	; (80009f0 <ClearUpdateRegions+0x5c>)
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	3302      	adds	r3, #2
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 80009b2:	490f      	ldr	r1, [pc, #60]	; (80009f0 <ClearUpdateRegions+0x5c>)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	440b      	add	r3, r1
 80009be:	3301      	adds	r3, #1
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 0;
 80009c4:	490a      	ldr	r1, [pc, #40]	; (80009f0 <ClearUpdateRegions+0x5c>)
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3301      	adds	r3, #1
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b05      	cmp	r3, #5
 80009de:	dddf      	ble.n	80009a0 <ClearUpdateRegions+0xc>


	}
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	200002e8 	.word	0x200002e8

080009f4 <ClearScreen>:


void ClearScreen(LCD_PCD8544_screen_t* scr){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	gfxClearFrameBuffer();
 80009fc:	f7ff fcfe 	bl	80003fc <gfxClearFrameBuffer>
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e01c      	b.n	8000a40 <ClearScreen+0x4c>
		gScreenRegionsToUpdate[i].updateColumnFinish = 83;
 8000a06:	4913      	ldr	r1, [pc, #76]	; (8000a54 <ClearScreen+0x60>)
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	3302      	adds	r3, #2
 8000a14:	2253      	movs	r2, #83	; 0x53
 8000a16:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000a18:	490e      	ldr	r1, [pc, #56]	; (8000a54 <ClearScreen+0x60>)
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	3301      	adds	r3, #1
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 1;
 8000a2a:	490a      	ldr	r1, [pc, #40]	; (8000a54 <ClearScreen+0x60>)
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b05      	cmp	r3, #5
 8000a44:	dddf      	ble.n	8000a06 <ClearScreen+0x12>
	}
	gfxFinishDrawing(scr);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fe46 	bl	80006d8 <gfxFinishDrawing>

}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200002e8 	.word	0x200002e8

08000a58 <gfxClearFrameBufferRow>:


void gfxClearFrameBufferRow(u8 rowIndex, u8 colStart, u8 amount){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	460b      	mov	r3, r1
 8000a64:	71bb      	strb	r3, [r7, #6]
 8000a66:	4613      	mov	r3, r2
 8000a68:	717b      	strb	r3, [r7, #5]
	u8* frameBufferStartPtr = &gFrameBuffer[(rowIndex * PIXELS_WIDTH) + colStart];
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2254      	movs	r2, #84	; 0x54
 8000a6e:	fb03 f202 	mul.w	r2, r3, r2
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <gfxClearFrameBufferRow+0x38>)
 8000a78:	4413      	add	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]

	memset(frameBufferStartPtr, 0, amount);
 8000a7c:	797b      	ldrb	r3, [r7, #5]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f006 fab0 	bl	8006fe8 <memset>

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000f0 	.word	0x200000f0

08000a94 <TetrisAccumulatedPlaytime_Load>:
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

static u32 _accumulatedPlaytime = 0x0018EE6C;

u32 TetrisAccumulatedPlaytime_Load(u32 startAddress){
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	_accumulatedPlaytime = *((u32*)startAddress);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <TetrisAccumulatedPlaytime_Load+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
	return startAddress + sizeof(u32);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3304      	adds	r3, #4
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <TetrisAccumulatedPlaytime_Save>:


u32 TetrisAccumulatedPlaytime_Save(u32 startAddress){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,startAddress, _accumulatedPlaytime);
 8000ac0:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <TetrisAccumulatedPlaytime_Save+0x28>)
 8000ac2:	6809      	ldr	r1, [r1, #0]
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	460a      	mov	r2, r1
 8000ac8:	4603      	mov	r3, r0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	2002      	movs	r0, #2
 8000ace:	f003 fb21 	bl	8004114 <HAL_FLASH_Program>
	return startAddress + sizeof(u32);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3304      	adds	r3, #4
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime>:

u32 TetrisAccumulatedPlaytime_GetAccumulatedPlaytime(){
	return _accumulatedPlaytime;
}

u32 TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime(u32 amountToIncrementBy){
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	_accumulatedPlaytime += amountToIncrementBy;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime+0x24>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <GetStateAtXY>:
static u8* _TetrisPieces[NUM_TETRIS_PIECES]  = {_ZPieceOccupiedIndicies, _SPieceOccupiedIndicies,_OPieceOccupiedIndicies,_LPieceOccupiedIndicies,_TPieceOccupiedIndicies,_JPieceOccupiedIndicies,_IPieceOccupiedIndices, };




static BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <GetStateAtXY+0x3c>)
 8000b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b24:	461a      	mov	r2, r3
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	fa42 f303 	asr.w	r3, r2, r3
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200002fc 	.word	0x200002fc

08000b4c <SetStateAtXY>:

static void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	460b      	mov	r3, r1
 8000b58:	71bb      	strb	r3, [r7, #6]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000b5e:	797b      	ldrb	r3, [r7, #5]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d111      	bne.n	8000b88 <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <SetStateAtXY+0x70>)
 8000b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2101      	movs	r1, #1
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	b291      	uxth	r1, r2
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <SetStateAtXY+0x70>)
 8000b82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 8000b86:	e012      	b.n	8000bae <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <SetStateAtXY+0x70>)
 8000b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2101      	movs	r1, #1
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	b291      	uxth	r1, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <SetStateAtXY+0x70>)
 8000baa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200002fc 	.word	0x200002fc

08000bc0 <Tetris_DrawCurentPiece>:




static void Tetris_DrawCurentPiece(){
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000bc6:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <Tetris_DrawCurentPiece+0xb8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <Tetris_DrawCurentPiece+0xb8>)
 8000bcc:	7912      	ldrb	r2, [r2, #4]
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e045      	b.n	8000c66 <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	0052      	lsls	r2, r2, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	0052      	lsls	r2, r2, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <Tetris_DrawCurentPiece+0xb8>)
 8000c04:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	0052      	lsls	r2, r2, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	79bb      	ldrb	r3, [r7, #6]
 8000c14:	4413      	add	r3, r2
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <Tetris_DrawCurentPiece+0xb8>)
 8000c1c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	0052      	lsls	r2, r2, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	797b      	ldrb	r3, [r7, #5]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db12      	blt.n	8000c60 <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <Tetris_DrawCurentPiece+0xbc>)
 8000c3c:	681c      	ldr	r4, [r3, #0]
 8000c3e:	793a      	ldrb	r2, [r7, #4]
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <Tetris_DrawCurentPiece+0xc0>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	b2d8      	uxtb	r0, r3
 8000c48:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000c4a:	793a      	ldrb	r2, [r7, #4]
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <Tetris_DrawCurentPiece+0xc0>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000c54:	3303      	adds	r3, #3
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	3303      	adds	r3, #3
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3301      	adds	r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	ddb6      	ble.n	8000bda <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000334 	.word	0x20000334
 8000c7c:	20000320 	.word	0x20000320
 8000c80:	20000004 	.word	0x20000004

08000c84 <Tetris_DrawNextPiece>:

static void Tetris_DrawNextPiece(){
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000c8a:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <Tetris_DrawNextPiece+0x94>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <Tetris_DrawNextPiece+0x94>)
 8000c90:	7912      	ldrb	r2, [r2, #4]
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	e033      	b.n	8000d06 <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	0052      	lsls	r2, r2, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	3321      	adds	r3, #33	; 0x21
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db12      	blt.n	8000d00 <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <Tetris_DrawNextPiece+0x98>)
 8000cdc:	681c      	ldr	r4, [r3, #0]
 8000cde:	793a      	ldrb	r2, [r7, #4]
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <Tetris_DrawNextPiece+0x9c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b2d8      	uxtb	r0, r3
 8000ce8:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000cea:	793a      	ldrb	r2, [r7, #4]
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <Tetris_DrawNextPiece+0x9c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000cf4:	3303      	adds	r3, #3
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	ddc8      	ble.n	8000c9e <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000033c 	.word	0x2000033c
 8000d1c:	20000320 	.word	0x20000320
 8000d20:	20000004 	.word	0x20000004

08000d24 <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000d2e:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <Tetris_DrawTetrisBoard+0xe0>)
 8000d30:	681c      	ldr	r4, [r3, #0]
 8000d32:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <Tetris_DrawTetrisBoard+0xe4>)
 8000d34:	7818      	ldrb	r0, [r3, #0]
 8000d36:	4b35      	ldr	r3, [pc, #212]	; (8000e0c <Tetris_DrawTetrisBoard+0xe8>)
 8000d38:	7819      	ldrb	r1, [r3, #0]
 8000d3a:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <Tetris_DrawTetrisBoard+0xe4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	331e      	adds	r3, #30
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <Tetris_DrawTetrisBoard+0xe8>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	332d      	adds	r3, #45	; 0x2d
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e049      	b.n	8000de6 <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	e040      	b.n	8000dda <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fed2 	bl	8000b0c <GetStateAtXY>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d132      	bne.n	8000dd4 <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	0052      	lsls	r2, r2, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <Tetris_DrawTetrisBoard+0xe4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	0052      	lsls	r2, r2, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <Tetris_DrawTetrisBoard+0xe8>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	0052      	lsls	r2, r2, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <Tetris_DrawTetrisBoard+0xe4>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	3303      	adds	r3, #3
 8000dac:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	0052      	lsls	r2, r2, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <Tetris_DrawTetrisBoard+0xe8>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	3303      	adds	r3, #3
 8000dc4:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <Tetris_DrawTetrisBoard+0xec>)
 8000dc8:	681c      	ldr	r4, [r3, #0]
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	7b7a      	ldrb	r2, [r7, #13]
 8000dce:	7bb9      	ldrb	r1, [r7, #14]
 8000dd0:	7bf8      	ldrb	r0, [r7, #15]
 8000dd2:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	2b09      	cmp	r3, #9
 8000dde:	ddbb      	ble.n	8000d58 <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3301      	adds	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2b0e      	cmp	r3, #14
 8000dea:	ddb2      	ble.n	8000d52 <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 8000dec:	f7ff fee8 	bl	8000bc0 <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d101      	bne.n	8000dfa <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8000df6:	f7ff ff45 	bl	8000c84 <Tetris_DrawNextPiece>
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000031c 	.word	0x2000031c
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	20000344 	.word	0x20000344
 8000e10:	20000324 	.word	0x20000324

08000e14 <InitNewCurrentPiece>:

static void InitNewCurrentPiece(){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <InitNewCurrentPiece+0x30>)
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <InitNewCurrentPiece+0x30>)
 8000e20:	22fe      	movs	r2, #254	; 0xfe
 8000e22:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <InitNewCurrentPiece+0x34>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4798      	blx	r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <InitNewCurrentPiece+0x38>)
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <InitNewCurrentPiece+0x30>)
 8000e36:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8000e38:	4b02      	ldr	r3, [pc, #8]	; (8000e44 <InitNewCurrentPiece+0x30>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	711a      	strb	r2, [r3, #4]
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000334 	.word	0x20000334
 8000e48:	20000328 	.word	0x20000328
 8000e4c:	20000008 	.word	0x20000008

08000e50 <InitNewNextPiece>:

static void InitNewNextPiece(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <InitNewNextPiece+0x30>)
 8000e56:	2202      	movs	r2, #2
 8000e58:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <InitNewNextPiece+0x30>)
 8000e5c:	22fe      	movs	r2, #254	; 0xfe
 8000e5e:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <InitNewNextPiece+0x34>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4798      	blx	r3
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <InitNewNextPiece+0x38>)
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <InitNewNextPiece+0x30>)
 8000e72:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <InitNewNextPiece+0x30>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	711a      	strb	r2, [r3, #4]
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000033c 	.word	0x2000033c
 8000e84:	20000328 	.word	0x20000328
 8000e88:	20000008 	.word	0x20000008

08000e8c <CopyNextPieceToCurrent>:

static void CopyNextPieceToCurrent(){
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <CopyNextPieceToCurrent+0x1c>)
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <CopyNextPieceToCurrent+0x20>)
 8000e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e98:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000334 	.word	0x20000334
 8000eac:	2000033c 	.word	0x2000033c

08000eb0 <Tetris_ResetTetrisBoard>:

void Tetris_ResetTetrisBoard(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 8000eb4:	221e      	movs	r2, #30
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <Tetris_ResetTetrisBoard+0x1c>)
 8000eba:	f006 f895 	bl	8006fe8 <memset>
	InitNewCurrentPiece();
 8000ebe:	f7ff ffa9 	bl	8000e14 <InitNewCurrentPiece>
	InitNewNextPiece();
 8000ec2:	f7ff ffc5 	bl	8000e50 <InitNewNextPiece>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200002fc 	.word	0x200002fc

08000ed0 <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 8000ede:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <Tetris_Init+0x40>)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <Tetris_Init+0x44>)
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <Tetris_Init+0x48>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <Tetris_Init+0x4c>)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <Tetris_Init+0x50>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 8000efc:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <Tetris_Init+0x54>)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	6013      	str	r3, [r2, #0]
	//Tetris_ResetTetrisBoard();
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000031c 	.word	0x2000031c
 8000f14:	20000324 	.word	0x20000324
 8000f18:	20000320 	.word	0x20000320
 8000f1c:	20000328 	.word	0x20000328
 8000f20:	2000032c 	.word	0x2000032c
 8000f24:	20000330 	.word	0x20000330

08000f28 <IsBlockAllowedToBeHere>:

static bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8000f38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	da09      	bge.n	8000f54 <IsBlockAllowedToBeHere+0x2c>
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db05      	blt.n	8000f54 <IsBlockAllowedToBeHere+0x2c>
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b09      	cmp	r3, #9
 8000f4e:	dc01      	bgt.n	8000f54 <IsBlockAllowedToBeHere+0x2c>
		return true;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e01b      	b.n	8000f8c <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	79ba      	ldrb	r2, [r7, #6]
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fdd6 	bl	8000b0c <GetStateAtXY>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <IsBlockAllowedToBeHere+0x42>
		return false;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e010      	b.n	8000f8c <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b09      	cmp	r3, #9
 8000f70:	dc03      	bgt.n	8000f7a <IsBlockAllowedToBeHere+0x52>
 8000f72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f76:	2b0e      	cmp	r3, #14
 8000f78:	dd01      	ble.n	8000f7e <IsBlockAllowedToBeHere+0x56>
		return false;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e006      	b.n	8000f8c <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	da01      	bge.n	8000f8a <IsBlockAllowedToBeHere+0x62>
		return false;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <WriteCurrentPieceToGameBoardArray>:

static bool WriteCurrentPieceToGameBoardArray(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <WriteCurrentPieceToGameBoardArray+0x88>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	; (800101c <WriteCurrentPieceToGameBoardArray+0x88>)
 8000fa0:	7912      	ldrb	r2, [r2, #4]
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e02e      	b.n	800100c <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <WriteCurrentPieceToGameBoardArray+0x88>)
 8000fc8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <WriteCurrentPieceToGameBoardArray+0x88>)
 8000fd8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 8000fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da01      	bge.n	8000ff2 <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e010      	b.n	8001014 <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 8000ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db05      	blt.n	8001006 <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 8000ffa:	793b      	ldrb	r3, [r7, #4]
 8000ffc:	78f9      	ldrb	r1, [r7, #3]
 8000ffe:	2201      	movs	r2, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fda3 	bl	8000b4c <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b03      	cmp	r3, #3
 8001010:	ddcd      	ble.n	8000fae <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000334 	.word	0x20000334

08001020 <IsMoveValid>:

static u8 IsMoveValid(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <IsMoveValid+0x84>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1e      	ldr	r2, [pc, #120]	; (80010a4 <IsMoveValid+0x84>)
 800102c:	7912      	ldrb	r2, [r2, #4]
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4413      	add	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e02b      	b.n	8001092 <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <IsMoveValid+0x84>)
 8001054:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	4413      	add	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <IsMoveValid+0x84>)
 8001064:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	4413      	add	r3, r2
 800106e:	b2db      	uxtb	r3, r3
 8001070:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 8001072:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001076:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff53 	bl	8000f28 <IsBlockAllowedToBeHere>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <IsMoveValid+0x6c>
			return 0;
 8001088:	2300      	movs	r3, #0
 800108a:	e006      	b.n	800109a <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b03      	cmp	r3, #3
 8001096:	ddd0      	ble.n	800103a <IsMoveValid+0x1a>
		}
	}
	return 1;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000334 	.word	0x20000334

080010a8 <CheckForAndClearLines>:

static u8 CheckForAndClearLines(){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 80010b2:	2300      	movs	r3, #0
 80010b4:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 80010b6:	230e      	movs	r3, #14
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	e027      	b.n	800110c <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 80010bc:	4a18      	ldr	r2, [pc, #96]	; (8001120 <CheckForAndClearLines+0x78>)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010c4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d105      	bne.n	80010d8 <CheckForAndClearLines+0x30>
			linesToClear++;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	3301      	adds	r3, #1
 80010d0:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 80010d2:	2301      	movs	r3, #1
 80010d4:	71bb      	strb	r3, [r7, #6]
 80010d6:	e001      	b.n	80010dc <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 80010d8:	2300      	movs	r3, #0
 80010da:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d011      	beq.n	8001106 <CheckForAndClearLines+0x5e>
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10e      	bne.n	8001106 <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 80010e8:	79fa      	ldrb	r2, [r7, #7]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	490c      	ldr	r1, [pc, #48]	; (8001120 <CheckForAndClearLines+0x78>)
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <CheckForAndClearLines+0x78>)
 80010f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 80010fc:	4a08      	ldr	r2, [pc, #32]	; (8001120 <CheckForAndClearLines+0x78>)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2100      	movs	r1, #0
 8001102:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3b01      	subs	r3, #1
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	dad4      	bge.n	80010bc <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 8001112:	79fb      	ldrb	r3, [r7, #7]
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	200002fc 	.word	0x200002fc

08001124 <Tetris_Rotate>:

void Tetris_Rotate(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <Tetris_Rotate+0x48>)
 800112a:	791b      	ldrb	r3, [r3, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <Tetris_Rotate+0x48>)
 8001132:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <Tetris_Rotate+0x48>)
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d902      	bls.n	8001142 <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <Tetris_Rotate+0x48>)
 800113e:	2200      	movs	r2, #0
 8001140:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 8001142:	f7ff ff6d 	bl	8001020 <IsMoveValid>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10d      	bne.n	8001168 <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <Tetris_Rotate+0x48>)
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <Tetris_Rotate+0x48>)
 8001156:	2203      	movs	r2, #3
 8001158:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 800115a:	e005      	b.n	8001168 <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <Tetris_Rotate+0x48>)
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	3b01      	subs	r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <Tetris_Rotate+0x48>)
 8001166:	711a      	strb	r2, [r3, #4]
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000334 	.word	0x20000334

08001170 <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <Tetris_MoveDown+0x80>)
 8001178:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	3301      	adds	r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	b25a      	sxtb	r2, r3
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <Tetris_MoveDown+0x80>)
 8001186:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 8001188:	f7ff ff4a 	bl	8001020 <IsMoveValid>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d128      	bne.n	80011e4 <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <Tetris_MoveDown+0x80>)
 8001194:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3b01      	subs	r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <Tetris_MoveDown+0x80>)
 80011a2:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 80011a4:	f7ff fef6 	bl	8000f94 <WriteCurrentPieceToGameBoardArray>
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 80011ac:	f7ff ff7c 	bl	80010a8 <CheckForAndClearLines>
 80011b0:	4603      	mov	r3, r0
 80011b2:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 80011b4:	f7ff fe6a 	bl	8000e8c <CopyNextPieceToCurrent>
		InitNewNextPiece();
 80011b8:	f7ff fe4a 	bl	8000e50 <InitNewNextPiece>
		if(hasGameOverOccured == true){
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d106      	bne.n	80011d0 <Tetris_MoveDown+0x60>
			_onGameOver();
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <Tetris_MoveDown+0x84>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4798      	blx	r3
			Tetris_ResetTetrisBoard();
 80011c8:	f7ff fe72 	bl	8000eb0 <Tetris_ResetTetrisBoard>
			return MoveDownResultGameOver;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e00a      	b.n	80011e6 <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <Tetris_MoveDown+0x88>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	79ba      	ldrb	r2, [r7, #6]
 80011dc:	4610      	mov	r0, r2
 80011de:	4798      	blx	r3
		}
		return Settled;
 80011e0:	2302      	movs	r3, #2
 80011e2:	e000      	b.n	80011e6 <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000334 	.word	0x20000334
 80011f4:	20000330 	.word	0x20000330
 80011f8:	2000032c 	.word	0x2000032c

080011fc <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <Tetris_MoveLeft+0x38>)
 8001202:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	3b01      	subs	r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	b25a      	sxtb	r2, r3
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <Tetris_MoveLeft+0x38>)
 8001210:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8001212:	f7ff ff05 	bl	8001020 <IsMoveValid>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d108      	bne.n	800122e <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <Tetris_MoveLeft+0x38>)
 800121e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3301      	adds	r3, #1
 8001226:	b2db      	uxtb	r3, r3
 8001228:	b25a      	sxtb	r2, r3
 800122a:	4b02      	ldr	r3, [pc, #8]	; (8001234 <Tetris_MoveLeft+0x38>)
 800122c:	715a      	strb	r2, [r3, #5]
	}
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000334 	.word	0x20000334

08001238 <Tetris_MoveRight>:

void Tetris_MoveRight(){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <Tetris_MoveRight+0x38>)
 800123e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3301      	adds	r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	b25a      	sxtb	r2, r3
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <Tetris_MoveRight+0x38>)
 800124c:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 800124e:	f7ff fee7 	bl	8001020 <IsMoveValid>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d108      	bne.n	800126a <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <Tetris_MoveRight+0x38>)
 800125a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	3b01      	subs	r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	b25a      	sxtb	r2, r3
 8001266:	4b02      	ldr	r3, [pc, #8]	; (8001270 <Tetris_MoveRight+0x38>)
 8001268:	715a      	strb	r2, [r3, #5]
	}
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000334 	.word	0x20000334

08001274 <WriteSingleHighScoreToFrameBuffer>:
static i8 _settingInitial = 0;
static u32 _blinkTimer = 0;
static bool _blinkState = true; /* True if the initial being set is currently drawn to frame buffer, false otherwise */
static bool _isAnalogStickExtended = false; /* Is the analog stick moved far enough in any one direction to count as "extended" */

static void WriteSingleHighScoreToFrameBuffer(const HighScore* highScore, u8 line){
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af02      	add	r7, sp, #8
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
	char highScoreLineBuffer[10];
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
		highScore->Initials[0],
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 8001284:	4619      	mov	r1, r3
		highScore->Initials[1],
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	785b      	ldrb	r3, [r3, #1]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 800128a:	461c      	mov	r4, r3
		highScore->Initials[2],
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	789b      	ldrb	r3, [r3, #2]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f107 000c 	add.w	r0, r7, #12
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	9200      	str	r2, [sp, #0]
 800129e:	4623      	mov	r3, r4
 80012a0:	460a      	mov	r2, r1
 80012a2:	4907      	ldr	r1, [pc, #28]	; (80012c0 <WriteSingleHighScoreToFrameBuffer+0x4c>)
 80012a4:	f005 ff14 	bl	80070d0 <siprintf>
		highScore->Score);
	gfxWriteTextLineToFrameBuffer(line,0,highScoreLineBuffer);
 80012a8:	f107 020c 	add.w	r2, r7, #12
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fac5 	bl	8000840 <gfxWriteTextLineToFrameBuffer>

}
 80012b6:	bf00      	nop
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	080084e0 	.word	0x080084e0

080012c4 <DrawHighScoresToFrameBuffer>:

static void DrawHighScoresToFrameBuffer(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	e010      	b.n	80012f2 <DrawHighScoresToFrameBuffer+0x2e>
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(i);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fd95 	bl	8001e04 <TetrisHighScores_GetHighScoreAtIndex>
 80012da:	6038      	str	r0, [r7, #0]
		WriteSingleHighScoreToFrameBuffer(highScore, i+1);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	6838      	ldr	r0, [r7, #0]
 80012e8:	f7ff ffc4 	bl	8001274 <WriteSingleHighScoreToFrameBuffer>
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d9eb      	bls.n	80012d0 <DrawHighScoresToFrameBuffer+0xc>
	}

}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <BlinkInitialBeingSet>:

static void BlinkInitialBeingSet(){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
	if(_blinkState == true){
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <BlinkInitialBeingSet+0x8c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d11e      	bne.n	8001350 <BlinkInitialBeingSet+0x4c>
		_blinkState = false;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <BlinkInitialBeingSet+0x8c>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
		u8 colStart = _settingInitial * LCD_PCD8544_CHAR_WIDTH;
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <BlinkInitialBeingSet+0x90>)
 800131a:	f993 3000 	ldrsb.w	r3, [r3]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	0052      	lsls	r2, r2, #1
 8001324:	4413      	add	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	71fb      	strb	r3, [r7, #7]
		u8 row = _newHighScoreRank + 1;
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <BlinkInitialBeingSet+0x94>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	71bb      	strb	r3, [r7, #6]
		gfxClearFrameBufferRow(row,colStart,LCD_PCD8544_CHAR_WIDTH);
 8001332:	79f9      	ldrb	r1, [r7, #7]
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	2206      	movs	r2, #6
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fb8d 	bl	8000a58 <gfxClearFrameBufferRow>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,colStart + LCD_PCD8544_CHAR_WIDTH);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	3306      	adds	r3, #6
 8001342:	b2db      	uxtb	r3, r3
 8001344:	79b9      	ldrb	r1, [r7, #6]
 8001346:	79b8      	ldrb	r0, [r7, #6]
 8001348:	2200      	movs	r2, #0
 800134a:	f7ff f89d 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
 800134e:	e017      	b.n	8001380 <BlinkInitialBeingSet+0x7c>
	}
	else{
		_blinkState = true;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <BlinkInitialBeingSet+0x8c>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
		u8 row = _newHighScoreRank + 1;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <BlinkInitialBeingSet+0x94>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <BlinkInitialBeingSet+0x94>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fd4e 	bl	8001e04 <TetrisHighScores_GetHighScoreAtIndex>
 8001368:	60b8      	str	r0, [r7, #8]
		WriteSingleHighScoreToFrameBuffer(highScore, row);
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	4619      	mov	r1, r3
 800136e:	68b8      	ldr	r0, [r7, #8]
 8001370:	f7ff ff80 	bl	8001274 <WriteSingleHighScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,LCD_PCD8544_CHAR_WIDTH*3);
 8001374:	7bf9      	ldrb	r1, [r7, #15]
 8001376:	7bf8      	ldrb	r0, [r7, #15]
 8001378:	2312      	movs	r3, #18
 800137a:	2200      	movs	r2, #0
 800137c:	f7ff f884 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	}
	gfxFinishDrawing(&gLcdScreen);
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <BlinkInitialBeingSet+0x98>)
 8001382:	f7ff f9a9 	bl	80006d8 <gfxFinishDrawing>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000024 	.word	0x20000024
 8001394:	2000034d 	.word	0x2000034d
 8001398:	2000034c 	.word	0x2000034c
 800139c:	200005e4 	.word	0x200005e4

080013a0 <TetrisEnterHighScore_Update>:

Tetris_Modes_StateTriggers TetrisEnterHighScore_Update(u32 timePassed){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 80013a8:	f107 020c 	add.w	r2, r7, #12
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	4874      	ldr	r0, [pc, #464]	; (8001584 <TetrisEnterHighScore_Update+0x1e4>)
 80013b4:	f7fe ff64 	bl	8000280 <ReadAnalogStickChange>
	HighScore* highScore;
	const i32 twelveBitMax = 4096;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	61fb      	str	r3, [r7, #28]
	if(analogYChange > (twelveBitMax/3)){
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	4a71      	ldr	r2, [pc, #452]	; (8001588 <TetrisEnterHighScore_Update+0x1e8>)
 80013c2:	fb82 1203 	smull	r1, r2, r2, r3
 80013c6:	17db      	asrs	r3, r3, #31
 80013c8:	1ad2      	subs	r2, r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	da2d      	bge.n	800142c <TetrisEnterHighScore_Update+0x8c>
		if(_isAnalogStickExtended == false){
 80013d0:	4b6e      	ldr	r3, [pc, #440]	; (800158c <TetrisEnterHighScore_Update+0x1ec>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f040 80b4 	bne.w	8001542 <TetrisEnterHighScore_Update+0x1a2>
			_isAnalogStickExtended = true;
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <TetrisEnterHighScore_Update+0x1ec>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
			highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 80013e0:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <TetrisEnterHighScore_Update+0x1f0>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fd0d 	bl	8001e04 <TetrisHighScores_GetHighScoreAtIndex>
 80013ea:	61b8      	str	r0, [r7, #24]
			highScore->Initials[_settingInitial]--;
 80013ec:	4b69      	ldr	r3, [pc, #420]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 80013ee:	f993 3000 	ldrsb.w	r3, [r3]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	5cd2      	ldrb	r2, [r2, r3]
 80013f6:	3a01      	subs	r2, #1
 80013f8:	b2d1      	uxtb	r1, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	54d1      	strb	r1, [r2, r3]
			if(highScore->Initials[_settingInitial] < 'A'){
 80013fe:	4b65      	ldr	r3, [pc, #404]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 8001400:	f993 3000 	ldrsb.w	r3, [r3]
 8001404:	461a      	mov	r2, r3
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	5c9b      	ldrb	r3, [r3, r2]
 800140a:	2b40      	cmp	r3, #64	; 0x40
 800140c:	d806      	bhi.n	800141c <TetrisEnterHighScore_Update+0x7c>
				highScore->Initials[_settingInitial] = 'Z';
 800140e:	4b61      	ldr	r3, [pc, #388]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 8001410:	f993 3000 	ldrsb.w	r3, [r3]
 8001414:	461a      	mov	r2, r3
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	215a      	movs	r1, #90	; 0x5a
 800141a:	5499      	strb	r1, [r3, r2]
			}
			_blinkState = false;
 800141c:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <TetrisEnterHighScore_Update+0x1f8>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
			_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 8001422:	4b5e      	ldr	r3, [pc, #376]	; (800159c <TetrisEnterHighScore_Update+0x1fc>)
 8001424:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e08a      	b.n	8001542 <TetrisEnterHighScore_Update+0x1a2>
		}


	}
	else if(analogYChange < -(twelveBitMax/3)){
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4a56      	ldr	r2, [pc, #344]	; (8001588 <TetrisEnterHighScore_Update+0x1e8>)
 8001430:	fb82 1203 	smull	r1, r2, r2, r3
 8001434:	17db      	asrs	r3, r3, #31
 8001436:	1a9a      	subs	r2, r3, r2
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	429a      	cmp	r2, r3
 800143c:	dd2c      	ble.n	8001498 <TetrisEnterHighScore_Update+0xf8>
		if(_isAnalogStickExtended == false){
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <TetrisEnterHighScore_Update+0x1ec>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d17d      	bne.n	8001542 <TetrisEnterHighScore_Update+0x1a2>
			_isAnalogStickExtended = true;
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <TetrisEnterHighScore_Update+0x1ec>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
			highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <TetrisEnterHighScore_Update+0x1f0>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fcd7 	bl	8001e04 <TetrisHighScores_GetHighScoreAtIndex>
 8001456:	61b8      	str	r0, [r7, #24]
			highScore->Initials[_settingInitial]++;
 8001458:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 800145a:	f993 3000 	ldrsb.w	r3, [r3]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	5cd2      	ldrb	r2, [r2, r3]
 8001462:	3201      	adds	r2, #1
 8001464:	b2d1      	uxtb	r1, r2
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	54d1      	strb	r1, [r2, r3]
			if(highScore->Initials[_settingInitial] > 'Z'){
 800146a:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 800146c:	f993 3000 	ldrsb.w	r3, [r3]
 8001470:	461a      	mov	r2, r3
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	5c9b      	ldrb	r3, [r3, r2]
 8001476:	2b5a      	cmp	r3, #90	; 0x5a
 8001478:	d906      	bls.n	8001488 <TetrisEnterHighScore_Update+0xe8>
				highScore->Initials[_settingInitial] = 'A';
 800147a:	4b46      	ldr	r3, [pc, #280]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 800147c:	f993 3000 	ldrsb.w	r3, [r3]
 8001480:	461a      	mov	r2, r3
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2141      	movs	r1, #65	; 0x41
 8001486:	5499      	strb	r1, [r3, r2]
			}
			_blinkState = false;
 8001488:	4b43      	ldr	r3, [pc, #268]	; (8001598 <TetrisEnterHighScore_Update+0x1f8>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
			_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 800148e:	4b43      	ldr	r3, [pc, #268]	; (800159c <TetrisEnterHighScore_Update+0x1fc>)
 8001490:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e054      	b.n	8001542 <TetrisEnterHighScore_Update+0x1a2>
		}



	}
	else if(analogXChange > (twelveBitMax/3)){
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <TetrisEnterHighScore_Update+0x1e8>)
 800149c:	fb82 1203 	smull	r1, r2, r2, r3
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad2      	subs	r2, r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	da1f      	bge.n	80014ea <TetrisEnterHighScore_Update+0x14a>
		if(_isAnalogStickExtended == false){
 80014aa:	4b38      	ldr	r3, [pc, #224]	; (800158c <TetrisEnterHighScore_Update+0x1ec>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d147      	bne.n	8001542 <TetrisEnterHighScore_Update+0x1a2>
			_isAnalogStickExtended = true;
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <TetrisEnterHighScore_Update+0x1ec>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
			_settingInitial++;
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 80014ba:	f993 3000 	ldrsb.w	r3, [r3]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	4b33      	ldr	r3, [pc, #204]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 80014c8:	701a      	strb	r2, [r3, #0]
			if(_settingInitial >= 3){
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 80014cc:	f993 3000 	ldrsb.w	r3, [r3]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	dd02      	ble.n	80014da <TetrisEnterHighScore_Update+0x13a>
				_settingInitial = 0;
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
			}
			_blinkState = false;
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <TetrisEnterHighScore_Update+0x1f8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
			_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80014e0:	4b2e      	ldr	r3, [pc, #184]	; (800159c <TetrisEnterHighScore_Update+0x1fc>)
 80014e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e02b      	b.n	8001542 <TetrisEnterHighScore_Update+0x1a2>
		}

	}
	else if(analogXChange < -(twelveBitMax/3)){
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4a26      	ldr	r2, [pc, #152]	; (8001588 <TetrisEnterHighScore_Update+0x1e8>)
 80014ee:	fb82 1203 	smull	r1, r2, r2, r3
 80014f2:	17db      	asrs	r3, r3, #31
 80014f4:	1a9a      	subs	r2, r3, r2
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dd1f      	ble.n	800153c <TetrisEnterHighScore_Update+0x19c>
		if(_isAnalogStickExtended == false){
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <TetrisEnterHighScore_Update+0x1ec>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d11e      	bne.n	8001542 <TetrisEnterHighScore_Update+0x1a2>
			_isAnalogStickExtended = true;
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <TetrisEnterHighScore_Update+0x1ec>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
			_settingInitial--;
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 800150c:	f993 3000 	ldrsb.w	r3, [r3]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	3b01      	subs	r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	b25a      	sxtb	r2, r3
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 800151a:	701a      	strb	r2, [r3, #0]
			if(_settingInitial < 0){
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 800151e:	f993 3000 	ldrsb.w	r3, [r3]
 8001522:	2b00      	cmp	r3, #0
 8001524:	da02      	bge.n	800152c <TetrisEnterHighScore_Update+0x18c>
				_settingInitial = 2;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <TetrisEnterHighScore_Update+0x1f4>)
 8001528:	2202      	movs	r2, #2
 800152a:	701a      	strb	r2, [r3, #0]
			}
			_blinkState = false;
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <TetrisEnterHighScore_Update+0x1f8>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
			_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <TetrisEnterHighScore_Update+0x1fc>)
 8001534:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e002      	b.n	8001542 <TetrisEnterHighScore_Update+0x1a2>
		}

	}
	else{
		_isAnalogStickExtended = false;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <TetrisEnterHighScore_Update+0x1ec>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
	}

	_blinkTimer += timePassed;
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <TetrisEnterHighScore_Update+0x1fc>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a14      	ldr	r2, [pc, #80]	; (800159c <TetrisEnterHighScore_Update+0x1fc>)
 800154c:	6013      	str	r3, [r2, #0]
	if(_blinkTimer >= ENTER_INITIAL_BLINK_PERIOD){
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <TetrisEnterHighScore_Update+0x1fc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001556:	d304      	bcc.n	8001562 <TetrisEnterHighScore_Update+0x1c2>
		_blinkTimer = 0;
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <TetrisEnterHighScore_Update+0x1fc>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
		BlinkInitialBeingSet();
 800155e:	f7ff fed1 	bl	8001304 <BlinkInitialBeingSet>
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8001562:	2101      	movs	r1, #1
 8001564:	480e      	ldr	r0, [pc, #56]	; (80015a0 <TetrisEnterHighScore_Update+0x200>)
 8001566:	f003 f91f 	bl	80047a8 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	75fb      	strb	r3, [r7, #23]
	if(buttonBState == GPIO_PIN_SET){
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <TetrisEnterHighScore_Update+0x1d8>
		return HighScoreEntered;
 8001574:	2305      	movs	r3, #5
 8001576:	e000      	b.n	800157a <TetrisEnterHighScore_Update+0x1da>
	}

	return NoChange;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000800 	.word	0x20000800
 8001588:	55555556 	.word	0x55555556
 800158c:	20000354 	.word	0x20000354
 8001590:	2000034c 	.word	0x2000034c
 8001594:	2000034d 	.word	0x2000034d
 8001598:	20000024 	.word	0x20000024
 800159c:	20000350 	.word	0x20000350
 80015a0:	48000400 	.word	0x48000400

080015a4 <TetrisEnterHighScore_OnEnter>:

void TetrisEnterHighScore_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
	_newHighScore = *((u32*)stateMachineDataPtr);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a24      	ldr	r2, [pc, #144]	; (8001648 <TetrisEnterHighScore_OnEnter+0xa4>)
 80015b6:	6013      	str	r3, [r2, #0]
	_newHighScoreRank = TetrisHighScores_AddHighScore(_newHighScore);
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <TetrisEnterHighScore_OnEnter+0xa4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fc4d 	bl	8001e5c <TetrisHighScores_AddHighScore>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <TetrisEnterHighScore_OnEnter+0xa8>)
 80015c8:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 80015ca:	f7fe ff17 	bl	80003fc <gfxClearFrameBuffer>
	ClearUpdateRegions();
 80015ce:	f7ff f9e1 	bl	8000994 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 80015d2:	2354      	movs	r3, #84	; 0x54
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2000      	movs	r0, #0
 80015da:	f7fe ff55 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 80015de:	2354      	movs	r3, #84	; 0x54
 80015e0:	2200      	movs	r2, #0
 80015e2:	2101      	movs	r1, #1
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7fe ff4f 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 80015ea:	2354      	movs	r3, #84	; 0x54
 80015ec:	2200      	movs	r2, #0
 80015ee:	2102      	movs	r1, #2
 80015f0:	2002      	movs	r0, #2
 80015f2:	f7fe ff49 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(3,3,0,84);
 80015f6:	2354      	movs	r3, #84	; 0x54
 80015f8:	2200      	movs	r2, #0
 80015fa:	2103      	movs	r1, #3
 80015fc:	2003      	movs	r0, #3
 80015fe:	f7fe ff43 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(4,4,0,84);
 8001602:	2354      	movs	r3, #84	; 0x54
 8001604:	2200      	movs	r2, #0
 8001606:	2104      	movs	r1, #4
 8001608:	2004      	movs	r0, #4
 800160a:	f7fe ff3d 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(5,5,0,84);
 800160e:	2354      	movs	r3, #84	; 0x54
 8001610:	2200      	movs	r2, #0
 8001612:	2105      	movs	r1, #5
 8001614:	2005      	movs	r0, #5
 8001616:	f7fe ff37 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	gfxWriteTextLineToFrameBuffer(0,0,"High Score");
 800161a:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <TetrisEnterHighScore_OnEnter+0xac>)
 800161c:	2100      	movs	r1, #0
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff f90e 	bl	8000840 <gfxWriteTextLineToFrameBuffer>
	DrawHighScoresToFrameBuffer();
 8001624:	f7ff fe4e 	bl	80012c4 <DrawHighScoresToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <TetrisEnterHighScore_OnEnter+0xb0>)
 800162a:	f7ff f855 	bl	80006d8 <gfxFinishDrawing>
	_settingInitial = 0;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <TetrisEnterHighScore_OnEnter+0xb4>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
	_blinkTimer = 0;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <TetrisEnterHighScore_OnEnter+0xb8>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
	_blinkState = true;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <TetrisEnterHighScore_OnEnter+0xbc>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]

}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000348 	.word	0x20000348
 800164c:	2000034c 	.word	0x2000034c
 8001650:	080084ec 	.word	0x080084ec
 8001654:	200005e4 	.word	0x200005e4
 8001658:	2000034d 	.word	0x2000034d
 800165c:	20000350 	.word	0x20000350
 8001660:	20000024 	.word	0x20000024

08001664 <TetrisEnterHighScore_OnExit>:

void TetrisEnterHighScore_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <TetrisEnterHighScore_OnExit+0x20>)
 8001672:	f7ff f9bf 	bl	80009f4 <ClearScreen>
	TetrisPersistantData_SaveAllPersistantData();
 8001676:	f000 fe37 	bl	80022e8 <TetrisPersistantData_SaveAllPersistantData>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200005e4 	.word	0x200005e4

08001688 <GetRandomNumberBetweenZeroAndSix>:
static u8 _currentLevel = 5;

//u32 FlashAddress = 0x08040000;
static void InitCurrentLevelTetrisScores();

static u8 GetRandomNumberBetweenZeroAndSix(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 800168c:	f005 fce2 	bl	8007054 <rand>
 8001690:	4603      	mov	r3, r0
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <GetRandomNumberBetweenZeroAndSix+0x28>)
 8001696:	fba3 1302 	umull	r1, r3, r3, r2
 800169a:	1ad1      	subs	r1, r2, r3
 800169c:	0849      	lsrs	r1, r1, #1
 800169e:	440b      	add	r3, r1
 80016a0:	0899      	lsrs	r1, r3, #2
 80016a2:	460b      	mov	r3, r1
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	1a5b      	subs	r3, r3, r1
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b2db      	uxtb	r3, r3
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	24924925 	.word	0x24924925

080016b4 <DrawStationaryBlock>:


static void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	4603      	mov	r3, r0
 80016c8:	71bb      	strb	r3, [r7, #6]
 80016ca:	460b      	mov	r3, r1
 80016cc:	717b      	strb	r3, [r7, #5]
 80016ce:	4613      	mov	r3, r2
 80016d0:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 80016d2:	793b      	ldrb	r3, [r7, #4]
 80016d4:	797a      	ldrb	r2, [r7, #5]
 80016d6:	79b9      	ldrb	r1, [r7, #6]
 80016d8:	79f8      	ldrb	r0, [r7, #7]
 80016da:	f7ff f92f 	bl	800093c <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 80016de:	793b      	ldrb	r3, [r7, #4]
 80016e0:	797a      	ldrb	r2, [r7, #5]
 80016e2:	79b9      	ldrb	r1, [r7, #6]
 80016e4:	79f8      	ldrb	r0, [r7, #7]
 80016e6:	f7fe ffb2 	bl	800064e <gfxDrawLine>
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
	...

080016f4 <WriteLevelToFrameBuffer>:

static void WriteLevelToFrameBuffer(){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
	u8 levelBuffer[11];
	sprintf(levelBuffer, "Lvl: %lu",_currentLevel);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <WriteLevelToFrameBuffer+0x2c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <WriteLevelToFrameBuffer+0x30>)
 8001704:	4618      	mov	r0, r3
 8001706:	f005 fce3 	bl	80070d0 <siprintf>
	gfxWriteTextLineToFrameBuffer(2,TETRIS_BOARD_RIGHT_EDGE_COL + 1,levelBuffer);
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	461a      	mov	r2, r3
 800170e:	2126      	movs	r1, #38	; 0x26
 8001710:	2002      	movs	r0, #2
 8001712:	f7ff f895 	bl	8000840 <gfxWriteTextLineToFrameBuffer>

}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000002f 	.word	0x2000002f
 8001724:	080084f8 	.word	0x080084f8

08001728 <SetLevel>:

static void SetLevel(u8 level){
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	_currentLevel = level;
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SetLevel+0x34>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	7013      	strb	r3, [r2, #0]
	_newLevelToDisplay = true;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <SetLevel+0x38>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
	_autoMoveInterval = _levelsMoveIntervals[_currentLevel];
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <SetLevel+0x34>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <SetLevel+0x3c>)
 8001746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174a:	4a07      	ldr	r2, [pc, #28]	; (8001768 <SetLevel+0x40>)
 800174c:	6013      	str	r3, [r2, #0]
	InitCurrentLevelTetrisScores();
 800174e:	f000 f963 	bl	8001a18 <InitCurrentLevelTetrisScores>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000002f 	.word	0x2000002f
 8001760:	2000002d 	.word	0x2000002d
 8001764:	08008bac 	.word	0x08008bac
 8001768:	20000028 	.word	0x20000028

0800176c <OnLinesCleared>:

static void OnLinesCleared(u8 numLinesCleared){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	b29a      	uxth	r2, r3
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <OnLinesCleared+0xa4>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <OnLinesCleared+0xa4>)
 8001784:	801a      	strh	r2, [r3, #0]
	if(_linesCleared >= TETRIS_LINES_PER_LEVEL_UP){
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <OnLinesCleared+0xa4>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	2b09      	cmp	r3, #9
 800178c:	d909      	bls.n	80017a2 <OnLinesCleared+0x36>
		_linesCleared = 0;
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <OnLinesCleared+0xa4>)
 8001790:	2200      	movs	r2, #0
 8001792:	801a      	strh	r2, [r3, #0]
		SetLevel(_currentLevel + 1);
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <OnLinesCleared+0xa8>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ffc3 	bl	8001728 <SetLevel>
	}
	switch(numLinesCleared){
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d82a      	bhi.n	8001800 <OnLinesCleared+0x94>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <OnLinesCleared+0x44>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017d1 	.word	0x080017d1
 80017b8:	080017e1 	.word	0x080017e1
 80017bc:	080017f1 	.word	0x080017f1
	case 1:
		_score += _currentLevelTetrisScores[0];
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <OnLinesCleared+0xac>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <OnLinesCleared+0xb0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <OnLinesCleared+0xb0>)
 80017cc:	6013      	str	r3, [r2, #0]
		break;
 80017ce:	e017      	b.n	8001800 <OnLinesCleared+0x94>
	case 2:
		_score += _currentLevelTetrisScores[1];
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <OnLinesCleared+0xac>)
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <OnLinesCleared+0xb0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <OnLinesCleared+0xb0>)
 80017dc:	6013      	str	r3, [r2, #0]
		break;
 80017de:	e00f      	b.n	8001800 <OnLinesCleared+0x94>
	case 3:
		_score += _currentLevelTetrisScores[2];
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <OnLinesCleared+0xac>)
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <OnLinesCleared+0xb0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <OnLinesCleared+0xb0>)
 80017ec:	6013      	str	r3, [r2, #0]
		break;
 80017ee:	e007      	b.n	8001800 <OnLinesCleared+0x94>
	case 4:
		_score += _currentLevelTetrisScores[3];
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <OnLinesCleared+0xac>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <OnLinesCleared+0xb0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <OnLinesCleared+0xb0>)
 80017fc:	6013      	str	r3, [r2, #0]
		break;
 80017fe:	bf00      	nop
	}
	_newScoreToDisplay = true;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <OnLinesCleared+0xb4>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000035e 	.word	0x2000035e
 8001814:	2000002f 	.word	0x2000002f
 8001818:	20000368 	.word	0x20000368
 800181c:	20000360 	.word	0x20000360
 8001820:	2000002c 	.word	0x2000002c

08001824 <OnGameOver>:

static void OnGameOver(){
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	//_linesCleared = 0;
	//_score = 0;
	//_newScoreToDisplay = true;
	//SetLevel(TETRIS_START_LEVEL);
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <IncrementTetrisTimer>:

static void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <IncrementTetrisTimer+0x44>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <IncrementTetrisTimer+0x44>)
 800184a:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <IncrementTetrisTimer+0x44>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <IncrementTetrisTimer+0x48>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d90b      	bls.n	8001870 <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d105      	bne.n	800186a <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 800185e:	f7ff fc87 	bl	8001170 <Tetris_MoveDown>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <IncrementTetrisTimer+0x4c>)
 8001868:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 800186a:	4b03      	ldr	r3, [pc, #12]	; (8001878 <IncrementTetrisTimer+0x44>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
	}
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000358 	.word	0x20000358
 800187c:	20000028 	.word	0x20000028
 8001880:	2000002e 	.word	0x2000002e

08001884 <WriteScoreToFrameBuffer>:

static void WriteScoreToFrameBuffer(){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%lu",_score);
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <WriteScoreToFrameBuffer+0x28>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	463b      	mov	r3, r7
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <WriteScoreToFrameBuffer+0x2c>)
 8001892:	4618      	mov	r0, r3
 8001894:	f005 fc1c 	bl	80070d0 <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 8001898:	463b      	mov	r3, r7
 800189a:	461a      	mov	r2, r3
 800189c:	2126      	movs	r1, #38	; 0x26
 800189e:	2001      	movs	r0, #1
 80018a0:	f7fe ffce 	bl	8000840 <gfxWriteTextLineToFrameBuffer>

}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000360 	.word	0x20000360
 80018b0:	08008504 	.word	0x08008504

080018b4 <UpdateTetrisGame>:


static void UpdateTetrisGame(u32 timePassed){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 80018bc:	f107 0208 	add.w	r2, r7, #8
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	4619      	mov	r1, r3
 80018c6:	4826      	ldr	r0, [pc, #152]	; (8001960 <UpdateTetrisGame+0xac>)
 80018c8:	f7fe fcda 	bl	8000280 <ReadAnalogStickChange>

	bool movingDown = true;
 80018cc:	2301      	movs	r3, #1
 80018ce:	75fb      	strb	r3, [r7, #23]

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80018d0:	2101      	movs	r1, #1
 80018d2:	4824      	ldr	r0, [pc, #144]	; (8001964 <UpdateTetrisGame+0xb0>)
 80018d4:	f002 ff68 	bl	80047a8 <HAL_GPIO_ReadPin>
 80018d8:	4603      	mov	r3, r0
 80018da:	75bb      	strb	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80018dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e0:	613b      	str	r3, [r7, #16]
	if(analogXChange > (twelveBitMax/3)){
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4a20      	ldr	r2, [pc, #128]	; (8001968 <UpdateTetrisGame+0xb4>)
 80018e6:	fb82 1203 	smull	r1, r2, r2, r3
 80018ea:	17db      	asrs	r3, r3, #31
 80018ec:	1ad2      	subs	r2, r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	da02      	bge.n	80018fa <UpdateTetrisGame+0x46>
		Tetris_MoveRight();
 80018f4:	f7ff fca0 	bl	8001238 <Tetris_MoveRight>
 80018f8:	e01c      	b.n	8001934 <UpdateTetrisGame+0x80>
	}
	else if(analogXChange < -(twelveBitMax/3)){
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <UpdateTetrisGame+0xb4>)
 80018fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001902:	17db      	asrs	r3, r3, #31
 8001904:	1a9a      	subs	r2, r3, r2
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	dd02      	ble.n	8001912 <UpdateTetrisGame+0x5e>
		Tetris_MoveLeft();
 800190c:	f7ff fc76 	bl	80011fc <Tetris_MoveLeft>
 8001910:	e010      	b.n	8001934 <UpdateTetrisGame+0x80>
	}
	else if(analogYChange > (twelveBitMax/3)){
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <UpdateTetrisGame+0xb4>)
 8001916:	fb82 1203 	smull	r1, r2, r2, r3
 800191a:	17db      	asrs	r3, r3, #31
 800191c:	1ad2      	subs	r2, r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	429a      	cmp	r2, r3
 8001922:	da07      	bge.n	8001934 <UpdateTetrisGame+0x80>
		_movingDownResult = Tetris_MoveDown();
 8001924:	f7ff fc24 	bl	8001170 <Tetris_MoveDown>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <UpdateTetrisGame+0xb8>)
 800192e:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 8001930:	2300      	movs	r3, #0
 8001932:	75fb      	strb	r3, [r7, #23]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 8001934:	7dbb      	ldrb	r3, [r7, #22]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d105      	bne.n	8001946 <UpdateTetrisGame+0x92>
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <UpdateTetrisGame+0xbc>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <UpdateTetrisGame+0x92>
		Tetris_Rotate();
 8001942:	f7ff fbef 	bl	8001124 <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <UpdateTetrisGame+0xbc>)
 8001948:	7dbb      	ldrb	r3, [r7, #22]
 800194a:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff6f 	bl	8001834 <IncrementTetrisTimer>

}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000800 	.word	0x20000800
 8001964:	48000400 	.word	0x48000400
 8001968:	55555556 	.word	0x55555556
 800196c:	2000002e 	.word	0x2000002e
 8001970:	2000035c 	.word	0x2000035c

08001974 <DrawTetrisGame>:

static void DrawTetrisGame(){
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	gfxClearFrameBuffer();
 8001978:	f7fe fd40 	bl	80003fc <gfxClearFrameBuffer>

	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <DrawTetrisGame+0x94>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d003      	beq.n	800198c <DrawTetrisGame+0x18>
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <DrawTetrisGame+0x94>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d101      	bne.n	8001990 <DrawTetrisGame+0x1c>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <DrawTetrisGame+0x1e>
 8001990:	2300      	movs	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f9c5 	bl	8000d24 <Tetris_DrawTetrisBoard>

	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 800199a:	2325      	movs	r3, #37	; 0x25
 800199c:	2204      	movs	r2, #4
 800199e:	2105      	movs	r1, #5
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7fe fd71 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <DrawTetrisGame+0x94>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d003      	beq.n	80019b6 <DrawTetrisGame+0x42>
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <DrawTetrisGame+0x94>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d105      	bne.n	80019c2 <DrawTetrisGame+0x4e>
		/* update the area where the next block is shown */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 80019b6:	2335      	movs	r3, #53	; 0x35
 80019b8:	2200      	movs	r2, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	2000      	movs	r0, #0
 80019be:	f7fe fd63 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay == true){
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <DrawTetrisGame+0x98>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10a      	bne.n	80019e0 <DrawTetrisGame+0x6c>
		/* Update the new area of the screen with the new score.
		 * TODO: get actual length of score string instead of using 84 */
		WriteScoreToFrameBuffer();
 80019ca:	f7ff ff5b 	bl	8001884 <WriteScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 80019ce:	2354      	movs	r3, #84	; 0x54
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7fe fd57 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <DrawTetrisGame+0x98>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
	}
	if(_newLevelToDisplay){
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <DrawTetrisGame+0x9c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <DrawTetrisGame+0x8a>
		WriteLevelToFrameBuffer();
 80019e8:	f7ff fe84 	bl	80016f4 <WriteLevelToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 80019ec:	2354      	movs	r3, #84	; 0x54
 80019ee:	2200      	movs	r2, #0
 80019f0:	2102      	movs	r1, #2
 80019f2:	2002      	movs	r0, #2
 80019f4:	f7fe fd48 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newLevelToDisplay = false;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <DrawTetrisGame+0x9c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <DrawTetrisGame+0xa0>)
 8001a00:	f7fe fe6a 	bl	80006d8 <gfxFinishDrawing>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000002e 	.word	0x2000002e
 8001a0c:	2000002c 	.word	0x2000002c
 8001a10:	2000002d 	.word	0x2000002d
 8001a14:	200005e4 	.word	0x200005e4

08001a18 <InitCurrentLevelTetrisScores>:

static void InitCurrentLevelTetrisScores(){
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	/* score setting function derived from information from https://tetris.fandom.com/wiki/Scoring */

	if(_currentLevel == 0){
 8001a1c:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <InitCurrentLevelTetrisScores+0x104>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10e      	bne.n	8001a42 <InitCurrentLevelTetrisScores+0x2a>
		_currentLevelTetrisScores[0] = 40;
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a26:	2228      	movs	r2, #40	; 0x28
 8001a28:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100;
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a2c:	2264      	movs	r2, #100	; 0x64
 8001a2e:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300;
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a36:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200;
 8001a38:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a3a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001a3e:	60da      	str	r2, [r3, #12]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);

	}
}
 8001a40:	e066      	b.n	8001b10 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 1){
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <InitCurrentLevelTetrisScores+0x104>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d10e      	bne.n	8001a68 <InitCurrentLevelTetrisScores+0x50>
		_currentLevelTetrisScores[0] = 80;
 8001a4a:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a4c:	2250      	movs	r2, #80	; 0x50
 8001a4e:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 200;
 8001a50:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a52:	22c8      	movs	r2, #200	; 0xc8
 8001a54:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 600;
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a58:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001a5c:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 2400;
 8001a5e:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a60:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001a64:	60da      	str	r2, [r3, #12]
}
 8001a66:	e053      	b.n	8001b10 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel >=2 && _currentLevel < 9){
 8001a68:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <InitCurrentLevelTetrisScores+0x104>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d913      	bls.n	8001a98 <InitCurrentLevelTetrisScores+0x80>
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <InitCurrentLevelTetrisScores+0x104>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d80f      	bhi.n	8001a98 <InitCurrentLevelTetrisScores+0x80>
		_currentLevelTetrisScores[0] = 120;
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a7a:	2278      	movs	r2, #120	; 0x78
 8001a7c:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 300;
 8001a7e:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a80:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a84:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 900;
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a88:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001a8c:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 3600;
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001a90:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001a94:	60da      	str	r2, [r3, #12]
}
 8001a96:	e03b      	b.n	8001b10 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 9){
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <InitCurrentLevelTetrisScores+0x104>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	d110      	bne.n	8001ac2 <InitCurrentLevelTetrisScores+0xaa>
		_currentLevelTetrisScores[0] = 400;
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001aa2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001aa6:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 1000;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aae:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 3000;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001ab2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ab6:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 12000;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001aba:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001abe:	60da      	str	r2, [r3, #12]
}
 8001ac0:	e026      	b.n	8001b10 <InitCurrentLevelTetrisScores+0xf8>
		_currentLevelTetrisScores[0] = 40 * (_currentLevel + 1);
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <InitCurrentLevelTetrisScores+0x104>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001ad4:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <InitCurrentLevelTetrisScores+0x104>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	2264      	movs	r2, #100	; 0x64
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001ae6:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <InitCurrentLevelTetrisScores+0x104>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001afa:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <InitCurrentLevelTetrisScores+0x104>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <InitCurrentLevelTetrisScores+0x108>)
 8001b0e:	60da      	str	r2, [r3, #12]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000002f 	.word	0x2000002f
 8001b20:	20000368 	.word	0x20000368

08001b24 <CheckForHighScore>:


Tetris_Modes_StateTriggers CheckForHighScore(){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	if(TetrisHighScores_IsNewHighScore(_score) == true){
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <CheckForHighScore+0x24>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f949 	bl	8001dc4 <TetrisHighScores_IsNewHighScore>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d104      	bne.n	8001b42 <CheckForHighScore+0x1e>
		TetrisMain_SetStateMachineDataPointer(&_score);
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <CheckForHighScore+0x24>)
 8001b3a:	f000 fac7 	bl	80020cc <TetrisMain_SetStateMachineDataPointer>
		return GameOverNewHighScore;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e000      	b.n	8001b44 <CheckForHighScore+0x20>
	}
	else{
		return GameOver;
 8001b42:	2302      	movs	r3, #2
	}
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000360 	.word	0x20000360

08001b4c <TetrisGame_Update>:


Tetris_Modes_StateTriggers TetrisGame_Update(u32 timePassed){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime(timePassed);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7fe ffc5 	bl	8000ae4 <TetrisAccumulatedPlaytime_IncrementAccumulatedPlaytime>
	UpdateTetrisGame(timePassed);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff feaa 	bl	80018b4 <UpdateTetrisGame>
	DrawTetrisGame();
 8001b60:	f7ff ff08 	bl	8001974 <DrawTetrisGame>
	if(_movingDownResult == MoveDownResultGameOver){
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <TetrisGame_Update+0x34>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d103      	bne.n	8001b74 <TetrisGame_Update+0x28>
		return CheckForHighScore();
 8001b6c:	f7ff ffda 	bl	8001b24 <CheckForHighScore>
 8001b70:	4603      	mov	r3, r0
 8001b72:	e000      	b.n	8001b76 <TetrisGame_Update+0x2a>
	}
	return NoChange;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000002e 	.word	0x2000002e

08001b84 <TetrisGame_Init>:



void TetrisGame_Init(){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af02      	add	r7, sp, #8
	Tetris_Init(
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <TetrisGame_Init+0x20>)
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <TetrisGame_Init+0x24>)
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <TetrisGame_Init+0x28>)
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <TetrisGame_Init+0x2c>)
 8001b96:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <TetrisGame_Init+0x30>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <TetrisGame_Init+0x2c>)
 8001b9a:	f7ff f999 	bl	8000ed0 <Tetris_Init>
			&OnLinesCleared,
			&OnGameOver);
	//TetrisHighScores_Init();
	//srand(TetrisAccumulatedPlaytime_GetAccumulatedPlaytime());

}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	08001825 	.word	0x08001825
 8001ba8:	0800176d 	.word	0x0800176d
 8001bac:	08001689 	.word	0x08001689
 8001bb0:	0800093d 	.word	0x0800093d
 8001bb4:	080016b5 	.word	0x080016b5

08001bb8 <TetrisGame_OnEnter>:

void TetrisGame_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
	if(previousState == LevelSelect || previousState == NoState){
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <TetrisGame_OnEnter+0x18>
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d103      	bne.n	8001bd8 <TetrisGame_OnEnter+0x20>
		_startLevel = *((u8*)stateMachineDataPtr);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <TetrisGame_OnEnter+0x54>)
 8001bd6:	701a      	strb	r2, [r3, #0]
	}
	SetLevel(_startLevel);
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <TetrisGame_OnEnter+0x54>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fda3 	bl	8001728 <SetLevel>
	Tetris_ResetTetrisBoard();
 8001be2:	f7ff f965 	bl	8000eb0 <Tetris_ResetTetrisBoard>
	InitCurrentLevelTetrisScores();
 8001be6:	f7ff ff17 	bl	8001a18 <InitCurrentLevelTetrisScores>
	_movingDownResult = Settled;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <TetrisGame_OnEnter+0x58>)
 8001bec:	2202      	movs	r2, #2
 8001bee:	701a      	strb	r2, [r3, #0]
	_score = 0;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <TetrisGame_OnEnter+0x5c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
	_newScoreToDisplay = true;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <TetrisGame_OnEnter+0x60>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
	_newLevelToDisplay = true;
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <TetrisGame_OnEnter+0x64>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000364 	.word	0x20000364
 8001c10:	2000002e 	.word	0x2000002e
 8001c14:	20000360 	.word	0x20000360
 8001c18:	2000002c 	.word	0x2000002c
 8001c1c:	2000002d 	.word	0x2000002d

08001c20 <TetrisGame_OnExit>:



void TetrisGame_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <TetrisGame_OnExit+0x1c>)
 8001c2e:	f7fe fee1 	bl	80009f4 <ClearScreen>
	//TetrisPersistantData_SaveAllPersistantData();
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200005e4 	.word	0x200005e4

08001c40 <SetHighScoreCellSize>:
		{{'c','p','u'}, 5000},
		{{'c','p','u'}, 2500},
};
static u32 _highScoreCellSize = 0;

static void SetHighScoreCellSize(){
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
	u32 size = sizeof(HighScore);
 8001c46:	2308      	movs	r3, #8
 8001c48:	607b      	str	r3, [r7, #4]
	_highScoreCellSize = size;
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <SetHighScoreCellSize+0x38>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6013      	str	r3, [r2, #0]

	while(_highScoreCellSize % 4 != 0)
 8001c50:	e004      	b.n	8001c5c <SetHighScoreCellSize+0x1c>
		_highScoreCellSize++;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <SetHighScoreCellSize+0x38>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <SetHighScoreCellSize+0x38>)
 8001c5a:	6013      	str	r3, [r2, #0]
	while(_highScoreCellSize % 4 != 0)
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <SetHighScoreCellSize+0x38>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f4      	bne.n	8001c52 <SetHighScoreCellSize+0x12>

}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000378 	.word	0x20000378

08001c7c <LoadHighScores>:
static void LoadHighScores(HighScore* output, u32 startAddress){
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	e026      	b.n	8001cda <LoadHighScores+0x5e>
		HighScore* hs = startAddress + (i * _highScoreCellSize);
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <LoadHighScores+0x74>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	fb03 f202 	mul.w	r2, r3, r2
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
		output[i].Initials[0] = hs->Initials[0];
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	7812      	ldrb	r2, [r2, #0]
 8001ca8:	701a      	strb	r2, [r3, #0]
		output[i].Initials[1] = hs->Initials[1];
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	7852      	ldrb	r2, [r2, #1]
 8001cb6:	705a      	strb	r2, [r3, #1]
		output[i].Initials[2] = hs->Initials[2];
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	7892      	ldrb	r2, [r2, #2]
 8001cc4:	709a      	strb	r2, [r3, #2]
		output[i].Score = hs->Score;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	6852      	ldr	r2, [r2, #4]
 8001cd2:	605a      	str	r2, [r3, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d9d5      	bls.n	8001c8c <LoadHighScores+0x10>
	}

}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000378 	.word	0x20000378

08001cf4 <SaveSingleHighScore>:

static void SaveSingleHighScore(HighScore* input, u32 address){
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e016      	b.n	8001d32 <SaveSingleHighScore+0x3e>
		u32 wordToWrite = *((u32*)input + i);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address + (i*4), wordToWrite);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	461a      	mov	r2, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	18d1      	adds	r1, r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	461c      	mov	r4, r3
 8001d20:	4615      	mov	r5, r2
 8001d22:	4622      	mov	r2, r4
 8001d24:	462b      	mov	r3, r5
 8001d26:	2002      	movs	r0, #2
 8001d28:	f002 f9f4 	bl	8004114 <HAL_FLASH_Program>
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <SaveSingleHighScore+0x54>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	089a      	lsrs	r2, r3, #2
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d8e2      	bhi.n	8001d04 <SaveSingleHighScore+0x10>
	}
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdb0      	pop	{r4, r5, r7, pc}
 8001d48:	20000378 	.word	0x20000378

08001d4c <SaveHighScores>:

static void SaveHighScores(HighScore* input, u32 addressToWrite){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	e00f      	b.n	8001d7c <SaveHighScores+0x30>
		SaveSingleHighScore(&input[i], addressToWrite);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ffc4 	bl	8001cf4 <SaveSingleHighScore>
		addressToWrite += _highScoreCellSize;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <SaveHighScores+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	603b      	str	r3, [r7, #0]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d9ec      	bls.n	8001d5c <SaveHighScores+0x10>
	}

}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000378 	.word	0x20000378

08001d90 <TetrisHighScores_Load>:

u32 TetrisHighScores_Load(u32 startAddress){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
				{{'J','i','m'}, 25000},
				{{'J','i','m'}, 5000},
		};
	SaveHighScores(hs);
	*/
	SetHighScoreCellSize();
 8001d98:	f7ff ff52 	bl	8001c40 <SetHighScoreCellSize>
	LoadHighScores(_highScores, startAddress);
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <TetrisHighScores_Load+0x2c>)
 8001da0:	f7ff ff6c 	bl	8001c7c <LoadHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <TetrisHighScores_Load+0x30>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	441a      	add	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000030 	.word	0x20000030
 8001dc0:	20000378 	.word	0x20000378

08001dc4 <TetrisHighScores_IsNewHighScore>:


bool TetrisHighScores_IsNewHighScore(u32 potentialHighScore){
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e00c      	b.n	8001dec <TetrisHighScores_IsNewHighScore+0x28>
		if(potentialHighScore > _highScores[i].Score){
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <TetrisHighScores_IsNewHighScore+0x3c>)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d901      	bls.n	8001de6 <TetrisHighScores_IsNewHighScore+0x22>
			return true;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e006      	b.n	8001df4 <TetrisHighScores_IsNewHighScore+0x30>
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3301      	adds	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d9ef      	bls.n	8001dd2 <TetrisHighScores_IsNewHighScore+0xe>
		}
	}
	return false;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20000030 	.word	0x20000030

08001e04 <TetrisHighScores_GetHighScoreAtIndex>:

HighScore* TetrisHighScores_GetHighScoreAtIndex(u8 atIndex){
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
	return &_highScores[atIndex];
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <TetrisHighScores_GetHighScoreAtIndex+0x20>)
 8001e14:	4413      	add	r3, r2
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000030 	.word	0x20000030

08001e28 <TetrisHighScores_Save>:


u32 TetrisHighScores_Save(u32 startAddress){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	SetHighScoreCellSize();
 8001e30:	f7ff ff06 	bl	8001c40 <SetHighScoreCellSize>

	SaveHighScores(_highScores, startAddress);
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4807      	ldr	r0, [pc, #28]	; (8001e54 <TetrisHighScores_Save+0x2c>)
 8001e38:	f7ff ff88 	bl	8001d4c <SaveHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <TetrisHighScores_Save+0x30>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	441a      	add	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000030 	.word	0x20000030
 8001e58:	20000378 	.word	0x20000378

08001e5c <TetrisHighScores_AddHighScore>:

u8 TetrisHighScores_AddHighScore(u32 highScore){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

	u8 rval = 255;
 8001e64:	23ff      	movs	r3, #255	; 0xff
 8001e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HighScore cachedHighScore;
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	e046      	b.n	8001efe <TetrisHighScores_AddHighScore+0xa2>
		HighScore* thisHighScore = &_highScores[i];
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <TetrisHighScores_AddHighScore+0xb8>)
 8001e76:	4413      	add	r3, r2
 8001e78:	61fb      	str	r3, [r7, #28]

		if(highScore > thisHighScore->Score && rval == 255){
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d919      	bls.n	8001eb8 <TetrisHighScores_AddHighScore+0x5c>
 8001e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e88:	2bff      	cmp	r3, #255	; 0xff
 8001e8a:	d115      	bne.n	8001eb8 <TetrisHighScores_AddHighScore+0x5c>
			cachedHighScore = *thisHighScore;
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e96:	e883 0003 	stmia.w	r3, {r0, r1}
			rval = i;
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			thisHighScore->Score = highScore;
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = 'A';
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	2241      	movs	r2, #65	; 0x41
 8001eaa:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = 'A';
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	2241      	movs	r2, #65	; 0x41
 8001eb0:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = 'A';
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	2241      	movs	r2, #65	; 0x41
 8001eb6:	709a      	strb	r2, [r3, #2]

		}
		if(i > rval){
 8001eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d91a      	bls.n	8001ef8 <TetrisHighScores_AddHighScore+0x9c>
			HighScore cachedHighScore2 = *thisHighScore;
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ecc:	e883 0003 	stmia.w	r3, {r0, r1}
			thisHighScore->Score = cachedHighScore.Score;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = cachedHighScore.Initials[0];
 8001ed6:	7d3a      	ldrb	r2, [r7, #20]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = cachedHighScore.Initials[1];
 8001edc:	7d7a      	ldrb	r2, [r7, #21]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = cachedHighScore.Initials[2];
 8001ee2:	7dba      	ldrb	r2, [r7, #22]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	709a      	strb	r2, [r3, #2]
			cachedHighScore = cachedHighScore2;
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	f107 020c 	add.w	r2, r7, #12
 8001ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef4:	e883 0003 	stmia.w	r3, {r0, r1}
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	3301      	adds	r3, #1
 8001efc:	623b      	str	r3, [r7, #32]
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d9b5      	bls.n	8001e70 <TetrisHighScores_AddHighScore+0x14>

		}

	}
	return rval;
 8001f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	372c      	adds	r7, #44	; 0x2c
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	20000030 	.word	0x20000030

08001f18 <WriteStartLevelToFrameBuffer>:
static i8 _startLevel = 3;
static bool _isAnalogStickExtended = false;

u32 randomSeed = 0;

void WriteStartLevelToFrameBuffer(){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
	u8 stringBuffer[11];
	sprintf(stringBuffer,"Level: %lu",_startLevel);
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <WriteStartLevelToFrameBuffer+0x38>)
 8001f20:	f993 3000 	ldrsb.w	r3, [r3]
 8001f24:	461a      	mov	r2, r3
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	490a      	ldr	r1, [pc, #40]	; (8001f54 <WriteStartLevelToFrameBuffer+0x3c>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 f8d0 	bl	80070d0 <siprintf>
	gfxClearFrameBufferRow(2,0,LCD_PCD8544_CHAR_WIDTH*11);
 8001f30:	2242      	movs	r2, #66	; 0x42
 8001f32:	2100      	movs	r1, #0
 8001f34:	2002      	movs	r0, #2
 8001f36:	f7fe fd8f 	bl	8000a58 <gfxClearFrameBufferRow>
	gfxWriteTextLineToFrameBuffer(2,0,stringBuffer);
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7fe fc7d 	bl	8000840 <gfxWriteTextLineToFrameBuffer>
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000058 	.word	0x20000058
 8001f54:	08008508 	.word	0x08008508

08001f58 <ChangeCurrentLevelUpOrDown>:

void ChangeCurrentLevelUpOrDown(i8 incOrDec){
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	_startLevel += incOrDec;
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f64:	f993 3000 	ldrsb.w	r3, [r3]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	b25a      	sxtb	r2, r3
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f74:	701a      	strb	r2, [r3, #0]
	if(incOrDec < 0){
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da08      	bge.n	8001f90 <ChangeCurrentLevelUpOrDown+0x38>
		if(_startLevel < 0){
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f80:	f993 3000 	ldrsb.w	r3, [r3]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da0f      	bge.n	8001fa8 <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 15;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	701a      	strb	r2, [r3, #0]
		}
	}
	else{

	}
}
 8001f8e:	e00b      	b.n	8001fa8 <ChangeCurrentLevelUpOrDown+0x50>
	else if(incOrDec > 0){
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	dd07      	ble.n	8001fa8 <ChangeCurrentLevelUpOrDown+0x50>
		if(_startLevel > 15){
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	dd02      	ble.n	8001fa8 <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 0;
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	20000058 	.word	0x20000058

08001fb8 <TetrisLevelSelect_Update>:

Tetris_Modes_StateTriggers TetrisLevelSelect_Update(u32 TimePassed){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	randomSeed += TimePassed;
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <TetrisLevelSelect_Update+0x9c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a22      	ldr	r2, [pc, #136]	; (8002054 <TetrisLevelSelect_Update+0x9c>)
 8001fca:	6013      	str	r3, [r2, #0]
	i32 analogYChange, analogXChange;
	ANALOG_STICK_DPAD_RESULT res = EmulateDPadReturningXAndYChange(&hadc2,&analogXChange,&analogYChange);
 8001fcc:	f107 0210 	add.w	r2, r7, #16
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4820      	ldr	r0, [pc, #128]	; (8002058 <TetrisLevelSelect_Update+0xa0>)
 8001fd8:	f7fe f99e 	bl	8000318 <EmulateDPadReturningXAndYChange>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	75fb      	strb	r3, [r7, #23]
	switch(res){
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d002      	beq.n	8001fec <TetrisLevelSelect_Update+0x34>
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d00a      	beq.n	8002000 <TetrisLevelSelect_Update+0x48>
 8001fea:	e014      	b.n	8002016 <TetrisLevelSelect_Update+0x5e>
	case UP:
		ChangeCurrentLevelUpOrDown(1);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7ff ffb3 	bl	8001f58 <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <TetrisLevelSelect_Update+0x9c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <TetrisLevelSelect_Update+0x9c>)
 8001ffc:	6013      	str	r3, [r2, #0]
		break;
 8001ffe:	e00a      	b.n	8002016 <TetrisLevelSelect_Update+0x5e>
	case DOWN:
		ChangeCurrentLevelUpOrDown(-1);
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ffa8 	bl	8001f58 <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <TetrisLevelSelect_Update+0x9c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	4a10      	ldr	r2, [pc, #64]	; (8002054 <TetrisLevelSelect_Update+0x9c>)
 8002012:	6013      	str	r3, [r2, #0]
		break;
 8002014:	bf00      	nop
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8002016:	2101      	movs	r1, #1
 8002018:	4810      	ldr	r0, [pc, #64]	; (800205c <TetrisLevelSelect_Update+0xa4>)
 800201a:	f002 fbc5 	bl	80047a8 <HAL_GPIO_ReadPin>
 800201e:	4603      	mov	r3, r0
 8002020:	75bb      	strb	r3, [r7, #22]
	if(buttonBState == GPIO_PIN_SET){
 8002022:	7dbb      	ldrb	r3, [r7, #22]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d104      	bne.n	8002032 <TetrisLevelSelect_Update+0x7a>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <TetrisLevelSelect_Update+0xa8>)
 800202a:	f000 f84f 	bl	80020cc <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 800202e:	2301      	movs	r3, #1
 8002030:	e00b      	b.n	800204a <TetrisLevelSelect_Update+0x92>
	}

	WriteStartLevelToFrameBuffer();
 8002032:	f7ff ff71 	bl	8001f18 <WriteStartLevelToFrameBuffer>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 8002036:	2354      	movs	r3, #84	; 0x54
 8002038:	2200      	movs	r2, #0
 800203a:	2102      	movs	r1, #2
 800203c:	2002      	movs	r0, #2
 800203e:	f7fe fa23 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 8002042:	4808      	ldr	r0, [pc, #32]	; (8002064 <TetrisLevelSelect_Update+0xac>)
 8002044:	f7fe fb48 	bl	80006d8 <gfxFinishDrawing>



	return NoChange;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000037c 	.word	0x2000037c
 8002058:	20000800 	.word	0x20000800
 800205c:	48000400 	.word	0x48000400
 8002060:	20000058 	.word	0x20000058
 8002064:	200005e4 	.word	0x200005e4

08002068 <TetrisLevelSelect_OnEnter>:

void TetrisLevelSelect_Init(){

}

void TetrisLevelSelect_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
	gfxWriteTextLineToFrameBuffer(0,0,"Select Level");
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <TetrisLevelSelect_OnEnter+0x38>)
 8002076:	2100      	movs	r1, #0
 8002078:	2000      	movs	r0, #0
 800207a:	f7fe fbe1 	bl	8000840 <gfxWriteTextLineToFrameBuffer>
	gfxClearFrameBuffer();
 800207e:	f7fe f9bd 	bl	80003fc <gfxClearFrameBuffer>
	ClearUpdateRegions();
 8002082:	f7fe fc87 	bl	8000994 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8002086:	2354      	movs	r3, #84	; 0x54
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2000      	movs	r0, #0
 800208e:	f7fe f9fb 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 8002092:	4804      	ldr	r0, [pc, #16]	; (80020a4 <TetrisLevelSelect_OnEnter+0x3c>)
 8002094:	f7fe fb20 	bl	80006d8 <gfxFinishDrawing>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	08008514 	.word	0x08008514
 80020a4:	200005e4 	.word	0x200005e4

080020a8 <TetrisLevelSelect_OnExit>:

void TetrisLevelSelect_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
	srand(randomSeed);
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <TetrisLevelSelect_OnExit+0x20>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 ff9d 	bl	8006ff8 <srand>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000037c 	.word	0x2000037c

080020cc <TetrisMain_SetStateMachineDataPointer>:
#define ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS 1


static void* _stateMachineDataPointer = 0;

void TetrisMain_SetStateMachineDataPointer(void* dataPtr){
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	_stateMachineDataPointer = dataPtr;
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <TetrisMain_SetStateMachineDataPointer+0x1c>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000380 	.word	0x20000380

080020ec <TetrisMain_Init>:

static State _states[NumStates];
static Tetris_Modes_States _currentState = LevelSelect;


void TetrisMain_Init(){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
	/* Setup the state machines states */
	TetrisPersistantData_LoadAllPeristantData();
 80020f2:	f000 f8e7 	bl	80022c4 <TetrisPersistantData_LoadAllPeristantData>
	//TetrisPersistantData_SaveAllPersistantData();
	TetrisGame_Init();
 80020f6:	f7ff fd45 	bl	8001b84 <TetrisGame_Init>
	u8 startLevel = 5;
 80020fa:	2305      	movs	r3, #5
 80020fc:	71fb      	strb	r3, [r7, #7]
	/* Lead-in to the first state */
	//TetrisGame_OnEnter(&startLevel,NoState);
	TetrisLevelSelect_OnEnter(0,NoState);
 80020fe:	2104      	movs	r1, #4
 8002100:	2000      	movs	r0, #0
 8002102:	f7ff ffb1 	bl	8002068 <TetrisLevelSelect_OnEnter>

	_states[Playing].NumTransitions = PLAYING_NUM_TRANSITIONS;
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <TetrisMain_Init+0xa0>)
 8002108:	2202      	movs	r2, #2
 800210a:	f883 2020 	strb.w	r2, [r3, #32]
	_states[Playing].Transitions = _playingTransitions;
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <TetrisMain_Init+0xa0>)
 8002110:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <TetrisMain_Init+0xa4>)
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
	_states[Playing].UpdateFunction = &TetrisGame_Update;
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <TetrisMain_Init+0xa0>)
 8002116:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <TetrisMain_Init+0xa8>)
 8002118:	615a      	str	r2, [r3, #20]
	_states[Playing].OnEnterFunction = &TetrisGame_OnEnter;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <TetrisMain_Init+0xa0>)
 800211c:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <TetrisMain_Init+0xac>)
 800211e:	619a      	str	r2, [r3, #24]
	_states[Playing].OnExitFunction = &TetrisGame_OnExit;
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <TetrisMain_Init+0xa0>)
 8002122:	4a1e      	ldr	r2, [pc, #120]	; (800219c <TetrisMain_Init+0xb0>)
 8002124:	61da      	str	r2, [r3, #28]

	_states[LevelSelect].NumTransitions = LEVEL_SELECT_NUM_TRANSITIONS;
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <TetrisMain_Init+0xa0>)
 8002128:	2201      	movs	r2, #1
 800212a:	731a      	strb	r2, [r3, #12]
	_states[LevelSelect].Transitions = _levelSelectTransitions;
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <TetrisMain_Init+0xa0>)
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <TetrisMain_Init+0xb4>)
 8002130:	611a      	str	r2, [r3, #16]
	_states[LevelSelect].UpdateFunction = &TetrisLevelSelect_Update;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <TetrisMain_Init+0xa0>)
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <TetrisMain_Init+0xb8>)
 8002136:	601a      	str	r2, [r3, #0]
	_states[LevelSelect].OnEnterFunction = &TetrisLevelSelect_OnEnter;
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <TetrisMain_Init+0xa0>)
 800213a:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <TetrisMain_Init+0xbc>)
 800213c:	605a      	str	r2, [r3, #4]
	_states[LevelSelect].OnExitFunction = &TetrisLevelSelect_OnExit;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <TetrisMain_Init+0xa0>)
 8002140:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <TetrisMain_Init+0xc0>)
 8002142:	609a      	str	r2, [r3, #8]

	_states[PlayAgainDialogue].NumTransitions = PLAY_AGAIN_SCREEN_NUM_TRANSITIONS;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <TetrisMain_Init+0xa0>)
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	_states[PlayAgainDialogue].Transitions = _playAgainScreenTransitions;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <TetrisMain_Init+0xa0>)
 800214e:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <TetrisMain_Init+0xc4>)
 8002150:	639a      	str	r2, [r3, #56]	; 0x38
	_states[PlayAgainDialogue].UpdateFunction = &TetrisPlayAgain_Update;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <TetrisMain_Init+0xa0>)
 8002154:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <TetrisMain_Init+0xc8>)
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
	_states[PlayAgainDialogue].OnEnterFunction = &TetrisPlayAgain_OnEnter;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <TetrisMain_Init+0xa0>)
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <TetrisMain_Init+0xcc>)
 800215c:	62da      	str	r2, [r3, #44]	; 0x2c
	_states[PlayAgainDialogue].OnExitFunction = &TetrisPlayAgain_OnExit;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <TetrisMain_Init+0xa0>)
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <TetrisMain_Init+0xd0>)
 8002162:	631a      	str	r2, [r3, #48]	; 0x30

	_states[EnterNewHighScoreScreen].NumTransitions = ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <TetrisMain_Init+0xa0>)
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	_states[EnterNewHighScoreScreen].Transitions = _enterNewHighScoreScreenTransitions;
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <TetrisMain_Init+0xa0>)
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <TetrisMain_Init+0xd4>)
 8002170:	64da      	str	r2, [r3, #76]	; 0x4c
	_states[EnterNewHighScoreScreen].UpdateFunction = &TetrisEnterHighScore_Update;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <TetrisMain_Init+0xa0>)
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <TetrisMain_Init+0xd8>)
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c
	_states[EnterNewHighScoreScreen].OnEnterFunction = &TetrisEnterHighScore_OnEnter;
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <TetrisMain_Init+0xa0>)
 800217a:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <TetrisMain_Init+0xdc>)
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
	_states[EnterNewHighScoreScreen].OnExitFunction = &TetrisEnterHighScore_OnExit;
 800217e:	4b03      	ldr	r3, [pc, #12]	; (800218c <TetrisMain_Init+0xa0>)
 8002180:	4a12      	ldr	r2, [pc, #72]	; (80021cc <TetrisMain_Init+0xe0>)
 8002182:	645a      	str	r2, [r3, #68]	; 0x44


}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000384 	.word	0x20000384
 8002190:	08008c04 	.word	0x08008c04
 8002194:	08001b4d 	.word	0x08001b4d
 8002198:	08001bb9 	.word	0x08001bb9
 800219c:	08001c21 	.word	0x08001c21
 80021a0:	08008c00 	.word	0x08008c00
 80021a4:	08001fb9 	.word	0x08001fb9
 80021a8:	08002069 	.word	0x08002069
 80021ac:	080020a9 	.word	0x080020a9
 80021b0:	08008c08 	.word	0x08008c08
 80021b4:	0800232d 	.word	0x0800232d
 80021b8:	08002365 	.word	0x08002365
 80021bc:	080023b1 	.word	0x080023b1
 80021c0:	08008c0c 	.word	0x08008c0c
 80021c4:	080013a1 	.word	0x080013a1
 80021c8:	080015a5 	.word	0x080015a5
 80021cc:	08001665 	.word	0x08001665

080021d0 <TetrisMain_Update>:

void TetrisMain_Update(u32 timePassed){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	/* Call update on the current state, the return value of update will determine there should be a change to a new state */
	Tetris_Modes_StateTriggers updateResult = _states[_currentState].UpdateFunction(timePassed);
 80021d8:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <TetrisMain_Update+0xe8>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	4a37      	ldr	r2, [pc, #220]	; (80022bc <TetrisMain_Update+0xec>)
 80021e0:	460b      	mov	r3, r1
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	4603      	mov	r3, r0
 80021f2:	76fb      	strb	r3, [r7, #27]
	if(updateResult == NoChange){
 80021f4:	7efb      	ldrb	r3, [r7, #27]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d059      	beq.n	80022ae <TetrisMain_Update+0xde>
		return;
	}
	/* If we're at this point there should be a change in state */
	u32 numTransitions = _states[_currentState].NumTransitions;
 80021fa:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <TetrisMain_Update+0xe8>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4a2e      	ldr	r2, [pc, #184]	; (80022bc <TetrisMain_Update+0xec>)
 8002202:	460b      	mov	r3, r1
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	330c      	adds	r3, #12
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	617b      	str	r3, [r7, #20]
	Transition* transitions = _states[_currentState].Transitions;
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <TetrisMain_Update+0xe8>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	4a28      	ldr	r2, [pc, #160]	; (80022bc <TetrisMain_Update+0xec>)
 800221a:	460b      	mov	r3, r1
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3310      	adds	r3, #16
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	613b      	str	r3, [r7, #16]
	/* Find the transition for the state change trigger returned by update */
	for(i32 i=0; i<numTransitions; i++){
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e039      	b.n	80022a4 <TetrisMain_Update+0xd4>
		if(transitions[i].trigger == updateResult){
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	7efa      	ldrb	r2, [r7, #27]
 800223c:	429a      	cmp	r2, r3
 800223e:	d12e      	bne.n	800229e <TetrisMain_Update+0xce>
			/* Change state and call enter and exit functions for the transition */
			Tetris_Modes_States last = _currentState;
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <TetrisMain_Update+0xe8>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	73fb      	strb	r3, [r7, #15]
			_states[_currentState].OnExitFunction(_stateMachineDataPointer, transitions[i].destination);
 8002246:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <TetrisMain_Update+0xe8>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <TetrisMain_Update+0xec>)
 800224e:	460b      	mov	r3, r1
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	3308      	adds	r3, #8
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <TetrisMain_Update+0xf0>)
 800225e:	6810      	ldr	r0, [r2, #0]
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	0052      	lsls	r2, r2, #1
 8002264:	6939      	ldr	r1, [r7, #16]
 8002266:	440a      	add	r2, r1
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	4611      	mov	r1, r2
 800226c:	4798      	blx	r3
			_currentState = transitions[i].destination;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <TetrisMain_Update+0xe8>)
 800227a:	701a      	strb	r2, [r3, #0]
			_states[_currentState].OnEnterFunction(_stateMachineDataPointer, last);
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <TetrisMain_Update+0xe8>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <TetrisMain_Update+0xec>)
 8002284:	460b      	mov	r3, r1
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <TetrisMain_Update+0xf0>)
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	7bf9      	ldrb	r1, [r7, #15]
 8002298:	4610      	mov	r0, r2
 800229a:	4798      	blx	r3
			return;
 800229c:	e008      	b.n	80022b0 <TetrisMain_Update+0xe0>
	for(i32 i=0; i<numTransitions; i++){
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d8c1      	bhi.n	8002230 <TetrisMain_Update+0x60>
 80022ac:	e000      	b.n	80022b0 <TetrisMain_Update+0xe0>
		return;
 80022ae:	bf00      	nop
		}
	}
}
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200003e8 	.word	0x200003e8
 80022bc:	20000384 	.word	0x20000384
 80022c0:	20000380 	.word	0x20000380

080022c4 <TetrisPersistantData_LoadAllPeristantData>:
#include "TetrisHighScores.h"
#include "TetrisAccumulatedPlaytime.h"
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

void TetrisPersistantData_LoadAllPeristantData(){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
	u32 nextAddress = TetrisHighScores_Load(FINAL_PAGE_START_ADDRESS);
 80022ca:	4806      	ldr	r0, [pc, #24]	; (80022e4 <TetrisPersistantData_LoadAllPeristantData+0x20>)
 80022cc:	f7ff fd60 	bl	8001d90 <TetrisHighScores_Load>
 80022d0:	6078      	str	r0, [r7, #4]
	nextAddress = TetrisAccumulatedPlaytime_Load(nextAddress);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fbde 	bl	8000a94 <TetrisAccumulatedPlaytime_Load>
 80022d8:	6078      	str	r0, [r7, #4]

}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800f800 	.word	0x0800f800

080022e8 <TetrisPersistantData_SaveAllPersistantData>:
void TetrisPersistantData_SaveAllPersistantData(){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80022ee:	f001 ff81 	bl	80041f4 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages = 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	613b      	str	r3, [r7, #16]
	eraseInit.PageAddress = FINAL_PAGE_START_ADDRESS;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <TetrisPersistantData_SaveAllPersistantData+0x40>)
 80022f8:	60fb      	str	r3, [r7, #12]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
 80022fe:	1d3a      	adds	r2, r7, #4
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f002 f838 	bl	800437c <HAL_FLASHEx_Erase>

	u32 nextAddress = TetrisHighScores_Save(FINAL_PAGE_START_ADDRESS);
 800230c:	4806      	ldr	r0, [pc, #24]	; (8002328 <TetrisPersistantData_SaveAllPersistantData+0x40>)
 800230e:	f7ff fd8b 	bl	8001e28 <TetrisHighScores_Save>
 8002312:	6178      	str	r0, [r7, #20]
	nextAddress = TetrisAccumulatedPlaytime_Save(nextAddress);
 8002314:	6978      	ldr	r0, [r7, #20]
 8002316:	f7fe fbcf 	bl	8000ab8 <TetrisAccumulatedPlaytime_Save>
 800231a:	6178      	str	r0, [r7, #20]

	HAL_FLASH_Lock();
 800231c:	f001 ff90 	bl	8004240 <HAL_FLASH_Lock>

}
 8002320:	bf00      	nop
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	0800f800 	.word	0x0800f800

0800232c <TetrisPlayAgain_Update>:
extern LCD_PCD8544_screen_t gLcdScreen;

static u8 _startLevel;


Tetris_Modes_StateTriggers TetrisPlayAgain_Update(u32 TimePassed){
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

	/* Will have option to go back to main menu.  67 */
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8002334:	2101      	movs	r1, #1
 8002336:	4809      	ldr	r0, [pc, #36]	; (800235c <TetrisPlayAgain_Update+0x30>)
 8002338:	f002 fa36 	bl	80047a8 <HAL_GPIO_ReadPin>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
	if(buttonBState == GPIO_PIN_SET){
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d104      	bne.n	8002350 <TetrisPlayAgain_Update+0x24>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <TetrisPlayAgain_Update+0x34>)
 8002348:	f7ff fec0 	bl	80020cc <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <TetrisPlayAgain_Update+0x26>
	}

	return NoChange;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	48000400 	.word	0x48000400
 8002360:	200003e9 	.word	0x200003e9

08002364 <TetrisPlayAgain_OnEnter>:

void TetrisPlayAgain_Init(){

}

void TetrisPlayAgain_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
	_startLevel = *((u8*)stateMachineDataPtr);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <TetrisPlayAgain_OnEnter+0x40>)
 8002376:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 8002378:	f7fe f840 	bl	80003fc <gfxClearFrameBuffer>
	ClearUpdateRegions();
 800237c:	f7fe fb0a 	bl	8000994 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8002380:	2354      	movs	r3, #84	; 0x54
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	2000      	movs	r0, #0
 8002388:	f7fe f87e 	bl	8000488 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxWriteTextLineToFrameBuffer(0,0,"Play Again?");
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <TetrisPlayAgain_OnEnter+0x44>)
 800238e:	2100      	movs	r1, #0
 8002390:	2000      	movs	r0, #0
 8002392:	f7fe fa55 	bl	8000840 <gfxWriteTextLineToFrameBuffer>

	gfxFinishDrawing(&gLcdScreen);
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <TetrisPlayAgain_OnEnter+0x48>)
 8002398:	f7fe f99e 	bl	80006d8 <gfxFinishDrawing>

}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200003e9 	.word	0x200003e9
 80023a8:	08008524 	.word	0x08008524
 80023ac:	200005e4 	.word	0x200005e4

080023b0 <TetrisPlayAgain_OnExit>:

void TetrisPlayAgain_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 80023bc:	4803      	ldr	r0, [pc, #12]	; (80023cc <TetrisPlayAgain_OnExit+0x1c>)
 80023be:	f7fe fb19 	bl	80009f4 <ClearScreen>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200005e4 	.word	0x200005e4

080023d0 <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 80023d8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80023dc:	2100      	movs	r1, #0
 80023de:	481e      	ldr	r0, [pc, #120]	; (8002458 <LCD_PCD8544_init+0x88>)
 80023e0:	f004 fe02 	bl	8006fe8 <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f976 	bl	80026de <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f98e 	bl	8002714 <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f9ab 	bl	8002754 <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	7bb9      	ldrb	r1, [r7, #14]
 8002402:	2301      	movs	r3, #1
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f8ae 	bl	8002566 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 800240a:	2103      	movs	r1, #3
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f939 	bl	8002684 <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 8002412:	2140      	movs	r1, #64	; 0x40
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f94e 	bl	80026b6 <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 800241a:	2102      	movs	r1, #2
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f918 	bl	8002652 <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	7bb9      	ldrb	r1, [r7, #14]
 8002426:	2300      	movs	r3, #0
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f89c 	bl	8002566 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2101      	movs	r1, #1
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8c7 	bl	80025c6 <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f8e5 	bl	800260c <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f996 	bl	8002774 <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f845 	bl	80024d8 <LCD_PCD8544_clear_ram>
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200003ec 	.word	0x200003ec

0800245c <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	72fb      	strb	r3, [r7, #11]
 800246a:	4613      	mov	r3, r2
 800246c:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f94c 	bl	8002714 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f969 	bl	8002754 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002482:	7dfa      	ldrb	r2, [r7, #23]
 8002484:	7db9      	ldrb	r1, [r7, #22]
 8002486:	2300      	movs	r3, #0
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f86c 	bl	8002566 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 800248e:	7abb      	ldrb	r3, [r7, #10]
 8002490:	461a      	mov	r2, r3
 8002492:	0052      	lsls	r2, r2, #1
 8002494:	4413      	add	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	b2da      	uxtb	r2, r3
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	4619      	mov	r1, r3
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f8b4 	bl	800260c <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f965 	bl	8002774 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f942 	bl	8002734 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f94f 	bl	8002754 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 80024b6:	8c3b      	ldrh	r3, [r7, #32]
 80024b8:	461a      	mov	r2, r3
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f81f 	bl	8002500 <LCD_PCD8544_LL_send_data>
 80024c2:	4603      	mov	r3, r0
 80024c4:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f954 	bl	8002774 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 80024cc:	7d7b      	ldrb	r3, [r7, #21]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af02      	add	r7, sp, #8
 80024de:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 80024e0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <LCD_PCD8544_clear_ram+0x24>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ffb5 	bl	800245c <LCD_PCD8544_write_bytes>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200003ec 	.word	0x200003ec

08002500 <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	2302      	movs	r3, #2
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	f003 fd63 	bl	8005fe2 <HAL_SPI_Transmit>
 800251c:	4603      	mov	r3, r0
 800251e:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	69d8      	ldr	r0, [r3, #28]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8c1b      	ldrh	r3, [r3, #32]
 800252e:	2200      	movs	r2, #0
 8002530:	4619      	mov	r1, r3
 8002532:	f002 f951 	bl	80047d8 <HAL_GPIO_WritePin>
	}
	return stat;
 8002536:	7dfb      	ldrb	r3, [r7, #23]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 800254c:	2301      	movs	r3, #1
 800254e:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8002550:	89fa      	ldrh	r2, [r7, #14]
 8002552:	1cfb      	adds	r3, r7, #3
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffd2 	bl	8002500 <LCD_PCD8544_LL_send_data>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	4608      	mov	r0, r1
 8002570:	4611      	mov	r1, r2
 8002572:	461a      	mov	r2, r3
 8002574:	4603      	mov	r3, r0
 8002576:	70fb      	strb	r3, [r7, #3]
 8002578:	460b      	mov	r3, r1
 800257a:	70bb      	strb	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	b25b      	sxtb	r3, r3
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	b25b      	sxtb	r3, r3
 800258c:	f043 0320 	orr.w	r3, r3, #32
 8002590:	b25a      	sxtb	r2, r3
 8002592:	78bb      	ldrb	r3, [r7, #2]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	b25b      	sxtb	r3, r3
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	b25b      	sxtb	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b25a      	sxtb	r2, r3
 80025a2:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ffc2 	bl	8002540 <LCD_PCD8544_LL_send_byte>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
 80025d2:	4613      	mov	r3, r2
 80025d4:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	b25a      	sxtb	r2, r3
 80025e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	4313      	orrs	r3, r2
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff9f 	bl	8002540 <LCD_PCD8544_LL_send_byte>
 8002602:	4603      	mov	r3, r0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
 8002618:	4613      	mov	r3, r2
 800261a:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 800261c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	b25b      	sxtb	r3, r3
 8002626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800262a:	b25b      	sxtb	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 8002630:	78bb      	ldrb	r3, [r7, #2]
 8002632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002636:	b2db      	uxtb	r3, r3
 8002638:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	2202      	movs	r2, #2
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ff5c 	bl	8002500 <LCD_PCD8544_LL_send_data>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 800265e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	b25b      	sxtb	r3, r3
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	b25b      	sxtb	r3, r3
 800266e:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff63 	bl	8002540 <LCD_PCD8544_LL_send_byte>
 800267a:	4603      	mov	r3, r0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 8002690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	b25b      	sxtb	r3, r3
 800269a:	f043 0310 	orr.w	r3, r3, #16
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	4619      	mov	r1, r3
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ff4a 	bl	8002540 <LCD_PCD8544_LL_send_byte>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026c8:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ff36 	bl	8002540 <LCD_PCD8544_LL_send_byte>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6858      	ldr	r0, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	891b      	ldrh	r3, [r3, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	4619      	mov	r1, r3
 80026f2:	f002 f871 	bl	80047d8 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 80026f6:	2001      	movs	r0, #1
 80026f8:	f000 fce2 	bl	80030c0 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6858      	ldr	r0, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	891b      	ldrh	r3, [r3, #8]
 8002704:	2201      	movs	r2, #1
 8002706:	4619      	mov	r1, r3
 8002708:	f002 f866 	bl	80047d8 <HAL_GPIO_WritePin>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6958      	ldr	r0, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8b1b      	ldrh	r3, [r3, #24]
 8002724:	2200      	movs	r2, #0
 8002726:	4619      	mov	r1, r3
 8002728:	f002 f856 	bl	80047d8 <HAL_GPIO_WritePin>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6958      	ldr	r0, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8b1b      	ldrh	r3, [r3, #24]
 8002744:	2201      	movs	r2, #1
 8002746:	4619      	mov	r1, r3
 8002748:	f002 f846 	bl	80047d8 <HAL_GPIO_WritePin>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68d8      	ldr	r0, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8a1b      	ldrh	r3, [r3, #16]
 8002764:	2200      	movs	r2, #0
 8002766:	4619      	mov	r1, r3
 8002768:	f002 f836 	bl	80047d8 <HAL_GPIO_WritePin>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68d8      	ldr	r0, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	8a1b      	ldrh	r3, [r3, #16]
 8002784:	2201      	movs	r2, #1
 8002786:	4619      	mov	r1, r3
 8002788:	f002 f826 	bl	80047d8 <HAL_GPIO_WritePin>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002798:	f000 fc2c 	bl	8002ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800279c:	f000 f83e 	bl	800281c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a0:	f000 f996 	bl	8002ad0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80027a4:	f000 f900 	bl	80029a8 <MX_SPI1_Init>
  MX_ADC2_Init();
 80027a8:	f000 f890 	bl	80028cc <MX_ADC2_Init>
  MX_TIM2_Init();
 80027ac:	f000 f93a 	bl	8002a24 <MX_TIM2_Init>
  //HAL_ADCEx_Calibration_Start(&hadc2);



  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <main+0x7c>)
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <main+0x80>)
 80027b4:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <main+0x7c>)
 80027b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80027bc:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <main+0x7c>)
 80027c0:	2208      	movs	r2, #8
 80027c2:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <main+0x7c>)
 80027c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80027ca:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <main+0x7c>)
 80027ce:	2202      	movs	r2, #2
 80027d0:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <main+0x7c>)
 80027d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80027d8:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <main+0x7c>)
 80027dc:	2210      	movs	r2, #16
 80027de:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 80027e0:	480b      	ldr	r0, [pc, #44]	; (8002810 <main+0x7c>)
 80027e2:	f7ff fdf5 	bl	80023d0 <LCD_PCD8544_init>

    // LCD - welcome screen
  //static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80027e6:	2100      	movs	r1, #0
 80027e8:	480b      	ldr	r0, [pc, #44]	; (8002818 <main+0x84>)
 80027ea:	f000 ffb0 	bl	800374e <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   srand(time(NULL));   // Initialization, should only be called once.
 80027ee:	2000      	movs	r0, #0
 80027f0:	f004 fc8e 	bl	8007110 <time>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 fbfe 	bl	8006ff8 <srand>
   TetrisMain_Init();
 80027fc:	f7ff fc76 	bl	80020ec <TetrisMain_Init>



  while (1)
  {
	  TetrisMain_Update(50);
 8002800:	2032      	movs	r0, #50	; 0x32
 8002802:	f7ff fce5 	bl	80021d0 <TetrisMain_Update>
	  HAL_Delay(50);
 8002806:	2032      	movs	r0, #50	; 0x32
 8002808:	f000 fc5a 	bl	80030c0 <HAL_Delay>
	  TetrisMain_Update(50);
 800280c:	e7f8      	b.n	8002800 <main+0x6c>
 800280e:	bf00      	nop
 8002810:	200005e4 	.word	0x200005e4
 8002814:	20000850 	.word	0x20000850
 8002818:	20000800 	.word	0x20000800

0800281c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b096      	sub	sp, #88	; 0x58
 8002820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002826:	2228      	movs	r2, #40	; 0x28
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f004 fbdc 	bl	8006fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002850:	2302      	movs	r3, #2
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002854:	2301      	movs	r3, #1
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002858:	2310      	movs	r3, #16
 800285a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800285c:	2302      	movs	r3, #2
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002860:	2300      	movs	r3, #0
 8002862:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002864:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002868:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800286a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800286e:	4618      	mov	r0, r3
 8002870:	f001 ffca 	bl	8004808 <HAL_RCC_OscConfig>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800287a:	f000 f9a5 	bl	8002bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800287e:	230f      	movs	r3, #15
 8002880:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800288a:	2300      	movs	r3, #0
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800288e:	2300      	movs	r3, #0
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fff3 	bl	8005884 <HAL_RCC_ClockConfig>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80028a4:	f000 f990 	bl	8002bc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80028ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 f9cb 	bl	8005c50 <HAL_RCCEx_PeriphCLKConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80028c0:	f000 f982 	bl	8002bc8 <Error_Handler>
  }
}
 80028c4:	bf00      	nop
 80028c6:	3758      	adds	r7, #88	; 0x58
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028d2:	463b      	mov	r3, r7
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
 80028e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <MX_ADC2_Init+0xd4>)
 80028e4:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <MX_ADC2_Init+0xd8>)
 80028e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <MX_ADC2_Init+0xd4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <MX_ADC2_Init+0xd4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <MX_ADC2_Init+0xd4>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <MX_ADC2_Init+0xd4>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <MX_ADC2_Init+0xd4>)
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <MX_ADC2_Init+0xd4>)
 800290a:	2201      	movs	r2, #1
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <MX_ADC2_Init+0xd4>)
 8002910:	2200      	movs	r2, #0
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <MX_ADC2_Init+0xd4>)
 8002916:	2201      	movs	r2, #1
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800291a:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <MX_ADC2_Init+0xd4>)
 800291c:	2200      	movs	r2, #0
 800291e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <MX_ADC2_Init+0xd4>)
 8002922:	2202      	movs	r2, #2
 8002924:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <MX_ADC2_Init+0xd4>)
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800292e:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <MX_ADC2_Init+0xd4>)
 8002930:	2204      	movs	r2, #4
 8002932:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <MX_ADC2_Init+0xd4>)
 8002936:	2200      	movs	r2, #0
 8002938:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <MX_ADC2_Init+0xd4>)
 800293c:	2200      	movs	r2, #0
 800293e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002940:	4817      	ldr	r0, [pc, #92]	; (80029a0 <MX_ADC2_Init+0xd4>)
 8002942:	f000 fbe1 	bl	8003108 <HAL_ADC_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800294c:	f000 f93c 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002950:	2302      	movs	r3, #2
 8002952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002954:	2301      	movs	r3, #1
 8002956:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002968:	463b      	mov	r3, r7
 800296a:	4619      	mov	r1, r3
 800296c:	480c      	ldr	r0, [pc, #48]	; (80029a0 <MX_ADC2_Init+0xd4>)
 800296e:	f000 ff61 	bl	8003834 <HAL_ADC_ConfigChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8002978:	f000 f926 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800297c:	2303      	movs	r3, #3
 800297e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002980:	2302      	movs	r3, #2
 8002982:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002984:	463b      	mov	r3, r7
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <MX_ADC2_Init+0xd4>)
 800298a:	f000 ff53 	bl	8003834 <HAL_ADC_ConfigChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8002994:	f000 f918 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000800 	.word	0x20000800
 80029a4:	50000100 	.word	0x50000100

080029a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029ae:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <MX_SPI1_Init+0x78>)
 80029b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029f6:	2207      	movs	r2, #7
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <MX_SPI1_Init+0x74>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <MX_SPI1_Init+0x74>)
 8002a02:	2208      	movs	r2, #8
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a06:	4805      	ldr	r0, [pc, #20]	; (8002a1c <MX_SPI1_Init+0x74>)
 8002a08:	f003 fa48 	bl	8005e9c <HAL_SPI_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a12:	f000 f8d9 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000850 	.word	0x20000850
 8002a20:	40013000 	.word	0x40013000

08002a24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a36:	463b      	mov	r3, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <MX_TIM2_Init+0xa8>)
 8002a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a50:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <MX_TIM2_Init+0xa8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <MX_TIM2_Init+0xa8>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <MX_TIM2_Init+0xa8>)
 8002a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <MX_TIM2_Init+0xa8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <MX_TIM2_Init+0xa8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a70:	4816      	ldr	r0, [pc, #88]	; (8002acc <MX_TIM2_Init+0xa8>)
 8002a72:	f003 fd89 	bl	8006588 <HAL_TIM_PWM_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002a7c:	f000 f8a4 	bl	8002bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	480f      	ldr	r0, [pc, #60]	; (8002acc <MX_TIM2_Init+0xa8>)
 8002a90:	f004 fa04 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002a9a:	f000 f895 	bl	8002bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a9e:	2360      	movs	r3, #96	; 0x60
 8002aa0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aae:	463b      	mov	r3, r7
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4805      	ldr	r0, [pc, #20]	; (8002acc <MX_TIM2_Init+0xa8>)
 8002ab6:	f003 fdbf 	bl	8006638 <HAL_TIM_PWM_ConfigChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002ac0:	f000 f882 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ac4:	bf00      	nop
 8002ac6:	3728      	adds	r7, #40	; 0x28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200008b4 	.word	0x200008b4

08002ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ae6:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <MX_GPIO_Init+0xf0>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <MX_GPIO_Init+0xf0>)
 8002aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002af0:	6153      	str	r3, [r2, #20]
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <MX_GPIO_Init+0xf0>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <MX_GPIO_Init+0xf0>)
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <MX_GPIO_Init+0xf0>)
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	6153      	str	r3, [r2, #20]
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <MX_GPIO_Init+0xf0>)
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <MX_GPIO_Init+0xf0>)
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <MX_GPIO_Init+0xf0>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6153      	str	r3, [r2, #20]
 8002b22:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <MX_GPIO_Init+0xf0>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8002b2e:	2201      	movs	r2, #1
 8002b30:	210a      	movs	r1, #10
 8002b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b36:	f001 fe4f 	bl	80047d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2110      	movs	r1, #16
 8002b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b42:	f001 fe49 	bl	80047d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8002b46:	231a      	movs	r3, #26
 8002b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b56:	f107 030c 	add.w	r3, r7, #12
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b60:	f001 fcb0 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b64:	f248 0304 	movw	r3, #32772	; 0x8004
 8002b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b72:	2303      	movs	r3, #3
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b76:	2307      	movs	r3, #7
 8002b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b84:	f001 fc9e 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b90:	2302      	movs	r3, #2
 8002b92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	4619      	mov	r1, r3
 8002b9a:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <MX_GPIO_Init+0xf4>)
 8002b9c:	f001 fc92 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = ANALOGUE_STICK_BUTTON_Pin;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANALOGUE_STICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <MX_GPIO_Init+0xf4>)
 8002bb4:	f001 fc86 	bl	80044c4 <HAL_GPIO_Init>

}
 8002bb8:	bf00      	nop
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	48000400 	.word	0x48000400

08002bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bcc:	b672      	cpsid	i
}
 8002bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <Error_Handler+0x8>
	...

08002bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_MspInit+0x4c>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <HAL_MspInit+0x4c>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6193      	str	r3, [r2, #24]
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_MspInit+0x4c>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_MspInit+0x4c>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_MspInit+0x4c>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	61d3      	str	r3, [r2, #28]
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_MspInit+0x4c>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	210f      	movs	r1, #15
 8002c0e:	f06f 0001 	mvn.w	r0, #1
 8002c12:	f001 fa56 	bl	80040c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000

08002c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <HAL_ADC_MspInit+0x74>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d124      	bne.n	8002c90 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_ADC_MspInit+0x78>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_ADC_MspInit+0x78>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6153      	str	r3, [r2, #20]
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_ADC_MspInit+0x78>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_ADC_MspInit+0x78>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_ADC_MspInit+0x78>)
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c68:	6153      	str	r3, [r2, #20]
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_ADC_MspInit+0x78>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 8002c76:	2360      	movs	r3, #96	; 0x60
 8002c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	4619      	mov	r1, r3
 8002c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8c:	f001 fc1a 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002c90:	bf00      	nop
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	50000100 	.word	0x50000100
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a25      	ldr	r2, [pc, #148]	; (8002d54 <HAL_SPI_MspInit+0xb4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d144      	bne.n	8002d4c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_SPI_MspInit+0xb8>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_SPI_MspInit+0xb8>)
 8002cc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ccc:	6193      	str	r3, [r2, #24]
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_SPI_MspInit+0xb8>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <HAL_SPI_MspInit+0xb8>)
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	4a1e      	ldr	r2, [pc, #120]	; (8002d58 <HAL_SPI_MspInit+0xb8>)
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce4:	6153      	str	r3, [r2, #20]
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_SPI_MspInit+0xb8>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_SPI_MspInit+0xb8>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_SPI_MspInit+0xb8>)
 8002cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfc:	6153      	str	r3, [r2, #20]
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_SPI_MspInit+0xb8>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d1a:	2305      	movs	r3, #5
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d28:	f001 fbcc 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d3c:	2305      	movs	r3, #5
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4619      	mov	r1, r3
 8002d46:	4805      	ldr	r0, [pc, #20]	; (8002d5c <HAL_SPI_MspInit+0xbc>)
 8002d48:	f001 fbbc 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40013000 	.word	0x40013000
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	48000400 	.word	0x48000400

08002d60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d10b      	bne.n	8002d8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_TIM_PWM_MspInit+0x38>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <HAL_TIM_PWM_MspInit+0x38>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	61d3      	str	r3, [r2, #28]
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_TIM_PWM_MspInit+0x38>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000

08002d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <NMI_Handler+0x4>

08002da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da6:	e7fe      	b.n	8002da6 <HardFault_Handler+0x4>

08002da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <MemManage_Handler+0x4>

08002dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <BusFault_Handler+0x4>

08002db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <UsageFault_Handler+0x4>

08002dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de8:	f000 f94a 	bl	8003080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
	return 1;
 8002df4:	2301      	movs	r3, #1
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <_kill>:

int _kill(int pid, int sig)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e0a:	f004 f8b5 	bl	8006f78 <__errno>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2216      	movs	r2, #22
 8002e12:	601a      	str	r2, [r3, #0]
	return -1;
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_exit>:

void _exit (int status)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e28:	f04f 31ff 	mov.w	r1, #4294967295
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ffe7 	bl	8002e00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e32:	e7fe      	b.n	8002e32 <_exit+0x12>

08002e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e00a      	b.n	8002e5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e46:	f3af 8000 	nop.w
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	60ba      	str	r2, [r7, #8]
 8002e52:	b2ca      	uxtb	r2, r1
 8002e54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	dbf0      	blt.n	8002e46 <_read+0x12>
	}

return len;
 8002e64:	687b      	ldr	r3, [r7, #4]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e009      	b.n	8002e94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	60ba      	str	r2, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	dbf1      	blt.n	8002e80 <_write+0x12>
	}
	return len;
 8002e9c:	687b      	ldr	r3, [r7, #4]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <_close>:

int _close(int file)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
	return -1;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ece:	605a      	str	r2, [r3, #4]
	return 0;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <_isatty>:

int _isatty(int file)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
	return 0;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f18:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <_sbrk+0x5c>)
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <_sbrk+0x60>)
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <_sbrk+0x64>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <_sbrk+0x64>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <_sbrk+0x68>)
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <_sbrk+0x64>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d207      	bcs.n	8002f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f40:	f004 f81a 	bl	8006f78 <__errno>
 8002f44:	4603      	mov	r3, r0
 8002f46:	220c      	movs	r2, #12
 8002f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4e:	e009      	b.n	8002f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <_sbrk+0x64>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <_sbrk+0x64>)
 8002f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20003000 	.word	0x20003000
 8002f70:	00000400 	.word	0x00000400
 8002f74:	20000900 	.word	0x20000900
 8002f78:	20000938 	.word	0x20000938

08002f7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <SystemInit+0x20>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <SystemInit+0x20>)
 8002f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fa4:	480d      	ldr	r0, [pc, #52]	; (8002fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8002fa6:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <LoopForever+0xe>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fac:	e002      	b.n	8002fb4 <LoopCopyDataInit>

08002fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb2:	3304      	adds	r3, #4

08002fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb8:	d3f9      	bcc.n	8002fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fba:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fbc:	4c0b      	ldr	r4, [pc, #44]	; (8002fec <LoopForever+0x16>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc0:	e001      	b.n	8002fc6 <LoopFillZerobss>

08002fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc4:	3204      	adds	r2, #4

08002fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc8:	d3fb      	bcc.n	8002fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fca:	f7ff ffd7 	bl	8002f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fce:	f003 ffd9 	bl	8006f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fd2:	f7ff fbdf 	bl	8002794 <main>

08002fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fd6:	e7fe      	b.n	8002fd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fd8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002fe4:	08008d90 	.word	0x08008d90
  ldr r2, =_sbss
 8002fe8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002fec:	20000938 	.word	0x20000938

08002ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ff0:	e7fe      	b.n	8002ff0 <ADC1_2_IRQHandler>
	...

08002ff4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_Init+0x28>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_Init+0x28>)
 8002ffe:	f043 0310 	orr.w	r3, r3, #16
 8003002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003004:	2003      	movs	r0, #3
 8003006:	f001 f851 	bl	80040ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800300a:	2000      	movs	r0, #0
 800300c:	f000 f808 	bl	8003020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003010:	f7ff fde0 	bl	8002bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40022000 	.word	0x40022000

08003020 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_InitTick+0x54>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_InitTick+0x58>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003036:	fbb3 f3f1 	udiv	r3, r3, r1
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4618      	mov	r0, r3
 8003040:	f001 f85b 	bl	80040fa <HAL_SYSTICK_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e00e      	b.n	800306c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d80a      	bhi.n	800306a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003054:	2200      	movs	r2, #0
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f001 f831 	bl	80040c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <HAL_InitTick+0x5c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	2000005c 	.word	0x2000005c
 8003078:	20000064 	.word	0x20000064
 800307c:	20000060 	.word	0x20000060

08003080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000064 	.word	0x20000064
 80030a4:	20000904 	.word	0x20000904

080030a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000904 	.word	0x20000904

080030c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000064 	.word	0x20000064

08003108 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b09a      	sub	sp, #104	; 0x68
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e172      	b.n	800340e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d176      	bne.n	8003228 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d152      	bne.n	80031e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fd61 	bl	8002c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d13b      	bne.n	80031e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fe83 	bl	8003e7c <ADC_Disable>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d12f      	bne.n	80031e8 <HAL_ADC_Init+0xe0>
 8003188:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800318c:	2b00      	cmp	r3, #0
 800318e:	d12b      	bne.n	80031e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003198:	f023 0302 	bic.w	r3, r3, #2
 800319c:	f043 0202 	orr.w	r2, r3, #2
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031c4:	4b94      	ldr	r3, [pc, #592]	; (8003418 <HAL_ADC_Init+0x310>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a94      	ldr	r2, [pc, #592]	; (800341c <HAL_ADC_Init+0x314>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0c9a      	lsrs	r2, r3, #18
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031da:	e002      	b.n	80031e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3b01      	subs	r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003204:	d110      	bne.n	8003228 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f023 0312 	bic.w	r3, r3, #18
 800320e:	f043 0210 	orr.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 80df 	bne.w	80033f4 <HAL_ADC_Init+0x2ec>
 8003236:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 80da 	bne.w	80033f4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 80d2 	bne.w	80033f4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003258:	f043 0202 	orr.w	r2, r3, #2
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003260:	4b6f      	ldr	r3, [pc, #444]	; (8003420 <HAL_ADC_Init+0x318>)
 8003262:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800326c:	d102      	bne.n	8003274 <HAL_ADC_Init+0x16c>
 800326e:	4b6d      	ldr	r3, [pc, #436]	; (8003424 <HAL_ADC_Init+0x31c>)
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e002      	b.n	800327a <HAL_ADC_Init+0x172>
 8003274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003278:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_ADC_Init+0x192>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADC_Init+0x192>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_ADC_Init+0x194>
 800329a:	2300      	movs	r3, #0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11c      	bne.n	80032da <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032a0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d107      	bne.n	80032c2 <HAL_ADC_Init+0x1ba>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_Init+0x1ba>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_ADC_Init+0x1bc>
 80032c2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d108      	bne.n	80032da <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80032c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7e5b      	ldrb	r3, [r3, #25]
 80032de:	035b      	lsls	r3, r3, #13
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032e4:	2a01      	cmp	r2, #1
 80032e6:	d002      	beq.n	80032ee <HAL_ADC_Init+0x1e6>
 80032e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ec:	e000      	b.n	80032f0 <HAL_ADC_Init+0x1e8>
 80032ee:	2200      	movs	r2, #0
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003300:	4313      	orrs	r3, r2
 8003302:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d11b      	bne.n	8003346 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7e5b      	ldrb	r3, [r3, #25]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	3b01      	subs	r3, #1
 800331c:	045a      	lsls	r2, r3, #17
 800331e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003320:	4313      	orrs	r3, r2
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	663b      	str	r3, [r7, #96]	; 0x60
 8003328:	e00d      	b.n	8003346 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	2b01      	cmp	r3, #1
 800334c:	d007      	beq.n	800335e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4313      	orrs	r3, r2
 8003358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800335a:	4313      	orrs	r3, r2
 800335c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b00      	cmp	r3, #0
 800336a:	d114      	bne.n	8003396 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800337a:	f023 0302 	bic.w	r3, r3, #2
 800337e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7e1b      	ldrb	r3, [r3, #24]
 8003384:	039a      	lsls	r2, r3, #14
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4313      	orrs	r3, r2
 8003390:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003392:	4313      	orrs	r3, r2
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_ADC_Init+0x320>)
 800339e:	4013      	ands	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80033a6:	430b      	orrs	r3, r1
 80033a8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10c      	bne.n	80033cc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	f023 010f 	bic.w	r1, r3, #15
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
 80033ca:	e007      	b.n	80033dc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 020f 	bic.w	r2, r2, #15
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
 80033f2:	e00a      	b.n	800340a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f023 0312 	bic.w	r3, r3, #18
 80033fc:	f043 0210 	orr.w	r2, r3, #16
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800340a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800340e:	4618      	mov	r0, r3
 8003410:	3768      	adds	r7, #104	; 0x68
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	2000005c 	.word	0x2000005c
 800341c:	431bde83 	.word	0x431bde83
 8003420:	50000300 	.word	0x50000300
 8003424:	50000100 	.word	0x50000100
 8003428:	fff0c007 	.word	0xfff0c007

0800342c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	f040 809c 	bne.w	8003580 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_ADC_Start+0x2a>
 8003452:	2302      	movs	r3, #2
 8003454:	e097      	b.n	8003586 <HAL_ADC_Start+0x15a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fca8 	bl	8003db4 <ADC_Enable>
 8003464:	4603      	mov	r3, r0
 8003466:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 8083 	bne.w	8003576 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003484:	4b42      	ldr	r3, [pc, #264]	; (8003590 <HAL_ADC_Start+0x164>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <HAL_ADC_Start+0x6e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003498:	d115      	bne.n	80034c6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d027      	beq.n	8003504 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80034c4:	e01e      	b.n	8003504 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034da:	d004      	beq.n	80034e6 <HAL_ADC_Start+0xba>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2c      	ldr	r2, [pc, #176]	; (8003594 <HAL_ADC_Start+0x168>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10e      	bne.n	8003504 <HAL_ADC_Start+0xd8>
 80034e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d106      	bne.n	8003520 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f023 0206 	bic.w	r2, r3, #6
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
 800351e:	e002      	b.n	8003526 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	221c      	movs	r2, #28
 8003534:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <HAL_ADC_Start+0x164>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_ADC_Start+0x138>
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_ADC_Start+0x164>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2b05      	cmp	r3, #5
 800354c:	d00a      	beq.n	8003564 <HAL_ADC_Start+0x138>
 800354e:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_ADC_Start+0x164>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2b09      	cmp	r3, #9
 8003558:	d004      	beq.n	8003564 <HAL_ADC_Start+0x138>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003562:	d10f      	bne.n	8003584 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0204 	orr.w	r2, r2, #4
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	e006      	b.n	8003584 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800357e:	e001      	b.n	8003584 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003580:	2302      	movs	r3, #2
 8003582:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	50000300 	.word	0x50000300
 8003594:	50000100 	.word	0x50000100

08003598 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d102      	bne.n	80035b4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80035ae:	2308      	movs	r3, #8
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e02e      	b.n	8003612 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b4:	4b5e      	ldr	r3, [pc, #376]	; (8003730 <HAL_ADC_PollForConversion+0x198>)
 80035b6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d112      	bne.n	80035ea <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d11d      	bne.n	800360e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e09d      	b.n	8003726 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e08b      	b.n	8003726 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800360e:	230c      	movs	r3, #12
 8003610:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003612:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_ADC_PollForConversion+0x198>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_ADC_PollForConversion+0x90>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003626:	d104      	bne.n	8003632 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	e003      	b.n	800363a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003632:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800363a:	f7ff fd35 	bl	80030a8 <HAL_GetTick>
 800363e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003640:	e021      	b.n	8003686 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d01d      	beq.n	8003686 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_ADC_PollForConversion+0xc8>
 8003650:	f7ff fd2a 	bl	80030a8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d212      	bcs.n	8003686 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0204 	orr.w	r2, r3, #4
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e04f      	b.n	8003726 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0d6      	beq.n	8003642 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d131      	bne.n	8003712 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d12c      	bne.n	8003712 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d125      	bne.n	8003712 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d112      	bne.n	80036fa <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d112      	bne.n	8003712 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40
 80036f8:	e00b      	b.n	8003712 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d103      	bne.n	8003724 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	50000300 	.word	0x50000300

08003734 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_ADCEx_Calibration_Start+0x1c>
 8003766:	2302      	movs	r3, #2
 8003768:	e05f      	b.n	800382a <HAL_ADCEx_Calibration_Start+0xdc>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fb82 	bl	8003e7c <ADC_Disable>
 8003778:	4603      	mov	r3, r0
 800377a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d14e      	bne.n	8003820 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003796:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d107      	bne.n	80037ae <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037ac:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037bc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80037be:	f7ff fc73 	bl	80030a8 <HAL_GetTick>
 80037c2:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80037c4:	e01c      	b.n	8003800 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80037c6:	f7ff fc6f 	bl	80030a8 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b0a      	cmp	r3, #10
 80037d2:	d915      	bls.n	8003800 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e2:	d10d      	bne.n	8003800 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f023 0312 	bic.w	r3, r3, #18
 80037ec:	f043 0210 	orr.w	r2, r3, #16
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e014      	b.n	800382a <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800380a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800380e:	d0da      	beq.n	80037c6 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f023 0303 	bic.w	r3, r3, #3
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003834:	b480      	push	{r7}
 8003836:	b09b      	sub	sp, #108	; 0x6c
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x22>
 8003852:	2302      	movs	r3, #2
 8003854:	e2a4      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x56c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	f040 8288 	bne.w	8003d7e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d81c      	bhi.n	80038b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	461a      	mov	r2, r3
 800388a:	231f      	movs	r3, #31
 800388c:	4093      	lsls	r3, r2
 800388e:	43db      	mvns	r3, r3
 8003890:	4019      	ands	r1, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa00 f203 	lsl.w	r2, r0, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
 80038ae:	e063      	b.n	8003978 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b09      	cmp	r3, #9
 80038b6:	d81e      	bhi.n	80038f6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4413      	add	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	3b1e      	subs	r3, #30
 80038cc:	221f      	movs	r2, #31
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	4019      	ands	r1, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	3b1e      	subs	r3, #30
 80038e8:	fa00 f203 	lsl.w	r2, r0, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	635a      	str	r2, [r3, #52]	; 0x34
 80038f4:	e040      	b.n	8003978 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b0e      	cmp	r3, #14
 80038fc:	d81e      	bhi.n	800393c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4413      	add	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	3b3c      	subs	r3, #60	; 0x3c
 8003912:	221f      	movs	r2, #31
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	4019      	ands	r1, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	3b3c      	subs	r3, #60	; 0x3c
 800392e:	fa00 f203 	lsl.w	r2, r0, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
 800393a:	e01d      	b.n	8003978 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	3b5a      	subs	r3, #90	; 0x5a
 8003950:	221f      	movs	r2, #31
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	4019      	ands	r1, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	3b5a      	subs	r3, #90	; 0x5a
 800396c:	fa00 f203 	lsl.w	r2, r0, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 80e5 	bne.w	8003b52 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b09      	cmp	r3, #9
 800398e:	d91c      	bls.n	80039ca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6999      	ldr	r1, [r3, #24]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	3b1e      	subs	r3, #30
 80039a2:	2207      	movs	r2, #7
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	4019      	ands	r1, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6898      	ldr	r0, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	3b1e      	subs	r3, #30
 80039bc:	fa00 f203 	lsl.w	r2, r0, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	619a      	str	r2, [r3, #24]
 80039c8:	e019      	b.n	80039fe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6959      	ldr	r1, [r3, #20]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	2207      	movs	r2, #7
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4019      	ands	r1, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6898      	ldr	r0, [r3, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	fa00 f203 	lsl.w	r2, r0, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d84f      	bhi.n	8003ac0 <HAL_ADC_ConfigChannel+0x28c>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <HAL_ADC_ConfigChannel+0x1f4>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a5b 	.word	0x08003a5b
 8003a30:	08003a7d 	.word	0x08003a7d
 8003a34:	08003a9f 	.word	0x08003a9f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a3e:	4b94      	ldr	r3, [pc, #592]	; (8003c90 <HAL_ADC_ConfigChannel+0x45c>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	0691      	lsls	r1, r2, #26
 8003a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a56:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a58:	e07e      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a60:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <HAL_ADC_ConfigChannel+0x45c>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	0691      	lsls	r1, r2, #26
 8003a6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a78:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a7a:	e06d      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a82:	4b83      	ldr	r3, [pc, #524]	; (8003c90 <HAL_ADC_ConfigChannel+0x45c>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	0691      	lsls	r1, r2, #26
 8003a8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a9a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a9c:	e05c      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003aa4:	4b7a      	ldr	r3, [pc, #488]	; (8003c90 <HAL_ADC_ConfigChannel+0x45c>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	0691      	lsls	r1, r2, #26
 8003aae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003abc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003abe:	e04b      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	069b      	lsls	r3, r3, #26
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d107      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ae2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	069b      	lsls	r3, r3, #26
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b06:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	069b      	lsls	r3, r3, #26
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d107      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b2a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	069b      	lsls	r3, r3, #26
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d10a      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b4e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003b50:	e001      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003b56:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d108      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x344>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x344>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x346>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 810a 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d00f      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2201      	movs	r2, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003ba6:	e049      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b09      	cmp	r3, #9
 8003bc8:	d91c      	bls.n	8003c04 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6999      	ldr	r1, [r3, #24]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4413      	add	r3, r2
 8003bda:	3b1b      	subs	r3, #27
 8003bdc:	2207      	movs	r2, #7
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43db      	mvns	r3, r3
 8003be4:	4019      	ands	r1, r3
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6898      	ldr	r0, [r3, #8]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3b1b      	subs	r3, #27
 8003bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	619a      	str	r2, [r3, #24]
 8003c02:	e01b      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6959      	ldr	r1, [r3, #20]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	2207      	movs	r2, #7
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	4019      	ands	r1, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6898      	ldr	r0, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	4413      	add	r3, r2
 8003c30:	fa00 f203 	lsl.w	r2, r0, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c3c:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_ADC_ConfigChannel+0x460>)
 8003c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d105      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c58:	2b11      	cmp	r3, #17
 8003c5a:	d105      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c6c:	2b12      	cmp	r3, #18
 8003c6e:	f040 8091 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 808a 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c88:	d108      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x468>
 8003c8a:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_ADC_ConfigChannel+0x464>)
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e008      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x46e>
 8003c90:	83fff000 	.word	0x83fff000
 8003c94:	50000300 	.word	0x50000300
 8003c98:	50000100 	.word	0x50000100
 8003c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ca0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d108      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x48e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x48e>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x490>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d150      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003cc8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x4b6>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x4b6>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_ADC_ConfigChannel+0x4b8>
 8003cea:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d13c      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d11d      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x500>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d00:	d118      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d0c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d0e:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_ADC_ConfigChannel+0x578>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a27      	ldr	r2, [pc, #156]	; (8003db0 <HAL_ADC_ConfigChannel+0x57c>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	0c9a      	lsrs	r2, r3, #18
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d24:	e002      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f9      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d32:	e02e      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b11      	cmp	r3, #17
 8003d3a:	d10b      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x520>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d44:	d106      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d50:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d52:	e01e      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b12      	cmp	r3, #18
 8003d5a:	d11a      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d66:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d68:	e013      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d7c:	e00a      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d90:	e000      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d92:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	376c      	adds	r7, #108	; 0x6c
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	2000005c 	.word	0x2000005c
 8003db0:	431bde83 	.word	0x431bde83

08003db4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d108      	bne.n	8003de0 <ADC_Enable+0x2c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <ADC_Enable+0x2c>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <ADC_Enable+0x2e>
 8003de0:	2300      	movs	r3, #0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d143      	bne.n	8003e6e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <ADC_Enable+0xc4>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0210 	orr.w	r2, r3, #16
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e02f      	b.n	8003e70 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003e20:	f7ff f942 	bl	80030a8 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e26:	e01b      	b.n	8003e60 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e28:	f7ff f93e 	bl	80030a8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d914      	bls.n	8003e60 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d00d      	beq.n	8003e60 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f043 0210 	orr.w	r2, r3, #16
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e007      	b.n	8003e70 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d1dc      	bne.n	8003e28 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	8000003f 	.word	0x8000003f

08003e7c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d108      	bne.n	8003ea8 <ADC_Disable+0x2c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <ADC_Disable+0x2c>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <ADC_Disable+0x2e>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d047      	beq.n	8003f3e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030d 	and.w	r3, r3, #13
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d10f      	bne.n	8003edc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0202 	orr.w	r2, r2, #2
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003ed4:	f7ff f8e8 	bl	80030a8 <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003eda:	e029      	b.n	8003f30 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e023      	b.n	8003f40 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ef8:	f7ff f8d6 	bl	80030a8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d914      	bls.n	8003f30 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10d      	bne.n	8003f30 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f043 0210 	orr.w	r2, r3, #16
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e007      	b.n	8003f40 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d0dc      	beq.n	8003ef8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <__NVIC_SetPriorityGrouping+0x44>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f64:	4013      	ands	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f7a:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <__NVIC_SetPriorityGrouping+0x44>)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	60d3      	str	r3, [r2, #12]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	f003 0307 	and.w	r3, r3, #7
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	6039      	str	r1, [r7, #0]
 8003fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	db0a      	blt.n	8003fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	490c      	ldr	r1, [pc, #48]	; (8003ff8 <__NVIC_SetPriority+0x4c>)
 8003fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fca:	0112      	lsls	r2, r2, #4
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	440b      	add	r3, r1
 8003fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fd4:	e00a      	b.n	8003fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	4908      	ldr	r1, [pc, #32]	; (8003ffc <__NVIC_SetPriority+0x50>)
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	3b04      	subs	r3, #4
 8003fe4:	0112      	lsls	r2, r2, #4
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	440b      	add	r3, r1
 8003fea:	761a      	strb	r2, [r3, #24]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	e000e100 	.word	0xe000e100
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004000:	b480      	push	{r7}
 8004002:	b089      	sub	sp, #36	; 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f1c3 0307 	rsb	r3, r3, #7
 800401a:	2b04      	cmp	r3, #4
 800401c:	bf28      	it	cs
 800401e:	2304      	movcs	r3, #4
 8004020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	3304      	adds	r3, #4
 8004026:	2b06      	cmp	r3, #6
 8004028:	d902      	bls.n	8004030 <NVIC_EncodePriority+0x30>
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	3b03      	subs	r3, #3
 800402e:	e000      	b.n	8004032 <NVIC_EncodePriority+0x32>
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004034:	f04f 32ff 	mov.w	r2, #4294967295
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	401a      	ands	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004048:	f04f 31ff 	mov.w	r1, #4294967295
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	43d9      	mvns	r1, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004058:	4313      	orrs	r3, r2
         );
}
 800405a:	4618      	mov	r0, r3
 800405c:	3724      	adds	r7, #36	; 0x24
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3b01      	subs	r3, #1
 8004074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004078:	d301      	bcc.n	800407e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800407a:	2301      	movs	r3, #1
 800407c:	e00f      	b.n	800409e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800407e:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <SysTick_Config+0x40>)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3b01      	subs	r3, #1
 8004084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004086:	210f      	movs	r1, #15
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	f7ff ff8e 	bl	8003fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <SysTick_Config+0x40>)
 8004092:	2200      	movs	r2, #0
 8004094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <SysTick_Config+0x40>)
 8004098:	2207      	movs	r2, #7
 800409a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	e000e010 	.word	0xe000e010

080040ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ff47 	bl	8003f48 <__NVIC_SetPriorityGrouping>
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	4603      	mov	r3, r0
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040d4:	f7ff ff5c 	bl	8003f90 <__NVIC_GetPriorityGrouping>
 80040d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	6978      	ldr	r0, [r7, #20]
 80040e0:	f7ff ff8e 	bl	8004000 <NVIC_EncodePriority>
 80040e4:	4602      	mov	r2, r0
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff5d 	bl	8003fac <__NVIC_SetPriority>
}
 80040f2:	bf00      	nop
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ffb0 	bl	8004068 <SysTick_Config>
 8004108:	4603      	mov	r3, r0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800412e:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <HAL_FLASH_Program+0xd8>)
 8004130:	7e1b      	ldrb	r3, [r3, #24]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_FLASH_Program+0x26>
 8004136:	2302      	movs	r3, #2
 8004138:	e054      	b.n	80041e4 <HAL_FLASH_Program+0xd0>
 800413a:	4b2c      	ldr	r3, [pc, #176]	; (80041ec <HAL_FLASH_Program+0xd8>)
 800413c:	2201      	movs	r2, #1
 800413e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004140:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004144:	f000 f8a8 	bl	8004298 <FLASH_WaitForLastOperation>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d144      	bne.n	80041dc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d102      	bne.n	800415e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004158:	2301      	movs	r3, #1
 800415a:	757b      	strb	r3, [r7, #21]
 800415c:	e007      	b.n	800416e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d102      	bne.n	800416a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004164:	2302      	movs	r3, #2
 8004166:	757b      	strb	r3, [r7, #21]
 8004168:	e001      	b.n	800416e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800416a:	2304      	movs	r3, #4
 800416c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800416e:	2300      	movs	r3, #0
 8004170:	75bb      	strb	r3, [r7, #22]
 8004172:	e02d      	b.n	80041d0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004174:	7dbb      	ldrb	r3, [r7, #22]
 8004176:	005a      	lsls	r2, r3, #1
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	eb02 0c03 	add.w	ip, r2, r3
 800417e:	7dbb      	ldrb	r3, [r7, #22]
 8004180:	0119      	lsls	r1, r3, #4
 8004182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004186:	f1c1 0620 	rsb	r6, r1, #32
 800418a:	f1a1 0020 	sub.w	r0, r1, #32
 800418e:	fa22 f401 	lsr.w	r4, r2, r1
 8004192:	fa03 f606 	lsl.w	r6, r3, r6
 8004196:	4334      	orrs	r4, r6
 8004198:	fa23 f000 	lsr.w	r0, r3, r0
 800419c:	4304      	orrs	r4, r0
 800419e:	fa23 f501 	lsr.w	r5, r3, r1
 80041a2:	b2a3      	uxth	r3, r4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4660      	mov	r0, ip
 80041a8:	f000 f85a 	bl	8004260 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041b0:	f000 f872 	bl	8004298 <FLASH_WaitForLastOperation>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <HAL_FLASH_Program+0xdc>)
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <HAL_FLASH_Program+0xdc>)
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80041ca:	7dbb      	ldrb	r3, [r7, #22]
 80041cc:	3301      	adds	r3, #1
 80041ce:	75bb      	strb	r3, [r7, #22]
 80041d0:	7dba      	ldrb	r2, [r7, #22]
 80041d2:	7d7b      	ldrb	r3, [r7, #21]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d3cd      	bcc.n	8004174 <HAL_FLASH_Program+0x60>
 80041d8:	e000      	b.n	80041dc <HAL_FLASH_Program+0xc8>
      {
        break;
 80041da:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041dc:	4b03      	ldr	r3, [pc, #12]	; (80041ec <HAL_FLASH_Program+0xd8>)
 80041de:	2200      	movs	r2, #0
 80041e0:	761a      	strb	r2, [r3, #24]

  return status;
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ec:	20000908 	.word	0x20000908
 80041f0:	40022000 	.word	0x40022000

080041f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <HAL_FLASH_Unlock+0x40>)
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00d      	beq.n	8004226 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800420a:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <HAL_FLASH_Unlock+0x40>)
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <HAL_FLASH_Unlock+0x44>)
 800420e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <HAL_FLASH_Unlock+0x40>)
 8004212:	4a0a      	ldr	r2, [pc, #40]	; (800423c <HAL_FLASH_Unlock+0x48>)
 8004214:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004216:	4b07      	ldr	r3, [pc, #28]	; (8004234 <HAL_FLASH_Unlock+0x40>)
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004226:	79fb      	ldrb	r3, [r7, #7]
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40022000 	.word	0x40022000
 8004238:	45670123 	.word	0x45670123
 800423c:	cdef89ab 	.word	0xcdef89ab

08004240 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_FLASH_Lock+0x1c>)
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	4a04      	ldr	r2, [pc, #16]	; (800425c <HAL_FLASH_Lock+0x1c>)
 800424a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40022000 	.word	0x40022000

08004260 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <FLASH_Program_HalfWord+0x30>)
 800426e:	2200      	movs	r2, #0
 8004270:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <FLASH_Program_HalfWord+0x34>)
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4a07      	ldr	r2, [pc, #28]	; (8004294 <FLASH_Program_HalfWord+0x34>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	887a      	ldrh	r2, [r7, #2]
 8004282:	801a      	strh	r2, [r3, #0]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	20000908 	.word	0x20000908
 8004294:	40022000 	.word	0x40022000

08004298 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80042a0:	f7fe ff02 	bl	80030a8 <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042a6:	e010      	b.n	80042ca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ae:	d00c      	beq.n	80042ca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <FLASH_WaitForLastOperation+0x2e>
 80042b6:	f7fe fef7 	bl	80030a8 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d201      	bcs.n	80042ca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e01f      	b.n	800430a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042ca:	4b12      	ldr	r3, [pc, #72]	; (8004314 <FLASH_WaitForLastOperation+0x7c>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d0e8      	beq.n	80042a8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <FLASH_WaitForLastOperation+0x7c>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d102      	bne.n	80042e8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <FLASH_WaitForLastOperation+0x7c>)
 80042e4:	2220      	movs	r2, #32
 80042e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <FLASH_WaitForLastOperation+0x7c>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d005      	beq.n	8004300 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <FLASH_WaitForLastOperation+0x7c>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d103      	bne.n	8004308 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004300:	f000 f80a 	bl	8004318 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40022000 	.word	0x40022000

08004318 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <FLASH_SetErrorCode+0x5c>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b10      	cmp	r3, #16
 800432c:	d109      	bne.n	8004342 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <FLASH_SetErrorCode+0x60>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f043 0302 	orr.w	r3, r3, #2
 8004336:	4a10      	ldr	r2, [pc, #64]	; (8004378 <FLASH_SetErrorCode+0x60>)
 8004338:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f043 0310 	orr.w	r3, r3, #16
 8004340:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <FLASH_SetErrorCode+0x5c>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b04      	cmp	r3, #4
 800434c:	d109      	bne.n	8004362 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <FLASH_SetErrorCode+0x60>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <FLASH_SetErrorCode+0x60>)
 8004358:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004362:	4a04      	ldr	r2, [pc, #16]	; (8004374 <FLASH_SetErrorCode+0x5c>)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60d3      	str	r3, [r2, #12]
}  
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40022000 	.word	0x40022000
 8004378:	20000908 	.word	0x20000908

0800437c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800438e:	4b2e      	ldr	r3, [pc, #184]	; (8004448 <HAL_FLASHEx_Erase+0xcc>)
 8004390:	7e1b      	ldrb	r3, [r3, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_FLASHEx_Erase+0x1e>
 8004396:	2302      	movs	r3, #2
 8004398:	e052      	b.n	8004440 <HAL_FLASHEx_Erase+0xc4>
 800439a:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_FLASHEx_Erase+0xcc>)
 800439c:	2201      	movs	r2, #1
 800439e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d115      	bne.n	80043d4 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043ac:	f7ff ff74 	bl	8004298 <FLASH_WaitForLastOperation>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d140      	bne.n	8004438 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80043b6:	f000 f84b 	bl	8004450 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043be:	f7ff ff6b 	bl	8004298 <FLASH_WaitForLastOperation>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80043c6:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_FLASHEx_Erase+0xd0>)
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	4a20      	ldr	r2, [pc, #128]	; (800444c <HAL_FLASHEx_Erase+0xd0>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6113      	str	r3, [r2, #16]
 80043d2:	e031      	b.n	8004438 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043d8:	f7ff ff5e 	bl	8004298 <FLASH_WaitForLastOperation>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d12a      	bne.n	8004438 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295
 80043e8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	e019      	b.n	8004426 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80043f2:	68b8      	ldr	r0, [r7, #8]
 80043f4:	f000 f846 	bl	8004484 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043fc:	f7ff ff4c 	bl	8004298 <FLASH_WaitForLastOperation>
 8004400:	4603      	mov	r3, r0
 8004402:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <HAL_FLASHEx_Erase+0xd0>)
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	4a10      	ldr	r2, [pc, #64]	; (800444c <HAL_FLASHEx_Erase+0xd0>)
 800440a:	f023 0302 	bic.w	r3, r3, #2
 800440e:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	601a      	str	r2, [r3, #0]
            break;
 800441c:	e00c      	b.n	8004438 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004424:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	02da      	lsls	r2, r3, #11
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	429a      	cmp	r2, r3
 8004436:	d3dc      	bcc.n	80043f2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_FLASHEx_Erase+0xcc>)
 800443a:	2200      	movs	r2, #0
 800443c:	761a      	strb	r2, [r3, #24]

  return status;
 800443e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000908 	.word	0x20000908
 800444c:	40022000 	.word	0x40022000

08004450 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <FLASH_MassErase+0x2c>)
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <FLASH_MassErase+0x30>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <FLASH_MassErase+0x30>)
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <FLASH_MassErase+0x30>)
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <FLASH_MassErase+0x30>)
 800446c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004470:	6113      	str	r3, [r2, #16]
}
 8004472:	bf00      	nop
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	20000908 	.word	0x20000908
 8004480:	40022000 	.word	0x40022000

08004484 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <FLASH_PageErase+0x38>)
 800448e:	2200      	movs	r2, #0
 8004490:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <FLASH_PageErase+0x3c>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <FLASH_PageErase+0x3c>)
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800449e:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <FLASH_PageErase+0x3c>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <FLASH_PageErase+0x3c>)
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <FLASH_PageErase+0x3c>)
 80044aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ae:	6113      	str	r3, [r2, #16]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20000908 	.word	0x20000908
 80044c0:	40022000 	.word	0x40022000

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d2:	e14e      	b.n	8004772 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8140 	beq.w	800476c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d005      	beq.n	8004504 <HAL_GPIO_Init+0x40>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d130      	bne.n	8004566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	2203      	movs	r2, #3
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800453a:	2201      	movs	r2, #1
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	091b      	lsrs	r3, r3, #4
 8004550:	f003 0201 	and.w	r2, r3, #1
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b03      	cmp	r3, #3
 8004570:	d017      	beq.n	80045a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2203      	movs	r2, #3
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4013      	ands	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d123      	bne.n	80045f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	08da      	lsrs	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3208      	adds	r2, #8
 80045b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	220f      	movs	r2, #15
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	08da      	lsrs	r2, r3, #3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3208      	adds	r2, #8
 80045f0:	6939      	ldr	r1, [r7, #16]
 80045f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	2203      	movs	r2, #3
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0203 	and.w	r2, r3, #3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 809a 	beq.w	800476c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004638:	4b55      	ldr	r3, [pc, #340]	; (8004790 <HAL_GPIO_Init+0x2cc>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	4a54      	ldr	r2, [pc, #336]	; (8004790 <HAL_GPIO_Init+0x2cc>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6193      	str	r3, [r2, #24]
 8004644:	4b52      	ldr	r3, [pc, #328]	; (8004790 <HAL_GPIO_Init+0x2cc>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004650:	4a50      	ldr	r2, [pc, #320]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	3302      	adds	r3, #2
 8004658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	220f      	movs	r2, #15
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800467a:	d013      	beq.n	80046a4 <HAL_GPIO_Init+0x1e0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a46      	ldr	r2, [pc, #280]	; (8004798 <HAL_GPIO_Init+0x2d4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00d      	beq.n	80046a0 <HAL_GPIO_Init+0x1dc>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a45      	ldr	r2, [pc, #276]	; (800479c <HAL_GPIO_Init+0x2d8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <HAL_GPIO_Init+0x1d8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a44      	ldr	r2, [pc, #272]	; (80047a0 <HAL_GPIO_Init+0x2dc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d101      	bne.n	8004698 <HAL_GPIO_Init+0x1d4>
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <HAL_GPIO_Init+0x1e2>
 8004698:	2305      	movs	r3, #5
 800469a:	e004      	b.n	80046a6 <HAL_GPIO_Init+0x1e2>
 800469c:	2302      	movs	r3, #2
 800469e:	e002      	b.n	80046a6 <HAL_GPIO_Init+0x1e2>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_GPIO_Init+0x1e2>
 80046a4:	2300      	movs	r3, #0
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	f002 0203 	and.w	r2, r2, #3
 80046ac:	0092      	lsls	r2, r2, #2
 80046ae:	4093      	lsls	r3, r2
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046b6:	4937      	ldr	r1, [pc, #220]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	3302      	adds	r3, #2
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046c4:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <HAL_GPIO_Init+0x2e0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80046e8:	4a2e      	ldr	r2, [pc, #184]	; (80047a4 <HAL_GPIO_Init+0x2e0>)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046ee:	4b2d      	ldr	r3, [pc, #180]	; (80047a4 <HAL_GPIO_Init+0x2e0>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004712:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <HAL_GPIO_Init+0x2e0>)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_GPIO_Init+0x2e0>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43db      	mvns	r3, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_GPIO_Init+0x2e0>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <HAL_GPIO_Init+0x2e0>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	43db      	mvns	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004766:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <HAL_GPIO_Init+0x2e0>)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	3301      	adds	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f aea9 	bne.w	80044d4 <HAL_GPIO_Init+0x10>
  }
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40021000 	.word	0x40021000
 8004794:	40010000 	.word	0x40010000
 8004798:	48000400 	.word	0x48000400
 800479c:	48000800 	.word	0x48000800
 80047a0:	48000c00 	.word	0x48000c00
 80047a4:	40010400 	.word	0x40010400

080047a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	887b      	ldrh	r3, [r7, #2]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
 80047c4:	e001      	b.n	80047ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	807b      	strh	r3, [r7, #2]
 80047e4:	4613      	mov	r3, r2
 80047e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e8:	787b      	ldrb	r3, [r7, #1]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047f4:	e002      	b.n	80047fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047f6:	887a      	ldrh	r2, [r7, #2]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800480e:	af00      	add	r7, sp, #0
 8004810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004814:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004818:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800481a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	f001 b823 	b.w	8005874 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 817d 	beq.w	8004b3e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004844:	4bbc      	ldr	r3, [pc, #752]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b04      	cmp	r3, #4
 800484e:	d00c      	beq.n	800486a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004850:	4bb9      	ldr	r3, [pc, #740]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d15c      	bne.n	8004916 <HAL_RCC_OscConfig+0x10e>
 800485c:	4bb6      	ldr	r3, [pc, #728]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d155      	bne.n	8004916 <HAL_RCC_OscConfig+0x10e>
 800486a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800486e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800487e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d102      	bne.n	800489c <HAL_RCC_OscConfig+0x94>
 8004896:	4ba8      	ldr	r3, [pc, #672]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	e015      	b.n	80048c8 <HAL_RCC_OscConfig+0xc0>
 800489c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80048b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80048b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80048bc:	fa93 f3a3 	rbit	r3, r3
 80048c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80048c4:	4b9c      	ldr	r3, [pc, #624]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80048d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80048d4:	fa92 f2a2 	rbit	r2, r2
 80048d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80048dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80048e0:	fab2 f282 	clz	r2, r2
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	f042 0220 	orr.w	r2, r2, #32
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	f002 021f 	and.w	r2, r2, #31
 80048f0:	2101      	movs	r1, #1
 80048f2:	fa01 f202 	lsl.w	r2, r1, r2
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 811f 	beq.w	8004b3c <HAL_RCC_OscConfig+0x334>
 80048fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 8116 	bne.w	8004b3c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f000 bfaf 	b.w	8005874 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x12e>
 8004928:	4b83      	ldr	r3, [pc, #524]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a82      	ldr	r2, [pc, #520]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 800492e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e036      	b.n	80049a4 <HAL_RCC_OscConfig+0x19c>
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x158>
 8004946:	4b7c      	ldr	r3, [pc, #496]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a7b      	ldr	r2, [pc, #492]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 800494c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b79      	ldr	r3, [pc, #484]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a78      	ldr	r2, [pc, #480]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e021      	b.n	80049a4 <HAL_RCC_OscConfig+0x19c>
 8004960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004970:	d10c      	bne.n	800498c <HAL_RCC_OscConfig+0x184>
 8004972:	4b71      	ldr	r3, [pc, #452]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a70      	ldr	r2, [pc, #448]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b6e      	ldr	r3, [pc, #440]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a6d      	ldr	r2, [pc, #436]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e00b      	b.n	80049a4 <HAL_RCC_OscConfig+0x19c>
 800498c:	4b6a      	ldr	r3, [pc, #424]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a69      	ldr	r2, [pc, #420]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b67      	ldr	r3, [pc, #412]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a66      	ldr	r2, [pc, #408]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049a4:	4b64      	ldr	r3, [pc, #400]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	f023 020f 	bic.w	r2, r3, #15
 80049ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	495f      	ldr	r1, [pc, #380]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d059      	beq.n	8004a82 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ce:	f7fe fb6b 	bl	80030a8 <HAL_GetTick>
 80049d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fe fb66 	bl	80030a8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b64      	cmp	r3, #100	; 0x64
 80049e6:	d902      	bls.n	80049ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	f000 bf43 	b.w	8005874 <HAL_RCC_OscConfig+0x106c>
 80049ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004a02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_RCC_OscConfig+0x218>
 8004a1a:	4b47      	ldr	r3, [pc, #284]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	e015      	b.n	8004a4c <HAL_RCC_OscConfig+0x244>
 8004a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a24:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a38:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004a3c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004a48:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a50:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004a54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004a58:	fa92 f2a2 	rbit	r2, r2
 8004a5c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004a60:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004a64:	fab2 f282 	clz	r2, r2
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	f042 0220 	orr.w	r2, r2, #32
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	f002 021f 	and.w	r2, r2, #31
 8004a74:	2101      	movs	r1, #1
 8004a76:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ab      	beq.n	80049d8 <HAL_RCC_OscConfig+0x1d0>
 8004a80:	e05d      	b.n	8004b3e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fe fb11 	bl	80030a8 <HAL_GetTick>
 8004a86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a8c:	f7fe fb0c 	bl	80030a8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b64      	cmp	r3, #100	; 0x64
 8004a9a:	d902      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	f000 bee9 	b.w	8005874 <HAL_RCC_OscConfig+0x106c>
 8004aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aa6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004ab6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	fab3 f383 	clz	r3, r3
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x2cc>
 8004ace:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	e015      	b.n	8004b00 <HAL_RCC_OscConfig+0x2f8>
 8004ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004adc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004ae0:	fa93 f3a3 	rbit	r3, r3
 8004ae4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004af0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004af4:	fa93 f3a3 	rbit	r3, r3
 8004af8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004afc:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <HAL_RCC_OscConfig+0x330>)
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b04:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004b08:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004b0c:	fa92 f2a2 	rbit	r2, r2
 8004b10:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004b14:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004b18:	fab2 f282 	clz	r2, r2
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	f042 0220 	orr.w	r2, r2, #32
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	f002 021f 	and.w	r2, r2, #31
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ab      	bne.n	8004a8c <HAL_RCC_OscConfig+0x284>
 8004b34:	e003      	b.n	8004b3e <HAL_RCC_OscConfig+0x336>
 8004b36:	bf00      	nop
 8004b38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 817d 	beq.w	8004e4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b54:	4ba6      	ldr	r3, [pc, #664]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00b      	beq.n	8004b78 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b60:	4ba3      	ldr	r3, [pc, #652]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d172      	bne.n	8004c52 <HAL_RCC_OscConfig+0x44a>
 8004b6c:	4ba0      	ldr	r3, [pc, #640]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d16c      	bne.n	8004c52 <HAL_RCC_OscConfig+0x44a>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004b8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	fab3 f383 	clz	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d102      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x3a0>
 8004ba2:	4b93      	ldr	r3, [pc, #588]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	e013      	b.n	8004bd0 <HAL_RCC_OscConfig+0x3c8>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004bb2:	fa93 f3a3 	rbit	r3, r3
 8004bb6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004bba:	2302      	movs	r3, #2
 8004bbc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004bc0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004bc4:	fa93 f3a3 	rbit	r3, r3
 8004bc8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004bcc:	4b88      	ldr	r3, [pc, #544]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004bd6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004bda:	fa92 f2a2 	rbit	r2, r2
 8004bde:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004be2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004be6:	fab2 f282 	clz	r2, r2
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	f042 0220 	orr.w	r2, r2, #32
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	f002 021f 	and.w	r2, r2, #31
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCC_OscConfig+0x410>
 8004c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d002      	beq.n	8004c18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f000 be2e 	b.w	8005874 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c18:	4b75      	ldr	r3, [pc, #468]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	21f8      	movs	r1, #248	; 0xf8
 8004c2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004c36:	fa91 f1a1 	rbit	r1, r1
 8004c3a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004c3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004c42:	fab1 f181 	clz	r1, r1
 8004c46:	b2c9      	uxtb	r1, r1
 8004c48:	408b      	lsls	r3, r1
 8004c4a:	4969      	ldr	r1, [pc, #420]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c50:	e0fd      	b.n	8004e4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8088 	beq.w	8004d74 <HAL_RCC_OscConfig+0x56c>
 8004c64:	2301      	movs	r3, #1
 8004c66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004c6e:	fa93 f3a3 	rbit	r3, r3
 8004c72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004c76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c7a:	fab3 f383 	clz	r3, r3
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7fe fa0a 	bl	80030a8 <HAL_GetTick>
 8004c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9a:	f7fe fa05 	bl	80030a8 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d902      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	f000 bde2 	b.w	8005874 <HAL_RCC_OscConfig+0x106c>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004cc2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc6:	fab3 f383 	clz	r3, r3
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d102      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x4d8>
 8004cda:	4b45      	ldr	r3, [pc, #276]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	e013      	b.n	8004d08 <HAL_RCC_OscConfig+0x500>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004cf8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004d04:	4b3a      	ldr	r3, [pc, #232]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004d0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004d12:	fa92 f2a2 	rbit	r2, r2
 8004d16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004d1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004d1e:	fab2 f282 	clz	r2, r2
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	f042 0220 	orr.w	r2, r2, #32
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	f002 021f 	and.w	r2, r2, #31
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f202 	lsl.w	r2, r1, r2
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0af      	beq.n	8004c9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	21f8      	movs	r1, #248	; 0xf8
 8004d50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004d58:	fa91 f1a1 	rbit	r1, r1
 8004d5c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004d60:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004d64:	fab1 f181 	clz	r1, r1
 8004d68:	b2c9      	uxtb	r1, r1
 8004d6a:	408b      	lsls	r3, r1
 8004d6c:	4920      	ldr	r1, [pc, #128]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
 8004d72:	e06c      	b.n	8004e4e <HAL_RCC_OscConfig+0x646>
 8004d74:	2301      	movs	r3, #1
 8004d76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004d86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fe f982 	bl	80030a8 <HAL_GetTick>
 8004da4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004daa:	f7fe f97d 	bl	80030a8 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d902      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	f000 bd5a 	b.w	8005874 <HAL_RCC_OscConfig+0x106c>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004dca:	fa93 f3a3 	rbit	r3, r3
 8004dce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d104      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5ec>
 8004dea:	4b01      	ldr	r3, [pc, #4]	; (8004df0 <HAL_RCC_OscConfig+0x5e8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	e015      	b.n	8004e1c <HAL_RCC_OscConfig+0x614>
 8004df0:	40021000 	.word	0x40021000
 8004df4:	2302      	movs	r3, #2
 8004df6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e06:	2302      	movs	r3, #2
 8004e08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e10:	fa93 f3a3 	rbit	r3, r3
 8004e14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e18:	4bc8      	ldr	r3, [pc, #800]	; (800513c <HAL_RCC_OscConfig+0x934>)
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004e22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004e26:	fa92 f2a2 	rbit	r2, r2
 8004e2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004e2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004e32:	fab2 f282 	clz	r2, r2
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	f042 0220 	orr.w	r2, r2, #32
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	f002 021f 	and.w	r2, r2, #31
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f202 	lsl.w	r2, r1, r2
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ad      	bne.n	8004daa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8110 	beq.w	8005084 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d079      	beq.n	8004f68 <HAL_RCC_OscConfig+0x760>
 8004e74:	2301      	movs	r3, #1
 8004e76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e7e:	fa93 f3a3 	rbit	r3, r3
 8004e82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8a:	fab3 f383 	clz	r3, r3
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	4bab      	ldr	r3, [pc, #684]	; (8005140 <HAL_RCC_OscConfig+0x938>)
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9e:	f7fe f903 	bl	80030a8 <HAL_GetTick>
 8004ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7fe f8fe 	bl	80030a8 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d902      	bls.n	8004ebe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	f000 bcdb 	b.w	8005874 <HAL_RCC_OscConfig+0x106c>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ed8:	2202      	movs	r2, #2
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	fa93 f2a3 	rbit	r2, r3
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004efc:	2202      	movs	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	fa93 f2a3 	rbit	r2, r3
 8004f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f18:	4b88      	ldr	r3, [pc, #544]	; (800513c <HAL_RCC_OscConfig+0x934>)
 8004f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f24:	2102      	movs	r1, #2
 8004f26:	6019      	str	r1, [r3, #0]
 8004f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	fa93 f1a3 	rbit	r1, r3
 8004f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f3e:	6019      	str	r1, [r3, #0]
  return result;
 8004f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0a0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x6a0>
 8004f66:	e08d      	b.n	8005084 <HAL_RCC_OscConfig+0x87c>
 8004f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	fa93 f2a3 	rbit	r2, r3
 8004f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f8a:	601a      	str	r2, [r3, #0]
  return result;
 8004f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f96:	fab3 f383 	clz	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b68      	ldr	r3, [pc, #416]	; (8005140 <HAL_RCC_OscConfig+0x938>)
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004faa:	f7fe f87d 	bl	80030a8 <HAL_GetTick>
 8004fae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb4:	f7fe f878 	bl	80030a8 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d902      	bls.n	8004fca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	f000 bc55 	b.w	8005874 <HAL_RCC_OscConfig+0x106c>
 8004fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	fa93 f2a3 	rbit	r2, r3
 8004fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	fa93 f2a3 	rbit	r2, r3
 8005008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501a:	2202      	movs	r2, #2
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	fa93 f2a3 	rbit	r2, r3
 800502c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005030:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005034:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005036:	4b41      	ldr	r3, [pc, #260]	; (800513c <HAL_RCC_OscConfig+0x934>)
 8005038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800503a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005042:	2102      	movs	r1, #2
 8005044:	6019      	str	r1, [r3, #0]
 8005046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	fa93 f1a3 	rbit	r1, r3
 8005054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005058:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800505c:	6019      	str	r1, [r3, #0]
  return result;
 800505e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005062:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	fab3 f383 	clz	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	2101      	movs	r1, #1
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d197      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005088:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 81a1 	beq.w	80053dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050a0:	4b26      	ldr	r3, [pc, #152]	; (800513c <HAL_RCC_OscConfig+0x934>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d116      	bne.n	80050da <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ac:	4b23      	ldr	r3, [pc, #140]	; (800513c <HAL_RCC_OscConfig+0x934>)
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	4a22      	ldr	r2, [pc, #136]	; (800513c <HAL_RCC_OscConfig+0x934>)
 80050b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b6:	61d3      	str	r3, [r2, #28]
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_RCC_OscConfig+0x934>)
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80050c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80050d2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050da:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <HAL_RCC_OscConfig+0x93c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d11a      	bne.n	800511c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e6:	4b17      	ldr	r3, [pc, #92]	; (8005144 <HAL_RCC_OscConfig+0x93c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a16      	ldr	r2, [pc, #88]	; (8005144 <HAL_RCC_OscConfig+0x93c>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f2:	f7fd ffd9 	bl	80030a8 <HAL_GetTick>
 80050f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fa:	e009      	b.n	8005110 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fc:	f7fd ffd4 	bl	80030a8 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b64      	cmp	r3, #100	; 0x64
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e3b1      	b.n	8005874 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <HAL_RCC_OscConfig+0x93c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ef      	beq.n	80050fc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d10d      	bne.n	8005148 <HAL_RCC_OscConfig+0x940>
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_RCC_OscConfig+0x934>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	4a02      	ldr	r2, [pc, #8]	; (800513c <HAL_RCC_OscConfig+0x934>)
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	6213      	str	r3, [r2, #32]
 8005138:	e03c      	b.n	80051b4 <HAL_RCC_OscConfig+0x9ac>
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000
 8005140:	10908120 	.word	0x10908120
 8005144:	40007000 	.word	0x40007000
 8005148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10c      	bne.n	8005172 <HAL_RCC_OscConfig+0x96a>
 8005158:	4bc1      	ldr	r3, [pc, #772]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4ac0      	ldr	r2, [pc, #768]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	6213      	str	r3, [r2, #32]
 8005164:	4bbe      	ldr	r3, [pc, #760]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	4abd      	ldr	r2, [pc, #756]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 800516a:	f023 0304 	bic.w	r3, r3, #4
 800516e:	6213      	str	r3, [r2, #32]
 8005170:	e020      	b.n	80051b4 <HAL_RCC_OscConfig+0x9ac>
 8005172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2b05      	cmp	r3, #5
 8005180:	d10c      	bne.n	800519c <HAL_RCC_OscConfig+0x994>
 8005182:	4bb7      	ldr	r3, [pc, #732]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	4ab6      	ldr	r2, [pc, #728]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	6213      	str	r3, [r2, #32]
 800518e:	4bb4      	ldr	r3, [pc, #720]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	4ab3      	ldr	r2, [pc, #716]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6213      	str	r3, [r2, #32]
 800519a:	e00b      	b.n	80051b4 <HAL_RCC_OscConfig+0x9ac>
 800519c:	4bb0      	ldr	r3, [pc, #704]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	4aaf      	ldr	r2, [pc, #700]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6213      	str	r3, [r2, #32]
 80051a8:	4bad      	ldr	r3, [pc, #692]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	4aac      	ldr	r2, [pc, #688]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 80051ae:	f023 0304 	bic.w	r3, r3, #4
 80051b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8081 	beq.w	80052c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c6:	f7fd ff6f 	bl	80030a8 <HAL_GetTick>
 80051ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ce:	e00b      	b.n	80051e8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d0:	f7fd ff6a 	bl	80030a8 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e345      	b.n	8005874 <HAL_RCC_OscConfig+0x106c>
 80051e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80051f0:	2202      	movs	r2, #2
 80051f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	fa93 f2a3 	rbit	r2, r3
 8005202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005206:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005210:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005214:	2202      	movs	r2, #2
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	fa93 f2a3 	rbit	r2, r3
 8005226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800522a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800522e:	601a      	str	r2, [r3, #0]
  return result;
 8005230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005234:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005238:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523a:	fab3 f383 	clz	r3, r3
 800523e:	b2db      	uxtb	r3, r3
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f043 0302 	orr.w	r3, r3, #2
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d102      	bne.n	8005254 <HAL_RCC_OscConfig+0xa4c>
 800524e:	4b84      	ldr	r3, [pc, #528]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	e013      	b.n	800527c <HAL_RCC_OscConfig+0xa74>
 8005254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005258:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800525c:	2202      	movs	r2, #2
 800525e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005264:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	fa93 f2a3 	rbit	r2, r3
 800526e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005272:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	4b79      	ldr	r3, [pc, #484]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005280:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005284:	2102      	movs	r1, #2
 8005286:	6011      	str	r1, [r2, #0]
 8005288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800528c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	fa92 f1a2 	rbit	r1, r2
 8005296:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800529a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800529e:	6011      	str	r1, [r2, #0]
  return result;
 80052a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80052a8:	6812      	ldr	r2, [r2, #0]
 80052aa:	fab2 f282 	clz	r2, r2
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	f002 021f 	and.w	r2, r2, #31
 80052ba:	2101      	movs	r1, #1
 80052bc:	fa01 f202 	lsl.w	r2, r1, r2
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d084      	beq.n	80051d0 <HAL_RCC_OscConfig+0x9c8>
 80052c6:	e07f      	b.n	80053c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c8:	f7fd feee 	bl	80030a8 <HAL_GetTick>
 80052cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d0:	e00b      	b.n	80052ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d2:	f7fd fee9 	bl	80030a8 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e2c4      	b.n	8005874 <HAL_RCC_OscConfig+0x106c>
 80052ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80052f2:	2202      	movs	r2, #2
 80052f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	fa93 f2a3 	rbit	r2, r3
 8005304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005308:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005312:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005316:	2202      	movs	r2, #2
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	fa93 f2a3 	rbit	r2, r3
 8005328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005330:	601a      	str	r2, [r3, #0]
  return result;
 8005332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005336:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800533a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533c:	fab3 f383 	clz	r3, r3
 8005340:	b2db      	uxtb	r3, r3
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f043 0302 	orr.w	r3, r3, #2
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d102      	bne.n	8005356 <HAL_RCC_OscConfig+0xb4e>
 8005350:	4b43      	ldr	r3, [pc, #268]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	e013      	b.n	800537e <HAL_RCC_OscConfig+0xb76>
 8005356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800535e:	2202      	movs	r2, #2
 8005360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005366:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	fa93 f2a3 	rbit	r2, r3
 8005370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005374:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	4b39      	ldr	r3, [pc, #228]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005382:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005386:	2102      	movs	r1, #2
 8005388:	6011      	str	r1, [r2, #0]
 800538a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800538e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	fa92 f1a2 	rbit	r1, r2
 8005398:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800539c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80053a0:	6011      	str	r1, [r2, #0]
  return result;
 80053a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	fab2 f282 	clz	r2, r2
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	f002 021f 	and.w	r2, r2, #31
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f202 	lsl.w	r2, r1, r2
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d184      	bne.n	80052d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d105      	bne.n	80053dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d0:	4b23      	ldr	r3, [pc, #140]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 80053d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8242 	beq.w	8005872 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053ee:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <HAL_RCC_OscConfig+0xc58>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	f000 8213 	beq.w	8005822 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005400:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	2b02      	cmp	r3, #2
 800540a:	f040 8162 	bne.w	80056d2 <HAL_RCC_OscConfig+0xeca>
 800540e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005412:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005416:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800541a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005420:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	fa93 f2a3 	rbit	r2, r3
 800542a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005432:	601a      	str	r2, [r3, #0]
  return result;
 8005434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005438:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800543c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	fab3 f383 	clz	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005448:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	461a      	mov	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fd fe28 	bl	80030a8 <HAL_GetTick>
 8005458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800545c:	e00c      	b.n	8005478 <HAL_RCC_OscConfig+0xc70>
 800545e:	bf00      	nop
 8005460:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005464:	f7fd fe20 	bl	80030a8 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e1fd      	b.n	8005874 <HAL_RCC_OscConfig+0x106c>
 8005478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	fa93 f2a3 	rbit	r2, r3
 8005494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005498:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800549c:	601a      	str	r2, [r3, #0]
  return result;
 800549e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80054a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054a8:	fab3 f383 	clz	r3, r3
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d102      	bne.n	80054c2 <HAL_RCC_OscConfig+0xcba>
 80054bc:	4bb0      	ldr	r3, [pc, #704]	; (8005780 <HAL_RCC_OscConfig+0xf78>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	e027      	b.n	8005512 <HAL_RCC_OscConfig+0xd0a>
 80054c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80054ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	fa93 f2a3 	rbit	r2, r3
 80054de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80054f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	fa93 f2a3 	rbit	r2, r3
 8005504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005508:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	4b9c      	ldr	r3, [pc, #624]	; (8005780 <HAL_RCC_OscConfig+0xf78>)
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005516:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800551a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800551e:	6011      	str	r1, [r2, #0]
 8005520:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005524:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	fa92 f1a2 	rbit	r1, r2
 800552e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005532:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005536:	6011      	str	r1, [r2, #0]
  return result;
 8005538:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800553c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	fab2 f282 	clz	r2, r2
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	f042 0220 	orr.w	r2, r2, #32
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	f002 021f 	and.w	r2, r2, #31
 8005552:	2101      	movs	r1, #1
 8005554:	fa01 f202 	lsl.w	r2, r1, r2
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d182      	bne.n	8005464 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800555e:	4b88      	ldr	r3, [pc, #544]	; (8005780 <HAL_RCC_OscConfig+0xf78>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	430b      	orrs	r3, r1
 8005580:	497f      	ldr	r1, [pc, #508]	; (8005780 <HAL_RCC_OscConfig+0xf78>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]
 8005586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800558e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005592:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005598:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	fa93 f2a3 	rbit	r2, r3
 80055a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80055aa:	601a      	str	r2, [r3, #0]
  return result;
 80055ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80055b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	461a      	mov	r2, r3
 80055c8:	2301      	movs	r3, #1
 80055ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7fd fd6c 	bl	80030a8 <HAL_GetTick>
 80055d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055d4:	e009      	b.n	80055ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d6:	f7fd fd67 	bl	80030a8 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e144      	b.n	8005874 <HAL_RCC_OscConfig+0x106c>
 80055ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80055f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	fa93 f2a3 	rbit	r2, r3
 8005606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800560e:	601a      	str	r2, [r3, #0]
  return result;
 8005610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005614:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005618:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800561a:	fab3 f383 	clz	r3, r3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d102      	bne.n	8005634 <HAL_RCC_OscConfig+0xe2c>
 800562e:	4b54      	ldr	r3, [pc, #336]	; (8005780 <HAL_RCC_OscConfig+0xf78>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	e027      	b.n	8005684 <HAL_RCC_OscConfig+0xe7c>
 8005634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005638:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800563c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005646:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	fa93 f2a3 	rbit	r2, r3
 8005650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005654:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	fa93 f2a3 	rbit	r2, r3
 8005676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	4b3f      	ldr	r3, [pc, #252]	; (8005780 <HAL_RCC_OscConfig+0xf78>)
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005688:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800568c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005690:	6011      	str	r1, [r2, #0]
 8005692:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005696:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	fa92 f1a2 	rbit	r1, r2
 80056a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80056a8:	6011      	str	r1, [r2, #0]
  return result;
 80056aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	fab2 f282 	clz	r2, r2
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	f042 0220 	orr.w	r2, r2, #32
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	f002 021f 	and.w	r2, r2, #31
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f202 	lsl.w	r2, r1, r2
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d082      	beq.n	80055d6 <HAL_RCC_OscConfig+0xdce>
 80056d0:	e0cf      	b.n	8005872 <HAL_RCC_OscConfig+0x106a>
 80056d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80056da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	fa93 f2a3 	rbit	r2, r3
 80056ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80056f6:	601a      	str	r2, [r3, #0]
  return result;
 80056f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005700:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005702:	fab3 f383 	clz	r3, r3
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800570c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	461a      	mov	r2, r3
 8005714:	2300      	movs	r3, #0
 8005716:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7fd fcc6 	bl	80030a8 <HAL_GetTick>
 800571c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005720:	e009      	b.n	8005736 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005722:	f7fd fcc1 	bl	80030a8 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e09e      	b.n	8005874 <HAL_RCC_OscConfig+0x106c>
 8005736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800573e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005748:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	fa93 f2a3 	rbit	r2, r3
 8005752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005756:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800575a:	601a      	str	r2, [r3, #0]
  return result;
 800575c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005760:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005764:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005766:	fab3 f383 	clz	r3, r3
 800576a:	b2db      	uxtb	r3, r3
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d104      	bne.n	8005784 <HAL_RCC_OscConfig+0xf7c>
 800577a:	4b01      	ldr	r3, [pc, #4]	; (8005780 <HAL_RCC_OscConfig+0xf78>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	e029      	b.n	80057d4 <HAL_RCC_OscConfig+0xfcc>
 8005780:	40021000 	.word	0x40021000
 8005784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005788:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800578c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005796:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	fa93 f2a3 	rbit	r2, r3
 80057a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80057b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	fa93 f2a3 	rbit	r2, r3
 80057c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <HAL_RCC_OscConfig+0x1078>)
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80057dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	fa92 f1a2 	rbit	r1, r2
 80057f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80057f8:	6011      	str	r1, [r2, #0]
  return result;
 80057fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005802:	6812      	ldr	r2, [r2, #0]
 8005804:	fab2 f282 	clz	r2, r2
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	f042 0220 	orr.w	r2, r2, #32
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	f002 021f 	and.w	r2, r2, #31
 8005814:	2101      	movs	r1, #1
 8005816:	fa01 f202 	lsl.w	r2, r1, r2
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d180      	bne.n	8005722 <HAL_RCC_OscConfig+0xf1a>
 8005820:	e027      	b.n	8005872 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e01e      	b.n	8005874 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <HAL_RCC_OscConfig+0x1078>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800583e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005842:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800584a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	429a      	cmp	r2, r3
 8005854:	d10b      	bne.n	800586e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005856:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800585a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800585e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800586a:	429a      	cmp	r2, r3
 800586c:	d001      	beq.n	8005872 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000

08005884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b09e      	sub	sp, #120	; 0x78
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e162      	b.n	8005b62 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800589c:	4b90      	ldr	r3, [pc, #576]	; (8005ae0 <HAL_RCC_ClockConfig+0x25c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d910      	bls.n	80058cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b8d      	ldr	r3, [pc, #564]	; (8005ae0 <HAL_RCC_ClockConfig+0x25c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 0207 	bic.w	r2, r3, #7
 80058b2:	498b      	ldr	r1, [pc, #556]	; (8005ae0 <HAL_RCC_ClockConfig+0x25c>)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b89      	ldr	r3, [pc, #548]	; (8005ae0 <HAL_RCC_ClockConfig+0x25c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e14a      	b.n	8005b62 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d8:	4b82      	ldr	r3, [pc, #520]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	497f      	ldr	r1, [pc, #508]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80dc 	beq.w	8005ab0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d13c      	bne.n	800597a <HAL_RCC_ClockConfig+0xf6>
 8005900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005904:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005908:	fa93 f3a3 	rbit	r3, r3
 800590c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005910:	fab3 f383 	clz	r3, r3
 8005914:	b2db      	uxtb	r3, r3
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d102      	bne.n	800592a <HAL_RCC_ClockConfig+0xa6>
 8005924:	4b6f      	ldr	r3, [pc, #444]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	e00f      	b.n	800594a <HAL_RCC_ClockConfig+0xc6>
 800592a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800592e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005932:	fa93 f3a3 	rbit	r3, r3
 8005936:	667b      	str	r3, [r7, #100]	; 0x64
 8005938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800593c:	663b      	str	r3, [r7, #96]	; 0x60
 800593e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005940:	fa93 f3a3 	rbit	r3, r3
 8005944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005946:	4b67      	ldr	r3, [pc, #412]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800594e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005952:	fa92 f2a2 	rbit	r2, r2
 8005956:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800595a:	fab2 f282 	clz	r2, r2
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	f042 0220 	orr.w	r2, r2, #32
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	f002 021f 	and.w	r2, r2, #31
 800596a:	2101      	movs	r1, #1
 800596c:	fa01 f202 	lsl.w	r2, r1, r2
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d17b      	bne.n	8005a6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0f3      	b.n	8005b62 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d13c      	bne.n	80059fc <HAL_RCC_ClockConfig+0x178>
 8005982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005986:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598a:	fa93 f3a3 	rbit	r3, r3
 800598e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005992:	fab3 f383 	clz	r3, r3
 8005996:	b2db      	uxtb	r3, r3
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d102      	bne.n	80059ac <HAL_RCC_ClockConfig+0x128>
 80059a6:	4b4f      	ldr	r3, [pc, #316]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	e00f      	b.n	80059cc <HAL_RCC_ClockConfig+0x148>
 80059ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b4:	fa93 f3a3 	rbit	r3, r3
 80059b8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059be:	643b      	str	r3, [r7, #64]	; 0x40
 80059c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c2:	fa93 f3a3 	rbit	r3, r3
 80059c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c8:	4b46      	ldr	r3, [pc, #280]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80059d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059d4:	fa92 f2a2 	rbit	r2, r2
 80059d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80059da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059dc:	fab2 f282 	clz	r2, r2
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	f042 0220 	orr.w	r2, r2, #32
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	f002 021f 	and.w	r2, r2, #31
 80059ec:	2101      	movs	r1, #1
 80059ee:	fa01 f202 	lsl.w	r2, r1, r2
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d13a      	bne.n	8005a6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0b2      	b.n	8005b62 <HAL_RCC_ClockConfig+0x2de>
 80059fc:	2302      	movs	r3, #2
 80059fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	fa93 f3a3 	rbit	r3, r3
 8005a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0a:	fab3 f383 	clz	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d102      	bne.n	8005a24 <HAL_RCC_ClockConfig+0x1a0>
 8005a1e:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	e00d      	b.n	8005a40 <HAL_RCC_ClockConfig+0x1bc>
 8005a24:	2302      	movs	r3, #2
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	fa93 f3a3 	rbit	r3, r3
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	2302      	movs	r3, #2
 8005a32:	623b      	str	r3, [r7, #32]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	fa93 f3a3 	rbit	r3, r3
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	4b29      	ldr	r3, [pc, #164]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	2202      	movs	r2, #2
 8005a42:	61ba      	str	r2, [r7, #24]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	fa92 f2a2 	rbit	r2, r2
 8005a4a:	617a      	str	r2, [r7, #20]
  return result;
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	fab2 f282 	clz	r2, r2
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	f042 0220 	orr.w	r2, r2, #32
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	f002 021f 	and.w	r2, r2, #31
 8005a5e:	2101      	movs	r1, #1
 8005a60:	fa01 f202 	lsl.w	r2, r1, r2
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e079      	b.n	8005b62 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f023 0203 	bic.w	r2, r3, #3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	491a      	ldr	r1, [pc, #104]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a80:	f7fd fb12 	bl	80030a8 <HAL_GetTick>
 8005a84:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a86:	e00a      	b.n	8005a9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a88:	f7fd fb0e 	bl	80030a8 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e061      	b.n	8005b62 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9e:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 020c 	and.w	r2, r3, #12
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d1eb      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <HAL_RCC_ClockConfig+0x25c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d214      	bcs.n	8005ae8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005abe:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <HAL_RCC_ClockConfig+0x25c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f023 0207 	bic.w	r2, r3, #7
 8005ac6:	4906      	ldr	r1, [pc, #24]	; (8005ae0 <HAL_RCC_ClockConfig+0x25c>)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <HAL_RCC_ClockConfig+0x25c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d005      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e040      	b.n	8005b62 <HAL_RCC_ClockConfig+0x2de>
 8005ae0:	40022000 	.word	0x40022000
 8005ae4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af4:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <HAL_RCC_ClockConfig+0x2e8>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	491a      	ldr	r1, [pc, #104]	; (8005b6c <HAL_RCC_ClockConfig+0x2e8>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b12:	4b16      	ldr	r3, [pc, #88]	; (8005b6c <HAL_RCC_ClockConfig+0x2e8>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4912      	ldr	r1, [pc, #72]	; (8005b6c <HAL_RCC_ClockConfig+0x2e8>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005b26:	f000 f829 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <HAL_RCC_ClockConfig+0x2e8>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b34:	22f0      	movs	r2, #240	; 0xf0
 8005b36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	fa92 f2a2 	rbit	r2, r2
 8005b3e:	60fa      	str	r2, [r7, #12]
  return result;
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	fab2 f282 	clz	r2, r2
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	40d3      	lsrs	r3, r2
 8005b4a:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <HAL_RCC_ClockConfig+0x2ec>)
 8005b4c:	5cd3      	ldrb	r3, [r2, r3]
 8005b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b52:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <HAL_RCC_ClockConfig+0x2f0>)
 8005b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <HAL_RCC_ClockConfig+0x2f4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd fa60 	bl	8003020 <HAL_InitTick>
  
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3778      	adds	r7, #120	; 0x78
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	08008c10 	.word	0x08008c10
 8005b74:	2000005c 	.word	0x2000005c
 8005b78:	20000060 	.word	0x20000060

08005b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b08b      	sub	sp, #44	; 0x2c
 8005b80:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	2300      	movs	r3, #0
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b96:	4b29      	ldr	r3, [pc, #164]	; (8005c3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 030c 	and.w	r3, r3, #12
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d002      	beq.n	8005bac <HAL_RCC_GetSysClockFreq+0x30>
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d003      	beq.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8005baa:	e03c      	b.n	8005c26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bac:	4b24      	ldr	r3, [pc, #144]	; (8005c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bae:	623b      	str	r3, [r7, #32]
      break;
 8005bb0:	e03c      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005bb8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005bbc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	fa92 f2a2 	rbit	r2, r2
 8005bc4:	607a      	str	r2, [r7, #4]
  return result;
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	fab2 f282 	clz	r2, r2
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	40d3      	lsrs	r3, r2
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005bd2:	5cd3      	ldrb	r3, [r2, r3]
 8005bd4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005bd6:	4b19      	ldr	r3, [pc, #100]	; (8005c3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	220f      	movs	r2, #15
 8005be0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	fa92 f2a2 	rbit	r2, r2
 8005be8:	60fa      	str	r2, [r7, #12]
  return result;
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	fab2 f282 	clz	r2, r2
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	40d3      	lsrs	r3, r2
 8005bf4:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bf6:	5cd3      	ldrb	r3, [r2, r3]
 8005bf8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c04:	4a0e      	ldr	r2, [pc, #56]	; (8005c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
 8005c14:	e004      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	623b      	str	r3, [r7, #32]
      break;
 8005c24:	e002      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c28:	623b      	str	r3, [r7, #32]
      break;
 8005c2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	372c      	adds	r7, #44	; 0x2c
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	007a1200 	.word	0x007a1200
 8005c44:	08008c20 	.word	0x08008c20
 8005c48:	08008c30 	.word	0x08008c30
 8005c4c:	003d0900 	.word	0x003d0900

08005c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b092      	sub	sp, #72	; 0x48
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80cd 	beq.w	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c74:	4b86      	ldr	r3, [pc, #536]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10e      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c80:	4b83      	ldr	r3, [pc, #524]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	4a82      	ldr	r2, [pc, #520]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	61d3      	str	r3, [r2, #28]
 8005c8c:	4b80      	ldr	r3, [pc, #512]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9e:	4b7d      	ldr	r3, [pc, #500]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d118      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005caa:	4b7a      	ldr	r3, [pc, #488]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a79      	ldr	r2, [pc, #484]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cb6:	f7fd f9f7 	bl	80030a8 <HAL_GetTick>
 8005cba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cbe:	f7fd f9f3 	bl	80030a8 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b64      	cmp	r3, #100	; 0x64
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e0db      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd0:	4b70      	ldr	r3, [pc, #448]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0f0      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cdc:	4b6c      	ldr	r3, [pc, #432]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d07d      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d076      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cfa:	4b65      	ldr	r3, [pc, #404]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d08:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	fa93 f3a3 	rbit	r3, r3
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d14:	fab3 f383 	clz	r3, r3
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4b5e      	ldr	r3, [pc, #376]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	461a      	mov	r2, r3
 8005d24:	2301      	movs	r3, #1
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	fa93 f3a3 	rbit	r3, r3
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d38:	fab3 f383 	clz	r3, r3
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4b55      	ldr	r3, [pc, #340]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	461a      	mov	r2, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d4c:	4a50      	ldr	r2, [pc, #320]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d50:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d045      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5c:	f7fd f9a4 	bl	80030a8 <HAL_GetTick>
 8005d60:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d62:	e00a      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d64:	f7fd f9a0 	bl	80030a8 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e086      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	fa93 f3a3 	rbit	r3, r3
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
 8005d86:	2302      	movs	r3, #2
 8005d88:	623b      	str	r3, [r7, #32]
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	fa93 f3a3 	rbit	r3, r3
 8005d90:	61fb      	str	r3, [r7, #28]
  return result;
 8005d92:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	fab3 f383 	clz	r3, r3
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f043 0302 	orr.w	r3, r3, #2
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d102      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005da8:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	e007      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005dae:	2302      	movs	r3, #2
 8005db0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	fa93 f3a3 	rbit	r3, r3
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	4b35      	ldr	r3, [pc, #212]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	613a      	str	r2, [r7, #16]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	fa92 f2a2 	rbit	r2, r2
 8005dc8:	60fa      	str	r2, [r7, #12]
  return result;
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	fab2 f282 	clz	r2, r2
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	f002 021f 	and.w	r2, r2, #31
 8005ddc:	2101      	movs	r1, #1
 8005dde:	fa01 f202 	lsl.w	r2, r1, r2
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0bd      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005de8:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4926      	ldr	r1, [pc, #152]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d105      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e02:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	4a22      	ldr	r2, [pc, #136]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d008      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	f023 0203 	bic.w	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	491a      	ldr	r1, [pc, #104]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	f023 0210 	bic.w	r2, r3, #16
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4912      	ldr	r1, [pc, #72]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e56:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	490b      	ldr	r1, [pc, #44]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	4903      	ldr	r1, [pc, #12]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3748      	adds	r7, #72	; 0x48
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40007000 	.word	0x40007000
 8005e98:	10908100 	.word	0x10908100

08005e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e095      	b.n	8005fda <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ebe:	d009      	beq.n	8005ed4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	61da      	str	r2, [r3, #28]
 8005ec6:	e005      	b.n	8005ed4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fc fed6 	bl	8002ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f14:	d902      	bls.n	8005f1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	e002      	b.n	8005f22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f2a:	d007      	beq.n	8005f3c <HAL_SPI_Init+0xa0>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f34:	d002      	beq.n	8005f3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	ea42 0103 	orr.w	r1, r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	0c1b      	lsrs	r3, r3, #16
 8005f98:	f003 0204 	and.w	r2, r3, #4
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005fb8:	ea42 0103 	orr.w	r1, r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b088      	sub	sp, #32
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_SPI_Transmit+0x22>
 8006000:	2302      	movs	r3, #2
 8006002:	e158      	b.n	80062b6 <HAL_SPI_Transmit+0x2d4>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800600c:	f7fd f84c 	bl	80030a8 <HAL_GetTick>
 8006010:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b01      	cmp	r3, #1
 8006020:	d002      	beq.n	8006028 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006022:	2302      	movs	r3, #2
 8006024:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006026:	e13d      	b.n	80062a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_SPI_Transmit+0x52>
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006038:	e134      	b.n	80062a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2203      	movs	r2, #3
 800603e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	88fa      	ldrh	r2, [r7, #6]
 8006052:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	88fa      	ldrh	r2, [r7, #6]
 8006058:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006084:	d10f      	bne.n	80060a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006094:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d007      	beq.n	80060c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060cc:	d94b      	bls.n	8006166 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_SPI_Transmit+0xfa>
 80060d6:	8afb      	ldrh	r3, [r7, #22]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d13e      	bne.n	800615a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	881a      	ldrh	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	1c9a      	adds	r2, r3, #2
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006100:	e02b      	b.n	800615a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b02      	cmp	r3, #2
 800610e:	d112      	bne.n	8006136 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	881a      	ldrh	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006134:	e011      	b.n	800615a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006136:	f7fc ffb7 	bl	80030a8 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d803      	bhi.n	800614e <HAL_SPI_Transmit+0x16c>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d102      	bne.n	8006154 <HAL_SPI_Transmit+0x172>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d102      	bne.n	800615a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006158:	e0a4      	b.n	80062a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1ce      	bne.n	8006102 <HAL_SPI_Transmit+0x120>
 8006164:	e07c      	b.n	8006260 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_SPI_Transmit+0x192>
 800616e:	8afb      	ldrh	r3, [r7, #22]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d170      	bne.n	8006256 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b01      	cmp	r3, #1
 800617c:	d912      	bls.n	80061a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	881a      	ldrh	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	1c9a      	adds	r2, r3, #2
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b02      	subs	r3, #2
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061a2:	e058      	b.n	8006256 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	330c      	adds	r3, #12
 80061ae:	7812      	ldrb	r2, [r2, #0]
 80061b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80061ca:	e044      	b.n	8006256 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d12b      	bne.n	8006232 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d912      	bls.n	800620a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	881a      	ldrh	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	1c9a      	adds	r2, r3, #2
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b02      	subs	r3, #2
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006208:	e025      	b.n	8006256 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006230:	e011      	b.n	8006256 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006232:	f7fc ff39 	bl	80030a8 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d803      	bhi.n	800624a <HAL_SPI_Transmit+0x268>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d102      	bne.n	8006250 <HAL_SPI_Transmit+0x26e>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006254:	e026      	b.n	80062a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1b5      	bne.n	80061cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f949 	bl	80064fc <SPI_EndRxTxTransaction>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e000      	b.n	80062a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80062a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062d0:	f7fc feea 	bl	80030a8 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	4413      	add	r3, r2
 80062de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062e0:	f7fc fee2 	bl	80030a8 <HAL_GetTick>
 80062e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062e6:	4b39      	ldr	r3, [pc, #228]	; (80063cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	015b      	lsls	r3, r3, #5
 80062ec:	0d1b      	lsrs	r3, r3, #20
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	fb02 f303 	mul.w	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062f6:	e054      	b.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d050      	beq.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006300:	f7fc fed2 	bl	80030a8 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	429a      	cmp	r2, r3
 800630e:	d902      	bls.n	8006316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d13d      	bne.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800632e:	d111      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006338:	d004      	beq.n	8006344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006342:	d107      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635c:	d10f      	bne.n	800637e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800637c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e017      	b.n	80063c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	3b01      	subs	r3, #1
 80063a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d19b      	bne.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	2000005c 	.word	0x2000005c

080063d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063e2:	f7fc fe61 	bl	80030a8 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	4413      	add	r3, r2
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063f2:	f7fc fe59 	bl	80030a8 <HAL_GetTick>
 80063f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006400:	4b3d      	ldr	r3, [pc, #244]	; (80064f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	00da      	lsls	r2, r3, #3
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	0d1b      	lsrs	r3, r3, #20
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006418:	e060      	b.n	80064dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006420:	d107      	bne.n	8006432 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006430:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d050      	beq.n	80064dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800643a:	f7fc fe35 	bl	80030a8 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006446:	429a      	cmp	r2, r3
 8006448:	d902      	bls.n	8006450 <SPI_WaitFifoStateUntilTimeout+0x80>
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d13d      	bne.n	80064cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800645e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006468:	d111      	bne.n	800648e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006472:	d004      	beq.n	800647e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647c:	d107      	bne.n	800648e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800648c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006496:	d10f      	bne.n	80064b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e010      	b.n	80064ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	3b01      	subs	r3, #1
 80064da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4013      	ands	r3, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d196      	bne.n	800641a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3728      	adds	r7, #40	; 0x28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	2000005c 	.word	0x2000005c

080064fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2200      	movs	r2, #0
 8006510:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7ff ff5b 	bl	80063d0 <SPI_WaitFifoStateUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e027      	b.n	8006580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	2180      	movs	r1, #128	; 0x80
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff fec0 	bl	80062c0 <SPI_WaitFlagStateUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e014      	b.n	8006580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7ff ff34 	bl	80063d0 <SPI_WaitFifoStateUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d007      	beq.n	800657e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006572:	f043 0220 	orr.w	r2, r3, #32
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e000      	b.n	8006580 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e049      	b.n	800662e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fc fbd6 	bl	8002d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f000 f94a 	bl	8006860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006652:	2302      	movs	r3, #2
 8006654:	e0ff      	b.n	8006856 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b14      	cmp	r3, #20
 8006662:	f200 80f0 	bhi.w	8006846 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	080066c1 	.word	0x080066c1
 8006670:	08006847 	.word	0x08006847
 8006674:	08006847 	.word	0x08006847
 8006678:	08006847 	.word	0x08006847
 800667c:	08006701 	.word	0x08006701
 8006680:	08006847 	.word	0x08006847
 8006684:	08006847 	.word	0x08006847
 8006688:	08006847 	.word	0x08006847
 800668c:	08006743 	.word	0x08006743
 8006690:	08006847 	.word	0x08006847
 8006694:	08006847 	.word	0x08006847
 8006698:	08006847 	.word	0x08006847
 800669c:	08006783 	.word	0x08006783
 80066a0:	08006847 	.word	0x08006847
 80066a4:	08006847 	.word	0x08006847
 80066a8:	08006847 	.word	0x08006847
 80066ac:	080067c5 	.word	0x080067c5
 80066b0:	08006847 	.word	0x08006847
 80066b4:	08006847 	.word	0x08006847
 80066b8:	08006847 	.word	0x08006847
 80066bc:	08006805 	.word	0x08006805
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f942 	bl	8006950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0208 	orr.w	r2, r2, #8
 80066da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0204 	bic.w	r2, r2, #4
 80066ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6999      	ldr	r1, [r3, #24]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	691a      	ldr	r2, [r3, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	619a      	str	r2, [r3, #24]
      break;
 80066fe:	e0a5      	b.n	800684c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f9a8 	bl	8006a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800671a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800672a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6999      	ldr	r1, [r3, #24]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	021a      	lsls	r2, r3, #8
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	619a      	str	r2, [r3, #24]
      break;
 8006740:	e084      	b.n	800684c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fa07 	bl	8006b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0208 	orr.w	r2, r2, #8
 800675c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69da      	ldr	r2, [r3, #28]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0204 	bic.w	r2, r2, #4
 800676c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69d9      	ldr	r1, [r3, #28]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	61da      	str	r2, [r3, #28]
      break;
 8006780:	e064      	b.n	800684c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fa65 	bl	8006c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69da      	ldr	r2, [r3, #28]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800679c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69d9      	ldr	r1, [r3, #28]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	021a      	lsls	r2, r3, #8
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	61da      	str	r2, [r3, #28]
      break;
 80067c2:	e043      	b.n	800684c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 faa8 	bl	8006d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0208 	orr.w	r2, r2, #8
 80067de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0204 	bic.w	r2, r2, #4
 80067ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006802:	e023      	b.n	800684c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fae6 	bl	8006ddc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800681e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	021a      	lsls	r2, r3, #8
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006844:	e002      	b.n	800684c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
      break;
 800684a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006854:	7dfb      	ldrb	r3, [r7, #23]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop

08006860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a32      	ldr	r2, [pc, #200]	; (800693c <TIM_Base_SetConfig+0xdc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0x28>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x28>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a2f      	ldr	r2, [pc, #188]	; (8006940 <TIM_Base_SetConfig+0xe0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a27      	ldr	r2, [pc, #156]	; (800693c <TIM_Base_SetConfig+0xdc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <TIM_Base_SetConfig+0x6a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a8:	d00f      	beq.n	80068ca <TIM_Base_SetConfig+0x6a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a24      	ldr	r2, [pc, #144]	; (8006940 <TIM_Base_SetConfig+0xe0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_Base_SetConfig+0x6a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a23      	ldr	r2, [pc, #140]	; (8006944 <TIM_Base_SetConfig+0xe4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_Base_SetConfig+0x6a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a22      	ldr	r2, [pc, #136]	; (8006948 <TIM_Base_SetConfig+0xe8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_Base_SetConfig+0x6a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a21      	ldr	r2, [pc, #132]	; (800694c <TIM_Base_SetConfig+0xec>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a0e      	ldr	r2, [pc, #56]	; (800693c <TIM_Base_SetConfig+0xdc>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00b      	beq.n	8006920 <TIM_Base_SetConfig+0xc0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a0e      	ldr	r2, [pc, #56]	; (8006944 <TIM_Base_SetConfig+0xe4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d007      	beq.n	8006920 <TIM_Base_SetConfig+0xc0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a0d      	ldr	r2, [pc, #52]	; (8006948 <TIM_Base_SetConfig+0xe8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_Base_SetConfig+0xc0>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a0c      	ldr	r2, [pc, #48]	; (800694c <TIM_Base_SetConfig+0xec>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d103      	bne.n	8006928 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	615a      	str	r2, [r3, #20]
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40000400 	.word	0x40000400
 8006944:	40014000 	.word	0x40014000
 8006948:	40014400 	.word	0x40014400
 800694c:	40014800 	.word	0x40014800

08006950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f023 0201 	bic.w	r2, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 0302 	bic.w	r3, r3, #2
 800699c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a28      	ldr	r2, [pc, #160]	; (8006a4c <TIM_OC1_SetConfig+0xfc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <TIM_OC1_SetConfig+0x78>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a27      	ldr	r2, [pc, #156]	; (8006a50 <TIM_OC1_SetConfig+0x100>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_OC1_SetConfig+0x78>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a26      	ldr	r2, [pc, #152]	; (8006a54 <TIM_OC1_SetConfig+0x104>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC1_SetConfig+0x78>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a25      	ldr	r2, [pc, #148]	; (8006a58 <TIM_OC1_SetConfig+0x108>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10c      	bne.n	80069e2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f023 0308 	bic.w	r3, r3, #8
 80069ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 0304 	bic.w	r3, r3, #4
 80069e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a19      	ldr	r2, [pc, #100]	; (8006a4c <TIM_OC1_SetConfig+0xfc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00b      	beq.n	8006a02 <TIM_OC1_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <TIM_OC1_SetConfig+0x100>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d007      	beq.n	8006a02 <TIM_OC1_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a17      	ldr	r2, [pc, #92]	; (8006a54 <TIM_OC1_SetConfig+0x104>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_OC1_SetConfig+0xb2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a16      	ldr	r2, [pc, #88]	; (8006a58 <TIM_OC1_SetConfig+0x108>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d111      	bne.n	8006a26 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	621a      	str	r2, [r3, #32]
}
 8006a40:	bf00      	nop
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40014400 	.word	0x40014400
 8006a58:	40014800 	.word	0x40014800

08006a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	f023 0210 	bic.w	r2, r3, #16
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f023 0320 	bic.w	r3, r3, #32
 8006aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a24      	ldr	r2, [pc, #144]	; (8006b4c <TIM_OC2_SetConfig+0xf0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d10d      	bne.n	8006adc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a1b      	ldr	r2, [pc, #108]	; (8006b4c <TIM_OC2_SetConfig+0xf0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00b      	beq.n	8006afc <TIM_OC2_SetConfig+0xa0>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a1a      	ldr	r2, [pc, #104]	; (8006b50 <TIM_OC2_SetConfig+0xf4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d007      	beq.n	8006afc <TIM_OC2_SetConfig+0xa0>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a19      	ldr	r2, [pc, #100]	; (8006b54 <TIM_OC2_SetConfig+0xf8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_OC2_SetConfig+0xa0>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <TIM_OC2_SetConfig+0xfc>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d113      	bne.n	8006b24 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b02:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b0a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40012c00 	.word	0x40012c00
 8006b50:	40014000 	.word	0x40014000
 8006b54:	40014400 	.word	0x40014400
 8006b58:	40014800 	.word	0x40014800

08006b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0303 	bic.w	r3, r3, #3
 8006b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	021b      	lsls	r3, r3, #8
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a23      	ldr	r2, [pc, #140]	; (8006c48 <TIM_OC3_SetConfig+0xec>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d10d      	bne.n	8006bda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bd8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1a      	ldr	r2, [pc, #104]	; (8006c48 <TIM_OC3_SetConfig+0xec>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d00b      	beq.n	8006bfa <TIM_OC3_SetConfig+0x9e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <TIM_OC3_SetConfig+0xf0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d007      	beq.n	8006bfa <TIM_OC3_SetConfig+0x9e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <TIM_OC3_SetConfig+0xf4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d003      	beq.n	8006bfa <TIM_OC3_SetConfig+0x9e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <TIM_OC3_SetConfig+0xf8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d113      	bne.n	8006c22 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40014400 	.word	0x40014400
 8006c54:	40014800 	.word	0x40014800

08006c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	031b      	lsls	r3, r3, #12
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a16      	ldr	r2, [pc, #88]	; (8006d10 <TIM_OC4_SetConfig+0xb8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00b      	beq.n	8006cd4 <TIM_OC4_SetConfig+0x7c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a15      	ldr	r2, [pc, #84]	; (8006d14 <TIM_OC4_SetConfig+0xbc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <TIM_OC4_SetConfig+0x7c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <TIM_OC4_SetConfig+0xc0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_OC4_SetConfig+0x7c>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a13      	ldr	r2, [pc, #76]	; (8006d1c <TIM_OC4_SetConfig+0xc4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d109      	bne.n	8006ce8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	019b      	lsls	r3, r3, #6
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40012c00 	.word	0x40012c00
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800

08006d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <TIM_OC5_SetConfig+0xac>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00b      	beq.n	8006d92 <TIM_OC5_SetConfig+0x72>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a14      	ldr	r2, [pc, #80]	; (8006dd0 <TIM_OC5_SetConfig+0xb0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d007      	beq.n	8006d92 <TIM_OC5_SetConfig+0x72>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a13      	ldr	r2, [pc, #76]	; (8006dd4 <TIM_OC5_SetConfig+0xb4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <TIM_OC5_SetConfig+0x72>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a12      	ldr	r2, [pc, #72]	; (8006dd8 <TIM_OC5_SetConfig+0xb8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d109      	bne.n	8006da6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	621a      	str	r2, [r3, #32]
}
 8006dc0:	bf00      	nop
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40014400 	.word	0x40014400
 8006dd8:	40014800 	.word	0x40014800

08006ddc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	051b      	lsls	r3, r3, #20
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a16      	ldr	r2, [pc, #88]	; (8006e8c <TIM_OC6_SetConfig+0xb0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00b      	beq.n	8006e50 <TIM_OC6_SetConfig+0x74>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <TIM_OC6_SetConfig+0xb4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d007      	beq.n	8006e50 <TIM_OC6_SetConfig+0x74>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a14      	ldr	r2, [pc, #80]	; (8006e94 <TIM_OC6_SetConfig+0xb8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_OC6_SetConfig+0x74>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a13      	ldr	r2, [pc, #76]	; (8006e98 <TIM_OC6_SetConfig+0xbc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d109      	bne.n	8006e64 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	029b      	lsls	r3, r3, #10
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40014000 	.word	0x40014000
 8006e94:	40014400 	.word	0x40014400
 8006e98:	40014800 	.word	0x40014800

08006e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e054      	b.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a24      	ldr	r2, [pc, #144]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d108      	bne.n	8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ee4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00e      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1c:	d009      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a11      	ldr	r2, [pc, #68]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d10c      	bne.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40012c00 	.word	0x40012c00
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40014000 	.word	0x40014000

08006f78 <__errno>:
 8006f78:	4b01      	ldr	r3, [pc, #4]	; (8006f80 <__errno+0x8>)
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000068 	.word	0x20000068

08006f84 <__libc_init_array>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	4d0d      	ldr	r5, [pc, #52]	; (8006fbc <__libc_init_array+0x38>)
 8006f88:	4c0d      	ldr	r4, [pc, #52]	; (8006fc0 <__libc_init_array+0x3c>)
 8006f8a:	1b64      	subs	r4, r4, r5
 8006f8c:	10a4      	asrs	r4, r4, #2
 8006f8e:	2600      	movs	r6, #0
 8006f90:	42a6      	cmp	r6, r4
 8006f92:	d109      	bne.n	8006fa8 <__libc_init_array+0x24>
 8006f94:	4d0b      	ldr	r5, [pc, #44]	; (8006fc4 <__libc_init_array+0x40>)
 8006f96:	4c0c      	ldr	r4, [pc, #48]	; (8006fc8 <__libc_init_array+0x44>)
 8006f98:	f001 fa96 	bl	80084c8 <_init>
 8006f9c:	1b64      	subs	r4, r4, r5
 8006f9e:	10a4      	asrs	r4, r4, #2
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	42a6      	cmp	r6, r4
 8006fa4:	d105      	bne.n	8006fb2 <__libc_init_array+0x2e>
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fac:	4798      	blx	r3
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7ee      	b.n	8006f90 <__libc_init_array+0xc>
 8006fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb6:	4798      	blx	r3
 8006fb8:	3601      	adds	r6, #1
 8006fba:	e7f2      	b.n	8006fa2 <__libc_init_array+0x1e>
 8006fbc:	08008d88 	.word	0x08008d88
 8006fc0:	08008d88 	.word	0x08008d88
 8006fc4:	08008d88 	.word	0x08008d88
 8006fc8:	08008d8c 	.word	0x08008d8c

08006fcc <memcpy>:
 8006fcc:	440a      	add	r2, r1
 8006fce:	4291      	cmp	r1, r2
 8006fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fd4:	d100      	bne.n	8006fd8 <memcpy+0xc>
 8006fd6:	4770      	bx	lr
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	d1f9      	bne.n	8006fda <memcpy+0xe>
 8006fe6:	bd10      	pop	{r4, pc}

08006fe8 <memset>:
 8006fe8:	4402      	add	r2, r0
 8006fea:	4603      	mov	r3, r0
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d100      	bne.n	8006ff2 <memset+0xa>
 8006ff0:	4770      	bx	lr
 8006ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff6:	e7f9      	b.n	8006fec <memset+0x4>

08006ff8 <srand>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4b10      	ldr	r3, [pc, #64]	; (800703c <srand+0x44>)
 8006ffc:	681d      	ldr	r5, [r3, #0]
 8006ffe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007000:	4604      	mov	r4, r0
 8007002:	b9b3      	cbnz	r3, 8007032 <srand+0x3a>
 8007004:	2018      	movs	r0, #24
 8007006:	f000 f8df 	bl	80071c8 <malloc>
 800700a:	4602      	mov	r2, r0
 800700c:	63a8      	str	r0, [r5, #56]	; 0x38
 800700e:	b920      	cbnz	r0, 800701a <srand+0x22>
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <srand+0x48>)
 8007012:	480c      	ldr	r0, [pc, #48]	; (8007044 <srand+0x4c>)
 8007014:	2142      	movs	r1, #66	; 0x42
 8007016:	f000 f895 	bl	8007144 <__assert_func>
 800701a:	490b      	ldr	r1, [pc, #44]	; (8007048 <srand+0x50>)
 800701c:	4b0b      	ldr	r3, [pc, #44]	; (800704c <srand+0x54>)
 800701e:	e9c0 1300 	strd	r1, r3, [r0]
 8007022:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <srand+0x58>)
 8007024:	6083      	str	r3, [r0, #8]
 8007026:	230b      	movs	r3, #11
 8007028:	8183      	strh	r3, [r0, #12]
 800702a:	2100      	movs	r1, #0
 800702c:	2001      	movs	r0, #1
 800702e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007032:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007034:	2200      	movs	r2, #0
 8007036:	611c      	str	r4, [r3, #16]
 8007038:	615a      	str	r2, [r3, #20]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000068 	.word	0x20000068
 8007040:	08008c44 	.word	0x08008c44
 8007044:	08008c5b 	.word	0x08008c5b
 8007048:	abcd330e 	.word	0xabcd330e
 800704c:	e66d1234 	.word	0xe66d1234
 8007050:	0005deec 	.word	0x0005deec

08007054 <rand>:
 8007054:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <rand+0x5c>)
 8007056:	b510      	push	{r4, lr}
 8007058:	681c      	ldr	r4, [r3, #0]
 800705a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800705c:	b9b3      	cbnz	r3, 800708c <rand+0x38>
 800705e:	2018      	movs	r0, #24
 8007060:	f000 f8b2 	bl	80071c8 <malloc>
 8007064:	63a0      	str	r0, [r4, #56]	; 0x38
 8007066:	b928      	cbnz	r0, 8007074 <rand+0x20>
 8007068:	4602      	mov	r2, r0
 800706a:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <rand+0x60>)
 800706c:	4812      	ldr	r0, [pc, #72]	; (80070b8 <rand+0x64>)
 800706e:	214e      	movs	r1, #78	; 0x4e
 8007070:	f000 f868 	bl	8007144 <__assert_func>
 8007074:	4a11      	ldr	r2, [pc, #68]	; (80070bc <rand+0x68>)
 8007076:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <rand+0x6c>)
 8007078:	e9c0 2300 	strd	r2, r3, [r0]
 800707c:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <rand+0x70>)
 800707e:	6083      	str	r3, [r0, #8]
 8007080:	230b      	movs	r3, #11
 8007082:	8183      	strh	r3, [r0, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	2300      	movs	r3, #0
 8007088:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800708c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800708e:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <rand+0x74>)
 8007090:	6920      	ldr	r0, [r4, #16]
 8007092:	6963      	ldr	r3, [r4, #20]
 8007094:	490d      	ldr	r1, [pc, #52]	; (80070cc <rand+0x78>)
 8007096:	4342      	muls	r2, r0
 8007098:	fb01 2203 	mla	r2, r1, r3, r2
 800709c:	fba0 0101 	umull	r0, r1, r0, r1
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	eb42 0001 	adc.w	r0, r2, r1
 80070a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80070aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80070ae:	bd10      	pop	{r4, pc}
 80070b0:	20000068 	.word	0x20000068
 80070b4:	08008c44 	.word	0x08008c44
 80070b8:	08008c5b 	.word	0x08008c5b
 80070bc:	abcd330e 	.word	0xabcd330e
 80070c0:	e66d1234 	.word	0xe66d1234
 80070c4:	0005deec 	.word	0x0005deec
 80070c8:	5851f42d 	.word	0x5851f42d
 80070cc:	4c957f2d 	.word	0x4c957f2d

080070d0 <siprintf>:
 80070d0:	b40e      	push	{r1, r2, r3}
 80070d2:	b500      	push	{lr}
 80070d4:	b09c      	sub	sp, #112	; 0x70
 80070d6:	ab1d      	add	r3, sp, #116	; 0x74
 80070d8:	9002      	str	r0, [sp, #8]
 80070da:	9006      	str	r0, [sp, #24]
 80070dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070e0:	4809      	ldr	r0, [pc, #36]	; (8007108 <siprintf+0x38>)
 80070e2:	9107      	str	r1, [sp, #28]
 80070e4:	9104      	str	r1, [sp, #16]
 80070e6:	4909      	ldr	r1, [pc, #36]	; (800710c <siprintf+0x3c>)
 80070e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ec:	9105      	str	r1, [sp, #20]
 80070ee:	6800      	ldr	r0, [r0, #0]
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	a902      	add	r1, sp, #8
 80070f4:	f000 f9ac 	bl	8007450 <_svfiprintf_r>
 80070f8:	9b02      	ldr	r3, [sp, #8]
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	b01c      	add	sp, #112	; 0x70
 8007100:	f85d eb04 	ldr.w	lr, [sp], #4
 8007104:	b003      	add	sp, #12
 8007106:	4770      	bx	lr
 8007108:	20000068 	.word	0x20000068
 800710c:	ffff0208 	.word	0xffff0208

08007110 <time>:
 8007110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007112:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <time+0x30>)
 8007114:	2200      	movs	r2, #0
 8007116:	4669      	mov	r1, sp
 8007118:	4604      	mov	r4, r0
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	f000 f842 	bl	80071a4 <_gettimeofday_r>
 8007120:	2800      	cmp	r0, #0
 8007122:	bfbe      	ittt	lt
 8007124:	f04f 32ff 	movlt.w	r2, #4294967295
 8007128:	f04f 33ff 	movlt.w	r3, #4294967295
 800712c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8007130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007134:	b10c      	cbz	r4, 800713a <time+0x2a>
 8007136:	e9c4 0100 	strd	r0, r1, [r4]
 800713a:	b004      	add	sp, #16
 800713c:	bd10      	pop	{r4, pc}
 800713e:	bf00      	nop
 8007140:	20000068 	.word	0x20000068

08007144 <__assert_func>:
 8007144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007146:	4614      	mov	r4, r2
 8007148:	461a      	mov	r2, r3
 800714a:	4b09      	ldr	r3, [pc, #36]	; (8007170 <__assert_func+0x2c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4605      	mov	r5, r0
 8007150:	68d8      	ldr	r0, [r3, #12]
 8007152:	b14c      	cbz	r4, 8007168 <__assert_func+0x24>
 8007154:	4b07      	ldr	r3, [pc, #28]	; (8007174 <__assert_func+0x30>)
 8007156:	9100      	str	r1, [sp, #0]
 8007158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800715c:	4906      	ldr	r1, [pc, #24]	; (8007178 <__assert_func+0x34>)
 800715e:	462b      	mov	r3, r5
 8007160:	f000 f80e 	bl	8007180 <fiprintf>
 8007164:	f000 fe32 	bl	8007dcc <abort>
 8007168:	4b04      	ldr	r3, [pc, #16]	; (800717c <__assert_func+0x38>)
 800716a:	461c      	mov	r4, r3
 800716c:	e7f3      	b.n	8007156 <__assert_func+0x12>
 800716e:	bf00      	nop
 8007170:	20000068 	.word	0x20000068
 8007174:	08008cb6 	.word	0x08008cb6
 8007178:	08008cc3 	.word	0x08008cc3
 800717c:	08008cf1 	.word	0x08008cf1

08007180 <fiprintf>:
 8007180:	b40e      	push	{r1, r2, r3}
 8007182:	b503      	push	{r0, r1, lr}
 8007184:	4601      	mov	r1, r0
 8007186:	ab03      	add	r3, sp, #12
 8007188:	4805      	ldr	r0, [pc, #20]	; (80071a0 <fiprintf+0x20>)
 800718a:	f853 2b04 	ldr.w	r2, [r3], #4
 800718e:	6800      	ldr	r0, [r0, #0]
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	f000 fa87 	bl	80076a4 <_vfiprintf_r>
 8007196:	b002      	add	sp, #8
 8007198:	f85d eb04 	ldr.w	lr, [sp], #4
 800719c:	b003      	add	sp, #12
 800719e:	4770      	bx	lr
 80071a0:	20000068 	.word	0x20000068

080071a4 <_gettimeofday_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d07      	ldr	r5, [pc, #28]	; (80071c4 <_gettimeofday_r+0x20>)
 80071a8:	2300      	movs	r3, #0
 80071aa:	4604      	mov	r4, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	4611      	mov	r1, r2
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	f001 f981 	bl	80084b8 <_gettimeofday>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d102      	bne.n	80071c0 <_gettimeofday_r+0x1c>
 80071ba:	682b      	ldr	r3, [r5, #0]
 80071bc:	b103      	cbz	r3, 80071c0 <_gettimeofday_r+0x1c>
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	bd38      	pop	{r3, r4, r5, pc}
 80071c2:	bf00      	nop
 80071c4:	20000930 	.word	0x20000930

080071c8 <malloc>:
 80071c8:	4b02      	ldr	r3, [pc, #8]	; (80071d4 <malloc+0xc>)
 80071ca:	4601      	mov	r1, r0
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	f000 b86f 	b.w	80072b0 <_malloc_r>
 80071d2:	bf00      	nop
 80071d4:	20000068 	.word	0x20000068

080071d8 <_free_r>:
 80071d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071da:	2900      	cmp	r1, #0
 80071dc:	d044      	beq.n	8007268 <_free_r+0x90>
 80071de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e2:	9001      	str	r0, [sp, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f1a1 0404 	sub.w	r4, r1, #4
 80071ea:	bfb8      	it	lt
 80071ec:	18e4      	addlt	r4, r4, r3
 80071ee:	f001 f82f 	bl	8008250 <__malloc_lock>
 80071f2:	4a1e      	ldr	r2, [pc, #120]	; (800726c <_free_r+0x94>)
 80071f4:	9801      	ldr	r0, [sp, #4]
 80071f6:	6813      	ldr	r3, [r2, #0]
 80071f8:	b933      	cbnz	r3, 8007208 <_free_r+0x30>
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	6014      	str	r4, [r2, #0]
 80071fe:	b003      	add	sp, #12
 8007200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007204:	f001 b82a 	b.w	800825c <__malloc_unlock>
 8007208:	42a3      	cmp	r3, r4
 800720a:	d908      	bls.n	800721e <_free_r+0x46>
 800720c:	6825      	ldr	r5, [r4, #0]
 800720e:	1961      	adds	r1, r4, r5
 8007210:	428b      	cmp	r3, r1
 8007212:	bf01      	itttt	eq
 8007214:	6819      	ldreq	r1, [r3, #0]
 8007216:	685b      	ldreq	r3, [r3, #4]
 8007218:	1949      	addeq	r1, r1, r5
 800721a:	6021      	streq	r1, [r4, #0]
 800721c:	e7ed      	b.n	80071fa <_free_r+0x22>
 800721e:	461a      	mov	r2, r3
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b10b      	cbz	r3, 8007228 <_free_r+0x50>
 8007224:	42a3      	cmp	r3, r4
 8007226:	d9fa      	bls.n	800721e <_free_r+0x46>
 8007228:	6811      	ldr	r1, [r2, #0]
 800722a:	1855      	adds	r5, r2, r1
 800722c:	42a5      	cmp	r5, r4
 800722e:	d10b      	bne.n	8007248 <_free_r+0x70>
 8007230:	6824      	ldr	r4, [r4, #0]
 8007232:	4421      	add	r1, r4
 8007234:	1854      	adds	r4, r2, r1
 8007236:	42a3      	cmp	r3, r4
 8007238:	6011      	str	r1, [r2, #0]
 800723a:	d1e0      	bne.n	80071fe <_free_r+0x26>
 800723c:	681c      	ldr	r4, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	6053      	str	r3, [r2, #4]
 8007242:	4421      	add	r1, r4
 8007244:	6011      	str	r1, [r2, #0]
 8007246:	e7da      	b.n	80071fe <_free_r+0x26>
 8007248:	d902      	bls.n	8007250 <_free_r+0x78>
 800724a:	230c      	movs	r3, #12
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	e7d6      	b.n	80071fe <_free_r+0x26>
 8007250:	6825      	ldr	r5, [r4, #0]
 8007252:	1961      	adds	r1, r4, r5
 8007254:	428b      	cmp	r3, r1
 8007256:	bf04      	itt	eq
 8007258:	6819      	ldreq	r1, [r3, #0]
 800725a:	685b      	ldreq	r3, [r3, #4]
 800725c:	6063      	str	r3, [r4, #4]
 800725e:	bf04      	itt	eq
 8007260:	1949      	addeq	r1, r1, r5
 8007262:	6021      	streq	r1, [r4, #0]
 8007264:	6054      	str	r4, [r2, #4]
 8007266:	e7ca      	b.n	80071fe <_free_r+0x26>
 8007268:	b003      	add	sp, #12
 800726a:	bd30      	pop	{r4, r5, pc}
 800726c:	20000928 	.word	0x20000928

08007270 <sbrk_aligned>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	4e0e      	ldr	r6, [pc, #56]	; (80072ac <sbrk_aligned+0x3c>)
 8007274:	460c      	mov	r4, r1
 8007276:	6831      	ldr	r1, [r6, #0]
 8007278:	4605      	mov	r5, r0
 800727a:	b911      	cbnz	r1, 8007282 <sbrk_aligned+0x12>
 800727c:	f000 fcd6 	bl	8007c2c <_sbrk_r>
 8007280:	6030      	str	r0, [r6, #0]
 8007282:	4621      	mov	r1, r4
 8007284:	4628      	mov	r0, r5
 8007286:	f000 fcd1 	bl	8007c2c <_sbrk_r>
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	d00a      	beq.n	80072a4 <sbrk_aligned+0x34>
 800728e:	1cc4      	adds	r4, r0, #3
 8007290:	f024 0403 	bic.w	r4, r4, #3
 8007294:	42a0      	cmp	r0, r4
 8007296:	d007      	beq.n	80072a8 <sbrk_aligned+0x38>
 8007298:	1a21      	subs	r1, r4, r0
 800729a:	4628      	mov	r0, r5
 800729c:	f000 fcc6 	bl	8007c2c <_sbrk_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d101      	bne.n	80072a8 <sbrk_aligned+0x38>
 80072a4:	f04f 34ff 	mov.w	r4, #4294967295
 80072a8:	4620      	mov	r0, r4
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	2000092c 	.word	0x2000092c

080072b0 <_malloc_r>:
 80072b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b4:	1ccd      	adds	r5, r1, #3
 80072b6:	f025 0503 	bic.w	r5, r5, #3
 80072ba:	3508      	adds	r5, #8
 80072bc:	2d0c      	cmp	r5, #12
 80072be:	bf38      	it	cc
 80072c0:	250c      	movcc	r5, #12
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	4607      	mov	r7, r0
 80072c6:	db01      	blt.n	80072cc <_malloc_r+0x1c>
 80072c8:	42a9      	cmp	r1, r5
 80072ca:	d905      	bls.n	80072d8 <_malloc_r+0x28>
 80072cc:	230c      	movs	r3, #12
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	2600      	movs	r6, #0
 80072d2:	4630      	mov	r0, r6
 80072d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d8:	4e2e      	ldr	r6, [pc, #184]	; (8007394 <_malloc_r+0xe4>)
 80072da:	f000 ffb9 	bl	8008250 <__malloc_lock>
 80072de:	6833      	ldr	r3, [r6, #0]
 80072e0:	461c      	mov	r4, r3
 80072e2:	bb34      	cbnz	r4, 8007332 <_malloc_r+0x82>
 80072e4:	4629      	mov	r1, r5
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7ff ffc2 	bl	8007270 <sbrk_aligned>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	4604      	mov	r4, r0
 80072f0:	d14d      	bne.n	800738e <_malloc_r+0xde>
 80072f2:	6834      	ldr	r4, [r6, #0]
 80072f4:	4626      	mov	r6, r4
 80072f6:	2e00      	cmp	r6, #0
 80072f8:	d140      	bne.n	800737c <_malloc_r+0xcc>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	4631      	mov	r1, r6
 80072fe:	4638      	mov	r0, r7
 8007300:	eb04 0803 	add.w	r8, r4, r3
 8007304:	f000 fc92 	bl	8007c2c <_sbrk_r>
 8007308:	4580      	cmp	r8, r0
 800730a:	d13a      	bne.n	8007382 <_malloc_r+0xd2>
 800730c:	6821      	ldr	r1, [r4, #0]
 800730e:	3503      	adds	r5, #3
 8007310:	1a6d      	subs	r5, r5, r1
 8007312:	f025 0503 	bic.w	r5, r5, #3
 8007316:	3508      	adds	r5, #8
 8007318:	2d0c      	cmp	r5, #12
 800731a:	bf38      	it	cc
 800731c:	250c      	movcc	r5, #12
 800731e:	4629      	mov	r1, r5
 8007320:	4638      	mov	r0, r7
 8007322:	f7ff ffa5 	bl	8007270 <sbrk_aligned>
 8007326:	3001      	adds	r0, #1
 8007328:	d02b      	beq.n	8007382 <_malloc_r+0xd2>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	442b      	add	r3, r5
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	e00e      	b.n	8007350 <_malloc_r+0xa0>
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	1b52      	subs	r2, r2, r5
 8007336:	d41e      	bmi.n	8007376 <_malloc_r+0xc6>
 8007338:	2a0b      	cmp	r2, #11
 800733a:	d916      	bls.n	800736a <_malloc_r+0xba>
 800733c:	1961      	adds	r1, r4, r5
 800733e:	42a3      	cmp	r3, r4
 8007340:	6025      	str	r5, [r4, #0]
 8007342:	bf18      	it	ne
 8007344:	6059      	strne	r1, [r3, #4]
 8007346:	6863      	ldr	r3, [r4, #4]
 8007348:	bf08      	it	eq
 800734a:	6031      	streq	r1, [r6, #0]
 800734c:	5162      	str	r2, [r4, r5]
 800734e:	604b      	str	r3, [r1, #4]
 8007350:	4638      	mov	r0, r7
 8007352:	f104 060b 	add.w	r6, r4, #11
 8007356:	f000 ff81 	bl	800825c <__malloc_unlock>
 800735a:	f026 0607 	bic.w	r6, r6, #7
 800735e:	1d23      	adds	r3, r4, #4
 8007360:	1af2      	subs	r2, r6, r3
 8007362:	d0b6      	beq.n	80072d2 <_malloc_r+0x22>
 8007364:	1b9b      	subs	r3, r3, r6
 8007366:	50a3      	str	r3, [r4, r2]
 8007368:	e7b3      	b.n	80072d2 <_malloc_r+0x22>
 800736a:	6862      	ldr	r2, [r4, #4]
 800736c:	42a3      	cmp	r3, r4
 800736e:	bf0c      	ite	eq
 8007370:	6032      	streq	r2, [r6, #0]
 8007372:	605a      	strne	r2, [r3, #4]
 8007374:	e7ec      	b.n	8007350 <_malloc_r+0xa0>
 8007376:	4623      	mov	r3, r4
 8007378:	6864      	ldr	r4, [r4, #4]
 800737a:	e7b2      	b.n	80072e2 <_malloc_r+0x32>
 800737c:	4634      	mov	r4, r6
 800737e:	6876      	ldr	r6, [r6, #4]
 8007380:	e7b9      	b.n	80072f6 <_malloc_r+0x46>
 8007382:	230c      	movs	r3, #12
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	4638      	mov	r0, r7
 8007388:	f000 ff68 	bl	800825c <__malloc_unlock>
 800738c:	e7a1      	b.n	80072d2 <_malloc_r+0x22>
 800738e:	6025      	str	r5, [r4, #0]
 8007390:	e7de      	b.n	8007350 <_malloc_r+0xa0>
 8007392:	bf00      	nop
 8007394:	20000928 	.word	0x20000928

08007398 <__ssputs_r>:
 8007398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	688e      	ldr	r6, [r1, #8]
 800739e:	429e      	cmp	r6, r3
 80073a0:	4682      	mov	sl, r0
 80073a2:	460c      	mov	r4, r1
 80073a4:	4690      	mov	r8, r2
 80073a6:	461f      	mov	r7, r3
 80073a8:	d838      	bhi.n	800741c <__ssputs_r+0x84>
 80073aa:	898a      	ldrh	r2, [r1, #12]
 80073ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073b0:	d032      	beq.n	8007418 <__ssputs_r+0x80>
 80073b2:	6825      	ldr	r5, [r4, #0]
 80073b4:	6909      	ldr	r1, [r1, #16]
 80073b6:	eba5 0901 	sub.w	r9, r5, r1
 80073ba:	6965      	ldr	r5, [r4, #20]
 80073bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073c4:	3301      	adds	r3, #1
 80073c6:	444b      	add	r3, r9
 80073c8:	106d      	asrs	r5, r5, #1
 80073ca:	429d      	cmp	r5, r3
 80073cc:	bf38      	it	cc
 80073ce:	461d      	movcc	r5, r3
 80073d0:	0553      	lsls	r3, r2, #21
 80073d2:	d531      	bpl.n	8007438 <__ssputs_r+0xa0>
 80073d4:	4629      	mov	r1, r5
 80073d6:	f7ff ff6b 	bl	80072b0 <_malloc_r>
 80073da:	4606      	mov	r6, r0
 80073dc:	b950      	cbnz	r0, 80073f4 <__ssputs_r+0x5c>
 80073de:	230c      	movs	r3, #12
 80073e0:	f8ca 3000 	str.w	r3, [sl]
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f4:	6921      	ldr	r1, [r4, #16]
 80073f6:	464a      	mov	r2, r9
 80073f8:	f7ff fde8 	bl	8006fcc <memcpy>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007406:	81a3      	strh	r3, [r4, #12]
 8007408:	6126      	str	r6, [r4, #16]
 800740a:	6165      	str	r5, [r4, #20]
 800740c:	444e      	add	r6, r9
 800740e:	eba5 0509 	sub.w	r5, r5, r9
 8007412:	6026      	str	r6, [r4, #0]
 8007414:	60a5      	str	r5, [r4, #8]
 8007416:	463e      	mov	r6, r7
 8007418:	42be      	cmp	r6, r7
 800741a:	d900      	bls.n	800741e <__ssputs_r+0x86>
 800741c:	463e      	mov	r6, r7
 800741e:	6820      	ldr	r0, [r4, #0]
 8007420:	4632      	mov	r2, r6
 8007422:	4641      	mov	r1, r8
 8007424:	f000 fefa 	bl	800821c <memmove>
 8007428:	68a3      	ldr	r3, [r4, #8]
 800742a:	1b9b      	subs	r3, r3, r6
 800742c:	60a3      	str	r3, [r4, #8]
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	4433      	add	r3, r6
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	2000      	movs	r0, #0
 8007436:	e7db      	b.n	80073f0 <__ssputs_r+0x58>
 8007438:	462a      	mov	r2, r5
 800743a:	f000 ff15 	bl	8008268 <_realloc_r>
 800743e:	4606      	mov	r6, r0
 8007440:	2800      	cmp	r0, #0
 8007442:	d1e1      	bne.n	8007408 <__ssputs_r+0x70>
 8007444:	6921      	ldr	r1, [r4, #16]
 8007446:	4650      	mov	r0, sl
 8007448:	f7ff fec6 	bl	80071d8 <_free_r>
 800744c:	e7c7      	b.n	80073de <__ssputs_r+0x46>
	...

08007450 <_svfiprintf_r>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	4698      	mov	r8, r3
 8007456:	898b      	ldrh	r3, [r1, #12]
 8007458:	061b      	lsls	r3, r3, #24
 800745a:	b09d      	sub	sp, #116	; 0x74
 800745c:	4607      	mov	r7, r0
 800745e:	460d      	mov	r5, r1
 8007460:	4614      	mov	r4, r2
 8007462:	d50e      	bpl.n	8007482 <_svfiprintf_r+0x32>
 8007464:	690b      	ldr	r3, [r1, #16]
 8007466:	b963      	cbnz	r3, 8007482 <_svfiprintf_r+0x32>
 8007468:	2140      	movs	r1, #64	; 0x40
 800746a:	f7ff ff21 	bl	80072b0 <_malloc_r>
 800746e:	6028      	str	r0, [r5, #0]
 8007470:	6128      	str	r0, [r5, #16]
 8007472:	b920      	cbnz	r0, 800747e <_svfiprintf_r+0x2e>
 8007474:	230c      	movs	r3, #12
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	f04f 30ff 	mov.w	r0, #4294967295
 800747c:	e0d1      	b.n	8007622 <_svfiprintf_r+0x1d2>
 800747e:	2340      	movs	r3, #64	; 0x40
 8007480:	616b      	str	r3, [r5, #20]
 8007482:	2300      	movs	r3, #0
 8007484:	9309      	str	r3, [sp, #36]	; 0x24
 8007486:	2320      	movs	r3, #32
 8007488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800748c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007490:	2330      	movs	r3, #48	; 0x30
 8007492:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800763c <_svfiprintf_r+0x1ec>
 8007496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800749a:	f04f 0901 	mov.w	r9, #1
 800749e:	4623      	mov	r3, r4
 80074a0:	469a      	mov	sl, r3
 80074a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074a6:	b10a      	cbz	r2, 80074ac <_svfiprintf_r+0x5c>
 80074a8:	2a25      	cmp	r2, #37	; 0x25
 80074aa:	d1f9      	bne.n	80074a0 <_svfiprintf_r+0x50>
 80074ac:	ebba 0b04 	subs.w	fp, sl, r4
 80074b0:	d00b      	beq.n	80074ca <_svfiprintf_r+0x7a>
 80074b2:	465b      	mov	r3, fp
 80074b4:	4622      	mov	r2, r4
 80074b6:	4629      	mov	r1, r5
 80074b8:	4638      	mov	r0, r7
 80074ba:	f7ff ff6d 	bl	8007398 <__ssputs_r>
 80074be:	3001      	adds	r0, #1
 80074c0:	f000 80aa 	beq.w	8007618 <_svfiprintf_r+0x1c8>
 80074c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074c6:	445a      	add	r2, fp
 80074c8:	9209      	str	r2, [sp, #36]	; 0x24
 80074ca:	f89a 3000 	ldrb.w	r3, [sl]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80a2 	beq.w	8007618 <_svfiprintf_r+0x1c8>
 80074d4:	2300      	movs	r3, #0
 80074d6:	f04f 32ff 	mov.w	r2, #4294967295
 80074da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074de:	f10a 0a01 	add.w	sl, sl, #1
 80074e2:	9304      	str	r3, [sp, #16]
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074ea:	931a      	str	r3, [sp, #104]	; 0x68
 80074ec:	4654      	mov	r4, sl
 80074ee:	2205      	movs	r2, #5
 80074f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f4:	4851      	ldr	r0, [pc, #324]	; (800763c <_svfiprintf_r+0x1ec>)
 80074f6:	f7f8 fe73 	bl	80001e0 <memchr>
 80074fa:	9a04      	ldr	r2, [sp, #16]
 80074fc:	b9d8      	cbnz	r0, 8007536 <_svfiprintf_r+0xe6>
 80074fe:	06d0      	lsls	r0, r2, #27
 8007500:	bf44      	itt	mi
 8007502:	2320      	movmi	r3, #32
 8007504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007508:	0711      	lsls	r1, r2, #28
 800750a:	bf44      	itt	mi
 800750c:	232b      	movmi	r3, #43	; 0x2b
 800750e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007512:	f89a 3000 	ldrb.w	r3, [sl]
 8007516:	2b2a      	cmp	r3, #42	; 0x2a
 8007518:	d015      	beq.n	8007546 <_svfiprintf_r+0xf6>
 800751a:	9a07      	ldr	r2, [sp, #28]
 800751c:	4654      	mov	r4, sl
 800751e:	2000      	movs	r0, #0
 8007520:	f04f 0c0a 	mov.w	ip, #10
 8007524:	4621      	mov	r1, r4
 8007526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800752a:	3b30      	subs	r3, #48	; 0x30
 800752c:	2b09      	cmp	r3, #9
 800752e:	d94e      	bls.n	80075ce <_svfiprintf_r+0x17e>
 8007530:	b1b0      	cbz	r0, 8007560 <_svfiprintf_r+0x110>
 8007532:	9207      	str	r2, [sp, #28]
 8007534:	e014      	b.n	8007560 <_svfiprintf_r+0x110>
 8007536:	eba0 0308 	sub.w	r3, r0, r8
 800753a:	fa09 f303 	lsl.w	r3, r9, r3
 800753e:	4313      	orrs	r3, r2
 8007540:	9304      	str	r3, [sp, #16]
 8007542:	46a2      	mov	sl, r4
 8007544:	e7d2      	b.n	80074ec <_svfiprintf_r+0x9c>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	1d19      	adds	r1, r3, #4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	9103      	str	r1, [sp, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	bfbb      	ittet	lt
 8007552:	425b      	neglt	r3, r3
 8007554:	f042 0202 	orrlt.w	r2, r2, #2
 8007558:	9307      	strge	r3, [sp, #28]
 800755a:	9307      	strlt	r3, [sp, #28]
 800755c:	bfb8      	it	lt
 800755e:	9204      	strlt	r2, [sp, #16]
 8007560:	7823      	ldrb	r3, [r4, #0]
 8007562:	2b2e      	cmp	r3, #46	; 0x2e
 8007564:	d10c      	bne.n	8007580 <_svfiprintf_r+0x130>
 8007566:	7863      	ldrb	r3, [r4, #1]
 8007568:	2b2a      	cmp	r3, #42	; 0x2a
 800756a:	d135      	bne.n	80075d8 <_svfiprintf_r+0x188>
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	9203      	str	r2, [sp, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	bfb8      	it	lt
 8007578:	f04f 33ff 	movlt.w	r3, #4294967295
 800757c:	3402      	adds	r4, #2
 800757e:	9305      	str	r3, [sp, #20]
 8007580:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800764c <_svfiprintf_r+0x1fc>
 8007584:	7821      	ldrb	r1, [r4, #0]
 8007586:	2203      	movs	r2, #3
 8007588:	4650      	mov	r0, sl
 800758a:	f7f8 fe29 	bl	80001e0 <memchr>
 800758e:	b140      	cbz	r0, 80075a2 <_svfiprintf_r+0x152>
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	eba0 000a 	sub.w	r0, r0, sl
 8007596:	fa03 f000 	lsl.w	r0, r3, r0
 800759a:	9b04      	ldr	r3, [sp, #16]
 800759c:	4303      	orrs	r3, r0
 800759e:	3401      	adds	r4, #1
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a6:	4826      	ldr	r0, [pc, #152]	; (8007640 <_svfiprintf_r+0x1f0>)
 80075a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ac:	2206      	movs	r2, #6
 80075ae:	f7f8 fe17 	bl	80001e0 <memchr>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d038      	beq.n	8007628 <_svfiprintf_r+0x1d8>
 80075b6:	4b23      	ldr	r3, [pc, #140]	; (8007644 <_svfiprintf_r+0x1f4>)
 80075b8:	bb1b      	cbnz	r3, 8007602 <_svfiprintf_r+0x1b2>
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	3307      	adds	r3, #7
 80075be:	f023 0307 	bic.w	r3, r3, #7
 80075c2:	3308      	adds	r3, #8
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c8:	4433      	add	r3, r6
 80075ca:	9309      	str	r3, [sp, #36]	; 0x24
 80075cc:	e767      	b.n	800749e <_svfiprintf_r+0x4e>
 80075ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d2:	460c      	mov	r4, r1
 80075d4:	2001      	movs	r0, #1
 80075d6:	e7a5      	b.n	8007524 <_svfiprintf_r+0xd4>
 80075d8:	2300      	movs	r3, #0
 80075da:	3401      	adds	r4, #1
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	4619      	mov	r1, r3
 80075e0:	f04f 0c0a 	mov.w	ip, #10
 80075e4:	4620      	mov	r0, r4
 80075e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ea:	3a30      	subs	r2, #48	; 0x30
 80075ec:	2a09      	cmp	r2, #9
 80075ee:	d903      	bls.n	80075f8 <_svfiprintf_r+0x1a8>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0c5      	beq.n	8007580 <_svfiprintf_r+0x130>
 80075f4:	9105      	str	r1, [sp, #20]
 80075f6:	e7c3      	b.n	8007580 <_svfiprintf_r+0x130>
 80075f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80075fc:	4604      	mov	r4, r0
 80075fe:	2301      	movs	r3, #1
 8007600:	e7f0      	b.n	80075e4 <_svfiprintf_r+0x194>
 8007602:	ab03      	add	r3, sp, #12
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	462a      	mov	r2, r5
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <_svfiprintf_r+0x1f8>)
 800760a:	a904      	add	r1, sp, #16
 800760c:	4638      	mov	r0, r7
 800760e:	f3af 8000 	nop.w
 8007612:	1c42      	adds	r2, r0, #1
 8007614:	4606      	mov	r6, r0
 8007616:	d1d6      	bne.n	80075c6 <_svfiprintf_r+0x176>
 8007618:	89ab      	ldrh	r3, [r5, #12]
 800761a:	065b      	lsls	r3, r3, #25
 800761c:	f53f af2c 	bmi.w	8007478 <_svfiprintf_r+0x28>
 8007620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007622:	b01d      	add	sp, #116	; 0x74
 8007624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007628:	ab03      	add	r3, sp, #12
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	462a      	mov	r2, r5
 800762e:	4b06      	ldr	r3, [pc, #24]	; (8007648 <_svfiprintf_r+0x1f8>)
 8007630:	a904      	add	r1, sp, #16
 8007632:	4638      	mov	r0, r7
 8007634:	f000 f9d4 	bl	80079e0 <_printf_i>
 8007638:	e7eb      	b.n	8007612 <_svfiprintf_r+0x1c2>
 800763a:	bf00      	nop
 800763c:	08008cf2 	.word	0x08008cf2
 8007640:	08008cfc 	.word	0x08008cfc
 8007644:	00000000 	.word	0x00000000
 8007648:	08007399 	.word	0x08007399
 800764c:	08008cf8 	.word	0x08008cf8

08007650 <__sfputc_r>:
 8007650:	6893      	ldr	r3, [r2, #8]
 8007652:	3b01      	subs	r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	b410      	push	{r4}
 8007658:	6093      	str	r3, [r2, #8]
 800765a:	da08      	bge.n	800766e <__sfputc_r+0x1e>
 800765c:	6994      	ldr	r4, [r2, #24]
 800765e:	42a3      	cmp	r3, r4
 8007660:	db01      	blt.n	8007666 <__sfputc_r+0x16>
 8007662:	290a      	cmp	r1, #10
 8007664:	d103      	bne.n	800766e <__sfputc_r+0x1e>
 8007666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800766a:	f000 baef 	b.w	8007c4c <__swbuf_r>
 800766e:	6813      	ldr	r3, [r2, #0]
 8007670:	1c58      	adds	r0, r3, #1
 8007672:	6010      	str	r0, [r2, #0]
 8007674:	7019      	strb	r1, [r3, #0]
 8007676:	4608      	mov	r0, r1
 8007678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800767c:	4770      	bx	lr

0800767e <__sfputs_r>:
 800767e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007680:	4606      	mov	r6, r0
 8007682:	460f      	mov	r7, r1
 8007684:	4614      	mov	r4, r2
 8007686:	18d5      	adds	r5, r2, r3
 8007688:	42ac      	cmp	r4, r5
 800768a:	d101      	bne.n	8007690 <__sfputs_r+0x12>
 800768c:	2000      	movs	r0, #0
 800768e:	e007      	b.n	80076a0 <__sfputs_r+0x22>
 8007690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007694:	463a      	mov	r2, r7
 8007696:	4630      	mov	r0, r6
 8007698:	f7ff ffda 	bl	8007650 <__sfputc_r>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d1f3      	bne.n	8007688 <__sfputs_r+0xa>
 80076a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076a4 <_vfiprintf_r>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	460d      	mov	r5, r1
 80076aa:	b09d      	sub	sp, #116	; 0x74
 80076ac:	4614      	mov	r4, r2
 80076ae:	4698      	mov	r8, r3
 80076b0:	4606      	mov	r6, r0
 80076b2:	b118      	cbz	r0, 80076bc <_vfiprintf_r+0x18>
 80076b4:	6983      	ldr	r3, [r0, #24]
 80076b6:	b90b      	cbnz	r3, 80076bc <_vfiprintf_r+0x18>
 80076b8:	f000 fcaa 	bl	8008010 <__sinit>
 80076bc:	4b89      	ldr	r3, [pc, #548]	; (80078e4 <_vfiprintf_r+0x240>)
 80076be:	429d      	cmp	r5, r3
 80076c0:	d11b      	bne.n	80076fa <_vfiprintf_r+0x56>
 80076c2:	6875      	ldr	r5, [r6, #4]
 80076c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076c6:	07d9      	lsls	r1, r3, #31
 80076c8:	d405      	bmi.n	80076d6 <_vfiprintf_r+0x32>
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	059a      	lsls	r2, r3, #22
 80076ce:	d402      	bmi.n	80076d6 <_vfiprintf_r+0x32>
 80076d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076d2:	f000 fd3b 	bl	800814c <__retarget_lock_acquire_recursive>
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	071b      	lsls	r3, r3, #28
 80076da:	d501      	bpl.n	80076e0 <_vfiprintf_r+0x3c>
 80076dc:	692b      	ldr	r3, [r5, #16]
 80076de:	b9eb      	cbnz	r3, 800771c <_vfiprintf_r+0x78>
 80076e0:	4629      	mov	r1, r5
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 fb04 	bl	8007cf0 <__swsetup_r>
 80076e8:	b1c0      	cbz	r0, 800771c <_vfiprintf_r+0x78>
 80076ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ec:	07dc      	lsls	r4, r3, #31
 80076ee:	d50e      	bpl.n	800770e <_vfiprintf_r+0x6a>
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	b01d      	add	sp, #116	; 0x74
 80076f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fa:	4b7b      	ldr	r3, [pc, #492]	; (80078e8 <_vfiprintf_r+0x244>)
 80076fc:	429d      	cmp	r5, r3
 80076fe:	d101      	bne.n	8007704 <_vfiprintf_r+0x60>
 8007700:	68b5      	ldr	r5, [r6, #8]
 8007702:	e7df      	b.n	80076c4 <_vfiprintf_r+0x20>
 8007704:	4b79      	ldr	r3, [pc, #484]	; (80078ec <_vfiprintf_r+0x248>)
 8007706:	429d      	cmp	r5, r3
 8007708:	bf08      	it	eq
 800770a:	68f5      	ldreq	r5, [r6, #12]
 800770c:	e7da      	b.n	80076c4 <_vfiprintf_r+0x20>
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	0598      	lsls	r0, r3, #22
 8007712:	d4ed      	bmi.n	80076f0 <_vfiprintf_r+0x4c>
 8007714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007716:	f000 fd1a 	bl	800814e <__retarget_lock_release_recursive>
 800771a:	e7e9      	b.n	80076f0 <_vfiprintf_r+0x4c>
 800771c:	2300      	movs	r3, #0
 800771e:	9309      	str	r3, [sp, #36]	; 0x24
 8007720:	2320      	movs	r3, #32
 8007722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007726:	f8cd 800c 	str.w	r8, [sp, #12]
 800772a:	2330      	movs	r3, #48	; 0x30
 800772c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078f0 <_vfiprintf_r+0x24c>
 8007730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007734:	f04f 0901 	mov.w	r9, #1
 8007738:	4623      	mov	r3, r4
 800773a:	469a      	mov	sl, r3
 800773c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007740:	b10a      	cbz	r2, 8007746 <_vfiprintf_r+0xa2>
 8007742:	2a25      	cmp	r2, #37	; 0x25
 8007744:	d1f9      	bne.n	800773a <_vfiprintf_r+0x96>
 8007746:	ebba 0b04 	subs.w	fp, sl, r4
 800774a:	d00b      	beq.n	8007764 <_vfiprintf_r+0xc0>
 800774c:	465b      	mov	r3, fp
 800774e:	4622      	mov	r2, r4
 8007750:	4629      	mov	r1, r5
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff ff93 	bl	800767e <__sfputs_r>
 8007758:	3001      	adds	r0, #1
 800775a:	f000 80aa 	beq.w	80078b2 <_vfiprintf_r+0x20e>
 800775e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007760:	445a      	add	r2, fp
 8007762:	9209      	str	r2, [sp, #36]	; 0x24
 8007764:	f89a 3000 	ldrb.w	r3, [sl]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80a2 	beq.w	80078b2 <_vfiprintf_r+0x20e>
 800776e:	2300      	movs	r3, #0
 8007770:	f04f 32ff 	mov.w	r2, #4294967295
 8007774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007778:	f10a 0a01 	add.w	sl, sl, #1
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007784:	931a      	str	r3, [sp, #104]	; 0x68
 8007786:	4654      	mov	r4, sl
 8007788:	2205      	movs	r2, #5
 800778a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778e:	4858      	ldr	r0, [pc, #352]	; (80078f0 <_vfiprintf_r+0x24c>)
 8007790:	f7f8 fd26 	bl	80001e0 <memchr>
 8007794:	9a04      	ldr	r2, [sp, #16]
 8007796:	b9d8      	cbnz	r0, 80077d0 <_vfiprintf_r+0x12c>
 8007798:	06d1      	lsls	r1, r2, #27
 800779a:	bf44      	itt	mi
 800779c:	2320      	movmi	r3, #32
 800779e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a2:	0713      	lsls	r3, r2, #28
 80077a4:	bf44      	itt	mi
 80077a6:	232b      	movmi	r3, #43	; 0x2b
 80077a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ac:	f89a 3000 	ldrb.w	r3, [sl]
 80077b0:	2b2a      	cmp	r3, #42	; 0x2a
 80077b2:	d015      	beq.n	80077e0 <_vfiprintf_r+0x13c>
 80077b4:	9a07      	ldr	r2, [sp, #28]
 80077b6:	4654      	mov	r4, sl
 80077b8:	2000      	movs	r0, #0
 80077ba:	f04f 0c0a 	mov.w	ip, #10
 80077be:	4621      	mov	r1, r4
 80077c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c4:	3b30      	subs	r3, #48	; 0x30
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d94e      	bls.n	8007868 <_vfiprintf_r+0x1c4>
 80077ca:	b1b0      	cbz	r0, 80077fa <_vfiprintf_r+0x156>
 80077cc:	9207      	str	r2, [sp, #28]
 80077ce:	e014      	b.n	80077fa <_vfiprintf_r+0x156>
 80077d0:	eba0 0308 	sub.w	r3, r0, r8
 80077d4:	fa09 f303 	lsl.w	r3, r9, r3
 80077d8:	4313      	orrs	r3, r2
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	46a2      	mov	sl, r4
 80077de:	e7d2      	b.n	8007786 <_vfiprintf_r+0xe2>
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	1d19      	adds	r1, r3, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	9103      	str	r1, [sp, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfbb      	ittet	lt
 80077ec:	425b      	neglt	r3, r3
 80077ee:	f042 0202 	orrlt.w	r2, r2, #2
 80077f2:	9307      	strge	r3, [sp, #28]
 80077f4:	9307      	strlt	r3, [sp, #28]
 80077f6:	bfb8      	it	lt
 80077f8:	9204      	strlt	r2, [sp, #16]
 80077fa:	7823      	ldrb	r3, [r4, #0]
 80077fc:	2b2e      	cmp	r3, #46	; 0x2e
 80077fe:	d10c      	bne.n	800781a <_vfiprintf_r+0x176>
 8007800:	7863      	ldrb	r3, [r4, #1]
 8007802:	2b2a      	cmp	r3, #42	; 0x2a
 8007804:	d135      	bne.n	8007872 <_vfiprintf_r+0x1ce>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	9203      	str	r2, [sp, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	bfb8      	it	lt
 8007812:	f04f 33ff 	movlt.w	r3, #4294967295
 8007816:	3402      	adds	r4, #2
 8007818:	9305      	str	r3, [sp, #20]
 800781a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007900 <_vfiprintf_r+0x25c>
 800781e:	7821      	ldrb	r1, [r4, #0]
 8007820:	2203      	movs	r2, #3
 8007822:	4650      	mov	r0, sl
 8007824:	f7f8 fcdc 	bl	80001e0 <memchr>
 8007828:	b140      	cbz	r0, 800783c <_vfiprintf_r+0x198>
 800782a:	2340      	movs	r3, #64	; 0x40
 800782c:	eba0 000a 	sub.w	r0, r0, sl
 8007830:	fa03 f000 	lsl.w	r0, r3, r0
 8007834:	9b04      	ldr	r3, [sp, #16]
 8007836:	4303      	orrs	r3, r0
 8007838:	3401      	adds	r4, #1
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007840:	482c      	ldr	r0, [pc, #176]	; (80078f4 <_vfiprintf_r+0x250>)
 8007842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007846:	2206      	movs	r2, #6
 8007848:	f7f8 fcca 	bl	80001e0 <memchr>
 800784c:	2800      	cmp	r0, #0
 800784e:	d03f      	beq.n	80078d0 <_vfiprintf_r+0x22c>
 8007850:	4b29      	ldr	r3, [pc, #164]	; (80078f8 <_vfiprintf_r+0x254>)
 8007852:	bb1b      	cbnz	r3, 800789c <_vfiprintf_r+0x1f8>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	3307      	adds	r3, #7
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	3308      	adds	r3, #8
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007862:	443b      	add	r3, r7
 8007864:	9309      	str	r3, [sp, #36]	; 0x24
 8007866:	e767      	b.n	8007738 <_vfiprintf_r+0x94>
 8007868:	fb0c 3202 	mla	r2, ip, r2, r3
 800786c:	460c      	mov	r4, r1
 800786e:	2001      	movs	r0, #1
 8007870:	e7a5      	b.n	80077be <_vfiprintf_r+0x11a>
 8007872:	2300      	movs	r3, #0
 8007874:	3401      	adds	r4, #1
 8007876:	9305      	str	r3, [sp, #20]
 8007878:	4619      	mov	r1, r3
 800787a:	f04f 0c0a 	mov.w	ip, #10
 800787e:	4620      	mov	r0, r4
 8007880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007884:	3a30      	subs	r2, #48	; 0x30
 8007886:	2a09      	cmp	r2, #9
 8007888:	d903      	bls.n	8007892 <_vfiprintf_r+0x1ee>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0c5      	beq.n	800781a <_vfiprintf_r+0x176>
 800788e:	9105      	str	r1, [sp, #20]
 8007890:	e7c3      	b.n	800781a <_vfiprintf_r+0x176>
 8007892:	fb0c 2101 	mla	r1, ip, r1, r2
 8007896:	4604      	mov	r4, r0
 8007898:	2301      	movs	r3, #1
 800789a:	e7f0      	b.n	800787e <_vfiprintf_r+0x1da>
 800789c:	ab03      	add	r3, sp, #12
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	462a      	mov	r2, r5
 80078a2:	4b16      	ldr	r3, [pc, #88]	; (80078fc <_vfiprintf_r+0x258>)
 80078a4:	a904      	add	r1, sp, #16
 80078a6:	4630      	mov	r0, r6
 80078a8:	f3af 8000 	nop.w
 80078ac:	4607      	mov	r7, r0
 80078ae:	1c78      	adds	r0, r7, #1
 80078b0:	d1d6      	bne.n	8007860 <_vfiprintf_r+0x1bc>
 80078b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078b4:	07d9      	lsls	r1, r3, #31
 80078b6:	d405      	bmi.n	80078c4 <_vfiprintf_r+0x220>
 80078b8:	89ab      	ldrh	r3, [r5, #12]
 80078ba:	059a      	lsls	r2, r3, #22
 80078bc:	d402      	bmi.n	80078c4 <_vfiprintf_r+0x220>
 80078be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078c0:	f000 fc45 	bl	800814e <__retarget_lock_release_recursive>
 80078c4:	89ab      	ldrh	r3, [r5, #12]
 80078c6:	065b      	lsls	r3, r3, #25
 80078c8:	f53f af12 	bmi.w	80076f0 <_vfiprintf_r+0x4c>
 80078cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ce:	e711      	b.n	80076f4 <_vfiprintf_r+0x50>
 80078d0:	ab03      	add	r3, sp, #12
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	462a      	mov	r2, r5
 80078d6:	4b09      	ldr	r3, [pc, #36]	; (80078fc <_vfiprintf_r+0x258>)
 80078d8:	a904      	add	r1, sp, #16
 80078da:	4630      	mov	r0, r6
 80078dc:	f000 f880 	bl	80079e0 <_printf_i>
 80078e0:	e7e4      	b.n	80078ac <_vfiprintf_r+0x208>
 80078e2:	bf00      	nop
 80078e4:	08008d48 	.word	0x08008d48
 80078e8:	08008d68 	.word	0x08008d68
 80078ec:	08008d28 	.word	0x08008d28
 80078f0:	08008cf2 	.word	0x08008cf2
 80078f4:	08008cfc 	.word	0x08008cfc
 80078f8:	00000000 	.word	0x00000000
 80078fc:	0800767f 	.word	0x0800767f
 8007900:	08008cf8 	.word	0x08008cf8

08007904 <_printf_common>:
 8007904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007908:	4616      	mov	r6, r2
 800790a:	4699      	mov	r9, r3
 800790c:	688a      	ldr	r2, [r1, #8]
 800790e:	690b      	ldr	r3, [r1, #16]
 8007910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007914:	4293      	cmp	r3, r2
 8007916:	bfb8      	it	lt
 8007918:	4613      	movlt	r3, r2
 800791a:	6033      	str	r3, [r6, #0]
 800791c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007920:	4607      	mov	r7, r0
 8007922:	460c      	mov	r4, r1
 8007924:	b10a      	cbz	r2, 800792a <_printf_common+0x26>
 8007926:	3301      	adds	r3, #1
 8007928:	6033      	str	r3, [r6, #0]
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	0699      	lsls	r1, r3, #26
 800792e:	bf42      	ittt	mi
 8007930:	6833      	ldrmi	r3, [r6, #0]
 8007932:	3302      	addmi	r3, #2
 8007934:	6033      	strmi	r3, [r6, #0]
 8007936:	6825      	ldr	r5, [r4, #0]
 8007938:	f015 0506 	ands.w	r5, r5, #6
 800793c:	d106      	bne.n	800794c <_printf_common+0x48>
 800793e:	f104 0a19 	add.w	sl, r4, #25
 8007942:	68e3      	ldr	r3, [r4, #12]
 8007944:	6832      	ldr	r2, [r6, #0]
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	42ab      	cmp	r3, r5
 800794a:	dc26      	bgt.n	800799a <_printf_common+0x96>
 800794c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007950:	1e13      	subs	r3, r2, #0
 8007952:	6822      	ldr	r2, [r4, #0]
 8007954:	bf18      	it	ne
 8007956:	2301      	movne	r3, #1
 8007958:	0692      	lsls	r2, r2, #26
 800795a:	d42b      	bmi.n	80079b4 <_printf_common+0xb0>
 800795c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007960:	4649      	mov	r1, r9
 8007962:	4638      	mov	r0, r7
 8007964:	47c0      	blx	r8
 8007966:	3001      	adds	r0, #1
 8007968:	d01e      	beq.n	80079a8 <_printf_common+0xa4>
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	68e5      	ldr	r5, [r4, #12]
 800796e:	6832      	ldr	r2, [r6, #0]
 8007970:	f003 0306 	and.w	r3, r3, #6
 8007974:	2b04      	cmp	r3, #4
 8007976:	bf08      	it	eq
 8007978:	1aad      	subeq	r5, r5, r2
 800797a:	68a3      	ldr	r3, [r4, #8]
 800797c:	6922      	ldr	r2, [r4, #16]
 800797e:	bf0c      	ite	eq
 8007980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007984:	2500      	movne	r5, #0
 8007986:	4293      	cmp	r3, r2
 8007988:	bfc4      	itt	gt
 800798a:	1a9b      	subgt	r3, r3, r2
 800798c:	18ed      	addgt	r5, r5, r3
 800798e:	2600      	movs	r6, #0
 8007990:	341a      	adds	r4, #26
 8007992:	42b5      	cmp	r5, r6
 8007994:	d11a      	bne.n	80079cc <_printf_common+0xc8>
 8007996:	2000      	movs	r0, #0
 8007998:	e008      	b.n	80079ac <_printf_common+0xa8>
 800799a:	2301      	movs	r3, #1
 800799c:	4652      	mov	r2, sl
 800799e:	4649      	mov	r1, r9
 80079a0:	4638      	mov	r0, r7
 80079a2:	47c0      	blx	r8
 80079a4:	3001      	adds	r0, #1
 80079a6:	d103      	bne.n	80079b0 <_printf_common+0xac>
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b0:	3501      	adds	r5, #1
 80079b2:	e7c6      	b.n	8007942 <_printf_common+0x3e>
 80079b4:	18e1      	adds	r1, r4, r3
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	2030      	movs	r0, #48	; 0x30
 80079ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079be:	4422      	add	r2, r4
 80079c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079c8:	3302      	adds	r3, #2
 80079ca:	e7c7      	b.n	800795c <_printf_common+0x58>
 80079cc:	2301      	movs	r3, #1
 80079ce:	4622      	mov	r2, r4
 80079d0:	4649      	mov	r1, r9
 80079d2:	4638      	mov	r0, r7
 80079d4:	47c0      	blx	r8
 80079d6:	3001      	adds	r0, #1
 80079d8:	d0e6      	beq.n	80079a8 <_printf_common+0xa4>
 80079da:	3601      	adds	r6, #1
 80079dc:	e7d9      	b.n	8007992 <_printf_common+0x8e>
	...

080079e0 <_printf_i>:
 80079e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079e4:	7e0f      	ldrb	r7, [r1, #24]
 80079e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079e8:	2f78      	cmp	r7, #120	; 0x78
 80079ea:	4691      	mov	r9, r2
 80079ec:	4680      	mov	r8, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	469a      	mov	sl, r3
 80079f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079f6:	d807      	bhi.n	8007a08 <_printf_i+0x28>
 80079f8:	2f62      	cmp	r7, #98	; 0x62
 80079fa:	d80a      	bhi.n	8007a12 <_printf_i+0x32>
 80079fc:	2f00      	cmp	r7, #0
 80079fe:	f000 80d8 	beq.w	8007bb2 <_printf_i+0x1d2>
 8007a02:	2f58      	cmp	r7, #88	; 0x58
 8007a04:	f000 80a3 	beq.w	8007b4e <_printf_i+0x16e>
 8007a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a10:	e03a      	b.n	8007a88 <_printf_i+0xa8>
 8007a12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a16:	2b15      	cmp	r3, #21
 8007a18:	d8f6      	bhi.n	8007a08 <_printf_i+0x28>
 8007a1a:	a101      	add	r1, pc, #4	; (adr r1, 8007a20 <_printf_i+0x40>)
 8007a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a20:	08007a79 	.word	0x08007a79
 8007a24:	08007a8d 	.word	0x08007a8d
 8007a28:	08007a09 	.word	0x08007a09
 8007a2c:	08007a09 	.word	0x08007a09
 8007a30:	08007a09 	.word	0x08007a09
 8007a34:	08007a09 	.word	0x08007a09
 8007a38:	08007a8d 	.word	0x08007a8d
 8007a3c:	08007a09 	.word	0x08007a09
 8007a40:	08007a09 	.word	0x08007a09
 8007a44:	08007a09 	.word	0x08007a09
 8007a48:	08007a09 	.word	0x08007a09
 8007a4c:	08007b99 	.word	0x08007b99
 8007a50:	08007abd 	.word	0x08007abd
 8007a54:	08007b7b 	.word	0x08007b7b
 8007a58:	08007a09 	.word	0x08007a09
 8007a5c:	08007a09 	.word	0x08007a09
 8007a60:	08007bbb 	.word	0x08007bbb
 8007a64:	08007a09 	.word	0x08007a09
 8007a68:	08007abd 	.word	0x08007abd
 8007a6c:	08007a09 	.word	0x08007a09
 8007a70:	08007a09 	.word	0x08007a09
 8007a74:	08007b83 	.word	0x08007b83
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	1d1a      	adds	r2, r3, #4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	602a      	str	r2, [r5, #0]
 8007a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0a3      	b.n	8007bd4 <_printf_i+0x1f4>
 8007a8c:	6820      	ldr	r0, [r4, #0]
 8007a8e:	6829      	ldr	r1, [r5, #0]
 8007a90:	0606      	lsls	r6, r0, #24
 8007a92:	f101 0304 	add.w	r3, r1, #4
 8007a96:	d50a      	bpl.n	8007aae <_printf_i+0xce>
 8007a98:	680e      	ldr	r6, [r1, #0]
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	2e00      	cmp	r6, #0
 8007a9e:	da03      	bge.n	8007aa8 <_printf_i+0xc8>
 8007aa0:	232d      	movs	r3, #45	; 0x2d
 8007aa2:	4276      	negs	r6, r6
 8007aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa8:	485e      	ldr	r0, [pc, #376]	; (8007c24 <_printf_i+0x244>)
 8007aaa:	230a      	movs	r3, #10
 8007aac:	e019      	b.n	8007ae2 <_printf_i+0x102>
 8007aae:	680e      	ldr	r6, [r1, #0]
 8007ab0:	602b      	str	r3, [r5, #0]
 8007ab2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ab6:	bf18      	it	ne
 8007ab8:	b236      	sxthne	r6, r6
 8007aba:	e7ef      	b.n	8007a9c <_printf_i+0xbc>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	6820      	ldr	r0, [r4, #0]
 8007ac0:	1d19      	adds	r1, r3, #4
 8007ac2:	6029      	str	r1, [r5, #0]
 8007ac4:	0601      	lsls	r1, r0, #24
 8007ac6:	d501      	bpl.n	8007acc <_printf_i+0xec>
 8007ac8:	681e      	ldr	r6, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <_printf_i+0xf2>
 8007acc:	0646      	lsls	r6, r0, #25
 8007ace:	d5fb      	bpl.n	8007ac8 <_printf_i+0xe8>
 8007ad0:	881e      	ldrh	r6, [r3, #0]
 8007ad2:	4854      	ldr	r0, [pc, #336]	; (8007c24 <_printf_i+0x244>)
 8007ad4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2308      	moveq	r3, #8
 8007ada:	230a      	movne	r3, #10
 8007adc:	2100      	movs	r1, #0
 8007ade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ae2:	6865      	ldr	r5, [r4, #4]
 8007ae4:	60a5      	str	r5, [r4, #8]
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	bfa2      	ittt	ge
 8007aea:	6821      	ldrge	r1, [r4, #0]
 8007aec:	f021 0104 	bicge.w	r1, r1, #4
 8007af0:	6021      	strge	r1, [r4, #0]
 8007af2:	b90e      	cbnz	r6, 8007af8 <_printf_i+0x118>
 8007af4:	2d00      	cmp	r5, #0
 8007af6:	d04d      	beq.n	8007b94 <_printf_i+0x1b4>
 8007af8:	4615      	mov	r5, r2
 8007afa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007afe:	fb03 6711 	mls	r7, r3, r1, r6
 8007b02:	5dc7      	ldrb	r7, [r0, r7]
 8007b04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b08:	4637      	mov	r7, r6
 8007b0a:	42bb      	cmp	r3, r7
 8007b0c:	460e      	mov	r6, r1
 8007b0e:	d9f4      	bls.n	8007afa <_printf_i+0x11a>
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d10b      	bne.n	8007b2c <_printf_i+0x14c>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	07de      	lsls	r6, r3, #31
 8007b18:	d508      	bpl.n	8007b2c <_printf_i+0x14c>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	6861      	ldr	r1, [r4, #4]
 8007b1e:	4299      	cmp	r1, r3
 8007b20:	bfde      	ittt	le
 8007b22:	2330      	movle	r3, #48	; 0x30
 8007b24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b2c:	1b52      	subs	r2, r2, r5
 8007b2e:	6122      	str	r2, [r4, #16]
 8007b30:	f8cd a000 	str.w	sl, [sp]
 8007b34:	464b      	mov	r3, r9
 8007b36:	aa03      	add	r2, sp, #12
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	f7ff fee2 	bl	8007904 <_printf_common>
 8007b40:	3001      	adds	r0, #1
 8007b42:	d14c      	bne.n	8007bde <_printf_i+0x1fe>
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295
 8007b48:	b004      	add	sp, #16
 8007b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4e:	4835      	ldr	r0, [pc, #212]	; (8007c24 <_printf_i+0x244>)
 8007b50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b54:	6829      	ldr	r1, [r5, #0]
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b5c:	6029      	str	r1, [r5, #0]
 8007b5e:	061d      	lsls	r5, r3, #24
 8007b60:	d514      	bpl.n	8007b8c <_printf_i+0x1ac>
 8007b62:	07df      	lsls	r7, r3, #31
 8007b64:	bf44      	itt	mi
 8007b66:	f043 0320 	orrmi.w	r3, r3, #32
 8007b6a:	6023      	strmi	r3, [r4, #0]
 8007b6c:	b91e      	cbnz	r6, 8007b76 <_printf_i+0x196>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	f023 0320 	bic.w	r3, r3, #32
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	2310      	movs	r3, #16
 8007b78:	e7b0      	b.n	8007adc <_printf_i+0xfc>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	f043 0320 	orr.w	r3, r3, #32
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	2378      	movs	r3, #120	; 0x78
 8007b84:	4828      	ldr	r0, [pc, #160]	; (8007c28 <_printf_i+0x248>)
 8007b86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b8a:	e7e3      	b.n	8007b54 <_printf_i+0x174>
 8007b8c:	0659      	lsls	r1, r3, #25
 8007b8e:	bf48      	it	mi
 8007b90:	b2b6      	uxthmi	r6, r6
 8007b92:	e7e6      	b.n	8007b62 <_printf_i+0x182>
 8007b94:	4615      	mov	r5, r2
 8007b96:	e7bb      	b.n	8007b10 <_printf_i+0x130>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	6826      	ldr	r6, [r4, #0]
 8007b9c:	6961      	ldr	r1, [r4, #20]
 8007b9e:	1d18      	adds	r0, r3, #4
 8007ba0:	6028      	str	r0, [r5, #0]
 8007ba2:	0635      	lsls	r5, r6, #24
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	d501      	bpl.n	8007bac <_printf_i+0x1cc>
 8007ba8:	6019      	str	r1, [r3, #0]
 8007baa:	e002      	b.n	8007bb2 <_printf_i+0x1d2>
 8007bac:	0670      	lsls	r0, r6, #25
 8007bae:	d5fb      	bpl.n	8007ba8 <_printf_i+0x1c8>
 8007bb0:	8019      	strh	r1, [r3, #0]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6123      	str	r3, [r4, #16]
 8007bb6:	4615      	mov	r5, r2
 8007bb8:	e7ba      	b.n	8007b30 <_printf_i+0x150>
 8007bba:	682b      	ldr	r3, [r5, #0]
 8007bbc:	1d1a      	adds	r2, r3, #4
 8007bbe:	602a      	str	r2, [r5, #0]
 8007bc0:	681d      	ldr	r5, [r3, #0]
 8007bc2:	6862      	ldr	r2, [r4, #4]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f7f8 fb0a 	bl	80001e0 <memchr>
 8007bcc:	b108      	cbz	r0, 8007bd2 <_printf_i+0x1f2>
 8007bce:	1b40      	subs	r0, r0, r5
 8007bd0:	6060      	str	r0, [r4, #4]
 8007bd2:	6863      	ldr	r3, [r4, #4]
 8007bd4:	6123      	str	r3, [r4, #16]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bdc:	e7a8      	b.n	8007b30 <_printf_i+0x150>
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	462a      	mov	r2, r5
 8007be2:	4649      	mov	r1, r9
 8007be4:	4640      	mov	r0, r8
 8007be6:	47d0      	blx	sl
 8007be8:	3001      	adds	r0, #1
 8007bea:	d0ab      	beq.n	8007b44 <_printf_i+0x164>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	079b      	lsls	r3, r3, #30
 8007bf0:	d413      	bmi.n	8007c1a <_printf_i+0x23a>
 8007bf2:	68e0      	ldr	r0, [r4, #12]
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	4298      	cmp	r0, r3
 8007bf8:	bfb8      	it	lt
 8007bfa:	4618      	movlt	r0, r3
 8007bfc:	e7a4      	b.n	8007b48 <_printf_i+0x168>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4632      	mov	r2, r6
 8007c02:	4649      	mov	r1, r9
 8007c04:	4640      	mov	r0, r8
 8007c06:	47d0      	blx	sl
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d09b      	beq.n	8007b44 <_printf_i+0x164>
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	68e3      	ldr	r3, [r4, #12]
 8007c10:	9903      	ldr	r1, [sp, #12]
 8007c12:	1a5b      	subs	r3, r3, r1
 8007c14:	42ab      	cmp	r3, r5
 8007c16:	dcf2      	bgt.n	8007bfe <_printf_i+0x21e>
 8007c18:	e7eb      	b.n	8007bf2 <_printf_i+0x212>
 8007c1a:	2500      	movs	r5, #0
 8007c1c:	f104 0619 	add.w	r6, r4, #25
 8007c20:	e7f5      	b.n	8007c0e <_printf_i+0x22e>
 8007c22:	bf00      	nop
 8007c24:	08008d03 	.word	0x08008d03
 8007c28:	08008d14 	.word	0x08008d14

08007c2c <_sbrk_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4d06      	ldr	r5, [pc, #24]	; (8007c48 <_sbrk_r+0x1c>)
 8007c30:	2300      	movs	r3, #0
 8007c32:	4604      	mov	r4, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	f7fb f96a 	bl	8002f10 <_sbrk>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_sbrk_r+0x1a>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_sbrk_r+0x1a>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	20000930 	.word	0x20000930

08007c4c <__swbuf_r>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	460e      	mov	r6, r1
 8007c50:	4614      	mov	r4, r2
 8007c52:	4605      	mov	r5, r0
 8007c54:	b118      	cbz	r0, 8007c5e <__swbuf_r+0x12>
 8007c56:	6983      	ldr	r3, [r0, #24]
 8007c58:	b90b      	cbnz	r3, 8007c5e <__swbuf_r+0x12>
 8007c5a:	f000 f9d9 	bl	8008010 <__sinit>
 8007c5e:	4b21      	ldr	r3, [pc, #132]	; (8007ce4 <__swbuf_r+0x98>)
 8007c60:	429c      	cmp	r4, r3
 8007c62:	d12b      	bne.n	8007cbc <__swbuf_r+0x70>
 8007c64:	686c      	ldr	r4, [r5, #4]
 8007c66:	69a3      	ldr	r3, [r4, #24]
 8007c68:	60a3      	str	r3, [r4, #8]
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	071a      	lsls	r2, r3, #28
 8007c6e:	d52f      	bpl.n	8007cd0 <__swbuf_r+0x84>
 8007c70:	6923      	ldr	r3, [r4, #16]
 8007c72:	b36b      	cbz	r3, 8007cd0 <__swbuf_r+0x84>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	6820      	ldr	r0, [r4, #0]
 8007c78:	1ac0      	subs	r0, r0, r3
 8007c7a:	6963      	ldr	r3, [r4, #20]
 8007c7c:	b2f6      	uxtb	r6, r6
 8007c7e:	4283      	cmp	r3, r0
 8007c80:	4637      	mov	r7, r6
 8007c82:	dc04      	bgt.n	8007c8e <__swbuf_r+0x42>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 f92e 	bl	8007ee8 <_fflush_r>
 8007c8c:	bb30      	cbnz	r0, 8007cdc <__swbuf_r+0x90>
 8007c8e:	68a3      	ldr	r3, [r4, #8]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	60a3      	str	r3, [r4, #8]
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	6022      	str	r2, [r4, #0]
 8007c9a:	701e      	strb	r6, [r3, #0]
 8007c9c:	6963      	ldr	r3, [r4, #20]
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	4283      	cmp	r3, r0
 8007ca2:	d004      	beq.n	8007cae <__swbuf_r+0x62>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	07db      	lsls	r3, r3, #31
 8007ca8:	d506      	bpl.n	8007cb8 <__swbuf_r+0x6c>
 8007caa:	2e0a      	cmp	r6, #10
 8007cac:	d104      	bne.n	8007cb8 <__swbuf_r+0x6c>
 8007cae:	4621      	mov	r1, r4
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f000 f919 	bl	8007ee8 <_fflush_r>
 8007cb6:	b988      	cbnz	r0, 8007cdc <__swbuf_r+0x90>
 8007cb8:	4638      	mov	r0, r7
 8007cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <__swbuf_r+0x9c>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	d101      	bne.n	8007cc6 <__swbuf_r+0x7a>
 8007cc2:	68ac      	ldr	r4, [r5, #8]
 8007cc4:	e7cf      	b.n	8007c66 <__swbuf_r+0x1a>
 8007cc6:	4b09      	ldr	r3, [pc, #36]	; (8007cec <__swbuf_r+0xa0>)
 8007cc8:	429c      	cmp	r4, r3
 8007cca:	bf08      	it	eq
 8007ccc:	68ec      	ldreq	r4, [r5, #12]
 8007cce:	e7ca      	b.n	8007c66 <__swbuf_r+0x1a>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 f80c 	bl	8007cf0 <__swsetup_r>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d0cb      	beq.n	8007c74 <__swbuf_r+0x28>
 8007cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8007ce0:	e7ea      	b.n	8007cb8 <__swbuf_r+0x6c>
 8007ce2:	bf00      	nop
 8007ce4:	08008d48 	.word	0x08008d48
 8007ce8:	08008d68 	.word	0x08008d68
 8007cec:	08008d28 	.word	0x08008d28

08007cf0 <__swsetup_r>:
 8007cf0:	4b32      	ldr	r3, [pc, #200]	; (8007dbc <__swsetup_r+0xcc>)
 8007cf2:	b570      	push	{r4, r5, r6, lr}
 8007cf4:	681d      	ldr	r5, [r3, #0]
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	b125      	cbz	r5, 8007d06 <__swsetup_r+0x16>
 8007cfc:	69ab      	ldr	r3, [r5, #24]
 8007cfe:	b913      	cbnz	r3, 8007d06 <__swsetup_r+0x16>
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 f985 	bl	8008010 <__sinit>
 8007d06:	4b2e      	ldr	r3, [pc, #184]	; (8007dc0 <__swsetup_r+0xd0>)
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	d10f      	bne.n	8007d2c <__swsetup_r+0x3c>
 8007d0c:	686c      	ldr	r4, [r5, #4]
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d14:	0719      	lsls	r1, r3, #28
 8007d16:	d42c      	bmi.n	8007d72 <__swsetup_r+0x82>
 8007d18:	06dd      	lsls	r5, r3, #27
 8007d1a:	d411      	bmi.n	8007d40 <__swsetup_r+0x50>
 8007d1c:	2309      	movs	r3, #9
 8007d1e:	6033      	str	r3, [r6, #0]
 8007d20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2a:	e03e      	b.n	8007daa <__swsetup_r+0xba>
 8007d2c:	4b25      	ldr	r3, [pc, #148]	; (8007dc4 <__swsetup_r+0xd4>)
 8007d2e:	429c      	cmp	r4, r3
 8007d30:	d101      	bne.n	8007d36 <__swsetup_r+0x46>
 8007d32:	68ac      	ldr	r4, [r5, #8]
 8007d34:	e7eb      	b.n	8007d0e <__swsetup_r+0x1e>
 8007d36:	4b24      	ldr	r3, [pc, #144]	; (8007dc8 <__swsetup_r+0xd8>)
 8007d38:	429c      	cmp	r4, r3
 8007d3a:	bf08      	it	eq
 8007d3c:	68ec      	ldreq	r4, [r5, #12]
 8007d3e:	e7e6      	b.n	8007d0e <__swsetup_r+0x1e>
 8007d40:	0758      	lsls	r0, r3, #29
 8007d42:	d512      	bpl.n	8007d6a <__swsetup_r+0x7a>
 8007d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d46:	b141      	cbz	r1, 8007d5a <__swsetup_r+0x6a>
 8007d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	d002      	beq.n	8007d56 <__swsetup_r+0x66>
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff fa41 	bl	80071d8 <_free_r>
 8007d56:	2300      	movs	r3, #0
 8007d58:	6363      	str	r3, [r4, #52]	; 0x34
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d60:	81a3      	strh	r3, [r4, #12]
 8007d62:	2300      	movs	r3, #0
 8007d64:	6063      	str	r3, [r4, #4]
 8007d66:	6923      	ldr	r3, [r4, #16]
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	f043 0308 	orr.w	r3, r3, #8
 8007d70:	81a3      	strh	r3, [r4, #12]
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	b94b      	cbnz	r3, 8007d8a <__swsetup_r+0x9a>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d80:	d003      	beq.n	8007d8a <__swsetup_r+0x9a>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4630      	mov	r0, r6
 8007d86:	f000 fa09 	bl	800819c <__smakebuf_r>
 8007d8a:	89a0      	ldrh	r0, [r4, #12]
 8007d8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d90:	f010 0301 	ands.w	r3, r0, #1
 8007d94:	d00a      	beq.n	8007dac <__swsetup_r+0xbc>
 8007d96:	2300      	movs	r3, #0
 8007d98:	60a3      	str	r3, [r4, #8]
 8007d9a:	6963      	ldr	r3, [r4, #20]
 8007d9c:	425b      	negs	r3, r3
 8007d9e:	61a3      	str	r3, [r4, #24]
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	b943      	cbnz	r3, 8007db6 <__swsetup_r+0xc6>
 8007da4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007da8:	d1ba      	bne.n	8007d20 <__swsetup_r+0x30>
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	0781      	lsls	r1, r0, #30
 8007dae:	bf58      	it	pl
 8007db0:	6963      	ldrpl	r3, [r4, #20]
 8007db2:	60a3      	str	r3, [r4, #8]
 8007db4:	e7f4      	b.n	8007da0 <__swsetup_r+0xb0>
 8007db6:	2000      	movs	r0, #0
 8007db8:	e7f7      	b.n	8007daa <__swsetup_r+0xba>
 8007dba:	bf00      	nop
 8007dbc:	20000068 	.word	0x20000068
 8007dc0:	08008d48 	.word	0x08008d48
 8007dc4:	08008d68 	.word	0x08008d68
 8007dc8:	08008d28 	.word	0x08008d28

08007dcc <abort>:
 8007dcc:	b508      	push	{r3, lr}
 8007dce:	2006      	movs	r0, #6
 8007dd0:	f000 faa2 	bl	8008318 <raise>
 8007dd4:	2001      	movs	r0, #1
 8007dd6:	f7fb f823 	bl	8002e20 <_exit>
	...

08007ddc <__sflush_r>:
 8007ddc:	898a      	ldrh	r2, [r1, #12]
 8007dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de2:	4605      	mov	r5, r0
 8007de4:	0710      	lsls	r0, r2, #28
 8007de6:	460c      	mov	r4, r1
 8007de8:	d458      	bmi.n	8007e9c <__sflush_r+0xc0>
 8007dea:	684b      	ldr	r3, [r1, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	dc05      	bgt.n	8007dfc <__sflush_r+0x20>
 8007df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dc02      	bgt.n	8007dfc <__sflush_r+0x20>
 8007df6:	2000      	movs	r0, #0
 8007df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dfe:	2e00      	cmp	r6, #0
 8007e00:	d0f9      	beq.n	8007df6 <__sflush_r+0x1a>
 8007e02:	2300      	movs	r3, #0
 8007e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e08:	682f      	ldr	r7, [r5, #0]
 8007e0a:	602b      	str	r3, [r5, #0]
 8007e0c:	d032      	beq.n	8007e74 <__sflush_r+0x98>
 8007e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	075a      	lsls	r2, r3, #29
 8007e14:	d505      	bpl.n	8007e22 <__sflush_r+0x46>
 8007e16:	6863      	ldr	r3, [r4, #4]
 8007e18:	1ac0      	subs	r0, r0, r3
 8007e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e1c:	b10b      	cbz	r3, 8007e22 <__sflush_r+0x46>
 8007e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e20:	1ac0      	subs	r0, r0, r3
 8007e22:	2300      	movs	r3, #0
 8007e24:	4602      	mov	r2, r0
 8007e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e28:	6a21      	ldr	r1, [r4, #32]
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b0      	blx	r6
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	d106      	bne.n	8007e42 <__sflush_r+0x66>
 8007e34:	6829      	ldr	r1, [r5, #0]
 8007e36:	291d      	cmp	r1, #29
 8007e38:	d82c      	bhi.n	8007e94 <__sflush_r+0xb8>
 8007e3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ee4 <__sflush_r+0x108>)
 8007e3c:	40ca      	lsrs	r2, r1
 8007e3e:	07d6      	lsls	r6, r2, #31
 8007e40:	d528      	bpl.n	8007e94 <__sflush_r+0xb8>
 8007e42:	2200      	movs	r2, #0
 8007e44:	6062      	str	r2, [r4, #4]
 8007e46:	04d9      	lsls	r1, r3, #19
 8007e48:	6922      	ldr	r2, [r4, #16]
 8007e4a:	6022      	str	r2, [r4, #0]
 8007e4c:	d504      	bpl.n	8007e58 <__sflush_r+0x7c>
 8007e4e:	1c42      	adds	r2, r0, #1
 8007e50:	d101      	bne.n	8007e56 <__sflush_r+0x7a>
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	b903      	cbnz	r3, 8007e58 <__sflush_r+0x7c>
 8007e56:	6560      	str	r0, [r4, #84]	; 0x54
 8007e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e5a:	602f      	str	r7, [r5, #0]
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d0ca      	beq.n	8007df6 <__sflush_r+0x1a>
 8007e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e64:	4299      	cmp	r1, r3
 8007e66:	d002      	beq.n	8007e6e <__sflush_r+0x92>
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f7ff f9b5 	bl	80071d8 <_free_r>
 8007e6e:	2000      	movs	r0, #0
 8007e70:	6360      	str	r0, [r4, #52]	; 0x34
 8007e72:	e7c1      	b.n	8007df8 <__sflush_r+0x1c>
 8007e74:	6a21      	ldr	r1, [r4, #32]
 8007e76:	2301      	movs	r3, #1
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b0      	blx	r6
 8007e7c:	1c41      	adds	r1, r0, #1
 8007e7e:	d1c7      	bne.n	8007e10 <__sflush_r+0x34>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0c4      	beq.n	8007e10 <__sflush_r+0x34>
 8007e86:	2b1d      	cmp	r3, #29
 8007e88:	d001      	beq.n	8007e8e <__sflush_r+0xb2>
 8007e8a:	2b16      	cmp	r3, #22
 8007e8c:	d101      	bne.n	8007e92 <__sflush_r+0xb6>
 8007e8e:	602f      	str	r7, [r5, #0]
 8007e90:	e7b1      	b.n	8007df6 <__sflush_r+0x1a>
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e98:	81a3      	strh	r3, [r4, #12]
 8007e9a:	e7ad      	b.n	8007df8 <__sflush_r+0x1c>
 8007e9c:	690f      	ldr	r7, [r1, #16]
 8007e9e:	2f00      	cmp	r7, #0
 8007ea0:	d0a9      	beq.n	8007df6 <__sflush_r+0x1a>
 8007ea2:	0793      	lsls	r3, r2, #30
 8007ea4:	680e      	ldr	r6, [r1, #0]
 8007ea6:	bf08      	it	eq
 8007ea8:	694b      	ldreq	r3, [r1, #20]
 8007eaa:	600f      	str	r7, [r1, #0]
 8007eac:	bf18      	it	ne
 8007eae:	2300      	movne	r3, #0
 8007eb0:	eba6 0807 	sub.w	r8, r6, r7
 8007eb4:	608b      	str	r3, [r1, #8]
 8007eb6:	f1b8 0f00 	cmp.w	r8, #0
 8007eba:	dd9c      	ble.n	8007df6 <__sflush_r+0x1a>
 8007ebc:	6a21      	ldr	r1, [r4, #32]
 8007ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ec0:	4643      	mov	r3, r8
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b0      	blx	r6
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	dc06      	bgt.n	8007eda <__sflush_r+0xfe>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed2:	81a3      	strh	r3, [r4, #12]
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	e78e      	b.n	8007df8 <__sflush_r+0x1c>
 8007eda:	4407      	add	r7, r0
 8007edc:	eba8 0800 	sub.w	r8, r8, r0
 8007ee0:	e7e9      	b.n	8007eb6 <__sflush_r+0xda>
 8007ee2:	bf00      	nop
 8007ee4:	20400001 	.word	0x20400001

08007ee8 <_fflush_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	690b      	ldr	r3, [r1, #16]
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	b913      	cbnz	r3, 8007ef8 <_fflush_r+0x10>
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	b118      	cbz	r0, 8007f02 <_fflush_r+0x1a>
 8007efa:	6983      	ldr	r3, [r0, #24]
 8007efc:	b90b      	cbnz	r3, 8007f02 <_fflush_r+0x1a>
 8007efe:	f000 f887 	bl	8008010 <__sinit>
 8007f02:	4b14      	ldr	r3, [pc, #80]	; (8007f54 <_fflush_r+0x6c>)
 8007f04:	429c      	cmp	r4, r3
 8007f06:	d11b      	bne.n	8007f40 <_fflush_r+0x58>
 8007f08:	686c      	ldr	r4, [r5, #4]
 8007f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0ef      	beq.n	8007ef2 <_fflush_r+0xa>
 8007f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f14:	07d0      	lsls	r0, r2, #31
 8007f16:	d404      	bmi.n	8007f22 <_fflush_r+0x3a>
 8007f18:	0599      	lsls	r1, r3, #22
 8007f1a:	d402      	bmi.n	8007f22 <_fflush_r+0x3a>
 8007f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f1e:	f000 f915 	bl	800814c <__retarget_lock_acquire_recursive>
 8007f22:	4628      	mov	r0, r5
 8007f24:	4621      	mov	r1, r4
 8007f26:	f7ff ff59 	bl	8007ddc <__sflush_r>
 8007f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f2c:	07da      	lsls	r2, r3, #31
 8007f2e:	4605      	mov	r5, r0
 8007f30:	d4e0      	bmi.n	8007ef4 <_fflush_r+0xc>
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	059b      	lsls	r3, r3, #22
 8007f36:	d4dd      	bmi.n	8007ef4 <_fflush_r+0xc>
 8007f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f3a:	f000 f908 	bl	800814e <__retarget_lock_release_recursive>
 8007f3e:	e7d9      	b.n	8007ef4 <_fflush_r+0xc>
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <_fflush_r+0x70>)
 8007f42:	429c      	cmp	r4, r3
 8007f44:	d101      	bne.n	8007f4a <_fflush_r+0x62>
 8007f46:	68ac      	ldr	r4, [r5, #8]
 8007f48:	e7df      	b.n	8007f0a <_fflush_r+0x22>
 8007f4a:	4b04      	ldr	r3, [pc, #16]	; (8007f5c <_fflush_r+0x74>)
 8007f4c:	429c      	cmp	r4, r3
 8007f4e:	bf08      	it	eq
 8007f50:	68ec      	ldreq	r4, [r5, #12]
 8007f52:	e7da      	b.n	8007f0a <_fflush_r+0x22>
 8007f54:	08008d48 	.word	0x08008d48
 8007f58:	08008d68 	.word	0x08008d68
 8007f5c:	08008d28 	.word	0x08008d28

08007f60 <std>:
 8007f60:	2300      	movs	r3, #0
 8007f62:	b510      	push	{r4, lr}
 8007f64:	4604      	mov	r4, r0
 8007f66:	e9c0 3300 	strd	r3, r3, [r0]
 8007f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f6e:	6083      	str	r3, [r0, #8]
 8007f70:	8181      	strh	r1, [r0, #12]
 8007f72:	6643      	str	r3, [r0, #100]	; 0x64
 8007f74:	81c2      	strh	r2, [r0, #14]
 8007f76:	6183      	str	r3, [r0, #24]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	305c      	adds	r0, #92	; 0x5c
 8007f7e:	f7ff f833 	bl	8006fe8 <memset>
 8007f82:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <std+0x38>)
 8007f84:	6263      	str	r3, [r4, #36]	; 0x24
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <std+0x3c>)
 8007f88:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <std+0x40>)
 8007f8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f8e:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <std+0x44>)
 8007f90:	6224      	str	r4, [r4, #32]
 8007f92:	6323      	str	r3, [r4, #48]	; 0x30
 8007f94:	bd10      	pop	{r4, pc}
 8007f96:	bf00      	nop
 8007f98:	08008351 	.word	0x08008351
 8007f9c:	08008373 	.word	0x08008373
 8007fa0:	080083ab 	.word	0x080083ab
 8007fa4:	080083cf 	.word	0x080083cf

08007fa8 <_cleanup_r>:
 8007fa8:	4901      	ldr	r1, [pc, #4]	; (8007fb0 <_cleanup_r+0x8>)
 8007faa:	f000 b8af 	b.w	800810c <_fwalk_reent>
 8007fae:	bf00      	nop
 8007fb0:	08007ee9 	.word	0x08007ee9

08007fb4 <__sfmoreglue>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	2268      	movs	r2, #104	; 0x68
 8007fb8:	1e4d      	subs	r5, r1, #1
 8007fba:	4355      	muls	r5, r2
 8007fbc:	460e      	mov	r6, r1
 8007fbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fc2:	f7ff f975 	bl	80072b0 <_malloc_r>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	b140      	cbz	r0, 8007fdc <__sfmoreglue+0x28>
 8007fca:	2100      	movs	r1, #0
 8007fcc:	e9c0 1600 	strd	r1, r6, [r0]
 8007fd0:	300c      	adds	r0, #12
 8007fd2:	60a0      	str	r0, [r4, #8]
 8007fd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fd8:	f7ff f806 	bl	8006fe8 <memset>
 8007fdc:	4620      	mov	r0, r4
 8007fde:	bd70      	pop	{r4, r5, r6, pc}

08007fe0 <__sfp_lock_acquire>:
 8007fe0:	4801      	ldr	r0, [pc, #4]	; (8007fe8 <__sfp_lock_acquire+0x8>)
 8007fe2:	f000 b8b3 	b.w	800814c <__retarget_lock_acquire_recursive>
 8007fe6:	bf00      	nop
 8007fe8:	20000935 	.word	0x20000935

08007fec <__sfp_lock_release>:
 8007fec:	4801      	ldr	r0, [pc, #4]	; (8007ff4 <__sfp_lock_release+0x8>)
 8007fee:	f000 b8ae 	b.w	800814e <__retarget_lock_release_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	20000935 	.word	0x20000935

08007ff8 <__sinit_lock_acquire>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__sinit_lock_acquire+0x8>)
 8007ffa:	f000 b8a7 	b.w	800814c <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	20000936 	.word	0x20000936

08008004 <__sinit_lock_release>:
 8008004:	4801      	ldr	r0, [pc, #4]	; (800800c <__sinit_lock_release+0x8>)
 8008006:	f000 b8a2 	b.w	800814e <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	20000936 	.word	0x20000936

08008010 <__sinit>:
 8008010:	b510      	push	{r4, lr}
 8008012:	4604      	mov	r4, r0
 8008014:	f7ff fff0 	bl	8007ff8 <__sinit_lock_acquire>
 8008018:	69a3      	ldr	r3, [r4, #24]
 800801a:	b11b      	cbz	r3, 8008024 <__sinit+0x14>
 800801c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008020:	f7ff bff0 	b.w	8008004 <__sinit_lock_release>
 8008024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008028:	6523      	str	r3, [r4, #80]	; 0x50
 800802a:	4b13      	ldr	r3, [pc, #76]	; (8008078 <__sinit+0x68>)
 800802c:	4a13      	ldr	r2, [pc, #76]	; (800807c <__sinit+0x6c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	62a2      	str	r2, [r4, #40]	; 0x28
 8008032:	42a3      	cmp	r3, r4
 8008034:	bf04      	itt	eq
 8008036:	2301      	moveq	r3, #1
 8008038:	61a3      	streq	r3, [r4, #24]
 800803a:	4620      	mov	r0, r4
 800803c:	f000 f820 	bl	8008080 <__sfp>
 8008040:	6060      	str	r0, [r4, #4]
 8008042:	4620      	mov	r0, r4
 8008044:	f000 f81c 	bl	8008080 <__sfp>
 8008048:	60a0      	str	r0, [r4, #8]
 800804a:	4620      	mov	r0, r4
 800804c:	f000 f818 	bl	8008080 <__sfp>
 8008050:	2200      	movs	r2, #0
 8008052:	60e0      	str	r0, [r4, #12]
 8008054:	2104      	movs	r1, #4
 8008056:	6860      	ldr	r0, [r4, #4]
 8008058:	f7ff ff82 	bl	8007f60 <std>
 800805c:	68a0      	ldr	r0, [r4, #8]
 800805e:	2201      	movs	r2, #1
 8008060:	2109      	movs	r1, #9
 8008062:	f7ff ff7d 	bl	8007f60 <std>
 8008066:	68e0      	ldr	r0, [r4, #12]
 8008068:	2202      	movs	r2, #2
 800806a:	2112      	movs	r1, #18
 800806c:	f7ff ff78 	bl	8007f60 <std>
 8008070:	2301      	movs	r3, #1
 8008072:	61a3      	str	r3, [r4, #24]
 8008074:	e7d2      	b.n	800801c <__sinit+0xc>
 8008076:	bf00      	nop
 8008078:	08008c40 	.word	0x08008c40
 800807c:	08007fa9 	.word	0x08007fa9

08008080 <__sfp>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	4607      	mov	r7, r0
 8008084:	f7ff ffac 	bl	8007fe0 <__sfp_lock_acquire>
 8008088:	4b1e      	ldr	r3, [pc, #120]	; (8008104 <__sfp+0x84>)
 800808a:	681e      	ldr	r6, [r3, #0]
 800808c:	69b3      	ldr	r3, [r6, #24]
 800808e:	b913      	cbnz	r3, 8008096 <__sfp+0x16>
 8008090:	4630      	mov	r0, r6
 8008092:	f7ff ffbd 	bl	8008010 <__sinit>
 8008096:	3648      	adds	r6, #72	; 0x48
 8008098:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800809c:	3b01      	subs	r3, #1
 800809e:	d503      	bpl.n	80080a8 <__sfp+0x28>
 80080a0:	6833      	ldr	r3, [r6, #0]
 80080a2:	b30b      	cbz	r3, 80080e8 <__sfp+0x68>
 80080a4:	6836      	ldr	r6, [r6, #0]
 80080a6:	e7f7      	b.n	8008098 <__sfp+0x18>
 80080a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080ac:	b9d5      	cbnz	r5, 80080e4 <__sfp+0x64>
 80080ae:	4b16      	ldr	r3, [pc, #88]	; (8008108 <__sfp+0x88>)
 80080b0:	60e3      	str	r3, [r4, #12]
 80080b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080b6:	6665      	str	r5, [r4, #100]	; 0x64
 80080b8:	f000 f847 	bl	800814a <__retarget_lock_init_recursive>
 80080bc:	f7ff ff96 	bl	8007fec <__sfp_lock_release>
 80080c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080c8:	6025      	str	r5, [r4, #0]
 80080ca:	61a5      	str	r5, [r4, #24]
 80080cc:	2208      	movs	r2, #8
 80080ce:	4629      	mov	r1, r5
 80080d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080d4:	f7fe ff88 	bl	8006fe8 <memset>
 80080d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080e0:	4620      	mov	r0, r4
 80080e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e4:	3468      	adds	r4, #104	; 0x68
 80080e6:	e7d9      	b.n	800809c <__sfp+0x1c>
 80080e8:	2104      	movs	r1, #4
 80080ea:	4638      	mov	r0, r7
 80080ec:	f7ff ff62 	bl	8007fb4 <__sfmoreglue>
 80080f0:	4604      	mov	r4, r0
 80080f2:	6030      	str	r0, [r6, #0]
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d1d5      	bne.n	80080a4 <__sfp+0x24>
 80080f8:	f7ff ff78 	bl	8007fec <__sfp_lock_release>
 80080fc:	230c      	movs	r3, #12
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	e7ee      	b.n	80080e0 <__sfp+0x60>
 8008102:	bf00      	nop
 8008104:	08008c40 	.word	0x08008c40
 8008108:	ffff0001 	.word	0xffff0001

0800810c <_fwalk_reent>:
 800810c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008110:	4606      	mov	r6, r0
 8008112:	4688      	mov	r8, r1
 8008114:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008118:	2700      	movs	r7, #0
 800811a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800811e:	f1b9 0901 	subs.w	r9, r9, #1
 8008122:	d505      	bpl.n	8008130 <_fwalk_reent+0x24>
 8008124:	6824      	ldr	r4, [r4, #0]
 8008126:	2c00      	cmp	r4, #0
 8008128:	d1f7      	bne.n	800811a <_fwalk_reent+0xe>
 800812a:	4638      	mov	r0, r7
 800812c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008130:	89ab      	ldrh	r3, [r5, #12]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d907      	bls.n	8008146 <_fwalk_reent+0x3a>
 8008136:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800813a:	3301      	adds	r3, #1
 800813c:	d003      	beq.n	8008146 <_fwalk_reent+0x3a>
 800813e:	4629      	mov	r1, r5
 8008140:	4630      	mov	r0, r6
 8008142:	47c0      	blx	r8
 8008144:	4307      	orrs	r7, r0
 8008146:	3568      	adds	r5, #104	; 0x68
 8008148:	e7e9      	b.n	800811e <_fwalk_reent+0x12>

0800814a <__retarget_lock_init_recursive>:
 800814a:	4770      	bx	lr

0800814c <__retarget_lock_acquire_recursive>:
 800814c:	4770      	bx	lr

0800814e <__retarget_lock_release_recursive>:
 800814e:	4770      	bx	lr

08008150 <__swhatbuf_r>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	460e      	mov	r6, r1
 8008154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008158:	2900      	cmp	r1, #0
 800815a:	b096      	sub	sp, #88	; 0x58
 800815c:	4614      	mov	r4, r2
 800815e:	461d      	mov	r5, r3
 8008160:	da08      	bge.n	8008174 <__swhatbuf_r+0x24>
 8008162:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	602a      	str	r2, [r5, #0]
 800816a:	061a      	lsls	r2, r3, #24
 800816c:	d410      	bmi.n	8008190 <__swhatbuf_r+0x40>
 800816e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008172:	e00e      	b.n	8008192 <__swhatbuf_r+0x42>
 8008174:	466a      	mov	r2, sp
 8008176:	f000 f951 	bl	800841c <_fstat_r>
 800817a:	2800      	cmp	r0, #0
 800817c:	dbf1      	blt.n	8008162 <__swhatbuf_r+0x12>
 800817e:	9a01      	ldr	r2, [sp, #4]
 8008180:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008184:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008188:	425a      	negs	r2, r3
 800818a:	415a      	adcs	r2, r3
 800818c:	602a      	str	r2, [r5, #0]
 800818e:	e7ee      	b.n	800816e <__swhatbuf_r+0x1e>
 8008190:	2340      	movs	r3, #64	; 0x40
 8008192:	2000      	movs	r0, #0
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	b016      	add	sp, #88	; 0x58
 8008198:	bd70      	pop	{r4, r5, r6, pc}
	...

0800819c <__smakebuf_r>:
 800819c:	898b      	ldrh	r3, [r1, #12]
 800819e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081a0:	079d      	lsls	r5, r3, #30
 80081a2:	4606      	mov	r6, r0
 80081a4:	460c      	mov	r4, r1
 80081a6:	d507      	bpl.n	80081b8 <__smakebuf_r+0x1c>
 80081a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	6123      	str	r3, [r4, #16]
 80081b0:	2301      	movs	r3, #1
 80081b2:	6163      	str	r3, [r4, #20]
 80081b4:	b002      	add	sp, #8
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	ab01      	add	r3, sp, #4
 80081ba:	466a      	mov	r2, sp
 80081bc:	f7ff ffc8 	bl	8008150 <__swhatbuf_r>
 80081c0:	9900      	ldr	r1, [sp, #0]
 80081c2:	4605      	mov	r5, r0
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff f873 	bl	80072b0 <_malloc_r>
 80081ca:	b948      	cbnz	r0, 80081e0 <__smakebuf_r+0x44>
 80081cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d0:	059a      	lsls	r2, r3, #22
 80081d2:	d4ef      	bmi.n	80081b4 <__smakebuf_r+0x18>
 80081d4:	f023 0303 	bic.w	r3, r3, #3
 80081d8:	f043 0302 	orr.w	r3, r3, #2
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	e7e3      	b.n	80081a8 <__smakebuf_r+0xc>
 80081e0:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <__smakebuf_r+0x7c>)
 80081e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	6020      	str	r0, [r4, #0]
 80081e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	9b00      	ldr	r3, [sp, #0]
 80081f0:	6163      	str	r3, [r4, #20]
 80081f2:	9b01      	ldr	r3, [sp, #4]
 80081f4:	6120      	str	r0, [r4, #16]
 80081f6:	b15b      	cbz	r3, 8008210 <__smakebuf_r+0x74>
 80081f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081fc:	4630      	mov	r0, r6
 80081fe:	f000 f91f 	bl	8008440 <_isatty_r>
 8008202:	b128      	cbz	r0, 8008210 <__smakebuf_r+0x74>
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	f023 0303 	bic.w	r3, r3, #3
 800820a:	f043 0301 	orr.w	r3, r3, #1
 800820e:	81a3      	strh	r3, [r4, #12]
 8008210:	89a0      	ldrh	r0, [r4, #12]
 8008212:	4305      	orrs	r5, r0
 8008214:	81a5      	strh	r5, [r4, #12]
 8008216:	e7cd      	b.n	80081b4 <__smakebuf_r+0x18>
 8008218:	08007fa9 	.word	0x08007fa9

0800821c <memmove>:
 800821c:	4288      	cmp	r0, r1
 800821e:	b510      	push	{r4, lr}
 8008220:	eb01 0402 	add.w	r4, r1, r2
 8008224:	d902      	bls.n	800822c <memmove+0x10>
 8008226:	4284      	cmp	r4, r0
 8008228:	4623      	mov	r3, r4
 800822a:	d807      	bhi.n	800823c <memmove+0x20>
 800822c:	1e43      	subs	r3, r0, #1
 800822e:	42a1      	cmp	r1, r4
 8008230:	d008      	beq.n	8008244 <memmove+0x28>
 8008232:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800823a:	e7f8      	b.n	800822e <memmove+0x12>
 800823c:	4402      	add	r2, r0
 800823e:	4601      	mov	r1, r0
 8008240:	428a      	cmp	r2, r1
 8008242:	d100      	bne.n	8008246 <memmove+0x2a>
 8008244:	bd10      	pop	{r4, pc}
 8008246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800824a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800824e:	e7f7      	b.n	8008240 <memmove+0x24>

08008250 <__malloc_lock>:
 8008250:	4801      	ldr	r0, [pc, #4]	; (8008258 <__malloc_lock+0x8>)
 8008252:	f7ff bf7b 	b.w	800814c <__retarget_lock_acquire_recursive>
 8008256:	bf00      	nop
 8008258:	20000934 	.word	0x20000934

0800825c <__malloc_unlock>:
 800825c:	4801      	ldr	r0, [pc, #4]	; (8008264 <__malloc_unlock+0x8>)
 800825e:	f7ff bf76 	b.w	800814e <__retarget_lock_release_recursive>
 8008262:	bf00      	nop
 8008264:	20000934 	.word	0x20000934

08008268 <_realloc_r>:
 8008268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826c:	4680      	mov	r8, r0
 800826e:	4614      	mov	r4, r2
 8008270:	460e      	mov	r6, r1
 8008272:	b921      	cbnz	r1, 800827e <_realloc_r+0x16>
 8008274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	4611      	mov	r1, r2
 800827a:	f7ff b819 	b.w	80072b0 <_malloc_r>
 800827e:	b92a      	cbnz	r2, 800828c <_realloc_r+0x24>
 8008280:	f7fe ffaa 	bl	80071d8 <_free_r>
 8008284:	4625      	mov	r5, r4
 8008286:	4628      	mov	r0, r5
 8008288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800828c:	f000 f8fa 	bl	8008484 <_malloc_usable_size_r>
 8008290:	4284      	cmp	r4, r0
 8008292:	4607      	mov	r7, r0
 8008294:	d802      	bhi.n	800829c <_realloc_r+0x34>
 8008296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800829a:	d812      	bhi.n	80082c2 <_realloc_r+0x5a>
 800829c:	4621      	mov	r1, r4
 800829e:	4640      	mov	r0, r8
 80082a0:	f7ff f806 	bl	80072b0 <_malloc_r>
 80082a4:	4605      	mov	r5, r0
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d0ed      	beq.n	8008286 <_realloc_r+0x1e>
 80082aa:	42bc      	cmp	r4, r7
 80082ac:	4622      	mov	r2, r4
 80082ae:	4631      	mov	r1, r6
 80082b0:	bf28      	it	cs
 80082b2:	463a      	movcs	r2, r7
 80082b4:	f7fe fe8a 	bl	8006fcc <memcpy>
 80082b8:	4631      	mov	r1, r6
 80082ba:	4640      	mov	r0, r8
 80082bc:	f7fe ff8c 	bl	80071d8 <_free_r>
 80082c0:	e7e1      	b.n	8008286 <_realloc_r+0x1e>
 80082c2:	4635      	mov	r5, r6
 80082c4:	e7df      	b.n	8008286 <_realloc_r+0x1e>

080082c6 <_raise_r>:
 80082c6:	291f      	cmp	r1, #31
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4604      	mov	r4, r0
 80082cc:	460d      	mov	r5, r1
 80082ce:	d904      	bls.n	80082da <_raise_r+0x14>
 80082d0:	2316      	movs	r3, #22
 80082d2:	6003      	str	r3, [r0, #0]
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082dc:	b112      	cbz	r2, 80082e4 <_raise_r+0x1e>
 80082de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082e2:	b94b      	cbnz	r3, 80082f8 <_raise_r+0x32>
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 f831 	bl	800834c <_getpid_r>
 80082ea:	462a      	mov	r2, r5
 80082ec:	4601      	mov	r1, r0
 80082ee:	4620      	mov	r0, r4
 80082f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f4:	f000 b818 	b.w	8008328 <_kill_r>
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d00a      	beq.n	8008312 <_raise_r+0x4c>
 80082fc:	1c59      	adds	r1, r3, #1
 80082fe:	d103      	bne.n	8008308 <_raise_r+0x42>
 8008300:	2316      	movs	r3, #22
 8008302:	6003      	str	r3, [r0, #0]
 8008304:	2001      	movs	r0, #1
 8008306:	e7e7      	b.n	80082d8 <_raise_r+0x12>
 8008308:	2400      	movs	r4, #0
 800830a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800830e:	4628      	mov	r0, r5
 8008310:	4798      	blx	r3
 8008312:	2000      	movs	r0, #0
 8008314:	e7e0      	b.n	80082d8 <_raise_r+0x12>
	...

08008318 <raise>:
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <raise+0xc>)
 800831a:	4601      	mov	r1, r0
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	f7ff bfd2 	b.w	80082c6 <_raise_r>
 8008322:	bf00      	nop
 8008324:	20000068 	.word	0x20000068

08008328 <_kill_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4d07      	ldr	r5, [pc, #28]	; (8008348 <_kill_r+0x20>)
 800832c:	2300      	movs	r3, #0
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	4611      	mov	r1, r2
 8008334:	602b      	str	r3, [r5, #0]
 8008336:	f7fa fd63 	bl	8002e00 <_kill>
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	d102      	bne.n	8008344 <_kill_r+0x1c>
 800833e:	682b      	ldr	r3, [r5, #0]
 8008340:	b103      	cbz	r3, 8008344 <_kill_r+0x1c>
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	bd38      	pop	{r3, r4, r5, pc}
 8008346:	bf00      	nop
 8008348:	20000930 	.word	0x20000930

0800834c <_getpid_r>:
 800834c:	f7fa bd50 	b.w	8002df0 <_getpid>

08008350 <__sread>:
 8008350:	b510      	push	{r4, lr}
 8008352:	460c      	mov	r4, r1
 8008354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008358:	f000 f89c 	bl	8008494 <_read_r>
 800835c:	2800      	cmp	r0, #0
 800835e:	bfab      	itete	ge
 8008360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008362:	89a3      	ldrhlt	r3, [r4, #12]
 8008364:	181b      	addge	r3, r3, r0
 8008366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800836a:	bfac      	ite	ge
 800836c:	6563      	strge	r3, [r4, #84]	; 0x54
 800836e:	81a3      	strhlt	r3, [r4, #12]
 8008370:	bd10      	pop	{r4, pc}

08008372 <__swrite>:
 8008372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008376:	461f      	mov	r7, r3
 8008378:	898b      	ldrh	r3, [r1, #12]
 800837a:	05db      	lsls	r3, r3, #23
 800837c:	4605      	mov	r5, r0
 800837e:	460c      	mov	r4, r1
 8008380:	4616      	mov	r6, r2
 8008382:	d505      	bpl.n	8008390 <__swrite+0x1e>
 8008384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008388:	2302      	movs	r3, #2
 800838a:	2200      	movs	r2, #0
 800838c:	f000 f868 	bl	8008460 <_lseek_r>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	4632      	mov	r2, r6
 800839e:	463b      	mov	r3, r7
 80083a0:	4628      	mov	r0, r5
 80083a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083a6:	f000 b817 	b.w	80083d8 <_write_r>

080083aa <__sseek>:
 80083aa:	b510      	push	{r4, lr}
 80083ac:	460c      	mov	r4, r1
 80083ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b2:	f000 f855 	bl	8008460 <_lseek_r>
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	bf15      	itete	ne
 80083bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80083be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083c6:	81a3      	strheq	r3, [r4, #12]
 80083c8:	bf18      	it	ne
 80083ca:	81a3      	strhne	r3, [r4, #12]
 80083cc:	bd10      	pop	{r4, pc}

080083ce <__sclose>:
 80083ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d2:	f000 b813 	b.w	80083fc <_close_r>
	...

080083d8 <_write_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d07      	ldr	r5, [pc, #28]	; (80083f8 <_write_r+0x20>)
 80083dc:	4604      	mov	r4, r0
 80083de:	4608      	mov	r0, r1
 80083e0:	4611      	mov	r1, r2
 80083e2:	2200      	movs	r2, #0
 80083e4:	602a      	str	r2, [r5, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	f7fa fd41 	bl	8002e6e <_write>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d102      	bne.n	80083f6 <_write_r+0x1e>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	b103      	cbz	r3, 80083f6 <_write_r+0x1e>
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	20000930 	.word	0x20000930

080083fc <_close_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d06      	ldr	r5, [pc, #24]	; (8008418 <_close_r+0x1c>)
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	f7fa fd4d 	bl	8002ea6 <_close>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_close_r+0x1a>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_close_r+0x1a>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20000930 	.word	0x20000930

0800841c <_fstat_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	; (800843c <_fstat_r+0x20>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	602b      	str	r3, [r5, #0]
 800842a:	f7fa fd48 	bl	8002ebe <_fstat>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d102      	bne.n	8008438 <_fstat_r+0x1c>
 8008432:	682b      	ldr	r3, [r5, #0]
 8008434:	b103      	cbz	r3, 8008438 <_fstat_r+0x1c>
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	bf00      	nop
 800843c:	20000930 	.word	0x20000930

08008440 <_isatty_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d06      	ldr	r5, [pc, #24]	; (800845c <_isatty_r+0x1c>)
 8008444:	2300      	movs	r3, #0
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	f7fa fd47 	bl	8002ede <_isatty>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_isatty_r+0x1a>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_isatty_r+0x1a>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	20000930 	.word	0x20000930

08008460 <_lseek_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d07      	ldr	r5, [pc, #28]	; (8008480 <_lseek_r+0x20>)
 8008464:	4604      	mov	r4, r0
 8008466:	4608      	mov	r0, r1
 8008468:	4611      	mov	r1, r2
 800846a:	2200      	movs	r2, #0
 800846c:	602a      	str	r2, [r5, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f7fa fd40 	bl	8002ef4 <_lseek>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_lseek_r+0x1e>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_lseek_r+0x1e>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	20000930 	.word	0x20000930

08008484 <_malloc_usable_size_r>:
 8008484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008488:	1f18      	subs	r0, r3, #4
 800848a:	2b00      	cmp	r3, #0
 800848c:	bfbc      	itt	lt
 800848e:	580b      	ldrlt	r3, [r1, r0]
 8008490:	18c0      	addlt	r0, r0, r3
 8008492:	4770      	bx	lr

08008494 <_read_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d07      	ldr	r5, [pc, #28]	; (80084b4 <_read_r+0x20>)
 8008498:	4604      	mov	r4, r0
 800849a:	4608      	mov	r0, r1
 800849c:	4611      	mov	r1, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	602a      	str	r2, [r5, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f7fa fcc6 	bl	8002e34 <_read>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d102      	bne.n	80084b2 <_read_r+0x1e>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	b103      	cbz	r3, 80084b2 <_read_r+0x1e>
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	20000930 	.word	0x20000930

080084b8 <_gettimeofday>:
 80084b8:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <_gettimeofday+0xc>)
 80084ba:	2258      	movs	r2, #88	; 0x58
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	f04f 30ff 	mov.w	r0, #4294967295
 80084c2:	4770      	bx	lr
 80084c4:	20000930 	.word	0x20000930

080084c8 <_init>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	bf00      	nop
 80084cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ce:	bc08      	pop	{r3}
 80084d0:	469e      	mov	lr, r3
 80084d2:	4770      	bx	lr

080084d4 <_fini>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	bf00      	nop
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr
