
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed8  08009ed8  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009ed8  08009ed8  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ed8  08009ed8  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08009ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          00000920  200000d8  200000d8  000200d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200009f8  200009f8  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018786  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042a7  00000000  00000000  0003888e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  0003df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f1ea  00000000  00000000  0003f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c33  00000000  00000000  0005e3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad6da  00000000  00000000  00077ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001256cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c98  00000000  00000000  00125720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095e0 	.word	0x080095e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	080095e0 	.word	0x080095e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStickChange>:

		*outputX = x;
		*outputY = y;
}

void ReadAnalogStickChange(ADC_HandleTypeDef* adc, i32* outputX, i32* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	//LCD_PCD8544_clear_ram(&gLcdScreen);
	HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f003 fb7f 	bl	8003990 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f003 fc31 	bl	8003afc <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f003 fcfc 	bl	8003c98 <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002a6:	801a      	strh	r2, [r3, #0]
	uint16_t y = AD_RES;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

	// Start ADC Conversion
	HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f003 fb6e 	bl	8003990 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f003 fc20 	bl	8003afc <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f003 fceb 	bl	8003c98 <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002c8:	801a      	strh	r2, [r3, #0]
	uint16_t x = AD_RES;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
	x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]
	y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	613b      	str	r3, [r7, #16]
	*outputX = (x - (twelveBitMax/2));
 80002e6:	8aba      	ldrh	r2, [r7, #20]
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	0fd9      	lsrs	r1, r3, #31
 80002ec:	440b      	add	r3, r1
 80002ee:	105b      	asrs	r3, r3, #1
 80002f0:	425b      	negs	r3, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	601a      	str	r2, [r3, #0]
	*outputY = (y - (twelveBitMax/2));
 80002f8:	8afa      	ldrh	r2, [r7, #22]
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	0fd9      	lsrs	r1, r3, #31
 80002fe:	440b      	add	r3, r1
 8000300:	105b      	asrs	r3, r3, #1
 8000302:	425b      	negs	r3, r3
 8000304:	441a      	add	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200000f4 	.word	0x200000f4

08000318 <EmulateDPad>:


ANALOG_STICK_DPAD_RESULT EmulateDPad(ADC_HandleTypeDef* adc){
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	4619      	mov	r1, r3
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f7ff ffa8 	bl	8000280 <ReadAnalogStickChange>
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000330:	2300      	movs	r3, #0
 8000332:	75fb      	strb	r3, [r7, #23]
	const i32 twelveBitMax = 4096;
 8000334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000338:	613b      	str	r3, [r7, #16]
	if(analogYChange > (twelveBitMax/3)){
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	4a29      	ldr	r2, [pc, #164]	; (80003e4 <EmulateDPad+0xcc>)
 800033e:	fb82 1203 	smull	r1, r2, r2, r3
 8000342:	17db      	asrs	r3, r3, #31
 8000344:	1ad2      	subs	r2, r2, r3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	429a      	cmp	r2, r3
 800034a:	da09      	bge.n	8000360 <EmulateDPad+0x48>
		if(_isAnalogStickExtended == false){
 800034c:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <EmulateDPad+0xd0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d141      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <EmulateDPad+0xd0>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800035a:	2302      	movs	r3, #2
 800035c:	75fb      	strb	r3, [r7, #23]
 800035e:	e03b      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <EmulateDPad+0xcc>)
 8000364:	fb82 1203 	smull	r1, r2, r2, r3
 8000368:	17db      	asrs	r3, r3, #31
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	429a      	cmp	r2, r3
 8000370:	dd09      	ble.n	8000386 <EmulateDPad+0x6e>
		if(_isAnalogStickExtended == false){
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <EmulateDPad+0xd0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d12e      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <EmulateDPad+0xd0>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000380:	2301      	movs	r3, #1
 8000382:	75fb      	strb	r3, [r7, #23]
 8000384:	e028      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange > (twelveBitMax/3)){
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <EmulateDPad+0xcc>)
 800038a:	fb82 1203 	smull	r1, r2, r2, r3
 800038e:	17db      	asrs	r3, r3, #31
 8000390:	1ad2      	subs	r2, r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	429a      	cmp	r2, r3
 8000396:	da09      	bge.n	80003ac <EmulateDPad+0x94>
		if(_isAnalogStickExtended == false){
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <EmulateDPad+0xd0>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d11b      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <EmulateDPad+0xd0>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 80003a6:	2304      	movs	r3, #4
 80003a8:	75fb      	strb	r3, [r7, #23]
 80003aa:	e015      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <EmulateDPad+0xcc>)
 80003b0:	fb82 1203 	smull	r1, r2, r2, r3
 80003b4:	17db      	asrs	r3, r3, #31
 80003b6:	1a9a      	subs	r2, r3, r2
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	dd09      	ble.n	80003d2 <EmulateDPad+0xba>
		if(_isAnalogStickExtended == false){
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <EmulateDPad+0xd0>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d108      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <EmulateDPad+0xd0>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80003cc:	2303      	movs	r3, #3
 80003ce:	75fb      	strb	r3, [r7, #23]
 80003d0:	e002      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <EmulateDPad+0xd0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	55555556 	.word	0x55555556
 80003e8:	200000f6 	.word	0x200000f6

080003ec <EmulateDPadReturningXAndYChange>:


ANALOG_STICK_DPAD_RESULT EmulateDPadReturningXAndYChange(ADC_HandleTypeDef* adc, i32* rXChange, i32* rYChange){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 80003f8:	f107 0210 	add.w	r2, r7, #16
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	4619      	mov	r1, r3
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff3c 	bl	8000280 <ReadAnalogStickChange>
	*rXChange = analogXChange;
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	601a      	str	r2, [r3, #0]
	*rYChange = analogYChange;
 800040e:	693a      	ldr	r2, [r7, #16]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	601a      	str	r2, [r3, #0]
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000414:	2300      	movs	r3, #0
 8000416:	77fb      	strb	r3, [r7, #31]
	const i32 twelveBitMax = 4096;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	61bb      	str	r3, [r7, #24]
	if(analogYChange > (twelveBitMax/3)){
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000422:	fb82 1203 	smull	r1, r2, r2, r3
 8000426:	17db      	asrs	r3, r3, #31
 8000428:	1ad2      	subs	r2, r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	429a      	cmp	r2, r3
 800042e:	da09      	bge.n	8000444 <EmulateDPadReturningXAndYChange+0x58>
		if(_isAnalogStickExtended == false){
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d141      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800043e:	2302      	movs	r3, #2
 8000440:	77fb      	strb	r3, [r7, #31]
 8000442:	e03b      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}

	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000448:	fb82 1203 	smull	r1, r2, r2, r3
 800044c:	17db      	asrs	r3, r3, #31
 800044e:	1a9a      	subs	r2, r3, r2
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	429a      	cmp	r2, r3
 8000454:	dd09      	ble.n	800046a <EmulateDPadReturningXAndYChange+0x7e>
		if(_isAnalogStickExtended == false){
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d12e      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000464:	2301      	movs	r3, #1
 8000466:	77fb      	strb	r3, [r7, #31]
 8000468:	e028      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>

		}

	}
	else if(analogXChange > (twelveBitMax/3)){
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 800046e:	fb82 1203 	smull	r1, r2, r2, r3
 8000472:	17db      	asrs	r3, r3, #31
 8000474:	1ad2      	subs	r2, r2, r3
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	429a      	cmp	r2, r3
 800047a:	da09      	bge.n	8000490 <EmulateDPadReturningXAndYChange+0xa4>
		if(_isAnalogStickExtended == false){
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d11b      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 800048a:	2304      	movs	r3, #4
 800048c:	77fb      	strb	r3, [r7, #31]
 800048e:	e015      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000494:	fb82 1203 	smull	r1, r2, r2, r3
 8000498:	17db      	asrs	r3, r3, #31
 800049a:	1a9a      	subs	r2, r3, r2
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dd09      	ble.n	80004b6 <EmulateDPadReturningXAndYChange+0xca>
		if(_isAnalogStickExtended == false){
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d108      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80004b0:	2303      	movs	r3, #3
 80004b2:	77fb      	strb	r3, [r7, #31]
 80004b4:	e002      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80004bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	55555556 	.word	0x55555556
 80004cc:	200000f6 	.word	0x200000f6

080004d0 <Buzzer_Init>:
		5727, // f
		5102, // g
		4545, // a
};

void Buzzer_Init(TIM_HandleTypeDef* timer){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Start(timer,TIM_CHANNEL_1);
 80004d8:	2100      	movs	r1, #0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f006 fc48 	bl	8006d70 <HAL_TIM_OC_Start>
	_timer = timer;
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <Buzzer_Init+0x30>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(_timer,0);
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <Buzzer_Init+0x30>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <Buzzer_Init+0x30>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200000f8 	.word	0x200000f8

08000504 <Buzzer_Note>:

void Buzzer_Note(Note note){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(_timer,_notesBuzzerTimerAutoReloadValues[note]);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <Buzzer_Note+0x34>)
 8000512:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <Buzzer_Note+0x38>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <Buzzer_Note+0x34>)
 8000522:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <Buzzer_Note+0x38>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60da      	str	r2, [r3, #12]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000000 	.word	0x20000000
 800053c:	200000f8 	.word	0x200000f8

08000540 <gfxClearFrameBuffer>:
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
	}
}

void gfxClearFrameBuffer(){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 8000544:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000548:	2100      	movs	r1, #0
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <gfxClearFrameBuffer+0x14>)
 800054c:	f007 fe0c 	bl	8008168 <memset>
	//UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200000fc 	.word	0x200000fc

08000558 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b53      	cmp	r3, #83	; 0x53
 800056c:	d825      	bhi.n	80005ba <gfxPlotPixelInternal+0x62>
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	2b2e      	cmp	r3, #46	; 0x2e
 8000572:	d822      	bhi.n	80005ba <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2354      	movs	r3, #84	; 0x54
 800057e:	fb03 f202 	mul.w	r2, r3, r2
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4413      	add	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800058e:	d215      	bcs.n	80005bc <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <gfxPlotPixelInternal+0x70>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b25a      	sxtb	r2, r3
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	f003 0307 	and.w	r3, r3, #7
 80005a0:	2101      	movs	r1, #1
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	b2d9      	uxtb	r1, r3
 80005ae:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <gfxPlotPixelInternal+0x70>)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4413      	add	r3, r2
 80005b4:	460a      	mov	r2, r1
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e000      	b.n	80005bc <gfxPlotPixelInternal+0x64>
		return;
 80005ba:	bf00      	nop
}
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200000fc 	.word	0x200000fc

080005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 80005cc:	b490      	push	{r4, r7}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4604      	mov	r4, r0
 80005d4:	4608      	mov	r0, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	461a      	mov	r2, r3
 80005da:	4623      	mov	r3, r4
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	4603      	mov	r3, r0
 80005e0:	71bb      	strb	r3, [r7, #6]
 80005e2:	460b      	mov	r3, r1
 80005e4:	717b      	strb	r3, [r7, #5]
 80005e6:	4613      	mov	r3, r2
 80005e8:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e01c      	b.n	800062a <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 80005f0:	4913      	ldr	r1, [pc, #76]	; (8000640 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 8000600:	490f      	ldr	r1, [pc, #60]	; (8000640 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	4613      	mov	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	440b      	add	r3, r1
 800060c:	3301      	adds	r3, #1
 800060e:	797a      	ldrb	r2, [r7, #5]
 8000610:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 8000612:	490b      	ldr	r1, [pc, #44]	; (8000640 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4613      	mov	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4413      	add	r3, r2
 800061c:	440b      	add	r3, r1
 800061e:	3302      	adds	r3, #2
 8000620:	793a      	ldrb	r2, [r7, #4]
 8000622:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	429a      	cmp	r2, r3
 8000630:	ddde      	ble.n	80005f0 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bc90      	pop	{r4, r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200002f4 	.word	0x200002f4

08000644 <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	4604      	mov	r4, r0
 800064c:	4608      	mov	r0, r1
 800064e:	4611      	mov	r1, r2
 8000650:	461a      	mov	r2, r3
 8000652:	4623      	mov	r3, r4
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	4603      	mov	r3, r0
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	460b      	mov	r3, r1
 800065c:	717b      	strb	r3, [r7, #5]
 800065e:	4613      	mov	r3, r2
 8000660:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 8000662:	797a      	ldrb	r2, [r7, #5]
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 800066a:	793a      	ldrb	r2, [r7, #4]
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da05      	bge.n	8000688 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	425b      	negs	r3, r3
 8000686:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	005a      	lsls	r2, r3, #1
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e01e      	b.n	80006da <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff56 	bl	8000558 <gfxPlotPixelInternal>
		if(D > 0){
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	dd0b      	ble.n	80006ca <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	4413      	add	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 80006ba:	69fa      	ldr	r2, [r7, #28]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	4413      	add	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e004      	b.n	80006d4 <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	4413      	add	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	797b      	ldrb	r3, [r7, #5]
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dddc      	ble.n	800069c <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3724      	adds	r7, #36	; 0x24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd90      	pop	{r4, r7, pc}

080006ec <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4604      	mov	r4, r0
 80006f4:	4608      	mov	r0, r1
 80006f6:	4611      	mov	r1, r2
 80006f8:	461a      	mov	r2, r3
 80006fa:	4623      	mov	r3, r4
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	4603      	mov	r3, r0
 8000700:	71bb      	strb	r3, [r7, #6]
 8000702:	460b      	mov	r3, r1
 8000704:	717b      	strb	r3, [r7, #5]
 8000706:	4613      	mov	r3, r2
 8000708:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800070a:	797a      	ldrb	r2, [r7, #5]
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 8000712:	793a      	ldrb	r2, [r7, #4]
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	2b00      	cmp	r3, #0
 8000722:	da04      	bge.n	800072e <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	425b      	negs	r3, r3
 800072c:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	005a      	lsls	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e01e      	b.n	8000780 <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff03 	bl	8000558 <gfxPlotPixelInternal>
		if(D > 0){
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b00      	cmp	r3, #0
 8000756:	dd0b      	ble.n	8000770 <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	4413      	add	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	e004      	b.n	800077a <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	4413      	add	r3, r2
 8000778:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	793b      	ldrb	r3, [r7, #4]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	dddc      	ble.n	8000742 <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}

08000792 <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 8000792:	b590      	push	{r4, r7, lr}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	4604      	mov	r4, r0
 800079a:	4608      	mov	r0, r1
 800079c:	4611      	mov	r1, r2
 800079e:	461a      	mov	r2, r3
 80007a0:	4623      	mov	r3, r4
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4603      	mov	r3, r0
 80007a6:	71bb      	strb	r3, [r7, #6]
 80007a8:	460b      	mov	r3, r1
 80007aa:	717b      	strb	r3, [r7, #5]
 80007ac:	4613      	mov	r3, r2
 80007ae:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 80007b0:	793a      	ldrb	r2, [r7, #4]
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007be:	7979      	ldrb	r1, [r7, #5]
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	1acb      	subs	r3, r1, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	bfb8      	it	lt
 80007c8:	425b      	neglt	r3, r3
 80007ca:	429a      	cmp	r2, r3
 80007cc:	da11      	bge.n	80007f2 <gfxDrawLine+0x60>
		if(x0 > x1){
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	797b      	ldrb	r3, [r7, #5]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d906      	bls.n	80007e4 <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	7939      	ldrb	r1, [r7, #4]
 80007dc:	7978      	ldrb	r0, [r7, #5]
 80007de:	f7ff ff31 	bl	8000644 <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 80007e2:	e017      	b.n	8000814 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	797a      	ldrb	r2, [r7, #5]
 80007e8:	79b9      	ldrb	r1, [r7, #6]
 80007ea:	79f8      	ldrb	r0, [r7, #7]
 80007ec:	f7ff ff2a 	bl	8000644 <gfxDrawLineBresenhamLow>
}
 80007f0:	e010      	b.n	8000814 <gfxDrawLine+0x82>
		if(y0 > y1){
 80007f2:	79ba      	ldrb	r2, [r7, #6]
 80007f4:	793b      	ldrb	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d906      	bls.n	8000808 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	7939      	ldrb	r1, [r7, #4]
 8000800:	7978      	ldrb	r0, [r7, #5]
 8000802:	f7ff ff73 	bl	80006ec <gfxDrawLineBresenhamHigh>
}
 8000806:	e005      	b.n	8000814 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 8000808:	793b      	ldrb	r3, [r7, #4]
 800080a:	797a      	ldrb	r2, [r7, #5]
 800080c:	79b9      	ldrb	r1, [r7, #6]
 800080e:	79f8      	ldrb	r0, [r7, #7]
 8000810:	f7ff ff6c 	bl	80006ec <gfxDrawLineBresenhamHigh>
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}

0800081c <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000828:	e067      	b.n	80008fa <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 800082a:	4938      	ldr	r1, [pc, #224]	; (800090c <gfxFinishDrawing+0xf0>)
 800082c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	440b      	add	r3, r1
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d15b      	bne.n	80008f4 <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 800083c:	4933      	ldr	r1, [pc, #204]	; (800090c <gfxFinishDrawing+0xf0>)
 800083e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	440b      	add	r3, r1
 8000848:	3301      	adds	r3, #1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 8000850:	492e      	ldr	r1, [pc, #184]	; (800090c <gfxFinishDrawing+0xf0>)
 8000852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	440b      	add	r3, r1
 800085c:	3302      	adds	r3, #2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 8000864:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800086c:	429a      	cmp	r2, r3
 800086e:	d20b      	bcs.n	8000888 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 8000870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000874:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000878:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800087c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000880:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000884:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 8000888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088a:	2254      	movs	r2, #84	; 0x54
 800088c:	fb02 f303 	mul.w	r3, r2, r3
 8000890:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 8000892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000894:	b2d9      	uxtb	r1, r3
 8000896:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	4413      	add	r3, r2
 800089e:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <gfxFinishDrawing+0xf4>)
 80008a0:	1898      	adds	r0, r3, r2
 80008a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4603      	mov	r3, r0
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f82a 	bl	8000914 <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 80008c0:	4912      	ldr	r1, [pc, #72]	; (800090c <gfxFinishDrawing+0xf0>)
 80008c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 80008d0:	490e      	ldr	r1, [pc, #56]	; (800090c <gfxFinishDrawing+0xf0>)
 80008d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	440b      	add	r3, r1
 80008dc:	3301      	adds	r3, #1
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 80008e2:	490a      	ldr	r1, [pc, #40]	; (800090c <gfxFinishDrawing+0xf0>)
 80008e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	3302      	adds	r3, #2
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80008f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f6:	3301      	adds	r3, #1
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fc:	2b05      	cmp	r3, #5
 80008fe:	dd94      	ble.n	800082a <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	; 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200002f4 	.word	0x200002f4
 8000910:	200000fc 	.word	0x200000fc

08000914 <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	460b      	mov	r3, r1
 8000920:	72fb      	strb	r3, [r7, #11]
 8000922:	4613      	mov	r3, r2
 8000924:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f001 fffa 	bl	8002928 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f002 f817 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 800093a:	7dfa      	ldrb	r2, [r7, #23]
 800093c:	7db9      	ldrb	r1, [r7, #22]
 800093e:	2300      	movs	r3, #0
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f001 ff1a 	bl	800277a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 8000946:	7aba      	ldrb	r2, [r7, #10]
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f001 ff67 	bl	8002820 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f002 f818 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f001 fff5 	bl	8002948 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f002 f802 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8000964:	8c3b      	ldrh	r3, [r7, #32]
 8000966:	461a      	mov	r2, r3
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f001 fed2 	bl	8002714 <LCD_PCD8544_LL_send_data>
 8000970:	4603      	mov	r3, r0
 8000972:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f002 f807 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 800097a:	7d7b      	ldrb	r3, [r7, #21]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	; 0x70
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	603a      	str	r2, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	460b      	mov	r3, r1
 8000992:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f7ff fc1b 	bl	80001d0 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 80009a0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	461a      	mov	r2, r3
 80009ae:	79bb      	ldrb	r3, [r7, #6]
 80009b0:	4413      	add	r3, r2
 80009b2:	2b54      	cmp	r3, #84	; 0x54
 80009b4:	dd04      	ble.n	80009c0 <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 80009b6:	230e      	movs	r3, #14
 80009b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2254      	movs	r2, #84	; 0x54
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f007 fbcd 	bl	8008168 <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 80009d4:	e029      	b.n	8000a2a <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 80009d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d029      	beq.n	8000a38 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 80009e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 80009f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	461a      	mov	r2, r3
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	1898      	adds	r0, r3, r2
 8000a06:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <gfxWriteTextLineToFrameBuffer+0xf4>)
 8000a16:	4413      	add	r3, r2
 8000a18:	2206      	movs	r2, #6
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f007 fb96 	bl	800814c <memcpy>
	for ( ; nChars<strLen; nChars++) {
 8000a20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000a24:	3301      	adds	r3, #1
 8000a26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000a2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000a2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3cf      	bcc.n	80009d6 <gfxWriteTextLineToFrameBuffer+0x52>
 8000a36:	e000      	b.n	8000a3a <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 8000a38:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2254      	movs	r2, #84	; 0x54
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 8000a44:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	0052      	lsls	r2, r2, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 8000a56:	79ba      	ldrb	r2, [r7, #6]
 8000a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <gfxWriteTextLineToFrameBuffer+0xf8>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000a64:	f107 010c 	add.w	r1, r7, #12
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f007 fb6f 	bl	800814c <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 8000a6e:	bf00      	nop
 8000a70:	3770      	adds	r7, #112	; 0x70
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08009680 	.word	0x08009680
 8000a7c:	200000fc 	.word	0x200000fc

08000a80 <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4604      	mov	r4, r0
 8000a88:	4608      	mov	r0, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4623      	mov	r3, r4
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	4603      	mov	r3, r0
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	460b      	mov	r3, r1
 8000a98:	717b      	strb	r3, [r7, #5]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	797a      	ldrb	r2, [r7, #5]
 8000aa2:	79b9      	ldrb	r1, [r7, #6]
 8000aa4:	79f8      	ldrb	r0, [r7, #7]
 8000aa6:	f7ff fe74 	bl	8000792 <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 8000aaa:	793b      	ldrb	r3, [r7, #4]
 8000aac:	797a      	ldrb	r2, [r7, #5]
 8000aae:	79b9      	ldrb	r1, [r7, #6]
 8000ab0:	7978      	ldrb	r0, [r7, #5]
 8000ab2:	f7ff fe6e 	bl	8000792 <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 8000ab6:	793b      	ldrb	r3, [r7, #4]
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	7939      	ldrb	r1, [r7, #4]
 8000abc:	7978      	ldrb	r0, [r7, #5]
 8000abe:	f7ff fe68 	bl	8000792 <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	7939      	ldrb	r1, [r7, #4]
 8000ac8:	79f8      	ldrb	r0, [r7, #7]
 8000aca:	f7ff fe62 	bl	8000792 <gfxDrawLine>


}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
	...

08000ad8 <ClearUpdateRegions>:

void ClearUpdateRegions(){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	e01c      	b.n	8000b1e <ClearUpdateRegions+0x46>
		gScreenRegionsToUpdate[i].updateColumnFinish = 0;
 8000ae4:	4913      	ldr	r1, [pc, #76]	; (8000b34 <ClearUpdateRegions+0x5c>)
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	3302      	adds	r3, #2
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000af6:	490f      	ldr	r1, [pc, #60]	; (8000b34 <ClearUpdateRegions+0x5c>)
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	3301      	adds	r3, #1
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 0;
 8000b08:	490a      	ldr	r1, [pc, #40]	; (8000b34 <ClearUpdateRegions+0x5c>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	dddf      	ble.n	8000ae4 <ClearUpdateRegions+0xc>


	}
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200002f4 	.word	0x200002f4

08000b38 <ClearScreen>:


void ClearScreen(LCD_PCD8544_screen_t* scr){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	gfxClearFrameBuffer();
 8000b40:	f7ff fcfe 	bl	8000540 <gfxClearFrameBuffer>
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e01c      	b.n	8000b84 <ClearScreen+0x4c>
		gScreenRegionsToUpdate[i].updateColumnFinish = 83;
 8000b4a:	4913      	ldr	r1, [pc, #76]	; (8000b98 <ClearScreen+0x60>)
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	3302      	adds	r3, #2
 8000b58:	2253      	movs	r2, #83	; 0x53
 8000b5a:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000b5c:	490e      	ldr	r1, [pc, #56]	; (8000b98 <ClearScreen+0x60>)
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	3301      	adds	r3, #1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 1;
 8000b6e:	490a      	ldr	r1, [pc, #40]	; (8000b98 <ClearScreen+0x60>)
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3301      	adds	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b05      	cmp	r3, #5
 8000b88:	dddf      	ble.n	8000b4a <ClearScreen+0x12>
	}
	gfxFinishDrawing(scr);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fe46 	bl	800081c <gfxFinishDrawing>

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200002f4 	.word	0x200002f4

08000b9c <gfxClearFrameBufferRow>:


void gfxClearFrameBufferRow(u8 rowIndex, u8 colStart, u8 amount){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	4613      	mov	r3, r2
 8000bac:	717b      	strb	r3, [r7, #5]
	u8* frameBufferStartPtr = &gFrameBuffer[(rowIndex * PIXELS_WIDTH) + colStart];
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2254      	movs	r2, #84	; 0x54
 8000bb2:	fb03 f202 	mul.w	r2, r3, r2
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <gfxClearFrameBufferRow+0x38>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

	memset(frameBufferStartPtr, 0, amount);
 8000bc0:	797b      	ldrb	r3, [r7, #5]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f007 face 	bl	8008168 <memset>

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200000fc 	.word	0x200000fc

08000bd8 <MusicPlayer_StartTune>:

void MusicPlayer_Init(TIM_HandleTypeDef* timer){

}

void MusicPlayer_StartTune(MusicNote* notes, u32 numNotes){
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	_currentTune = notes;
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <MusicPlayer_StartTune+0x3c>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6013      	str	r3, [r2, #0]
	_currentTuneNumNotes = numNotes;
 8000be8:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <MusicPlayer_StartTune+0x40>)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	6013      	str	r3, [r2, #0]
	_musicPlayerState = PLAYING;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MusicPlayer_StartTune+0x44>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
	_thisNoteTimer = 0;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MusicPlayer_StartTune+0x48>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
	_tuneTimer = 0;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MusicPlayer_StartTune+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
	_thisNoteStarted = false;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MusicPlayer_StartTune+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000308 	.word	0x20000308
 8000c18:	2000030c 	.word	0x2000030c
 8000c1c:	20000314 	.word	0x20000314
 8000c20:	2000031c 	.word	0x2000031c
 8000c24:	20000318 	.word	0x20000318
 8000c28:	20000320 	.word	0x20000320

08000c2c <MusicPlayer_TimerISR>:

void MusicPlayer_TimerISR(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	_tuneTimer += MUSIC_SEQUENCER_INTERVAL_MILLISECONDS;
 8000c32:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <MusicPlayer_TimerISR+0xb4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	330a      	adds	r3, #10
 8000c38:	4a29      	ldr	r2, [pc, #164]	; (8000ce0 <MusicPlayer_TimerISR+0xb4>)
 8000c3a:	6013      	str	r3, [r2, #0]
	if(_musicPlayerState != PLAYING){
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <MusicPlayer_TimerISR+0xb8>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d148      	bne.n	8000cd6 <MusicPlayer_TimerISR+0xaa>
		return;
	}


	if(_thisNoteStarted == false){
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MusicPlayer_TimerISR+0xbc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d119      	bne.n	8000c80 <MusicPlayer_TimerISR+0x54>
		Buzzer_Note(_currentTune[_currentTunePosition++].note);
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MusicPlayer_TimerISR+0xc0>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	1c59      	adds	r1, r3, #1
 8000c56:	4826      	ldr	r0, [pc, #152]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c58:	6001      	str	r1, [r0, #0]
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fc4f 	bl	8000504 <Buzzer_Note>
		if(_currentTunePosition == _currentTuneNumNotes){
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MusicPlayer_TimerISR+0xc8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d102      	bne.n	8000c78 <MusicPlayer_TimerISR+0x4c>
			_currentTunePosition = 0;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
		}
		_thisNoteStarted = true;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MusicPlayer_TimerISR+0xbc>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	e02b      	b.n	8000cd8 <MusicPlayer_TimerISR+0xac>
	}
	else{
		u32 duration = _currentTunePosition == 0 ? _currentTune[_currentTuneNumNotes - 1].duration : _currentTune
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10a      	bne.n	8000c9e <MusicPlayer_TimerISR+0x72>
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MusicPlayer_TimerISR+0xc0>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MusicPlayer_TimerISR+0xc8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000c94:	3b01      	subs	r3, #1
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4413      	add	r3, r2
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	e009      	b.n	8000cb2 <MusicPlayer_TimerISR+0x86>
				[_currentTunePosition - 1].duration;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MusicPlayer_TimerISR+0xc0>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000caa:	3b01      	subs	r3, #1
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	4413      	add	r3, r2
		u32 duration = _currentTunePosition == 0 ? _currentTune[_currentTuneNumNotes - 1].duration : _currentTune
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	607b      	str	r3, [r7, #4]
		if(_thisNoteTimer > duration){
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MusicPlayer_TimerISR+0xcc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d205      	bcs.n	8000cca <MusicPlayer_TimerISR+0x9e>
			_thisNoteStarted = false;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MusicPlayer_TimerISR+0xbc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
			_thisNoteTimer = 0;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MusicPlayer_TimerISR+0xcc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
		}
		_thisNoteTimer += MUSIC_SEQUENCER_INTERVAL_MILLISECONDS;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MusicPlayer_TimerISR+0xcc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	330a      	adds	r3, #10
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <MusicPlayer_TimerISR+0xcc>)
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e000      	b.n	8000cd8 <MusicPlayer_TimerISR+0xac>
		return;
 8000cd6:	bf00      	nop
	}

}
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000318 	.word	0x20000318
 8000ce4:	20000314 	.word	0x20000314
 8000ce8:	20000320 	.word	0x20000320
 8000cec:	20000308 	.word	0x20000308
 8000cf0:	20000310 	.word	0x20000310
 8000cf4:	2000030c 	.word	0x2000030c
 8000cf8:	2000031c 	.word	0x2000031c

08000cfc <GetStateAtXY>:
static u8* _TetrisPieces[NUM_TETRIS_PIECES]  = {_ZPieceOccupiedIndicies, _SPieceOccupiedIndicies,_OPieceOccupiedIndicies,_LPieceOccupiedIndicies,_TPieceOccupiedIndicies,_JPieceOccupiedIndicies,_IPieceOccupiedIndices, };




static BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <GetStateAtXY+0x3c>)
 8000d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d14:	461a      	mov	r2, r3
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	fa42 f303 	asr.w	r3, r2, r3
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000324 	.word	0x20000324

08000d3c <SetStateAtXY>:

static void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
 8000d46:	460b      	mov	r3, r1
 8000d48:	71bb      	strb	r3, [r7, #6]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000d4e:	797b      	ldrb	r3, [r7, #5]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d111      	bne.n	8000d78 <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <SetStateAtXY+0x70>)
 8000d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2101      	movs	r1, #1
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	b291      	uxth	r1, r2
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <SetStateAtXY+0x70>)
 8000d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 8000d76:	e012      	b.n	8000d9e <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <SetStateAtXY+0x70>)
 8000d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2101      	movs	r1, #1
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	b291      	uxth	r1, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <SetStateAtXY+0x70>)
 8000d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000324 	.word	0x20000324

08000db0 <Tetris_DrawCurentPiece>:




static void Tetris_DrawCurentPiece(){
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <Tetris_DrawCurentPiece+0xb8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <Tetris_DrawCurentPiece+0xb8>)
 8000dbc:	7912      	ldrb	r2, [r2, #4]
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	e045      	b.n	8000e56 <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	0052      	lsls	r2, r2, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	0052      	lsls	r2, r2, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <Tetris_DrawCurentPiece+0xb8>)
 8000df4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	0052      	lsls	r2, r2, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	4413      	add	r3, r2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <Tetris_DrawCurentPiece+0xb8>)
 8000e0c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	0052      	lsls	r2, r2, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db12      	blt.n	8000e50 <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <Tetris_DrawCurentPiece+0xbc>)
 8000e2c:	681c      	ldr	r4, [r3, #0]
 8000e2e:	793a      	ldrb	r2, [r7, #4]
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <Tetris_DrawCurentPiece+0xc0>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	b2d8      	uxtb	r0, r3
 8000e38:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000e3a:	793a      	ldrb	r2, [r7, #4]
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <Tetris_DrawCurentPiece+0xc0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000e44:	3303      	adds	r3, #3
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	3303      	adds	r3, #3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	ddb6      	ble.n	8000dca <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000035c 	.word	0x2000035c
 8000e6c:	20000348 	.word	0x20000348
 8000e70:	20000010 	.word	0x20000010

08000e74 <Tetris_DrawNextPiece>:

static void Tetris_DrawNextPiece(){
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000e7a:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <Tetris_DrawNextPiece+0x94>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <Tetris_DrawNextPiece+0x94>)
 8000e80:	7912      	ldrb	r2, [r2, #4]
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	e033      	b.n	8000ef6 <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	0052      	lsls	r2, r2, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	0052      	lsls	r2, r2, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	3321      	adds	r3, #33	; 0x21
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000ebe:	797b      	ldrb	r3, [r7, #5]
 8000ec0:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db12      	blt.n	8000ef0 <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <Tetris_DrawNextPiece+0x98>)
 8000ecc:	681c      	ldr	r4, [r3, #0]
 8000ece:	793a      	ldrb	r2, [r7, #4]
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <Tetris_DrawNextPiece+0x9c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b2d8      	uxtb	r0, r3
 8000ed8:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000eda:	793a      	ldrb	r2, [r7, #4]
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <Tetris_DrawNextPiece+0x9c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000ee4:	3303      	adds	r3, #3
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	3303      	adds	r3, #3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	ddc8      	ble.n	8000e8e <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000364 	.word	0x20000364
 8000f0c:	20000348 	.word	0x20000348
 8000f10:	20000010 	.word	0x20000010

08000f14 <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <Tetris_DrawTetrisBoard+0xe0>)
 8000f20:	681c      	ldr	r4, [r3, #0]
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <Tetris_DrawTetrisBoard+0xe4>)
 8000f24:	7818      	ldrb	r0, [r3, #0]
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <Tetris_DrawTetrisBoard+0xe8>)
 8000f28:	7819      	ldrb	r1, [r3, #0]
 8000f2a:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <Tetris_DrawTetrisBoard+0xe4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	331e      	adds	r3, #30
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <Tetris_DrawTetrisBoard+0xe8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	332d      	adds	r3, #45	; 0x2d
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e049      	b.n	8000fd6 <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	e040      	b.n	8000fca <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fed2 	bl	8000cfc <GetStateAtXY>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d132      	bne.n	8000fc4 <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	0052      	lsls	r2, r2, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <Tetris_DrawTetrisBoard+0xe4>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	0052      	lsls	r2, r2, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <Tetris_DrawTetrisBoard+0xe8>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	0052      	lsls	r2, r2, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <Tetris_DrawTetrisBoard+0xe4>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3303      	adds	r3, #3
 8000f9c:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	0052      	lsls	r2, r2, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <Tetris_DrawTetrisBoard+0xe8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3303      	adds	r3, #3
 8000fb4:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <Tetris_DrawTetrisBoard+0xec>)
 8000fb8:	681c      	ldr	r4, [r3, #0]
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	7b7a      	ldrb	r2, [r7, #13]
 8000fbe:	7bb9      	ldrb	r1, [r7, #14]
 8000fc0:	7bf8      	ldrb	r0, [r7, #15]
 8000fc2:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	ddbb      	ble.n	8000f48 <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	2b0e      	cmp	r3, #14
 8000fda:	ddb2      	ble.n	8000f42 <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 8000fdc:	f7ff fee8 	bl	8000db0 <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8000fe6:	f7ff ff45 	bl	8000e74 <Tetris_DrawNextPiece>
	}
}
 8000fea:	bf00      	nop
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000344 	.word	0x20000344
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	2000036c 	.word	0x2000036c
 8001000:	2000034c 	.word	0x2000034c

08001004 <InitNewCurrentPiece>:

static void InitNewCurrentPiece(){
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <InitNewCurrentPiece+0x30>)
 800100a:	2202      	movs	r2, #2
 800100c:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <InitNewCurrentPiece+0x30>)
 8001010:	22fe      	movs	r2, #254	; 0xfe
 8001012:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <InitNewCurrentPiece+0x34>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4798      	blx	r3
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <InitNewCurrentPiece+0x38>)
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	4a03      	ldr	r2, [pc, #12]	; (8001034 <InitNewCurrentPiece+0x30>)
 8001026:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <InitNewCurrentPiece+0x30>)
 800102a:	2200      	movs	r2, #0
 800102c:	711a      	strb	r2, [r3, #4]
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000035c 	.word	0x2000035c
 8001038:	20000350 	.word	0x20000350
 800103c:	20000014 	.word	0x20000014

08001040 <InitNewNextPiece>:

static void InitNewNextPiece(){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <InitNewNextPiece+0x30>)
 8001046:	2202      	movs	r2, #2
 8001048:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <InitNewNextPiece+0x30>)
 800104c:	22fe      	movs	r2, #254	; 0xfe
 800104e:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <InitNewNextPiece+0x34>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4798      	blx	r3
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <InitNewNextPiece+0x38>)
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	4a03      	ldr	r2, [pc, #12]	; (8001070 <InitNewNextPiece+0x30>)
 8001062:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <InitNewNextPiece+0x30>)
 8001066:	2200      	movs	r2, #0
 8001068:	711a      	strb	r2, [r3, #4]
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000364 	.word	0x20000364
 8001074:	20000350 	.word	0x20000350
 8001078:	20000014 	.word	0x20000014

0800107c <CopyNextPieceToCurrent>:

static void CopyNextPieceToCurrent(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <CopyNextPieceToCurrent+0x1c>)
 8001082:	4a06      	ldr	r2, [pc, #24]	; (800109c <CopyNextPieceToCurrent+0x20>)
 8001084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001088:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2000035c 	.word	0x2000035c
 800109c:	20000364 	.word	0x20000364

080010a0 <Tetris_ResetTetrisBoard>:

void Tetris_ResetTetrisBoard(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 80010a4:	221e      	movs	r2, #30
 80010a6:	2100      	movs	r1, #0
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <Tetris_ResetTetrisBoard+0x1c>)
 80010aa:	f007 f85d 	bl	8008168 <memset>
	InitNewCurrentPiece();
 80010ae:	f7ff ffa9 	bl	8001004 <InitNewCurrentPiece>
	InitNewNextPiece();
 80010b2:	f7ff ffc5 	bl	8001040 <InitNewNextPiece>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000324 	.word	0x20000324

080010c0 <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <Tetris_Init+0x40>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 80010d4:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <Tetris_Init+0x44>)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <Tetris_Init+0x48>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <Tetris_Init+0x4c>)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <Tetris_Init+0x50>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 80010ec:	4a09      	ldr	r2, [pc, #36]	; (8001114 <Tetris_Init+0x54>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	6013      	str	r3, [r2, #0]
	//Tetris_ResetTetrisBoard();
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000344 	.word	0x20000344
 8001104:	2000034c 	.word	0x2000034c
 8001108:	20000348 	.word	0x20000348
 800110c:	20000350 	.word	0x20000350
 8001110:	20000354 	.word	0x20000354
 8001114:	20000358 	.word	0x20000358

08001118 <IsBlockAllowedToBeHere>:

static bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8001128:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800112c:	2b00      	cmp	r3, #0
 800112e:	da09      	bge.n	8001144 <IsBlockAllowedToBeHere+0x2c>
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db05      	blt.n	8001144 <IsBlockAllowedToBeHere+0x2c>
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b09      	cmp	r3, #9
 800113e:	dc01      	bgt.n	8001144 <IsBlockAllowedToBeHere+0x2c>
		return true;
 8001140:	2301      	movs	r3, #1
 8001142:	e01b      	b.n	800117c <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	79ba      	ldrb	r2, [r7, #6]
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fdd6 	bl	8000cfc <GetStateAtXY>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <IsBlockAllowedToBeHere+0x42>
		return false;
 8001156:	2300      	movs	r3, #0
 8001158:	e010      	b.n	800117c <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b09      	cmp	r3, #9
 8001160:	dc03      	bgt.n	800116a <IsBlockAllowedToBeHere+0x52>
 8001162:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001166:	2b0e      	cmp	r3, #14
 8001168:	dd01      	ble.n	800116e <IsBlockAllowedToBeHere+0x56>
		return false;
 800116a:	2300      	movs	r3, #0
 800116c:	e006      	b.n	800117c <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	da01      	bge.n	800117a <IsBlockAllowedToBeHere+0x62>
		return false;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <WriteCurrentPieceToGameBoardArray>:

static bool WriteCurrentPieceToGameBoardArray(){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <WriteCurrentPieceToGameBoardArray+0x88>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1f      	ldr	r2, [pc, #124]	; (800120c <WriteCurrentPieceToGameBoardArray+0x88>)
 8001190:	7912      	ldrb	r2, [r2, #4]
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4413      	add	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e02e      	b.n	80011fc <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	4413      	add	r3, r2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <WriteCurrentPieceToGameBoardArray+0x88>)
 80011b8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	4413      	add	r3, r2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <WriteCurrentPieceToGameBoardArray+0x88>)
 80011c8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	797b      	ldrb	r3, [r7, #5]
 80011d0:	4413      	add	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 80011d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da01      	bge.n	80011e2 <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 80011de:	2301      	movs	r3, #1
 80011e0:	e010      	b.n	8001204 <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 80011e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db05      	blt.n	80011f6 <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 80011ea:	793b      	ldrb	r3, [r7, #4]
 80011ec:	78f9      	ldrb	r1, [r7, #3]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fda3 	bl	8000d3c <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	ddcd      	ble.n	800119e <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000035c 	.word	0x2000035c

08001210 <IsMoveValid>:

static u8 IsMoveValid(){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <IsMoveValid+0x84>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <IsMoveValid+0x84>)
 800121c:	7912      	ldrb	r2, [r2, #4]
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4413      	add	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e02b      	b.n	8001282 <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <IsMoveValid+0x84>)
 8001244:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	4413      	add	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <IsMoveValid+0x84>)
 8001254:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	4413      	add	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 8001262:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001266:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff53 	bl	8001118 <IsBlockAllowedToBeHere>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <IsMoveValid+0x6c>
			return 0;
 8001278:	2300      	movs	r3, #0
 800127a:	e006      	b.n	800128a <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3301      	adds	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b03      	cmp	r3, #3
 8001286:	ddd0      	ble.n	800122a <IsMoveValid+0x1a>
		}
	}
	return 1;
 8001288:	2301      	movs	r3, #1
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000035c 	.word	0x2000035c

08001298 <CheckForAndClearLines>:

static u8 CheckForAndClearLines(){
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 80012a6:	230e      	movs	r3, #14
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	e027      	b.n	80012fc <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 80012ac:	4a18      	ldr	r2, [pc, #96]	; (8001310 <CheckForAndClearLines+0x78>)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d105      	bne.n	80012c8 <CheckForAndClearLines+0x30>
			linesToClear++;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	3301      	adds	r3, #1
 80012c0:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71bb      	strb	r3, [r7, #6]
 80012c6:	e001      	b.n	80012cc <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 80012c8:	2300      	movs	r3, #0
 80012ca:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d011      	beq.n	80012f6 <CheckForAndClearLines+0x5e>
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10e      	bne.n	80012f6 <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	490c      	ldr	r1, [pc, #48]	; (8001310 <CheckForAndClearLines+0x78>)
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <CheckForAndClearLines+0x78>)
 80012e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <CheckForAndClearLines+0x78>)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2100      	movs	r1, #0
 80012f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dad4      	bge.n	80012ac <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 8001302:	79fb      	ldrb	r3, [r7, #7]
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20000324 	.word	0x20000324

08001314 <Tetris_Rotate>:

void Tetris_Rotate(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <Tetris_Rotate+0x48>)
 800131a:	791b      	ldrb	r3, [r3, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <Tetris_Rotate+0x48>)
 8001322:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <Tetris_Rotate+0x48>)
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d902      	bls.n	8001332 <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <Tetris_Rotate+0x48>)
 800132e:	2200      	movs	r2, #0
 8001330:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 8001332:	f7ff ff6d 	bl	8001210 <IsMoveValid>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10d      	bne.n	8001358 <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <Tetris_Rotate+0x48>)
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <Tetris_Rotate+0x48>)
 8001346:	2203      	movs	r2, #3
 8001348:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 800134a:	e005      	b.n	8001358 <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <Tetris_Rotate+0x48>)
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	3b01      	subs	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b01      	ldr	r3, [pc, #4]	; (800135c <Tetris_Rotate+0x48>)
 8001356:	711a      	strb	r2, [r3, #4]
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000035c 	.word	0x2000035c

08001360 <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <Tetris_MoveDown+0x80>)
 8001368:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	b25a      	sxtb	r2, r3
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <Tetris_MoveDown+0x80>)
 8001376:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 8001378:	f7ff ff4a 	bl	8001210 <IsMoveValid>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d128      	bne.n	80013d4 <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <Tetris_MoveDown+0x80>)
 8001384:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	3b01      	subs	r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	b25a      	sxtb	r2, r3
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <Tetris_MoveDown+0x80>)
 8001392:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 8001394:	f7ff fef6 	bl	8001184 <WriteCurrentPieceToGameBoardArray>
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 800139c:	f7ff ff7c 	bl	8001298 <CheckForAndClearLines>
 80013a0:	4603      	mov	r3, r0
 80013a2:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 80013a4:	f7ff fe6a 	bl	800107c <CopyNextPieceToCurrent>
		InitNewNextPiece();
 80013a8:	f7ff fe4a 	bl	8001040 <InitNewNextPiece>
		if(hasGameOverOccured == true){
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d106      	bne.n	80013c0 <Tetris_MoveDown+0x60>
			_onGameOver();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <Tetris_MoveDown+0x84>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4798      	blx	r3
			Tetris_ResetTetrisBoard();
 80013b8:	f7ff fe72 	bl	80010a0 <Tetris_ResetTetrisBoard>
			return MoveDownResultGameOver;
 80013bc:	2303      	movs	r3, #3
 80013be:	e00a      	b.n	80013d6 <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <Tetris_MoveDown+0x88>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	4610      	mov	r0, r2
 80013ce:	4798      	blx	r3
		}
		return Settled;
 80013d0:	2302      	movs	r3, #2
 80013d2:	e000      	b.n	80013d6 <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000035c 	.word	0x2000035c
 80013e4:	20000358 	.word	0x20000358
 80013e8:	20000354 	.word	0x20000354

080013ec <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <Tetris_MoveLeft+0x38>)
 80013f2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <Tetris_MoveLeft+0x38>)
 8001400:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8001402:	f7ff ff05 	bl	8001210 <IsMoveValid>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d108      	bne.n	800141e <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <Tetris_MoveLeft+0x38>)
 800140e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	3301      	adds	r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	b25a      	sxtb	r2, r3
 800141a:	4b02      	ldr	r3, [pc, #8]	; (8001424 <Tetris_MoveLeft+0x38>)
 800141c:	715a      	strb	r2, [r3, #5]
	}
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000035c 	.word	0x2000035c

08001428 <Tetris_MoveRight>:

void Tetris_MoveRight(){
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <Tetris_MoveRight+0x38>)
 800142e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	b25a      	sxtb	r2, r3
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <Tetris_MoveRight+0x38>)
 800143c:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 800143e:	f7ff fee7 	bl	8001210 <IsMoveValid>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d108      	bne.n	800145a <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <Tetris_MoveRight+0x38>)
 800144a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3b01      	subs	r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	b25a      	sxtb	r2, r3
 8001456:	4b02      	ldr	r3, [pc, #8]	; (8001460 <Tetris_MoveRight+0x38>)
 8001458:	715a      	strb	r2, [r3, #5]
	}
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000035c 	.word	0x2000035c

08001464 <WriteSingleHighScoreToFrameBuffer>:
static i8 _settingInitial = 0;
static u32 _blinkTimer = 0;
static bool _blinkState = true; /* True if the initial being set is currently drawn to frame buffer, false otherwise */
static bool _isAnalogStickExtended = false; /* Is the analog stick moved far enough in any one direction to count as "extended" */

static void WriteSingleHighScoreToFrameBuffer(const HighScore* highScore, u8 line){
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af02      	add	r7, sp, #8
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
	char highScoreLineBuffer[10];
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
		highScore->Initials[0],
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 8001474:	4619      	mov	r1, r3
		highScore->Initials[1],
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	785b      	ldrb	r3, [r3, #1]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 800147a:	461c      	mov	r4, r3
		highScore->Initials[2],
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	789b      	ldrb	r3, [r3, #2]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f107 000c 	add.w	r0, r7, #12
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	4623      	mov	r3, r4
 8001490:	460a      	mov	r2, r1
 8001492:	4907      	ldr	r1, [pc, #28]	; (80014b0 <WriteSingleHighScoreToFrameBuffer+0x4c>)
 8001494:	f006 fedc 	bl	8008250 <siprintf>
		highScore->Score);
	gfxWriteTextLineToFrameBuffer(line,0,highScoreLineBuffer);
 8001498:	f107 020c 	add.w	r2, r7, #12
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fa6f 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	bf00      	nop
 80014b0:	080095f8 	.word	0x080095f8

080014b4 <DrawHighScoresToFrameBuffer>:

static void DrawHighScoresToFrameBuffer(){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e010      	b.n	80014e2 <DrawHighScoresToFrameBuffer+0x2e>
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(i);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fda9 	bl	800201c <TetrisHighScores_GetHighScoreAtIndex>
 80014ca:	6038      	str	r0, [r7, #0]
		WriteSingleHighScoreToFrameBuffer(highScore, i+1);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f7ff ffc4 	bl	8001464 <WriteSingleHighScoreToFrameBuffer>
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d9eb      	bls.n	80014c0 <DrawHighScoresToFrameBuffer+0xc>
	}

}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <BlinkInitialBeingSet>:

static void BlinkInitialBeingSet(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	if(_blinkState == true){
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <BlinkInitialBeingSet+0x8c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d11e      	bne.n	8001540 <BlinkInitialBeingSet+0x4c>
		_blinkState = false;
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <BlinkInitialBeingSet+0x8c>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
		u8 colStart = _settingInitial * LCD_PCD8544_CHAR_WIDTH;
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <BlinkInitialBeingSet+0x90>)
 800150a:	f993 3000 	ldrsb.w	r3, [r3]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	0052      	lsls	r2, r2, #1
 8001514:	4413      	add	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	71fb      	strb	r3, [r7, #7]
		u8 row = _newHighScoreRank + 1;
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <BlinkInitialBeingSet+0x94>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	71bb      	strb	r3, [r7, #6]
		gfxClearFrameBufferRow(row,colStart,LCD_PCD8544_CHAR_WIDTH);
 8001522:	79f9      	ldrb	r1, [r7, #7]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	2206      	movs	r2, #6
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fb37 	bl	8000b9c <gfxClearFrameBufferRow>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,colStart + LCD_PCD8544_CHAR_WIDTH);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3306      	adds	r3, #6
 8001532:	b2db      	uxtb	r3, r3
 8001534:	79b9      	ldrb	r1, [r7, #6]
 8001536:	79b8      	ldrb	r0, [r7, #6]
 8001538:	2200      	movs	r2, #0
 800153a:	f7ff f847 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
 800153e:	e017      	b.n	8001570 <BlinkInitialBeingSet+0x7c>
	}
	else{
		_blinkState = true;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <BlinkInitialBeingSet+0x8c>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
		u8 row = _newHighScoreRank + 1;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <BlinkInitialBeingSet+0x94>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <BlinkInitialBeingSet+0x94>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fd62 	bl	800201c <TetrisHighScores_GetHighScoreAtIndex>
 8001558:	60b8      	str	r0, [r7, #8]
		WriteSingleHighScoreToFrameBuffer(highScore, row);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4619      	mov	r1, r3
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f7ff ff80 	bl	8001464 <WriteSingleHighScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,LCD_PCD8544_CHAR_WIDTH*3);
 8001564:	7bf9      	ldrb	r1, [r7, #15]
 8001566:	7bf8      	ldrb	r0, [r7, #15]
 8001568:	2312      	movs	r3, #18
 800156a:	2200      	movs	r2, #0
 800156c:	f7ff f82e 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	}
	gfxFinishDrawing(&gLcdScreen);
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <BlinkInitialBeingSet+0x98>)
 8001572:	f7ff f953 	bl	800081c <gfxFinishDrawing>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000030 	.word	0x20000030
 8001584:	20000375 	.word	0x20000375
 8001588:	20000374 	.word	0x20000374
 800158c:	2000060c 	.word	0x2000060c

08001590 <TetrisEnterHighScore_Update>:

Tetris_Modes_StateTriggers TetrisEnterHighScore_Update(u32 timePassed){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	else{
		_isAnalogStickExtended = false;
	}
	*/
	HighScore* highScore;
	switch(EmulateDPad(&hadc2)){
 8001598:	4858      	ldr	r0, [pc, #352]	; (80016fc <TetrisEnterHighScore_Update+0x16c>)
 800159a:	f7fe febd 	bl	8000318 <EmulateDPad>
 800159e:	4603      	mov	r3, r0
 80015a0:	3b01      	subs	r3, #1
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	f200 808a 	bhi.w	80016bc <TetrisEnterHighScore_Update+0x12c>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <TetrisEnterHighScore_Update+0x20>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	0800160d 	.word	0x0800160d
 80015b8:	08001659 	.word	0x08001659
 80015bc:	0800168b 	.word	0x0800168b
	case UP:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 80015c0:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <TetrisEnterHighScore_Update+0x170>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fd29 	bl	800201c <TetrisHighScores_GetHighScoreAtIndex>
 80015ca:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]++;
 80015cc:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 80015ce:	f993 3000 	ldrsb.w	r3, [r3]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	5cd2      	ldrb	r2, [r2, r3]
 80015d6:	3201      	adds	r2, #1
 80015d8:	b2d1      	uxtb	r1, r2
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] > 'Z'){
 80015de:	4b49      	ldr	r3, [pc, #292]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 80015e0:	f993 3000 	ldrsb.w	r3, [r3]
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	5c9b      	ldrb	r3, [r3, r2]
 80015ea:	2b5a      	cmp	r3, #90	; 0x5a
 80015ec:	d906      	bls.n	80015fc <TetrisEnterHighScore_Update+0x6c>
			highScore->Initials[_settingInitial] = 'A';
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 80015f0:	f993 3000 	ldrsb.w	r3, [r3]
 80015f4:	461a      	mov	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2141      	movs	r1, #65	; 0x41
 80015fa:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 80015fc:	4b42      	ldr	r3, [pc, #264]	; (8001708 <TetrisEnterHighScore_Update+0x178>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 8001604:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001608:	601a      	str	r2, [r3, #0]
		break;
 800160a:	e057      	b.n	80016bc <TetrisEnterHighScore_Update+0x12c>
	case DOWN:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 800160c:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <TetrisEnterHighScore_Update+0x170>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fd03 	bl	800201c <TetrisHighScores_GetHighScoreAtIndex>
 8001616:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]--;
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800161a:	f993 3000 	ldrsb.w	r3, [r3]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	5cd2      	ldrb	r2, [r2, r3]
 8001622:	3a01      	subs	r2, #1
 8001624:	b2d1      	uxtb	r1, r2
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] < 'A'){
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800162c:	f993 3000 	ldrsb.w	r3, [r3]
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	5c9b      	ldrb	r3, [r3, r2]
 8001636:	2b40      	cmp	r3, #64	; 0x40
 8001638:	d806      	bhi.n	8001648 <TetrisEnterHighScore_Update+0xb8>
			highScore->Initials[_settingInitial] = 'Z';
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800163c:	f993 3000 	ldrsb.w	r3, [r3]
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	215a      	movs	r1, #90	; 0x5a
 8001646:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <TetrisEnterHighScore_Update+0x178>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 8001650:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001654:	601a      	str	r2, [r3, #0]
		break;
 8001656:	e031      	b.n	80016bc <TetrisEnterHighScore_Update+0x12c>
	case LEFT:
		_settingInitial--;
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800165a:	f993 3000 	ldrsb.w	r3, [r3]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b25a      	sxtb	r2, r3
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 8001668:	701a      	strb	r2, [r3, #0]
		if(_settingInitial < 0){
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800166c:	f993 3000 	ldrsb.w	r3, [r3]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da02      	bge.n	800167a <TetrisEnterHighScore_Update+0xea>
			_settingInitial = 2;
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 8001676:	2202      	movs	r2, #2
 8001678:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <TetrisEnterHighScore_Update+0x178>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 8001682:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001686:	601a      	str	r2, [r3, #0]
		break;
 8001688:	e018      	b.n	80016bc <TetrisEnterHighScore_Update+0x12c>
	case RIGHT:
		_settingInitial++;
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800168c:	f993 3000 	ldrsb.w	r3, [r3]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b25a      	sxtb	r2, r3
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800169a:	701a      	strb	r2, [r3, #0]
		if(_settingInitial >= 3){
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800169e:	f993 3000 	ldrsb.w	r3, [r3]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	dd02      	ble.n	80016ac <TetrisEnterHighScore_Update+0x11c>
			_settingInitial = 0;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <TetrisEnterHighScore_Update+0x178>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016b8:	601a      	str	r2, [r3, #0]
		break;
 80016ba:	bf00      	nop
	}

	_blinkTimer += timePassed;
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a11      	ldr	r2, [pc, #68]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016c6:	6013      	str	r3, [r2, #0]
	if(_blinkTimer >= ENTER_INITIAL_BLINK_PERIOD){
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016d0:	d304      	bcc.n	80016dc <TetrisEnterHighScore_Update+0x14c>
		_blinkTimer = 0;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
		BlinkInitialBeingSet();
 80016d8:	f7ff ff0c 	bl	80014f4 <BlinkInitialBeingSet>
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80016dc:	2101      	movs	r1, #1
 80016de:	480c      	ldr	r0, [pc, #48]	; (8001710 <TetrisEnterHighScore_Update+0x180>)
 80016e0:	f003 fb40 	bl	8004d64 <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	72fb      	strb	r3, [r7, #11]
	if(buttonBState == GPIO_PIN_SET){
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <TetrisEnterHighScore_Update+0x162>
		return HighScoreEntered;
 80016ee:	2305      	movs	r3, #5
 80016f0:	e000      	b.n	80016f4 <TetrisEnterHighScore_Update+0x164>
	}

	return NoChange;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000828 	.word	0x20000828
 8001700:	20000374 	.word	0x20000374
 8001704:	20000375 	.word	0x20000375
 8001708:	20000030 	.word	0x20000030
 800170c:	20000378 	.word	0x20000378
 8001710:	48000400 	.word	0x48000400

08001714 <TetrisEnterHighScore_OnEnter>:

void TetrisEnterHighScore_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
	_newHighScore = *((u32*)stateMachineDataPtr);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <TetrisEnterHighScore_OnEnter+0xa4>)
 8001726:	6013      	str	r3, [r2, #0]
	_newHighScoreRank = TetrisHighScores_AddHighScore(_newHighScore);
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <TetrisEnterHighScore_OnEnter+0xa4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fcb7 	bl	80020a0 <TetrisHighScores_AddHighScore>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <TetrisEnterHighScore_OnEnter+0xa8>)
 8001738:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 800173a:	f7fe ff01 	bl	8000540 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 800173e:	f7ff f9cb 	bl	8000ad8 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8001742:	2354      	movs	r3, #84	; 0x54
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2000      	movs	r0, #0
 800174a:	f7fe ff3f 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 800174e:	2354      	movs	r3, #84	; 0x54
 8001750:	2200      	movs	r2, #0
 8001752:	2101      	movs	r1, #1
 8001754:	2001      	movs	r0, #1
 8001756:	f7fe ff39 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 800175a:	2354      	movs	r3, #84	; 0x54
 800175c:	2200      	movs	r2, #0
 800175e:	2102      	movs	r1, #2
 8001760:	2002      	movs	r0, #2
 8001762:	f7fe ff33 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(3,3,0,84);
 8001766:	2354      	movs	r3, #84	; 0x54
 8001768:	2200      	movs	r2, #0
 800176a:	2103      	movs	r1, #3
 800176c:	2003      	movs	r0, #3
 800176e:	f7fe ff2d 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(4,4,0,84);
 8001772:	2354      	movs	r3, #84	; 0x54
 8001774:	2200      	movs	r2, #0
 8001776:	2104      	movs	r1, #4
 8001778:	2004      	movs	r0, #4
 800177a:	f7fe ff27 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(5,5,0,84);
 800177e:	2354      	movs	r3, #84	; 0x54
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	2005      	movs	r0, #5
 8001786:	f7fe ff21 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	gfxWriteTextLineToFrameBuffer(0,0,"High Score");
 800178a:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <TetrisEnterHighScore_OnEnter+0xac>)
 800178c:	2100      	movs	r1, #0
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff f8f8 	bl	8000984 <gfxWriteTextLineToFrameBuffer>
	DrawHighScoresToFrameBuffer();
 8001794:	f7ff fe8e 	bl	80014b4 <DrawHighScoresToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 8001798:	480a      	ldr	r0, [pc, #40]	; (80017c4 <TetrisEnterHighScore_OnEnter+0xb0>)
 800179a:	f7ff f83f 	bl	800081c <gfxFinishDrawing>
	_settingInitial = 0;
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <TetrisEnterHighScore_OnEnter+0xb4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
	_blinkTimer = 0;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <TetrisEnterHighScore_OnEnter+0xb8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
	_blinkState = true;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <TetrisEnterHighScore_OnEnter+0xbc>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]

}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000370 	.word	0x20000370
 80017bc:	20000374 	.word	0x20000374
 80017c0:	08009604 	.word	0x08009604
 80017c4:	2000060c 	.word	0x2000060c
 80017c8:	20000375 	.word	0x20000375
 80017cc:	20000378 	.word	0x20000378
 80017d0:	20000030 	.word	0x20000030

080017d4 <TetrisEnterHighScore_OnExit>:

void TetrisEnterHighScore_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <TetrisEnterHighScore_OnExit+0x20>)
 80017e2:	f7ff f9a9 	bl	8000b38 <ClearScreen>
	TetrisPersistantData_SaveAllPersistantData();
 80017e6:	f000 fe99 	bl	800251c <TetrisPersistantData_SaveAllPersistantData>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000060c 	.word	0x2000060c

080017f8 <GetRandomNumberBetweenZeroAndSix>:

static u8 _currentLevel = 5;

static void InitCurrentLevelTetrisScores();

static u8 GetRandomNumberBetweenZeroAndSix(){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 80017fc:	f006 fcea 	bl	80081d4 <rand>
 8001800:	4603      	mov	r3, r0
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <GetRandomNumberBetweenZeroAndSix+0x28>)
 8001806:	fba3 1302 	umull	r1, r3, r3, r2
 800180a:	1ad1      	subs	r1, r2, r3
 800180c:	0849      	lsrs	r1, r1, #1
 800180e:	440b      	add	r3, r1
 8001810:	0899      	lsrs	r1, r3, #2
 8001812:	460b      	mov	r3, r1
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	1a5b      	subs	r3, r3, r1
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	b2db      	uxtb	r3, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}
 8001820:	24924925 	.word	0x24924925

08001824 <DrawStationaryBlock>:


static void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4623      	mov	r3, r4
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	4603      	mov	r3, r0
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	460b      	mov	r3, r1
 800183c:	717b      	strb	r3, [r7, #5]
 800183e:	4613      	mov	r3, r2
 8001840:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	797a      	ldrb	r2, [r7, #5]
 8001846:	79b9      	ldrb	r1, [r7, #6]
 8001848:	79f8      	ldrb	r0, [r7, #7]
 800184a:	f7ff f919 	bl	8000a80 <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 800184e:	793b      	ldrb	r3, [r7, #4]
 8001850:	797a      	ldrb	r2, [r7, #5]
 8001852:	79b9      	ldrb	r1, [r7, #6]
 8001854:	79f8      	ldrb	r0, [r7, #7]
 8001856:	f7fe ff9c 	bl	8000792 <gfxDrawLine>
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}
	...

08001864 <WriteLevelToFrameBuffer>:

static void WriteLevelToFrameBuffer(){
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
	u8 levelBuffer[11];
	sprintf(levelBuffer, "Lvl: %lu",_currentLevel);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <WriteLevelToFrameBuffer+0x2c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <WriteLevelToFrameBuffer+0x30>)
 8001874:	4618      	mov	r0, r3
 8001876:	f006 fceb 	bl	8008250 <siprintf>
	gfxWriteTextLineToFrameBuffer(2,TETRIS_BOARD_RIGHT_EDGE_COL + 1,levelBuffer);
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	461a      	mov	r2, r3
 800187e:	2126      	movs	r1, #38	; 0x26
 8001880:	2002      	movs	r0, #2
 8001882:	f7ff f87f 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000003b 	.word	0x2000003b
 8001894:	08009610 	.word	0x08009610

08001898 <SetLevel>:

static void SetLevel(u8 level){
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	_currentLevel = level;
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SetLevel+0x34>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	7013      	strb	r3, [r2, #0]
	_newLevelToDisplay = true;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <SetLevel+0x38>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
	_autoMoveInterval = _levelsMoveIntervals[_currentLevel];
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <SetLevel+0x34>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <SetLevel+0x3c>)
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <SetLevel+0x40>)
 80018bc:	6013      	str	r3, [r2, #0]
	InitCurrentLevelTetrisScores();
 80018be:	f000 f963 	bl	8001b88 <InitCurrentLevelTetrisScores>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000003b 	.word	0x2000003b
 80018d0:	20000039 	.word	0x20000039
 80018d4:	08009cfc 	.word	0x08009cfc
 80018d8:	20000034 	.word	0x20000034

080018dc <OnLinesCleared>:

static void OnLinesCleared(u8 numLinesCleared){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <OnLinesCleared+0xa4>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <OnLinesCleared+0xa4>)
 80018f4:	801a      	strh	r2, [r3, #0]
	if(_linesCleared >= TETRIS_LINES_PER_LEVEL_UP){
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <OnLinesCleared+0xa4>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	2b09      	cmp	r3, #9
 80018fc:	d909      	bls.n	8001912 <OnLinesCleared+0x36>
		_linesCleared = 0;
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <OnLinesCleared+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	801a      	strh	r2, [r3, #0]
		SetLevel(_currentLevel + 1);
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <OnLinesCleared+0xa8>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ffc3 	bl	8001898 <SetLevel>
	}
	switch(numLinesCleared){
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	3b01      	subs	r3, #1
 8001916:	2b03      	cmp	r3, #3
 8001918:	d82a      	bhi.n	8001970 <OnLinesCleared+0x94>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <OnLinesCleared+0x44>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08001931 	.word	0x08001931
 8001924:	08001941 	.word	0x08001941
 8001928:	08001951 	.word	0x08001951
 800192c:	08001961 	.word	0x08001961
	case 1:
		_score += _currentLevelTetrisScores[0];
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <OnLinesCleared+0xac>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <OnLinesCleared+0xb0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4413      	add	r3, r2
 800193a:	4a14      	ldr	r2, [pc, #80]	; (800198c <OnLinesCleared+0xb0>)
 800193c:	6013      	str	r3, [r2, #0]
		break;
 800193e:	e017      	b.n	8001970 <OnLinesCleared+0x94>
	case 2:
		_score += _currentLevelTetrisScores[1];
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <OnLinesCleared+0xac>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <OnLinesCleared+0xb0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4413      	add	r3, r2
 800194a:	4a10      	ldr	r2, [pc, #64]	; (800198c <OnLinesCleared+0xb0>)
 800194c:	6013      	str	r3, [r2, #0]
		break;
 800194e:	e00f      	b.n	8001970 <OnLinesCleared+0x94>
	case 3:
		_score += _currentLevelTetrisScores[2];
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <OnLinesCleared+0xac>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <OnLinesCleared+0xb0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4413      	add	r3, r2
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <OnLinesCleared+0xb0>)
 800195c:	6013      	str	r3, [r2, #0]
		break;
 800195e:	e007      	b.n	8001970 <OnLinesCleared+0x94>
	case 4:
		_score += _currentLevelTetrisScores[3];
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <OnLinesCleared+0xac>)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <OnLinesCleared+0xb0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <OnLinesCleared+0xb0>)
 800196c:	6013      	str	r3, [r2, #0]
		break;
 800196e:	bf00      	nop
	}
	_newScoreToDisplay = true;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <OnLinesCleared+0xb4>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000382 	.word	0x20000382
 8001984:	2000003b 	.word	0x2000003b
 8001988:	2000038c 	.word	0x2000038c
 800198c:	20000384 	.word	0x20000384
 8001990:	20000038 	.word	0x20000038

08001994 <OnGameOver>:

static void OnGameOver(){
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	// Not used
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <IncrementTetrisTimer>:

static void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <IncrementTetrisTimer+0x44>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <IncrementTetrisTimer+0x44>)
 80019ba:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <IncrementTetrisTimer+0x44>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <IncrementTetrisTimer+0x48>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d90b      	bls.n	80019e0 <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 80019ce:	f7ff fcc7 	bl	8001360 <Tetris_MoveDown>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <IncrementTetrisTimer+0x4c>)
 80019d8:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 80019da:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <IncrementTetrisTimer+0x44>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
	}
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000037c 	.word	0x2000037c
 80019ec:	20000034 	.word	0x20000034
 80019f0:	2000003a 	.word	0x2000003a

080019f4 <WriteScoreToFrameBuffer>:

static void WriteScoreToFrameBuffer(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%lu",_score);
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <WriteScoreToFrameBuffer+0x28>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	463b      	mov	r3, r7
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <WriteScoreToFrameBuffer+0x2c>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fc24 	bl	8008250 <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 8001a08:	463b      	mov	r3, r7
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2126      	movs	r1, #38	; 0x26
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f7fe ffb8 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000384 	.word	0x20000384
 8001a20:	0800961c 	.word	0x0800961c

08001a24 <UpdateTetrisGame>:


static void UpdateTetrisGame(u32 timePassed){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 8001a2c:	f107 0208 	add.w	r2, r7, #8
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	4826      	ldr	r0, [pc, #152]	; (8001ad0 <UpdateTetrisGame+0xac>)
 8001a38:	f7fe fc22 	bl	8000280 <ReadAnalogStickChange>

	bool movingDown = true;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8001a40:	2101      	movs	r1, #1
 8001a42:	4824      	ldr	r0, [pc, #144]	; (8001ad4 <UpdateTetrisGame+0xb0>)
 8001a44:	f003 f98e 	bl	8004d64 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	75bb      	strb	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a50:	613b      	str	r3, [r7, #16]
	if(analogXChange > (twelveBitMax/3)){
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <UpdateTetrisGame+0xb4>)
 8001a56:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5a:	17db      	asrs	r3, r3, #31
 8001a5c:	1ad2      	subs	r2, r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	da02      	bge.n	8001a6a <UpdateTetrisGame+0x46>
		Tetris_MoveRight();
 8001a64:	f7ff fce0 	bl	8001428 <Tetris_MoveRight>
 8001a68:	e01c      	b.n	8001aa4 <UpdateTetrisGame+0x80>
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <UpdateTetrisGame+0xb4>)
 8001a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a72:	17db      	asrs	r3, r3, #31
 8001a74:	1a9a      	subs	r2, r3, r2
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dd02      	ble.n	8001a82 <UpdateTetrisGame+0x5e>
		Tetris_MoveLeft();
 8001a7c:	f7ff fcb6 	bl	80013ec <Tetris_MoveLeft>
 8001a80:	e010      	b.n	8001aa4 <UpdateTetrisGame+0x80>
	}
	else if(analogYChange > (twelveBitMax/3)){
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <UpdateTetrisGame+0xb4>)
 8001a86:	fb82 1203 	smull	r1, r2, r2, r3
 8001a8a:	17db      	asrs	r3, r3, #31
 8001a8c:	1ad2      	subs	r2, r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	da07      	bge.n	8001aa4 <UpdateTetrisGame+0x80>
		_movingDownResult = Tetris_MoveDown();
 8001a94:	f7ff fc64 	bl	8001360 <Tetris_MoveDown>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <UpdateTetrisGame+0xb8>)
 8001a9e:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	75fb      	strb	r3, [r7, #23]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 8001aa4:	7dbb      	ldrb	r3, [r7, #22]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <UpdateTetrisGame+0x92>
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <UpdateTetrisGame+0xbc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <UpdateTetrisGame+0x92>
		Tetris_Rotate();
 8001ab2:	f7ff fc2f 	bl	8001314 <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <UpdateTetrisGame+0xbc>)
 8001ab8:	7dbb      	ldrb	r3, [r7, #22]
 8001aba:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff6f 	bl	80019a4 <IncrementTetrisTimer>

}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000828 	.word	0x20000828
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	55555556 	.word	0x55555556
 8001adc:	2000003a 	.word	0x2000003a
 8001ae0:	20000380 	.word	0x20000380

08001ae4 <DrawTetrisGame>:

static void DrawTetrisGame(){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	gfxClearFrameBuffer();
 8001ae8:	f7fe fd2a 	bl	8000540 <gfxClearFrameBuffer>

	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <DrawTetrisGame+0x94>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d003      	beq.n	8001afc <DrawTetrisGame+0x18>
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <DrawTetrisGame+0x94>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d101      	bne.n	8001b00 <DrawTetrisGame+0x1c>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <DrawTetrisGame+0x1e>
 8001b00:	2300      	movs	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fa05 	bl	8000f14 <Tetris_DrawTetrisBoard>

	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 8001b0a:	2325      	movs	r3, #37	; 0x25
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	2105      	movs	r1, #5
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7fe fd5b 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <DrawTetrisGame+0x94>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d003      	beq.n	8001b26 <DrawTetrisGame+0x42>
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <DrawTetrisGame+0x94>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d105      	bne.n	8001b32 <DrawTetrisGame+0x4e>
		/* update the area where the next block is shown */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 8001b26:	2335      	movs	r3, #53	; 0x35
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7fe fd4d 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay == true){
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <DrawTetrisGame+0x98>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10a      	bne.n	8001b50 <DrawTetrisGame+0x6c>
		/* Update the new area of the screen with the new score.
		 * TODO: get actual length of score string instead of using 84 */
		WriteScoreToFrameBuffer();
 8001b3a:	f7ff ff5b 	bl	80019f4 <WriteScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 8001b3e:	2354      	movs	r3, #84	; 0x54
 8001b40:	2200      	movs	r2, #0
 8001b42:	2101      	movs	r1, #1
 8001b44:	2001      	movs	r0, #1
 8001b46:	f7fe fd41 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <DrawTetrisGame+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
	}
	if(_newLevelToDisplay){
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <DrawTetrisGame+0x9c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00a      	beq.n	8001b6e <DrawTetrisGame+0x8a>
		WriteLevelToFrameBuffer();
 8001b58:	f7ff fe84 	bl	8001864 <WriteLevelToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 8001b5c:	2354      	movs	r3, #84	; 0x54
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2102      	movs	r1, #2
 8001b62:	2002      	movs	r0, #2
 8001b64:	f7fe fd32 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newLevelToDisplay = false;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <DrawTetrisGame+0x9c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <DrawTetrisGame+0xa0>)
 8001b70:	f7fe fe54 	bl	800081c <gfxFinishDrawing>
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000003a 	.word	0x2000003a
 8001b7c:	20000038 	.word	0x20000038
 8001b80:	20000039 	.word	0x20000039
 8001b84:	2000060c 	.word	0x2000060c

08001b88 <InitCurrentLevelTetrisScores>:

static void InitCurrentLevelTetrisScores(){
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
	/* score setting function derived from information from https://tetris.fandom.com/wiki/Scoring */

	if(_currentLevel == 0){
 8001b8c:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10e      	bne.n	8001bb2 <InitCurrentLevelTetrisScores+0x2a>
		_currentLevelTetrisScores[0] = 40;
 8001b94:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001b96:	2228      	movs	r2, #40	; 0x28
 8001b98:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100;
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001b9c:	2264      	movs	r2, #100	; 0x64
 8001b9e:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300;
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001ba2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ba6:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200;
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001baa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001bae:	60da      	str	r2, [r3, #12]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);

	}
}
 8001bb0:	e066      	b.n	8001c80 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 1){
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10e      	bne.n	8001bd8 <InitCurrentLevelTetrisScores+0x50>
		_currentLevelTetrisScores[0] = 80;
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bbc:	2250      	movs	r2, #80	; 0x50
 8001bbe:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 200;
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bc2:	22c8      	movs	r2, #200	; 0xc8
 8001bc4:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 600;
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bc8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001bcc:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 2400;
 8001bce:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bd0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001bd4:	60da      	str	r2, [r3, #12]
}
 8001bd6:	e053      	b.n	8001c80 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel >=2 && _currentLevel < 9){
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d913      	bls.n	8001c08 <InitCurrentLevelTetrisScores+0x80>
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d80f      	bhi.n	8001c08 <InitCurrentLevelTetrisScores+0x80>
		_currentLevelTetrisScores[0] = 120;
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bea:	2278      	movs	r2, #120	; 0x78
 8001bec:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 300;
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bf0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bf4:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 900;
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bf8:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001bfc:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 3600;
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c00:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001c04:	60da      	str	r2, [r3, #12]
}
 8001c06:	e03b      	b.n	8001c80 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 9){
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	d110      	bne.n	8001c32 <InitCurrentLevelTetrisScores+0xaa>
		_currentLevelTetrisScores[0] = 400;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c16:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 1000;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c1e:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 3000;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c26:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 12000;
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c2a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001c2e:	60da      	str	r2, [r3, #12]
}
 8001c30:	e026      	b.n	8001c80 <InitCurrentLevelTetrisScores+0xf8>
		_currentLevelTetrisScores[0] = 40 * (_currentLevel + 1);
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c44:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	2264      	movs	r2, #100	; 0x64
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c56:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c6a:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c7e:	60da      	str	r2, [r3, #12]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2000003b 	.word	0x2000003b
 8001c90:	2000038c 	.word	0x2000038c

08001c94 <CheckForHighScore>:


Tetris_Modes_StateTriggers CheckForHighScore(){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	if(TetrisHighScores_IsNewHighScore(_score) == true){
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <CheckForHighScore+0x24>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f99d 	bl	8001fdc <TetrisHighScores_IsNewHighScore>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d104      	bne.n	8001cb2 <CheckForHighScore+0x1e>
		TetrisMain_SetStateMachineDataPointer(&_score);
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <CheckForHighScore+0x24>)
 8001caa:	f000 fb31 	bl	8002310 <TetrisMain_SetStateMachineDataPointer>
		return GameOverNewHighScore;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e000      	b.n	8001cb4 <CheckForHighScore+0x20>
	}
	else{
		return GameOver;
 8001cb2:	2302      	movs	r3, #2
	}
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000384 	.word	0x20000384

08001cbc <TetrisGame_Update>:


Tetris_Modes_StateTriggers TetrisGame_Update(u32 timePassed){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	UpdateTetrisGame(timePassed);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fead 	bl	8001a24 <UpdateTetrisGame>
	DrawTetrisGame();
 8001cca:	f7ff ff0b 	bl	8001ae4 <DrawTetrisGame>
	if(_movingDownResult == MoveDownResultGameOver){
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <TetrisGame_Update+0x2c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d103      	bne.n	8001cde <TetrisGame_Update+0x22>
		return CheckForHighScore();
 8001cd6:	f7ff ffdd 	bl	8001c94 <CheckForHighScore>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	e000      	b.n	8001ce0 <TetrisGame_Update+0x24>
	}
	return NoChange;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000003a 	.word	0x2000003a

08001cec <TetrisGame_Init>:



void TetrisGame_Init(){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af02      	add	r7, sp, #8
	Tetris_Init(
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <TetrisGame_Init+0x20>)
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <TetrisGame_Init+0x24>)
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <TetrisGame_Init+0x28>)
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <TetrisGame_Init+0x2c>)
 8001cfe:	4907      	ldr	r1, [pc, #28]	; (8001d1c <TetrisGame_Init+0x30>)
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <TetrisGame_Init+0x2c>)
 8001d02:	f7ff f9dd 	bl	80010c0 <Tetris_Init>
			&DrawStationaryBlock,
			&gfxDrawAxisAlignedRect,
			&GetRandomNumberBetweenZeroAndSix,
			&OnLinesCleared,
			&OnGameOver);
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	08001995 	.word	0x08001995
 8001d10:	080018dd 	.word	0x080018dd
 8001d14:	080017f9 	.word	0x080017f9
 8001d18:	08000a81 	.word	0x08000a81
 8001d1c:	08001825 	.word	0x08001825

08001d20 <TetrisGame_OnEnter>:

void TetrisGame_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
	if(previousState == LevelSelect || previousState == NoState){
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <TetrisGame_OnEnter+0x18>
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d103      	bne.n	8001d40 <TetrisGame_OnEnter+0x20>
		_startLevel = *((u8*)stateMachineDataPtr);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <TetrisGame_OnEnter+0x54>)
 8001d3e:	701a      	strb	r2, [r3, #0]
	}
	SetLevel(_startLevel);
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <TetrisGame_OnEnter+0x54>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fda7 	bl	8001898 <SetLevel>
	Tetris_ResetTetrisBoard();
 8001d4a:	f7ff f9a9 	bl	80010a0 <Tetris_ResetTetrisBoard>
	InitCurrentLevelTetrisScores();
 8001d4e:	f7ff ff1b 	bl	8001b88 <InitCurrentLevelTetrisScores>
	_movingDownResult = Settled;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <TetrisGame_OnEnter+0x58>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	701a      	strb	r2, [r3, #0]
	_score = 0;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <TetrisGame_OnEnter+0x5c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
	_newScoreToDisplay = true;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <TetrisGame_OnEnter+0x60>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
	_newLevelToDisplay = true;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <TetrisGame_OnEnter+0x64>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000388 	.word	0x20000388
 8001d78:	2000003a 	.word	0x2000003a
 8001d7c:	20000384 	.word	0x20000384
 8001d80:	20000038 	.word	0x20000038
 8001d84:	20000039 	.word	0x20000039

08001d88 <TetrisGame_OnExit>:



void TetrisGame_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <TetrisGame_OnExit+0x1c>)
 8001d96:	f7fe fecf 	bl	8000b38 <ClearScreen>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000060c 	.word	0x2000060c

08001da8 <SetHighScoreCellSize>:
		{{'c','p','u'}, 2500},
};
static u32 _highScoreCellSize = 0;
static u32 _nextHighScoreSaveAddress = 0;

static void SetHighScoreCellSize(){
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
	u32 size = sizeof(HighScore);
 8001dae:	2308      	movs	r3, #8
 8001db0:	607b      	str	r3, [r7, #4]
	_highScoreCellSize = size;
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <SetHighScoreCellSize+0x38>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6013      	str	r3, [r2, #0]

	while(_highScoreCellSize % 4 != 0)
 8001db8:	e004      	b.n	8001dc4 <SetHighScoreCellSize+0x1c>
		_highScoreCellSize++;
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <SetHighScoreCellSize+0x38>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <SetHighScoreCellSize+0x38>)
 8001dc2:	6013      	str	r3, [r2, #0]
	while(_highScoreCellSize % 4 != 0)
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <SetHighScoreCellSize+0x38>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f4      	bne.n	8001dba <SetHighScoreCellSize+0x12>

}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	2000039c 	.word	0x2000039c

08001de4 <LoadHighScores>:
static void LoadHighScores(HighScore* output, u32 startAddress){
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e026      	b.n	8001e42 <LoadHighScores+0x5e>
		HighScore* hs = startAddress + (i * _highScoreCellSize);
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <LoadHighScores+0x74>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	fb03 f202 	mul.w	r2, r3, r2
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
		output[i].Initials[0] = hs->Initials[0];
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	701a      	strb	r2, [r3, #0]
		output[i].Initials[1] = hs->Initials[1];
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	7852      	ldrb	r2, [r2, #1]
 8001e1e:	705a      	strb	r2, [r3, #1]
		output[i].Initials[2] = hs->Initials[2];
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	7892      	ldrb	r2, [r2, #2]
 8001e2c:	709a      	strb	r2, [r3, #2]
		output[i].Score = hs->Score;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	6852      	ldr	r2, [r2, #4]
 8001e3a:	605a      	str	r2, [r3, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d9d5      	bls.n	8001df4 <LoadHighScores+0x10>
	}

}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000039c 	.word	0x2000039c

08001e5c <SaveSingleHighScore>:

static void SaveSingleHighScore(HighScore* input, u32 address){
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e016      	b.n	8001e9a <SaveSingleHighScore+0x3e>
		u32 wordToWrite = *((u32*)input + i);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address + (i*4), wordToWrite);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	18d1      	adds	r1, r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2200      	movs	r2, #0
 8001e86:	461c      	mov	r4, r3
 8001e88:	4615      	mov	r5, r2
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f002 fc1e 	bl	80046d0 <HAL_FLASH_Program>
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SaveSingleHighScore+0x54>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	089a      	lsrs	r2, r3, #2
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d8e2      	bhi.n	8001e6c <SaveSingleHighScore+0x10>
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb0:	2000039c 	.word	0x2000039c

08001eb4 <SaveHighScores>:

static void SaveHighScores(HighScore* input, u32 addressToWrite){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e00f      	b.n	8001ee4 <SaveHighScores+0x30>
		SaveSingleHighScore(&input[i], addressToWrite);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	6839      	ldr	r1, [r7, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ffc4 	bl	8001e5c <SaveSingleHighScore>
		addressToWrite += _highScoreCellSize;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <SaveHighScores+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	603b      	str	r3, [r7, #0]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d9ec      	bls.n	8001ec4 <SaveHighScores+0x10>
	}

}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000039c 	.word	0x2000039c

08001ef8 <ErasePagePreservingHighScores>:

static void ErasePagePreservingHighScores(){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
	eraseInit.PageAddress = FINAL_PAGE_START_ADDRESS;
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <ErasePagePreservingHighScores+0x34>)
 8001f04:	60bb      	str	r3, [r7, #8]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
 8001f0a:	463a      	mov	r2, r7
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fd11 	bl	8004938 <HAL_FLASHEx_Erase>
	SaveHighScores(_highScores,FINAL_PAGE_START_ADDRESS);
 8001f16:	4905      	ldr	r1, [pc, #20]	; (8001f2c <ErasePagePreservingHighScores+0x34>)
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <ErasePagePreservingHighScores+0x38>)
 8001f1a:	f7ff ffcb 	bl	8001eb4 <SaveHighScores>
	TetrisHighScores_Load();
 8001f1e:	f000 f833 	bl	8001f88 <TetrisHighScores_Load>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	0800f800 	.word	0x0800f800
 8001f30:	2000003c 	.word	0x2000003c

08001f34 <SeekLatestHighScoresStartAddress>:

static u32 SeekLatestHighScoresStartAddress(){
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
	if(_highScoreCellSize == 0){
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <SeekLatestHighScoresStartAddress+0x4c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <SeekLatestHighScoresStartAddress+0x12>
		return 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e016      	b.n	8001f74 <SeekLatestHighScoresStartAddress+0x40>
	}
	u32 rval = FINAL_PAGE_START_ADDRESS;
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <SeekLatestHighScoresStartAddress+0x50>)
 8001f48:	607b      	str	r3, [r7, #4]
	do{
		rval += (NUM_HIGHSCORES_SAVED * _highScoreCellSize);
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <SeekLatestHighScoresStartAddress+0x4c>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	607b      	str	r3, [r7, #4]

	}
	while(*(((u32*)rval)+ 1) != 0xFFFFFFFF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d1f1      	bne.n	8001f4a <SeekLatestHighScoresStartAddress+0x16>


	return (rval - (NUM_HIGHSCORES_SAVED * _highScoreCellSize));
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <SeekLatestHighScoresStartAddress+0x4c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	1ad3      	subs	r3, r2, r3

}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	2000039c 	.word	0x2000039c
 8001f84:	0800f800 	.word	0x0800f800

08001f88 <TetrisHighScores_Load>:


u32 TetrisHighScores_Load(){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0

	SetHighScoreCellSize();
 8001f8e:	f7ff ff0b 	bl	8001da8 <SetHighScoreCellSize>
	u32 finalPage = FINAL_PAGE_START_ADDRESS;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <TetrisHighScores_Load+0x44>)
 8001f94:	607b      	str	r3, [r7, #4]
	u32 startAddress = SeekLatestHighScoresStartAddress();
 8001f96:	f7ff ffcd 	bl	8001f34 <SeekLatestHighScoresStartAddress>
 8001f9a:	6038      	str	r0, [r7, #0]
	_nextHighScoreSaveAddress = startAddress + (NUM_HIGHSCORES_SAVED * _highScoreCellSize);
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <TetrisHighScores_Load+0x48>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	441a      	add	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <TetrisHighScores_Load+0x4c>)
 8001fac:	6013      	str	r3, [r2, #0]
	LoadHighScores(_highScores, startAddress);
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <TetrisHighScores_Load+0x50>)
 8001fb2:	f7ff ff17 	bl	8001de4 <LoadHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <TetrisHighScores_Load+0x48>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	441a      	add	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4413      	add	r3, r2
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0800f800 	.word	0x0800f800
 8001fd0:	2000039c 	.word	0x2000039c
 8001fd4:	200003a0 	.word	0x200003a0
 8001fd8:	2000003c 	.word	0x2000003c

08001fdc <TetrisHighScores_IsNewHighScore>:


bool TetrisHighScores_IsNewHighScore(u32 potentialHighScore){
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e00c      	b.n	8002004 <TetrisHighScores_IsNewHighScore+0x28>
		if(potentialHighScore > _highScores[i].Score){
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <TetrisHighScores_IsNewHighScore+0x3c>)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d901      	bls.n	8001ffe <TetrisHighScores_IsNewHighScore+0x22>
			return true;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e006      	b.n	800200c <TetrisHighScores_IsNewHighScore+0x30>
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3301      	adds	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b04      	cmp	r3, #4
 8002008:	d9ef      	bls.n	8001fea <TetrisHighScores_IsNewHighScore+0xe>
		}
	}
	return false;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	2000003c 	.word	0x2000003c

0800201c <TetrisHighScores_GetHighScoreAtIndex>:

HighScore* TetrisHighScores_GetHighScoreAtIndex(u8 atIndex){
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
	return &_highScores[atIndex];
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <TetrisHighScores_GetHighScoreAtIndex+0x20>)
 800202c:	4413      	add	r3, r2
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2000003c 	.word	0x2000003c

08002040 <TetrisHighScores_Save>:


u32 TetrisHighScores_Save(u32 startAddress){
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	//SetHighScoreCellSize();
	if((_nextHighScoreSaveAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED)) <= FINAL_PAGE_END_ADDRESS){
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <TetrisHighScores_Save+0x50>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	441a      	add	r2, r3
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <TetrisHighScores_Save+0x54>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <TetrisHighScores_Save+0x58>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d810      	bhi.n	8002080 <TetrisHighScores_Save+0x40>
		SaveHighScores(_highScores, _nextHighScoreSaveAddress);
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <TetrisHighScores_Save+0x54>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4619      	mov	r1, r3
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <TetrisHighScores_Save+0x5c>)
 8002066:	f7ff ff25 	bl	8001eb4 <SaveHighScores>
		//LoadHighScores(_highScores, _nextHighScoreSaveAddress);
		_nextHighScoreSaveAddress += (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <TetrisHighScores_Save+0x50>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	441a      	add	r2, r3
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <TetrisHighScores_Save+0x54>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4413      	add	r3, r2
 800207a:	4a06      	ldr	r2, [pc, #24]	; (8002094 <TetrisHighScores_Save+0x54>)
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e001      	b.n	8002084 <TetrisHighScores_Save+0x44>

	}
	else{
		ErasePagePreservingHighScores();
 8002080:	f7ff ff3a 	bl	8001ef8 <ErasePagePreservingHighScores>
	}


	//TetrisHighScores_Load();
	return _nextHighScoreSaveAddress;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <TetrisHighScores_Save+0x54>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000039c 	.word	0x2000039c
 8002094:	200003a0 	.word	0x200003a0
 8002098:	08010000 	.word	0x08010000
 800209c:	2000003c 	.word	0x2000003c

080020a0 <TetrisHighScores_AddHighScore>:

u8 TetrisHighScores_AddHighScore(u32 highScore){
 80020a0:	b480      	push	{r7}
 80020a2:	b08b      	sub	sp, #44	; 0x2c
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

	u8 rval = 255;
 80020a8:	23ff      	movs	r3, #255	; 0xff
 80020aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HighScore cachedHighScore;
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	e046      	b.n	8002142 <TetrisHighScores_AddHighScore+0xa2>
		HighScore* thisHighScore = &_highScores[i];
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <TetrisHighScores_AddHighScore+0xb8>)
 80020ba:	4413      	add	r3, r2
 80020bc:	61fb      	str	r3, [r7, #28]

		if(highScore > thisHighScore->Score && rval == 255){
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d919      	bls.n	80020fc <TetrisHighScores_AddHighScore+0x5c>
 80020c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020cc:	2bff      	cmp	r3, #255	; 0xff
 80020ce:	d115      	bne.n	80020fc <TetrisHighScores_AddHighScore+0x5c>
			cachedHighScore = *thisHighScore;
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020da:	e883 0003 	stmia.w	r3, {r0, r1}
			rval = i;
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			thisHighScore->Score = highScore;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = 'A';
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	2241      	movs	r2, #65	; 0x41
 80020ee:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = 'A';
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2241      	movs	r2, #65	; 0x41
 80020f4:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = 'A';
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2241      	movs	r2, #65	; 0x41
 80020fa:	709a      	strb	r2, [r3, #2]

		}
		if(i > rval){
 80020fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	429a      	cmp	r2, r3
 8002104:	d91a      	bls.n	800213c <TetrisHighScores_AddHighScore+0x9c>
			HighScore cachedHighScore2 = *thisHighScore;
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002110:	e883 0003 	stmia.w	r3, {r0, r1}
			thisHighScore->Score = cachedHighScore.Score;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = cachedHighScore.Initials[0];
 800211a:	7d3a      	ldrb	r2, [r7, #20]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = cachedHighScore.Initials[1];
 8002120:	7d7a      	ldrb	r2, [r7, #21]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = cachedHighScore.Initials[2];
 8002126:	7dba      	ldrb	r2, [r7, #22]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	709a      	strb	r2, [r3, #2]
			cachedHighScore = cachedHighScore2;
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	f107 020c 	add.w	r2, r7, #12
 8002134:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002138:	e883 0003 	stmia.w	r3, {r0, r1}
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	3301      	adds	r3, #1
 8002140:	623b      	str	r3, [r7, #32]
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d9b5      	bls.n	80020b4 <TetrisHighScores_AddHighScore+0x14>

		}

	}
	return rval;
 8002148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800214c:	4618      	mov	r0, r3
 800214e:	372c      	adds	r7, #44	; 0x2c
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	2000003c 	.word	0x2000003c

0800215c <WriteStartLevelToFrameBuffer>:
static i8 _startLevel = 3;
static bool _isAnalogStickExtended = false;

u32 randomSeed = 0;

void WriteStartLevelToFrameBuffer(){
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
	u8 stringBuffer[11];
	sprintf(stringBuffer,"Level: %lu",_startLevel);
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <WriteStartLevelToFrameBuffer+0x38>)
 8002164:	f993 3000 	ldrsb.w	r3, [r3]
 8002168:	461a      	mov	r2, r3
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	490a      	ldr	r1, [pc, #40]	; (8002198 <WriteStartLevelToFrameBuffer+0x3c>)
 800216e:	4618      	mov	r0, r3
 8002170:	f006 f86e 	bl	8008250 <siprintf>
	gfxClearFrameBufferRow(2,0,LCD_PCD8544_CHAR_WIDTH*11);
 8002174:	2242      	movs	r2, #66	; 0x42
 8002176:	2100      	movs	r1, #0
 8002178:	2002      	movs	r0, #2
 800217a:	f7fe fd0f 	bl	8000b9c <gfxClearFrameBufferRow>
	gfxWriteTextLineToFrameBuffer(2,0,stringBuffer);
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	461a      	mov	r2, r3
 8002182:	2100      	movs	r1, #0
 8002184:	2002      	movs	r0, #2
 8002186:	f7fe fbfd 	bl	8000984 <gfxWriteTextLineToFrameBuffer>
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000064 	.word	0x20000064
 8002198:	08009620 	.word	0x08009620

0800219c <ChangeCurrentLevelUpOrDown>:

void ChangeCurrentLevelUpOrDown(i8 incOrDec){
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	_startLevel += incOrDec;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021a8:	f993 3000 	ldrsb.w	r3, [r3]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4413      	add	r3, r2
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	b25a      	sxtb	r2, r3
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021b8:	701a      	strb	r2, [r3, #0]
	if(incOrDec < 0){
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	da08      	bge.n	80021d4 <ChangeCurrentLevelUpOrDown+0x38>
		if(_startLevel < 0){
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021c4:	f993 3000 	ldrsb.w	r3, [r3]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da0f      	bge.n	80021ec <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 15;
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021ce:	220f      	movs	r2, #15
 80021d0:	701a      	strb	r2, [r3, #0]
		}
	}
	else{

	}
}
 80021d2:	e00b      	b.n	80021ec <ChangeCurrentLevelUpOrDown+0x50>
	else if(incOrDec > 0){
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	dd07      	ble.n	80021ec <ChangeCurrentLevelUpOrDown+0x50>
		if(_startLevel > 15){
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021de:	f993 3000 	ldrsb.w	r3, [r3]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	dd02      	ble.n	80021ec <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 0;
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	20000064 	.word	0x20000064

080021fc <TetrisLevelSelect_Update>:

Tetris_Modes_StateTriggers TetrisLevelSelect_Update(u32 TimePassed){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	randomSeed += TimePassed;
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 800220e:	6013      	str	r3, [r2, #0]
	i32 analogYChange, analogXChange;
	ANALOG_STICK_DPAD_RESULT res = EmulateDPadReturningXAndYChange(&hadc2,&analogXChange,&analogYChange);
 8002210:	f107 0210 	add.w	r2, r7, #16
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	4619      	mov	r1, r3
 800221a:	4820      	ldr	r0, [pc, #128]	; (800229c <TetrisLevelSelect_Update+0xa0>)
 800221c:	f7fe f8e6 	bl	80003ec <EmulateDPadReturningXAndYChange>
 8002220:	4603      	mov	r3, r0
 8002222:	75fb      	strb	r3, [r7, #23]
	switch(res){
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d002      	beq.n	8002230 <TetrisLevelSelect_Update+0x34>
 800222a:	2b02      	cmp	r3, #2
 800222c:	d00a      	beq.n	8002244 <TetrisLevelSelect_Update+0x48>
 800222e:	e014      	b.n	800225a <TetrisLevelSelect_Update+0x5e>
	case UP:
		ChangeCurrentLevelUpOrDown(1);
 8002230:	2001      	movs	r0, #1
 8002232:	f7ff ffb3 	bl	800219c <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	4a16      	ldr	r2, [pc, #88]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 8002240:	6013      	str	r3, [r2, #0]
		break;
 8002242:	e00a      	b.n	800225a <TetrisLevelSelect_Update+0x5e>
	case DOWN:
		ChangeCurrentLevelUpOrDown(-1);
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f7ff ffa8 	bl	800219c <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	4a10      	ldr	r2, [pc, #64]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 8002256:	6013      	str	r3, [r2, #0]
		break;
 8002258:	bf00      	nop
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 800225a:	2101      	movs	r1, #1
 800225c:	4810      	ldr	r0, [pc, #64]	; (80022a0 <TetrisLevelSelect_Update+0xa4>)
 800225e:	f002 fd81 	bl	8004d64 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	75bb      	strb	r3, [r7, #22]
	if(buttonBState == GPIO_PIN_SET){
 8002266:	7dbb      	ldrb	r3, [r7, #22]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d104      	bne.n	8002276 <TetrisLevelSelect_Update+0x7a>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <TetrisLevelSelect_Update+0xa8>)
 800226e:	f000 f84f 	bl	8002310 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 8002272:	2301      	movs	r3, #1
 8002274:	e00b      	b.n	800228e <TetrisLevelSelect_Update+0x92>
	}

	WriteStartLevelToFrameBuffer();
 8002276:	f7ff ff71 	bl	800215c <WriteStartLevelToFrameBuffer>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 800227a:	2354      	movs	r3, #84	; 0x54
 800227c:	2200      	movs	r2, #0
 800227e:	2102      	movs	r1, #2
 8002280:	2002      	movs	r0, #2
 8002282:	f7fe f9a3 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 8002286:	4808      	ldr	r0, [pc, #32]	; (80022a8 <TetrisLevelSelect_Update+0xac>)
 8002288:	f7fe fac8 	bl	800081c <gfxFinishDrawing>



	return NoChange;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200003a4 	.word	0x200003a4
 800229c:	20000828 	.word	0x20000828
 80022a0:	48000400 	.word	0x48000400
 80022a4:	20000064 	.word	0x20000064
 80022a8:	2000060c 	.word	0x2000060c

080022ac <TetrisLevelSelect_OnEnter>:

void TetrisLevelSelect_Init(){

}

void TetrisLevelSelect_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
	gfxWriteTextLineToFrameBuffer(0,0,"Select Level");
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <TetrisLevelSelect_OnEnter+0x38>)
 80022ba:	2100      	movs	r1, #0
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fb61 	bl	8000984 <gfxWriteTextLineToFrameBuffer>
	gfxClearFrameBuffer();
 80022c2:	f7fe f93d 	bl	8000540 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 80022c6:	f7fe fc07 	bl	8000ad8 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 80022ca:	2354      	movs	r3, #84	; 0x54
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7fe f97b 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 80022d6:	4804      	ldr	r0, [pc, #16]	; (80022e8 <TetrisLevelSelect_OnEnter+0x3c>)
 80022d8:	f7fe faa0 	bl	800081c <gfxFinishDrawing>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	0800962c 	.word	0x0800962c
 80022e8:	2000060c 	.word	0x2000060c

080022ec <TetrisLevelSelect_OnExit>:

void TetrisLevelSelect_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
	srand(randomSeed);
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <TetrisLevelSelect_OnExit+0x20>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f005 ff3b 	bl	8008178 <srand>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200003a4 	.word	0x200003a4

08002310 <TetrisMain_SetStateMachineDataPointer>:
#define ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS 1


static void* _stateMachineDataPointer = 0;

void TetrisMain_SetStateMachineDataPointer(void* dataPtr){
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	_stateMachineDataPointer = dataPtr;
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <TetrisMain_SetStateMachineDataPointer+0x1c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	200003a8 	.word	0x200003a8

08002330 <TetrisMain_Init>:

static State _states[NumStates];
static Tetris_Modes_States _currentState = LevelSelect;


void TetrisMain_Init(){
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
	/* Setup the state machines states */
	TetrisPersistantData_LoadAllPeristantData();
 8002336:	f000 f8e7 	bl	8002508 <TetrisPersistantData_LoadAllPeristantData>
	//TetrisPersistantData_SaveAllPersistantData();
	TetrisGame_Init();
 800233a:	f7ff fcd7 	bl	8001cec <TetrisGame_Init>
	u8 startLevel = 5;
 800233e:	2305      	movs	r3, #5
 8002340:	71fb      	strb	r3, [r7, #7]
	/* Lead-in to the first state */
	//TetrisGame_OnEnter(&startLevel,NoState);
	TetrisLevelSelect_OnEnter(0,NoState);
 8002342:	2104      	movs	r1, #4
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff ffb1 	bl	80022ac <TetrisLevelSelect_OnEnter>

	_states[Playing].NumTransitions = PLAYING_NUM_TRANSITIONS;
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <TetrisMain_Init+0xa0>)
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2020 	strb.w	r2, [r3, #32]
	_states[Playing].Transitions = _playingTransitions;
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002354:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <TetrisMain_Init+0xa4>)
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
	_states[Playing].UpdateFunction = &TetrisGame_Update;
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <TetrisMain_Init+0xa0>)
 800235a:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <TetrisMain_Init+0xa8>)
 800235c:	615a      	str	r2, [r3, #20]
	_states[Playing].OnEnterFunction = &TetrisGame_OnEnter;
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002360:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <TetrisMain_Init+0xac>)
 8002362:	619a      	str	r2, [r3, #24]
	_states[Playing].OnExitFunction = &TetrisGame_OnExit;
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002366:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <TetrisMain_Init+0xb0>)
 8002368:	61da      	str	r2, [r3, #28]

	_states[LevelSelect].NumTransitions = LEVEL_SELECT_NUM_TRANSITIONS;
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <TetrisMain_Init+0xa0>)
 800236c:	2201      	movs	r2, #1
 800236e:	731a      	strb	r2, [r3, #12]
	_states[LevelSelect].Transitions = _levelSelectTransitions;
 8002370:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002372:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <TetrisMain_Init+0xb4>)
 8002374:	611a      	str	r2, [r3, #16]
	_states[LevelSelect].UpdateFunction = &TetrisLevelSelect_Update;
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002378:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <TetrisMain_Init+0xb8>)
 800237a:	601a      	str	r2, [r3, #0]
	_states[LevelSelect].OnEnterFunction = &TetrisLevelSelect_OnEnter;
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <TetrisMain_Init+0xa0>)
 800237e:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <TetrisMain_Init+0xbc>)
 8002380:	605a      	str	r2, [r3, #4]
	_states[LevelSelect].OnExitFunction = &TetrisLevelSelect_OnExit;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <TetrisMain_Init+0xc0>)
 8002386:	609a      	str	r2, [r3, #8]

	_states[PlayAgainDialogue].NumTransitions = PLAY_AGAIN_SCREEN_NUM_TRANSITIONS;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <TetrisMain_Init+0xa0>)
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	_states[PlayAgainDialogue].Transitions = _playAgainScreenTransitions;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <TetrisMain_Init+0xc4>)
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
	_states[PlayAgainDialogue].UpdateFunction = &TetrisPlayAgain_Update;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <TetrisMain_Init+0xc8>)
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
	_states[PlayAgainDialogue].OnEnterFunction = &TetrisPlayAgain_OnEnter;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <TetrisMain_Init+0xa0>)
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <TetrisMain_Init+0xcc>)
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
	_states[PlayAgainDialogue].OnExitFunction = &TetrisPlayAgain_OnExit;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <TetrisMain_Init+0xd0>)
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30

	_states[EnterNewHighScoreScreen].NumTransitions = ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	_states[EnterNewHighScoreScreen].Transitions = _enterNewHighScoreScreenTransitions;
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023b2:	4a14      	ldr	r2, [pc, #80]	; (8002404 <TetrisMain_Init+0xd4>)
 80023b4:	64da      	str	r2, [r3, #76]	; 0x4c
	_states[EnterNewHighScoreScreen].UpdateFunction = &TetrisEnterHighScore_Update;
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <TetrisMain_Init+0xd8>)
 80023ba:	63da      	str	r2, [r3, #60]	; 0x3c
	_states[EnterNewHighScoreScreen].OnEnterFunction = &TetrisEnterHighScore_OnEnter;
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <TetrisMain_Init+0xdc>)
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
	_states[EnterNewHighScoreScreen].OnExitFunction = &TetrisEnterHighScore_OnExit;
 80023c2:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <TetrisMain_Init+0xe0>)
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44


}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	200003ac 	.word	0x200003ac
 80023d4:	08009d54 	.word	0x08009d54
 80023d8:	08001cbd 	.word	0x08001cbd
 80023dc:	08001d21 	.word	0x08001d21
 80023e0:	08001d89 	.word	0x08001d89
 80023e4:	08009d50 	.word	0x08009d50
 80023e8:	080021fd 	.word	0x080021fd
 80023ec:	080022ad 	.word	0x080022ad
 80023f0:	080022ed 	.word	0x080022ed
 80023f4:	08009d58 	.word	0x08009d58
 80023f8:	08002541 	.word	0x08002541
 80023fc:	08002579 	.word	0x08002579
 8002400:	080025c5 	.word	0x080025c5
 8002404:	08009d5c 	.word	0x08009d5c
 8002408:	08001591 	.word	0x08001591
 800240c:	08001715 	.word	0x08001715
 8002410:	080017d5 	.word	0x080017d5

08002414 <TetrisMain_Update>:

void TetrisMain_Update(u32 timePassed){
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	/* Call update on the current state, the return value of update will determine there should be a change to a new state */
	Tetris_Modes_StateTriggers updateResult = _states[_currentState].UpdateFunction(timePassed);
 800241c:	4b37      	ldr	r3, [pc, #220]	; (80024fc <TetrisMain_Update+0xe8>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	4a37      	ldr	r2, [pc, #220]	; (8002500 <TetrisMain_Update+0xec>)
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	4603      	mov	r3, r0
 8002436:	76fb      	strb	r3, [r7, #27]
	if(updateResult == NoChange){
 8002438:	7efb      	ldrb	r3, [r7, #27]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d059      	beq.n	80024f2 <TetrisMain_Update+0xde>
		return;
	}
	/* If we're at this point there should be a change in state */
	u32 numTransitions = _states[_currentState].NumTransitions;
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <TetrisMain_Update+0xe8>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	4619      	mov	r1, r3
 8002444:	4a2e      	ldr	r2, [pc, #184]	; (8002500 <TetrisMain_Update+0xec>)
 8002446:	460b      	mov	r3, r1
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	330c      	adds	r3, #12
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]
	Transition* transitions = _states[_currentState].Transitions;
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <TetrisMain_Update+0xe8>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <TetrisMain_Update+0xec>)
 800245e:	460b      	mov	r3, r1
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3310      	adds	r3, #16
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	613b      	str	r3, [r7, #16]
	/* Find the transition for the state change trigger returned by update */
	for(i32 i=0; i<numTransitions; i++){
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e039      	b.n	80024e8 <TetrisMain_Update+0xd4>
		if(transitions[i].trigger == updateResult){
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	7efa      	ldrb	r2, [r7, #27]
 8002480:	429a      	cmp	r2, r3
 8002482:	d12e      	bne.n	80024e2 <TetrisMain_Update+0xce>
			/* Change state and call enter and exit functions for the transition */
			Tetris_Modes_States last = _currentState;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <TetrisMain_Update+0xe8>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	73fb      	strb	r3, [r7, #15]
			_states[_currentState].OnExitFunction(_stateMachineDataPointer, transitions[i].destination);
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <TetrisMain_Update+0xe8>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <TetrisMain_Update+0xec>)
 8002492:	460b      	mov	r3, r1
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	3308      	adds	r3, #8
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a18      	ldr	r2, [pc, #96]	; (8002504 <TetrisMain_Update+0xf0>)
 80024a2:	6810      	ldr	r0, [r2, #0]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	0052      	lsls	r2, r2, #1
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	440a      	add	r2, r1
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4798      	blx	r3
			_currentState = transitions[i].destination;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <TetrisMain_Update+0xe8>)
 80024be:	701a      	strb	r2, [r3, #0]
			_states[_currentState].OnEnterFunction(_stateMachineDataPointer, last);
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <TetrisMain_Update+0xe8>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <TetrisMain_Update+0xec>)
 80024c8:	460b      	mov	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3304      	adds	r3, #4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <TetrisMain_Update+0xf0>)
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	7bf9      	ldrb	r1, [r7, #15]
 80024dc:	4610      	mov	r0, r2
 80024de:	4798      	blx	r3
			return;
 80024e0:	e008      	b.n	80024f4 <TetrisMain_Update+0xe0>
	for(i32 i=0; i<numTransitions; i++){
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8c1      	bhi.n	8002474 <TetrisMain_Update+0x60>
 80024f0:	e000      	b.n	80024f4 <TetrisMain_Update+0xe0>
		return;
 80024f2:	bf00      	nop
		}
	}
}
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000410 	.word	0x20000410
 8002500:	200003ac 	.word	0x200003ac
 8002504:	200003a8 	.word	0x200003a8

08002508 <TetrisPersistantData_LoadAllPeristantData>:
#include "TetrisPersistantData.h"
#include "TetrisHighScores.h"
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

void TetrisPersistantData_LoadAllPeristantData(){
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	u32 nextAddress = TetrisHighScores_Load();
 800250e:	f7ff fd3b 	bl	8001f88 <TetrisHighScores_Load>
 8002512:	6078      	str	r0, [r7, #4]

}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <TetrisPersistantData_SaveAllPersistantData>:
void TetrisPersistantData_SaveAllPersistantData(){
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002522:	f002 f945 	bl	80047b0 <HAL_FLASH_Unlock>

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
	*/

	u32 nextAddress = TetrisHighScores_Save(FINAL_PAGE_START_ADDRESS);
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <TetrisPersistantData_SaveAllPersistantData+0x20>)
 8002528:	f7ff fd8a 	bl	8002040 <TetrisHighScores_Save>
 800252c:	6078      	str	r0, [r7, #4]

	HAL_FLASH_Lock();
 800252e:	f002 f965 	bl	80047fc <HAL_FLASH_Lock>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	0800f800 	.word	0x0800f800

08002540 <TetrisPlayAgain_Update>:
extern LCD_PCD8544_screen_t gLcdScreen;

static u8 _startLevel;


Tetris_Modes_StateTriggers TetrisPlayAgain_Update(u32 TimePassed){
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

	/* Will have option to go back to main menu.  67 */
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8002548:	2101      	movs	r1, #1
 800254a:	4809      	ldr	r0, [pc, #36]	; (8002570 <TetrisPlayAgain_Update+0x30>)
 800254c:	f002 fc0a 	bl	8004d64 <HAL_GPIO_ReadPin>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
	if(buttonBState == GPIO_PIN_SET){
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d104      	bne.n	8002564 <TetrisPlayAgain_Update+0x24>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 800255a:	4806      	ldr	r0, [pc, #24]	; (8002574 <TetrisPlayAgain_Update+0x34>)
 800255c:	f7ff fed8 	bl	8002310 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <TetrisPlayAgain_Update+0x26>
	}

	return NoChange;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	48000400 	.word	0x48000400
 8002574:	20000411 	.word	0x20000411

08002578 <TetrisPlayAgain_OnEnter>:

void TetrisPlayAgain_Init(){

}

void TetrisPlayAgain_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	70fb      	strb	r3, [r7, #3]
	_startLevel = *((u8*)stateMachineDataPtr);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <TetrisPlayAgain_OnEnter+0x40>)
 800258a:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 800258c:	f7fd ffd8 	bl	8000540 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 8002590:	f7fe faa2 	bl	8000ad8 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8002594:	2354      	movs	r3, #84	; 0x54
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe f816 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxWriteTextLineToFrameBuffer(0,0,"Play Again?");
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <TetrisPlayAgain_OnEnter+0x44>)
 80025a2:	2100      	movs	r1, #0
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7fe f9ed 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

	gfxFinishDrawing(&gLcdScreen);
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <TetrisPlayAgain_OnEnter+0x48>)
 80025ac:	f7fe f936 	bl	800081c <gfxFinishDrawing>

}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000411 	.word	0x20000411
 80025bc:	0800963c 	.word	0x0800963c
 80025c0:	2000060c 	.word	0x2000060c

080025c4 <TetrisPlayAgain_OnExit>:

void TetrisPlayAgain_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 80025d0:	4803      	ldr	r0, [pc, #12]	; (80025e0 <TetrisPlayAgain_OnExit+0x1c>)
 80025d2:	f7fe fab1 	bl	8000b38 <ClearScreen>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000060c 	.word	0x2000060c

080025e4 <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 80025ec:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80025f0:	2100      	movs	r1, #0
 80025f2:	481e      	ldr	r0, [pc, #120]	; (800266c <LCD_PCD8544_init+0x88>)
 80025f4:	f005 fdb8 	bl	8008168 <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f976 	bl	80028f2 <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f98e 	bl	8002928 <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f9ab 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	7bb9      	ldrb	r1, [r7, #14]
 8002616:	2301      	movs	r3, #1
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8ae 	bl	800277a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 800261e:	2103      	movs	r1, #3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f939 	bl	8002898 <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 8002626:	2140      	movs	r1, #64	; 0x40
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f94e 	bl	80028ca <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 800262e:	2102      	movs	r1, #2
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f918 	bl	8002866 <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	7bb9      	ldrb	r1, [r7, #14]
 800263a:	2300      	movs	r3, #0
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f89c 	bl	800277a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2101      	movs	r1, #1
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f8c7 	bl	80027da <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2100      	movs	r1, #0
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f8e5 	bl	8002820 <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f996 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f845 	bl	80026ec <LCD_PCD8544_clear_ram>
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000414 	.word	0x20000414

08002670 <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	72fb      	strb	r3, [r7, #11]
 800267e:	4613      	mov	r3, r2
 8002680:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f94c 	bl	8002928 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f969 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002696:	7dfa      	ldrb	r2, [r7, #23]
 8002698:	7db9      	ldrb	r1, [r7, #22]
 800269a:	2300      	movs	r3, #0
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f86c 	bl	800277a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 80026a2:	7abb      	ldrb	r3, [r7, #10]
 80026a4:	461a      	mov	r2, r3
 80026a6:	0052      	lsls	r2, r2, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	7afb      	ldrb	r3, [r7, #11]
 80026b0:	4619      	mov	r1, r3
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f8b4 	bl	8002820 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f965 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f942 	bl	8002948 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f94f 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 80026ca:	8c3b      	ldrh	r3, [r7, #32]
 80026cc:	461a      	mov	r2, r3
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f81f 	bl	8002714 <LCD_PCD8544_LL_send_data>
 80026d6:	4603      	mov	r3, r0
 80026d8:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f954 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 80026e0:	7d7b      	ldrb	r3, [r7, #21]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 80026f4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <LCD_PCD8544_clear_ram+0x24>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffb5 	bl	8002670 <LCD_PCD8544_write_bytes>
 8002706:	4603      	mov	r3, r0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000414 	.word	0x20000414

08002714 <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	4613      	mov	r3, r2
 8002720:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	2302      	movs	r3, #2
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	f003 ff37 	bl	800659e <HAL_SPI_Transmit>
 8002730:	4603      	mov	r3, r0
 8002732:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	69d8      	ldr	r0, [r3, #28]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8c1b      	ldrh	r3, [r3, #32]
 8002742:	2200      	movs	r2, #0
 8002744:	4619      	mov	r1, r3
 8002746:	f002 fb25 	bl	8004d94 <HAL_GPIO_WritePin>
	}
	return stat;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 8002760:	2301      	movs	r3, #1
 8002762:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8002764:	89fa      	ldrh	r2, [r7, #14]
 8002766:	1cfb      	adds	r3, r7, #3
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffd2 	bl	8002714 <LCD_PCD8544_LL_send_data>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	4608      	mov	r0, r1
 8002784:	4611      	mov	r1, r2
 8002786:	461a      	mov	r2, r3
 8002788:	4603      	mov	r3, r0
 800278a:	70fb      	strb	r3, [r7, #3]
 800278c:	460b      	mov	r3, r1
 800278e:	70bb      	strb	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	b25b      	sxtb	r3, r3
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	b25b      	sxtb	r3, r3
 80027a0:	f043 0320 	orr.w	r3, r3, #32
 80027a4:	b25a      	sxtb	r2, r3
 80027a6:	78bb      	ldrb	r3, [r7, #2]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	b25a      	sxtb	r2, r3
 80027b6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	4619      	mov	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ffc2 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70fb      	strb	r3, [r7, #3]
 80027e6:	4613      	mov	r3, r2
 80027e8:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	b25a      	sxtb	r2, r3
 80027fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	b25b      	sxtb	r3, r3
 8002806:	4313      	orrs	r3, r2
 8002808:	b25b      	sxtb	r3, r3
 800280a:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff9f 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 8002816:	4603      	mov	r3, r0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
 800282c:	4613      	mov	r3, r2
 800282e:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 8002830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	b25b      	sxtb	r3, r3
 800283a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283e:	b25b      	sxtb	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 8002844:	78bb      	ldrb	r3, [r7, #2]
 8002846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800284a:	b2db      	uxtb	r3, r3
 800284c:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	2202      	movs	r2, #2
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ff5c 	bl	8002714 <LCD_PCD8544_LL_send_data>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 8002872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	b25b      	sxtb	r3, r3
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	b25b      	sxtb	r3, r3
 8002882:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff63 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 800288e:	4603      	mov	r3, r0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 80028a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	f043 0310 	orr.w	r3, r3, #16
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ff4a 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028dc:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff36 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6858      	ldr	r0, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	891b      	ldrh	r3, [r3, #8]
 8002902:	2200      	movs	r2, #0
 8002904:	4619      	mov	r1, r3
 8002906:	f002 fa45 	bl	8004d94 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 800290a:	2001      	movs	r0, #1
 800290c:	f000 fe8a 	bl	8003624 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6858      	ldr	r0, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	891b      	ldrh	r3, [r3, #8]
 8002918:	2201      	movs	r2, #1
 800291a:	4619      	mov	r1, r3
 800291c:	f002 fa3a 	bl	8004d94 <HAL_GPIO_WritePin>
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6958      	ldr	r0, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8b1b      	ldrh	r3, [r3, #24]
 8002938:	2200      	movs	r2, #0
 800293a:	4619      	mov	r1, r3
 800293c:	f002 fa2a 	bl	8004d94 <HAL_GPIO_WritePin>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6958      	ldr	r0, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8b1b      	ldrh	r3, [r3, #24]
 8002958:	2201      	movs	r2, #1
 800295a:	4619      	mov	r1, r3
 800295c:	f002 fa1a 	bl	8004d94 <HAL_GPIO_WritePin>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68d8      	ldr	r0, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8a1b      	ldrh	r3, [r3, #16]
 8002978:	2200      	movs	r2, #0
 800297a:	4619      	mov	r1, r3
 800297c:	f002 fa0a 	bl	8004d94 <HAL_GPIO_WritePin>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68d8      	ldr	r0, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8a1b      	ldrh	r3, [r3, #16]
 8002998:	2201      	movs	r2, #1
 800299a:	4619      	mov	r1, r3
 800299c:	f002 f9fa 	bl	8004d94 <HAL_GPIO_WritePin>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b08e      	sub	sp, #56	; 0x38
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ae:	f000 fdd3 	bl	8003558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b2:	f000 f859 	bl	8002a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b6:	f000 fab1 	bl	8002f1c <MX_GPIO_Init>
  MX_SPI1_Init();
 80029ba:	f000 f91f 	bl	8002bfc <MX_SPI1_Init>
  MX_ADC2_Init();
 80029be:	f000 f8af 	bl	8002b20 <MX_ADC2_Init>
  MX_TIM2_Init();
 80029c2:	f000 fa07 	bl	8002dd4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80029c6:	f000 f957 	bl	8002c78 <MX_TIM1_Init>
  MX_TIM3_Init();
 80029ca:	f000 fa59 	bl	8002e80 <MX_TIM3_Init>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  // Calibrate The ADC On Power-Up For Better Accuracy
  //HAL_ADCEx_Calibration_Start(&hadc2);
  //HAL_TIM_Base_Start(&htim1);

  Buzzer_Init(&htim1);
 80029ce:	4820      	ldr	r0, [pc, #128]	; (8002a50 <main+0xa8>)
 80029d0:	f7fd fd7e 	bl	80004d0 <Buzzer_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80029d4:	481f      	ldr	r0, [pc, #124]	; (8002a54 <main+0xac>)
 80029d6:	f004 f90d 	bl	8006bf4 <HAL_TIM_Base_Start_IT>


  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 80029da:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <main+0xb0>)
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <main+0xb4>)
 80029de:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 80029e0:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <main+0xb0>)
 80029e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80029e6:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <main+0xb0>)
 80029ea:	2208      	movs	r2, #8
 80029ec:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <main+0xb0>)
 80029f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80029f4:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <main+0xb0>)
 80029f8:	2202      	movs	r2, #2
 80029fa:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <main+0xb0>)
 80029fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002a02:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <main+0xb0>)
 8002a06:	2210      	movs	r2, #16
 8002a08:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 8002a0a:	4813      	ldr	r0, [pc, #76]	; (8002a58 <main+0xb0>)
 8002a0c:	f7ff fdea 	bl	80025e4 <LCD_PCD8544_init>

    // LCD - welcome screen
  //static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002a10:	2100      	movs	r1, #0
 8002a12:	4813      	ldr	r0, [pc, #76]	; (8002a60 <main+0xb8>)
 8002a14:	f001 f94d 	bl	8003cb2 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   TetrisMain_Init();
 8002a18:	f7ff fc8a 	bl	8002330 <TetrisMain_Init>

   //HAL_TIM_RegisterCallback(&htim3,HAL_TIM_PERIOD_ELAPSED_CB_ID,&MusicPlayer_TimerISR);

#define TEST_TUNE_LENGTH 7
   MusicNote testTune[TEST_TUNE_LENGTH] = {
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <main+0xbc>)
 8002a1e:	463c      	mov	r4, r7
 8002a20:	461d      	mov	r5, r3
 8002a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a32:	e884 0003 	stmia.w	r4, {r0, r1}
		   {B,500},
		   {D,250},
		   {E,125},
		   {D,250},
   };
   MusicPlayer_StartTune(&testTune[0],TEST_TUNE_LENGTH);//HAL_TIM_PERIOD_ELAPSED_CB_ID
 8002a36:	463b      	mov	r3, r7
 8002a38:	2107      	movs	r1, #7
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe f8cc 	bl	8000bd8 <MusicPlayer_StartTune>

   while (1)
   {
	   TetrisMain_Update(50);
 8002a40:	2032      	movs	r0, #50	; 0x32
 8002a42:	f7ff fce7 	bl	8002414 <TetrisMain_Update>
	   HAL_Delay(50);
 8002a46:	2032      	movs	r0, #50	; 0x32
 8002a48:	f000 fdec 	bl	8003624 <HAL_Delay>
	   TetrisMain_Update(50);
 8002a4c:	e7f8      	b.n	8002a40 <main+0x98>
 8002a4e:	bf00      	nop
 8002a50:	200008dc 	.word	0x200008dc
 8002a54:	20000974 	.word	0x20000974
 8002a58:	2000060c 	.word	0x2000060c
 8002a5c:	20000878 	.word	0x20000878
 8002a60:	20000828 	.word	0x20000828
 8002a64:	08009648 	.word	0x08009648

08002a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b096      	sub	sp, #88	; 0x58
 8002a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a72:	2228      	movs	r2, #40	; 0x28
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f005 fb76 	bl	8008168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	611a      	str	r2, [r3, #16]
 8002a9a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aa4:	2310      	movs	r3, #16
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002aac:	2300      	movs	r3, #0
 8002aae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002ab0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ab4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 f982 	bl	8004dc4 <HAL_RCC_OscConfig>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002ac6:	f000 fab5 	bl	8003034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aca:	230f      	movs	r3, #15
 8002acc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002ad6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 f9aa 	bl	8005e40 <HAL_RCC_ClockConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002af2:	f000 fa9f 	bl	8003034 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8002af6:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8002afa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b00:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fb7f 	bl	800620c <HAL_RCCEx_PeriphCLKConfig>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002b14:	f000 fa8e 	bl	8003034 <Error_Handler>
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3758      	adds	r7, #88	; 0x58
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b26:	463b      	mov	r3, r7
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
 8002b34:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002b36:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b38:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <MX_ADC2_Init+0xd8>)
 8002b3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002b74:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b76:	2202      	movs	r2, #2
 8002b78:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b84:	2204      	movs	r2, #4
 8002b86:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002b94:	4817      	ldr	r0, [pc, #92]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002b96:	f000 fd69 	bl	800366c <HAL_ADC_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8002ba0:	f000 fa48 	bl	8003034 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bbc:	463b      	mov	r3, r7
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002bc2:	f001 f8e9 	bl	8003d98 <HAL_ADC_ConfigChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8002bcc:	f000 fa32 	bl	8003034 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bd8:	463b      	mov	r3, r7
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <MX_ADC2_Init+0xd4>)
 8002bde:	f001 f8db 	bl	8003d98 <HAL_ADC_ConfigChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8002be8:	f000 fa24 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000828 	.word	0x20000828
 8002bf8:	50000100 	.word	0x50000100

08002bfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c02:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <MX_SPI1_Init+0x78>)
 8002c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c4a:	2207      	movs	r2, #7
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c56:	2208      	movs	r2, #8
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c5a:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c5c:	f003 fbfc 	bl	8006458 <HAL_SPI_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c66:	f000 f9e5 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000878 	.word	0x20000878
 8002c74:	40013000 	.word	0x40013000

08002c78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b09a      	sub	sp, #104	; 0x68
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
 8002ca8:	615a      	str	r2, [r3, #20]
 8002caa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	222c      	movs	r2, #44	; 0x2c
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f005 fa58 	bl	8008168 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cb8:	4b44      	ldr	r3, [pc, #272]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002cba:	4a45      	ldr	r2, [pc, #276]	; (8002dd0 <MX_TIM1_Init+0x158>)
 8002cbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cbe:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc4:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4600;
 8002cca:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002ccc:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8002cd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cd8:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ce4:	4839      	ldr	r0, [pc, #228]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002ce6:	f003 ff2d 	bl	8006b44 <HAL_TIM_Base_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002cf0:	f000 f9a0 	bl	8003034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4832      	ldr	r0, [pc, #200]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002d02:	f004 fc25 	bl	8007550 <HAL_TIM_ConfigClockSource>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d0c:	f000 f992 	bl	8003034 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002d10:	482e      	ldr	r0, [pc, #184]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002d12:	f003 ffcb 	bl	8006cac <HAL_TIM_OC_Init>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d1c:	f000 f98a 	bl	8003034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d20:	2300      	movs	r3, #0
 8002d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d24:	2300      	movs	r3, #0
 8002d26:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d30:	4619      	mov	r1, r3
 8002d32:	4826      	ldr	r0, [pc, #152]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002d34:	f005 f8dc 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002d3e:	f000 f979 	bl	8003034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002d42:	2330      	movs	r3, #48	; 0x30
 8002d44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2300;
 8002d46:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d50:	2300      	movs	r3, #0
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d64:	2200      	movs	r2, #0
 8002d66:	4619      	mov	r1, r3
 8002d68:	4818      	ldr	r0, [pc, #96]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002d6a:	f004 fa63 	bl	8007234 <HAL_TIM_OC_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002d74:	f000 f95e 	bl	8003034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002da8:	1d3b      	adds	r3, r7, #4
 8002daa:	4619      	mov	r1, r3
 8002dac:	4807      	ldr	r0, [pc, #28]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002dae:	f005 f90d 	bl	8007fcc <HAL_TIMEx_ConfigBreakDeadTime>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002db8:	f000 f93c 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002dbc:	4803      	ldr	r0, [pc, #12]	; (8002dcc <MX_TIM1_Init+0x154>)
 8002dbe:	f000 fa5d 	bl	800327c <HAL_TIM_MspPostInit>

}
 8002dc2:	bf00      	nop
 8002dc4:	3768      	adds	r7, #104	; 0x68
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200008dc 	.word	0x200008dc
 8002dd0:	40012c00 	.word	0x40012c00

08002dd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dda:	f107 031c 	add.w	r3, r7, #28
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de6:	463b      	mov	r3, r7
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
 8002df4:	615a      	str	r2, [r3, #20]
 8002df6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <MX_TIM2_Init+0xa8>)
 8002dfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <MX_TIM2_Init+0xa8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <MX_TIM2_Init+0xa8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <MX_TIM2_Init+0xa8>)
 8002e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <MX_TIM2_Init+0xa8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <MX_TIM2_Init+0xa8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e20:	4816      	ldr	r0, [pc, #88]	; (8002e7c <MX_TIM2_Init+0xa8>)
 8002e22:	f004 f891 	bl	8006f48 <HAL_TIM_PWM_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002e2c:	f000 f902 	bl	8003034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	480f      	ldr	r0, [pc, #60]	; (8002e7c <MX_TIM2_Init+0xa8>)
 8002e40:	f005 f856 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002e4a:	f000 f8f3 	bl	8003034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e4e:	2360      	movs	r3, #96	; 0x60
 8002e50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e5e:	463b      	mov	r3, r7
 8002e60:	2204      	movs	r2, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	4805      	ldr	r0, [pc, #20]	; (8002e7c <MX_TIM2_Init+0xa8>)
 8002e66:	f004 fa5f 	bl	8007328 <HAL_TIM_PWM_ConfigChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002e70:	f000 f8e0 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000928 	.word	0x20000928

08002e80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e86:	f107 0310 	add.w	r3, r7, #16
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e9e:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <MX_TIM3_Init+0x94>)
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <MX_TIM3_Init+0x98>)
 8002ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <MX_TIM3_Init+0x94>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <MX_TIM3_Init+0x94>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <MX_TIM3_Init+0x94>)
 8002eb2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002eb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb8:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <MX_TIM3_Init+0x94>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <MX_TIM3_Init+0x94>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ec4:	4813      	ldr	r0, [pc, #76]	; (8002f14 <MX_TIM3_Init+0x94>)
 8002ec6:	f003 fe3d 	bl	8006b44 <HAL_TIM_Base_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ed0:	f000 f8b0 	bl	8003034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480c      	ldr	r0, [pc, #48]	; (8002f14 <MX_TIM3_Init+0x94>)
 8002ee2:	f004 fb35 	bl	8007550 <HAL_TIM_ConfigClockSource>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002eec:	f000 f8a2 	bl	8003034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4805      	ldr	r0, [pc, #20]	; (8002f14 <MX_TIM3_Init+0x94>)
 8002efe:	f004 fff7 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002f08:	f000 f894 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f0c:	bf00      	nop
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000974 	.word	0x20000974
 8002f18:	40000400 	.word	0x40000400

08002f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	60da      	str	r2, [r3, #12]
 8002f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f32:	4b36      	ldr	r3, [pc, #216]	; (800300c <MX_GPIO_Init+0xf0>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4a35      	ldr	r2, [pc, #212]	; (800300c <MX_GPIO_Init+0xf0>)
 8002f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f3c:	6153      	str	r3, [r2, #20]
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <MX_GPIO_Init+0xf0>)
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4a:	4b30      	ldr	r3, [pc, #192]	; (800300c <MX_GPIO_Init+0xf0>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4a2f      	ldr	r2, [pc, #188]	; (800300c <MX_GPIO_Init+0xf0>)
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f54:	6153      	str	r3, [r2, #20]
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <MX_GPIO_Init+0xf0>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	607b      	str	r3, [r7, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <MX_GPIO_Init+0xf0>)
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4a29      	ldr	r2, [pc, #164]	; (800300c <MX_GPIO_Init+0xf0>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6c:	6153      	str	r3, [r2, #20]
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <MX_GPIO_Init+0xf0>)
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	210a      	movs	r1, #10
 8002f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f82:	f001 ff07 	bl	8004d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2110      	movs	r1, #16
 8002f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8e:	f001 ff01 	bl	8004d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8002f92:	231a      	movs	r3, #26
 8002f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f96:	2301      	movs	r3, #1
 8002f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fac:	f001 fd68 	bl	8004a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002fb0:	f248 0304 	movw	r3, #32772	; 0x8004
 8002fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc6:	f107 030c 	add.w	r3, r7, #12
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd0:	f001 fd56 	bl	8004a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	480a      	ldr	r0, [pc, #40]	; (8003010 <MX_GPIO_Init+0xf4>)
 8002fe8:	f001 fd4a 	bl	8004a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = ANALOGUE_STICK_BUTTON_Pin;
 8002fec:	2302      	movs	r3, #2
 8002fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANALOGUE_STICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4804      	ldr	r0, [pc, #16]	; (8003010 <MX_GPIO_Init+0xf4>)
 8003000:	f001 fd3e 	bl	8004a80 <HAL_GPIO_Init>

}
 8003004:	bf00      	nop
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	48000400 	.word	0x48000400

08003014 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a04      	ldr	r2, [pc, #16]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_TIM_PeriodElapsedCallback+0x14>
		MusicPlayer_TimerISR();
 8003024:	f7fd fe02 	bl	8000c2c <MusicPlayer_TimerISR>
	}
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000974 	.word	0x20000974

08003034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003038:	b672      	cpsid	i
}
 800303a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800303c:	e7fe      	b.n	800303c <Error_Handler+0x8>
	...

08003040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_MspInit+0x4c>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	4a10      	ldr	r2, [pc, #64]	; (800308c <HAL_MspInit+0x4c>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6193      	str	r3, [r2, #24]
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_MspInit+0x4c>)
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_MspInit+0x4c>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <HAL_MspInit+0x4c>)
 8003064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003068:	61d3      	str	r3, [r2, #28]
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <HAL_MspInit+0x4c>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	210f      	movs	r1, #15
 800307a:	f06f 0001 	mvn.w	r0, #1
 800307e:	f001 faf0 	bl	8004662 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a15      	ldr	r2, [pc, #84]	; (8003104 <HAL_ADC_MspInit+0x74>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d124      	bne.n	80030fc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_ADC_MspInit+0x78>)
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_ADC_MspInit+0x78>)
 80030b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6153      	str	r3, [r2, #20]
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_ADC_MspInit+0x78>)
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_ADC_MspInit+0x78>)
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <HAL_ADC_MspInit+0x78>)
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d4:	6153      	str	r3, [r2, #20]
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <HAL_ADC_MspInit+0x78>)
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 80030e2:	2360      	movs	r3, #96	; 0x60
 80030e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e6:	2303      	movs	r3, #3
 80030e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	4619      	mov	r1, r3
 80030f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030f8:	f001 fcc2 	bl	8004a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80030fc:	bf00      	nop
 80030fe:	3728      	adds	r7, #40	; 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	50000100 	.word	0x50000100
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <HAL_SPI_MspInit+0xb4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d144      	bne.n	80031b8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800312e:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <HAL_SPI_MspInit+0xb8>)
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <HAL_SPI_MspInit+0xb8>)
 8003134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003138:	6193      	str	r3, [r2, #24]
 800313a:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_SPI_MspInit+0xb8>)
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <HAL_SPI_MspInit+0xb8>)
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <HAL_SPI_MspInit+0xb8>)
 800314c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003150:	6153      	str	r3, [r2, #20]
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_SPI_MspInit+0xb8>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_SPI_MspInit+0xb8>)
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_SPI_MspInit+0xb8>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003168:	6153      	str	r3, [r2, #20]
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <HAL_SPI_MspInit+0xb8>)
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003182:	2303      	movs	r3, #3
 8003184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003186:	2305      	movs	r3, #5
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003194:	f001 fc74 	bl	8004a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003198:	2308      	movs	r3, #8
 800319a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a4:	2303      	movs	r3, #3
 80031a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031a8:	2305      	movs	r3, #5
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	4805      	ldr	r0, [pc, #20]	; (80031c8 <HAL_SPI_MspInit+0xbc>)
 80031b4:	f001 fc64 	bl	8004a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031b8:	bf00      	nop
 80031ba:	3728      	adds	r7, #40	; 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40013000 	.word	0x40013000
 80031c4:	40021000 	.word	0x40021000
 80031c8:	48000400 	.word	0x48000400

080031cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a16      	ldr	r2, [pc, #88]	; (8003234 <HAL_TIM_Base_MspInit+0x68>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10c      	bne.n	80031f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_TIM_Base_MspInit+0x6c>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_TIM_Base_MspInit+0x6c>)
 80031e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031e8:	6193      	str	r3, [r2, #24]
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_TIM_Base_MspInit+0x6c>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031f6:	e018      	b.n	800322a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0f      	ldr	r2, [pc, #60]	; (800323c <HAL_TIM_Base_MspInit+0x70>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d113      	bne.n	800322a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_TIM_Base_MspInit+0x6c>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <HAL_TIM_Base_MspInit+0x6c>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	61d3      	str	r3, [r2, #28]
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_TIM_Base_MspInit+0x6c>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800321a:	2200      	movs	r2, #0
 800321c:	2100      	movs	r1, #0
 800321e:	201d      	movs	r0, #29
 8003220:	f001 fa1f 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003224:	201d      	movs	r0, #29
 8003226:	f001 fa38 	bl	800469a <HAL_NVIC_EnableIRQ>
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40000400 	.word	0x40000400

08003240 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d10b      	bne.n	800326a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_TIM_PWM_MspInit+0x38>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <HAL_TIM_PWM_MspInit+0x38>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	61d3      	str	r3, [r2, #28]
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_TIM_PWM_MspInit+0x38>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000

0800327c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_TIM_MspPostInit+0x68>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d11d      	bne.n	80032da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_TIM_MspPostInit+0x6c>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	4a11      	ldr	r2, [pc, #68]	; (80032e8 <HAL_TIM_MspPostInit+0x6c>)
 80032a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a8:	6153      	str	r3, [r2, #20]
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <HAL_TIM_MspPostInit+0x6c>)
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80032c8:	2306      	movs	r3, #6
 80032ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	4619      	mov	r1, r3
 80032d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d6:	f001 fbd3 	bl	8004a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032da:	bf00      	nop
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40012c00 	.word	0x40012c00
 80032e8:	40021000 	.word	0x40021000

080032ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <NMI_Handler+0x4>

080032f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f6:	e7fe      	b.n	80032f6 <HardFault_Handler+0x4>

080032f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032fc:	e7fe      	b.n	80032fc <MemManage_Handler+0x4>

080032fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003302:	e7fe      	b.n	8003302 <BusFault_Handler+0x4>

08003304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <UsageFault_Handler+0x4>

0800330a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003338:	f000 f954 	bl	80035e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}

08003340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003344:	4802      	ldr	r0, [pc, #8]	; (8003350 <TIM3_IRQHandler+0x10>)
 8003346:	f003 fe56 	bl	8006ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000974 	.word	0x20000974

08003354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
	return 1;
 8003358:	2301      	movs	r3, #1
}
 800335a:	4618      	mov	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <_kill>:

int _kill(int pid, int sig)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800336e:	f004 fec3 	bl	80080f8 <__errno>
 8003372:	4603      	mov	r3, r0
 8003374:	2216      	movs	r2, #22
 8003376:	601a      	str	r2, [r3, #0]
	return -1;
 8003378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <_exit>:

void _exit (int status)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800338c:	f04f 31ff 	mov.w	r1, #4294967295
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ffe7 	bl	8003364 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003396:	e7fe      	b.n	8003396 <_exit+0x12>

08003398 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e00a      	b.n	80033c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033aa:	f3af 8000 	nop.w
 80033ae:	4601      	mov	r1, r0
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	60ba      	str	r2, [r7, #8]
 80033b6:	b2ca      	uxtb	r2, r1
 80033b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3301      	adds	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	dbf0      	blt.n	80033aa <_read+0x12>
	}

return len;
 80033c8:	687b      	ldr	r3, [r7, #4]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	e009      	b.n	80033f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	60ba      	str	r2, [r7, #8]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3301      	adds	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	dbf1      	blt.n	80033e4 <_write+0x12>
	}
	return len;
 8003400:	687b      	ldr	r3, [r7, #4]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <_close>:

int _close(int file)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	return -1;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003432:	605a      	str	r2, [r3, #4]
	return 0;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <_isatty>:

int _isatty(int file)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
	return 1;
 800344a:	2301      	movs	r3, #1
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
	return 0;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800347c:	4a14      	ldr	r2, [pc, #80]	; (80034d0 <_sbrk+0x5c>)
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <_sbrk+0x60>)
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003488:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <_sbrk+0x64>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <_sbrk+0x64>)
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <_sbrk+0x68>)
 8003494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <_sbrk+0x64>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d207      	bcs.n	80034b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a4:	f004 fe28 	bl	80080f8 <__errno>
 80034a8:	4603      	mov	r3, r0
 80034aa:	220c      	movs	r2, #12
 80034ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	e009      	b.n	80034c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b4:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <_sbrk+0x64>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <_sbrk+0x64>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	4a05      	ldr	r2, [pc, #20]	; (80034d8 <_sbrk+0x64>)
 80034c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034c6:	68fb      	ldr	r3, [r7, #12]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20003000 	.word	0x20003000
 80034d4:	00000400 	.word	0x00000400
 80034d8:	200009c0 	.word	0x200009c0
 80034dc:	200009f8 	.word	0x200009f8

080034e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <SystemInit+0x20>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	4a05      	ldr	r2, [pc, #20]	; (8003500 <SystemInit+0x20>)
 80034ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800353c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003508:	480d      	ldr	r0, [pc, #52]	; (8003540 <LoopForever+0x6>)
  ldr r1, =_edata
 800350a:	490e      	ldr	r1, [pc, #56]	; (8003544 <LoopForever+0xa>)
  ldr r2, =_sidata
 800350c:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <LoopForever+0xe>)
  movs r3, #0
 800350e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003510:	e002      	b.n	8003518 <LoopCopyDataInit>

08003512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003516:	3304      	adds	r3, #4

08003518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800351a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800351c:	d3f9      	bcc.n	8003512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351e:	4a0b      	ldr	r2, [pc, #44]	; (800354c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003520:	4c0b      	ldr	r4, [pc, #44]	; (8003550 <LoopForever+0x16>)
  movs r3, #0
 8003522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003524:	e001      	b.n	800352a <LoopFillZerobss>

08003526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003528:	3204      	adds	r2, #4

0800352a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800352a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800352c:	d3fb      	bcc.n	8003526 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800352e:	f7ff ffd7 	bl	80034e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003532:	f004 fde7 	bl	8008104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003536:	f7ff fa37 	bl	80029a8 <main>

0800353a <LoopForever>:

LoopForever:
    b LoopForever
 800353a:	e7fe      	b.n	800353a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800353c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003544:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8003548:	08009ee0 	.word	0x08009ee0
  ldr r2, =_sbss
 800354c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8003550:	200009f8 	.word	0x200009f8

08003554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003554:	e7fe      	b.n	8003554 <ADC1_2_IRQHandler>
	...

08003558 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <HAL_Init+0x28>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a07      	ldr	r2, [pc, #28]	; (8003580 <HAL_Init+0x28>)
 8003562:	f043 0310 	orr.w	r3, r3, #16
 8003566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003568:	2003      	movs	r0, #3
 800356a:	f001 f86f 	bl	800464c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800356e:	2000      	movs	r0, #0
 8003570:	f000 f808 	bl	8003584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003574:	f7ff fd64 	bl	8003040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40022000 	.word	0x40022000

08003584 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_InitTick+0x54>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_InitTick+0x58>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800359a:	fbb3 f3f1 	udiv	r3, r3, r1
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 f887 	bl	80046b6 <HAL_SYSTICK_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00e      	b.n	80035d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b0f      	cmp	r3, #15
 80035b6:	d80a      	bhi.n	80035ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035b8:	2200      	movs	r2, #0
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	f001 f84f 	bl	8004662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c4:	4a06      	ldr	r2, [pc, #24]	; (80035e0 <HAL_InitTick+0x5c>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e000      	b.n	80035d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000068 	.word	0x20000068
 80035dc:	20000070 	.word	0x20000070
 80035e0:	2000006c 	.word	0x2000006c

080035e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_IncTick+0x20>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_IncTick+0x24>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	4a04      	ldr	r2, [pc, #16]	; (8003608 <HAL_IncTick+0x24>)
 80035f6:	6013      	str	r3, [r2, #0]
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000070 	.word	0x20000070
 8003608:	200009c4 	.word	0x200009c4

0800360c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <HAL_GetTick+0x14>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	200009c4 	.word	0x200009c4

08003624 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800362c:	f7ff ffee 	bl	800360c <HAL_GetTick>
 8003630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d005      	beq.n	800364a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_Delay+0x44>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800364a:	bf00      	nop
 800364c:	f7ff ffde 	bl	800360c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	429a      	cmp	r2, r3
 800365a:	d8f7      	bhi.n	800364c <HAL_Delay+0x28>
  {
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000070 	.word	0x20000070

0800366c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b09a      	sub	sp, #104	; 0x68
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e172      	b.n	8003972 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d176      	bne.n	800378c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d152      	bne.n	800374c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fce5 	bl	8003090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d13b      	bne.n	800374c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fe83 	bl	80043e0 <ADC_Disable>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d12f      	bne.n	800374c <HAL_ADC_Init+0xe0>
 80036ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d12b      	bne.n	800374c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036fc:	f023 0302 	bic.w	r3, r3, #2
 8003700:	f043 0202 	orr.w	r2, r3, #2
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003716:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003726:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003728:	4b94      	ldr	r3, [pc, #592]	; (800397c <HAL_ADC_Init+0x310>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a94      	ldr	r2, [pc, #592]	; (8003980 <HAL_ADC_Init+0x314>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	0c9a      	lsrs	r2, r3, #18
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800373e:	e002      	b.n	8003746 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	3b01      	subs	r3, #1
 8003744:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f9      	bne.n	8003740 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003768:	d110      	bne.n	800378c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f023 0312 	bic.w	r3, r3, #18
 8003772:	f043 0210 	orr.w	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b00      	cmp	r3, #0
 8003796:	f040 80df 	bne.w	8003958 <HAL_ADC_Init+0x2ec>
 800379a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 80da 	bne.w	8003958 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 80d2 	bne.w	8003958 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037bc:	f043 0202 	orr.w	r2, r3, #2
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037c4:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <HAL_ADC_Init+0x318>)
 80037c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037d0:	d102      	bne.n	80037d8 <HAL_ADC_Init+0x16c>
 80037d2:	4b6d      	ldr	r3, [pc, #436]	; (8003988 <HAL_ADC_Init+0x31c>)
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e002      	b.n	80037de <HAL_ADC_Init+0x172>
 80037d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037dc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d108      	bne.n	80037fe <HAL_ADC_Init+0x192>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_Init+0x192>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_ADC_Init+0x194>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d11c      	bne.n	800383e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003804:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003806:	2b00      	cmp	r3, #0
 8003808:	d010      	beq.n	800382c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_ADC_Init+0x1ba>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_ADC_Init+0x1ba>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_ADC_Init+0x1bc>
 8003826:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003828:	2b00      	cmp	r3, #0
 800382a:	d108      	bne.n	800383e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800382c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	431a      	orrs	r2, r3
 800383a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7e5b      	ldrb	r3, [r3, #25]
 8003842:	035b      	lsls	r3, r3, #13
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003848:	2a01      	cmp	r2, #1
 800384a:	d002      	beq.n	8003852 <HAL_ADC_Init+0x1e6>
 800384c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003850:	e000      	b.n	8003854 <HAL_ADC_Init+0x1e8>
 8003852:	2200      	movs	r2, #0
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4313      	orrs	r3, r2
 8003862:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003864:	4313      	orrs	r3, r2
 8003866:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d11b      	bne.n	80038aa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7e5b      	ldrb	r3, [r3, #25]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	3b01      	subs	r3, #1
 8003880:	045a      	lsls	r2, r3, #17
 8003882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003884:	4313      	orrs	r3, r2
 8003886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388a:	663b      	str	r3, [r7, #96]	; 0x60
 800388c:	e00d      	b.n	80038aa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d007      	beq.n	80038c2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	4313      	orrs	r3, r2
 80038bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038be:	4313      	orrs	r3, r2
 80038c0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d114      	bne.n	80038fa <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038de:	f023 0302 	bic.w	r3, r3, #2
 80038e2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7e1b      	ldrb	r3, [r3, #24]
 80038e8:	039a      	lsls	r2, r3, #14
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038f6:	4313      	orrs	r3, r2
 80038f8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_ADC_Init+0x320>)
 8003902:	4013      	ands	r3, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800390a:	430b      	orrs	r3, r1
 800390c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10c      	bne.n	8003930 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	f023 010f 	bic.w	r1, r3, #15
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	1e5a      	subs	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
 800392e:	e007      	b.n	8003940 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 020f 	bic.w	r2, r2, #15
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
 8003956:	e00a      	b.n	800396e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f023 0312 	bic.w	r3, r3, #18
 8003960:	f043 0210 	orr.w	r2, r3, #16
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003968:	2301      	movs	r3, #1
 800396a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800396e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003972:	4618      	mov	r0, r3
 8003974:	3768      	adds	r7, #104	; 0x68
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000068 	.word	0x20000068
 8003980:	431bde83 	.word	0x431bde83
 8003984:	50000300 	.word	0x50000300
 8003988:	50000100 	.word	0x50000100
 800398c:	fff0c007 	.word	0xfff0c007

08003990 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 809c 	bne.w	8003ae4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_Start+0x2a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e097      	b.n	8003aea <HAL_ADC_Start+0x15a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fca8 	bl	8004318 <ADC_Enable>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 8083 	bne.w	8003ada <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_ADC_Start+0x164>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_ADC_Start+0x6e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039fc:	d115      	bne.n	8003a2a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d027      	beq.n	8003a68 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003a28:	e01e      	b.n	8003a68 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a3e:	d004      	beq.n	8003a4a <HAL_ADC_Start+0xba>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <HAL_ADC_Start+0x168>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10e      	bne.n	8003a68 <HAL_ADC_Start+0xd8>
 8003a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a74:	d106      	bne.n	8003a84 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f023 0206 	bic.w	r2, r3, #6
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
 8003a82:	e002      	b.n	8003a8a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	221c      	movs	r2, #28
 8003a98:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003a9a:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <HAL_ADC_Start+0x164>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d010      	beq.n	8003ac8 <HAL_ADC_Start+0x138>
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_ADC_Start+0x164>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_ADC_Start+0x138>
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <HAL_ADC_Start+0x164>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	d004      	beq.n	8003ac8 <HAL_ADC_Start+0x138>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac6:	d10f      	bne.n	8003ae8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0204 	orr.w	r2, r2, #4
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	e006      	b.n	8003ae8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ae2:	e001      	b.n	8003ae8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	50000300 	.word	0x50000300
 8003af8:	50000100 	.word	0x50000100

08003afc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d102      	bne.n	8003b18 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003b12:	2308      	movs	r3, #8
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e02e      	b.n	8003b76 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b18:	4b5e      	ldr	r3, [pc, #376]	; (8003c94 <HAL_ADC_PollForConversion+0x198>)
 8003b1a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d112      	bne.n	8003b4e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d11d      	bne.n	8003b72 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e09d      	b.n	8003c8a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e08b      	b.n	8003c8a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003b72:	230c      	movs	r3, #12
 8003b74:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b76:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <HAL_ADC_PollForConversion+0x198>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_ADC_PollForConversion+0x90>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b8a:	d104      	bne.n	8003b96 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	e003      	b.n	8003b9e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003b96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003b9e:	f7ff fd35 	bl	800360c <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003ba4:	e021      	b.n	8003bea <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d01d      	beq.n	8003bea <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_ADC_PollForConversion+0xc8>
 8003bb4:	f7ff fd2a 	bl	800360c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d212      	bcs.n	8003bea <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e04f      	b.n	8003c8a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0d6      	beq.n	8003ba6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d131      	bne.n	8003c76 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d12c      	bne.n	8003c76 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d125      	bne.n	8003c76 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d112      	bne.n	8003c5e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d112      	bne.n	8003c76 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f043 0201 	orr.w	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c5c:	e00b      	b.n	8003c76 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	50000300 	.word	0x50000300

08003c98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_ADCEx_Calibration_Start+0x1c>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e05f      	b.n	8003d8e <HAL_ADCEx_Calibration_Start+0xdc>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fb82 	bl	80043e0 <ADC_Disable>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d14e      	bne.n	8003d84 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003cfa:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d107      	bne.n	8003d12 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d10:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d20:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003d22:	f7ff fc73 	bl	800360c <HAL_GetTick>
 8003d26:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003d28:	e01c      	b.n	8003d64 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003d2a:	f7ff fc6f 	bl	800360c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b0a      	cmp	r3, #10
 8003d36:	d915      	bls.n	8003d64 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d46:	d10d      	bne.n	8003d64 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f023 0312 	bic.w	r3, r3, #18
 8003d50:	f043 0210 	orr.w	r2, r3, #16
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e014      	b.n	8003d8e <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d72:	d0da      	beq.n	8003d2a <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f023 0303 	bic.w	r3, r3, #3
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b09b      	sub	sp, #108	; 0x6c
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x22>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e2a4      	b.n	8004304 <HAL_ADC_ConfigChannel+0x56c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f040 8288 	bne.w	80042e2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d81c      	bhi.n	8003e14 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	461a      	mov	r2, r3
 8003dee:	231f      	movs	r3, #31
 8003df0:	4093      	lsls	r3, r2
 8003df2:	43db      	mvns	r3, r3
 8003df4:	4019      	ands	r1, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
 8003e12:	e063      	b.n	8003edc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b09      	cmp	r3, #9
 8003e1a:	d81e      	bhi.n	8003e5a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	3b1e      	subs	r3, #30
 8003e30:	221f      	movs	r2, #31
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	4019      	ands	r1, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	3b1e      	subs	r3, #30
 8003e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34
 8003e58:	e040      	b.n	8003edc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b0e      	cmp	r3, #14
 8003e60:	d81e      	bhi.n	8003ea0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	3b3c      	subs	r3, #60	; 0x3c
 8003e76:	221f      	movs	r2, #31
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	4019      	ands	r1, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	3b3c      	subs	r3, #60	; 0x3c
 8003e92:	fa00 f203 	lsl.w	r2, r0, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8003e9e:	e01d      	b.n	8003edc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	3b5a      	subs	r3, #90	; 0x5a
 8003eb4:	221f      	movs	r2, #31
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	4019      	ands	r1, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	3b5a      	subs	r3, #90	; 0x5a
 8003ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 80e5 	bne.w	80040b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b09      	cmp	r3, #9
 8003ef2:	d91c      	bls.n	8003f2e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6999      	ldr	r1, [r3, #24]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	3b1e      	subs	r3, #30
 8003f06:	2207      	movs	r2, #7
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	4019      	ands	r1, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6898      	ldr	r0, [r3, #8]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3b1e      	subs	r3, #30
 8003f20:	fa00 f203 	lsl.w	r2, r0, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	619a      	str	r2, [r3, #24]
 8003f2c:	e019      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6959      	ldr	r1, [r3, #20]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	2207      	movs	r2, #7
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	4019      	ands	r1, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6898      	ldr	r0, [r3, #8]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4413      	add	r3, r2
 8003f56:	fa00 f203 	lsl.w	r2, r0, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	08db      	lsrs	r3, r3, #3
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d84f      	bhi.n	8004024 <HAL_ADC_ConfigChannel+0x28c>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <HAL_ADC_ConfigChannel+0x1f4>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003f9d 	.word	0x08003f9d
 8003f90:	08003fbf 	.word	0x08003fbf
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08004003 	.word	0x08004003
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fa2:	4b94      	ldr	r3, [pc, #592]	; (80041f4 <HAL_ADC_ConfigChannel+0x45c>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	0691      	lsls	r1, r2, #26
 8003fac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003fbc:	e07e      	b.n	80040bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fc4:	4b8b      	ldr	r3, [pc, #556]	; (80041f4 <HAL_ADC_ConfigChannel+0x45c>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	0691      	lsls	r1, r2, #26
 8003fce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fdc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003fde:	e06d      	b.n	80040bc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003fe6:	4b83      	ldr	r3, [pc, #524]	; (80041f4 <HAL_ADC_ConfigChannel+0x45c>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	0691      	lsls	r1, r2, #26
 8003ff0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ffe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004000:	e05c      	b.n	80040bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004008:	4b7a      	ldr	r3, [pc, #488]	; (80041f4 <HAL_ADC_ConfigChannel+0x45c>)
 800400a:	4013      	ands	r3, r2
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	0691      	lsls	r1, r2, #26
 8004012:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004014:	430a      	orrs	r2, r1
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004020:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004022:	e04b      	b.n	80040bc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	069b      	lsls	r3, r3, #26
 8004034:	429a      	cmp	r2, r3
 8004036:	d107      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004046:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800404e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	069b      	lsls	r3, r3, #26
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800406a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004072:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	069b      	lsls	r3, r3, #26
 800407c:	429a      	cmp	r2, r3
 800407e:	d107      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800408e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004096:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	069b      	lsls	r3, r3, #26
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d10a      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80040b4:	e001      	b.n	80040ba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <HAL_ADC_ConfigChannel+0x324>
      break;
 80040ba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d108      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x344>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x344>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_ADC_ConfigChannel+0x346>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 810a 	bne.w	80042f8 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d00f      	beq.n	800410c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2201      	movs	r2, #1
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43da      	mvns	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	400a      	ands	r2, r1
 8004106:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800410a:	e049      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2201      	movs	r2, #1
 800411a:	409a      	lsls	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b09      	cmp	r3, #9
 800412c:	d91c      	bls.n	8004168 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6999      	ldr	r1, [r3, #24]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	3b1b      	subs	r3, #27
 8004140:	2207      	movs	r2, #7
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	4019      	ands	r1, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6898      	ldr	r0, [r3, #8]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	3b1b      	subs	r3, #27
 800415a:	fa00 f203 	lsl.w	r2, r0, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	619a      	str	r2, [r3, #24]
 8004166:	e01b      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6959      	ldr	r1, [r3, #20]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	2207      	movs	r2, #7
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	4019      	ands	r1, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6898      	ldr	r0, [r3, #8]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	fa00 f203 	lsl.w	r2, r0, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041a0:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_ADC_ConfigChannel+0x460>)
 80041a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d105      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80041ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80041bc:	2b11      	cmp	r3, #17
 80041be:	d105      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80041c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80041d0:	2b12      	cmp	r3, #18
 80041d2:	f040 8091 	bne.w	80042f8 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80041d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 808a 	bne.w	80042f8 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ec:	d108      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x468>
 80041ee:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_ADC_ConfigChannel+0x464>)
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e008      	b.n	8004206 <HAL_ADC_ConfigChannel+0x46e>
 80041f4:	83fff000 	.word	0x83fff000
 80041f8:	50000300 	.word	0x50000300
 80041fc:	50000100 	.word	0x50000100
 8004200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004204:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d108      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x48e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x48e>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_ADC_ConfigChannel+0x490>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d150      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800422c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800422e:	2b00      	cmp	r3, #0
 8004230:	d010      	beq.n	8004254 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d107      	bne.n	800424e <HAL_ADC_ConfigChannel+0x4b6>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_ADC_ConfigChannel+0x4b6>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_ADC_ConfigChannel+0x4b8>
 800424e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004250:	2b00      	cmp	r3, #0
 8004252:	d13c      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b10      	cmp	r3, #16
 800425a:	d11d      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x500>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004264:	d118      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800426e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004270:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004272:	4b27      	ldr	r3, [pc, #156]	; (8004310 <HAL_ADC_ConfigChannel+0x578>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a27      	ldr	r2, [pc, #156]	; (8004314 <HAL_ADC_ConfigChannel+0x57c>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	0c9a      	lsrs	r2, r3, #18
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004288:	e002      	b.n	8004290 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	3b01      	subs	r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f9      	bne.n	800428a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004296:	e02e      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b11      	cmp	r3, #17
 800429e:	d10b      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x520>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a8:	d106      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80042aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80042b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042b6:	e01e      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b12      	cmp	r3, #18
 80042be:	d11a      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80042c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042cc:	e013      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80042e0:	e00a      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80042f4:	e000      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042f6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004300:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004304:	4618      	mov	r0, r3
 8004306:	376c      	adds	r7, #108	; 0x6c
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000068 	.word	0x20000068
 8004314:	431bde83 	.word	0x431bde83

08004318 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d108      	bne.n	8004344 <ADC_Enable+0x2c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <ADC_Enable+0x2c>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <ADC_Enable+0x2e>
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d143      	bne.n	80043d2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <ADC_Enable+0xc4>)
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00d      	beq.n	8004374 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	f043 0210 	orr.w	r2, r3, #16
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e02f      	b.n	80043d4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004384:	f7ff f942 	bl	800360c <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800438a:	e01b      	b.n	80043c4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800438c:	f7ff f93e 	bl	800360c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d914      	bls.n	80043c4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d00d      	beq.n	80043c4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f043 0210 	orr.w	r2, r3, #16
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e007      	b.n	80043d4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d1dc      	bne.n	800438c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	8000003f 	.word	0x8000003f

080043e0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d108      	bne.n	800440c <ADC_Disable+0x2c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <ADC_Disable+0x2c>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <ADC_Disable+0x2e>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d047      	beq.n	80044a2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030d 	and.w	r3, r3, #13
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10f      	bne.n	8004440 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0202 	orr.w	r2, r2, #2
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2203      	movs	r2, #3
 8004436:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004438:	f7ff f8e8 	bl	800360c <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800443e:	e029      	b.n	8004494 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0210 	orr.w	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e023      	b.n	80044a4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800445c:	f7ff f8d6 	bl	800360c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d914      	bls.n	8004494 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10d      	bne.n	8004494 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	f043 0210 	orr.w	r2, r3, #16
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	f043 0201 	orr.w	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e007      	b.n	80044a4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d0dc      	beq.n	800445c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <__NVIC_SetPriorityGrouping+0x44>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c8:	4013      	ands	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044de:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <__NVIC_SetPriorityGrouping+0x44>)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	60d3      	str	r3, [r2, #12]
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <__NVIC_GetPriorityGrouping+0x18>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	f003 0307 	and.w	r3, r3, #7
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	2b00      	cmp	r3, #0
 8004520:	db0b      	blt.n	800453a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	4907      	ldr	r1, [pc, #28]	; (8004548 <__NVIC_EnableIRQ+0x38>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2001      	movs	r0, #1
 8004532:	fa00 f202 	lsl.w	r2, r0, r2
 8004536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	e000e100 	.word	0xe000e100

0800454c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db0a      	blt.n	8004576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	490c      	ldr	r1, [pc, #48]	; (8004598 <__NVIC_SetPriority+0x4c>)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	440b      	add	r3, r1
 8004570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004574:	e00a      	b.n	800458c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4908      	ldr	r1, [pc, #32]	; (800459c <__NVIC_SetPriority+0x50>)
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	3b04      	subs	r3, #4
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	440b      	add	r3, r1
 800458a:	761a      	strb	r2, [r3, #24]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000e100 	.word	0xe000e100
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f1c3 0307 	rsb	r3, r3, #7
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	bf28      	it	cs
 80045be:	2304      	movcs	r3, #4
 80045c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	d902      	bls.n	80045d0 <NVIC_EncodePriority+0x30>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3b03      	subs	r3, #3
 80045ce:	e000      	b.n	80045d2 <NVIC_EncodePriority+0x32>
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43da      	mvns	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	401a      	ands	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	43d9      	mvns	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	4313      	orrs	r3, r2
         );
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3724      	adds	r7, #36	; 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004618:	d301      	bcc.n	800461e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800461a:	2301      	movs	r3, #1
 800461c:	e00f      	b.n	800463e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461e:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <SysTick_Config+0x40>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004626:	210f      	movs	r1, #15
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	f7ff ff8e 	bl	800454c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <SysTick_Config+0x40>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004636:	4b04      	ldr	r3, [pc, #16]	; (8004648 <SysTick_Config+0x40>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	e000e010 	.word	0xe000e010

0800464c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff29 	bl	80044ac <__NVIC_SetPriorityGrouping>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b086      	sub	sp, #24
 8004666:	af00      	add	r7, sp, #0
 8004668:	4603      	mov	r3, r0
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004674:	f7ff ff3e 	bl	80044f4 <__NVIC_GetPriorityGrouping>
 8004678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	6978      	ldr	r0, [r7, #20]
 8004680:	f7ff ff8e 	bl	80045a0 <NVIC_EncodePriority>
 8004684:	4602      	mov	r2, r0
 8004686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff ff5d 	bl	800454c <__NVIC_SetPriority>
}
 8004692:	bf00      	nop
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	4603      	mov	r3, r0
 80046a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff31 	bl	8004510 <__NVIC_EnableIRQ>
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff ffa2 	bl	8004608 <SysTick_Config>
 80046c4:	4603      	mov	r3, r0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80046d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80046ea:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <HAL_FLASH_Program+0xd8>)
 80046ec:	7e1b      	ldrb	r3, [r3, #24]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_FLASH_Program+0x26>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e054      	b.n	80047a0 <HAL_FLASH_Program+0xd0>
 80046f6:	4b2c      	ldr	r3, [pc, #176]	; (80047a8 <HAL_FLASH_Program+0xd8>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004700:	f000 f8a8 	bl	8004854 <FLASH_WaitForLastOperation>
 8004704:	4603      	mov	r3, r0
 8004706:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d144      	bne.n	8004798 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d102      	bne.n	800471a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004714:	2301      	movs	r3, #1
 8004716:	757b      	strb	r3, [r7, #21]
 8004718:	e007      	b.n	800472a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d102      	bne.n	8004726 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004720:	2302      	movs	r3, #2
 8004722:	757b      	strb	r3, [r7, #21]
 8004724:	e001      	b.n	800472a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004726:	2304      	movs	r3, #4
 8004728:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800472a:	2300      	movs	r3, #0
 800472c:	75bb      	strb	r3, [r7, #22]
 800472e:	e02d      	b.n	800478c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004730:	7dbb      	ldrb	r3, [r7, #22]
 8004732:	005a      	lsls	r2, r3, #1
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	eb02 0c03 	add.w	ip, r2, r3
 800473a:	7dbb      	ldrb	r3, [r7, #22]
 800473c:	0119      	lsls	r1, r3, #4
 800473e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004742:	f1c1 0620 	rsb	r6, r1, #32
 8004746:	f1a1 0020 	sub.w	r0, r1, #32
 800474a:	fa22 f401 	lsr.w	r4, r2, r1
 800474e:	fa03 f606 	lsl.w	r6, r3, r6
 8004752:	4334      	orrs	r4, r6
 8004754:	fa23 f000 	lsr.w	r0, r3, r0
 8004758:	4304      	orrs	r4, r0
 800475a:	fa23 f501 	lsr.w	r5, r3, r1
 800475e:	b2a3      	uxth	r3, r4
 8004760:	4619      	mov	r1, r3
 8004762:	4660      	mov	r0, ip
 8004764:	f000 f85a 	bl	800481c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004768:	f24c 3050 	movw	r0, #50000	; 0xc350
 800476c:	f000 f872 	bl	8004854 <FLASH_WaitForLastOperation>
 8004770:	4603      	mov	r3, r0
 8004772:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004774:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <HAL_FLASH_Program+0xdc>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <HAL_FLASH_Program+0xdc>)
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d107      	bne.n	8004796 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004786:	7dbb      	ldrb	r3, [r7, #22]
 8004788:	3301      	adds	r3, #1
 800478a:	75bb      	strb	r3, [r7, #22]
 800478c:	7dba      	ldrb	r2, [r7, #22]
 800478e:	7d7b      	ldrb	r3, [r7, #21]
 8004790:	429a      	cmp	r2, r3
 8004792:	d3cd      	bcc.n	8004730 <HAL_FLASH_Program+0x60>
 8004794:	e000      	b.n	8004798 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004796:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <HAL_FLASH_Program+0xd8>)
 800479a:	2200      	movs	r2, #0
 800479c:	761a      	strb	r2, [r3, #24]

  return status;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a8:	200009c8 	.word	0x200009c8
 80047ac:	40022000 	.word	0x40022000

080047b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <HAL_FLASH_Unlock+0x40>)
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <HAL_FLASH_Unlock+0x40>)
 80047c8:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <HAL_FLASH_Unlock+0x44>)
 80047ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_FLASH_Unlock+0x40>)
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <HAL_FLASH_Unlock+0x48>)
 80047d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047d2:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <HAL_FLASH_Unlock+0x40>)
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80047e2:	79fb      	ldrb	r3, [r7, #7]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40022000 	.word	0x40022000
 80047f4:	45670123 	.word	0x45670123
 80047f8:	cdef89ab 	.word	0xcdef89ab

080047fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_FLASH_Lock+0x1c>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	4a04      	ldr	r2, [pc, #16]	; (8004818 <HAL_FLASH_Lock+0x1c>)
 8004806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	40022000 	.word	0x40022000

0800481c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004828:	4b08      	ldr	r3, [pc, #32]	; (800484c <FLASH_Program_HalfWord+0x30>)
 800482a:	2200      	movs	r2, #0
 800482c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800482e:	4b08      	ldr	r3, [pc, #32]	; (8004850 <FLASH_Program_HalfWord+0x34>)
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	4a07      	ldr	r2, [pc, #28]	; (8004850 <FLASH_Program_HalfWord+0x34>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	887a      	ldrh	r2, [r7, #2]
 800483e:	801a      	strh	r2, [r3, #0]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	200009c8 	.word	0x200009c8
 8004850:	40022000 	.word	0x40022000

08004854 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800485c:	f7fe fed6 	bl	800360c <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004862:	e010      	b.n	8004886 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d00c      	beq.n	8004886 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <FLASH_WaitForLastOperation+0x2e>
 8004872:	f7fe fecb 	bl	800360c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d201      	bcs.n	8004886 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e01f      	b.n	80048c6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <FLASH_WaitForLastOperation+0x7c>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d0e8      	beq.n	8004864 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004892:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <FLASH_WaitForLastOperation+0x7c>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b20      	cmp	r3, #32
 800489c:	d102      	bne.n	80048a4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <FLASH_WaitForLastOperation+0x7c>)
 80048a0:	2220      	movs	r2, #32
 80048a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <FLASH_WaitForLastOperation+0x7c>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d005      	beq.n	80048bc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <FLASH_WaitForLastOperation+0x7c>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d103      	bne.n	80048c4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80048bc:	f000 f80a 	bl	80048d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40022000 	.word	0x40022000

080048d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80048de:	4b14      	ldr	r3, [pc, #80]	; (8004930 <FLASH_SetErrorCode+0x5c>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d109      	bne.n	80048fe <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <FLASH_SetErrorCode+0x60>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f043 0302 	orr.w	r3, r3, #2
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <FLASH_SetErrorCode+0x60>)
 80048f4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f043 0310 	orr.w	r3, r3, #16
 80048fc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <FLASH_SetErrorCode+0x5c>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d109      	bne.n	800491e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <FLASH_SetErrorCode+0x60>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	4a08      	ldr	r2, [pc, #32]	; (8004934 <FLASH_SetErrorCode+0x60>)
 8004914:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f043 0304 	orr.w	r3, r3, #4
 800491c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800491e:	4a04      	ldr	r2, [pc, #16]	; (8004930 <FLASH_SetErrorCode+0x5c>)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60d3      	str	r3, [r2, #12]
}  
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	40022000 	.word	0x40022000
 8004934:	200009c8 	.word	0x200009c8

08004938 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800494a:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <HAL_FLASHEx_Erase+0xcc>)
 800494c:	7e1b      	ldrb	r3, [r3, #24]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_FLASHEx_Erase+0x1e>
 8004952:	2302      	movs	r3, #2
 8004954:	e052      	b.n	80049fc <HAL_FLASHEx_Erase+0xc4>
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_FLASHEx_Erase+0xcc>)
 8004958:	2201      	movs	r2, #1
 800495a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d115      	bne.n	8004990 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004964:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004968:	f7ff ff74 	bl	8004854 <FLASH_WaitForLastOperation>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d140      	bne.n	80049f4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004972:	f000 f84b 	bl	8004a0c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004976:	f24c 3050 	movw	r0, #50000	; 0xc350
 800497a:	f7ff ff6b 	bl	8004854 <FLASH_WaitForLastOperation>
 800497e:	4603      	mov	r3, r0
 8004980:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004982:	4b21      	ldr	r3, [pc, #132]	; (8004a08 <HAL_FLASHEx_Erase+0xd0>)
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <HAL_FLASHEx_Erase+0xd0>)
 8004988:	f023 0304 	bic.w	r3, r3, #4
 800498c:	6113      	str	r3, [r2, #16]
 800498e:	e031      	b.n	80049f4 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004990:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004994:	f7ff ff5e 	bl	8004854 <FLASH_WaitForLastOperation>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d12a      	bne.n	80049f4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295
 80049a4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	e019      	b.n	80049e2 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	f000 f846 	bl	8004a40 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049b8:	f7ff ff4c 	bl	8004854 <FLASH_WaitForLastOperation>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_FLASHEx_Erase+0xd0>)
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	4a10      	ldr	r2, [pc, #64]	; (8004a08 <HAL_FLASHEx_Erase+0xd0>)
 80049c6:	f023 0302 	bic.w	r3, r3, #2
 80049ca:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	601a      	str	r2, [r3, #0]
            break;
 80049d8:	e00c      	b.n	80049f4 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	02da      	lsls	r2, r3, #11
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3dc      	bcc.n	80049ae <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <HAL_FLASHEx_Erase+0xcc>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	761a      	strb	r2, [r3, #24]

  return status;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	200009c8 	.word	0x200009c8
 8004a08:	40022000 	.word	0x40022000

08004a0c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <FLASH_MassErase+0x2c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <FLASH_MassErase+0x30>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <FLASH_MassErase+0x30>)
 8004a1c:	f043 0304 	orr.w	r3, r3, #4
 8004a20:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <FLASH_MassErase+0x30>)
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <FLASH_MassErase+0x30>)
 8004a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a2c:	6113      	str	r3, [r2, #16]
}
 8004a2e:	bf00      	nop
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	200009c8 	.word	0x200009c8
 8004a3c:	40022000 	.word	0x40022000

08004a40 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <FLASH_PageErase+0x38>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <FLASH_PageErase+0x3c>)
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <FLASH_PageErase+0x3c>)
 8004a54:	f043 0302 	orr.w	r3, r3, #2
 8004a58:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004a5a:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <FLASH_PageErase+0x3c>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <FLASH_PageErase+0x3c>)
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <FLASH_PageErase+0x3c>)
 8004a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a6a:	6113      	str	r3, [r2, #16]
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	200009c8 	.word	0x200009c8
 8004a7c:	40022000 	.word	0x40022000

08004a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a8e:	e14e      	b.n	8004d2e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2101      	movs	r1, #1
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8140 	beq.w	8004d28 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d005      	beq.n	8004ac0 <HAL_GPIO_Init+0x40>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d130      	bne.n	8004b22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	2203      	movs	r2, #3
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004af6:	2201      	movs	r2, #1
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 0201 	and.w	r2, r3, #1
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d017      	beq.n	8004b5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	2203      	movs	r2, #3
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d123      	bne.n	8004bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	08da      	lsrs	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3208      	adds	r2, #8
 8004b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	220f      	movs	r2, #15
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	08da      	lsrs	r2, r3, #3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3208      	adds	r2, #8
 8004bac:	6939      	ldr	r1, [r7, #16]
 8004bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0203 	and.w	r2, r3, #3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 809a 	beq.w	8004d28 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf4:	4b55      	ldr	r3, [pc, #340]	; (8004d4c <HAL_GPIO_Init+0x2cc>)
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	4a54      	ldr	r2, [pc, #336]	; (8004d4c <HAL_GPIO_Init+0x2cc>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6193      	str	r3, [r2, #24]
 8004c00:	4b52      	ldr	r3, [pc, #328]	; (8004d4c <HAL_GPIO_Init+0x2cc>)
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c0c:	4a50      	ldr	r2, [pc, #320]	; (8004d50 <HAL_GPIO_Init+0x2d0>)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	089b      	lsrs	r3, r3, #2
 8004c12:	3302      	adds	r3, #2
 8004c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	220f      	movs	r2, #15
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c36:	d013      	beq.n	8004c60 <HAL_GPIO_Init+0x1e0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a46      	ldr	r2, [pc, #280]	; (8004d54 <HAL_GPIO_Init+0x2d4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00d      	beq.n	8004c5c <HAL_GPIO_Init+0x1dc>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a45      	ldr	r2, [pc, #276]	; (8004d58 <HAL_GPIO_Init+0x2d8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <HAL_GPIO_Init+0x1d8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a44      	ldr	r2, [pc, #272]	; (8004d5c <HAL_GPIO_Init+0x2dc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <HAL_GPIO_Init+0x1d4>
 8004c50:	2303      	movs	r3, #3
 8004c52:	e006      	b.n	8004c62 <HAL_GPIO_Init+0x1e2>
 8004c54:	2305      	movs	r3, #5
 8004c56:	e004      	b.n	8004c62 <HAL_GPIO_Init+0x1e2>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e002      	b.n	8004c62 <HAL_GPIO_Init+0x1e2>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_GPIO_Init+0x1e2>
 8004c60:	2300      	movs	r3, #0
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	f002 0203 	and.w	r2, r2, #3
 8004c68:	0092      	lsls	r2, r2, #2
 8004c6a:	4093      	lsls	r3, r2
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c72:	4937      	ldr	r1, [pc, #220]	; (8004d50 <HAL_GPIO_Init+0x2d0>)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	3302      	adds	r3, #2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c80:	4b37      	ldr	r3, [pc, #220]	; (8004d60 <HAL_GPIO_Init+0x2e0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ca4:	4a2e      	ldr	r2, [pc, #184]	; (8004d60 <HAL_GPIO_Init+0x2e0>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004caa:	4b2d      	ldr	r3, [pc, #180]	; (8004d60 <HAL_GPIO_Init+0x2e0>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004cce:	4a24      	ldr	r2, [pc, #144]	; (8004d60 <HAL_GPIO_Init+0x2e0>)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cd4:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <HAL_GPIO_Init+0x2e0>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004cf8:	4a19      	ldr	r2, [pc, #100]	; (8004d60 <HAL_GPIO_Init+0x2e0>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cfe:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <HAL_GPIO_Init+0x2e0>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d22:	4a0f      	ldr	r2, [pc, #60]	; (8004d60 <HAL_GPIO_Init+0x2e0>)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f47f aea9 	bne.w	8004a90 <HAL_GPIO_Init+0x10>
  }
}
 8004d3e:	bf00      	nop
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40010000 	.word	0x40010000
 8004d54:	48000400 	.word	0x48000400
 8004d58:	48000800 	.word	0x48000800
 8004d5c:	48000c00 	.word	0x48000c00
 8004d60:	40010400 	.word	0x40010400

08004d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	e001      	b.n	8004d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	807b      	strh	r3, [r7, #2]
 8004da0:	4613      	mov	r3, r2
 8004da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004da4:	787b      	ldrb	r3, [r7, #1]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004db0:	e002      	b.n	8004db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dd4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f001 b823 	b.w	8005e30 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 817d 	beq.w	80050fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004e00:	4bbc      	ldr	r3, [pc, #752]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d00c      	beq.n	8004e26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e0c:	4bb9      	ldr	r3, [pc, #740]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d15c      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x10e>
 8004e18:	4bb6      	ldr	r3, [pc, #728]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e24:	d155      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x10e>
 8004e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3e:	fab3 f383 	clz	r3, r3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d102      	bne.n	8004e58 <HAL_RCC_OscConfig+0x94>
 8004e52:	4ba8      	ldr	r3, [pc, #672]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	e015      	b.n	8004e84 <HAL_RCC_OscConfig+0xc0>
 8004e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004e74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004e80:	4b9c      	ldr	r3, [pc, #624]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004e8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004e90:	fa92 f2a2 	rbit	r2, r2
 8004e94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004e98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004e9c:	fab2 f282 	clz	r2, r2
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	f042 0220 	orr.w	r2, r2, #32
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	f002 021f 	and.w	r2, r2, #31
 8004eac:	2101      	movs	r1, #1
 8004eae:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 811f 	beq.w	80050f8 <HAL_RCC_OscConfig+0x334>
 8004eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 8116 	bne.w	80050f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f000 bfaf 	b.w	8005e30 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x12e>
 8004ee4:	4b83      	ldr	r3, [pc, #524]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a82      	ldr	r2, [pc, #520]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e036      	b.n	8004f60 <HAL_RCC_OscConfig+0x19c>
 8004ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x158>
 8004f02:	4b7c      	ldr	r3, [pc, #496]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7b      	ldr	r2, [pc, #492]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b79      	ldr	r3, [pc, #484]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a78      	ldr	r2, [pc, #480]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e021      	b.n	8004f60 <HAL_RCC_OscConfig+0x19c>
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x184>
 8004f2e:	4b71      	ldr	r3, [pc, #452]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a70      	ldr	r2, [pc, #448]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4b6e      	ldr	r3, [pc, #440]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a6d      	ldr	r2, [pc, #436]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	e00b      	b.n	8004f60 <HAL_RCC_OscConfig+0x19c>
 8004f48:	4b6a      	ldr	r3, [pc, #424]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a69      	ldr	r2, [pc, #420]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4b67      	ldr	r3, [pc, #412]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a66      	ldr	r2, [pc, #408]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f60:	4b64      	ldr	r3, [pc, #400]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f023 020f 	bic.w	r2, r3, #15
 8004f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	495f      	ldr	r1, [pc, #380]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d059      	beq.n	800503e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f7fe fb3f 	bl	800360c <HAL_GetTick>
 8004f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f94:	f7fe fb3a 	bl	800360c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b64      	cmp	r3, #100	; 0x64
 8004fa2:	d902      	bls.n	8004faa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	f000 bf43 	b.w	8005e30 <HAL_RCC_OscConfig+0x106c>
 8004faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004fb6:	fa93 f3a3 	rbit	r3, r3
 8004fba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004fbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d102      	bne.n	8004fdc <HAL_RCC_OscConfig+0x218>
 8004fd6:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	e015      	b.n	8005008 <HAL_RCC_OscConfig+0x244>
 8004fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fe0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004fe8:	fa93 f3a3 	rbit	r3, r3
 8004fec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ff4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004ff8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004ffc:	fa93 f3a3 	rbit	r3, r3
 8005000:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005004:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800500c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005010:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005014:	fa92 f2a2 	rbit	r2, r2
 8005018:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800501c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005020:	fab2 f282 	clz	r2, r2
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	f042 0220 	orr.w	r2, r2, #32
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	f002 021f 	and.w	r2, r2, #31
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f202 	lsl.w	r2, r1, r2
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0ab      	beq.n	8004f94 <HAL_RCC_OscConfig+0x1d0>
 800503c:	e05d      	b.n	80050fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503e:	f7fe fae5 	bl	800360c <HAL_GetTick>
 8005042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005046:	e00a      	b.n	800505e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005048:	f7fe fae0 	bl	800360c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b64      	cmp	r3, #100	; 0x64
 8005056:	d902      	bls.n	800505e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	f000 bee9 	b.w	8005e30 <HAL_RCC_OscConfig+0x106c>
 800505e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005062:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005066:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800506a:	fa93 f3a3 	rbit	r3, r3
 800506e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005072:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b01      	cmp	r3, #1
 8005088:	d102      	bne.n	8005090 <HAL_RCC_OscConfig+0x2cc>
 800508a:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	e015      	b.n	80050bc <HAL_RCC_OscConfig+0x2f8>
 8005090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005094:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005098:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800509c:	fa93 f3a3 	rbit	r3, r3
 80050a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80050a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80050ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80050b0:	fa93 f3a3 	rbit	r3, r3
 80050b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80050b8:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <HAL_RCC_OscConfig+0x330>)
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80050c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80050c8:	fa92 f2a2 	rbit	r2, r2
 80050cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80050d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80050d4:	fab2 f282 	clz	r2, r2
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	f042 0220 	orr.w	r2, r2, #32
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	f002 021f 	and.w	r2, r2, #31
 80050e4:	2101      	movs	r1, #1
 80050e6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1ab      	bne.n	8005048 <HAL_RCC_OscConfig+0x284>
 80050f0:	e003      	b.n	80050fa <HAL_RCC_OscConfig+0x336>
 80050f2:	bf00      	nop
 80050f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 817d 	beq.w	800540a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005110:	4ba6      	ldr	r3, [pc, #664]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800511c:	4ba3      	ldr	r3, [pc, #652]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 030c 	and.w	r3, r3, #12
 8005124:	2b08      	cmp	r3, #8
 8005126:	d172      	bne.n	800520e <HAL_RCC_OscConfig+0x44a>
 8005128:	4ba0      	ldr	r3, [pc, #640]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d16c      	bne.n	800520e <HAL_RCC_OscConfig+0x44a>
 8005134:	2302      	movs	r3, #2
 8005136:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800513e:	fa93 f3a3 	rbit	r3, r3
 8005142:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005146:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d102      	bne.n	8005164 <HAL_RCC_OscConfig+0x3a0>
 800515e:	4b93      	ldr	r3, [pc, #588]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	e013      	b.n	800518c <HAL_RCC_OscConfig+0x3c8>
 8005164:	2302      	movs	r3, #2
 8005166:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800516e:	fa93 f3a3 	rbit	r3, r3
 8005172:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005176:	2302      	movs	r3, #2
 8005178:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800517c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005188:	4b88      	ldr	r3, [pc, #544]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2202      	movs	r2, #2
 800518e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005192:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005196:	fa92 f2a2 	rbit	r2, r2
 800519a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800519e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80051a2:	fab2 f282 	clz	r2, r2
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	f042 0220 	orr.w	r2, r2, #32
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	f002 021f 	and.w	r2, r2, #31
 80051b2:	2101      	movs	r1, #1
 80051b4:	fa01 f202 	lsl.w	r2, r1, r2
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCC_OscConfig+0x410>
 80051be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d002      	beq.n	80051d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f000 be2e 	b.w	8005e30 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b75      	ldr	r3, [pc, #468]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	21f8      	movs	r1, #248	; 0xf8
 80051ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80051f2:	fa91 f1a1 	rbit	r1, r1
 80051f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80051fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80051fe:	fab1 f181 	clz	r1, r1
 8005202:	b2c9      	uxtb	r1, r1
 8005204:	408b      	lsls	r3, r1
 8005206:	4969      	ldr	r1, [pc, #420]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 8005208:	4313      	orrs	r3, r2
 800520a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520c:	e0fd      	b.n	800540a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800520e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8088 	beq.w	8005330 <HAL_RCC_OscConfig+0x56c>
 8005220:	2301      	movs	r3, #1
 8005222:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005232:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005240:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	461a      	mov	r2, r3
 8005248:	2301      	movs	r3, #1
 800524a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fe f9de 	bl	800360c <HAL_GetTick>
 8005250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005254:	e00a      	b.n	800526c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005256:	f7fe f9d9 	bl	800360c <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d902      	bls.n	800526c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	f000 bde2 	b.w	8005e30 <HAL_RCC_OscConfig+0x106c>
 800526c:	2302      	movs	r3, #2
 800526e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005276:	fa93 f3a3 	rbit	r3, r3
 800527a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800527e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005282:	fab3 f383 	clz	r3, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d102      	bne.n	800529c <HAL_RCC_OscConfig+0x4d8>
 8005296:	4b45      	ldr	r3, [pc, #276]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	e013      	b.n	80052c4 <HAL_RCC_OscConfig+0x500>
 800529c:	2302      	movs	r3, #2
 800529e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80052ae:	2302      	movs	r3, #2
 80052b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80052b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80052b8:	fa93 f3a3 	rbit	r3, r3
 80052bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80052c0:	4b3a      	ldr	r3, [pc, #232]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2202      	movs	r2, #2
 80052c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80052ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80052ce:	fa92 f2a2 	rbit	r2, r2
 80052d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80052d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80052da:	fab2 f282 	clz	r2, r2
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	f042 0220 	orr.w	r2, r2, #32
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	f002 021f 	and.w	r2, r2, #31
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f202 	lsl.w	r2, r1, r2
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0af      	beq.n	8005256 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f6:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	21f8      	movs	r1, #248	; 0xf8
 800530c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005314:	fa91 f1a1 	rbit	r1, r1
 8005318:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800531c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005320:	fab1 f181 	clz	r1, r1
 8005324:	b2c9      	uxtb	r1, r1
 8005326:	408b      	lsls	r3, r1
 8005328:	4920      	ldr	r1, [pc, #128]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 800532a:	4313      	orrs	r3, r2
 800532c:	600b      	str	r3, [r1, #0]
 800532e:	e06c      	b.n	800540a <HAL_RCC_OscConfig+0x646>
 8005330:	2301      	movs	r3, #1
 8005332:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800533a:	fa93 f3a3 	rbit	r3, r3
 800533e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005350:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fe f956 	bl	800360c <HAL_GetTick>
 8005360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005364:	e00a      	b.n	800537c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005366:	f7fe f951 	bl	800360c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d902      	bls.n	800537c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	f000 bd5a 	b.w	8005e30 <HAL_RCC_OscConfig+0x106c>
 800537c:	2302      	movs	r3, #2
 800537e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005386:	fa93 f3a3 	rbit	r3, r3
 800538a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800538e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d104      	bne.n	80053b0 <HAL_RCC_OscConfig+0x5ec>
 80053a6:	4b01      	ldr	r3, [pc, #4]	; (80053ac <HAL_RCC_OscConfig+0x5e8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	e015      	b.n	80053d8 <HAL_RCC_OscConfig+0x614>
 80053ac:	40021000 	.word	0x40021000
 80053b0:	2302      	movs	r3, #2
 80053b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053ba:	fa93 f3a3 	rbit	r3, r3
 80053be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053c2:	2302      	movs	r3, #2
 80053c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053cc:	fa93 f3a3 	rbit	r3, r3
 80053d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053d4:	4bc8      	ldr	r3, [pc, #800]	; (80056f8 <HAL_RCC_OscConfig+0x934>)
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2202      	movs	r2, #2
 80053da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80053de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80053e2:	fa92 f2a2 	rbit	r2, r2
 80053e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80053ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80053ee:	fab2 f282 	clz	r2, r2
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	f042 0220 	orr.w	r2, r2, #32
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	f002 021f 	and.w	r2, r2, #31
 80053fe:	2101      	movs	r1, #1
 8005400:	fa01 f202 	lsl.w	r2, r1, r2
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ad      	bne.n	8005366 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800540a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 8110 	beq.w	8005640 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005424:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d079      	beq.n	8005524 <HAL_RCC_OscConfig+0x760>
 8005430:	2301      	movs	r3, #1
 8005432:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800543a:	fa93 f3a3 	rbit	r3, r3
 800543e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005446:	fab3 f383 	clz	r3, r3
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	4bab      	ldr	r3, [pc, #684]	; (80056fc <HAL_RCC_OscConfig+0x938>)
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	461a      	mov	r2, r3
 8005456:	2301      	movs	r3, #1
 8005458:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800545a:	f7fe f8d7 	bl	800360c <HAL_GetTick>
 800545e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005462:	e00a      	b.n	800547a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005464:	f7fe f8d2 	bl	800360c <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d902      	bls.n	800547a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	f000 bcdb 	b.w	8005e30 <HAL_RCC_OscConfig+0x106c>
 800547a:	2302      	movs	r3, #2
 800547c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005480:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005484:	fa93 f3a3 	rbit	r3, r3
 8005488:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800548c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005490:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005494:	2202      	movs	r2, #2
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	fa93 f2a3 	rbit	r2, r3
 80054a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b8:	2202      	movs	r2, #2
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	fa93 f2a3 	rbit	r2, r3
 80054ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d4:	4b88      	ldr	r3, [pc, #544]	; (80056f8 <HAL_RCC_OscConfig+0x934>)
 80054d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054e0:	2102      	movs	r1, #2
 80054e2:	6019      	str	r1, [r3, #0]
 80054e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	fa93 f1a3 	rbit	r1, r3
 80054f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054fa:	6019      	str	r1, [r3, #0]
  return result;
 80054fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005500:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	fab3 f383 	clz	r3, r3
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2101      	movs	r1, #1
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0a0      	beq.n	8005464 <HAL_RCC_OscConfig+0x6a0>
 8005522:	e08d      	b.n	8005640 <HAL_RCC_OscConfig+0x87c>
 8005524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005528:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800552c:	2201      	movs	r2, #1
 800552e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005534:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	fa93 f2a3 	rbit	r2, r3
 800553e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005542:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005546:	601a      	str	r2, [r3, #0]
  return result;
 8005548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005550:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005552:	fab3 f383 	clz	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	4b68      	ldr	r3, [pc, #416]	; (80056fc <HAL_RCC_OscConfig+0x938>)
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	461a      	mov	r2, r3
 8005562:	2300      	movs	r3, #0
 8005564:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005566:	f7fe f851 	bl	800360c <HAL_GetTick>
 800556a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556e:	e00a      	b.n	8005586 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005570:	f7fe f84c 	bl	800360c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d902      	bls.n	8005586 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	f000 bc55 	b.w	8005e30 <HAL_RCC_OscConfig+0x106c>
 8005586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800558e:	2202      	movs	r2, #2
 8005590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005596:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	fa93 f2a3 	rbit	r2, r3
 80055a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055b2:	2202      	movs	r2, #2
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	fa93 f2a3 	rbit	r2, r3
 80055c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d6:	2202      	movs	r2, #2
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	fa93 f2a3 	rbit	r2, r3
 80055e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f2:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <HAL_RCC_OscConfig+0x934>)
 80055f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80055fe:	2102      	movs	r1, #2
 8005600:	6019      	str	r1, [r3, #0]
 8005602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005606:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	fa93 f1a3 	rbit	r1, r3
 8005610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005614:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005618:	6019      	str	r1, [r3, #0]
  return result;
 800561a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	fab3 f383 	clz	r3, r3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800562e:	b2db      	uxtb	r3, r3
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2101      	movs	r1, #1
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d197      	bne.n	8005570 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 81a1 	beq.w	8005998 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005656:	2300      	movs	r3, #0
 8005658:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565c:	4b26      	ldr	r3, [pc, #152]	; (80056f8 <HAL_RCC_OscConfig+0x934>)
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d116      	bne.n	8005696 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005668:	4b23      	ldr	r3, [pc, #140]	; (80056f8 <HAL_RCC_OscConfig+0x934>)
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	4a22      	ldr	r2, [pc, #136]	; (80056f8 <HAL_RCC_OscConfig+0x934>)
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	61d3      	str	r3, [r2, #28]
 8005674:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <HAL_RCC_OscConfig+0x934>)
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800567c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005680:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800568e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005696:	4b1a      	ldr	r3, [pc, #104]	; (8005700 <HAL_RCC_OscConfig+0x93c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d11a      	bne.n	80056d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056a2:	4b17      	ldr	r3, [pc, #92]	; (8005700 <HAL_RCC_OscConfig+0x93c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a16      	ldr	r2, [pc, #88]	; (8005700 <HAL_RCC_OscConfig+0x93c>)
 80056a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ae:	f7fd ffad 	bl	800360c <HAL_GetTick>
 80056b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b6:	e009      	b.n	80056cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b8:	f7fd ffa8 	bl	800360c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b64      	cmp	r3, #100	; 0x64
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e3b1      	b.n	8005e30 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <HAL_RCC_OscConfig+0x93c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ef      	beq.n	80056b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d10d      	bne.n	8005704 <HAL_RCC_OscConfig+0x940>
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <HAL_RCC_OscConfig+0x934>)
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	4a02      	ldr	r2, [pc, #8]	; (80056f8 <HAL_RCC_OscConfig+0x934>)
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	6213      	str	r3, [r2, #32]
 80056f4:	e03c      	b.n	8005770 <HAL_RCC_OscConfig+0x9ac>
 80056f6:	bf00      	nop
 80056f8:	40021000 	.word	0x40021000
 80056fc:	10908120 	.word	0x10908120
 8005700:	40007000 	.word	0x40007000
 8005704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10c      	bne.n	800572e <HAL_RCC_OscConfig+0x96a>
 8005714:	4bc1      	ldr	r3, [pc, #772]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	4ac0      	ldr	r2, [pc, #768]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	6213      	str	r3, [r2, #32]
 8005720:	4bbe      	ldr	r3, [pc, #760]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	4abd      	ldr	r2, [pc, #756]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005726:	f023 0304 	bic.w	r3, r3, #4
 800572a:	6213      	str	r3, [r2, #32]
 800572c:	e020      	b.n	8005770 <HAL_RCC_OscConfig+0x9ac>
 800572e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b05      	cmp	r3, #5
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0x994>
 800573e:	4bb7      	ldr	r3, [pc, #732]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	4ab6      	ldr	r2, [pc, #728]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005744:	f043 0304 	orr.w	r3, r3, #4
 8005748:	6213      	str	r3, [r2, #32]
 800574a:	4bb4      	ldr	r3, [pc, #720]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	4ab3      	ldr	r2, [pc, #716]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6213      	str	r3, [r2, #32]
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0x9ac>
 8005758:	4bb0      	ldr	r3, [pc, #704]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	4aaf      	ldr	r2, [pc, #700]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	6213      	str	r3, [r2, #32]
 8005764:	4bad      	ldr	r3, [pc, #692]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	4aac      	ldr	r2, [pc, #688]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 800576a:	f023 0304 	bic.w	r3, r3, #4
 800576e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8081 	beq.w	8005884 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005782:	f7fd ff43 	bl	800360c <HAL_GetTick>
 8005786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578a:	e00b      	b.n	80057a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578c:	f7fd ff3e 	bl	800360c <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e345      	b.n	8005e30 <HAL_RCC_OscConfig+0x106c>
 80057a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80057ac:	2202      	movs	r2, #2
 80057ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	fa93 f2a3 	rbit	r2, r3
 80057be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80057d0:	2202      	movs	r2, #2
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	fa93 f2a3 	rbit	r2, r3
 80057e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057ea:	601a      	str	r2, [r3, #0]
  return result;
 80057ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d102      	bne.n	8005810 <HAL_RCC_OscConfig+0xa4c>
 800580a:	4b84      	ldr	r3, [pc, #528]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	e013      	b.n	8005838 <HAL_RCC_OscConfig+0xa74>
 8005810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005814:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005818:	2202      	movs	r2, #2
 800581a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005820:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	fa93 f2a3 	rbit	r2, r3
 800582a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	4b79      	ldr	r3, [pc, #484]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800583c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005840:	2102      	movs	r1, #2
 8005842:	6011      	str	r1, [r2, #0]
 8005844:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005848:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	fa92 f1a2 	rbit	r1, r2
 8005852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005856:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800585a:	6011      	str	r1, [r2, #0]
  return result;
 800585c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005860:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	fab2 f282 	clz	r2, r2
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	f002 021f 	and.w	r2, r2, #31
 8005876:	2101      	movs	r1, #1
 8005878:	fa01 f202 	lsl.w	r2, r1, r2
 800587c:	4013      	ands	r3, r2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d084      	beq.n	800578c <HAL_RCC_OscConfig+0x9c8>
 8005882:	e07f      	b.n	8005984 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005884:	f7fd fec2 	bl	800360c <HAL_GetTick>
 8005888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588c:	e00b      	b.n	80058a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fd febd 	bl	800360c <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f241 3288 	movw	r2, #5000	; 0x1388
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e2c4      	b.n	8005e30 <HAL_RCC_OscConfig+0x106c>
 80058a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80058ae:	2202      	movs	r2, #2
 80058b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	fa93 f2a3 	rbit	r2, r3
 80058c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80058d2:	2202      	movs	r2, #2
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	fa93 f2a3 	rbit	r2, r3
 80058e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058ec:	601a      	str	r2, [r3, #0]
  return result;
 80058ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f8:	fab3 f383 	clz	r3, r3
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f043 0302 	orr.w	r3, r3, #2
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d102      	bne.n	8005912 <HAL_RCC_OscConfig+0xb4e>
 800590c:	4b43      	ldr	r3, [pc, #268]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	e013      	b.n	800593a <HAL_RCC_OscConfig+0xb76>
 8005912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005916:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800591a:	2202      	movs	r2, #2
 800591c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005922:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	fa93 f2a3 	rbit	r2, r3
 800592c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005930:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	4b39      	ldr	r3, [pc, #228]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800593e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005942:	2102      	movs	r1, #2
 8005944:	6011      	str	r1, [r2, #0]
 8005946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800594a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	fa92 f1a2 	rbit	r1, r2
 8005954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005958:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800595c:	6011      	str	r1, [r2, #0]
  return result;
 800595e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005962:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	fab2 f282 	clz	r2, r2
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	f002 021f 	and.w	r2, r2, #31
 8005978:	2101      	movs	r1, #1
 800597a:	fa01 f202 	lsl.w	r2, r1, r2
 800597e:	4013      	ands	r3, r2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d184      	bne.n	800588e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005984:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005988:	2b01      	cmp	r3, #1
 800598a:	d105      	bne.n	8005998 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598c:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	4a22      	ldr	r2, [pc, #136]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 8005992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005996:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800599c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8242 	beq.w	8005e2e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059aa:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <HAL_RCC_OscConfig+0xc58>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 030c 	and.w	r3, r3, #12
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	f000 8213 	beq.w	8005dde <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f040 8162 	bne.w	8005c8e <HAL_RCC_OscConfig+0xeca>
 80059ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80059d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	fa93 f2a3 	rbit	r2, r3
 80059e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059ee:	601a      	str	r2, [r3, #0]
  return result;
 80059f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fa:	fab3 f383 	clz	r3, r3
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fd fdfc 	bl	800360c <HAL_GetTick>
 8005a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a18:	e00c      	b.n	8005a34 <HAL_RCC_OscConfig+0xc70>
 8005a1a:	bf00      	nop
 8005a1c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a20:	f7fd fdf4 	bl	800360c <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e1fd      	b.n	8005e30 <HAL_RCC_OscConfig+0x106c>
 8005a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	fa93 f2a3 	rbit	r2, r3
 8005a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a58:	601a      	str	r2, [r3, #0]
  return result;
 8005a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a64:	fab3 f383 	clz	r3, r3
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d102      	bne.n	8005a7e <HAL_RCC_OscConfig+0xcba>
 8005a78:	4bb0      	ldr	r3, [pc, #704]	; (8005d3c <HAL_RCC_OscConfig+0xf78>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	e027      	b.n	8005ace <HAL_RCC_OscConfig+0xd0a>
 8005a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	fa93 f2a3 	rbit	r2, r3
 8005a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	fa93 f2a3 	rbit	r2, r3
 8005ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	4b9c      	ldr	r3, [pc, #624]	; (8005d3c <HAL_RCC_OscConfig+0xf78>)
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ad2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005ad6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ada:	6011      	str	r1, [r2, #0]
 8005adc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ae0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	fa92 f1a2 	rbit	r1, r2
 8005aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005af2:	6011      	str	r1, [r2, #0]
  return result;
 8005af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005af8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	fab2 f282 	clz	r2, r2
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	f042 0220 	orr.w	r2, r2, #32
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	f002 021f 	and.w	r2, r2, #31
 8005b0e:	2101      	movs	r1, #1
 8005b10:	fa01 f202 	lsl.w	r2, r1, r2
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d182      	bne.n	8005a20 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b1a:	4b88      	ldr	r3, [pc, #544]	; (8005d3c <HAL_RCC_OscConfig+0xf78>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	497f      	ldr	r1, [pc, #508]	; (8005d3c <HAL_RCC_OscConfig+0xf78>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	604b      	str	r3, [r1, #4]
 8005b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005b4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	fa93 f2a3 	rbit	r2, r3
 8005b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b66:	601a      	str	r2, [r3, #0]
  return result;
 8005b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b72:	fab3 f383 	clz	r3, r3
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	461a      	mov	r2, r3
 8005b84:	2301      	movs	r3, #1
 8005b86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b88:	f7fd fd40 	bl	800360c <HAL_GetTick>
 8005b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b90:	e009      	b.n	8005ba6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b92:	f7fd fd3b 	bl	800360c <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e144      	b.n	8005e30 <HAL_RCC_OscConfig+0x106c>
 8005ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005baa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005bae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	fa93 f2a3 	rbit	r2, r3
 8005bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005bca:	601a      	str	r2, [r3, #0]
  return result;
 8005bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005bd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd6:	fab3 f383 	clz	r3, r3
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d102      	bne.n	8005bf0 <HAL_RCC_OscConfig+0xe2c>
 8005bea:	4b54      	ldr	r3, [pc, #336]	; (8005d3c <HAL_RCC_OscConfig+0xf78>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	e027      	b.n	8005c40 <HAL_RCC_OscConfig+0xe7c>
 8005bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	fa93 f2a3 	rbit	r2, r3
 8005c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	fa93 f2a3 	rbit	r2, r3
 8005c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <HAL_RCC_OscConfig+0xf78>)
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c44:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005c48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c52:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	fa92 f1a2 	rbit	r1, r2
 8005c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c64:	6011      	str	r1, [r2, #0]
  return result;
 8005c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	fab2 f282 	clz	r2, r2
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	f042 0220 	orr.w	r2, r2, #32
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	f002 021f 	and.w	r2, r2, #31
 8005c80:	2101      	movs	r1, #1
 8005c82:	fa01 f202 	lsl.w	r2, r1, r2
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d082      	beq.n	8005b92 <HAL_RCC_OscConfig+0xdce>
 8005c8c:	e0cf      	b.n	8005e2e <HAL_RCC_OscConfig+0x106a>
 8005c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	fa93 f2a3 	rbit	r2, r3
 8005caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005cb2:	601a      	str	r2, [r3, #0]
  return result;
 8005cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005cbc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cbe:	fab3 f383 	clz	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005cc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	461a      	mov	r2, r3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd4:	f7fd fc9a 	bl	800360c <HAL_GetTick>
 8005cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cdc:	e009      	b.n	8005cf2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cde:	f7fd fc95 	bl	800360c <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e09e      	b.n	8005e30 <HAL_RCC_OscConfig+0x106c>
 8005cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cf6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	fa93 f2a3 	rbit	r2, r3
 8005d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d16:	601a      	str	r2, [r3, #0]
  return result;
 8005d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d22:	fab3 f383 	clz	r3, r3
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d104      	bne.n	8005d40 <HAL_RCC_OscConfig+0xf7c>
 8005d36:	4b01      	ldr	r3, [pc, #4]	; (8005d3c <HAL_RCC_OscConfig+0xf78>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	e029      	b.n	8005d90 <HAL_RCC_OscConfig+0xfcc>
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	fa93 f2a3 	rbit	r2, r3
 8005d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	fa93 f2a3 	rbit	r2, r3
 8005d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <HAL_RCC_OscConfig+0x1078>)
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d94:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005d98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005da2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	fa92 f1a2 	rbit	r1, r2
 8005dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005db0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005db4:	6011      	str	r1, [r2, #0]
  return result;
 8005db6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	fab2 f282 	clz	r2, r2
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	f042 0220 	orr.w	r2, r2, #32
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	f002 021f 	and.w	r2, r2, #31
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d180      	bne.n	8005cde <HAL_RCC_OscConfig+0xf1a>
 8005ddc:	e027      	b.n	8005e2e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e01e      	b.n	8005e30 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005df2:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <HAL_RCC_OscConfig+0x1078>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005dfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005dfe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d10b      	bne.n	8005e2a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005e12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005e16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d001      	beq.n	8005e2e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40021000 	.word	0x40021000

08005e40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b09e      	sub	sp, #120	; 0x78
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e162      	b.n	800611e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e58:	4b90      	ldr	r3, [pc, #576]	; (800609c <HAL_RCC_ClockConfig+0x25c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d910      	bls.n	8005e88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	4b8d      	ldr	r3, [pc, #564]	; (800609c <HAL_RCC_ClockConfig+0x25c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 0207 	bic.w	r2, r3, #7
 8005e6e:	498b      	ldr	r1, [pc, #556]	; (800609c <HAL_RCC_ClockConfig+0x25c>)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e76:	4b89      	ldr	r3, [pc, #548]	; (800609c <HAL_RCC_ClockConfig+0x25c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e14a      	b.n	800611e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e94:	4b82      	ldr	r3, [pc, #520]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	497f      	ldr	r1, [pc, #508]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80dc 	beq.w	800606c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d13c      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xf6>
 8005ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ec0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ec4:	fa93 f3a3 	rbit	r3, r3
 8005ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ecc:	fab3 f383 	clz	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d102      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xa6>
 8005ee0:	4b6f      	ldr	r3, [pc, #444]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	e00f      	b.n	8005f06 <HAL_RCC_ClockConfig+0xc6>
 8005ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005eea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eee:	fa93 f3a3 	rbit	r3, r3
 8005ef2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8005efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005efc:	fa93 f3a3 	rbit	r3, r3
 8005f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f02:	4b67      	ldr	r3, [pc, #412]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f0e:	fa92 f2a2 	rbit	r2, r2
 8005f12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f16:	fab2 f282 	clz	r2, r2
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	f042 0220 	orr.w	r2, r2, #32
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	f002 021f 	and.w	r2, r2, #31
 8005f26:	2101      	movs	r1, #1
 8005f28:	fa01 f202 	lsl.w	r2, r1, r2
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d17b      	bne.n	800602a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0f3      	b.n	800611e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d13c      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x178>
 8005f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f46:	fa93 f3a3 	rbit	r3, r3
 8005f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4e:	fab3 f383 	clz	r3, r3
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d102      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x128>
 8005f62:	4b4f      	ldr	r3, [pc, #316]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	e00f      	b.n	8005f88 <HAL_RCC_ClockConfig+0x148>
 8005f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f70:	fa93 f3a3 	rbit	r3, r3
 8005f74:	647b      	str	r3, [r7, #68]	; 0x44
 8005f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7e:	fa93 f3a3 	rbit	r3, r3
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f84:	4b46      	ldr	r3, [pc, #280]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f90:	fa92 f2a2 	rbit	r2, r2
 8005f94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f98:	fab2 f282 	clz	r2, r2
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	f042 0220 	orr.w	r2, r2, #32
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	f002 021f 	and.w	r2, r2, #31
 8005fa8:	2101      	movs	r1, #1
 8005faa:	fa01 f202 	lsl.w	r2, r1, r2
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d13a      	bne.n	800602a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0b2      	b.n	800611e <HAL_RCC_ClockConfig+0x2de>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	fa93 f3a3 	rbit	r3, r3
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc6:	fab3 f383 	clz	r3, r3
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d102      	bne.n	8005fe0 <HAL_RCC_ClockConfig+0x1a0>
 8005fda:	4b31      	ldr	r3, [pc, #196]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	e00d      	b.n	8005ffc <HAL_RCC_ClockConfig+0x1bc>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	fa93 f3a3 	rbit	r3, r3
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
 8005fec:	2302      	movs	r3, #2
 8005fee:	623b      	str	r3, [r7, #32]
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	fa93 f3a3 	rbit	r3, r3
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	4b29      	ldr	r3, [pc, #164]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	61ba      	str	r2, [r7, #24]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	fa92 f2a2 	rbit	r2, r2
 8006006:	617a      	str	r2, [r7, #20]
  return result;
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	fab2 f282 	clz	r2, r2
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	f042 0220 	orr.w	r2, r2, #32
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	f002 021f 	and.w	r2, r2, #31
 800601a:	2101      	movs	r1, #1
 800601c:	fa01 f202 	lsl.w	r2, r1, r2
 8006020:	4013      	ands	r3, r2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e079      	b.n	800611e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800602a:	4b1d      	ldr	r3, [pc, #116]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f023 0203 	bic.w	r2, r3, #3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	491a      	ldr	r1, [pc, #104]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8006038:	4313      	orrs	r3, r2
 800603a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800603c:	f7fd fae6 	bl	800360c <HAL_GetTick>
 8006040:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006042:	e00a      	b.n	800605a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006044:	f7fd fae2 	bl	800360c <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006052:	4293      	cmp	r3, r2
 8006054:	d901      	bls.n	800605a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e061      	b.n	800611e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	4b11      	ldr	r3, [pc, #68]	; (80060a0 <HAL_RCC_ClockConfig+0x260>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 020c 	and.w	r2, r3, #12
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	429a      	cmp	r2, r3
 800606a:	d1eb      	bne.n	8006044 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_RCC_ClockConfig+0x25c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d214      	bcs.n	80060a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <HAL_RCC_ClockConfig+0x25c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f023 0207 	bic.w	r2, r3, #7
 8006082:	4906      	ldr	r1, [pc, #24]	; (800609c <HAL_RCC_ClockConfig+0x25c>)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	4313      	orrs	r3, r2
 8006088:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800608a:	4b04      	ldr	r3, [pc, #16]	; (800609c <HAL_RCC_ClockConfig+0x25c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d005      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e040      	b.n	800611e <HAL_RCC_ClockConfig+0x2de>
 800609c:	40022000 	.word	0x40022000
 80060a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060b0:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <HAL_RCC_ClockConfig+0x2e8>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	491a      	ldr	r1, [pc, #104]	; (8006128 <HAL_RCC_ClockConfig+0x2e8>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <HAL_RCC_ClockConfig+0x2e8>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4912      	ldr	r1, [pc, #72]	; (8006128 <HAL_RCC_ClockConfig+0x2e8>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80060e2:	f000 f829 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 80060e6:	4601      	mov	r1, r0
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <HAL_RCC_ClockConfig+0x2e8>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f0:	22f0      	movs	r2, #240	; 0xf0
 80060f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	fa92 f2a2 	rbit	r2, r2
 80060fa:	60fa      	str	r2, [r7, #12]
  return result;
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	fab2 f282 	clz	r2, r2
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	40d3      	lsrs	r3, r2
 8006106:	4a09      	ldr	r2, [pc, #36]	; (800612c <HAL_RCC_ClockConfig+0x2ec>)
 8006108:	5cd3      	ldrb	r3, [r2, r3]
 800610a:	fa21 f303 	lsr.w	r3, r1, r3
 800610e:	4a08      	ldr	r2, [pc, #32]	; (8006130 <HAL_RCC_ClockConfig+0x2f0>)
 8006110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <HAL_RCC_ClockConfig+0x2f4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd fa34 	bl	8003584 <HAL_InitTick>
  
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3778      	adds	r7, #120	; 0x78
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40021000 	.word	0x40021000
 800612c:	08009d60 	.word	0x08009d60
 8006130:	20000068 	.word	0x20000068
 8006134:	2000006c 	.word	0x2000006c

08006138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006138:	b480      	push	{r7}
 800613a:	b08b      	sub	sp, #44	; 0x2c
 800613c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	2300      	movs	r3, #0
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	2300      	movs	r3, #0
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006152:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b04      	cmp	r3, #4
 8006160:	d002      	beq.n	8006168 <HAL_RCC_GetSysClockFreq+0x30>
 8006162:	2b08      	cmp	r3, #8
 8006164:	d003      	beq.n	800616e <HAL_RCC_GetSysClockFreq+0x36>
 8006166:	e03c      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006168:	4b24      	ldr	r3, [pc, #144]	; (80061fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800616a:	623b      	str	r3, [r7, #32]
      break;
 800616c:	e03c      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006174:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006178:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	fa92 f2a2 	rbit	r2, r2
 8006180:	607a      	str	r2, [r7, #4]
  return result;
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	fab2 f282 	clz	r2, r2
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	40d3      	lsrs	r3, r2
 800618c:	4a1c      	ldr	r2, [pc, #112]	; (8006200 <HAL_RCC_GetSysClockFreq+0xc8>)
 800618e:	5cd3      	ldrb	r3, [r2, r3]
 8006190:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006192:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	220f      	movs	r2, #15
 800619c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	fa92 f2a2 	rbit	r2, r2
 80061a4:	60fa      	str	r2, [r7, #12]
  return result;
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	fab2 f282 	clz	r2, r2
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	40d3      	lsrs	r3, r2
 80061b0:	4a14      	ldr	r2, [pc, #80]	; (8006204 <HAL_RCC_GetSysClockFreq+0xcc>)
 80061b2:	5cd3      	ldrb	r3, [r2, r3]
 80061b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80061c0:	4a0e      	ldr	r2, [pc, #56]	; (80061fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
 80061d0:	e004      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	4a0c      	ldr	r2, [pc, #48]	; (8006208 <HAL_RCC_GetSysClockFreq+0xd0>)
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	623b      	str	r3, [r7, #32]
      break;
 80061e0:	e002      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061e2:	4b06      	ldr	r3, [pc, #24]	; (80061fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80061e4:	623b      	str	r3, [r7, #32]
      break;
 80061e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061e8:	6a3b      	ldr	r3, [r7, #32]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	372c      	adds	r7, #44	; 0x2c
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40021000 	.word	0x40021000
 80061fc:	007a1200 	.word	0x007a1200
 8006200:	08009d70 	.word	0x08009d70
 8006204:	08009d80 	.word	0x08009d80
 8006208:	003d0900 	.word	0x003d0900

0800620c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b092      	sub	sp, #72	; 0x48
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800621c:	2300      	movs	r3, #0
 800621e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80cd 	beq.w	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006230:	4b86      	ldr	r3, [pc, #536]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10e      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800623c:	4b83      	ldr	r3, [pc, #524]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4a82      	ldr	r2, [pc, #520]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006246:	61d3      	str	r3, [r2, #28]
 8006248:	4b80      	ldr	r3, [pc, #512]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625a:	4b7d      	ldr	r3, [pc, #500]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006262:	2b00      	cmp	r3, #0
 8006264:	d118      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006266:	4b7a      	ldr	r3, [pc, #488]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a79      	ldr	r2, [pc, #484]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800626c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006270:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006272:	f7fd f9cb 	bl	800360c <HAL_GetTick>
 8006276:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006278:	e008      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800627a:	f7fd f9c7 	bl	800360c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b64      	cmp	r3, #100	; 0x64
 8006286:	d901      	bls.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e0db      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800628c:	4b70      	ldr	r3, [pc, #448]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006298:	4b6c      	ldr	r3, [pc, #432]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d07d      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d076      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b6:	4b65      	ldr	r3, [pc, #404]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062c4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	fa93 f3a3 	rbit	r3, r3
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062d0:	fab3 f383 	clz	r3, r3
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	4b5e      	ldr	r3, [pc, #376]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	461a      	mov	r2, r3
 80062e0:	2301      	movs	r3, #1
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	fa93 f3a3 	rbit	r3, r3
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062f4:	fab3 f383 	clz	r3, r3
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	4b55      	ldr	r3, [pc, #340]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	461a      	mov	r2, r3
 8006304:	2300      	movs	r3, #0
 8006306:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006308:	4a50      	ldr	r2, [pc, #320]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800630a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d045      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006318:	f7fd f978 	bl	800360c <HAL_GetTick>
 800631c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631e:	e00a      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f7fd f974 	bl	800360c <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f241 3288 	movw	r2, #5000	; 0x1388
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e086      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8006336:	2302      	movs	r3, #2
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	fa93 f3a3 	rbit	r3, r3
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
 8006342:	2302      	movs	r3, #2
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	fa93 f3a3 	rbit	r3, r3
 800634c:	61fb      	str	r3, [r7, #28]
  return result;
 800634e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	b2db      	uxtb	r3, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f043 0302 	orr.w	r3, r3, #2
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d102      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006364:	4b39      	ldr	r3, [pc, #228]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	e007      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800636a:	2302      	movs	r3, #2
 800636c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	fa93 f3a3 	rbit	r3, r3
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	4b35      	ldr	r3, [pc, #212]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2202      	movs	r2, #2
 800637c:	613a      	str	r2, [r7, #16]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	fa92 f2a2 	rbit	r2, r2
 8006384:	60fa      	str	r2, [r7, #12]
  return result;
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	fab2 f282 	clz	r2, r2
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	f002 021f 	and.w	r2, r2, #31
 8006398:	2101      	movs	r1, #1
 800639a:	fa01 f202 	lsl.w	r2, r1, r2
 800639e:	4013      	ands	r3, r2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0bd      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80063a4:	4b29      	ldr	r3, [pc, #164]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	4926      	ldr	r1, [pc, #152]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d105      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063be:	4b23      	ldr	r3, [pc, #140]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	4a22      	ldr	r2, [pc, #136]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	f023 0203 	bic.w	r2, r3, #3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	491a      	ldr	r1, [pc, #104]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063f4:	4b15      	ldr	r3, [pc, #84]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	f023 0210 	bic.w	r2, r3, #16
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	4912      	ldr	r1, [pc, #72]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006402:	4313      	orrs	r3, r2
 8006404:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640e:	2b00      	cmp	r3, #0
 8006410:	d008      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006412:	4b0e      	ldr	r3, [pc, #56]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	490b      	ldr	r1, [pc, #44]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006420:	4313      	orrs	r3, r2
 8006422:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	4903      	ldr	r1, [pc, #12]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800643e:	4313      	orrs	r3, r2
 8006440:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3748      	adds	r7, #72	; 0x48
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	40021000 	.word	0x40021000
 8006450:	40007000 	.word	0x40007000
 8006454:	10908100 	.word	0x10908100

08006458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e095      	b.n	8006596 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	2b00      	cmp	r3, #0
 8006470:	d108      	bne.n	8006484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800647a:	d009      	beq.n	8006490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	61da      	str	r2, [r3, #28]
 8006482:	e005      	b.n	8006490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fc fe2e 	bl	800310c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064d0:	d902      	bls.n	80064d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e002      	b.n	80064de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064e6:	d007      	beq.n	80064f8 <HAL_SPI_Init+0xa0>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064f0:	d002      	beq.n	80064f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	ea42 0103 	orr.w	r1, r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	f003 0204 	and.w	r2, r3, #4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006574:	ea42 0103 	orr.w	r1, r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b088      	sub	sp, #32
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_SPI_Transmit+0x22>
 80065bc:	2302      	movs	r3, #2
 80065be:	e158      	b.n	8006872 <HAL_SPI_Transmit+0x2d4>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065c8:	f7fd f820 	bl	800360c <HAL_GetTick>
 80065cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d002      	beq.n	80065e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065de:	2302      	movs	r3, #2
 80065e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065e2:	e13d      	b.n	8006860 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_SPI_Transmit+0x52>
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065f4:	e134      	b.n	8006860 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2203      	movs	r2, #3
 80065fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	88fa      	ldrh	r2, [r7, #6]
 800660e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006640:	d10f      	bne.n	8006662 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006660:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d007      	beq.n	8006680 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006688:	d94b      	bls.n	8006722 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_SPI_Transmit+0xfa>
 8006692:	8afb      	ldrh	r3, [r7, #22]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d13e      	bne.n	8006716 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	881a      	ldrh	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066bc:	e02b      	b.n	8006716 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d112      	bne.n	80066f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	881a      	ldrh	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	1c9a      	adds	r2, r3, #2
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066f0:	e011      	b.n	8006716 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066f2:	f7fc ff8b 	bl	800360c <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d803      	bhi.n	800670a <HAL_SPI_Transmit+0x16c>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006708:	d102      	bne.n	8006710 <HAL_SPI_Transmit+0x172>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006714:	e0a4      	b.n	8006860 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1ce      	bne.n	80066be <HAL_SPI_Transmit+0x120>
 8006720:	e07c      	b.n	800681c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_SPI_Transmit+0x192>
 800672a:	8afb      	ldrh	r3, [r7, #22]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d170      	bne.n	8006812 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b01      	cmp	r3, #1
 8006738:	d912      	bls.n	8006760 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	881a      	ldrh	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	1c9a      	adds	r2, r3, #2
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b02      	subs	r3, #2
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800675e:	e058      	b.n	8006812 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	7812      	ldrb	r2, [r2, #0]
 800676c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006786:	e044      	b.n	8006812 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	d12b      	bne.n	80067ee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	d912      	bls.n	80067c6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	881a      	ldrh	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	1c9a      	adds	r2, r3, #2
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b02      	subs	r3, #2
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067c4:	e025      	b.n	8006812 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	330c      	adds	r3, #12
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067ec:	e011      	b.n	8006812 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ee:	f7fc ff0d 	bl	800360c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d803      	bhi.n	8006806 <HAL_SPI_Transmit+0x268>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006804:	d102      	bne.n	800680c <HAL_SPI_Transmit+0x26e>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006810:	e026      	b.n	8006860 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006816:	b29b      	uxth	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1b5      	bne.n	8006788 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f949 	bl	8006ab8 <SPI_EndRxTxTransaction>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10a      	bne.n	8006850 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800683a:	2300      	movs	r3, #0
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e000      	b.n	8006860 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800685e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006870:	7ffb      	ldrb	r3, [r7, #31]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	4613      	mov	r3, r2
 800688a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800688c:	f7fc febe 	bl	800360c <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	4413      	add	r3, r2
 800689a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800689c:	f7fc feb6 	bl	800360c <HAL_GetTick>
 80068a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068a2:	4b39      	ldr	r3, [pc, #228]	; (8006988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	015b      	lsls	r3, r3, #5
 80068a8:	0d1b      	lsrs	r3, r3, #20
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	fb02 f303 	mul.w	r3, r2, r3
 80068b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068b2:	e054      	b.n	800695e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	d050      	beq.n	800695e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068bc:	f7fc fea6 	bl	800360c <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d902      	bls.n	80068d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d13d      	bne.n	800694e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ea:	d111      	bne.n	8006910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f4:	d004      	beq.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fe:	d107      	bne.n	8006910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006918:	d10f      	bne.n	800693a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e017      	b.n	800697e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	3b01      	subs	r3, #1
 800695c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	429a      	cmp	r2, r3
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	429a      	cmp	r2, r3
 800697a:	d19b      	bne.n	80068b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000068 	.word	0x20000068

0800698c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	; 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800699e:	f7fc fe35 	bl	800360c <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	4413      	add	r3, r2
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80069ae:	f7fc fe2d 	bl	800360c <HAL_GetTick>
 80069b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069bc:	4b3d      	ldr	r3, [pc, #244]	; (8006ab4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	00da      	lsls	r2, r3, #3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	0d1b      	lsrs	r3, r3, #20
 80069cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069d4:	e060      	b.n	8006a98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069dc:	d107      	bne.n	80069ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d050      	beq.n	8006a98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069f6:	f7fc fe09 	bl	800360c <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d902      	bls.n	8006a0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d13d      	bne.n	8006a88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a24:	d111      	bne.n	8006a4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d004      	beq.n	8006a3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a38:	d107      	bne.n	8006a4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a52:	d10f      	bne.n	8006a74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e010      	b.n	8006aaa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d196      	bne.n	80069d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3728      	adds	r7, #40	; 0x28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000068 	.word	0x20000068

08006ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f7ff ff5b 	bl	800698c <SPI_WaitFifoStateUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae0:	f043 0220 	orr.w	r2, r3, #32
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e027      	b.n	8006b3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2200      	movs	r2, #0
 8006af4:	2180      	movs	r1, #128	; 0x80
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff fec0 	bl	800687c <SPI_WaitFlagStateUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d007      	beq.n	8006b12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b06:	f043 0220 	orr.w	r2, r3, #32
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e014      	b.n	8006b3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7ff ff34 	bl	800698c <SPI_WaitFifoStateUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2e:	f043 0220 	orr.w	r2, r3, #32
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e000      	b.n	8006b3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e049      	b.n	8006bea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fc fb2e 	bl	80031cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f000 fdd6 	bl	8007734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d001      	beq.n	8006c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e040      	b.n	8006c8e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0201 	orr.w	r2, r2, #1
 8006c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1c      	ldr	r2, [pc, #112]	; (8006c9c <HAL_TIM_Base_Start_IT+0xa8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x58>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c36:	d009      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x58>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xac>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x58>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a17      	ldr	r2, [pc, #92]	; (8006ca4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d115      	bne.n	8006c78 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d015      	beq.n	8006c8a <HAL_TIM_Base_Start_IT+0x96>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c64:	d011      	beq.n	8006c8a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c76:	e008      	b.n	8006c8a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e000      	b.n	8006c8c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40000400 	.word	0x40000400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	00010007 	.word	0x00010007

08006cac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e049      	b.n	8006d52 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f841 	bl	8006d5a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f000 fd22 	bl	8007734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <HAL_TIM_OC_Start+0x24>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	bf14      	ite	ne
 8006d8c:	2301      	movne	r3, #1
 8006d8e:	2300      	moveq	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	e03c      	b.n	8006e0e <HAL_TIM_OC_Start+0x9e>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d109      	bne.n	8006dae <HAL_TIM_OC_Start+0x3e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	bf14      	ite	ne
 8006da6:	2301      	movne	r3, #1
 8006da8:	2300      	moveq	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	e02f      	b.n	8006e0e <HAL_TIM_OC_Start+0x9e>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d109      	bne.n	8006dc8 <HAL_TIM_OC_Start+0x58>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	bf14      	ite	ne
 8006dc0:	2301      	movne	r3, #1
 8006dc2:	2300      	moveq	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	e022      	b.n	8006e0e <HAL_TIM_OC_Start+0x9e>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b0c      	cmp	r3, #12
 8006dcc:	d109      	bne.n	8006de2 <HAL_TIM_OC_Start+0x72>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	bf14      	ite	ne
 8006dda:	2301      	movne	r3, #1
 8006ddc:	2300      	moveq	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	e015      	b.n	8006e0e <HAL_TIM_OC_Start+0x9e>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	d109      	bne.n	8006dfc <HAL_TIM_OC_Start+0x8c>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	bf14      	ite	ne
 8006df4:	2301      	movne	r3, #1
 8006df6:	2300      	moveq	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	e008      	b.n	8006e0e <HAL_TIM_OC_Start+0x9e>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	bf14      	ite	ne
 8006e08:	2301      	movne	r3, #1
 8006e0a:	2300      	moveq	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e088      	b.n	8006f28 <HAL_TIM_OC_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <HAL_TIM_OC_Start+0xb6>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e24:	e023      	b.n	8006e6e <HAL_TIM_OC_Start+0xfe>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d104      	bne.n	8006e36 <HAL_TIM_OC_Start+0xc6>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e34:	e01b      	b.n	8006e6e <HAL_TIM_OC_Start+0xfe>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_OC_Start+0xd6>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e44:	e013      	b.n	8006e6e <HAL_TIM_OC_Start+0xfe>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b0c      	cmp	r3, #12
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_OC_Start+0xe6>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e54:	e00b      	b.n	8006e6e <HAL_TIM_OC_Start+0xfe>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b10      	cmp	r3, #16
 8006e5a:	d104      	bne.n	8006e66 <HAL_TIM_OC_Start+0xf6>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e64:	e003      	b.n	8006e6e <HAL_TIM_OC_Start+0xfe>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f814 	bl	8007ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a2b      	ldr	r2, [pc, #172]	; (8006f30 <HAL_TIM_OC_Start+0x1c0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00e      	beq.n	8006ea4 <HAL_TIM_OC_Start+0x134>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a2a      	ldr	r2, [pc, #168]	; (8006f34 <HAL_TIM_OC_Start+0x1c4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d009      	beq.n	8006ea4 <HAL_TIM_OC_Start+0x134>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a28      	ldr	r2, [pc, #160]	; (8006f38 <HAL_TIM_OC_Start+0x1c8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <HAL_TIM_OC_Start+0x134>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a27      	ldr	r2, [pc, #156]	; (8006f3c <HAL_TIM_OC_Start+0x1cc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIM_OC_Start+0x138>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e000      	b.n	8006eaa <HAL_TIM_OC_Start+0x13a>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <HAL_TIM_OC_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a1b      	ldr	r2, [pc, #108]	; (8006f30 <HAL_TIM_OC_Start+0x1c0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_TIM_OC_Start+0x176>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d009      	beq.n	8006ee6 <HAL_TIM_OC_Start+0x176>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1a      	ldr	r2, [pc, #104]	; (8006f40 <HAL_TIM_OC_Start+0x1d0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <HAL_TIM_OC_Start+0x176>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a14      	ldr	r2, [pc, #80]	; (8006f34 <HAL_TIM_OC_Start+0x1c4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d115      	bne.n	8006f12 <HAL_TIM_OC_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	4b15      	ldr	r3, [pc, #84]	; (8006f44 <HAL_TIM_OC_Start+0x1d4>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b06      	cmp	r3, #6
 8006ef6:	d015      	beq.n	8006f24 <HAL_TIM_OC_Start+0x1b4>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efe:	d011      	beq.n	8006f24 <HAL_TIM_OC_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0201 	orr.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f10:	e008      	b.n	8006f24 <HAL_TIM_OC_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0201 	orr.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	e000      	b.n	8006f26 <HAL_TIM_OC_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40012c00 	.word	0x40012c00
 8006f34:	40014000 	.word	0x40014000
 8006f38:	40014400 	.word	0x40014400
 8006f3c:	40014800 	.word	0x40014800
 8006f40:	40000400 	.word	0x40000400
 8006f44:	00010007 	.word	0x00010007

08006f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e049      	b.n	8006fee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7fc f966 	bl	8003240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f000 fbd4 	bl	8007734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b02      	cmp	r3, #2
 800700a:	d122      	bne.n	8007052 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b02      	cmp	r3, #2
 8007018:	d11b      	bne.n	8007052 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f06f 0202 	mvn.w	r2, #2
 8007022:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fb5c 	bl	80076f6 <HAL_TIM_IC_CaptureCallback>
 800703e:	e005      	b.n	800704c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fb4e 	bl	80076e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb5f 	bl	800770a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b04      	cmp	r3, #4
 800705e:	d122      	bne.n	80070a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b04      	cmp	r3, #4
 800706c:	d11b      	bne.n	80070a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f06f 0204 	mvn.w	r2, #4
 8007076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fb32 	bl	80076f6 <HAL_TIM_IC_CaptureCallback>
 8007092:	e005      	b.n	80070a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fb24 	bl	80076e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fb35 	bl	800770a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d122      	bne.n	80070fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0308 	and.w	r3, r3, #8
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d11b      	bne.n	80070fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f06f 0208 	mvn.w	r2, #8
 80070ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2204      	movs	r2, #4
 80070d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f003 0303 	and.w	r3, r3, #3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fb08 	bl	80076f6 <HAL_TIM_IC_CaptureCallback>
 80070e6:	e005      	b.n	80070f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fafa 	bl	80076e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fb0b 	bl	800770a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b10      	cmp	r3, #16
 8007106:	d122      	bne.n	800714e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f003 0310 	and.w	r3, r3, #16
 8007112:	2b10      	cmp	r3, #16
 8007114:	d11b      	bne.n	800714e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f06f 0210 	mvn.w	r2, #16
 800711e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2208      	movs	r2, #8
 8007124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fade 	bl	80076f6 <HAL_TIM_IC_CaptureCallback>
 800713a:	e005      	b.n	8007148 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fad0 	bl	80076e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fae1 	bl	800770a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b01      	cmp	r3, #1
 800715a:	d10e      	bne.n	800717a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b01      	cmp	r3, #1
 8007168:	d107      	bne.n	800717a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f06f 0201 	mvn.w	r2, #1
 8007172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fb ff4d 	bl	8003014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007184:	2b80      	cmp	r3, #128	; 0x80
 8007186:	d10e      	bne.n	80071a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007192:	2b80      	cmp	r3, #128	; 0x80
 8007194:	d107      	bne.n	80071a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800719e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 ff95 	bl	80080d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b4:	d10e      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c0:	2b80      	cmp	r3, #128	; 0x80
 80071c2:	d107      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 ff88 	bl	80080e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d10e      	bne.n	8007200 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b40      	cmp	r3, #64	; 0x40
 80071ee:	d107      	bne.n	8007200 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa8f 	bl	800771e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b20      	cmp	r3, #32
 800720c:	d10e      	bne.n	800722c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b20      	cmp	r3, #32
 800721a:	d107      	bne.n	800722c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0220 	mvn.w	r2, #32
 8007224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 ff48 	bl	80080bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_TIM_OC_ConfigChannel+0x1e>
 800724e:	2302      	movs	r3, #2
 8007250:	e066      	b.n	8007320 <HAL_TIM_OC_ConfigChannel+0xec>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b14      	cmp	r3, #20
 800725e:	d857      	bhi.n	8007310 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007260:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007266:	bf00      	nop
 8007268:	080072bd 	.word	0x080072bd
 800726c:	08007311 	.word	0x08007311
 8007270:	08007311 	.word	0x08007311
 8007274:	08007311 	.word	0x08007311
 8007278:	080072cb 	.word	0x080072cb
 800727c:	08007311 	.word	0x08007311
 8007280:	08007311 	.word	0x08007311
 8007284:	08007311 	.word	0x08007311
 8007288:	080072d9 	.word	0x080072d9
 800728c:	08007311 	.word	0x08007311
 8007290:	08007311 	.word	0x08007311
 8007294:	08007311 	.word	0x08007311
 8007298:	080072e7 	.word	0x080072e7
 800729c:	08007311 	.word	0x08007311
 80072a0:	08007311 	.word	0x08007311
 80072a4:	08007311 	.word	0x08007311
 80072a8:	080072f5 	.word	0x080072f5
 80072ac:	08007311 	.word	0x08007311
 80072b0:	08007311 	.word	0x08007311
 80072b4:	08007311 	.word	0x08007311
 80072b8:	08007303 	.word	0x08007303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 faae 	bl	8007824 <TIM_OC1_SetConfig>
      break;
 80072c8:	e025      	b.n	8007316 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fb2d 	bl	8007930 <TIM_OC2_SetConfig>
      break;
 80072d6:	e01e      	b.n	8007316 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 fba6 	bl	8007a30 <TIM_OC3_SetConfig>
      break;
 80072e4:	e017      	b.n	8007316 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fc1d 	bl	8007b2c <TIM_OC4_SetConfig>
      break;
 80072f2:	e010      	b.n	8007316 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fc7a 	bl	8007bf4 <TIM_OC5_SetConfig>
      break;
 8007300:	e009      	b.n	8007316 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	4618      	mov	r0, r3
 800730a:	f000 fcd1 	bl	8007cb0 <TIM_OC6_SetConfig>
      break;
 800730e:	e002      	b.n	8007316 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	75fb      	strb	r3, [r7, #23]
      break;
 8007314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800731e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007342:	2302      	movs	r3, #2
 8007344:	e0ff      	b.n	8007546 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b14      	cmp	r3, #20
 8007352:	f200 80f0 	bhi.w	8007536 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	080073b1 	.word	0x080073b1
 8007360:	08007537 	.word	0x08007537
 8007364:	08007537 	.word	0x08007537
 8007368:	08007537 	.word	0x08007537
 800736c:	080073f1 	.word	0x080073f1
 8007370:	08007537 	.word	0x08007537
 8007374:	08007537 	.word	0x08007537
 8007378:	08007537 	.word	0x08007537
 800737c:	08007433 	.word	0x08007433
 8007380:	08007537 	.word	0x08007537
 8007384:	08007537 	.word	0x08007537
 8007388:	08007537 	.word	0x08007537
 800738c:	08007473 	.word	0x08007473
 8007390:	08007537 	.word	0x08007537
 8007394:	08007537 	.word	0x08007537
 8007398:	08007537 	.word	0x08007537
 800739c:	080074b5 	.word	0x080074b5
 80073a0:	08007537 	.word	0x08007537
 80073a4:	08007537 	.word	0x08007537
 80073a8:	08007537 	.word	0x08007537
 80073ac:	080074f5 	.word	0x080074f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fa34 	bl	8007824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0208 	orr.w	r2, r2, #8
 80073ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0204 	bic.w	r2, r2, #4
 80073da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6999      	ldr	r1, [r3, #24]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	619a      	str	r2, [r3, #24]
      break;
 80073ee:	e0a5      	b.n	800753c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68b9      	ldr	r1, [r7, #8]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fa9a 	bl	8007930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800740a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699a      	ldr	r2, [r3, #24]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6999      	ldr	r1, [r3, #24]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	021a      	lsls	r2, r3, #8
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	619a      	str	r2, [r3, #24]
      break;
 8007430:	e084      	b.n	800753c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	4618      	mov	r0, r3
 800743a:	f000 faf9 	bl	8007a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0208 	orr.w	r2, r2, #8
 800744c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69da      	ldr	r2, [r3, #28]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0204 	bic.w	r2, r2, #4
 800745c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69d9      	ldr	r1, [r3, #28]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	61da      	str	r2, [r3, #28]
      break;
 8007470:	e064      	b.n	800753c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fb57 	bl	8007b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800748c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69da      	ldr	r2, [r3, #28]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69d9      	ldr	r1, [r3, #28]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	021a      	lsls	r2, r3, #8
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	61da      	str	r2, [r3, #28]
      break;
 80074b2:	e043      	b.n	800753c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fb9a 	bl	8007bf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0208 	orr.w	r2, r2, #8
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0204 	bic.w	r2, r2, #4
 80074de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074f2:	e023      	b.n	800753c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fbd8 	bl	8007cb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800750e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800751e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	021a      	lsls	r2, r3, #8
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007534:	e002      	b.n	800753c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	75fb      	strb	r3, [r7, #23]
      break;
 800753a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop

08007550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_TIM_ConfigClockSource+0x1c>
 8007568:	2302      	movs	r3, #2
 800756a:	e0b6      	b.n	80076da <HAL_TIM_ConfigClockSource+0x18a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800758a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800758e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a8:	d03e      	beq.n	8007628 <HAL_TIM_ConfigClockSource+0xd8>
 80075aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ae:	f200 8087 	bhi.w	80076c0 <HAL_TIM_ConfigClockSource+0x170>
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b6:	f000 8086 	beq.w	80076c6 <HAL_TIM_ConfigClockSource+0x176>
 80075ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075be:	d87f      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x170>
 80075c0:	2b70      	cmp	r3, #112	; 0x70
 80075c2:	d01a      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0xaa>
 80075c4:	2b70      	cmp	r3, #112	; 0x70
 80075c6:	d87b      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x170>
 80075c8:	2b60      	cmp	r3, #96	; 0x60
 80075ca:	d050      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x11e>
 80075cc:	2b60      	cmp	r3, #96	; 0x60
 80075ce:	d877      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x170>
 80075d0:	2b50      	cmp	r3, #80	; 0x50
 80075d2:	d03c      	beq.n	800764e <HAL_TIM_ConfigClockSource+0xfe>
 80075d4:	2b50      	cmp	r3, #80	; 0x50
 80075d6:	d873      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x170>
 80075d8:	2b40      	cmp	r3, #64	; 0x40
 80075da:	d058      	beq.n	800768e <HAL_TIM_ConfigClockSource+0x13e>
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	d86f      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x170>
 80075e0:	2b30      	cmp	r3, #48	; 0x30
 80075e2:	d064      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x15e>
 80075e4:	2b30      	cmp	r3, #48	; 0x30
 80075e6:	d86b      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x170>
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d060      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x15e>
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d867      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x170>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d05c      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x15e>
 80075f4:	2b10      	cmp	r3, #16
 80075f6:	d05a      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x15e>
 80075f8:	e062      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6899      	ldr	r1, [r3, #8]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f000 fc2b 	bl	8007e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800761c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	609a      	str	r2, [r3, #8]
      break;
 8007626:	e04f      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	6899      	ldr	r1, [r3, #8]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f000 fc14 	bl	8007e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800764a:	609a      	str	r2, [r3, #8]
      break;
 800764c:	e03c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6859      	ldr	r1, [r3, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	461a      	mov	r2, r3
 800765c:	f000 fb88 	bl	8007d70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2150      	movs	r1, #80	; 0x50
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fbe1 	bl	8007e2e <TIM_ITRx_SetConfig>
      break;
 800766c:	e02c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	6859      	ldr	r1, [r3, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	461a      	mov	r2, r3
 800767c:	f000 fba7 	bl	8007dce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2160      	movs	r1, #96	; 0x60
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fbd1 	bl	8007e2e <TIM_ITRx_SetConfig>
      break;
 800768c:	e01c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6859      	ldr	r1, [r3, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	461a      	mov	r2, r3
 800769c:	f000 fb68 	bl	8007d70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2140      	movs	r1, #64	; 0x40
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fbc1 	bl	8007e2e <TIM_ITRx_SetConfig>
      break;
 80076ac:	e00c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f000 fbb8 	bl	8007e2e <TIM_ITRx_SetConfig>
      break;
 80076be:	e003      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
      break;
 80076c4:	e000      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80076c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a32      	ldr	r2, [pc, #200]	; (8007810 <TIM_Base_SetConfig+0xdc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d007      	beq.n	800775c <TIM_Base_SetConfig+0x28>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007752:	d003      	beq.n	800775c <TIM_Base_SetConfig+0x28>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a2f      	ldr	r2, [pc, #188]	; (8007814 <TIM_Base_SetConfig+0xe0>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d108      	bne.n	800776e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a27      	ldr	r2, [pc, #156]	; (8007810 <TIM_Base_SetConfig+0xdc>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d013      	beq.n	800779e <TIM_Base_SetConfig+0x6a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777c:	d00f      	beq.n	800779e <TIM_Base_SetConfig+0x6a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a24      	ldr	r2, [pc, #144]	; (8007814 <TIM_Base_SetConfig+0xe0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00b      	beq.n	800779e <TIM_Base_SetConfig+0x6a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a23      	ldr	r2, [pc, #140]	; (8007818 <TIM_Base_SetConfig+0xe4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d007      	beq.n	800779e <TIM_Base_SetConfig+0x6a>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a22      	ldr	r2, [pc, #136]	; (800781c <TIM_Base_SetConfig+0xe8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d003      	beq.n	800779e <TIM_Base_SetConfig+0x6a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a21      	ldr	r2, [pc, #132]	; (8007820 <TIM_Base_SetConfig+0xec>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d108      	bne.n	80077b0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a0e      	ldr	r2, [pc, #56]	; (8007810 <TIM_Base_SetConfig+0xdc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00b      	beq.n	80077f4 <TIM_Base_SetConfig+0xc0>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a0e      	ldr	r2, [pc, #56]	; (8007818 <TIM_Base_SetConfig+0xe4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d007      	beq.n	80077f4 <TIM_Base_SetConfig+0xc0>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a0d      	ldr	r2, [pc, #52]	; (800781c <TIM_Base_SetConfig+0xe8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_Base_SetConfig+0xc0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a0c      	ldr	r2, [pc, #48]	; (8007820 <TIM_Base_SetConfig+0xec>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d103      	bne.n	80077fc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	615a      	str	r2, [r3, #20]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	40012c00 	.word	0x40012c00
 8007814:	40000400 	.word	0x40000400
 8007818:	40014000 	.word	0x40014000
 800781c:	40014400 	.word	0x40014400
 8007820:	40014800 	.word	0x40014800

08007824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f023 0302 	bic.w	r3, r3, #2
 8007870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4313      	orrs	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a28      	ldr	r2, [pc, #160]	; (8007920 <TIM_OC1_SetConfig+0xfc>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00b      	beq.n	800789c <TIM_OC1_SetConfig+0x78>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a27      	ldr	r2, [pc, #156]	; (8007924 <TIM_OC1_SetConfig+0x100>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d007      	beq.n	800789c <TIM_OC1_SetConfig+0x78>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a26      	ldr	r2, [pc, #152]	; (8007928 <TIM_OC1_SetConfig+0x104>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_OC1_SetConfig+0x78>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a25      	ldr	r2, [pc, #148]	; (800792c <TIM_OC1_SetConfig+0x108>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d10c      	bne.n	80078b6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f023 0308 	bic.w	r3, r3, #8
 80078a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f023 0304 	bic.w	r3, r3, #4
 80078b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a19      	ldr	r2, [pc, #100]	; (8007920 <TIM_OC1_SetConfig+0xfc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00b      	beq.n	80078d6 <TIM_OC1_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a18      	ldr	r2, [pc, #96]	; (8007924 <TIM_OC1_SetConfig+0x100>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d007      	beq.n	80078d6 <TIM_OC1_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a17      	ldr	r2, [pc, #92]	; (8007928 <TIM_OC1_SetConfig+0x104>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <TIM_OC1_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a16      	ldr	r2, [pc, #88]	; (800792c <TIM_OC1_SetConfig+0x108>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d111      	bne.n	80078fa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	621a      	str	r2, [r3, #32]
}
 8007914:	bf00      	nop
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40012c00 	.word	0x40012c00
 8007924:	40014000 	.word	0x40014000
 8007928:	40014400 	.word	0x40014400
 800792c:	40014800 	.word	0x40014800

08007930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	f023 0210 	bic.w	r2, r3, #16
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f023 0320 	bic.w	r3, r3, #32
 800797e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a24      	ldr	r2, [pc, #144]	; (8007a20 <TIM_OC2_SetConfig+0xf0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d10d      	bne.n	80079b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800799a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <TIM_OC2_SetConfig+0xf0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00b      	beq.n	80079d0 <TIM_OC2_SetConfig+0xa0>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <TIM_OC2_SetConfig+0xf4>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d007      	beq.n	80079d0 <TIM_OC2_SetConfig+0xa0>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a19      	ldr	r2, [pc, #100]	; (8007a28 <TIM_OC2_SetConfig+0xf8>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d003      	beq.n	80079d0 <TIM_OC2_SetConfig+0xa0>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a18      	ldr	r2, [pc, #96]	; (8007a2c <TIM_OC2_SetConfig+0xfc>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d113      	bne.n	80079f8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079d6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079de:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	621a      	str	r2, [r3, #32]
}
 8007a12:	bf00      	nop
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40012c00 	.word	0x40012c00
 8007a24:	40014000 	.word	0x40014000
 8007a28:	40014400 	.word	0x40014400
 8007a2c:	40014800 	.word	0x40014800

08007a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a23      	ldr	r2, [pc, #140]	; (8007b1c <TIM_OC3_SetConfig+0xec>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d10d      	bne.n	8007aae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a1a      	ldr	r2, [pc, #104]	; (8007b1c <TIM_OC3_SetConfig+0xec>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00b      	beq.n	8007ace <TIM_OC3_SetConfig+0x9e>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a19      	ldr	r2, [pc, #100]	; (8007b20 <TIM_OC3_SetConfig+0xf0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d007      	beq.n	8007ace <TIM_OC3_SetConfig+0x9e>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a18      	ldr	r2, [pc, #96]	; (8007b24 <TIM_OC3_SetConfig+0xf4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d003      	beq.n	8007ace <TIM_OC3_SetConfig+0x9e>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <TIM_OC3_SetConfig+0xf8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d113      	bne.n	8007af6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	011b      	lsls	r3, r3, #4
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	621a      	str	r2, [r3, #32]
}
 8007b10:	bf00      	nop
 8007b12:	371c      	adds	r7, #28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	40012c00 	.word	0x40012c00
 8007b20:	40014000 	.word	0x40014000
 8007b24:	40014400 	.word	0x40014400
 8007b28:	40014800 	.word	0x40014800

08007b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	031b      	lsls	r3, r3, #12
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a16      	ldr	r2, [pc, #88]	; (8007be4 <TIM_OC4_SetConfig+0xb8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00b      	beq.n	8007ba8 <TIM_OC4_SetConfig+0x7c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <TIM_OC4_SetConfig+0xbc>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d007      	beq.n	8007ba8 <TIM_OC4_SetConfig+0x7c>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a14      	ldr	r2, [pc, #80]	; (8007bec <TIM_OC4_SetConfig+0xc0>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d003      	beq.n	8007ba8 <TIM_OC4_SetConfig+0x7c>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <TIM_OC4_SetConfig+0xc4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d109      	bne.n	8007bbc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	019b      	lsls	r3, r3, #6
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	621a      	str	r2, [r3, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40014000 	.word	0x40014000
 8007bec:	40014400 	.word	0x40014400
 8007bf0:	40014800 	.word	0x40014800

08007bf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a15      	ldr	r2, [pc, #84]	; (8007ca0 <TIM_OC5_SetConfig+0xac>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00b      	beq.n	8007c66 <TIM_OC5_SetConfig+0x72>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a14      	ldr	r2, [pc, #80]	; (8007ca4 <TIM_OC5_SetConfig+0xb0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d007      	beq.n	8007c66 <TIM_OC5_SetConfig+0x72>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <TIM_OC5_SetConfig+0xb4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_OC5_SetConfig+0x72>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a12      	ldr	r2, [pc, #72]	; (8007cac <TIM_OC5_SetConfig+0xb8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d109      	bne.n	8007c7a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	621a      	str	r2, [r3, #32]
}
 8007c94:	bf00      	nop
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	40012c00 	.word	0x40012c00
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	40014400 	.word	0x40014400
 8007cac:	40014800 	.word	0x40014800

08007cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	051b      	lsls	r3, r3, #20
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a16      	ldr	r2, [pc, #88]	; (8007d60 <TIM_OC6_SetConfig+0xb0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d00b      	beq.n	8007d24 <TIM_OC6_SetConfig+0x74>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <TIM_OC6_SetConfig+0xb4>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d007      	beq.n	8007d24 <TIM_OC6_SetConfig+0x74>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a14      	ldr	r2, [pc, #80]	; (8007d68 <TIM_OC6_SetConfig+0xb8>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d003      	beq.n	8007d24 <TIM_OC6_SetConfig+0x74>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a13      	ldr	r2, [pc, #76]	; (8007d6c <TIM_OC6_SetConfig+0xbc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d109      	bne.n	8007d38 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	029b      	lsls	r3, r3, #10
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	621a      	str	r2, [r3, #32]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40012c00 	.word	0x40012c00
 8007d64:	40014000 	.word	0x40014000
 8007d68:	40014400 	.word	0x40014400
 8007d6c:	40014800 	.word	0x40014800

08007d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	f023 0201 	bic.w	r2, r3, #1
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	011b      	lsls	r3, r3, #4
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f023 030a 	bic.w	r3, r3, #10
 8007dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	621a      	str	r2, [r3, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b087      	sub	sp, #28
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f023 0210 	bic.w	r2, r3, #16
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	031b      	lsls	r3, r3, #12
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	621a      	str	r2, [r3, #32]
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b085      	sub	sp, #20
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f043 0307 	orr.w	r3, r3, #7
 8007e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	609a      	str	r2, [r3, #8]
}
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	021a      	lsls	r2, r3, #8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	609a      	str	r2, [r3, #8]
}
 8007e98:	bf00      	nop
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f003 031f 	and.w	r3, r3, #31
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1a      	ldr	r2, [r3, #32]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	401a      	ands	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1a      	ldr	r2, [r3, #32]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
	...

08007ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e054      	b.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a24      	ldr	r2, [pc, #144]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d108      	bne.n	8007f44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a17      	ldr	r2, [pc, #92]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00e      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f70:	d009      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a13      	ldr	r2, [pc, #76]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d004      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a11      	ldr	r2, [pc, #68]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d10c      	bne.n	8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	40012c00 	.word	0x40012c00
 8007fc4:	40000400 	.word	0x40000400
 8007fc8:	40014000 	.word	0x40014000

08007fcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e060      	b.n	80080aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	041b      	lsls	r3, r3, #16
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a14      	ldr	r2, [pc, #80]	; (80080b8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d115      	bne.n	8008098 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	051b      	lsls	r3, r3, #20
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	40012c00 	.word	0x40012c00

080080bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <__errno>:
 80080f8:	4b01      	ldr	r3, [pc, #4]	; (8008100 <__errno+0x8>)
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20000074 	.word	0x20000074

08008104 <__libc_init_array>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	4d0d      	ldr	r5, [pc, #52]	; (800813c <__libc_init_array+0x38>)
 8008108:	4c0d      	ldr	r4, [pc, #52]	; (8008140 <__libc_init_array+0x3c>)
 800810a:	1b64      	subs	r4, r4, r5
 800810c:	10a4      	asrs	r4, r4, #2
 800810e:	2600      	movs	r6, #0
 8008110:	42a6      	cmp	r6, r4
 8008112:	d109      	bne.n	8008128 <__libc_init_array+0x24>
 8008114:	4d0b      	ldr	r5, [pc, #44]	; (8008144 <__libc_init_array+0x40>)
 8008116:	4c0c      	ldr	r4, [pc, #48]	; (8008148 <__libc_init_array+0x44>)
 8008118:	f001 fa62 	bl	80095e0 <_init>
 800811c:	1b64      	subs	r4, r4, r5
 800811e:	10a4      	asrs	r4, r4, #2
 8008120:	2600      	movs	r6, #0
 8008122:	42a6      	cmp	r6, r4
 8008124:	d105      	bne.n	8008132 <__libc_init_array+0x2e>
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	f855 3b04 	ldr.w	r3, [r5], #4
 800812c:	4798      	blx	r3
 800812e:	3601      	adds	r6, #1
 8008130:	e7ee      	b.n	8008110 <__libc_init_array+0xc>
 8008132:	f855 3b04 	ldr.w	r3, [r5], #4
 8008136:	4798      	blx	r3
 8008138:	3601      	adds	r6, #1
 800813a:	e7f2      	b.n	8008122 <__libc_init_array+0x1e>
 800813c:	08009ed8 	.word	0x08009ed8
 8008140:	08009ed8 	.word	0x08009ed8
 8008144:	08009ed8 	.word	0x08009ed8
 8008148:	08009edc 	.word	0x08009edc

0800814c <memcpy>:
 800814c:	440a      	add	r2, r1
 800814e:	4291      	cmp	r1, r2
 8008150:	f100 33ff 	add.w	r3, r0, #4294967295
 8008154:	d100      	bne.n	8008158 <memcpy+0xc>
 8008156:	4770      	bx	lr
 8008158:	b510      	push	{r4, lr}
 800815a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800815e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008162:	4291      	cmp	r1, r2
 8008164:	d1f9      	bne.n	800815a <memcpy+0xe>
 8008166:	bd10      	pop	{r4, pc}

08008168 <memset>:
 8008168:	4402      	add	r2, r0
 800816a:	4603      	mov	r3, r0
 800816c:	4293      	cmp	r3, r2
 800816e:	d100      	bne.n	8008172 <memset+0xa>
 8008170:	4770      	bx	lr
 8008172:	f803 1b01 	strb.w	r1, [r3], #1
 8008176:	e7f9      	b.n	800816c <memset+0x4>

08008178 <srand>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4b10      	ldr	r3, [pc, #64]	; (80081bc <srand+0x44>)
 800817c:	681d      	ldr	r5, [r3, #0]
 800817e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008180:	4604      	mov	r4, r0
 8008182:	b9b3      	cbnz	r3, 80081b2 <srand+0x3a>
 8008184:	2018      	movs	r0, #24
 8008186:	f000 f8b3 	bl	80082f0 <malloc>
 800818a:	4602      	mov	r2, r0
 800818c:	63a8      	str	r0, [r5, #56]	; 0x38
 800818e:	b920      	cbnz	r0, 800819a <srand+0x22>
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <srand+0x48>)
 8008192:	480c      	ldr	r0, [pc, #48]	; (80081c4 <srand+0x4c>)
 8008194:	2142      	movs	r1, #66	; 0x42
 8008196:	f000 f87b 	bl	8008290 <__assert_func>
 800819a:	490b      	ldr	r1, [pc, #44]	; (80081c8 <srand+0x50>)
 800819c:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <srand+0x54>)
 800819e:	e9c0 1300 	strd	r1, r3, [r0]
 80081a2:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <srand+0x58>)
 80081a4:	6083      	str	r3, [r0, #8]
 80081a6:	230b      	movs	r3, #11
 80081a8:	8183      	strh	r3, [r0, #12]
 80081aa:	2100      	movs	r1, #0
 80081ac:	2001      	movs	r0, #1
 80081ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80081b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80081b4:	2200      	movs	r2, #0
 80081b6:	611c      	str	r4, [r3, #16]
 80081b8:	615a      	str	r2, [r3, #20]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	20000074 	.word	0x20000074
 80081c0:	08009d94 	.word	0x08009d94
 80081c4:	08009dab 	.word	0x08009dab
 80081c8:	abcd330e 	.word	0xabcd330e
 80081cc:	e66d1234 	.word	0xe66d1234
 80081d0:	0005deec 	.word	0x0005deec

080081d4 <rand>:
 80081d4:	4b16      	ldr	r3, [pc, #88]	; (8008230 <rand+0x5c>)
 80081d6:	b510      	push	{r4, lr}
 80081d8:	681c      	ldr	r4, [r3, #0]
 80081da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081dc:	b9b3      	cbnz	r3, 800820c <rand+0x38>
 80081de:	2018      	movs	r0, #24
 80081e0:	f000 f886 	bl	80082f0 <malloc>
 80081e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80081e6:	b928      	cbnz	r0, 80081f4 <rand+0x20>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <rand+0x60>)
 80081ec:	4812      	ldr	r0, [pc, #72]	; (8008238 <rand+0x64>)
 80081ee:	214e      	movs	r1, #78	; 0x4e
 80081f0:	f000 f84e 	bl	8008290 <__assert_func>
 80081f4:	4a11      	ldr	r2, [pc, #68]	; (800823c <rand+0x68>)
 80081f6:	4b12      	ldr	r3, [pc, #72]	; (8008240 <rand+0x6c>)
 80081f8:	e9c0 2300 	strd	r2, r3, [r0]
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <rand+0x70>)
 80081fe:	6083      	str	r3, [r0, #8]
 8008200:	230b      	movs	r3, #11
 8008202:	8183      	strh	r3, [r0, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	2300      	movs	r3, #0
 8008208:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800820c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800820e:	4a0e      	ldr	r2, [pc, #56]	; (8008248 <rand+0x74>)
 8008210:	6920      	ldr	r0, [r4, #16]
 8008212:	6963      	ldr	r3, [r4, #20]
 8008214:	490d      	ldr	r1, [pc, #52]	; (800824c <rand+0x78>)
 8008216:	4342      	muls	r2, r0
 8008218:	fb01 2203 	mla	r2, r1, r3, r2
 800821c:	fba0 0101 	umull	r0, r1, r0, r1
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	eb42 0001 	adc.w	r0, r2, r1
 8008226:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800822a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800822e:	bd10      	pop	{r4, pc}
 8008230:	20000074 	.word	0x20000074
 8008234:	08009d94 	.word	0x08009d94
 8008238:	08009dab 	.word	0x08009dab
 800823c:	abcd330e 	.word	0xabcd330e
 8008240:	e66d1234 	.word	0xe66d1234
 8008244:	0005deec 	.word	0x0005deec
 8008248:	5851f42d 	.word	0x5851f42d
 800824c:	4c957f2d 	.word	0x4c957f2d

08008250 <siprintf>:
 8008250:	b40e      	push	{r1, r2, r3}
 8008252:	b500      	push	{lr}
 8008254:	b09c      	sub	sp, #112	; 0x70
 8008256:	ab1d      	add	r3, sp, #116	; 0x74
 8008258:	9002      	str	r0, [sp, #8]
 800825a:	9006      	str	r0, [sp, #24]
 800825c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008260:	4809      	ldr	r0, [pc, #36]	; (8008288 <siprintf+0x38>)
 8008262:	9107      	str	r1, [sp, #28]
 8008264:	9104      	str	r1, [sp, #16]
 8008266:	4909      	ldr	r1, [pc, #36]	; (800828c <siprintf+0x3c>)
 8008268:	f853 2b04 	ldr.w	r2, [r3], #4
 800826c:	9105      	str	r1, [sp, #20]
 800826e:	6800      	ldr	r0, [r0, #0]
 8008270:	9301      	str	r3, [sp, #4]
 8008272:	a902      	add	r1, sp, #8
 8008274:	f000 f980 	bl	8008578 <_svfiprintf_r>
 8008278:	9b02      	ldr	r3, [sp, #8]
 800827a:	2200      	movs	r2, #0
 800827c:	701a      	strb	r2, [r3, #0]
 800827e:	b01c      	add	sp, #112	; 0x70
 8008280:	f85d eb04 	ldr.w	lr, [sp], #4
 8008284:	b003      	add	sp, #12
 8008286:	4770      	bx	lr
 8008288:	20000074 	.word	0x20000074
 800828c:	ffff0208 	.word	0xffff0208

08008290 <__assert_func>:
 8008290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008292:	4614      	mov	r4, r2
 8008294:	461a      	mov	r2, r3
 8008296:	4b09      	ldr	r3, [pc, #36]	; (80082bc <__assert_func+0x2c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4605      	mov	r5, r0
 800829c:	68d8      	ldr	r0, [r3, #12]
 800829e:	b14c      	cbz	r4, 80082b4 <__assert_func+0x24>
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <__assert_func+0x30>)
 80082a2:	9100      	str	r1, [sp, #0]
 80082a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082a8:	4906      	ldr	r1, [pc, #24]	; (80082c4 <__assert_func+0x34>)
 80082aa:	462b      	mov	r3, r5
 80082ac:	f000 f80e 	bl	80082cc <fiprintf>
 80082b0:	f000 fe20 	bl	8008ef4 <abort>
 80082b4:	4b04      	ldr	r3, [pc, #16]	; (80082c8 <__assert_func+0x38>)
 80082b6:	461c      	mov	r4, r3
 80082b8:	e7f3      	b.n	80082a2 <__assert_func+0x12>
 80082ba:	bf00      	nop
 80082bc:	20000074 	.word	0x20000074
 80082c0:	08009e06 	.word	0x08009e06
 80082c4:	08009e13 	.word	0x08009e13
 80082c8:	08009e41 	.word	0x08009e41

080082cc <fiprintf>:
 80082cc:	b40e      	push	{r1, r2, r3}
 80082ce:	b503      	push	{r0, r1, lr}
 80082d0:	4601      	mov	r1, r0
 80082d2:	ab03      	add	r3, sp, #12
 80082d4:	4805      	ldr	r0, [pc, #20]	; (80082ec <fiprintf+0x20>)
 80082d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082da:	6800      	ldr	r0, [r0, #0]
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	f000 fa75 	bl	80087cc <_vfiprintf_r>
 80082e2:	b002      	add	sp, #8
 80082e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e8:	b003      	add	sp, #12
 80082ea:	4770      	bx	lr
 80082ec:	20000074 	.word	0x20000074

080082f0 <malloc>:
 80082f0:	4b02      	ldr	r3, [pc, #8]	; (80082fc <malloc+0xc>)
 80082f2:	4601      	mov	r1, r0
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	f000 b86f 	b.w	80083d8 <_malloc_r>
 80082fa:	bf00      	nop
 80082fc:	20000074 	.word	0x20000074

08008300 <_free_r>:
 8008300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008302:	2900      	cmp	r1, #0
 8008304:	d044      	beq.n	8008390 <_free_r+0x90>
 8008306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800830a:	9001      	str	r0, [sp, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f1a1 0404 	sub.w	r4, r1, #4
 8008312:	bfb8      	it	lt
 8008314:	18e4      	addlt	r4, r4, r3
 8008316:	f001 f82f 	bl	8009378 <__malloc_lock>
 800831a:	4a1e      	ldr	r2, [pc, #120]	; (8008394 <_free_r+0x94>)
 800831c:	9801      	ldr	r0, [sp, #4]
 800831e:	6813      	ldr	r3, [r2, #0]
 8008320:	b933      	cbnz	r3, 8008330 <_free_r+0x30>
 8008322:	6063      	str	r3, [r4, #4]
 8008324:	6014      	str	r4, [r2, #0]
 8008326:	b003      	add	sp, #12
 8008328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800832c:	f001 b82a 	b.w	8009384 <__malloc_unlock>
 8008330:	42a3      	cmp	r3, r4
 8008332:	d908      	bls.n	8008346 <_free_r+0x46>
 8008334:	6825      	ldr	r5, [r4, #0]
 8008336:	1961      	adds	r1, r4, r5
 8008338:	428b      	cmp	r3, r1
 800833a:	bf01      	itttt	eq
 800833c:	6819      	ldreq	r1, [r3, #0]
 800833e:	685b      	ldreq	r3, [r3, #4]
 8008340:	1949      	addeq	r1, r1, r5
 8008342:	6021      	streq	r1, [r4, #0]
 8008344:	e7ed      	b.n	8008322 <_free_r+0x22>
 8008346:	461a      	mov	r2, r3
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	b10b      	cbz	r3, 8008350 <_free_r+0x50>
 800834c:	42a3      	cmp	r3, r4
 800834e:	d9fa      	bls.n	8008346 <_free_r+0x46>
 8008350:	6811      	ldr	r1, [r2, #0]
 8008352:	1855      	adds	r5, r2, r1
 8008354:	42a5      	cmp	r5, r4
 8008356:	d10b      	bne.n	8008370 <_free_r+0x70>
 8008358:	6824      	ldr	r4, [r4, #0]
 800835a:	4421      	add	r1, r4
 800835c:	1854      	adds	r4, r2, r1
 800835e:	42a3      	cmp	r3, r4
 8008360:	6011      	str	r1, [r2, #0]
 8008362:	d1e0      	bne.n	8008326 <_free_r+0x26>
 8008364:	681c      	ldr	r4, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	6053      	str	r3, [r2, #4]
 800836a:	4421      	add	r1, r4
 800836c:	6011      	str	r1, [r2, #0]
 800836e:	e7da      	b.n	8008326 <_free_r+0x26>
 8008370:	d902      	bls.n	8008378 <_free_r+0x78>
 8008372:	230c      	movs	r3, #12
 8008374:	6003      	str	r3, [r0, #0]
 8008376:	e7d6      	b.n	8008326 <_free_r+0x26>
 8008378:	6825      	ldr	r5, [r4, #0]
 800837a:	1961      	adds	r1, r4, r5
 800837c:	428b      	cmp	r3, r1
 800837e:	bf04      	itt	eq
 8008380:	6819      	ldreq	r1, [r3, #0]
 8008382:	685b      	ldreq	r3, [r3, #4]
 8008384:	6063      	str	r3, [r4, #4]
 8008386:	bf04      	itt	eq
 8008388:	1949      	addeq	r1, r1, r5
 800838a:	6021      	streq	r1, [r4, #0]
 800838c:	6054      	str	r4, [r2, #4]
 800838e:	e7ca      	b.n	8008326 <_free_r+0x26>
 8008390:	b003      	add	sp, #12
 8008392:	bd30      	pop	{r4, r5, pc}
 8008394:	200009e8 	.word	0x200009e8

08008398 <sbrk_aligned>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	4e0e      	ldr	r6, [pc, #56]	; (80083d4 <sbrk_aligned+0x3c>)
 800839c:	460c      	mov	r4, r1
 800839e:	6831      	ldr	r1, [r6, #0]
 80083a0:	4605      	mov	r5, r0
 80083a2:	b911      	cbnz	r1, 80083aa <sbrk_aligned+0x12>
 80083a4:	f000 fcd6 	bl	8008d54 <_sbrk_r>
 80083a8:	6030      	str	r0, [r6, #0]
 80083aa:	4621      	mov	r1, r4
 80083ac:	4628      	mov	r0, r5
 80083ae:	f000 fcd1 	bl	8008d54 <_sbrk_r>
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	d00a      	beq.n	80083cc <sbrk_aligned+0x34>
 80083b6:	1cc4      	adds	r4, r0, #3
 80083b8:	f024 0403 	bic.w	r4, r4, #3
 80083bc:	42a0      	cmp	r0, r4
 80083be:	d007      	beq.n	80083d0 <sbrk_aligned+0x38>
 80083c0:	1a21      	subs	r1, r4, r0
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 fcc6 	bl	8008d54 <_sbrk_r>
 80083c8:	3001      	adds	r0, #1
 80083ca:	d101      	bne.n	80083d0 <sbrk_aligned+0x38>
 80083cc:	f04f 34ff 	mov.w	r4, #4294967295
 80083d0:	4620      	mov	r0, r4
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	200009ec 	.word	0x200009ec

080083d8 <_malloc_r>:
 80083d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083dc:	1ccd      	adds	r5, r1, #3
 80083de:	f025 0503 	bic.w	r5, r5, #3
 80083e2:	3508      	adds	r5, #8
 80083e4:	2d0c      	cmp	r5, #12
 80083e6:	bf38      	it	cc
 80083e8:	250c      	movcc	r5, #12
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	4607      	mov	r7, r0
 80083ee:	db01      	blt.n	80083f4 <_malloc_r+0x1c>
 80083f0:	42a9      	cmp	r1, r5
 80083f2:	d905      	bls.n	8008400 <_malloc_r+0x28>
 80083f4:	230c      	movs	r3, #12
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	2600      	movs	r6, #0
 80083fa:	4630      	mov	r0, r6
 80083fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008400:	4e2e      	ldr	r6, [pc, #184]	; (80084bc <_malloc_r+0xe4>)
 8008402:	f000 ffb9 	bl	8009378 <__malloc_lock>
 8008406:	6833      	ldr	r3, [r6, #0]
 8008408:	461c      	mov	r4, r3
 800840a:	bb34      	cbnz	r4, 800845a <_malloc_r+0x82>
 800840c:	4629      	mov	r1, r5
 800840e:	4638      	mov	r0, r7
 8008410:	f7ff ffc2 	bl	8008398 <sbrk_aligned>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	4604      	mov	r4, r0
 8008418:	d14d      	bne.n	80084b6 <_malloc_r+0xde>
 800841a:	6834      	ldr	r4, [r6, #0]
 800841c:	4626      	mov	r6, r4
 800841e:	2e00      	cmp	r6, #0
 8008420:	d140      	bne.n	80084a4 <_malloc_r+0xcc>
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	4631      	mov	r1, r6
 8008426:	4638      	mov	r0, r7
 8008428:	eb04 0803 	add.w	r8, r4, r3
 800842c:	f000 fc92 	bl	8008d54 <_sbrk_r>
 8008430:	4580      	cmp	r8, r0
 8008432:	d13a      	bne.n	80084aa <_malloc_r+0xd2>
 8008434:	6821      	ldr	r1, [r4, #0]
 8008436:	3503      	adds	r5, #3
 8008438:	1a6d      	subs	r5, r5, r1
 800843a:	f025 0503 	bic.w	r5, r5, #3
 800843e:	3508      	adds	r5, #8
 8008440:	2d0c      	cmp	r5, #12
 8008442:	bf38      	it	cc
 8008444:	250c      	movcc	r5, #12
 8008446:	4629      	mov	r1, r5
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ffa5 	bl	8008398 <sbrk_aligned>
 800844e:	3001      	adds	r0, #1
 8008450:	d02b      	beq.n	80084aa <_malloc_r+0xd2>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	442b      	add	r3, r5
 8008456:	6023      	str	r3, [r4, #0]
 8008458:	e00e      	b.n	8008478 <_malloc_r+0xa0>
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	1b52      	subs	r2, r2, r5
 800845e:	d41e      	bmi.n	800849e <_malloc_r+0xc6>
 8008460:	2a0b      	cmp	r2, #11
 8008462:	d916      	bls.n	8008492 <_malloc_r+0xba>
 8008464:	1961      	adds	r1, r4, r5
 8008466:	42a3      	cmp	r3, r4
 8008468:	6025      	str	r5, [r4, #0]
 800846a:	bf18      	it	ne
 800846c:	6059      	strne	r1, [r3, #4]
 800846e:	6863      	ldr	r3, [r4, #4]
 8008470:	bf08      	it	eq
 8008472:	6031      	streq	r1, [r6, #0]
 8008474:	5162      	str	r2, [r4, r5]
 8008476:	604b      	str	r3, [r1, #4]
 8008478:	4638      	mov	r0, r7
 800847a:	f104 060b 	add.w	r6, r4, #11
 800847e:	f000 ff81 	bl	8009384 <__malloc_unlock>
 8008482:	f026 0607 	bic.w	r6, r6, #7
 8008486:	1d23      	adds	r3, r4, #4
 8008488:	1af2      	subs	r2, r6, r3
 800848a:	d0b6      	beq.n	80083fa <_malloc_r+0x22>
 800848c:	1b9b      	subs	r3, r3, r6
 800848e:	50a3      	str	r3, [r4, r2]
 8008490:	e7b3      	b.n	80083fa <_malloc_r+0x22>
 8008492:	6862      	ldr	r2, [r4, #4]
 8008494:	42a3      	cmp	r3, r4
 8008496:	bf0c      	ite	eq
 8008498:	6032      	streq	r2, [r6, #0]
 800849a:	605a      	strne	r2, [r3, #4]
 800849c:	e7ec      	b.n	8008478 <_malloc_r+0xa0>
 800849e:	4623      	mov	r3, r4
 80084a0:	6864      	ldr	r4, [r4, #4]
 80084a2:	e7b2      	b.n	800840a <_malloc_r+0x32>
 80084a4:	4634      	mov	r4, r6
 80084a6:	6876      	ldr	r6, [r6, #4]
 80084a8:	e7b9      	b.n	800841e <_malloc_r+0x46>
 80084aa:	230c      	movs	r3, #12
 80084ac:	603b      	str	r3, [r7, #0]
 80084ae:	4638      	mov	r0, r7
 80084b0:	f000 ff68 	bl	8009384 <__malloc_unlock>
 80084b4:	e7a1      	b.n	80083fa <_malloc_r+0x22>
 80084b6:	6025      	str	r5, [r4, #0]
 80084b8:	e7de      	b.n	8008478 <_malloc_r+0xa0>
 80084ba:	bf00      	nop
 80084bc:	200009e8 	.word	0x200009e8

080084c0 <__ssputs_r>:
 80084c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c4:	688e      	ldr	r6, [r1, #8]
 80084c6:	429e      	cmp	r6, r3
 80084c8:	4682      	mov	sl, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	4690      	mov	r8, r2
 80084ce:	461f      	mov	r7, r3
 80084d0:	d838      	bhi.n	8008544 <__ssputs_r+0x84>
 80084d2:	898a      	ldrh	r2, [r1, #12]
 80084d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084d8:	d032      	beq.n	8008540 <__ssputs_r+0x80>
 80084da:	6825      	ldr	r5, [r4, #0]
 80084dc:	6909      	ldr	r1, [r1, #16]
 80084de:	eba5 0901 	sub.w	r9, r5, r1
 80084e2:	6965      	ldr	r5, [r4, #20]
 80084e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084ec:	3301      	adds	r3, #1
 80084ee:	444b      	add	r3, r9
 80084f0:	106d      	asrs	r5, r5, #1
 80084f2:	429d      	cmp	r5, r3
 80084f4:	bf38      	it	cc
 80084f6:	461d      	movcc	r5, r3
 80084f8:	0553      	lsls	r3, r2, #21
 80084fa:	d531      	bpl.n	8008560 <__ssputs_r+0xa0>
 80084fc:	4629      	mov	r1, r5
 80084fe:	f7ff ff6b 	bl	80083d8 <_malloc_r>
 8008502:	4606      	mov	r6, r0
 8008504:	b950      	cbnz	r0, 800851c <__ssputs_r+0x5c>
 8008506:	230c      	movs	r3, #12
 8008508:	f8ca 3000 	str.w	r3, [sl]
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851c:	6921      	ldr	r1, [r4, #16]
 800851e:	464a      	mov	r2, r9
 8008520:	f7ff fe14 	bl	800814c <memcpy>
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800852a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852e:	81a3      	strh	r3, [r4, #12]
 8008530:	6126      	str	r6, [r4, #16]
 8008532:	6165      	str	r5, [r4, #20]
 8008534:	444e      	add	r6, r9
 8008536:	eba5 0509 	sub.w	r5, r5, r9
 800853a:	6026      	str	r6, [r4, #0]
 800853c:	60a5      	str	r5, [r4, #8]
 800853e:	463e      	mov	r6, r7
 8008540:	42be      	cmp	r6, r7
 8008542:	d900      	bls.n	8008546 <__ssputs_r+0x86>
 8008544:	463e      	mov	r6, r7
 8008546:	6820      	ldr	r0, [r4, #0]
 8008548:	4632      	mov	r2, r6
 800854a:	4641      	mov	r1, r8
 800854c:	f000 fefa 	bl	8009344 <memmove>
 8008550:	68a3      	ldr	r3, [r4, #8]
 8008552:	1b9b      	subs	r3, r3, r6
 8008554:	60a3      	str	r3, [r4, #8]
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	4433      	add	r3, r6
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	2000      	movs	r0, #0
 800855e:	e7db      	b.n	8008518 <__ssputs_r+0x58>
 8008560:	462a      	mov	r2, r5
 8008562:	f000 ff15 	bl	8009390 <_realloc_r>
 8008566:	4606      	mov	r6, r0
 8008568:	2800      	cmp	r0, #0
 800856a:	d1e1      	bne.n	8008530 <__ssputs_r+0x70>
 800856c:	6921      	ldr	r1, [r4, #16]
 800856e:	4650      	mov	r0, sl
 8008570:	f7ff fec6 	bl	8008300 <_free_r>
 8008574:	e7c7      	b.n	8008506 <__ssputs_r+0x46>
	...

08008578 <_svfiprintf_r>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	4698      	mov	r8, r3
 800857e:	898b      	ldrh	r3, [r1, #12]
 8008580:	061b      	lsls	r3, r3, #24
 8008582:	b09d      	sub	sp, #116	; 0x74
 8008584:	4607      	mov	r7, r0
 8008586:	460d      	mov	r5, r1
 8008588:	4614      	mov	r4, r2
 800858a:	d50e      	bpl.n	80085aa <_svfiprintf_r+0x32>
 800858c:	690b      	ldr	r3, [r1, #16]
 800858e:	b963      	cbnz	r3, 80085aa <_svfiprintf_r+0x32>
 8008590:	2140      	movs	r1, #64	; 0x40
 8008592:	f7ff ff21 	bl	80083d8 <_malloc_r>
 8008596:	6028      	str	r0, [r5, #0]
 8008598:	6128      	str	r0, [r5, #16]
 800859a:	b920      	cbnz	r0, 80085a6 <_svfiprintf_r+0x2e>
 800859c:	230c      	movs	r3, #12
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	e0d1      	b.n	800874a <_svfiprintf_r+0x1d2>
 80085a6:	2340      	movs	r3, #64	; 0x40
 80085a8:	616b      	str	r3, [r5, #20]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9309      	str	r3, [sp, #36]	; 0x24
 80085ae:	2320      	movs	r3, #32
 80085b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b8:	2330      	movs	r3, #48	; 0x30
 80085ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008764 <_svfiprintf_r+0x1ec>
 80085be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085c2:	f04f 0901 	mov.w	r9, #1
 80085c6:	4623      	mov	r3, r4
 80085c8:	469a      	mov	sl, r3
 80085ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ce:	b10a      	cbz	r2, 80085d4 <_svfiprintf_r+0x5c>
 80085d0:	2a25      	cmp	r2, #37	; 0x25
 80085d2:	d1f9      	bne.n	80085c8 <_svfiprintf_r+0x50>
 80085d4:	ebba 0b04 	subs.w	fp, sl, r4
 80085d8:	d00b      	beq.n	80085f2 <_svfiprintf_r+0x7a>
 80085da:	465b      	mov	r3, fp
 80085dc:	4622      	mov	r2, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	4638      	mov	r0, r7
 80085e2:	f7ff ff6d 	bl	80084c0 <__ssputs_r>
 80085e6:	3001      	adds	r0, #1
 80085e8:	f000 80aa 	beq.w	8008740 <_svfiprintf_r+0x1c8>
 80085ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ee:	445a      	add	r2, fp
 80085f0:	9209      	str	r2, [sp, #36]	; 0x24
 80085f2:	f89a 3000 	ldrb.w	r3, [sl]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 80a2 	beq.w	8008740 <_svfiprintf_r+0x1c8>
 80085fc:	2300      	movs	r3, #0
 80085fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008606:	f10a 0a01 	add.w	sl, sl, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	9307      	str	r3, [sp, #28]
 800860e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008612:	931a      	str	r3, [sp, #104]	; 0x68
 8008614:	4654      	mov	r4, sl
 8008616:	2205      	movs	r2, #5
 8008618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861c:	4851      	ldr	r0, [pc, #324]	; (8008764 <_svfiprintf_r+0x1ec>)
 800861e:	f7f7 fddf 	bl	80001e0 <memchr>
 8008622:	9a04      	ldr	r2, [sp, #16]
 8008624:	b9d8      	cbnz	r0, 800865e <_svfiprintf_r+0xe6>
 8008626:	06d0      	lsls	r0, r2, #27
 8008628:	bf44      	itt	mi
 800862a:	2320      	movmi	r3, #32
 800862c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008630:	0711      	lsls	r1, r2, #28
 8008632:	bf44      	itt	mi
 8008634:	232b      	movmi	r3, #43	; 0x2b
 8008636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800863a:	f89a 3000 	ldrb.w	r3, [sl]
 800863e:	2b2a      	cmp	r3, #42	; 0x2a
 8008640:	d015      	beq.n	800866e <_svfiprintf_r+0xf6>
 8008642:	9a07      	ldr	r2, [sp, #28]
 8008644:	4654      	mov	r4, sl
 8008646:	2000      	movs	r0, #0
 8008648:	f04f 0c0a 	mov.w	ip, #10
 800864c:	4621      	mov	r1, r4
 800864e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008652:	3b30      	subs	r3, #48	; 0x30
 8008654:	2b09      	cmp	r3, #9
 8008656:	d94e      	bls.n	80086f6 <_svfiprintf_r+0x17e>
 8008658:	b1b0      	cbz	r0, 8008688 <_svfiprintf_r+0x110>
 800865a:	9207      	str	r2, [sp, #28]
 800865c:	e014      	b.n	8008688 <_svfiprintf_r+0x110>
 800865e:	eba0 0308 	sub.w	r3, r0, r8
 8008662:	fa09 f303 	lsl.w	r3, r9, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	9304      	str	r3, [sp, #16]
 800866a:	46a2      	mov	sl, r4
 800866c:	e7d2      	b.n	8008614 <_svfiprintf_r+0x9c>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	1d19      	adds	r1, r3, #4
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	9103      	str	r1, [sp, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	bfbb      	ittet	lt
 800867a:	425b      	neglt	r3, r3
 800867c:	f042 0202 	orrlt.w	r2, r2, #2
 8008680:	9307      	strge	r3, [sp, #28]
 8008682:	9307      	strlt	r3, [sp, #28]
 8008684:	bfb8      	it	lt
 8008686:	9204      	strlt	r2, [sp, #16]
 8008688:	7823      	ldrb	r3, [r4, #0]
 800868a:	2b2e      	cmp	r3, #46	; 0x2e
 800868c:	d10c      	bne.n	80086a8 <_svfiprintf_r+0x130>
 800868e:	7863      	ldrb	r3, [r4, #1]
 8008690:	2b2a      	cmp	r3, #42	; 0x2a
 8008692:	d135      	bne.n	8008700 <_svfiprintf_r+0x188>
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	9203      	str	r2, [sp, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	bfb8      	it	lt
 80086a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80086a4:	3402      	adds	r4, #2
 80086a6:	9305      	str	r3, [sp, #20]
 80086a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008774 <_svfiprintf_r+0x1fc>
 80086ac:	7821      	ldrb	r1, [r4, #0]
 80086ae:	2203      	movs	r2, #3
 80086b0:	4650      	mov	r0, sl
 80086b2:	f7f7 fd95 	bl	80001e0 <memchr>
 80086b6:	b140      	cbz	r0, 80086ca <_svfiprintf_r+0x152>
 80086b8:	2340      	movs	r3, #64	; 0x40
 80086ba:	eba0 000a 	sub.w	r0, r0, sl
 80086be:	fa03 f000 	lsl.w	r0, r3, r0
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	4303      	orrs	r3, r0
 80086c6:	3401      	adds	r4, #1
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ce:	4826      	ldr	r0, [pc, #152]	; (8008768 <_svfiprintf_r+0x1f0>)
 80086d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086d4:	2206      	movs	r2, #6
 80086d6:	f7f7 fd83 	bl	80001e0 <memchr>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d038      	beq.n	8008750 <_svfiprintf_r+0x1d8>
 80086de:	4b23      	ldr	r3, [pc, #140]	; (800876c <_svfiprintf_r+0x1f4>)
 80086e0:	bb1b      	cbnz	r3, 800872a <_svfiprintf_r+0x1b2>
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	3307      	adds	r3, #7
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	3308      	adds	r3, #8
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f0:	4433      	add	r3, r6
 80086f2:	9309      	str	r3, [sp, #36]	; 0x24
 80086f4:	e767      	b.n	80085c6 <_svfiprintf_r+0x4e>
 80086f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086fa:	460c      	mov	r4, r1
 80086fc:	2001      	movs	r0, #1
 80086fe:	e7a5      	b.n	800864c <_svfiprintf_r+0xd4>
 8008700:	2300      	movs	r3, #0
 8008702:	3401      	adds	r4, #1
 8008704:	9305      	str	r3, [sp, #20]
 8008706:	4619      	mov	r1, r3
 8008708:	f04f 0c0a 	mov.w	ip, #10
 800870c:	4620      	mov	r0, r4
 800870e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008712:	3a30      	subs	r2, #48	; 0x30
 8008714:	2a09      	cmp	r2, #9
 8008716:	d903      	bls.n	8008720 <_svfiprintf_r+0x1a8>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0c5      	beq.n	80086a8 <_svfiprintf_r+0x130>
 800871c:	9105      	str	r1, [sp, #20]
 800871e:	e7c3      	b.n	80086a8 <_svfiprintf_r+0x130>
 8008720:	fb0c 2101 	mla	r1, ip, r1, r2
 8008724:	4604      	mov	r4, r0
 8008726:	2301      	movs	r3, #1
 8008728:	e7f0      	b.n	800870c <_svfiprintf_r+0x194>
 800872a:	ab03      	add	r3, sp, #12
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	462a      	mov	r2, r5
 8008730:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <_svfiprintf_r+0x1f8>)
 8008732:	a904      	add	r1, sp, #16
 8008734:	4638      	mov	r0, r7
 8008736:	f3af 8000 	nop.w
 800873a:	1c42      	adds	r2, r0, #1
 800873c:	4606      	mov	r6, r0
 800873e:	d1d6      	bne.n	80086ee <_svfiprintf_r+0x176>
 8008740:	89ab      	ldrh	r3, [r5, #12]
 8008742:	065b      	lsls	r3, r3, #25
 8008744:	f53f af2c 	bmi.w	80085a0 <_svfiprintf_r+0x28>
 8008748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800874a:	b01d      	add	sp, #116	; 0x74
 800874c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008750:	ab03      	add	r3, sp, #12
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	462a      	mov	r2, r5
 8008756:	4b06      	ldr	r3, [pc, #24]	; (8008770 <_svfiprintf_r+0x1f8>)
 8008758:	a904      	add	r1, sp, #16
 800875a:	4638      	mov	r0, r7
 800875c:	f000 f9d4 	bl	8008b08 <_printf_i>
 8008760:	e7eb      	b.n	800873a <_svfiprintf_r+0x1c2>
 8008762:	bf00      	nop
 8008764:	08009e42 	.word	0x08009e42
 8008768:	08009e4c 	.word	0x08009e4c
 800876c:	00000000 	.word	0x00000000
 8008770:	080084c1 	.word	0x080084c1
 8008774:	08009e48 	.word	0x08009e48

08008778 <__sfputc_r>:
 8008778:	6893      	ldr	r3, [r2, #8]
 800877a:	3b01      	subs	r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	b410      	push	{r4}
 8008780:	6093      	str	r3, [r2, #8]
 8008782:	da08      	bge.n	8008796 <__sfputc_r+0x1e>
 8008784:	6994      	ldr	r4, [r2, #24]
 8008786:	42a3      	cmp	r3, r4
 8008788:	db01      	blt.n	800878e <__sfputc_r+0x16>
 800878a:	290a      	cmp	r1, #10
 800878c:	d103      	bne.n	8008796 <__sfputc_r+0x1e>
 800878e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008792:	f000 baef 	b.w	8008d74 <__swbuf_r>
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	1c58      	adds	r0, r3, #1
 800879a:	6010      	str	r0, [r2, #0]
 800879c:	7019      	strb	r1, [r3, #0]
 800879e:	4608      	mov	r0, r1
 80087a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <__sfputs_r>:
 80087a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a8:	4606      	mov	r6, r0
 80087aa:	460f      	mov	r7, r1
 80087ac:	4614      	mov	r4, r2
 80087ae:	18d5      	adds	r5, r2, r3
 80087b0:	42ac      	cmp	r4, r5
 80087b2:	d101      	bne.n	80087b8 <__sfputs_r+0x12>
 80087b4:	2000      	movs	r0, #0
 80087b6:	e007      	b.n	80087c8 <__sfputs_r+0x22>
 80087b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087bc:	463a      	mov	r2, r7
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff ffda 	bl	8008778 <__sfputc_r>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d1f3      	bne.n	80087b0 <__sfputs_r+0xa>
 80087c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087cc <_vfiprintf_r>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	460d      	mov	r5, r1
 80087d2:	b09d      	sub	sp, #116	; 0x74
 80087d4:	4614      	mov	r4, r2
 80087d6:	4698      	mov	r8, r3
 80087d8:	4606      	mov	r6, r0
 80087da:	b118      	cbz	r0, 80087e4 <_vfiprintf_r+0x18>
 80087dc:	6983      	ldr	r3, [r0, #24]
 80087de:	b90b      	cbnz	r3, 80087e4 <_vfiprintf_r+0x18>
 80087e0:	f000 fcaa 	bl	8009138 <__sinit>
 80087e4:	4b89      	ldr	r3, [pc, #548]	; (8008a0c <_vfiprintf_r+0x240>)
 80087e6:	429d      	cmp	r5, r3
 80087e8:	d11b      	bne.n	8008822 <_vfiprintf_r+0x56>
 80087ea:	6875      	ldr	r5, [r6, #4]
 80087ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ee:	07d9      	lsls	r1, r3, #31
 80087f0:	d405      	bmi.n	80087fe <_vfiprintf_r+0x32>
 80087f2:	89ab      	ldrh	r3, [r5, #12]
 80087f4:	059a      	lsls	r2, r3, #22
 80087f6:	d402      	bmi.n	80087fe <_vfiprintf_r+0x32>
 80087f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087fa:	f000 fd3b 	bl	8009274 <__retarget_lock_acquire_recursive>
 80087fe:	89ab      	ldrh	r3, [r5, #12]
 8008800:	071b      	lsls	r3, r3, #28
 8008802:	d501      	bpl.n	8008808 <_vfiprintf_r+0x3c>
 8008804:	692b      	ldr	r3, [r5, #16]
 8008806:	b9eb      	cbnz	r3, 8008844 <_vfiprintf_r+0x78>
 8008808:	4629      	mov	r1, r5
 800880a:	4630      	mov	r0, r6
 800880c:	f000 fb04 	bl	8008e18 <__swsetup_r>
 8008810:	b1c0      	cbz	r0, 8008844 <_vfiprintf_r+0x78>
 8008812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008814:	07dc      	lsls	r4, r3, #31
 8008816:	d50e      	bpl.n	8008836 <_vfiprintf_r+0x6a>
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	b01d      	add	sp, #116	; 0x74
 800881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008822:	4b7b      	ldr	r3, [pc, #492]	; (8008a10 <_vfiprintf_r+0x244>)
 8008824:	429d      	cmp	r5, r3
 8008826:	d101      	bne.n	800882c <_vfiprintf_r+0x60>
 8008828:	68b5      	ldr	r5, [r6, #8]
 800882a:	e7df      	b.n	80087ec <_vfiprintf_r+0x20>
 800882c:	4b79      	ldr	r3, [pc, #484]	; (8008a14 <_vfiprintf_r+0x248>)
 800882e:	429d      	cmp	r5, r3
 8008830:	bf08      	it	eq
 8008832:	68f5      	ldreq	r5, [r6, #12]
 8008834:	e7da      	b.n	80087ec <_vfiprintf_r+0x20>
 8008836:	89ab      	ldrh	r3, [r5, #12]
 8008838:	0598      	lsls	r0, r3, #22
 800883a:	d4ed      	bmi.n	8008818 <_vfiprintf_r+0x4c>
 800883c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800883e:	f000 fd1a 	bl	8009276 <__retarget_lock_release_recursive>
 8008842:	e7e9      	b.n	8008818 <_vfiprintf_r+0x4c>
 8008844:	2300      	movs	r3, #0
 8008846:	9309      	str	r3, [sp, #36]	; 0x24
 8008848:	2320      	movs	r3, #32
 800884a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800884e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008852:	2330      	movs	r3, #48	; 0x30
 8008854:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a18 <_vfiprintf_r+0x24c>
 8008858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800885c:	f04f 0901 	mov.w	r9, #1
 8008860:	4623      	mov	r3, r4
 8008862:	469a      	mov	sl, r3
 8008864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008868:	b10a      	cbz	r2, 800886e <_vfiprintf_r+0xa2>
 800886a:	2a25      	cmp	r2, #37	; 0x25
 800886c:	d1f9      	bne.n	8008862 <_vfiprintf_r+0x96>
 800886e:	ebba 0b04 	subs.w	fp, sl, r4
 8008872:	d00b      	beq.n	800888c <_vfiprintf_r+0xc0>
 8008874:	465b      	mov	r3, fp
 8008876:	4622      	mov	r2, r4
 8008878:	4629      	mov	r1, r5
 800887a:	4630      	mov	r0, r6
 800887c:	f7ff ff93 	bl	80087a6 <__sfputs_r>
 8008880:	3001      	adds	r0, #1
 8008882:	f000 80aa 	beq.w	80089da <_vfiprintf_r+0x20e>
 8008886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008888:	445a      	add	r2, fp
 800888a:	9209      	str	r2, [sp, #36]	; 0x24
 800888c:	f89a 3000 	ldrb.w	r3, [sl]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 80a2 	beq.w	80089da <_vfiprintf_r+0x20e>
 8008896:	2300      	movs	r3, #0
 8008898:	f04f 32ff 	mov.w	r2, #4294967295
 800889c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a0:	f10a 0a01 	add.w	sl, sl, #1
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	9307      	str	r3, [sp, #28]
 80088a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ac:	931a      	str	r3, [sp, #104]	; 0x68
 80088ae:	4654      	mov	r4, sl
 80088b0:	2205      	movs	r2, #5
 80088b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b6:	4858      	ldr	r0, [pc, #352]	; (8008a18 <_vfiprintf_r+0x24c>)
 80088b8:	f7f7 fc92 	bl	80001e0 <memchr>
 80088bc:	9a04      	ldr	r2, [sp, #16]
 80088be:	b9d8      	cbnz	r0, 80088f8 <_vfiprintf_r+0x12c>
 80088c0:	06d1      	lsls	r1, r2, #27
 80088c2:	bf44      	itt	mi
 80088c4:	2320      	movmi	r3, #32
 80088c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ca:	0713      	lsls	r3, r2, #28
 80088cc:	bf44      	itt	mi
 80088ce:	232b      	movmi	r3, #43	; 0x2b
 80088d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d4:	f89a 3000 	ldrb.w	r3, [sl]
 80088d8:	2b2a      	cmp	r3, #42	; 0x2a
 80088da:	d015      	beq.n	8008908 <_vfiprintf_r+0x13c>
 80088dc:	9a07      	ldr	r2, [sp, #28]
 80088de:	4654      	mov	r4, sl
 80088e0:	2000      	movs	r0, #0
 80088e2:	f04f 0c0a 	mov.w	ip, #10
 80088e6:	4621      	mov	r1, r4
 80088e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ec:	3b30      	subs	r3, #48	; 0x30
 80088ee:	2b09      	cmp	r3, #9
 80088f0:	d94e      	bls.n	8008990 <_vfiprintf_r+0x1c4>
 80088f2:	b1b0      	cbz	r0, 8008922 <_vfiprintf_r+0x156>
 80088f4:	9207      	str	r2, [sp, #28]
 80088f6:	e014      	b.n	8008922 <_vfiprintf_r+0x156>
 80088f8:	eba0 0308 	sub.w	r3, r0, r8
 80088fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008900:	4313      	orrs	r3, r2
 8008902:	9304      	str	r3, [sp, #16]
 8008904:	46a2      	mov	sl, r4
 8008906:	e7d2      	b.n	80088ae <_vfiprintf_r+0xe2>
 8008908:	9b03      	ldr	r3, [sp, #12]
 800890a:	1d19      	adds	r1, r3, #4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	9103      	str	r1, [sp, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfbb      	ittet	lt
 8008914:	425b      	neglt	r3, r3
 8008916:	f042 0202 	orrlt.w	r2, r2, #2
 800891a:	9307      	strge	r3, [sp, #28]
 800891c:	9307      	strlt	r3, [sp, #28]
 800891e:	bfb8      	it	lt
 8008920:	9204      	strlt	r2, [sp, #16]
 8008922:	7823      	ldrb	r3, [r4, #0]
 8008924:	2b2e      	cmp	r3, #46	; 0x2e
 8008926:	d10c      	bne.n	8008942 <_vfiprintf_r+0x176>
 8008928:	7863      	ldrb	r3, [r4, #1]
 800892a:	2b2a      	cmp	r3, #42	; 0x2a
 800892c:	d135      	bne.n	800899a <_vfiprintf_r+0x1ce>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	9203      	str	r2, [sp, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfb8      	it	lt
 800893a:	f04f 33ff 	movlt.w	r3, #4294967295
 800893e:	3402      	adds	r4, #2
 8008940:	9305      	str	r3, [sp, #20]
 8008942:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a28 <_vfiprintf_r+0x25c>
 8008946:	7821      	ldrb	r1, [r4, #0]
 8008948:	2203      	movs	r2, #3
 800894a:	4650      	mov	r0, sl
 800894c:	f7f7 fc48 	bl	80001e0 <memchr>
 8008950:	b140      	cbz	r0, 8008964 <_vfiprintf_r+0x198>
 8008952:	2340      	movs	r3, #64	; 0x40
 8008954:	eba0 000a 	sub.w	r0, r0, sl
 8008958:	fa03 f000 	lsl.w	r0, r3, r0
 800895c:	9b04      	ldr	r3, [sp, #16]
 800895e:	4303      	orrs	r3, r0
 8008960:	3401      	adds	r4, #1
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008968:	482c      	ldr	r0, [pc, #176]	; (8008a1c <_vfiprintf_r+0x250>)
 800896a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800896e:	2206      	movs	r2, #6
 8008970:	f7f7 fc36 	bl	80001e0 <memchr>
 8008974:	2800      	cmp	r0, #0
 8008976:	d03f      	beq.n	80089f8 <_vfiprintf_r+0x22c>
 8008978:	4b29      	ldr	r3, [pc, #164]	; (8008a20 <_vfiprintf_r+0x254>)
 800897a:	bb1b      	cbnz	r3, 80089c4 <_vfiprintf_r+0x1f8>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	3307      	adds	r3, #7
 8008980:	f023 0307 	bic.w	r3, r3, #7
 8008984:	3308      	adds	r3, #8
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898a:	443b      	add	r3, r7
 800898c:	9309      	str	r3, [sp, #36]	; 0x24
 800898e:	e767      	b.n	8008860 <_vfiprintf_r+0x94>
 8008990:	fb0c 3202 	mla	r2, ip, r2, r3
 8008994:	460c      	mov	r4, r1
 8008996:	2001      	movs	r0, #1
 8008998:	e7a5      	b.n	80088e6 <_vfiprintf_r+0x11a>
 800899a:	2300      	movs	r3, #0
 800899c:	3401      	adds	r4, #1
 800899e:	9305      	str	r3, [sp, #20]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4620      	mov	r0, r4
 80089a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ac:	3a30      	subs	r2, #48	; 0x30
 80089ae:	2a09      	cmp	r2, #9
 80089b0:	d903      	bls.n	80089ba <_vfiprintf_r+0x1ee>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0c5      	beq.n	8008942 <_vfiprintf_r+0x176>
 80089b6:	9105      	str	r1, [sp, #20]
 80089b8:	e7c3      	b.n	8008942 <_vfiprintf_r+0x176>
 80089ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80089be:	4604      	mov	r4, r0
 80089c0:	2301      	movs	r3, #1
 80089c2:	e7f0      	b.n	80089a6 <_vfiprintf_r+0x1da>
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <_vfiprintf_r+0x258>)
 80089cc:	a904      	add	r1, sp, #16
 80089ce:	4630      	mov	r0, r6
 80089d0:	f3af 8000 	nop.w
 80089d4:	4607      	mov	r7, r0
 80089d6:	1c78      	adds	r0, r7, #1
 80089d8:	d1d6      	bne.n	8008988 <_vfiprintf_r+0x1bc>
 80089da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089dc:	07d9      	lsls	r1, r3, #31
 80089de:	d405      	bmi.n	80089ec <_vfiprintf_r+0x220>
 80089e0:	89ab      	ldrh	r3, [r5, #12]
 80089e2:	059a      	lsls	r2, r3, #22
 80089e4:	d402      	bmi.n	80089ec <_vfiprintf_r+0x220>
 80089e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089e8:	f000 fc45 	bl	8009276 <__retarget_lock_release_recursive>
 80089ec:	89ab      	ldrh	r3, [r5, #12]
 80089ee:	065b      	lsls	r3, r3, #25
 80089f0:	f53f af12 	bmi.w	8008818 <_vfiprintf_r+0x4c>
 80089f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089f6:	e711      	b.n	800881c <_vfiprintf_r+0x50>
 80089f8:	ab03      	add	r3, sp, #12
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	462a      	mov	r2, r5
 80089fe:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <_vfiprintf_r+0x258>)
 8008a00:	a904      	add	r1, sp, #16
 8008a02:	4630      	mov	r0, r6
 8008a04:	f000 f880 	bl	8008b08 <_printf_i>
 8008a08:	e7e4      	b.n	80089d4 <_vfiprintf_r+0x208>
 8008a0a:	bf00      	nop
 8008a0c:	08009e98 	.word	0x08009e98
 8008a10:	08009eb8 	.word	0x08009eb8
 8008a14:	08009e78 	.word	0x08009e78
 8008a18:	08009e42 	.word	0x08009e42
 8008a1c:	08009e4c 	.word	0x08009e4c
 8008a20:	00000000 	.word	0x00000000
 8008a24:	080087a7 	.word	0x080087a7
 8008a28:	08009e48 	.word	0x08009e48

08008a2c <_printf_common>:
 8008a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	4616      	mov	r6, r2
 8008a32:	4699      	mov	r9, r3
 8008a34:	688a      	ldr	r2, [r1, #8]
 8008a36:	690b      	ldr	r3, [r1, #16]
 8008a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	bfb8      	it	lt
 8008a40:	4613      	movlt	r3, r2
 8008a42:	6033      	str	r3, [r6, #0]
 8008a44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a48:	4607      	mov	r7, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	b10a      	cbz	r2, 8008a52 <_printf_common+0x26>
 8008a4e:	3301      	adds	r3, #1
 8008a50:	6033      	str	r3, [r6, #0]
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	0699      	lsls	r1, r3, #26
 8008a56:	bf42      	ittt	mi
 8008a58:	6833      	ldrmi	r3, [r6, #0]
 8008a5a:	3302      	addmi	r3, #2
 8008a5c:	6033      	strmi	r3, [r6, #0]
 8008a5e:	6825      	ldr	r5, [r4, #0]
 8008a60:	f015 0506 	ands.w	r5, r5, #6
 8008a64:	d106      	bne.n	8008a74 <_printf_common+0x48>
 8008a66:	f104 0a19 	add.w	sl, r4, #25
 8008a6a:	68e3      	ldr	r3, [r4, #12]
 8008a6c:	6832      	ldr	r2, [r6, #0]
 8008a6e:	1a9b      	subs	r3, r3, r2
 8008a70:	42ab      	cmp	r3, r5
 8008a72:	dc26      	bgt.n	8008ac2 <_printf_common+0x96>
 8008a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a78:	1e13      	subs	r3, r2, #0
 8008a7a:	6822      	ldr	r2, [r4, #0]
 8008a7c:	bf18      	it	ne
 8008a7e:	2301      	movne	r3, #1
 8008a80:	0692      	lsls	r2, r2, #26
 8008a82:	d42b      	bmi.n	8008adc <_printf_common+0xb0>
 8008a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a88:	4649      	mov	r1, r9
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	47c0      	blx	r8
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d01e      	beq.n	8008ad0 <_printf_common+0xa4>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	68e5      	ldr	r5, [r4, #12]
 8008a96:	6832      	ldr	r2, [r6, #0]
 8008a98:	f003 0306 	and.w	r3, r3, #6
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	bf08      	it	eq
 8008aa0:	1aad      	subeq	r5, r5, r2
 8008aa2:	68a3      	ldr	r3, [r4, #8]
 8008aa4:	6922      	ldr	r2, [r4, #16]
 8008aa6:	bf0c      	ite	eq
 8008aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aac:	2500      	movne	r5, #0
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	bfc4      	itt	gt
 8008ab2:	1a9b      	subgt	r3, r3, r2
 8008ab4:	18ed      	addgt	r5, r5, r3
 8008ab6:	2600      	movs	r6, #0
 8008ab8:	341a      	adds	r4, #26
 8008aba:	42b5      	cmp	r5, r6
 8008abc:	d11a      	bne.n	8008af4 <_printf_common+0xc8>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e008      	b.n	8008ad4 <_printf_common+0xa8>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4652      	mov	r2, sl
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	4638      	mov	r0, r7
 8008aca:	47c0      	blx	r8
 8008acc:	3001      	adds	r0, #1
 8008ace:	d103      	bne.n	8008ad8 <_printf_common+0xac>
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad8:	3501      	adds	r5, #1
 8008ada:	e7c6      	b.n	8008a6a <_printf_common+0x3e>
 8008adc:	18e1      	adds	r1, r4, r3
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	2030      	movs	r0, #48	; 0x30
 8008ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ae6:	4422      	add	r2, r4
 8008ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008af0:	3302      	adds	r3, #2
 8008af2:	e7c7      	b.n	8008a84 <_printf_common+0x58>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4622      	mov	r2, r4
 8008af8:	4649      	mov	r1, r9
 8008afa:	4638      	mov	r0, r7
 8008afc:	47c0      	blx	r8
 8008afe:	3001      	adds	r0, #1
 8008b00:	d0e6      	beq.n	8008ad0 <_printf_common+0xa4>
 8008b02:	3601      	adds	r6, #1
 8008b04:	e7d9      	b.n	8008aba <_printf_common+0x8e>
	...

08008b08 <_printf_i>:
 8008b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b0c:	7e0f      	ldrb	r7, [r1, #24]
 8008b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b10:	2f78      	cmp	r7, #120	; 0x78
 8008b12:	4691      	mov	r9, r2
 8008b14:	4680      	mov	r8, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	469a      	mov	sl, r3
 8008b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b1e:	d807      	bhi.n	8008b30 <_printf_i+0x28>
 8008b20:	2f62      	cmp	r7, #98	; 0x62
 8008b22:	d80a      	bhi.n	8008b3a <_printf_i+0x32>
 8008b24:	2f00      	cmp	r7, #0
 8008b26:	f000 80d8 	beq.w	8008cda <_printf_i+0x1d2>
 8008b2a:	2f58      	cmp	r7, #88	; 0x58
 8008b2c:	f000 80a3 	beq.w	8008c76 <_printf_i+0x16e>
 8008b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b38:	e03a      	b.n	8008bb0 <_printf_i+0xa8>
 8008b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b3e:	2b15      	cmp	r3, #21
 8008b40:	d8f6      	bhi.n	8008b30 <_printf_i+0x28>
 8008b42:	a101      	add	r1, pc, #4	; (adr r1, 8008b48 <_printf_i+0x40>)
 8008b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b48:	08008ba1 	.word	0x08008ba1
 8008b4c:	08008bb5 	.word	0x08008bb5
 8008b50:	08008b31 	.word	0x08008b31
 8008b54:	08008b31 	.word	0x08008b31
 8008b58:	08008b31 	.word	0x08008b31
 8008b5c:	08008b31 	.word	0x08008b31
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008b31 	.word	0x08008b31
 8008b68:	08008b31 	.word	0x08008b31
 8008b6c:	08008b31 	.word	0x08008b31
 8008b70:	08008b31 	.word	0x08008b31
 8008b74:	08008cc1 	.word	0x08008cc1
 8008b78:	08008be5 	.word	0x08008be5
 8008b7c:	08008ca3 	.word	0x08008ca3
 8008b80:	08008b31 	.word	0x08008b31
 8008b84:	08008b31 	.word	0x08008b31
 8008b88:	08008ce3 	.word	0x08008ce3
 8008b8c:	08008b31 	.word	0x08008b31
 8008b90:	08008be5 	.word	0x08008be5
 8008b94:	08008b31 	.word	0x08008b31
 8008b98:	08008b31 	.word	0x08008b31
 8008b9c:	08008cab 	.word	0x08008cab
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	1d1a      	adds	r2, r3, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	602a      	str	r2, [r5, #0]
 8008ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e0a3      	b.n	8008cfc <_printf_i+0x1f4>
 8008bb4:	6820      	ldr	r0, [r4, #0]
 8008bb6:	6829      	ldr	r1, [r5, #0]
 8008bb8:	0606      	lsls	r6, r0, #24
 8008bba:	f101 0304 	add.w	r3, r1, #4
 8008bbe:	d50a      	bpl.n	8008bd6 <_printf_i+0xce>
 8008bc0:	680e      	ldr	r6, [r1, #0]
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	2e00      	cmp	r6, #0
 8008bc6:	da03      	bge.n	8008bd0 <_printf_i+0xc8>
 8008bc8:	232d      	movs	r3, #45	; 0x2d
 8008bca:	4276      	negs	r6, r6
 8008bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bd0:	485e      	ldr	r0, [pc, #376]	; (8008d4c <_printf_i+0x244>)
 8008bd2:	230a      	movs	r3, #10
 8008bd4:	e019      	b.n	8008c0a <_printf_i+0x102>
 8008bd6:	680e      	ldr	r6, [r1, #0]
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bde:	bf18      	it	ne
 8008be0:	b236      	sxthne	r6, r6
 8008be2:	e7ef      	b.n	8008bc4 <_printf_i+0xbc>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	6820      	ldr	r0, [r4, #0]
 8008be8:	1d19      	adds	r1, r3, #4
 8008bea:	6029      	str	r1, [r5, #0]
 8008bec:	0601      	lsls	r1, r0, #24
 8008bee:	d501      	bpl.n	8008bf4 <_printf_i+0xec>
 8008bf0:	681e      	ldr	r6, [r3, #0]
 8008bf2:	e002      	b.n	8008bfa <_printf_i+0xf2>
 8008bf4:	0646      	lsls	r6, r0, #25
 8008bf6:	d5fb      	bpl.n	8008bf0 <_printf_i+0xe8>
 8008bf8:	881e      	ldrh	r6, [r3, #0]
 8008bfa:	4854      	ldr	r0, [pc, #336]	; (8008d4c <_printf_i+0x244>)
 8008bfc:	2f6f      	cmp	r7, #111	; 0x6f
 8008bfe:	bf0c      	ite	eq
 8008c00:	2308      	moveq	r3, #8
 8008c02:	230a      	movne	r3, #10
 8008c04:	2100      	movs	r1, #0
 8008c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c0a:	6865      	ldr	r5, [r4, #4]
 8008c0c:	60a5      	str	r5, [r4, #8]
 8008c0e:	2d00      	cmp	r5, #0
 8008c10:	bfa2      	ittt	ge
 8008c12:	6821      	ldrge	r1, [r4, #0]
 8008c14:	f021 0104 	bicge.w	r1, r1, #4
 8008c18:	6021      	strge	r1, [r4, #0]
 8008c1a:	b90e      	cbnz	r6, 8008c20 <_printf_i+0x118>
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	d04d      	beq.n	8008cbc <_printf_i+0x1b4>
 8008c20:	4615      	mov	r5, r2
 8008c22:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c26:	fb03 6711 	mls	r7, r3, r1, r6
 8008c2a:	5dc7      	ldrb	r7, [r0, r7]
 8008c2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c30:	4637      	mov	r7, r6
 8008c32:	42bb      	cmp	r3, r7
 8008c34:	460e      	mov	r6, r1
 8008c36:	d9f4      	bls.n	8008c22 <_printf_i+0x11a>
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d10b      	bne.n	8008c54 <_printf_i+0x14c>
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	07de      	lsls	r6, r3, #31
 8008c40:	d508      	bpl.n	8008c54 <_printf_i+0x14c>
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	6861      	ldr	r1, [r4, #4]
 8008c46:	4299      	cmp	r1, r3
 8008c48:	bfde      	ittt	le
 8008c4a:	2330      	movle	r3, #48	; 0x30
 8008c4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c54:	1b52      	subs	r2, r2, r5
 8008c56:	6122      	str	r2, [r4, #16]
 8008c58:	f8cd a000 	str.w	sl, [sp]
 8008c5c:	464b      	mov	r3, r9
 8008c5e:	aa03      	add	r2, sp, #12
 8008c60:	4621      	mov	r1, r4
 8008c62:	4640      	mov	r0, r8
 8008c64:	f7ff fee2 	bl	8008a2c <_printf_common>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d14c      	bne.n	8008d06 <_printf_i+0x1fe>
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	b004      	add	sp, #16
 8008c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c76:	4835      	ldr	r0, [pc, #212]	; (8008d4c <_printf_i+0x244>)
 8008c78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c7c:	6829      	ldr	r1, [r5, #0]
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c84:	6029      	str	r1, [r5, #0]
 8008c86:	061d      	lsls	r5, r3, #24
 8008c88:	d514      	bpl.n	8008cb4 <_printf_i+0x1ac>
 8008c8a:	07df      	lsls	r7, r3, #31
 8008c8c:	bf44      	itt	mi
 8008c8e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c92:	6023      	strmi	r3, [r4, #0]
 8008c94:	b91e      	cbnz	r6, 8008c9e <_printf_i+0x196>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	f023 0320 	bic.w	r3, r3, #32
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	2310      	movs	r3, #16
 8008ca0:	e7b0      	b.n	8008c04 <_printf_i+0xfc>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	f043 0320 	orr.w	r3, r3, #32
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	2378      	movs	r3, #120	; 0x78
 8008cac:	4828      	ldr	r0, [pc, #160]	; (8008d50 <_printf_i+0x248>)
 8008cae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cb2:	e7e3      	b.n	8008c7c <_printf_i+0x174>
 8008cb4:	0659      	lsls	r1, r3, #25
 8008cb6:	bf48      	it	mi
 8008cb8:	b2b6      	uxthmi	r6, r6
 8008cba:	e7e6      	b.n	8008c8a <_printf_i+0x182>
 8008cbc:	4615      	mov	r5, r2
 8008cbe:	e7bb      	b.n	8008c38 <_printf_i+0x130>
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	6826      	ldr	r6, [r4, #0]
 8008cc4:	6961      	ldr	r1, [r4, #20]
 8008cc6:	1d18      	adds	r0, r3, #4
 8008cc8:	6028      	str	r0, [r5, #0]
 8008cca:	0635      	lsls	r5, r6, #24
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	d501      	bpl.n	8008cd4 <_printf_i+0x1cc>
 8008cd0:	6019      	str	r1, [r3, #0]
 8008cd2:	e002      	b.n	8008cda <_printf_i+0x1d2>
 8008cd4:	0670      	lsls	r0, r6, #25
 8008cd6:	d5fb      	bpl.n	8008cd0 <_printf_i+0x1c8>
 8008cd8:	8019      	strh	r1, [r3, #0]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6123      	str	r3, [r4, #16]
 8008cde:	4615      	mov	r5, r2
 8008ce0:	e7ba      	b.n	8008c58 <_printf_i+0x150>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	1d1a      	adds	r2, r3, #4
 8008ce6:	602a      	str	r2, [r5, #0]
 8008ce8:	681d      	ldr	r5, [r3, #0]
 8008cea:	6862      	ldr	r2, [r4, #4]
 8008cec:	2100      	movs	r1, #0
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f7f7 fa76 	bl	80001e0 <memchr>
 8008cf4:	b108      	cbz	r0, 8008cfa <_printf_i+0x1f2>
 8008cf6:	1b40      	subs	r0, r0, r5
 8008cf8:	6060      	str	r0, [r4, #4]
 8008cfa:	6863      	ldr	r3, [r4, #4]
 8008cfc:	6123      	str	r3, [r4, #16]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d04:	e7a8      	b.n	8008c58 <_printf_i+0x150>
 8008d06:	6923      	ldr	r3, [r4, #16]
 8008d08:	462a      	mov	r2, r5
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	47d0      	blx	sl
 8008d10:	3001      	adds	r0, #1
 8008d12:	d0ab      	beq.n	8008c6c <_printf_i+0x164>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	079b      	lsls	r3, r3, #30
 8008d18:	d413      	bmi.n	8008d42 <_printf_i+0x23a>
 8008d1a:	68e0      	ldr	r0, [r4, #12]
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	4298      	cmp	r0, r3
 8008d20:	bfb8      	it	lt
 8008d22:	4618      	movlt	r0, r3
 8008d24:	e7a4      	b.n	8008c70 <_printf_i+0x168>
 8008d26:	2301      	movs	r3, #1
 8008d28:	4632      	mov	r2, r6
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	47d0      	blx	sl
 8008d30:	3001      	adds	r0, #1
 8008d32:	d09b      	beq.n	8008c6c <_printf_i+0x164>
 8008d34:	3501      	adds	r5, #1
 8008d36:	68e3      	ldr	r3, [r4, #12]
 8008d38:	9903      	ldr	r1, [sp, #12]
 8008d3a:	1a5b      	subs	r3, r3, r1
 8008d3c:	42ab      	cmp	r3, r5
 8008d3e:	dcf2      	bgt.n	8008d26 <_printf_i+0x21e>
 8008d40:	e7eb      	b.n	8008d1a <_printf_i+0x212>
 8008d42:	2500      	movs	r5, #0
 8008d44:	f104 0619 	add.w	r6, r4, #25
 8008d48:	e7f5      	b.n	8008d36 <_printf_i+0x22e>
 8008d4a:	bf00      	nop
 8008d4c:	08009e53 	.word	0x08009e53
 8008d50:	08009e64 	.word	0x08009e64

08008d54 <_sbrk_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d06      	ldr	r5, [pc, #24]	; (8008d70 <_sbrk_r+0x1c>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	602b      	str	r3, [r5, #0]
 8008d60:	f7fa fb88 	bl	8003474 <_sbrk>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_sbrk_r+0x1a>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_sbrk_r+0x1a>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	200009f4 	.word	0x200009f4

08008d74 <__swbuf_r>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	460e      	mov	r6, r1
 8008d78:	4614      	mov	r4, r2
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	b118      	cbz	r0, 8008d86 <__swbuf_r+0x12>
 8008d7e:	6983      	ldr	r3, [r0, #24]
 8008d80:	b90b      	cbnz	r3, 8008d86 <__swbuf_r+0x12>
 8008d82:	f000 f9d9 	bl	8009138 <__sinit>
 8008d86:	4b21      	ldr	r3, [pc, #132]	; (8008e0c <__swbuf_r+0x98>)
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	d12b      	bne.n	8008de4 <__swbuf_r+0x70>
 8008d8c:	686c      	ldr	r4, [r5, #4]
 8008d8e:	69a3      	ldr	r3, [r4, #24]
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	071a      	lsls	r2, r3, #28
 8008d96:	d52f      	bpl.n	8008df8 <__swbuf_r+0x84>
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	b36b      	cbz	r3, 8008df8 <__swbuf_r+0x84>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	1ac0      	subs	r0, r0, r3
 8008da2:	6963      	ldr	r3, [r4, #20]
 8008da4:	b2f6      	uxtb	r6, r6
 8008da6:	4283      	cmp	r3, r0
 8008da8:	4637      	mov	r7, r6
 8008daa:	dc04      	bgt.n	8008db6 <__swbuf_r+0x42>
 8008dac:	4621      	mov	r1, r4
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f92e 	bl	8009010 <_fflush_r>
 8008db4:	bb30      	cbnz	r0, 8008e04 <__swbuf_r+0x90>
 8008db6:	68a3      	ldr	r3, [r4, #8]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	60a3      	str	r3, [r4, #8]
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	6022      	str	r2, [r4, #0]
 8008dc2:	701e      	strb	r6, [r3, #0]
 8008dc4:	6963      	ldr	r3, [r4, #20]
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	4283      	cmp	r3, r0
 8008dca:	d004      	beq.n	8008dd6 <__swbuf_r+0x62>
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	07db      	lsls	r3, r3, #31
 8008dd0:	d506      	bpl.n	8008de0 <__swbuf_r+0x6c>
 8008dd2:	2e0a      	cmp	r6, #10
 8008dd4:	d104      	bne.n	8008de0 <__swbuf_r+0x6c>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f919 	bl	8009010 <_fflush_r>
 8008dde:	b988      	cbnz	r0, 8008e04 <__swbuf_r+0x90>
 8008de0:	4638      	mov	r0, r7
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <__swbuf_r+0x9c>)
 8008de6:	429c      	cmp	r4, r3
 8008de8:	d101      	bne.n	8008dee <__swbuf_r+0x7a>
 8008dea:	68ac      	ldr	r4, [r5, #8]
 8008dec:	e7cf      	b.n	8008d8e <__swbuf_r+0x1a>
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <__swbuf_r+0xa0>)
 8008df0:	429c      	cmp	r4, r3
 8008df2:	bf08      	it	eq
 8008df4:	68ec      	ldreq	r4, [r5, #12]
 8008df6:	e7ca      	b.n	8008d8e <__swbuf_r+0x1a>
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f000 f80c 	bl	8008e18 <__swsetup_r>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d0cb      	beq.n	8008d9c <__swbuf_r+0x28>
 8008e04:	f04f 37ff 	mov.w	r7, #4294967295
 8008e08:	e7ea      	b.n	8008de0 <__swbuf_r+0x6c>
 8008e0a:	bf00      	nop
 8008e0c:	08009e98 	.word	0x08009e98
 8008e10:	08009eb8 	.word	0x08009eb8
 8008e14:	08009e78 	.word	0x08009e78

08008e18 <__swsetup_r>:
 8008e18:	4b32      	ldr	r3, [pc, #200]	; (8008ee4 <__swsetup_r+0xcc>)
 8008e1a:	b570      	push	{r4, r5, r6, lr}
 8008e1c:	681d      	ldr	r5, [r3, #0]
 8008e1e:	4606      	mov	r6, r0
 8008e20:	460c      	mov	r4, r1
 8008e22:	b125      	cbz	r5, 8008e2e <__swsetup_r+0x16>
 8008e24:	69ab      	ldr	r3, [r5, #24]
 8008e26:	b913      	cbnz	r3, 8008e2e <__swsetup_r+0x16>
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 f985 	bl	8009138 <__sinit>
 8008e2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ee8 <__swsetup_r+0xd0>)
 8008e30:	429c      	cmp	r4, r3
 8008e32:	d10f      	bne.n	8008e54 <__swsetup_r+0x3c>
 8008e34:	686c      	ldr	r4, [r5, #4]
 8008e36:	89a3      	ldrh	r3, [r4, #12]
 8008e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e3c:	0719      	lsls	r1, r3, #28
 8008e3e:	d42c      	bmi.n	8008e9a <__swsetup_r+0x82>
 8008e40:	06dd      	lsls	r5, r3, #27
 8008e42:	d411      	bmi.n	8008e68 <__swsetup_r+0x50>
 8008e44:	2309      	movs	r3, #9
 8008e46:	6033      	str	r3, [r6, #0]
 8008e48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e4c:	81a3      	strh	r3, [r4, #12]
 8008e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e52:	e03e      	b.n	8008ed2 <__swsetup_r+0xba>
 8008e54:	4b25      	ldr	r3, [pc, #148]	; (8008eec <__swsetup_r+0xd4>)
 8008e56:	429c      	cmp	r4, r3
 8008e58:	d101      	bne.n	8008e5e <__swsetup_r+0x46>
 8008e5a:	68ac      	ldr	r4, [r5, #8]
 8008e5c:	e7eb      	b.n	8008e36 <__swsetup_r+0x1e>
 8008e5e:	4b24      	ldr	r3, [pc, #144]	; (8008ef0 <__swsetup_r+0xd8>)
 8008e60:	429c      	cmp	r4, r3
 8008e62:	bf08      	it	eq
 8008e64:	68ec      	ldreq	r4, [r5, #12]
 8008e66:	e7e6      	b.n	8008e36 <__swsetup_r+0x1e>
 8008e68:	0758      	lsls	r0, r3, #29
 8008e6a:	d512      	bpl.n	8008e92 <__swsetup_r+0x7a>
 8008e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e6e:	b141      	cbz	r1, 8008e82 <__swsetup_r+0x6a>
 8008e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e74:	4299      	cmp	r1, r3
 8008e76:	d002      	beq.n	8008e7e <__swsetup_r+0x66>
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff fa41 	bl	8008300 <_free_r>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6363      	str	r3, [r4, #52]	; 0x34
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6063      	str	r3, [r4, #4]
 8008e8e:	6923      	ldr	r3, [r4, #16]
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f043 0308 	orr.w	r3, r3, #8
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	b94b      	cbnz	r3, 8008eb2 <__swsetup_r+0x9a>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea8:	d003      	beq.n	8008eb2 <__swsetup_r+0x9a>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4630      	mov	r0, r6
 8008eae:	f000 fa09 	bl	80092c4 <__smakebuf_r>
 8008eb2:	89a0      	ldrh	r0, [r4, #12]
 8008eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eb8:	f010 0301 	ands.w	r3, r0, #1
 8008ebc:	d00a      	beq.n	8008ed4 <__swsetup_r+0xbc>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60a3      	str	r3, [r4, #8]
 8008ec2:	6963      	ldr	r3, [r4, #20]
 8008ec4:	425b      	negs	r3, r3
 8008ec6:	61a3      	str	r3, [r4, #24]
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	b943      	cbnz	r3, 8008ede <__swsetup_r+0xc6>
 8008ecc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ed0:	d1ba      	bne.n	8008e48 <__swsetup_r+0x30>
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}
 8008ed4:	0781      	lsls	r1, r0, #30
 8008ed6:	bf58      	it	pl
 8008ed8:	6963      	ldrpl	r3, [r4, #20]
 8008eda:	60a3      	str	r3, [r4, #8]
 8008edc:	e7f4      	b.n	8008ec8 <__swsetup_r+0xb0>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e7f7      	b.n	8008ed2 <__swsetup_r+0xba>
 8008ee2:	bf00      	nop
 8008ee4:	20000074 	.word	0x20000074
 8008ee8:	08009e98 	.word	0x08009e98
 8008eec:	08009eb8 	.word	0x08009eb8
 8008ef0:	08009e78 	.word	0x08009e78

08008ef4 <abort>:
 8008ef4:	b508      	push	{r3, lr}
 8008ef6:	2006      	movs	r0, #6
 8008ef8:	f000 faa2 	bl	8009440 <raise>
 8008efc:	2001      	movs	r0, #1
 8008efe:	f7fa fa41 	bl	8003384 <_exit>
	...

08008f04 <__sflush_r>:
 8008f04:	898a      	ldrh	r2, [r1, #12]
 8008f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	0710      	lsls	r0, r2, #28
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d458      	bmi.n	8008fc4 <__sflush_r+0xc0>
 8008f12:	684b      	ldr	r3, [r1, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dc05      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dc02      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	d0f9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f30:	682f      	ldr	r7, [r5, #0]
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	d032      	beq.n	8008f9c <__sflush_r+0x98>
 8008f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	075a      	lsls	r2, r3, #29
 8008f3c:	d505      	bpl.n	8008f4a <__sflush_r+0x46>
 8008f3e:	6863      	ldr	r3, [r4, #4]
 8008f40:	1ac0      	subs	r0, r0, r3
 8008f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f44:	b10b      	cbz	r3, 8008f4a <__sflush_r+0x46>
 8008f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f48:	1ac0      	subs	r0, r0, r3
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f50:	6a21      	ldr	r1, [r4, #32]
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b0      	blx	r6
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	d106      	bne.n	8008f6a <__sflush_r+0x66>
 8008f5c:	6829      	ldr	r1, [r5, #0]
 8008f5e:	291d      	cmp	r1, #29
 8008f60:	d82c      	bhi.n	8008fbc <__sflush_r+0xb8>
 8008f62:	4a2a      	ldr	r2, [pc, #168]	; (800900c <__sflush_r+0x108>)
 8008f64:	40ca      	lsrs	r2, r1
 8008f66:	07d6      	lsls	r6, r2, #31
 8008f68:	d528      	bpl.n	8008fbc <__sflush_r+0xb8>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	6062      	str	r2, [r4, #4]
 8008f6e:	04d9      	lsls	r1, r3, #19
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	d504      	bpl.n	8008f80 <__sflush_r+0x7c>
 8008f76:	1c42      	adds	r2, r0, #1
 8008f78:	d101      	bne.n	8008f7e <__sflush_r+0x7a>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	b903      	cbnz	r3, 8008f80 <__sflush_r+0x7c>
 8008f7e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f82:	602f      	str	r7, [r5, #0]
 8008f84:	2900      	cmp	r1, #0
 8008f86:	d0ca      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d002      	beq.n	8008f96 <__sflush_r+0x92>
 8008f90:	4628      	mov	r0, r5
 8008f92:	f7ff f9b5 	bl	8008300 <_free_r>
 8008f96:	2000      	movs	r0, #0
 8008f98:	6360      	str	r0, [r4, #52]	; 0x34
 8008f9a:	e7c1      	b.n	8008f20 <__sflush_r+0x1c>
 8008f9c:	6a21      	ldr	r1, [r4, #32]
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b0      	blx	r6
 8008fa4:	1c41      	adds	r1, r0, #1
 8008fa6:	d1c7      	bne.n	8008f38 <__sflush_r+0x34>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0c4      	beq.n	8008f38 <__sflush_r+0x34>
 8008fae:	2b1d      	cmp	r3, #29
 8008fb0:	d001      	beq.n	8008fb6 <__sflush_r+0xb2>
 8008fb2:	2b16      	cmp	r3, #22
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0xb6>
 8008fb6:	602f      	str	r7, [r5, #0]
 8008fb8:	e7b1      	b.n	8008f1e <__sflush_r+0x1a>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7ad      	b.n	8008f20 <__sflush_r+0x1c>
 8008fc4:	690f      	ldr	r7, [r1, #16]
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	d0a9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008fca:	0793      	lsls	r3, r2, #30
 8008fcc:	680e      	ldr	r6, [r1, #0]
 8008fce:	bf08      	it	eq
 8008fd0:	694b      	ldreq	r3, [r1, #20]
 8008fd2:	600f      	str	r7, [r1, #0]
 8008fd4:	bf18      	it	ne
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	eba6 0807 	sub.w	r8, r6, r7
 8008fdc:	608b      	str	r3, [r1, #8]
 8008fde:	f1b8 0f00 	cmp.w	r8, #0
 8008fe2:	dd9c      	ble.n	8008f1e <__sflush_r+0x1a>
 8008fe4:	6a21      	ldr	r1, [r4, #32]
 8008fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fe8:	4643      	mov	r3, r8
 8008fea:	463a      	mov	r2, r7
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b0      	blx	r6
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	dc06      	bgt.n	8009002 <__sflush_r+0xfe>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e78e      	b.n	8008f20 <__sflush_r+0x1c>
 8009002:	4407      	add	r7, r0
 8009004:	eba8 0800 	sub.w	r8, r8, r0
 8009008:	e7e9      	b.n	8008fde <__sflush_r+0xda>
 800900a:	bf00      	nop
 800900c:	20400001 	.word	0x20400001

08009010 <_fflush_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	690b      	ldr	r3, [r1, #16]
 8009014:	4605      	mov	r5, r0
 8009016:	460c      	mov	r4, r1
 8009018:	b913      	cbnz	r3, 8009020 <_fflush_r+0x10>
 800901a:	2500      	movs	r5, #0
 800901c:	4628      	mov	r0, r5
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	b118      	cbz	r0, 800902a <_fflush_r+0x1a>
 8009022:	6983      	ldr	r3, [r0, #24]
 8009024:	b90b      	cbnz	r3, 800902a <_fflush_r+0x1a>
 8009026:	f000 f887 	bl	8009138 <__sinit>
 800902a:	4b14      	ldr	r3, [pc, #80]	; (800907c <_fflush_r+0x6c>)
 800902c:	429c      	cmp	r4, r3
 800902e:	d11b      	bne.n	8009068 <_fflush_r+0x58>
 8009030:	686c      	ldr	r4, [r5, #4]
 8009032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0ef      	beq.n	800901a <_fflush_r+0xa>
 800903a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800903c:	07d0      	lsls	r0, r2, #31
 800903e:	d404      	bmi.n	800904a <_fflush_r+0x3a>
 8009040:	0599      	lsls	r1, r3, #22
 8009042:	d402      	bmi.n	800904a <_fflush_r+0x3a>
 8009044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009046:	f000 f915 	bl	8009274 <__retarget_lock_acquire_recursive>
 800904a:	4628      	mov	r0, r5
 800904c:	4621      	mov	r1, r4
 800904e:	f7ff ff59 	bl	8008f04 <__sflush_r>
 8009052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009054:	07da      	lsls	r2, r3, #31
 8009056:	4605      	mov	r5, r0
 8009058:	d4e0      	bmi.n	800901c <_fflush_r+0xc>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	059b      	lsls	r3, r3, #22
 800905e:	d4dd      	bmi.n	800901c <_fflush_r+0xc>
 8009060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009062:	f000 f908 	bl	8009276 <__retarget_lock_release_recursive>
 8009066:	e7d9      	b.n	800901c <_fflush_r+0xc>
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <_fflush_r+0x70>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d101      	bne.n	8009072 <_fflush_r+0x62>
 800906e:	68ac      	ldr	r4, [r5, #8]
 8009070:	e7df      	b.n	8009032 <_fflush_r+0x22>
 8009072:	4b04      	ldr	r3, [pc, #16]	; (8009084 <_fflush_r+0x74>)
 8009074:	429c      	cmp	r4, r3
 8009076:	bf08      	it	eq
 8009078:	68ec      	ldreq	r4, [r5, #12]
 800907a:	e7da      	b.n	8009032 <_fflush_r+0x22>
 800907c:	08009e98 	.word	0x08009e98
 8009080:	08009eb8 	.word	0x08009eb8
 8009084:	08009e78 	.word	0x08009e78

08009088 <std>:
 8009088:	2300      	movs	r3, #0
 800908a:	b510      	push	{r4, lr}
 800908c:	4604      	mov	r4, r0
 800908e:	e9c0 3300 	strd	r3, r3, [r0]
 8009092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009096:	6083      	str	r3, [r0, #8]
 8009098:	8181      	strh	r1, [r0, #12]
 800909a:	6643      	str	r3, [r0, #100]	; 0x64
 800909c:	81c2      	strh	r2, [r0, #14]
 800909e:	6183      	str	r3, [r0, #24]
 80090a0:	4619      	mov	r1, r3
 80090a2:	2208      	movs	r2, #8
 80090a4:	305c      	adds	r0, #92	; 0x5c
 80090a6:	f7ff f85f 	bl	8008168 <memset>
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <std+0x38>)
 80090ac:	6263      	str	r3, [r4, #36]	; 0x24
 80090ae:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <std+0x3c>)
 80090b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <std+0x40>)
 80090b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <std+0x44>)
 80090b8:	6224      	str	r4, [r4, #32]
 80090ba:	6323      	str	r3, [r4, #48]	; 0x30
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	bf00      	nop
 80090c0:	08009479 	.word	0x08009479
 80090c4:	0800949b 	.word	0x0800949b
 80090c8:	080094d3 	.word	0x080094d3
 80090cc:	080094f7 	.word	0x080094f7

080090d0 <_cleanup_r>:
 80090d0:	4901      	ldr	r1, [pc, #4]	; (80090d8 <_cleanup_r+0x8>)
 80090d2:	f000 b8af 	b.w	8009234 <_fwalk_reent>
 80090d6:	bf00      	nop
 80090d8:	08009011 	.word	0x08009011

080090dc <__sfmoreglue>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	2268      	movs	r2, #104	; 0x68
 80090e0:	1e4d      	subs	r5, r1, #1
 80090e2:	4355      	muls	r5, r2
 80090e4:	460e      	mov	r6, r1
 80090e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ea:	f7ff f975 	bl	80083d8 <_malloc_r>
 80090ee:	4604      	mov	r4, r0
 80090f0:	b140      	cbz	r0, 8009104 <__sfmoreglue+0x28>
 80090f2:	2100      	movs	r1, #0
 80090f4:	e9c0 1600 	strd	r1, r6, [r0]
 80090f8:	300c      	adds	r0, #12
 80090fa:	60a0      	str	r0, [r4, #8]
 80090fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009100:	f7ff f832 	bl	8008168 <memset>
 8009104:	4620      	mov	r0, r4
 8009106:	bd70      	pop	{r4, r5, r6, pc}

08009108 <__sfp_lock_acquire>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__sfp_lock_acquire+0x8>)
 800910a:	f000 b8b3 	b.w	8009274 <__retarget_lock_acquire_recursive>
 800910e:	bf00      	nop
 8009110:	200009f1 	.word	0x200009f1

08009114 <__sfp_lock_release>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__sfp_lock_release+0x8>)
 8009116:	f000 b8ae 	b.w	8009276 <__retarget_lock_release_recursive>
 800911a:	bf00      	nop
 800911c:	200009f1 	.word	0x200009f1

08009120 <__sinit_lock_acquire>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__sinit_lock_acquire+0x8>)
 8009122:	f000 b8a7 	b.w	8009274 <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	200009f2 	.word	0x200009f2

0800912c <__sinit_lock_release>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__sinit_lock_release+0x8>)
 800912e:	f000 b8a2 	b.w	8009276 <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	200009f2 	.word	0x200009f2

08009138 <__sinit>:
 8009138:	b510      	push	{r4, lr}
 800913a:	4604      	mov	r4, r0
 800913c:	f7ff fff0 	bl	8009120 <__sinit_lock_acquire>
 8009140:	69a3      	ldr	r3, [r4, #24]
 8009142:	b11b      	cbz	r3, 800914c <__sinit+0x14>
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009148:	f7ff bff0 	b.w	800912c <__sinit_lock_release>
 800914c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009150:	6523      	str	r3, [r4, #80]	; 0x50
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <__sinit+0x68>)
 8009154:	4a13      	ldr	r2, [pc, #76]	; (80091a4 <__sinit+0x6c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	62a2      	str	r2, [r4, #40]	; 0x28
 800915a:	42a3      	cmp	r3, r4
 800915c:	bf04      	itt	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	61a3      	streq	r3, [r4, #24]
 8009162:	4620      	mov	r0, r4
 8009164:	f000 f820 	bl	80091a8 <__sfp>
 8009168:	6060      	str	r0, [r4, #4]
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f81c 	bl	80091a8 <__sfp>
 8009170:	60a0      	str	r0, [r4, #8]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f818 	bl	80091a8 <__sfp>
 8009178:	2200      	movs	r2, #0
 800917a:	60e0      	str	r0, [r4, #12]
 800917c:	2104      	movs	r1, #4
 800917e:	6860      	ldr	r0, [r4, #4]
 8009180:	f7ff ff82 	bl	8009088 <std>
 8009184:	68a0      	ldr	r0, [r4, #8]
 8009186:	2201      	movs	r2, #1
 8009188:	2109      	movs	r1, #9
 800918a:	f7ff ff7d 	bl	8009088 <std>
 800918e:	68e0      	ldr	r0, [r4, #12]
 8009190:	2202      	movs	r2, #2
 8009192:	2112      	movs	r1, #18
 8009194:	f7ff ff78 	bl	8009088 <std>
 8009198:	2301      	movs	r3, #1
 800919a:	61a3      	str	r3, [r4, #24]
 800919c:	e7d2      	b.n	8009144 <__sinit+0xc>
 800919e:	bf00      	nop
 80091a0:	08009d90 	.word	0x08009d90
 80091a4:	080090d1 	.word	0x080090d1

080091a8 <__sfp>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	4607      	mov	r7, r0
 80091ac:	f7ff ffac 	bl	8009108 <__sfp_lock_acquire>
 80091b0:	4b1e      	ldr	r3, [pc, #120]	; (800922c <__sfp+0x84>)
 80091b2:	681e      	ldr	r6, [r3, #0]
 80091b4:	69b3      	ldr	r3, [r6, #24]
 80091b6:	b913      	cbnz	r3, 80091be <__sfp+0x16>
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7ff ffbd 	bl	8009138 <__sinit>
 80091be:	3648      	adds	r6, #72	; 0x48
 80091c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	d503      	bpl.n	80091d0 <__sfp+0x28>
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	b30b      	cbz	r3, 8009210 <__sfp+0x68>
 80091cc:	6836      	ldr	r6, [r6, #0]
 80091ce:	e7f7      	b.n	80091c0 <__sfp+0x18>
 80091d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091d4:	b9d5      	cbnz	r5, 800920c <__sfp+0x64>
 80091d6:	4b16      	ldr	r3, [pc, #88]	; (8009230 <__sfp+0x88>)
 80091d8:	60e3      	str	r3, [r4, #12]
 80091da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091de:	6665      	str	r5, [r4, #100]	; 0x64
 80091e0:	f000 f847 	bl	8009272 <__retarget_lock_init_recursive>
 80091e4:	f7ff ff96 	bl	8009114 <__sfp_lock_release>
 80091e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091f0:	6025      	str	r5, [r4, #0]
 80091f2:	61a5      	str	r5, [r4, #24]
 80091f4:	2208      	movs	r2, #8
 80091f6:	4629      	mov	r1, r5
 80091f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091fc:	f7fe ffb4 	bl	8008168 <memset>
 8009200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009208:	4620      	mov	r0, r4
 800920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920c:	3468      	adds	r4, #104	; 0x68
 800920e:	e7d9      	b.n	80091c4 <__sfp+0x1c>
 8009210:	2104      	movs	r1, #4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff ff62 	bl	80090dc <__sfmoreglue>
 8009218:	4604      	mov	r4, r0
 800921a:	6030      	str	r0, [r6, #0]
 800921c:	2800      	cmp	r0, #0
 800921e:	d1d5      	bne.n	80091cc <__sfp+0x24>
 8009220:	f7ff ff78 	bl	8009114 <__sfp_lock_release>
 8009224:	230c      	movs	r3, #12
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	e7ee      	b.n	8009208 <__sfp+0x60>
 800922a:	bf00      	nop
 800922c:	08009d90 	.word	0x08009d90
 8009230:	ffff0001 	.word	0xffff0001

08009234 <_fwalk_reent>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	4606      	mov	r6, r0
 800923a:	4688      	mov	r8, r1
 800923c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009240:	2700      	movs	r7, #0
 8009242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009246:	f1b9 0901 	subs.w	r9, r9, #1
 800924a:	d505      	bpl.n	8009258 <_fwalk_reent+0x24>
 800924c:	6824      	ldr	r4, [r4, #0]
 800924e:	2c00      	cmp	r4, #0
 8009250:	d1f7      	bne.n	8009242 <_fwalk_reent+0xe>
 8009252:	4638      	mov	r0, r7
 8009254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d907      	bls.n	800926e <_fwalk_reent+0x3a>
 800925e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009262:	3301      	adds	r3, #1
 8009264:	d003      	beq.n	800926e <_fwalk_reent+0x3a>
 8009266:	4629      	mov	r1, r5
 8009268:	4630      	mov	r0, r6
 800926a:	47c0      	blx	r8
 800926c:	4307      	orrs	r7, r0
 800926e:	3568      	adds	r5, #104	; 0x68
 8009270:	e7e9      	b.n	8009246 <_fwalk_reent+0x12>

08009272 <__retarget_lock_init_recursive>:
 8009272:	4770      	bx	lr

08009274 <__retarget_lock_acquire_recursive>:
 8009274:	4770      	bx	lr

08009276 <__retarget_lock_release_recursive>:
 8009276:	4770      	bx	lr

08009278 <__swhatbuf_r>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	460e      	mov	r6, r1
 800927c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009280:	2900      	cmp	r1, #0
 8009282:	b096      	sub	sp, #88	; 0x58
 8009284:	4614      	mov	r4, r2
 8009286:	461d      	mov	r5, r3
 8009288:	da08      	bge.n	800929c <__swhatbuf_r+0x24>
 800928a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	602a      	str	r2, [r5, #0]
 8009292:	061a      	lsls	r2, r3, #24
 8009294:	d410      	bmi.n	80092b8 <__swhatbuf_r+0x40>
 8009296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929a:	e00e      	b.n	80092ba <__swhatbuf_r+0x42>
 800929c:	466a      	mov	r2, sp
 800929e:	f000 f951 	bl	8009544 <_fstat_r>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	dbf1      	blt.n	800928a <__swhatbuf_r+0x12>
 80092a6:	9a01      	ldr	r2, [sp, #4]
 80092a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092b0:	425a      	negs	r2, r3
 80092b2:	415a      	adcs	r2, r3
 80092b4:	602a      	str	r2, [r5, #0]
 80092b6:	e7ee      	b.n	8009296 <__swhatbuf_r+0x1e>
 80092b8:	2340      	movs	r3, #64	; 0x40
 80092ba:	2000      	movs	r0, #0
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	b016      	add	sp, #88	; 0x58
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080092c4 <__smakebuf_r>:
 80092c4:	898b      	ldrh	r3, [r1, #12]
 80092c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c8:	079d      	lsls	r5, r3, #30
 80092ca:	4606      	mov	r6, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	d507      	bpl.n	80092e0 <__smakebuf_r+0x1c>
 80092d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	2301      	movs	r3, #1
 80092da:	6163      	str	r3, [r4, #20]
 80092dc:	b002      	add	sp, #8
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	ab01      	add	r3, sp, #4
 80092e2:	466a      	mov	r2, sp
 80092e4:	f7ff ffc8 	bl	8009278 <__swhatbuf_r>
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	4605      	mov	r5, r0
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7ff f873 	bl	80083d8 <_malloc_r>
 80092f2:	b948      	cbnz	r0, 8009308 <__smakebuf_r+0x44>
 80092f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f8:	059a      	lsls	r2, r3, #22
 80092fa:	d4ef      	bmi.n	80092dc <__smakebuf_r+0x18>
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	e7e3      	b.n	80092d0 <__smakebuf_r+0xc>
 8009308:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <__smakebuf_r+0x7c>)
 800930a:	62b3      	str	r3, [r6, #40]	; 0x28
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	6020      	str	r0, [r4, #0]
 8009310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	6163      	str	r3, [r4, #20]
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	6120      	str	r0, [r4, #16]
 800931e:	b15b      	cbz	r3, 8009338 <__smakebuf_r+0x74>
 8009320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009324:	4630      	mov	r0, r6
 8009326:	f000 f91f 	bl	8009568 <_isatty_r>
 800932a:	b128      	cbz	r0, 8009338 <__smakebuf_r+0x74>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	89a0      	ldrh	r0, [r4, #12]
 800933a:	4305      	orrs	r5, r0
 800933c:	81a5      	strh	r5, [r4, #12]
 800933e:	e7cd      	b.n	80092dc <__smakebuf_r+0x18>
 8009340:	080090d1 	.word	0x080090d1

08009344 <memmove>:
 8009344:	4288      	cmp	r0, r1
 8009346:	b510      	push	{r4, lr}
 8009348:	eb01 0402 	add.w	r4, r1, r2
 800934c:	d902      	bls.n	8009354 <memmove+0x10>
 800934e:	4284      	cmp	r4, r0
 8009350:	4623      	mov	r3, r4
 8009352:	d807      	bhi.n	8009364 <memmove+0x20>
 8009354:	1e43      	subs	r3, r0, #1
 8009356:	42a1      	cmp	r1, r4
 8009358:	d008      	beq.n	800936c <memmove+0x28>
 800935a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800935e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009362:	e7f8      	b.n	8009356 <memmove+0x12>
 8009364:	4402      	add	r2, r0
 8009366:	4601      	mov	r1, r0
 8009368:	428a      	cmp	r2, r1
 800936a:	d100      	bne.n	800936e <memmove+0x2a>
 800936c:	bd10      	pop	{r4, pc}
 800936e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009376:	e7f7      	b.n	8009368 <memmove+0x24>

08009378 <__malloc_lock>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__malloc_lock+0x8>)
 800937a:	f7ff bf7b 	b.w	8009274 <__retarget_lock_acquire_recursive>
 800937e:	bf00      	nop
 8009380:	200009f0 	.word	0x200009f0

08009384 <__malloc_unlock>:
 8009384:	4801      	ldr	r0, [pc, #4]	; (800938c <__malloc_unlock+0x8>)
 8009386:	f7ff bf76 	b.w	8009276 <__retarget_lock_release_recursive>
 800938a:	bf00      	nop
 800938c:	200009f0 	.word	0x200009f0

08009390 <_realloc_r>:
 8009390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009394:	4680      	mov	r8, r0
 8009396:	4614      	mov	r4, r2
 8009398:	460e      	mov	r6, r1
 800939a:	b921      	cbnz	r1, 80093a6 <_realloc_r+0x16>
 800939c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093a0:	4611      	mov	r1, r2
 80093a2:	f7ff b819 	b.w	80083d8 <_malloc_r>
 80093a6:	b92a      	cbnz	r2, 80093b4 <_realloc_r+0x24>
 80093a8:	f7fe ffaa 	bl	8008300 <_free_r>
 80093ac:	4625      	mov	r5, r4
 80093ae:	4628      	mov	r0, r5
 80093b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b4:	f000 f8fa 	bl	80095ac <_malloc_usable_size_r>
 80093b8:	4284      	cmp	r4, r0
 80093ba:	4607      	mov	r7, r0
 80093bc:	d802      	bhi.n	80093c4 <_realloc_r+0x34>
 80093be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093c2:	d812      	bhi.n	80093ea <_realloc_r+0x5a>
 80093c4:	4621      	mov	r1, r4
 80093c6:	4640      	mov	r0, r8
 80093c8:	f7ff f806 	bl	80083d8 <_malloc_r>
 80093cc:	4605      	mov	r5, r0
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d0ed      	beq.n	80093ae <_realloc_r+0x1e>
 80093d2:	42bc      	cmp	r4, r7
 80093d4:	4622      	mov	r2, r4
 80093d6:	4631      	mov	r1, r6
 80093d8:	bf28      	it	cs
 80093da:	463a      	movcs	r2, r7
 80093dc:	f7fe feb6 	bl	800814c <memcpy>
 80093e0:	4631      	mov	r1, r6
 80093e2:	4640      	mov	r0, r8
 80093e4:	f7fe ff8c 	bl	8008300 <_free_r>
 80093e8:	e7e1      	b.n	80093ae <_realloc_r+0x1e>
 80093ea:	4635      	mov	r5, r6
 80093ec:	e7df      	b.n	80093ae <_realloc_r+0x1e>

080093ee <_raise_r>:
 80093ee:	291f      	cmp	r1, #31
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4604      	mov	r4, r0
 80093f4:	460d      	mov	r5, r1
 80093f6:	d904      	bls.n	8009402 <_raise_r+0x14>
 80093f8:	2316      	movs	r3, #22
 80093fa:	6003      	str	r3, [r0, #0]
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009404:	b112      	cbz	r2, 800940c <_raise_r+0x1e>
 8009406:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800940a:	b94b      	cbnz	r3, 8009420 <_raise_r+0x32>
 800940c:	4620      	mov	r0, r4
 800940e:	f000 f831 	bl	8009474 <_getpid_r>
 8009412:	462a      	mov	r2, r5
 8009414:	4601      	mov	r1, r0
 8009416:	4620      	mov	r0, r4
 8009418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800941c:	f000 b818 	b.w	8009450 <_kill_r>
 8009420:	2b01      	cmp	r3, #1
 8009422:	d00a      	beq.n	800943a <_raise_r+0x4c>
 8009424:	1c59      	adds	r1, r3, #1
 8009426:	d103      	bne.n	8009430 <_raise_r+0x42>
 8009428:	2316      	movs	r3, #22
 800942a:	6003      	str	r3, [r0, #0]
 800942c:	2001      	movs	r0, #1
 800942e:	e7e7      	b.n	8009400 <_raise_r+0x12>
 8009430:	2400      	movs	r4, #0
 8009432:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009436:	4628      	mov	r0, r5
 8009438:	4798      	blx	r3
 800943a:	2000      	movs	r0, #0
 800943c:	e7e0      	b.n	8009400 <_raise_r+0x12>
	...

08009440 <raise>:
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <raise+0xc>)
 8009442:	4601      	mov	r1, r0
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f7ff bfd2 	b.w	80093ee <_raise_r>
 800944a:	bf00      	nop
 800944c:	20000074 	.word	0x20000074

08009450 <_kill_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d07      	ldr	r5, [pc, #28]	; (8009470 <_kill_r+0x20>)
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	4611      	mov	r1, r2
 800945c:	602b      	str	r3, [r5, #0]
 800945e:	f7f9 ff81 	bl	8003364 <_kill>
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d102      	bne.n	800946c <_kill_r+0x1c>
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	b103      	cbz	r3, 800946c <_kill_r+0x1c>
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	bd38      	pop	{r3, r4, r5, pc}
 800946e:	bf00      	nop
 8009470:	200009f4 	.word	0x200009f4

08009474 <_getpid_r>:
 8009474:	f7f9 bf6e 	b.w	8003354 <_getpid>

08009478 <__sread>:
 8009478:	b510      	push	{r4, lr}
 800947a:	460c      	mov	r4, r1
 800947c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009480:	f000 f89c 	bl	80095bc <_read_r>
 8009484:	2800      	cmp	r0, #0
 8009486:	bfab      	itete	ge
 8009488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800948a:	89a3      	ldrhlt	r3, [r4, #12]
 800948c:	181b      	addge	r3, r3, r0
 800948e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009492:	bfac      	ite	ge
 8009494:	6563      	strge	r3, [r4, #84]	; 0x54
 8009496:	81a3      	strhlt	r3, [r4, #12]
 8009498:	bd10      	pop	{r4, pc}

0800949a <__swrite>:
 800949a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949e:	461f      	mov	r7, r3
 80094a0:	898b      	ldrh	r3, [r1, #12]
 80094a2:	05db      	lsls	r3, r3, #23
 80094a4:	4605      	mov	r5, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	4616      	mov	r6, r2
 80094aa:	d505      	bpl.n	80094b8 <__swrite+0x1e>
 80094ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b0:	2302      	movs	r3, #2
 80094b2:	2200      	movs	r2, #0
 80094b4:	f000 f868 	bl	8009588 <_lseek_r>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094c2:	81a3      	strh	r3, [r4, #12]
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	4628      	mov	r0, r5
 80094ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ce:	f000 b817 	b.w	8009500 <_write_r>

080094d2 <__sseek>:
 80094d2:	b510      	push	{r4, lr}
 80094d4:	460c      	mov	r4, r1
 80094d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094da:	f000 f855 	bl	8009588 <_lseek_r>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	bf15      	itete	ne
 80094e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80094e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094ee:	81a3      	strheq	r3, [r4, #12]
 80094f0:	bf18      	it	ne
 80094f2:	81a3      	strhne	r3, [r4, #12]
 80094f4:	bd10      	pop	{r4, pc}

080094f6 <__sclose>:
 80094f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fa:	f000 b813 	b.w	8009524 <_close_r>
	...

08009500 <_write_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d07      	ldr	r5, [pc, #28]	; (8009520 <_write_r+0x20>)
 8009504:	4604      	mov	r4, r0
 8009506:	4608      	mov	r0, r1
 8009508:	4611      	mov	r1, r2
 800950a:	2200      	movs	r2, #0
 800950c:	602a      	str	r2, [r5, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f7f9 ff5f 	bl	80033d2 <_write>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_write_r+0x1e>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_write_r+0x1e>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	200009f4 	.word	0x200009f4

08009524 <_close_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4d06      	ldr	r5, [pc, #24]	; (8009540 <_close_r+0x1c>)
 8009528:	2300      	movs	r3, #0
 800952a:	4604      	mov	r4, r0
 800952c:	4608      	mov	r0, r1
 800952e:	602b      	str	r3, [r5, #0]
 8009530:	f7f9 ff6b 	bl	800340a <_close>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_close_r+0x1a>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_close_r+0x1a>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	200009f4 	.word	0x200009f4

08009544 <_fstat_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	; (8009564 <_fstat_r+0x20>)
 8009548:	2300      	movs	r3, #0
 800954a:	4604      	mov	r4, r0
 800954c:	4608      	mov	r0, r1
 800954e:	4611      	mov	r1, r2
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	f7f9 ff66 	bl	8003422 <_fstat>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	d102      	bne.n	8009560 <_fstat_r+0x1c>
 800955a:	682b      	ldr	r3, [r5, #0]
 800955c:	b103      	cbz	r3, 8009560 <_fstat_r+0x1c>
 800955e:	6023      	str	r3, [r4, #0]
 8009560:	bd38      	pop	{r3, r4, r5, pc}
 8009562:	bf00      	nop
 8009564:	200009f4 	.word	0x200009f4

08009568 <_isatty_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4d06      	ldr	r5, [pc, #24]	; (8009584 <_isatty_r+0x1c>)
 800956c:	2300      	movs	r3, #0
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	602b      	str	r3, [r5, #0]
 8009574:	f7f9 ff65 	bl	8003442 <_isatty>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_isatty_r+0x1a>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_isatty_r+0x1a>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	200009f4 	.word	0x200009f4

08009588 <_lseek_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	; (80095a8 <_lseek_r+0x20>)
 800958c:	4604      	mov	r4, r0
 800958e:	4608      	mov	r0, r1
 8009590:	4611      	mov	r1, r2
 8009592:	2200      	movs	r2, #0
 8009594:	602a      	str	r2, [r5, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	f7f9 ff5e 	bl	8003458 <_lseek>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_lseek_r+0x1e>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_lseek_r+0x1e>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	200009f4 	.word	0x200009f4

080095ac <_malloc_usable_size_r>:
 80095ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b0:	1f18      	subs	r0, r3, #4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	bfbc      	itt	lt
 80095b6:	580b      	ldrlt	r3, [r1, r0]
 80095b8:	18c0      	addlt	r0, r0, r3
 80095ba:	4770      	bx	lr

080095bc <_read_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d07      	ldr	r5, [pc, #28]	; (80095dc <_read_r+0x20>)
 80095c0:	4604      	mov	r4, r0
 80095c2:	4608      	mov	r0, r1
 80095c4:	4611      	mov	r1, r2
 80095c6:	2200      	movs	r2, #0
 80095c8:	602a      	str	r2, [r5, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	f7f9 fee4 	bl	8003398 <_read>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_read_r+0x1e>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_read_r+0x1e>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	200009f4 	.word	0x200009f4

080095e0 <_init>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr

080095ec <_fini>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr
