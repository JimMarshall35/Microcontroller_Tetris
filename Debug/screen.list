
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000829c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cd4  08008cd4  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08008cd4  08008cd4  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cd4  08008cd4  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd4  08008cd4  00018cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08008cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          00000868  200000c8  200000c8  000200c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000930  20000930  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017335  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e5a  00000000  00000000  0003742d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0003b288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f0  00000000  00000000  0003c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef3c  00000000  00000000  0003d818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e88  00000000  00000000  0005c754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad472  00000000  00000000  000755dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122a4e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a94  00000000  00000000  00122aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008414 	.word	0x08008414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08008414 	.word	0x08008414

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStickChange>:

		*outputX = x;
		*outputY = y;
}

void ReadAnalogStickChange(ADC_HandleTypeDef* adc, i32* outputX, i32* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	//LCD_PCD8544_clear_ram(&gLcdScreen);
	HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f003 f8a7 	bl	80033e0 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f003 f959 	bl	800354c <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f003 fa24 	bl	80036e8 <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002a6:	801a      	strh	r2, [r3, #0]
	uint16_t y = AD_RES;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

	// Start ADC Conversion
	HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f003 f896 	bl	80033e0 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f003 f948 	bl	800354c <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f003 fa13 	bl	80036e8 <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002c8:	801a      	strh	r2, [r3, #0]
	uint16_t x = AD_RES;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
	x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]
	y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	613b      	str	r3, [r7, #16]
	*outputX = (x - (twelveBitMax/2));
 80002e6:	8aba      	ldrh	r2, [r7, #20]
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	0fd9      	lsrs	r1, r3, #31
 80002ec:	440b      	add	r3, r1
 80002ee:	105b      	asrs	r3, r3, #1
 80002f0:	425b      	negs	r3, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	601a      	str	r2, [r3, #0]
	*outputY = (y - (twelveBitMax/2));
 80002f8:	8afa      	ldrh	r2, [r7, #22]
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	0fd9      	lsrs	r1, r3, #31
 80002fe:	440b      	add	r3, r1
 8000300:	105b      	asrs	r3, r3, #1
 8000302:	425b      	negs	r3, r3
 8000304:	441a      	add	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200000e4 	.word	0x200000e4

08000318 <EmulateDPad>:


ANALOG_STICK_DPAD_RESULT EmulateDPad(ADC_HandleTypeDef* adc){
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	4619      	mov	r1, r3
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f7ff ffa8 	bl	8000280 <ReadAnalogStickChange>
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000330:	2300      	movs	r3, #0
 8000332:	75fb      	strb	r3, [r7, #23]
	const i32 twelveBitMax = 4096;
 8000334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000338:	613b      	str	r3, [r7, #16]
	if(analogYChange > (twelveBitMax/3)){
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	4a29      	ldr	r2, [pc, #164]	; (80003e4 <EmulateDPad+0xcc>)
 800033e:	fb82 1203 	smull	r1, r2, r2, r3
 8000342:	17db      	asrs	r3, r3, #31
 8000344:	1ad2      	subs	r2, r2, r3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	429a      	cmp	r2, r3
 800034a:	da09      	bge.n	8000360 <EmulateDPad+0x48>
		if(_isAnalogStickExtended == false){
 800034c:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <EmulateDPad+0xd0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d141      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <EmulateDPad+0xd0>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800035a:	2302      	movs	r3, #2
 800035c:	75fb      	strb	r3, [r7, #23]
 800035e:	e03b      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <EmulateDPad+0xcc>)
 8000364:	fb82 1203 	smull	r1, r2, r2, r3
 8000368:	17db      	asrs	r3, r3, #31
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	429a      	cmp	r2, r3
 8000370:	dd09      	ble.n	8000386 <EmulateDPad+0x6e>
		if(_isAnalogStickExtended == false){
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <EmulateDPad+0xd0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d12e      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <EmulateDPad+0xd0>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000380:	2301      	movs	r3, #1
 8000382:	75fb      	strb	r3, [r7, #23]
 8000384:	e028      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange > (twelveBitMax/3)){
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <EmulateDPad+0xcc>)
 800038a:	fb82 1203 	smull	r1, r2, r2, r3
 800038e:	17db      	asrs	r3, r3, #31
 8000390:	1ad2      	subs	r2, r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	429a      	cmp	r2, r3
 8000396:	da09      	bge.n	80003ac <EmulateDPad+0x94>
		if(_isAnalogStickExtended == false){
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <EmulateDPad+0xd0>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d11b      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <EmulateDPad+0xd0>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 80003a6:	2304      	movs	r3, #4
 80003a8:	75fb      	strb	r3, [r7, #23]
 80003aa:	e015      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <EmulateDPad+0xcc>)
 80003b0:	fb82 1203 	smull	r1, r2, r2, r3
 80003b4:	17db      	asrs	r3, r3, #31
 80003b6:	1a9a      	subs	r2, r3, r2
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	dd09      	ble.n	80003d2 <EmulateDPad+0xba>
		if(_isAnalogStickExtended == false){
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <EmulateDPad+0xd0>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d108      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <EmulateDPad+0xd0>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80003cc:	2303      	movs	r3, #3
 80003ce:	75fb      	strb	r3, [r7, #23]
 80003d0:	e002      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <EmulateDPad+0xd0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	55555556 	.word	0x55555556
 80003e8:	200000e6 	.word	0x200000e6

080003ec <EmulateDPadReturningXAndYChange>:


ANALOG_STICK_DPAD_RESULT EmulateDPadReturningXAndYChange(ADC_HandleTypeDef* adc, i32* rXChange, i32* rYChange){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 80003f8:	f107 0210 	add.w	r2, r7, #16
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	4619      	mov	r1, r3
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff3c 	bl	8000280 <ReadAnalogStickChange>
	*rXChange = analogXChange;
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	601a      	str	r2, [r3, #0]
	*rYChange = analogYChange;
 800040e:	693a      	ldr	r2, [r7, #16]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	601a      	str	r2, [r3, #0]
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000414:	2300      	movs	r3, #0
 8000416:	77fb      	strb	r3, [r7, #31]
	const i32 twelveBitMax = 4096;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	61bb      	str	r3, [r7, #24]
	if(analogYChange > (twelveBitMax/3)){
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000422:	fb82 1203 	smull	r1, r2, r2, r3
 8000426:	17db      	asrs	r3, r3, #31
 8000428:	1ad2      	subs	r2, r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	429a      	cmp	r2, r3
 800042e:	da09      	bge.n	8000444 <EmulateDPadReturningXAndYChange+0x58>
		if(_isAnalogStickExtended == false){
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d141      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800043e:	2302      	movs	r3, #2
 8000440:	77fb      	strb	r3, [r7, #31]
 8000442:	e03b      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}

	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000448:	fb82 1203 	smull	r1, r2, r2, r3
 800044c:	17db      	asrs	r3, r3, #31
 800044e:	1a9a      	subs	r2, r3, r2
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	429a      	cmp	r2, r3
 8000454:	dd09      	ble.n	800046a <EmulateDPadReturningXAndYChange+0x7e>
		if(_isAnalogStickExtended == false){
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d12e      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000464:	2301      	movs	r3, #1
 8000466:	77fb      	strb	r3, [r7, #31]
 8000468:	e028      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>

		}

	}
	else if(analogXChange > (twelveBitMax/3)){
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 800046e:	fb82 1203 	smull	r1, r2, r2, r3
 8000472:	17db      	asrs	r3, r3, #31
 8000474:	1ad2      	subs	r2, r2, r3
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	429a      	cmp	r2, r3
 800047a:	da09      	bge.n	8000490 <EmulateDPadReturningXAndYChange+0xa4>
		if(_isAnalogStickExtended == false){
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d11b      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 800048a:	2304      	movs	r3, #4
 800048c:	77fb      	strb	r3, [r7, #31]
 800048e:	e015      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000494:	fb82 1203 	smull	r1, r2, r2, r3
 8000498:	17db      	asrs	r3, r3, #31
 800049a:	1a9a      	subs	r2, r3, r2
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dd09      	ble.n	80004b6 <EmulateDPadReturningXAndYChange+0xca>
		if(_isAnalogStickExtended == false){
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d108      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80004b0:	2303      	movs	r3, #3
 80004b2:	77fb      	strb	r3, [r7, #31]
 80004b4:	e002      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80004bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	55555556 	.word	0x55555556
 80004cc:	200000e6 	.word	0x200000e6

080004d0 <gfxClearFrameBuffer>:
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
	}
}

void gfxClearFrameBuffer(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 80004d4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80004d8:	2100      	movs	r1, #0
 80004da:	4802      	ldr	r0, [pc, #8]	; (80004e4 <gfxClearFrameBuffer+0x14>)
 80004dc:	f006 fd5e 	bl	8006f9c <memset>
	//UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000e8 	.word	0x200000e8

080004e8 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b53      	cmp	r3, #83	; 0x53
 80004fc:	d825      	bhi.n	800054a <gfxPlotPixelInternal+0x62>
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	2b2e      	cmp	r3, #46	; 0x2e
 8000502:	d822      	bhi.n	800054a <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	08db      	lsrs	r3, r3, #3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	2354      	movs	r3, #84	; 0x54
 800050e:	fb03 f202 	mul.w	r2, r3, r2
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4413      	add	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800051e:	d215      	bcs.n	800054c <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <gfxPlotPixelInternal+0x70>)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b25a      	sxtb	r2, r3
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	f003 0307 	and.w	r3, r3, #7
 8000530:	2101      	movs	r1, #1
 8000532:	fa01 f303 	lsl.w	r3, r1, r3
 8000536:	b25b      	sxtb	r3, r3
 8000538:	4313      	orrs	r3, r2
 800053a:	b25b      	sxtb	r3, r3
 800053c:	b2d9      	uxtb	r1, r3
 800053e:	4a06      	ldr	r2, [pc, #24]	; (8000558 <gfxPlotPixelInternal+0x70>)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4413      	add	r3, r2
 8000544:	460a      	mov	r2, r1
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e000      	b.n	800054c <gfxPlotPixelInternal+0x64>
		return;
 800054a:	bf00      	nop
}
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200000e8 	.word	0x200000e8

0800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 800055c:	b490      	push	{r4, r7}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4604      	mov	r4, r0
 8000564:	4608      	mov	r0, r1
 8000566:	4611      	mov	r1, r2
 8000568:	461a      	mov	r2, r3
 800056a:	4623      	mov	r3, r4
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	4603      	mov	r3, r0
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	460b      	mov	r3, r1
 8000574:	717b      	strb	r3, [r7, #5]
 8000576:	4613      	mov	r3, r2
 8000578:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e01c      	b.n	80005ba <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 8000580:	4913      	ldr	r1, [pc, #76]	; (80005d0 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	4613      	mov	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	4413      	add	r3, r2
 800058a:	440b      	add	r3, r1
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 8000590:	490f      	ldr	r1, [pc, #60]	; (80005d0 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	4613      	mov	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4413      	add	r3, r2
 800059a:	440b      	add	r3, r1
 800059c:	3301      	adds	r3, #1
 800059e:	797a      	ldrb	r2, [r7, #5]
 80005a0:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 80005a2:	490b      	ldr	r1, [pc, #44]	; (80005d0 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	4613      	mov	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4413      	add	r3, r2
 80005ac:	440b      	add	r3, r1
 80005ae:	3302      	adds	r3, #2
 80005b0:	793a      	ldrb	r2, [r7, #4]
 80005b2:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	429a      	cmp	r2, r3
 80005c0:	ddde      	ble.n	8000580 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc90      	pop	{r4, r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	200002e0 	.word	0x200002e0

080005d4 <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b089      	sub	sp, #36	; 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4604      	mov	r4, r0
 80005dc:	4608      	mov	r0, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	461a      	mov	r2, r3
 80005e2:	4623      	mov	r3, r4
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	4603      	mov	r3, r0
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	460b      	mov	r3, r1
 80005ec:	717b      	strb	r3, [r7, #5]
 80005ee:	4613      	mov	r3, r2
 80005f0:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 80005f2:	797a      	ldrb	r2, [r7, #5]
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 80005fa:	793a      	ldrb	r2, [r7, #4]
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b00      	cmp	r3, #0
 800060a:	da05      	bge.n	8000618 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	425b      	negs	r3, r3
 8000616:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	005a      	lsls	r2, r3, #1
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e01e      	b.n	800066a <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff56 	bl	80004e8 <gfxPlotPixelInternal>
		if(D > 0){
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	2b00      	cmp	r3, #0
 8000640:	dd0b      	ble.n	800065a <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	4413      	add	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 800064a:	69fa      	ldr	r2, [r7, #28]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	697a      	ldr	r2, [r7, #20]
 8000654:	4413      	add	r3, r2
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e004      	b.n	8000664 <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	429a      	cmp	r2, r3
 8000670:	dddc      	ble.n	800062c <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3724      	adds	r7, #36	; 0x24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}

0800067c <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	4604      	mov	r4, r0
 8000684:	4608      	mov	r0, r1
 8000686:	4611      	mov	r1, r2
 8000688:	461a      	mov	r2, r3
 800068a:	4623      	mov	r3, r4
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	4603      	mov	r3, r0
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	460b      	mov	r3, r1
 8000694:	717b      	strb	r3, [r7, #5]
 8000696:	4613      	mov	r3, r2
 8000698:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800069a:	797a      	ldrb	r2, [r7, #5]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 80006a2:	793a      	ldrb	r2, [r7, #4]
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da04      	bge.n	80006be <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	425b      	negs	r3, r3
 80006bc:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	005a      	lsls	r2, r3, #1
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	e01e      	b.n	8000710 <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff03 	bl	80004e8 <gfxPlotPixelInternal>
		if(D > 0){
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dd0b      	ble.n	8000700 <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	4413      	add	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 80006f0:	69fa      	ldr	r2, [r7, #28]
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	4413      	add	r3, r2
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	e004      	b.n	800070a <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3301      	adds	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	793b      	ldrb	r3, [r7, #4]
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	dddc      	ble.n	80006d2 <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}

08000722 <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 8000722:	b590      	push	{r4, r7, lr}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	4604      	mov	r4, r0
 800072a:	4608      	mov	r0, r1
 800072c:	4611      	mov	r1, r2
 800072e:	461a      	mov	r2, r3
 8000730:	4623      	mov	r3, r4
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4603      	mov	r3, r0
 8000736:	71bb      	strb	r3, [r7, #6]
 8000738:	460b      	mov	r3, r1
 800073a:	717b      	strb	r3, [r7, #5]
 800073c:	4613      	mov	r3, r2
 800073e:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 8000740:	793a      	ldrb	r2, [r7, #4]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800074a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800074e:	7979      	ldrb	r1, [r7, #5]
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	1acb      	subs	r3, r1, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	bfb8      	it	lt
 8000758:	425b      	neglt	r3, r3
 800075a:	429a      	cmp	r2, r3
 800075c:	da11      	bge.n	8000782 <gfxDrawLine+0x60>
		if(x0 > x1){
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	797b      	ldrb	r3, [r7, #5]
 8000762:	429a      	cmp	r2, r3
 8000764:	d906      	bls.n	8000774 <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	7939      	ldrb	r1, [r7, #4]
 800076c:	7978      	ldrb	r0, [r7, #5]
 800076e:	f7ff ff31 	bl	80005d4 <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 8000772:	e017      	b.n	80007a4 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 8000774:	793b      	ldrb	r3, [r7, #4]
 8000776:	797a      	ldrb	r2, [r7, #5]
 8000778:	79b9      	ldrb	r1, [r7, #6]
 800077a:	79f8      	ldrb	r0, [r7, #7]
 800077c:	f7ff ff2a 	bl	80005d4 <gfxDrawLineBresenhamLow>
}
 8000780:	e010      	b.n	80007a4 <gfxDrawLine+0x82>
		if(y0 > y1){
 8000782:	79ba      	ldrb	r2, [r7, #6]
 8000784:	793b      	ldrb	r3, [r7, #4]
 8000786:	429a      	cmp	r2, r3
 8000788:	d906      	bls.n	8000798 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	7939      	ldrb	r1, [r7, #4]
 8000790:	7978      	ldrb	r0, [r7, #5]
 8000792:	f7ff ff73 	bl	800067c <gfxDrawLineBresenhamHigh>
}
 8000796:	e005      	b.n	80007a4 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 8000798:	793b      	ldrb	r3, [r7, #4]
 800079a:	797a      	ldrb	r2, [r7, #5]
 800079c:	79b9      	ldrb	r1, [r7, #6]
 800079e:	79f8      	ldrb	r0, [r7, #7]
 80007a0:	f7ff ff6c 	bl	800067c <gfxDrawLineBresenhamHigh>
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd90      	pop	{r4, r7, pc}

080007ac <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007b8:	e067      	b.n	800088a <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 80007ba:	4938      	ldr	r1, [pc, #224]	; (800089c <gfxFinishDrawing+0xf0>)
 80007bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d15b      	bne.n	8000884 <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 80007cc:	4933      	ldr	r1, [pc, #204]	; (800089c <gfxFinishDrawing+0xf0>)
 80007ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	3301      	adds	r3, #1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 80007e0:	492e      	ldr	r1, [pc, #184]	; (800089c <gfxFinishDrawing+0xf0>)
 80007e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	3302      	adds	r3, #2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 80007f4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80007f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d20b      	bcs.n	8000818 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 8000800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000804:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000808:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800080c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000810:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 8000818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081a:	2254      	movs	r2, #84	; 0x54
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	b2d9      	uxtb	r1, r3
 8000826:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082c:	4413      	add	r3, r2
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <gfxFinishDrawing+0xf4>)
 8000830:	1898      	adds	r0, r3, r2
 8000832:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000836:	b29a      	uxth	r2, r3
 8000838:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800083c:	b29b      	uxth	r3, r3
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b29b      	uxth	r3, r3
 8000842:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	4603      	mov	r3, r0
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 f82a 	bl	80008a4 <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 8000850:	4912      	ldr	r1, [pc, #72]	; (800089c <gfxFinishDrawing+0xf0>)
 8000852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	440b      	add	r3, r1
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 8000860:	490e      	ldr	r1, [pc, #56]	; (800089c <gfxFinishDrawing+0xf0>)
 8000862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	440b      	add	r3, r1
 800086c:	3301      	adds	r3, #1
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 8000872:	490a      	ldr	r1, [pc, #40]	; (800089c <gfxFinishDrawing+0xf0>)
 8000874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000876:	4613      	mov	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	440b      	add	r3, r1
 800087e:	3302      	adds	r3, #2
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 8000884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000886:	3301      	adds	r3, #1
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	2b05      	cmp	r3, #5
 800088e:	dd94      	ble.n	80007ba <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3730      	adds	r7, #48	; 0x30
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002e0 	.word	0x200002e0
 80008a0:	200000e8 	.word	0x200000e8

080008a4 <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	460b      	mov	r3, r1
 80008b0:	72fb      	strb	r3, [r7, #11]
 80008b2:	4613      	mov	r3, r2
 80008b4:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f001 ff0a 	bl	80026d8 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f001 ff27 	bl	8002718 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 80008ca:	7dfa      	ldrb	r2, [r7, #23]
 80008cc:	7db9      	ldrb	r1, [r7, #22]
 80008ce:	2300      	movs	r3, #0
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f001 fe2a 	bl	800252a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 80008d6:	7aba      	ldrb	r2, [r7, #10]
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	4619      	mov	r1, r3
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f001 fe77 	bl	80025d0 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f001 ff28 	bl	8002738 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f001 ff05 	bl	80026f8 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f001 ff12 	bl	8002718 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 80008f4:	8c3b      	ldrh	r3, [r7, #32]
 80008f6:	461a      	mov	r2, r3
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f001 fde2 	bl	80024c4 <LCD_PCD8544_LL_send_data>
 8000900:	4603      	mov	r3, r0
 8000902:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f001 ff17 	bl	8002738 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 800090a:	7d7b      	ldrb	r3, [r7, #21]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	; 0x70
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	603a      	str	r2, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	460b      	mov	r3, r1
 8000922:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f7ff fc53 	bl	80001d0 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 8000930:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	461a      	mov	r2, r3
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	4413      	add	r3, r2
 8000942:	2b54      	cmp	r3, #84	; 0x54
 8000944:	dd04      	ble.n	8000950 <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 8000946:	230e      	movs	r3, #14
 8000948:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2254      	movs	r2, #84	; 0x54
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f006 fb1f 	bl	8006f9c <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 800095e:	2300      	movs	r3, #0
 8000960:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 8000964:	e029      	b.n	80009ba <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 8000966:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d029      	beq.n	80009c8 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 8000974:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 8000982:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000986:	4613      	mov	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	461a      	mov	r2, r3
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	1898      	adds	r0, r3, r2
 8000996:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800099a:	4613      	mov	r3, r2
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	4413      	add	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <gfxWriteTextLineToFrameBuffer+0xf4>)
 80009a6:	4413      	add	r3, r2
 80009a8:	2206      	movs	r2, #6
 80009aa:	4619      	mov	r1, r3
 80009ac:	f006 fae8 	bl	8006f80 <memcpy>
	for ( ; nChars<strLen; nChars++) {
 80009b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80009b4:	3301      	adds	r3, #1
 80009b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80009ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80009be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3cf      	bcc.n	8000966 <gfxWriteTextLineToFrameBuffer+0x52>
 80009c6:	e000      	b.n	80009ca <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 80009c8:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2254      	movs	r2, #84	; 0x54
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 80009d4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	0052      	lsls	r2, r2, #1
 80009de:	4413      	add	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009ea:	4413      	add	r3, r2
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <gfxWriteTextLineToFrameBuffer+0xf8>)
 80009ee:	4413      	add	r3, r2
 80009f0:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80009f4:	f107 010c 	add.w	r1, r7, #12
 80009f8:	4618      	mov	r0, r3
 80009fa:	f006 fac1 	bl	8006f80 <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 80009fe:	bf00      	nop
 8000a00:	3770      	adds	r7, #112	; 0x70
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	0800847c 	.word	0x0800847c
 8000a0c:	200000e8 	.word	0x200000e8

08000a10 <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4604      	mov	r4, r0
 8000a18:	4608      	mov	r0, r1
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4623      	mov	r3, r4
 8000a20:	71fb      	strb	r3, [r7, #7]
 8000a22:	4603      	mov	r3, r0
 8000a24:	71bb      	strb	r3, [r7, #6]
 8000a26:	460b      	mov	r3, r1
 8000a28:	717b      	strb	r3, [r7, #5]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	797a      	ldrb	r2, [r7, #5]
 8000a32:	79b9      	ldrb	r1, [r7, #6]
 8000a34:	79f8      	ldrb	r0, [r7, #7]
 8000a36:	f7ff fe74 	bl	8000722 <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 8000a3a:	793b      	ldrb	r3, [r7, #4]
 8000a3c:	797a      	ldrb	r2, [r7, #5]
 8000a3e:	79b9      	ldrb	r1, [r7, #6]
 8000a40:	7978      	ldrb	r0, [r7, #5]
 8000a42:	f7ff fe6e 	bl	8000722 <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 8000a46:	793b      	ldrb	r3, [r7, #4]
 8000a48:	79fa      	ldrb	r2, [r7, #7]
 8000a4a:	7939      	ldrb	r1, [r7, #4]
 8000a4c:	7978      	ldrb	r0, [r7, #5]
 8000a4e:	f7ff fe68 	bl	8000722 <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	7939      	ldrb	r1, [r7, #4]
 8000a58:	79f8      	ldrb	r0, [r7, #7]
 8000a5a:	f7ff fe62 	bl	8000722 <gfxDrawLine>


}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd90      	pop	{r4, r7, pc}
	...

08000a68 <ClearUpdateRegions>:

void ClearUpdateRegions(){
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e01c      	b.n	8000aae <ClearUpdateRegions+0x46>
		gScreenRegionsToUpdate[i].updateColumnFinish = 0;
 8000a74:	4913      	ldr	r1, [pc, #76]	; (8000ac4 <ClearUpdateRegions+0x5c>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	3302      	adds	r3, #2
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000a86:	490f      	ldr	r1, [pc, #60]	; (8000ac4 <ClearUpdateRegions+0x5c>)
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	3301      	adds	r3, #1
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 0;
 8000a98:	490a      	ldr	r1, [pc, #40]	; (8000ac4 <ClearUpdateRegions+0x5c>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	4413      	add	r3, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	dddf      	ble.n	8000a74 <ClearUpdateRegions+0xc>


	}
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200002e0 	.word	0x200002e0

08000ac8 <ClearScreen>:


void ClearScreen(LCD_PCD8544_screen_t* scr){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	gfxClearFrameBuffer();
 8000ad0:	f7ff fcfe 	bl	80004d0 <gfxClearFrameBuffer>
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e01c      	b.n	8000b14 <ClearScreen+0x4c>
		gScreenRegionsToUpdate[i].updateColumnFinish = 83;
 8000ada:	4913      	ldr	r1, [pc, #76]	; (8000b28 <ClearScreen+0x60>)
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	2253      	movs	r2, #83	; 0x53
 8000aea:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000aec:	490e      	ldr	r1, [pc, #56]	; (8000b28 <ClearScreen+0x60>)
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	3301      	adds	r3, #1
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 1;
 8000afe:	490a      	ldr	r1, [pc, #40]	; (8000b28 <ClearScreen+0x60>)
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3301      	adds	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	dddf      	ble.n	8000ada <ClearScreen+0x12>
	}
	gfxFinishDrawing(scr);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fe46 	bl	80007ac <gfxFinishDrawing>

}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200002e0 	.word	0x200002e0

08000b2c <gfxClearFrameBufferRow>:


void gfxClearFrameBufferRow(u8 rowIndex, u8 colStart, u8 amount){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	460b      	mov	r3, r1
 8000b38:	71bb      	strb	r3, [r7, #6]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	717b      	strb	r3, [r7, #5]
	u8* frameBufferStartPtr = &gFrameBuffer[(rowIndex * PIXELS_WIDTH) + colStart];
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2254      	movs	r2, #84	; 0x54
 8000b42:	fb03 f202 	mul.w	r2, r3, r2
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <gfxClearFrameBufferRow+0x38>)
 8000b4c:	4413      	add	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]

	memset(frameBufferStartPtr, 0, amount);
 8000b50:	797b      	ldrb	r3, [r7, #5]
 8000b52:	461a      	mov	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f006 fa20 	bl	8006f9c <memset>

}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000e8 	.word	0x200000e8

08000b68 <GetStateAtXY>:
static u8* _TetrisPieces[NUM_TETRIS_PIECES]  = {_ZPieceOccupiedIndicies, _SPieceOccupiedIndicies,_OPieceOccupiedIndicies,_LPieceOccupiedIndicies,_TPieceOccupiedIndicies,_JPieceOccupiedIndicies,_IPieceOccupiedIndices, };




static BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	460a      	mov	r2, r1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	4613      	mov	r3, r2
 8000b76:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <GetStateAtXY+0x3c>)
 8000b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b80:	461a      	mov	r2, r3
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	fa42 f303 	asr.w	r3, r2, r3
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf14      	ite	ne
 8000b90:	2301      	movne	r3, #1
 8000b92:	2300      	moveq	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200002f4 	.word	0x200002f4

08000ba8 <SetStateAtXY>:

static void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000bba:	797b      	ldrb	r3, [r7, #5]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d111      	bne.n	8000be4 <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <SetStateAtXY+0x70>)
 8000bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	b291      	uxth	r1, r2
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <SetStateAtXY+0x70>)
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 8000be2:	e012      	b.n	8000c0a <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <SetStateAtXY+0x70>)
 8000be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	b291      	uxth	r1, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <SetStateAtXY+0x70>)
 8000c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200002f4 	.word	0x200002f4

08000c1c <Tetris_DrawCurentPiece>:




static void Tetris_DrawCurentPiece(){
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <Tetris_DrawCurentPiece+0xb8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <Tetris_DrawCurentPiece+0xb8>)
 8000c28:	7912      	ldrb	r2, [r2, #4]
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e045      	b.n	8000cc2 <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	0052      	lsls	r2, r2, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	0052      	lsls	r2, r2, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <Tetris_DrawCurentPiece+0xb8>)
 8000c60:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	0052      	lsls	r2, r2, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	4413      	add	r3, r2
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <Tetris_DrawCurentPiece+0xb8>)
 8000c78:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	797b      	ldrb	r3, [r7, #5]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db12      	blt.n	8000cbc <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <Tetris_DrawCurentPiece+0xbc>)
 8000c98:	681c      	ldr	r4, [r3, #0]
 8000c9a:	793a      	ldrb	r2, [r7, #4]
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <Tetris_DrawCurentPiece+0xc0>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b2d8      	uxtb	r0, r3
 8000ca4:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000ca6:	793a      	ldrb	r2, [r7, #4]
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <Tetris_DrawCurentPiece+0xc0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000cb0:	3303      	adds	r3, #3
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	3303      	adds	r3, #3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	ddb6      	ble.n	8000c36 <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd90      	pop	{r4, r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000032c 	.word	0x2000032c
 8000cd8:	20000318 	.word	0x20000318
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <Tetris_DrawNextPiece>:

static void Tetris_DrawNextPiece(){
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <Tetris_DrawNextPiece+0x94>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <Tetris_DrawNextPiece+0x94>)
 8000cec:	7912      	ldrb	r2, [r2, #4]
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	e033      	b.n	8000d62 <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	4413      	add	r3, r2
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	0052      	lsls	r2, r2, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	0052      	lsls	r2, r2, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	3321      	adds	r3, #33	; 0x21
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000d2a:	797b      	ldrb	r3, [r7, #5]
 8000d2c:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db12      	blt.n	8000d5c <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <Tetris_DrawNextPiece+0x98>)
 8000d38:	681c      	ldr	r4, [r3, #0]
 8000d3a:	793a      	ldrb	r2, [r7, #4]
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <Tetris_DrawNextPiece+0x9c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4413      	add	r3, r2
 8000d42:	b2d8      	uxtb	r0, r3
 8000d44:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000d46:	793a      	ldrb	r2, [r7, #4]
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <Tetris_DrawNextPiece+0x9c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000d50:	3303      	adds	r3, #3
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	3303      	adds	r3, #3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	ddc8      	ble.n	8000cfa <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000334 	.word	0x20000334
 8000d78:	20000318 	.word	0x20000318
 8000d7c:	20000000 	.word	0x20000000

08000d80 <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000d8a:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <Tetris_DrawTetrisBoard+0xe0>)
 8000d8c:	681c      	ldr	r4, [r3, #0]
 8000d8e:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <Tetris_DrawTetrisBoard+0xe4>)
 8000d90:	7818      	ldrb	r0, [r3, #0]
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <Tetris_DrawTetrisBoard+0xe8>)
 8000d94:	7819      	ldrb	r1, [r3, #0]
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <Tetris_DrawTetrisBoard+0xe4>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	331e      	adds	r3, #30
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <Tetris_DrawTetrisBoard+0xe8>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	332d      	adds	r3, #45	; 0x2d
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e049      	b.n	8000e42 <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e040      	b.n	8000e36 <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fed2 	bl	8000b68 <GetStateAtXY>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d132      	bne.n	8000e30 <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	0052      	lsls	r2, r2, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <Tetris_DrawTetrisBoard+0xe4>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	0052      	lsls	r2, r2, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <Tetris_DrawTetrisBoard+0xe8>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	0052      	lsls	r2, r2, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <Tetris_DrawTetrisBoard+0xe4>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3303      	adds	r3, #3
 8000e08:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	0052      	lsls	r2, r2, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <Tetris_DrawTetrisBoard+0xe8>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	3303      	adds	r3, #3
 8000e20:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <Tetris_DrawTetrisBoard+0xec>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	7b3b      	ldrb	r3, [r7, #12]
 8000e28:	7b7a      	ldrb	r2, [r7, #13]
 8000e2a:	7bb9      	ldrb	r1, [r7, #14]
 8000e2c:	7bf8      	ldrb	r0, [r7, #15]
 8000e2e:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	3301      	adds	r3, #1
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2b09      	cmp	r3, #9
 8000e3a:	ddbb      	ble.n	8000db4 <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2b0e      	cmp	r3, #14
 8000e46:	ddb2      	ble.n	8000dae <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 8000e48:	f7ff fee8 	bl	8000c1c <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d101      	bne.n	8000e56 <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8000e52:	f7ff ff45 	bl	8000ce0 <Tetris_DrawNextPiece>
	}
}
 8000e56:	bf00      	nop
 8000e58:	371c      	adds	r7, #28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000314 	.word	0x20000314
 8000e64:	20000000 	.word	0x20000000
 8000e68:	2000033c 	.word	0x2000033c
 8000e6c:	2000031c 	.word	0x2000031c

08000e70 <InitNewCurrentPiece>:

static void InitNewCurrentPiece(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <InitNewCurrentPiece+0x30>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <InitNewCurrentPiece+0x30>)
 8000e7c:	22fe      	movs	r2, #254	; 0xfe
 8000e7e:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <InitNewCurrentPiece+0x34>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4798      	blx	r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <InitNewCurrentPiece+0x38>)
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <InitNewCurrentPiece+0x30>)
 8000e92:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <InitNewCurrentPiece+0x30>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	711a      	strb	r2, [r3, #4]
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000032c 	.word	0x2000032c
 8000ea4:	20000320 	.word	0x20000320
 8000ea8:	20000004 	.word	0x20000004

08000eac <InitNewNextPiece>:

static void InitNewNextPiece(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <InitNewNextPiece+0x30>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <InitNewNextPiece+0x30>)
 8000eb8:	22fe      	movs	r2, #254	; 0xfe
 8000eba:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <InitNewNextPiece+0x34>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4798      	blx	r3
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <InitNewNextPiece+0x38>)
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <InitNewNextPiece+0x30>)
 8000ece:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <InitNewNextPiece+0x30>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	711a      	strb	r2, [r3, #4]
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000334 	.word	0x20000334
 8000ee0:	20000320 	.word	0x20000320
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <CopyNextPieceToCurrent>:

static void CopyNextPieceToCurrent(){
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <CopyNextPieceToCurrent+0x1c>)
 8000eee:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <CopyNextPieceToCurrent+0x20>)
 8000ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	2000032c 	.word	0x2000032c
 8000f08:	20000334 	.word	0x20000334

08000f0c <Tetris_ResetTetrisBoard>:

void Tetris_ResetTetrisBoard(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 8000f10:	221e      	movs	r2, #30
 8000f12:	2100      	movs	r1, #0
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <Tetris_ResetTetrisBoard+0x1c>)
 8000f16:	f006 f841 	bl	8006f9c <memset>
	InitNewCurrentPiece();
 8000f1a:	f7ff ffa9 	bl	8000e70 <InitNewCurrentPiece>
	InitNewNextPiece();
 8000f1e:	f7ff ffc5 	bl	8000eac <InitNewNextPiece>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200002f4 	.word	0x200002f4

08000f2c <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <Tetris_Init+0x40>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <Tetris_Init+0x44>)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <Tetris_Init+0x48>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <Tetris_Init+0x4c>)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <Tetris_Init+0x50>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <Tetris_Init+0x54>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	6013      	str	r3, [r2, #0]
	//Tetris_ResetTetrisBoard();
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000314 	.word	0x20000314
 8000f70:	2000031c 	.word	0x2000031c
 8000f74:	20000318 	.word	0x20000318
 8000f78:	20000320 	.word	0x20000320
 8000f7c:	20000324 	.word	0x20000324
 8000f80:	20000328 	.word	0x20000328

08000f84 <IsBlockAllowedToBeHere>:

static bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8000f94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da09      	bge.n	8000fb0 <IsBlockAllowedToBeHere+0x2c>
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db05      	blt.n	8000fb0 <IsBlockAllowedToBeHere+0x2c>
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b09      	cmp	r3, #9
 8000faa:	dc01      	bgt.n	8000fb0 <IsBlockAllowedToBeHere+0x2c>
		return true;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e01b      	b.n	8000fe8 <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	79ba      	ldrb	r2, [r7, #6]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fdd6 	bl	8000b68 <GetStateAtXY>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <IsBlockAllowedToBeHere+0x42>
		return false;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e010      	b.n	8000fe8 <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b09      	cmp	r3, #9
 8000fcc:	dc03      	bgt.n	8000fd6 <IsBlockAllowedToBeHere+0x52>
 8000fce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fd2:	2b0e      	cmp	r3, #14
 8000fd4:	dd01      	ble.n	8000fda <IsBlockAllowedToBeHere+0x56>
		return false;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e006      	b.n	8000fe8 <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	da01      	bge.n	8000fe6 <IsBlockAllowedToBeHere+0x62>
		return false;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <WriteCurrentPieceToGameBoardArray>:

static bool WriteCurrentPieceToGameBoardArray(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <WriteCurrentPieceToGameBoardArray+0x88>)
 8000ffc:	7912      	ldrb	r2, [r2, #4]
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4413      	add	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e02e      	b.n	8001068 <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <WriteCurrentPieceToGameBoardArray+0x88>)
 8001024:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	4413      	add	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <WriteCurrentPieceToGameBoardArray+0x88>)
 8001034:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	797b      	ldrb	r3, [r7, #5]
 800103c:	4413      	add	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 8001042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001046:	2b00      	cmp	r3, #0
 8001048:	da01      	bge.n	800104e <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 800104a:	2301      	movs	r3, #1
 800104c:	e010      	b.n	8001070 <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 800104e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db05      	blt.n	8001062 <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 8001056:	793b      	ldrb	r3, [r7, #4]
 8001058:	78f9      	ldrb	r1, [r7, #3]
 800105a:	2201      	movs	r2, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fda3 	bl	8000ba8 <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b03      	cmp	r3, #3
 800106c:	ddcd      	ble.n	800100a <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000032c 	.word	0x2000032c

0800107c <IsMoveValid>:

static u8 IsMoveValid(){
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <IsMoveValid+0x84>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <IsMoveValid+0x84>)
 8001088:	7912      	ldrb	r2, [r2, #4]
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	4413      	add	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e02b      	b.n	80010ee <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <IsMoveValid+0x84>)
 80010b0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	4413      	add	r3, r2
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <IsMoveValid+0x84>)
 80010c0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	4413      	add	r3, r2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 80010ce:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80010d2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff53 	bl	8000f84 <IsBlockAllowedToBeHere>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <IsMoveValid+0x6c>
			return 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e006      	b.n	80010f6 <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	ddd0      	ble.n	8001096 <IsMoveValid+0x1a>
		}
	}
	return 1;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000032c 	.word	0x2000032c

08001104 <CheckForAndClearLines>:

static u8 CheckForAndClearLines(){
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 800110e:	2300      	movs	r3, #0
 8001110:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8001112:	230e      	movs	r3, #14
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	e027      	b.n	8001168 <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <CheckForAndClearLines+0x78>)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001120:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001124:	4293      	cmp	r3, r2
 8001126:	d105      	bne.n	8001134 <CheckForAndClearLines+0x30>
			linesToClear++;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	3301      	adds	r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 800112e:	2301      	movs	r3, #1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	e001      	b.n	8001138 <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 8001134:	2300      	movs	r3, #0
 8001136:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d011      	beq.n	8001162 <CheckForAndClearLines+0x5e>
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10e      	bne.n	8001162 <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	4413      	add	r3, r2
 800114a:	490c      	ldr	r1, [pc, #48]	; (800117c <CheckForAndClearLines+0x78>)
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <CheckForAndClearLines+0x78>)
 8001154:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 8001158:	4a08      	ldr	r2, [pc, #32]	; (800117c <CheckForAndClearLines+0x78>)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2100      	movs	r1, #0
 800115e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	3b01      	subs	r3, #1
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	dad4      	bge.n	8001118 <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 800116e:	79fb      	ldrb	r3, [r7, #7]
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	200002f4 	.word	0x200002f4

08001180 <Tetris_Rotate>:

void Tetris_Rotate(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <Tetris_Rotate+0x48>)
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	3301      	adds	r3, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <Tetris_Rotate+0x48>)
 800118e:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <Tetris_Rotate+0x48>)
 8001192:	791b      	ldrb	r3, [r3, #4]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d902      	bls.n	800119e <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <Tetris_Rotate+0x48>)
 800119a:	2200      	movs	r2, #0
 800119c:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 800119e:	f7ff ff6d 	bl	800107c <IsMoveValid>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10d      	bne.n	80011c4 <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <Tetris_Rotate+0x48>)
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <Tetris_Rotate+0x48>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 80011b6:	e005      	b.n	80011c4 <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <Tetris_Rotate+0x48>)
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	3b01      	subs	r3, #1
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b01      	ldr	r3, [pc, #4]	; (80011c8 <Tetris_Rotate+0x48>)
 80011c2:	711a      	strb	r2, [r3, #4]
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000032c 	.word	0x2000032c

080011cc <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <Tetris_MoveDown+0x80>)
 80011d4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	3301      	adds	r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	b25a      	sxtb	r2, r3
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <Tetris_MoveDown+0x80>)
 80011e2:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 80011e4:	f7ff ff4a 	bl	800107c <IsMoveValid>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d128      	bne.n	8001240 <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <Tetris_MoveDown+0x80>)
 80011f0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b25a      	sxtb	r2, r3
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <Tetris_MoveDown+0x80>)
 80011fe:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 8001200:	f7ff fef6 	bl	8000ff0 <WriteCurrentPieceToGameBoardArray>
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 8001208:	f7ff ff7c 	bl	8001104 <CheckForAndClearLines>
 800120c:	4603      	mov	r3, r0
 800120e:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 8001210:	f7ff fe6a 	bl	8000ee8 <CopyNextPieceToCurrent>
		InitNewNextPiece();
 8001214:	f7ff fe4a 	bl	8000eac <InitNewNextPiece>
		if(hasGameOverOccured == true){
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d106      	bne.n	800122c <Tetris_MoveDown+0x60>
			_onGameOver();
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <Tetris_MoveDown+0x84>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4798      	blx	r3
			Tetris_ResetTetrisBoard();
 8001224:	f7ff fe72 	bl	8000f0c <Tetris_ResetTetrisBoard>
			return MoveDownResultGameOver;
 8001228:	2303      	movs	r3, #3
 800122a:	e00a      	b.n	8001242 <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <Tetris_MoveDown+0x88>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	4610      	mov	r0, r2
 800123a:	4798      	blx	r3
		}
		return Settled;
 800123c:	2302      	movs	r3, #2
 800123e:	e000      	b.n	8001242 <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000032c 	.word	0x2000032c
 8001250:	20000328 	.word	0x20000328
 8001254:	20000324 	.word	0x20000324

08001258 <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <Tetris_MoveLeft+0x38>)
 800125e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3b01      	subs	r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	b25a      	sxtb	r2, r3
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <Tetris_MoveLeft+0x38>)
 800126c:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 800126e:	f7ff ff05 	bl	800107c <IsMoveValid>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d108      	bne.n	800128a <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <Tetris_MoveLeft+0x38>)
 800127a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	b25a      	sxtb	r2, r3
 8001286:	4b02      	ldr	r3, [pc, #8]	; (8001290 <Tetris_MoveLeft+0x38>)
 8001288:	715a      	strb	r2, [r3, #5]
	}
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000032c 	.word	0x2000032c

08001294 <Tetris_MoveRight>:

void Tetris_MoveRight(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <Tetris_MoveRight+0x38>)
 800129a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <Tetris_MoveRight+0x38>)
 80012a8:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 80012aa:	f7ff fee7 	bl	800107c <IsMoveValid>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d108      	bne.n	80012c6 <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <Tetris_MoveRight+0x38>)
 80012b6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3b01      	subs	r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	b25a      	sxtb	r2, r3
 80012c2:	4b02      	ldr	r3, [pc, #8]	; (80012cc <Tetris_MoveRight+0x38>)
 80012c4:	715a      	strb	r2, [r3, #5]
	}
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000032c 	.word	0x2000032c

080012d0 <WriteSingleHighScoreToFrameBuffer>:
static i8 _settingInitial = 0;
static u32 _blinkTimer = 0;
static bool _blinkState = true; /* True if the initial being set is currently drawn to frame buffer, false otherwise */
static bool _isAnalogStickExtended = false; /* Is the analog stick moved far enough in any one direction to count as "extended" */

static void WriteSingleHighScoreToFrameBuffer(const HighScore* highScore, u8 line){
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	char highScoreLineBuffer[10];
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
		highScore->Initials[0],
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80012e0:	4619      	mov	r1, r3
		highScore->Initials[1],
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	785b      	ldrb	r3, [r3, #1]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80012e6:	461c      	mov	r4, r3
		highScore->Initials[2],
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	789b      	ldrb	r3, [r3, #2]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f107 000c 	add.w	r0, r7, #12
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	4623      	mov	r3, r4
 80012fc:	460a      	mov	r2, r1
 80012fe:	4907      	ldr	r1, [pc, #28]	; (800131c <WriteSingleHighScoreToFrameBuffer+0x4c>)
 8001300:	f005 fec0 	bl	8007084 <siprintf>
		highScore->Score);
	gfxWriteTextLineToFrameBuffer(line,0,highScoreLineBuffer);
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb01 	bl	8000914 <gfxWriteTextLineToFrameBuffer>

}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	0800842c 	.word	0x0800842c

08001320 <DrawHighScoresToFrameBuffer>:

static void DrawHighScoresToFrameBuffer(){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	e010      	b.n	800134e <DrawHighScoresToFrameBuffer+0x2e>
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(i);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fd51 	bl	8001dd8 <TetrisHighScores_GetHighScoreAtIndex>
 8001336:	6038      	str	r0, [r7, #0]
		WriteSingleHighScoreToFrameBuffer(highScore, i+1);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	3301      	adds	r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4619      	mov	r1, r3
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff ffc4 	bl	80012d0 <WriteSingleHighScoreToFrameBuffer>
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3301      	adds	r3, #1
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d9eb      	bls.n	800132c <DrawHighScoresToFrameBuffer+0xc>
	}

}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <BlinkInitialBeingSet>:

static void BlinkInitialBeingSet(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
	if(_blinkState == true){
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <BlinkInitialBeingSet+0x8c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d11e      	bne.n	80013ac <BlinkInitialBeingSet+0x4c>
		_blinkState = false;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <BlinkInitialBeingSet+0x8c>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
		u8 colStart = _settingInitial * LCD_PCD8544_CHAR_WIDTH;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <BlinkInitialBeingSet+0x90>)
 8001376:	f993 3000 	ldrsb.w	r3, [r3]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	4413      	add	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	71fb      	strb	r3, [r7, #7]
		u8 row = _newHighScoreRank + 1;
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <BlinkInitialBeingSet+0x94>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	71bb      	strb	r3, [r7, #6]
		gfxClearFrameBufferRow(row,colStart,LCD_PCD8544_CHAR_WIDTH);
 800138e:	79f9      	ldrb	r1, [r7, #7]
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	2206      	movs	r2, #6
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fbc9 	bl	8000b2c <gfxClearFrameBufferRow>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,colStart + LCD_PCD8544_CHAR_WIDTH);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	3306      	adds	r3, #6
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	79b9      	ldrb	r1, [r7, #6]
 80013a2:	79b8      	ldrb	r0, [r7, #6]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f7ff f8d9 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
 80013aa:	e017      	b.n	80013dc <BlinkInitialBeingSet+0x7c>
	}
	else{
		_blinkState = true;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <BlinkInitialBeingSet+0x8c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
		u8 row = _newHighScoreRank + 1;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <BlinkInitialBeingSet+0x94>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <BlinkInitialBeingSet+0x94>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd0a 	bl	8001dd8 <TetrisHighScores_GetHighScoreAtIndex>
 80013c4:	60b8      	str	r0, [r7, #8]
		WriteSingleHighScoreToFrameBuffer(highScore, row);
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4619      	mov	r1, r3
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f7ff ff80 	bl	80012d0 <WriteSingleHighScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,LCD_PCD8544_CHAR_WIDTH*3);
 80013d0:	7bf9      	ldrb	r1, [r7, #15]
 80013d2:	7bf8      	ldrb	r0, [r7, #15]
 80013d4:	2312      	movs	r3, #18
 80013d6:	2200      	movs	r2, #0
 80013d8:	f7ff f8c0 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	}
	gfxFinishDrawing(&gLcdScreen);
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <BlinkInitialBeingSet+0x98>)
 80013de:	f7ff f9e5 	bl	80007ac <gfxFinishDrawing>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000020 	.word	0x20000020
 80013f0:	20000345 	.word	0x20000345
 80013f4:	20000344 	.word	0x20000344
 80013f8:	200005d8 	.word	0x200005d8

080013fc <TetrisEnterHighScore_Update>:

Tetris_Modes_StateTriggers TetrisEnterHighScore_Update(u32 timePassed){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	else{
		_isAnalogStickExtended = false;
	}
	*/
	HighScore* highScore;
	switch(EmulateDPad(&hadc2)){
 8001404:	4858      	ldr	r0, [pc, #352]	; (8001568 <TetrisEnterHighScore_Update+0x16c>)
 8001406:	f7fe ff87 	bl	8000318 <EmulateDPad>
 800140a:	4603      	mov	r3, r0
 800140c:	3b01      	subs	r3, #1
 800140e:	2b03      	cmp	r3, #3
 8001410:	f200 808a 	bhi.w	8001528 <TetrisEnterHighScore_Update+0x12c>
 8001414:	a201      	add	r2, pc, #4	; (adr r2, 800141c <TetrisEnterHighScore_Update+0x20>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	0800142d 	.word	0x0800142d
 8001420:	08001479 	.word	0x08001479
 8001424:	080014c5 	.word	0x080014c5
 8001428:	080014f7 	.word	0x080014f7
	case UP:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <TetrisEnterHighScore_Update+0x170>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fcd1 	bl	8001dd8 <TetrisHighScores_GetHighScoreAtIndex>
 8001436:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]++;
 8001438:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 800143a:	f993 3000 	ldrsb.w	r3, [r3]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	5cd2      	ldrb	r2, [r2, r3]
 8001442:	3201      	adds	r2, #1
 8001444:	b2d1      	uxtb	r1, r2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] > 'Z'){
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 800144c:	f993 3000 	ldrsb.w	r3, [r3]
 8001450:	461a      	mov	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	5c9b      	ldrb	r3, [r3, r2]
 8001456:	2b5a      	cmp	r3, #90	; 0x5a
 8001458:	d906      	bls.n	8001468 <TetrisEnterHighScore_Update+0x6c>
			highScore->Initials[_settingInitial] = 'A';
 800145a:	4b45      	ldr	r3, [pc, #276]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 800145c:	f993 3000 	ldrsb.w	r3, [r3]
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2141      	movs	r1, #65	; 0x41
 8001466:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <TetrisEnterHighScore_Update+0x178>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001470:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001474:	601a      	str	r2, [r3, #0]
		break;
 8001476:	e057      	b.n	8001528 <TetrisEnterHighScore_Update+0x12c>
	case DOWN:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <TetrisEnterHighScore_Update+0x170>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fcab 	bl	8001dd8 <TetrisHighScores_GetHighScoreAtIndex>
 8001482:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]--;
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 8001486:	f993 3000 	ldrsb.w	r3, [r3]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	5cd2      	ldrb	r2, [r2, r3]
 800148e:	3a01      	subs	r2, #1
 8001490:	b2d1      	uxtb	r1, r2
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] < 'A'){
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 8001498:	f993 3000 	ldrsb.w	r3, [r3]
 800149c:	461a      	mov	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	5c9b      	ldrb	r3, [r3, r2]
 80014a2:	2b40      	cmp	r3, #64	; 0x40
 80014a4:	d806      	bhi.n	80014b4 <TetrisEnterHighScore_Update+0xb8>
			highScore->Initials[_settingInitial] = 'Z';
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014a8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	215a      	movs	r1, #90	; 0x5a
 80014b2:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <TetrisEnterHighScore_Update+0x178>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80014ba:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 80014bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014c0:	601a      	str	r2, [r3, #0]
		break;
 80014c2:	e031      	b.n	8001528 <TetrisEnterHighScore_Update+0x12c>
	case LEFT:
		_settingInitial--;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014c6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014d4:	701a      	strb	r2, [r3, #0]
		if(_settingInitial < 0){
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014d8:	f993 3000 	ldrsb.w	r3, [r3]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da02      	bge.n	80014e6 <TetrisEnterHighScore_Update+0xea>
			_settingInitial = 2;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014e2:	2202      	movs	r2, #2
 80014e4:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <TetrisEnterHighScore_Update+0x178>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 80014ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014f2:	601a      	str	r2, [r3, #0]
		break;
 80014f4:	e018      	b.n	8001528 <TetrisEnterHighScore_Update+0x12c>
	case RIGHT:
		_settingInitial++;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b25a      	sxtb	r2, r3
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 8001506:	701a      	strb	r2, [r3, #0]
		if(_settingInitial >= 3){
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 800150a:	f993 3000 	ldrsb.w	r3, [r3]
 800150e:	2b02      	cmp	r3, #2
 8001510:	dd02      	ble.n	8001518 <TetrisEnterHighScore_Update+0x11c>
			_settingInitial = 0;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <TetrisEnterHighScore_Update+0x174>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <TetrisEnterHighScore_Update+0x178>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001520:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001524:	601a      	str	r2, [r3, #0]
		break;
 8001526:	bf00      	nop
	}

	_blinkTimer += timePassed;
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001532:	6013      	str	r3, [r2, #0]
	if(_blinkTimer >= ENTER_INITIAL_BLINK_PERIOD){
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800153c:	d304      	bcc.n	8001548 <TetrisEnterHighScore_Update+0x14c>
		_blinkTimer = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <TetrisEnterHighScore_Update+0x17c>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
		BlinkInitialBeingSet();
 8001544:	f7ff ff0c 	bl	8001360 <BlinkInitialBeingSet>
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8001548:	2101      	movs	r1, #1
 800154a:	480c      	ldr	r0, [pc, #48]	; (800157c <TetrisEnterHighScore_Update+0x180>)
 800154c:	f003 f906 	bl	800475c <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	72fb      	strb	r3, [r7, #11]
	if(buttonBState == GPIO_PIN_SET){
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <TetrisEnterHighScore_Update+0x162>
		return HighScoreEntered;
 800155a:	2305      	movs	r3, #5
 800155c:	e000      	b.n	8001560 <TetrisEnterHighScore_Update+0x164>
	}

	return NoChange;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200007f4 	.word	0x200007f4
 800156c:	20000344 	.word	0x20000344
 8001570:	20000345 	.word	0x20000345
 8001574:	20000020 	.word	0x20000020
 8001578:	20000348 	.word	0x20000348
 800157c:	48000400 	.word	0x48000400

08001580 <TetrisEnterHighScore_OnEnter>:

void TetrisEnterHighScore_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
	_newHighScore = *((u32*)stateMachineDataPtr);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a24      	ldr	r2, [pc, #144]	; (8001624 <TetrisEnterHighScore_OnEnter+0xa4>)
 8001592:	6013      	str	r3, [r2, #0]
	_newHighScoreRank = TetrisHighScores_AddHighScore(_newHighScore);
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <TetrisEnterHighScore_OnEnter+0xa4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fc49 	bl	8001e30 <TetrisHighScores_AddHighScore>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <TetrisEnterHighScore_OnEnter+0xa8>)
 80015a4:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 80015a6:	f7fe ff93 	bl	80004d0 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 80015aa:	f7ff fa5d 	bl	8000a68 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 80015ae:	2354      	movs	r3, #84	; 0x54
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7fe ffd1 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 80015ba:	2354      	movs	r3, #84	; 0x54
 80015bc:	2200      	movs	r2, #0
 80015be:	2101      	movs	r1, #1
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7fe ffcb 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 80015c6:	2354      	movs	r3, #84	; 0x54
 80015c8:	2200      	movs	r2, #0
 80015ca:	2102      	movs	r1, #2
 80015cc:	2002      	movs	r0, #2
 80015ce:	f7fe ffc5 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(3,3,0,84);
 80015d2:	2354      	movs	r3, #84	; 0x54
 80015d4:	2200      	movs	r2, #0
 80015d6:	2103      	movs	r1, #3
 80015d8:	2003      	movs	r0, #3
 80015da:	f7fe ffbf 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(4,4,0,84);
 80015de:	2354      	movs	r3, #84	; 0x54
 80015e0:	2200      	movs	r2, #0
 80015e2:	2104      	movs	r1, #4
 80015e4:	2004      	movs	r0, #4
 80015e6:	f7fe ffb9 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(5,5,0,84);
 80015ea:	2354      	movs	r3, #84	; 0x54
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	2005      	movs	r0, #5
 80015f2:	f7fe ffb3 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	gfxWriteTextLineToFrameBuffer(0,0,"High Score");
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <TetrisEnterHighScore_OnEnter+0xac>)
 80015f8:	2100      	movs	r1, #0
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff f98a 	bl	8000914 <gfxWriteTextLineToFrameBuffer>
	DrawHighScoresToFrameBuffer();
 8001600:	f7ff fe8e 	bl	8001320 <DrawHighScoresToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <TetrisEnterHighScore_OnEnter+0xb0>)
 8001606:	f7ff f8d1 	bl	80007ac <gfxFinishDrawing>
	_settingInitial = 0;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <TetrisEnterHighScore_OnEnter+0xb4>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
	_blinkTimer = 0;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <TetrisEnterHighScore_OnEnter+0xb8>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	_blinkState = true;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <TetrisEnterHighScore_OnEnter+0xbc>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]

}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000340 	.word	0x20000340
 8001628:	20000344 	.word	0x20000344
 800162c:	08008438 	.word	0x08008438
 8001630:	200005d8 	.word	0x200005d8
 8001634:	20000345 	.word	0x20000345
 8001638:	20000348 	.word	0x20000348
 800163c:	20000020 	.word	0x20000020

08001640 <TetrisEnterHighScore_OnExit>:

void TetrisEnterHighScore_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <TetrisEnterHighScore_OnExit+0x20>)
 800164e:	f7ff fa3b 	bl	8000ac8 <ClearScreen>
	TetrisPersistantData_SaveAllPersistantData();
 8001652:	f000 fe2f 	bl	80022b4 <TetrisPersistantData_SaveAllPersistantData>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200005d8 	.word	0x200005d8

08001664 <GetRandomNumberBetweenZeroAndSix>:

static u8 _currentLevel = 5;

static void InitCurrentLevelTetrisScores();

static u8 GetRandomNumberBetweenZeroAndSix(){
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 8001668:	f005 fcce 	bl	8007008 <rand>
 800166c:	4603      	mov	r3, r0
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <GetRandomNumberBetweenZeroAndSix+0x28>)
 8001672:	fba3 1302 	umull	r1, r3, r3, r2
 8001676:	1ad1      	subs	r1, r2, r3
 8001678:	0849      	lsrs	r1, r1, #1
 800167a:	440b      	add	r3, r1
 800167c:	0899      	lsrs	r1, r3, #2
 800167e:	460b      	mov	r3, r1
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	1a5b      	subs	r3, r3, r1
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	b2db      	uxtb	r3, r3
}
 8001688:	4618      	mov	r0, r3
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24924925 	.word	0x24924925

08001690 <DrawStationaryBlock>:


static void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4604      	mov	r4, r0
 8001698:	4608      	mov	r0, r1
 800169a:	4611      	mov	r1, r2
 800169c:	461a      	mov	r2, r3
 800169e:	4623      	mov	r3, r4
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	4603      	mov	r3, r0
 80016a4:	71bb      	strb	r3, [r7, #6]
 80016a6:	460b      	mov	r3, r1
 80016a8:	717b      	strb	r3, [r7, #5]
 80016aa:	4613      	mov	r3, r2
 80016ac:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 80016ae:	793b      	ldrb	r3, [r7, #4]
 80016b0:	797a      	ldrb	r2, [r7, #5]
 80016b2:	79b9      	ldrb	r1, [r7, #6]
 80016b4:	79f8      	ldrb	r0, [r7, #7]
 80016b6:	f7ff f9ab 	bl	8000a10 <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 80016ba:	793b      	ldrb	r3, [r7, #4]
 80016bc:	797a      	ldrb	r2, [r7, #5]
 80016be:	79b9      	ldrb	r1, [r7, #6]
 80016c0:	79f8      	ldrb	r0, [r7, #7]
 80016c2:	f7ff f82e 	bl	8000722 <gfxDrawLine>
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}
	...

080016d0 <WriteLevelToFrameBuffer>:

static void WriteLevelToFrameBuffer(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
	u8 levelBuffer[11];
	sprintf(levelBuffer, "Lvl: %lu",_currentLevel);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <WriteLevelToFrameBuffer+0x2c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <WriteLevelToFrameBuffer+0x30>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f005 fccf 	bl	8007084 <siprintf>
	gfxWriteTextLineToFrameBuffer(2,TETRIS_BOARD_RIGHT_EDGE_COL + 1,levelBuffer);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	461a      	mov	r2, r3
 80016ea:	2126      	movs	r1, #38	; 0x26
 80016ec:	2002      	movs	r0, #2
 80016ee:	f7ff f911 	bl	8000914 <gfxWriteTextLineToFrameBuffer>

}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000002b 	.word	0x2000002b
 8001700:	08008444 	.word	0x08008444

08001704 <SetLevel>:

static void SetLevel(u8 level){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	_currentLevel = level;
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <SetLevel+0x34>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	7013      	strb	r3, [r2, #0]
	_newLevelToDisplay = true;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <SetLevel+0x38>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
	_autoMoveInterval = _levelsMoveIntervals[_currentLevel];
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <SetLevel+0x34>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <SetLevel+0x3c>)
 8001722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <SetLevel+0x40>)
 8001728:	6013      	str	r3, [r2, #0]
	InitCurrentLevelTetrisScores();
 800172a:	f000 f963 	bl	80019f4 <InitCurrentLevelTetrisScores>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000002b 	.word	0x2000002b
 800173c:	20000029 	.word	0x20000029
 8001740:	08008af8 	.word	0x08008af8
 8001744:	20000024 	.word	0x20000024

08001748 <OnLinesCleared>:

static void OnLinesCleared(u8 numLinesCleared){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <OnLinesCleared+0xa4>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <OnLinesCleared+0xa4>)
 8001760:	801a      	strh	r2, [r3, #0]
	if(_linesCleared >= TETRIS_LINES_PER_LEVEL_UP){
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <OnLinesCleared+0xa4>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	2b09      	cmp	r3, #9
 8001768:	d909      	bls.n	800177e <OnLinesCleared+0x36>
		_linesCleared = 0;
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <OnLinesCleared+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	801a      	strh	r2, [r3, #0]
		SetLevel(_currentLevel + 1);
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <OnLinesCleared+0xa8>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ffc3 	bl	8001704 <SetLevel>
	}
	switch(numLinesCleared){
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	3b01      	subs	r3, #1
 8001782:	2b03      	cmp	r3, #3
 8001784:	d82a      	bhi.n	80017dc <OnLinesCleared+0x94>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <OnLinesCleared+0x44>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017ad 	.word	0x080017ad
 8001794:	080017bd 	.word	0x080017bd
 8001798:	080017cd 	.word	0x080017cd
	case 1:
		_score += _currentLevelTetrisScores[0];
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <OnLinesCleared+0xac>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <OnLinesCleared+0xb0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <OnLinesCleared+0xb0>)
 80017a8:	6013      	str	r3, [r2, #0]
		break;
 80017aa:	e017      	b.n	80017dc <OnLinesCleared+0x94>
	case 2:
		_score += _currentLevelTetrisScores[1];
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <OnLinesCleared+0xac>)
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <OnLinesCleared+0xb0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <OnLinesCleared+0xb0>)
 80017b8:	6013      	str	r3, [r2, #0]
		break;
 80017ba:	e00f      	b.n	80017dc <OnLinesCleared+0x94>
	case 3:
		_score += _currentLevelTetrisScores[2];
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <OnLinesCleared+0xac>)
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <OnLinesCleared+0xb0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <OnLinesCleared+0xb0>)
 80017c8:	6013      	str	r3, [r2, #0]
		break;
 80017ca:	e007      	b.n	80017dc <OnLinesCleared+0x94>
	case 4:
		_score += _currentLevelTetrisScores[3];
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <OnLinesCleared+0xac>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <OnLinesCleared+0xb0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <OnLinesCleared+0xb0>)
 80017d8:	6013      	str	r3, [r2, #0]
		break;
 80017da:	bf00      	nop
	}
	_newScoreToDisplay = true;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <OnLinesCleared+0xb4>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000352 	.word	0x20000352
 80017f0:	2000002b 	.word	0x2000002b
 80017f4:	2000035c 	.word	0x2000035c
 80017f8:	20000354 	.word	0x20000354
 80017fc:	20000028 	.word	0x20000028

08001800 <OnGameOver>:

static void OnGameOver(){
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	// Not used
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <IncrementTetrisTimer>:

static void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <IncrementTetrisTimer+0x44>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <IncrementTetrisTimer+0x44>)
 8001826:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <IncrementTetrisTimer+0x44>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <IncrementTetrisTimer+0x48>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d90b      	bls.n	800184c <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 800183a:	f7ff fcc7 	bl	80011cc <Tetris_MoveDown>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <IncrementTetrisTimer+0x4c>)
 8001844:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 8001846:	4b03      	ldr	r3, [pc, #12]	; (8001854 <IncrementTetrisTimer+0x44>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
	}
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	2000034c 	.word	0x2000034c
 8001858:	20000024 	.word	0x20000024
 800185c:	2000002a 	.word	0x2000002a

08001860 <WriteScoreToFrameBuffer>:

static void WriteScoreToFrameBuffer(){
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%lu",_score);
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <WriteScoreToFrameBuffer+0x28>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	463b      	mov	r3, r7
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <WriteScoreToFrameBuffer+0x2c>)
 800186e:	4618      	mov	r0, r3
 8001870:	f005 fc08 	bl	8007084 <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 8001874:	463b      	mov	r3, r7
 8001876:	461a      	mov	r2, r3
 8001878:	2126      	movs	r1, #38	; 0x26
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff f84a 	bl	8000914 <gfxWriteTextLineToFrameBuffer>

}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000354 	.word	0x20000354
 800188c:	08008450 	.word	0x08008450

08001890 <UpdateTetrisGame>:


static void UpdateTetrisGame(u32 timePassed){
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 8001898:	f107 0208 	add.w	r2, r7, #8
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	4826      	ldr	r0, [pc, #152]	; (800193c <UpdateTetrisGame+0xac>)
 80018a4:	f7fe fcec 	bl	8000280 <ReadAnalogStickChange>

	bool movingDown = true;
 80018a8:	2301      	movs	r3, #1
 80018aa:	75fb      	strb	r3, [r7, #23]

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80018ac:	2101      	movs	r1, #1
 80018ae:	4824      	ldr	r0, [pc, #144]	; (8001940 <UpdateTetrisGame+0xb0>)
 80018b0:	f002 ff54 	bl	800475c <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	75bb      	strb	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	613b      	str	r3, [r7, #16]
	if(analogXChange > (twelveBitMax/3)){
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4a20      	ldr	r2, [pc, #128]	; (8001944 <UpdateTetrisGame+0xb4>)
 80018c2:	fb82 1203 	smull	r1, r2, r2, r3
 80018c6:	17db      	asrs	r3, r3, #31
 80018c8:	1ad2      	subs	r2, r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	da02      	bge.n	80018d6 <UpdateTetrisGame+0x46>
		Tetris_MoveRight();
 80018d0:	f7ff fce0 	bl	8001294 <Tetris_MoveRight>
 80018d4:	e01c      	b.n	8001910 <UpdateTetrisGame+0x80>
	}
	else if(analogXChange < -(twelveBitMax/3)){
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <UpdateTetrisGame+0xb4>)
 80018da:	fb82 1203 	smull	r1, r2, r2, r3
 80018de:	17db      	asrs	r3, r3, #31
 80018e0:	1a9a      	subs	r2, r3, r2
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dd02      	ble.n	80018ee <UpdateTetrisGame+0x5e>
		Tetris_MoveLeft();
 80018e8:	f7ff fcb6 	bl	8001258 <Tetris_MoveLeft>
 80018ec:	e010      	b.n	8001910 <UpdateTetrisGame+0x80>
	}
	else if(analogYChange > (twelveBitMax/3)){
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <UpdateTetrisGame+0xb4>)
 80018f2:	fb82 1203 	smull	r1, r2, r2, r3
 80018f6:	17db      	asrs	r3, r3, #31
 80018f8:	1ad2      	subs	r2, r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	da07      	bge.n	8001910 <UpdateTetrisGame+0x80>
		_movingDownResult = Tetris_MoveDown();
 8001900:	f7ff fc64 	bl	80011cc <Tetris_MoveDown>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <UpdateTetrisGame+0xb8>)
 800190a:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 8001910:	7dbb      	ldrb	r3, [r7, #22]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d105      	bne.n	8001922 <UpdateTetrisGame+0x92>
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <UpdateTetrisGame+0xbc>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <UpdateTetrisGame+0x92>
		Tetris_Rotate();
 800191e:	f7ff fc2f 	bl	8001180 <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <UpdateTetrisGame+0xbc>)
 8001924:	7dbb      	ldrb	r3, [r7, #22]
 8001926:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	4619      	mov	r1, r3
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff6f 	bl	8001810 <IncrementTetrisTimer>

}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200007f4 	.word	0x200007f4
 8001940:	48000400 	.word	0x48000400
 8001944:	55555556 	.word	0x55555556
 8001948:	2000002a 	.word	0x2000002a
 800194c:	20000350 	.word	0x20000350

08001950 <DrawTetrisGame>:

static void DrawTetrisGame(){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	gfxClearFrameBuffer();
 8001954:	f7fe fdbc 	bl	80004d0 <gfxClearFrameBuffer>

	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <DrawTetrisGame+0x94>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d003      	beq.n	8001968 <DrawTetrisGame+0x18>
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <DrawTetrisGame+0x94>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d101      	bne.n	800196c <DrawTetrisGame+0x1c>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <DrawTetrisGame+0x1e>
 800196c:	2300      	movs	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fa05 	bl	8000d80 <Tetris_DrawTetrisBoard>

	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 8001976:	2325      	movs	r3, #37	; 0x25
 8001978:	2204      	movs	r2, #4
 800197a:	2105      	movs	r1, #5
 800197c:	2000      	movs	r0, #0
 800197e:	f7fe fded 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <DrawTetrisGame+0x94>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d003      	beq.n	8001992 <DrawTetrisGame+0x42>
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <DrawTetrisGame+0x94>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d105      	bne.n	800199e <DrawTetrisGame+0x4e>
		/* update the area where the next block is shown */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 8001992:	2335      	movs	r3, #53	; 0x35
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	2000      	movs	r0, #0
 800199a:	f7fe fddf 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay == true){
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <DrawTetrisGame+0x98>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10a      	bne.n	80019bc <DrawTetrisGame+0x6c>
		/* Update the new area of the screen with the new score.
		 * TODO: get actual length of score string instead of using 84 */
		WriteScoreToFrameBuffer();
 80019a6:	f7ff ff5b 	bl	8001860 <WriteScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 80019aa:	2354      	movs	r3, #84	; 0x54
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7fe fdd3 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <DrawTetrisGame+0x98>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
	}
	if(_newLevelToDisplay){
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <DrawTetrisGame+0x9c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00a      	beq.n	80019da <DrawTetrisGame+0x8a>
		WriteLevelToFrameBuffer();
 80019c4:	f7ff fe84 	bl	80016d0 <WriteLevelToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 80019c8:	2354      	movs	r3, #84	; 0x54
 80019ca:	2200      	movs	r2, #0
 80019cc:	2102      	movs	r1, #2
 80019ce:	2002      	movs	r0, #2
 80019d0:	f7fe fdc4 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newLevelToDisplay = false;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <DrawTetrisGame+0x9c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <DrawTetrisGame+0xa0>)
 80019dc:	f7fe fee6 	bl	80007ac <gfxFinishDrawing>
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000002a 	.word	0x2000002a
 80019e8:	20000028 	.word	0x20000028
 80019ec:	20000029 	.word	0x20000029
 80019f0:	200005d8 	.word	0x200005d8

080019f4 <InitCurrentLevelTetrisScores>:

static void InitCurrentLevelTetrisScores(){
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	/* score setting function derived from information from https://tetris.fandom.com/wiki/Scoring */

	if(_currentLevel == 0){
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10e      	bne.n	8001a1e <InitCurrentLevelTetrisScores+0x2a>
		_currentLevelTetrisScores[0] = 40;
 8001a00:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a02:	2228      	movs	r2, #40	; 0x28
 8001a04:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100;
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a08:	2264      	movs	r2, #100	; 0x64
 8001a0a:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300;
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a12:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200;
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a16:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001a1a:	60da      	str	r2, [r3, #12]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);

	}
}
 8001a1c:	e066      	b.n	8001aec <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 1){
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10e      	bne.n	8001a44 <InitCurrentLevelTetrisScores+0x50>
		_currentLevelTetrisScores[0] = 80;
 8001a26:	4b35      	ldr	r3, [pc, #212]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a28:	2250      	movs	r2, #80	; 0x50
 8001a2a:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 200;
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a2e:	22c8      	movs	r2, #200	; 0xc8
 8001a30:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 600;
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a34:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001a38:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 2400;
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a3c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001a40:	60da      	str	r2, [r3, #12]
}
 8001a42:	e053      	b.n	8001aec <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel >=2 && _currentLevel < 9){
 8001a44:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d913      	bls.n	8001a74 <InitCurrentLevelTetrisScores+0x80>
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d80f      	bhi.n	8001a74 <InitCurrentLevelTetrisScores+0x80>
		_currentLevelTetrisScores[0] = 120;
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a56:	2278      	movs	r2, #120	; 0x78
 8001a58:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 300;
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a60:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 900;
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a64:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001a68:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 3600;
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a6c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001a70:	60da      	str	r2, [r3, #12]
}
 8001a72:	e03b      	b.n	8001aec <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 9){
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b09      	cmp	r3, #9
 8001a7a:	d110      	bne.n	8001a9e <InitCurrentLevelTetrisScores+0xaa>
		_currentLevelTetrisScores[0] = 400;
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a82:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 1000;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a8a:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 3000;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a8e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a92:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 12000;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001a96:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001a9a:	60da      	str	r2, [r3, #12]
}
 8001a9c:	e026      	b.n	8001aec <InitCurrentLevelTetrisScores+0xf8>
		_currentLevelTetrisScores[0] = 40 * (_currentLevel + 1);
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001ab0:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	2264      	movs	r2, #100	; 0x64
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001ac2:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001ad6:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <InitCurrentLevelTetrisScores+0x104>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <InitCurrentLevelTetrisScores+0x108>)
 8001aea:	60da      	str	r2, [r3, #12]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	2000002b 	.word	0x2000002b
 8001afc:	2000035c 	.word	0x2000035c

08001b00 <CheckForHighScore>:


Tetris_Modes_StateTriggers CheckForHighScore(){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	if(TetrisHighScores_IsNewHighScore(_score) == true){
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <CheckForHighScore+0x24>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f945 	bl	8001d98 <TetrisHighScores_IsNewHighScore>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d104      	bne.n	8001b1e <CheckForHighScore+0x1e>
		TetrisMain_SetStateMachineDataPointer(&_score);
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <CheckForHighScore+0x24>)
 8001b16:	f000 fac3 	bl	80020a0 <TetrisMain_SetStateMachineDataPointer>
		return GameOverNewHighScore;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e000      	b.n	8001b20 <CheckForHighScore+0x20>
	}
	else{
		return GameOver;
 8001b1e:	2302      	movs	r3, #2
	}
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000354 	.word	0x20000354

08001b28 <TetrisGame_Update>:


Tetris_Modes_StateTriggers TetrisGame_Update(u32 timePassed){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	UpdateTetrisGame(timePassed);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fead 	bl	8001890 <UpdateTetrisGame>
	DrawTetrisGame();
 8001b36:	f7ff ff0b 	bl	8001950 <DrawTetrisGame>
	if(_movingDownResult == MoveDownResultGameOver){
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <TetrisGame_Update+0x2c>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d103      	bne.n	8001b4a <TetrisGame_Update+0x22>
		return CheckForHighScore();
 8001b42:	f7ff ffdd 	bl	8001b00 <CheckForHighScore>
 8001b46:	4603      	mov	r3, r0
 8001b48:	e000      	b.n	8001b4c <TetrisGame_Update+0x24>
	}
	return NoChange;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000002a 	.word	0x2000002a

08001b58 <TetrisGame_Init>:



void TetrisGame_Init(){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af02      	add	r7, sp, #8
	Tetris_Init(
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <TetrisGame_Init+0x20>)
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <TetrisGame_Init+0x24>)
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <TetrisGame_Init+0x28>)
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <TetrisGame_Init+0x2c>)
 8001b6a:	4907      	ldr	r1, [pc, #28]	; (8001b88 <TetrisGame_Init+0x30>)
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <TetrisGame_Init+0x2c>)
 8001b6e:	f7ff f9dd 	bl	8000f2c <Tetris_Init>
			&DrawStationaryBlock,
			&gfxDrawAxisAlignedRect,
			&GetRandomNumberBetweenZeroAndSix,
			&OnLinesCleared,
			&OnGameOver);
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	08001801 	.word	0x08001801
 8001b7c:	08001749 	.word	0x08001749
 8001b80:	08001665 	.word	0x08001665
 8001b84:	08000a11 	.word	0x08000a11
 8001b88:	08001691 	.word	0x08001691

08001b8c <TetrisGame_OnEnter>:

void TetrisGame_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
	if(previousState == LevelSelect || previousState == NoState){
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <TetrisGame_OnEnter+0x18>
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d103      	bne.n	8001bac <TetrisGame_OnEnter+0x20>
		_startLevel = *((u8*)stateMachineDataPtr);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <TetrisGame_OnEnter+0x54>)
 8001baa:	701a      	strb	r2, [r3, #0]
	}
	SetLevel(_startLevel);
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <TetrisGame_OnEnter+0x54>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fda7 	bl	8001704 <SetLevel>
	Tetris_ResetTetrisBoard();
 8001bb6:	f7ff f9a9 	bl	8000f0c <Tetris_ResetTetrisBoard>
	InitCurrentLevelTetrisScores();
 8001bba:	f7ff ff1b 	bl	80019f4 <InitCurrentLevelTetrisScores>
	_movingDownResult = Settled;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <TetrisGame_OnEnter+0x58>)
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	701a      	strb	r2, [r3, #0]
	_score = 0;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <TetrisGame_OnEnter+0x5c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
	_newScoreToDisplay = true;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <TetrisGame_OnEnter+0x60>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
	_newLevelToDisplay = true;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <TetrisGame_OnEnter+0x64>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000358 	.word	0x20000358
 8001be4:	2000002a 	.word	0x2000002a
 8001be8:	20000354 	.word	0x20000354
 8001bec:	20000028 	.word	0x20000028
 8001bf0:	20000029 	.word	0x20000029

08001bf4 <TetrisGame_OnExit>:



void TetrisGame_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <TetrisGame_OnExit+0x1c>)
 8001c02:	f7fe ff61 	bl	8000ac8 <ClearScreen>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200005d8 	.word	0x200005d8

08001c14 <SetHighScoreCellSize>:
		{{'c','p','u'}, 5000},
		{{'c','p','u'}, 2500},
};
static u32 _highScoreCellSize = 0;

static void SetHighScoreCellSize(){
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
	u32 size = sizeof(HighScore);
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	607b      	str	r3, [r7, #4]
	_highScoreCellSize = size;
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <SetHighScoreCellSize+0x38>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6013      	str	r3, [r2, #0]

	while(_highScoreCellSize % 4 != 0)
 8001c24:	e004      	b.n	8001c30 <SetHighScoreCellSize+0x1c>
		_highScoreCellSize++;
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <SetHighScoreCellSize+0x38>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <SetHighScoreCellSize+0x38>)
 8001c2e:	6013      	str	r3, [r2, #0]
	while(_highScoreCellSize % 4 != 0)
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <SetHighScoreCellSize+0x38>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f4      	bne.n	8001c26 <SetHighScoreCellSize+0x12>

}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000036c 	.word	0x2000036c

08001c50 <LoadHighScores>:
static void LoadHighScores(HighScore* output, u32 startAddress){
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e026      	b.n	8001cae <LoadHighScores+0x5e>
		HighScore* hs = startAddress + (i * _highScoreCellSize);
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <LoadHighScores+0x74>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	fb03 f202 	mul.w	r2, r3, r2
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
		output[i].Initials[0] = hs->Initials[0];
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	7812      	ldrb	r2, [r2, #0]
 8001c7c:	701a      	strb	r2, [r3, #0]
		output[i].Initials[1] = hs->Initials[1];
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	7852      	ldrb	r2, [r2, #1]
 8001c8a:	705a      	strb	r2, [r3, #1]
		output[i].Initials[2] = hs->Initials[2];
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	7892      	ldrb	r2, [r2, #2]
 8001c98:	709a      	strb	r2, [r3, #2]
		output[i].Score = hs->Score;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	6852      	ldr	r2, [r2, #4]
 8001ca6:	605a      	str	r2, [r3, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3301      	adds	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d9d5      	bls.n	8001c60 <LoadHighScores+0x10>
	}

}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000036c 	.word	0x2000036c

08001cc8 <SaveSingleHighScore>:

static void SaveSingleHighScore(HighScore* input, u32 address){
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e016      	b.n	8001d06 <SaveSingleHighScore+0x3e>
		u32 wordToWrite = *((u32*)input + i);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address + (i*4), wordToWrite);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	18d1      	adds	r1, r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	4615      	mov	r5, r2
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	462b      	mov	r3, r5
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f002 f9e4 	bl	80040c8 <HAL_FLASH_Program>
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SaveSingleHighScore+0x54>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	089a      	lsrs	r2, r3, #2
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d8e2      	bhi.n	8001cd8 <SaveSingleHighScore+0x10>
	}
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	2000036c 	.word	0x2000036c

08001d20 <SaveHighScores>:

static void SaveHighScores(HighScore* input, u32 addressToWrite){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e00f      	b.n	8001d50 <SaveHighScores+0x30>
		SaveSingleHighScore(&input[i], addressToWrite);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ffc4 	bl	8001cc8 <SaveSingleHighScore>
		addressToWrite += _highScoreCellSize;
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <SaveHighScores+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	603b      	str	r3, [r7, #0]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d9ec      	bls.n	8001d30 <SaveHighScores+0x10>
	}

}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000036c 	.word	0x2000036c

08001d64 <TetrisHighScores_Load>:

u32 TetrisHighScores_Load(u32 startAddress){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	SetHighScoreCellSize();
 8001d6c:	f7ff ff52 	bl	8001c14 <SetHighScoreCellSize>
	LoadHighScores(_highScores, startAddress);
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4807      	ldr	r0, [pc, #28]	; (8001d90 <TetrisHighScores_Load+0x2c>)
 8001d74:	f7ff ff6c 	bl	8001c50 <LoadHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <TetrisHighScores_Load+0x30>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	441a      	add	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000002c 	.word	0x2000002c
 8001d94:	2000036c 	.word	0x2000036c

08001d98 <TetrisHighScores_IsNewHighScore>:


bool TetrisHighScores_IsNewHighScore(u32 potentialHighScore){
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e00c      	b.n	8001dc0 <TetrisHighScores_IsNewHighScore+0x28>
		if(potentialHighScore > _highScores[i].Score){
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <TetrisHighScores_IsNewHighScore+0x3c>)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d901      	bls.n	8001dba <TetrisHighScores_IsNewHighScore+0x22>
			return true;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e006      	b.n	8001dc8 <TetrisHighScores_IsNewHighScore+0x30>
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d9ef      	bls.n	8001da6 <TetrisHighScores_IsNewHighScore+0xe>
		}
	}
	return false;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	2000002c 	.word	0x2000002c

08001dd8 <TetrisHighScores_GetHighScoreAtIndex>:

HighScore* TetrisHighScores_GetHighScoreAtIndex(u8 atIndex){
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	return &_highScores[atIndex];
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <TetrisHighScores_GetHighScoreAtIndex+0x20>)
 8001de8:	4413      	add	r3, r2
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	2000002c 	.word	0x2000002c

08001dfc <TetrisHighScores_Save>:


u32 TetrisHighScores_Save(u32 startAddress){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	SetHighScoreCellSize();
 8001e04:	f7ff ff06 	bl	8001c14 <SetHighScoreCellSize>

	SaveHighScores(_highScores, startAddress);
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4807      	ldr	r0, [pc, #28]	; (8001e28 <TetrisHighScores_Save+0x2c>)
 8001e0c:	f7ff ff88 	bl	8001d20 <SaveHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <TetrisHighScores_Save+0x30>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	441a      	add	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000002c 	.word	0x2000002c
 8001e2c:	2000036c 	.word	0x2000036c

08001e30 <TetrisHighScores_AddHighScore>:

u8 TetrisHighScores_AddHighScore(u32 highScore){
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

	u8 rval = 255;
 8001e38:	23ff      	movs	r3, #255	; 0xff
 8001e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HighScore cachedHighScore;
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
 8001e42:	e046      	b.n	8001ed2 <TetrisHighScores_AddHighScore+0xa2>
		HighScore* thisHighScore = &_highScores[i];
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <TetrisHighScores_AddHighScore+0xb8>)
 8001e4a:	4413      	add	r3, r2
 8001e4c:	61fb      	str	r3, [r7, #28]

		if(highScore > thisHighScore->Score && rval == 255){
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d919      	bls.n	8001e8c <TetrisHighScores_AddHighScore+0x5c>
 8001e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e5c:	2bff      	cmp	r3, #255	; 0xff
 8001e5e:	d115      	bne.n	8001e8c <TetrisHighScores_AddHighScore+0x5c>
			cachedHighScore = *thisHighScore;
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e6a:	e883 0003 	stmia.w	r3, {r0, r1}
			rval = i;
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			thisHighScore->Score = highScore;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = 'A';
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2241      	movs	r2, #65	; 0x41
 8001e7e:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = 'A';
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2241      	movs	r2, #65	; 0x41
 8001e84:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = 'A';
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	2241      	movs	r2, #65	; 0x41
 8001e8a:	709a      	strb	r2, [r3, #2]

		}
		if(i > rval){
 8001e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d91a      	bls.n	8001ecc <TetrisHighScores_AddHighScore+0x9c>
			HighScore cachedHighScore2 = *thisHighScore;
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ea0:	e883 0003 	stmia.w	r3, {r0, r1}
			thisHighScore->Score = cachedHighScore.Score;
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = cachedHighScore.Initials[0];
 8001eaa:	7d3a      	ldrb	r2, [r7, #20]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = cachedHighScore.Initials[1];
 8001eb0:	7d7a      	ldrb	r2, [r7, #21]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = cachedHighScore.Initials[2];
 8001eb6:	7dba      	ldrb	r2, [r7, #22]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	709a      	strb	r2, [r3, #2]
			cachedHighScore = cachedHighScore2;
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	f107 020c 	add.w	r2, r7, #12
 8001ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ec8:	e883 0003 	stmia.w	r3, {r0, r1}
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	623b      	str	r3, [r7, #32]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d9b5      	bls.n	8001e44 <TetrisHighScores_AddHighScore+0x14>

		}

	}
	return rval;
 8001ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	372c      	adds	r7, #44	; 0x2c
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	2000002c 	.word	0x2000002c

08001eec <WriteStartLevelToFrameBuffer>:
static i8 _startLevel = 3;
static bool _isAnalogStickExtended = false;

u32 randomSeed = 0;

void WriteStartLevelToFrameBuffer(){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
	u8 stringBuffer[11];
	sprintf(stringBuffer,"Level: %lu",_startLevel);
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <WriteStartLevelToFrameBuffer+0x38>)
 8001ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	490a      	ldr	r1, [pc, #40]	; (8001f28 <WriteStartLevelToFrameBuffer+0x3c>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f005 f8c0 	bl	8007084 <siprintf>
	gfxClearFrameBufferRow(2,0,LCD_PCD8544_CHAR_WIDTH*11);
 8001f04:	2242      	movs	r2, #66	; 0x42
 8001f06:	2100      	movs	r1, #0
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f7fe fe0f 	bl	8000b2c <gfxClearFrameBufferRow>
	gfxWriteTextLineToFrameBuffer(2,0,stringBuffer);
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	461a      	mov	r2, r3
 8001f12:	2100      	movs	r1, #0
 8001f14:	2002      	movs	r0, #2
 8001f16:	f7fe fcfd 	bl	8000914 <gfxWriteTextLineToFrameBuffer>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000054 	.word	0x20000054
 8001f28:	08008454 	.word	0x08008454

08001f2c <ChangeCurrentLevelUpOrDown>:

void ChangeCurrentLevelUpOrDown(i8 incOrDec){
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	_startLevel += incOrDec;
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f38:	f993 3000 	ldrsb.w	r3, [r3]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4413      	add	r3, r2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	b25a      	sxtb	r2, r3
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f48:	701a      	strb	r2, [r3, #0]
	if(incOrDec < 0){
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da08      	bge.n	8001f64 <ChangeCurrentLevelUpOrDown+0x38>
		if(_startLevel < 0){
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f54:	f993 3000 	ldrsb.w	r3, [r3]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da0f      	bge.n	8001f7c <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 15;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f5e:	220f      	movs	r2, #15
 8001f60:	701a      	strb	r2, [r3, #0]
		}
	}
	else{

	}
}
 8001f62:	e00b      	b.n	8001f7c <ChangeCurrentLevelUpOrDown+0x50>
	else if(incOrDec > 0){
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	dd07      	ble.n	8001f7c <ChangeCurrentLevelUpOrDown+0x50>
		if(_startLevel > 15){
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	dd02      	ble.n	8001f7c <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 0;
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <ChangeCurrentLevelUpOrDown+0x5c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	20000054 	.word	0x20000054

08001f8c <TetrisLevelSelect_Update>:

Tetris_Modes_StateTriggers TetrisLevelSelect_Update(u32 TimePassed){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	randomSeed += TimePassed;
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <TetrisLevelSelect_Update+0x9c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a22      	ldr	r2, [pc, #136]	; (8002028 <TetrisLevelSelect_Update+0x9c>)
 8001f9e:	6013      	str	r3, [r2, #0]
	i32 analogYChange, analogXChange;
	ANALOG_STICK_DPAD_RESULT res = EmulateDPadReturningXAndYChange(&hadc2,&analogXChange,&analogYChange);
 8001fa0:	f107 0210 	add.w	r2, r7, #16
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4820      	ldr	r0, [pc, #128]	; (800202c <TetrisLevelSelect_Update+0xa0>)
 8001fac:	f7fe fa1e 	bl	80003ec <EmulateDPadReturningXAndYChange>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	75fb      	strb	r3, [r7, #23]
	switch(res){
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d002      	beq.n	8001fc0 <TetrisLevelSelect_Update+0x34>
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d00a      	beq.n	8001fd4 <TetrisLevelSelect_Update+0x48>
 8001fbe:	e014      	b.n	8001fea <TetrisLevelSelect_Update+0x5e>
	case UP:
		ChangeCurrentLevelUpOrDown(1);
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7ff ffb3 	bl	8001f2c <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <TetrisLevelSelect_Update+0x9c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <TetrisLevelSelect_Update+0x9c>)
 8001fd0:	6013      	str	r3, [r2, #0]
		break;
 8001fd2:	e00a      	b.n	8001fea <TetrisLevelSelect_Update+0x5e>
	case DOWN:
		ChangeCurrentLevelUpOrDown(-1);
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f7ff ffa8 	bl	8001f2c <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <TetrisLevelSelect_Update+0x9c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a10      	ldr	r2, [pc, #64]	; (8002028 <TetrisLevelSelect_Update+0x9c>)
 8001fe6:	6013      	str	r3, [r2, #0]
		break;
 8001fe8:	bf00      	nop
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8001fea:	2101      	movs	r1, #1
 8001fec:	4810      	ldr	r0, [pc, #64]	; (8002030 <TetrisLevelSelect_Update+0xa4>)
 8001fee:	f002 fbb5 	bl	800475c <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	75bb      	strb	r3, [r7, #22]
	if(buttonBState == GPIO_PIN_SET){
 8001ff6:	7dbb      	ldrb	r3, [r7, #22]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d104      	bne.n	8002006 <TetrisLevelSelect_Update+0x7a>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 8001ffc:	480d      	ldr	r0, [pc, #52]	; (8002034 <TetrisLevelSelect_Update+0xa8>)
 8001ffe:	f000 f84f 	bl	80020a0 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 8002002:	2301      	movs	r3, #1
 8002004:	e00b      	b.n	800201e <TetrisLevelSelect_Update+0x92>
	}

	WriteStartLevelToFrameBuffer();
 8002006:	f7ff ff71 	bl	8001eec <WriteStartLevelToFrameBuffer>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 800200a:	2354      	movs	r3, #84	; 0x54
 800200c:	2200      	movs	r2, #0
 800200e:	2102      	movs	r1, #2
 8002010:	2002      	movs	r0, #2
 8002012:	f7fe faa3 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 8002016:	4808      	ldr	r0, [pc, #32]	; (8002038 <TetrisLevelSelect_Update+0xac>)
 8002018:	f7fe fbc8 	bl	80007ac <gfxFinishDrawing>



	return NoChange;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000370 	.word	0x20000370
 800202c:	200007f4 	.word	0x200007f4
 8002030:	48000400 	.word	0x48000400
 8002034:	20000054 	.word	0x20000054
 8002038:	200005d8 	.word	0x200005d8

0800203c <TetrisLevelSelect_OnEnter>:

void TetrisLevelSelect_Init(){

}

void TetrisLevelSelect_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
	gfxWriteTextLineToFrameBuffer(0,0,"Select Level");
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <TetrisLevelSelect_OnEnter+0x38>)
 800204a:	2100      	movs	r1, #0
 800204c:	2000      	movs	r0, #0
 800204e:	f7fe fc61 	bl	8000914 <gfxWriteTextLineToFrameBuffer>
	gfxClearFrameBuffer();
 8002052:	f7fe fa3d 	bl	80004d0 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 8002056:	f7fe fd07 	bl	8000a68 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 800205a:	2354      	movs	r3, #84	; 0x54
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2000      	movs	r0, #0
 8002062:	f7fe fa7b 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 8002066:	4804      	ldr	r0, [pc, #16]	; (8002078 <TetrisLevelSelect_OnEnter+0x3c>)
 8002068:	f7fe fba0 	bl	80007ac <gfxFinishDrawing>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	08008460 	.word	0x08008460
 8002078:	200005d8 	.word	0x200005d8

0800207c <TetrisLevelSelect_OnExit>:

void TetrisLevelSelect_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
	srand(randomSeed);
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <TetrisLevelSelect_OnExit+0x20>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f004 ff8d 	bl	8006fac <srand>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000370 	.word	0x20000370

080020a0 <TetrisMain_SetStateMachineDataPointer>:
#define ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS 1


static void* _stateMachineDataPointer = 0;

void TetrisMain_SetStateMachineDataPointer(void* dataPtr){
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	_stateMachineDataPointer = dataPtr;
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <TetrisMain_SetStateMachineDataPointer+0x1c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000374 	.word	0x20000374

080020c0 <TetrisMain_Init>:

static State _states[NumStates];
static Tetris_Modes_States _currentState = LevelSelect;


void TetrisMain_Init(){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
	/* Setup the state machines states */
	TetrisPersistantData_LoadAllPeristantData();
 80020c6:	f000 f8e7 	bl	8002298 <TetrisPersistantData_LoadAllPeristantData>
	//TetrisPersistantData_SaveAllPersistantData();
	TetrisGame_Init();
 80020ca:	f7ff fd45 	bl	8001b58 <TetrisGame_Init>
	u8 startLevel = 5;
 80020ce:	2305      	movs	r3, #5
 80020d0:	71fb      	strb	r3, [r7, #7]
	/* Lead-in to the first state */
	//TetrisGame_OnEnter(&startLevel,NoState);
	TetrisLevelSelect_OnEnter(0,NoState);
 80020d2:	2104      	movs	r1, #4
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff ffb1 	bl	800203c <TetrisLevelSelect_OnEnter>

	_states[Playing].NumTransitions = PLAYING_NUM_TRANSITIONS;
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <TetrisMain_Init+0xa0>)
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 2020 	strb.w	r2, [r3, #32]
	_states[Playing].Transitions = _playingTransitions;
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <TetrisMain_Init+0xa0>)
 80020e4:	4a1f      	ldr	r2, [pc, #124]	; (8002164 <TetrisMain_Init+0xa4>)
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
	_states[Playing].UpdateFunction = &TetrisGame_Update;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <TetrisMain_Init+0xa0>)
 80020ea:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <TetrisMain_Init+0xa8>)
 80020ec:	615a      	str	r2, [r3, #20]
	_states[Playing].OnEnterFunction = &TetrisGame_OnEnter;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <TetrisMain_Init+0xa0>)
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <TetrisMain_Init+0xac>)
 80020f2:	619a      	str	r2, [r3, #24]
	_states[Playing].OnExitFunction = &TetrisGame_OnExit;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <TetrisMain_Init+0xa0>)
 80020f6:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <TetrisMain_Init+0xb0>)
 80020f8:	61da      	str	r2, [r3, #28]

	_states[LevelSelect].NumTransitions = LEVEL_SELECT_NUM_TRANSITIONS;
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <TetrisMain_Init+0xa0>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	731a      	strb	r2, [r3, #12]
	_states[LevelSelect].Transitions = _levelSelectTransitions;
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <TetrisMain_Init+0xa0>)
 8002102:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <TetrisMain_Init+0xb4>)
 8002104:	611a      	str	r2, [r3, #16]
	_states[LevelSelect].UpdateFunction = &TetrisLevelSelect_Update;
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <TetrisMain_Init+0xa0>)
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <TetrisMain_Init+0xb8>)
 800210a:	601a      	str	r2, [r3, #0]
	_states[LevelSelect].OnEnterFunction = &TetrisLevelSelect_OnEnter;
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <TetrisMain_Init+0xa0>)
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <TetrisMain_Init+0xbc>)
 8002110:	605a      	str	r2, [r3, #4]
	_states[LevelSelect].OnExitFunction = &TetrisLevelSelect_OnExit;
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <TetrisMain_Init+0xa0>)
 8002114:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <TetrisMain_Init+0xc0>)
 8002116:	609a      	str	r2, [r3, #8]

	_states[PlayAgainDialogue].NumTransitions = PLAY_AGAIN_SCREEN_NUM_TRANSITIONS;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <TetrisMain_Init+0xa0>)
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	_states[PlayAgainDialogue].Transitions = _playAgainScreenTransitions;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <TetrisMain_Init+0xa0>)
 8002122:	4a18      	ldr	r2, [pc, #96]	; (8002184 <TetrisMain_Init+0xc4>)
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
	_states[PlayAgainDialogue].UpdateFunction = &TetrisPlayAgain_Update;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <TetrisMain_Init+0xa0>)
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <TetrisMain_Init+0xc8>)
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
	_states[PlayAgainDialogue].OnEnterFunction = &TetrisPlayAgain_OnEnter;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <TetrisMain_Init+0xa0>)
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <TetrisMain_Init+0xcc>)
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
	_states[PlayAgainDialogue].OnExitFunction = &TetrisPlayAgain_OnExit;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <TetrisMain_Init+0xa0>)
 8002134:	4a16      	ldr	r2, [pc, #88]	; (8002190 <TetrisMain_Init+0xd0>)
 8002136:	631a      	str	r2, [r3, #48]	; 0x30

	_states[EnterNewHighScoreScreen].NumTransitions = ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS;
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <TetrisMain_Init+0xa0>)
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	_states[EnterNewHighScoreScreen].Transitions = _enterNewHighScoreScreenTransitions;
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <TetrisMain_Init+0xa0>)
 8002142:	4a14      	ldr	r2, [pc, #80]	; (8002194 <TetrisMain_Init+0xd4>)
 8002144:	64da      	str	r2, [r3, #76]	; 0x4c
	_states[EnterNewHighScoreScreen].UpdateFunction = &TetrisEnterHighScore_Update;
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <TetrisMain_Init+0xa0>)
 8002148:	4a13      	ldr	r2, [pc, #76]	; (8002198 <TetrisMain_Init+0xd8>)
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c
	_states[EnterNewHighScoreScreen].OnEnterFunction = &TetrisEnterHighScore_OnEnter;
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <TetrisMain_Init+0xa0>)
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <TetrisMain_Init+0xdc>)
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
	_states[EnterNewHighScoreScreen].OnExitFunction = &TetrisEnterHighScore_OnExit;
 8002152:	4b03      	ldr	r3, [pc, #12]	; (8002160 <TetrisMain_Init+0xa0>)
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <TetrisMain_Init+0xe0>)
 8002156:	645a      	str	r2, [r3, #68]	; 0x44


}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000378 	.word	0x20000378
 8002164:	08008b50 	.word	0x08008b50
 8002168:	08001b29 	.word	0x08001b29
 800216c:	08001b8d 	.word	0x08001b8d
 8002170:	08001bf5 	.word	0x08001bf5
 8002174:	08008b4c 	.word	0x08008b4c
 8002178:	08001f8d 	.word	0x08001f8d
 800217c:	0800203d 	.word	0x0800203d
 8002180:	0800207d 	.word	0x0800207d
 8002184:	08008b54 	.word	0x08008b54
 8002188:	080022f1 	.word	0x080022f1
 800218c:	08002329 	.word	0x08002329
 8002190:	08002375 	.word	0x08002375
 8002194:	08008b58 	.word	0x08008b58
 8002198:	080013fd 	.word	0x080013fd
 800219c:	08001581 	.word	0x08001581
 80021a0:	08001641 	.word	0x08001641

080021a4 <TetrisMain_Update>:

void TetrisMain_Update(u32 timePassed){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	/* Call update on the current state, the return value of update will determine there should be a change to a new state */
	Tetris_Modes_StateTriggers updateResult = _states[_currentState].UpdateFunction(timePassed);
 80021ac:	4b37      	ldr	r3, [pc, #220]	; (800228c <TetrisMain_Update+0xe8>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4a37      	ldr	r2, [pc, #220]	; (8002290 <TetrisMain_Update+0xec>)
 80021b4:	460b      	mov	r3, r1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
 80021c4:	4603      	mov	r3, r0
 80021c6:	76fb      	strb	r3, [r7, #27]
	if(updateResult == NoChange){
 80021c8:	7efb      	ldrb	r3, [r7, #27]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d059      	beq.n	8002282 <TetrisMain_Update+0xde>
		return;
	}
	/* If we're at this point there should be a change in state */
	u32 numTransitions = _states[_currentState].NumTransitions;
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <TetrisMain_Update+0xe8>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	4619      	mov	r1, r3
 80021d4:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <TetrisMain_Update+0xec>)
 80021d6:	460b      	mov	r3, r1
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	330c      	adds	r3, #12
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	617b      	str	r3, [r7, #20]
	Transition* transitions = _states[_currentState].Transitions;
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <TetrisMain_Update+0xe8>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	4a28      	ldr	r2, [pc, #160]	; (8002290 <TetrisMain_Update+0xec>)
 80021ee:	460b      	mov	r3, r1
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3310      	adds	r3, #16
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	613b      	str	r3, [r7, #16]
	/* Find the transition for the state change trigger returned by update */
	for(i32 i=0; i<numTransitions; i++){
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e039      	b.n	8002278 <TetrisMain_Update+0xd4>
		if(transitions[i].trigger == updateResult){
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	7efa      	ldrb	r2, [r7, #27]
 8002210:	429a      	cmp	r2, r3
 8002212:	d12e      	bne.n	8002272 <TetrisMain_Update+0xce>
			/* Change state and call enter and exit functions for the transition */
			Tetris_Modes_States last = _currentState;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <TetrisMain_Update+0xe8>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	73fb      	strb	r3, [r7, #15]
			_states[_currentState].OnExitFunction(_stateMachineDataPointer, transitions[i].destination);
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <TetrisMain_Update+0xe8>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <TetrisMain_Update+0xec>)
 8002222:	460b      	mov	r3, r1
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3308      	adds	r3, #8
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <TetrisMain_Update+0xf0>)
 8002232:	6810      	ldr	r0, [r2, #0]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	0052      	lsls	r2, r2, #1
 8002238:	6939      	ldr	r1, [r7, #16]
 800223a:	440a      	add	r2, r1
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	4611      	mov	r1, r2
 8002240:	4798      	blx	r3
			_currentState = transitions[i].destination;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <TetrisMain_Update+0xe8>)
 800224e:	701a      	strb	r2, [r3, #0]
			_states[_currentState].OnEnterFunction(_stateMachineDataPointer, last);
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <TetrisMain_Update+0xe8>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <TetrisMain_Update+0xec>)
 8002258:	460b      	mov	r3, r1
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3304      	adds	r3, #4
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <TetrisMain_Update+0xf0>)
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	7bf9      	ldrb	r1, [r7, #15]
 800226c:	4610      	mov	r0, r2
 800226e:	4798      	blx	r3
			return;
 8002270:	e008      	b.n	8002284 <TetrisMain_Update+0xe0>
	for(i32 i=0; i<numTransitions; i++){
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8c1      	bhi.n	8002204 <TetrisMain_Update+0x60>
 8002280:	e000      	b.n	8002284 <TetrisMain_Update+0xe0>
		return;
 8002282:	bf00      	nop
		}
	}
}
 8002284:	3720      	adds	r7, #32
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200003dc 	.word	0x200003dc
 8002290:	20000378 	.word	0x20000378
 8002294:	20000374 	.word	0x20000374

08002298 <TetrisPersistantData_LoadAllPeristantData>:
#include "TetrisPersistantData.h"
#include "TetrisHighScores.h"
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

void TetrisPersistantData_LoadAllPeristantData(){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
	u32 nextAddress = TetrisHighScores_Load(FINAL_PAGE_START_ADDRESS);
 800229e:	4804      	ldr	r0, [pc, #16]	; (80022b0 <TetrisPersistantData_LoadAllPeristantData+0x18>)
 80022a0:	f7ff fd60 	bl	8001d64 <TetrisHighScores_Load>
 80022a4:	6078      	str	r0, [r7, #4]

}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	0800f800 	.word	0x0800f800

080022b4 <TetrisPersistantData_SaveAllPersistantData>:
void TetrisPersistantData_SaveAllPersistantData(){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80022ba:	f001 ff75 	bl	80041a8 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	613b      	str	r3, [r7, #16]
	eraseInit.PageAddress = FINAL_PAGE_START_ADDRESS;
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <TetrisPersistantData_SaveAllPersistantData+0x38>)
 80022c4:	60fb      	str	r3, [r7, #12]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
 80022ca:	1d3a      	adds	r2, r7, #4
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 f82c 	bl	8004330 <HAL_FLASHEx_Erase>

	u32 nextAddress = TetrisHighScores_Save(FINAL_PAGE_START_ADDRESS);
 80022d8:	4804      	ldr	r0, [pc, #16]	; (80022ec <TetrisPersistantData_SaveAllPersistantData+0x38>)
 80022da:	f7ff fd8f 	bl	8001dfc <TetrisHighScores_Save>
 80022de:	6178      	str	r0, [r7, #20]

	HAL_FLASH_Lock();
 80022e0:	f001 ff88 	bl	80041f4 <HAL_FLASH_Lock>

}
 80022e4:	bf00      	nop
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	0800f800 	.word	0x0800f800

080022f0 <TetrisPlayAgain_Update>:
extern LCD_PCD8544_screen_t gLcdScreen;

static u8 _startLevel;


Tetris_Modes_StateTriggers TetrisPlayAgain_Update(u32 TimePassed){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

	/* Will have option to go back to main menu.  67 */
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80022f8:	2101      	movs	r1, #1
 80022fa:	4809      	ldr	r0, [pc, #36]	; (8002320 <TetrisPlayAgain_Update+0x30>)
 80022fc:	f002 fa2e 	bl	800475c <HAL_GPIO_ReadPin>
 8002300:	4603      	mov	r3, r0
 8002302:	73fb      	strb	r3, [r7, #15]
	if(buttonBState == GPIO_PIN_SET){
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d104      	bne.n	8002314 <TetrisPlayAgain_Update+0x24>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <TetrisPlayAgain_Update+0x34>)
 800230c:	f7ff fec8 	bl	80020a0 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <TetrisPlayAgain_Update+0x26>
	}

	return NoChange;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	48000400 	.word	0x48000400
 8002324:	200003dd 	.word	0x200003dd

08002328 <TetrisPlayAgain_OnEnter>:

void TetrisPlayAgain_Init(){

}

void TetrisPlayAgain_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	70fb      	strb	r3, [r7, #3]
	_startLevel = *((u8*)stateMachineDataPtr);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <TetrisPlayAgain_OnEnter+0x40>)
 800233a:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 800233c:	f7fe f8c8 	bl	80004d0 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 8002340:	f7fe fb92 	bl	8000a68 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8002344:	2354      	movs	r3, #84	; 0x54
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2000      	movs	r0, #0
 800234c:	f7fe f906 	bl	800055c <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxWriteTextLineToFrameBuffer(0,0,"Play Again?");
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <TetrisPlayAgain_OnEnter+0x44>)
 8002352:	2100      	movs	r1, #0
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe fadd 	bl	8000914 <gfxWriteTextLineToFrameBuffer>

	gfxFinishDrawing(&gLcdScreen);
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <TetrisPlayAgain_OnEnter+0x48>)
 800235c:	f7fe fa26 	bl	80007ac <gfxFinishDrawing>

}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	200003dd 	.word	0x200003dd
 800236c:	08008470 	.word	0x08008470
 8002370:	200005d8 	.word	0x200005d8

08002374 <TetrisPlayAgain_OnExit>:

void TetrisPlayAgain_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <TetrisPlayAgain_OnExit+0x1c>)
 8002382:	f7fe fba1 	bl	8000ac8 <ClearScreen>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200005d8 	.word	0x200005d8

08002394 <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 800239c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80023a0:	2100      	movs	r1, #0
 80023a2:	481e      	ldr	r0, [pc, #120]	; (800241c <LCD_PCD8544_init+0x88>)
 80023a4:	f004 fdfa 	bl	8006f9c <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f976 	bl	80026a2 <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f98e 	bl	80026d8 <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f9ab 	bl	8002718 <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	7bb9      	ldrb	r1, [r7, #14]
 80023c6:	2301      	movs	r3, #1
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f8ae 	bl	800252a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 80023ce:	2103      	movs	r1, #3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f939 	bl	8002648 <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 80023d6:	2140      	movs	r1, #64	; 0x40
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f94e 	bl	800267a <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 80023de:	2102      	movs	r1, #2
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f918 	bl	8002616 <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	7bb9      	ldrb	r1, [r7, #14]
 80023ea:	2300      	movs	r3, #0
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f89c 	bl	800252a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2101      	movs	r1, #1
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8c7 	bl	800258a <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f8e5 	bl	80025d0 <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f996 	bl	8002738 <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f845 	bl	800249c <LCD_PCD8544_clear_ram>
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200003e0 	.word	0x200003e0

08002420 <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	72fb      	strb	r3, [r7, #11]
 800242e:	4613      	mov	r3, r2
 8002430:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f94c 	bl	80026d8 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f969 	bl	8002718 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002446:	7dfa      	ldrb	r2, [r7, #23]
 8002448:	7db9      	ldrb	r1, [r7, #22]
 800244a:	2300      	movs	r3, #0
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f86c 	bl	800252a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 8002452:	7abb      	ldrb	r3, [r7, #10]
 8002454:	461a      	mov	r2, r3
 8002456:	0052      	lsls	r2, r2, #1
 8002458:	4413      	add	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	7afb      	ldrb	r3, [r7, #11]
 8002460:	4619      	mov	r1, r3
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f8b4 	bl	80025d0 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f965 	bl	8002738 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f942 	bl	80026f8 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f94f 	bl	8002718 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 800247a:	8c3b      	ldrh	r3, [r7, #32]
 800247c:	461a      	mov	r2, r3
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f81f 	bl	80024c4 <LCD_PCD8544_LL_send_data>
 8002486:	4603      	mov	r3, r0
 8002488:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f954 	bl	8002738 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8002490:	7d7b      	ldrb	r3, [r7, #21]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 80024a4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <LCD_PCD8544_clear_ram+0x24>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ffb5 	bl	8002420 <LCD_PCD8544_write_bytes>
 80024b6:	4603      	mov	r3, r0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200003e0 	.word	0x200003e0

080024c4 <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	2302      	movs	r3, #2
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	f003 fd5b 	bl	8005f96 <HAL_SPI_Transmit>
 80024e0:	4603      	mov	r3, r0
 80024e2:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d007      	beq.n	80024fa <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	69d8      	ldr	r0, [r3, #28]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8c1b      	ldrh	r3, [r3, #32]
 80024f2:	2200      	movs	r2, #0
 80024f4:	4619      	mov	r1, r3
 80024f6:	f002 f949 	bl	800478c <HAL_GPIO_WritePin>
	}
	return stat;
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 8002510:	2301      	movs	r3, #1
 8002512:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8002514:	89fa      	ldrh	r2, [r7, #14]
 8002516:	1cfb      	adds	r3, r7, #3
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffd2 	bl	80024c4 <LCD_PCD8544_LL_send_data>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	4608      	mov	r0, r1
 8002534:	4611      	mov	r1, r2
 8002536:	461a      	mov	r2, r3
 8002538:	4603      	mov	r3, r0
 800253a:	70fb      	strb	r3, [r7, #3]
 800253c:	460b      	mov	r3, r1
 800253e:	70bb      	strb	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	b25b      	sxtb	r3, r3
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	b25b      	sxtb	r3, r3
 8002550:	f043 0320 	orr.w	r3, r3, #32
 8002554:	b25a      	sxtb	r2, r3
 8002556:	78bb      	ldrb	r3, [r7, #2]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	b25b      	sxtb	r3, r3
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	b25b      	sxtb	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b25a      	sxtb	r2, r3
 8002566:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	b25b      	sxtb	r3, r3
 8002570:	4313      	orrs	r3, r2
 8002572:	b25b      	sxtb	r3, r3
 8002574:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffc2 	bl	8002504 <LCD_PCD8544_LL_send_byte>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	70fb      	strb	r3, [r7, #3]
 8002596:	4613      	mov	r3, r2
 8002598:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	f043 0308 	orr.w	r3, r3, #8
 80025aa:	b25a      	sxtb	r2, r3
 80025ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	b25b      	sxtb	r3, r3
 80025ba:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff9f 	bl	8002504 <LCD_PCD8544_LL_send_byte>
 80025c6:	4603      	mov	r3, r0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
 80025dc:	4613      	mov	r3, r2
 80025de:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 80025e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 80025f4:	78bb      	ldrb	r3, [r7, #2]
 80025f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	2202      	movs	r2, #2
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff5c 	bl	80024c4 <LCD_PCD8544_LL_send_data>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 8002622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	b25b      	sxtb	r3, r3
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	b25b      	sxtb	r3, r3
 8002632:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	4619      	mov	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff63 	bl	8002504 <LCD_PCD8544_LL_send_byte>
 800263e:	4603      	mov	r3, r0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 8002654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	b25b      	sxtb	r3, r3
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	b25b      	sxtb	r3, r3
 8002664:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	4619      	mov	r1, r3
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ff4a 	bl	8002504 <LCD_PCD8544_LL_send_byte>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800268c:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ff36 	bl	8002504 <LCD_PCD8544_LL_send_byte>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6858      	ldr	r0, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	891b      	ldrh	r3, [r3, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	4619      	mov	r1, r3
 80026b6:	f002 f869 	bl	800478c <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 80026ba:	2001      	movs	r0, #1
 80026bc:	f000 fcda 	bl	8003074 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6858      	ldr	r0, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	891b      	ldrh	r3, [r3, #8]
 80026c8:	2201      	movs	r2, #1
 80026ca:	4619      	mov	r1, r3
 80026cc:	f002 f85e 	bl	800478c <HAL_GPIO_WritePin>
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6958      	ldr	r0, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8b1b      	ldrh	r3, [r3, #24]
 80026e8:	2200      	movs	r2, #0
 80026ea:	4619      	mov	r1, r3
 80026ec:	f002 f84e 	bl	800478c <HAL_GPIO_WritePin>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6958      	ldr	r0, [r3, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8b1b      	ldrh	r3, [r3, #24]
 8002708:	2201      	movs	r2, #1
 800270a:	4619      	mov	r1, r3
 800270c:	f002 f83e 	bl	800478c <HAL_GPIO_WritePin>
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68d8      	ldr	r0, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8a1b      	ldrh	r3, [r3, #16]
 8002728:	2200      	movs	r2, #0
 800272a:	4619      	mov	r1, r3
 800272c:	f002 f82e 	bl	800478c <HAL_GPIO_WritePin>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68d8      	ldr	r0, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8a1b      	ldrh	r3, [r3, #16]
 8002748:	2201      	movs	r2, #1
 800274a:	4619      	mov	r1, r3
 800274c:	f002 f81e 	bl	800478c <HAL_GPIO_WritePin>
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800275c:	f000 fc24 	bl	8002fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002760:	f000 f836 	bl	80027d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002764:	f000 f98e 	bl	8002a84 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002768:	f000 f8f8 	bl	800295c <MX_SPI1_Init>
  MX_ADC2_Init();
 800276c:	f000 f888 	bl	8002880 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002770:	f000 f932 	bl	80029d8 <MX_TIM2_Init>
  //HAL_ADCEx_Calibration_Start(&hadc2);



  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <main+0x6c>)
 8002776:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <main+0x70>)
 8002778:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <main+0x6c>)
 800277c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002780:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <main+0x6c>)
 8002784:	2208      	movs	r2, #8
 8002786:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <main+0x6c>)
 800278a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800278e:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <main+0x6c>)
 8002792:	2202      	movs	r2, #2
 8002794:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <main+0x6c>)
 8002798:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800279c:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <main+0x6c>)
 80027a0:	2210      	movs	r2, #16
 80027a2:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 80027a4:	4807      	ldr	r0, [pc, #28]	; (80027c4 <main+0x6c>)
 80027a6:	f7ff fdf5 	bl	8002394 <LCD_PCD8544_init>

    // LCD - welcome screen
  //static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80027aa:	2100      	movs	r1, #0
 80027ac:	4807      	ldr	r0, [pc, #28]	; (80027cc <main+0x74>)
 80027ae:	f000 ffa8 	bl	8003702 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   TetrisMain_Init();
 80027b2:	f7ff fc85 	bl	80020c0 <TetrisMain_Init>



  while (1)
  {
	  TetrisMain_Update(50);
 80027b6:	2032      	movs	r0, #50	; 0x32
 80027b8:	f7ff fcf4 	bl	80021a4 <TetrisMain_Update>
	  HAL_Delay(50);
 80027bc:	2032      	movs	r0, #50	; 0x32
 80027be:	f000 fc59 	bl	8003074 <HAL_Delay>
	  TetrisMain_Update(50);
 80027c2:	e7f8      	b.n	80027b6 <main+0x5e>
 80027c4:	200005d8 	.word	0x200005d8
 80027c8:	20000844 	.word	0x20000844
 80027cc:	200007f4 	.word	0x200007f4

080027d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b096      	sub	sp, #88	; 0x58
 80027d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027da:	2228      	movs	r2, #40	; 0x28
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 fbdc 	bl	8006f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e4:	f107 031c 	add.w	r3, r7, #28
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002804:	2302      	movs	r3, #2
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002808:	2301      	movs	r3, #1
 800280a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800280c:	2310      	movs	r3, #16
 800280e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002810:	2302      	movs	r3, #2
 8002812:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002814:	2300      	movs	r3, #0
 8002816:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002818:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800281c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800281e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002822:	4618      	mov	r0, r3
 8002824:	f001 ffca 	bl	80047bc <HAL_RCC_OscConfig>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800282e:	f000 f9a5 	bl	8002b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002832:	230f      	movs	r3, #15
 8002834:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800283e:	2300      	movs	r3, #0
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002842:	2300      	movs	r3, #0
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f002 fff3 	bl	8005838 <HAL_RCC_ClockConfig>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002858:	f000 f990 	bl	8002b7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002864:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4618      	mov	r0, r3
 800286a:	f003 f9cb 	bl	8005c04 <HAL_RCCEx_PeriphCLKConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002874:	f000 f982 	bl	8002b7c <Error_Handler>
  }
}
 8002878:	bf00      	nop
 800287a:	3758      	adds	r7, #88	; 0x58
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002886:	463b      	mov	r3, r7
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
 8002894:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <MX_ADC2_Init+0xd4>)
 8002898:	4a2f      	ldr	r2, [pc, #188]	; (8002958 <MX_ADC2_Init+0xd8>)
 800289a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800289c:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <MX_ADC2_Init+0xd4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80028ae:	4b29      	ldr	r3, [pc, #164]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028be:	2201      	movs	r2, #1
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028ce:	4b21      	ldr	r3, [pc, #132]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028d6:	2202      	movs	r2, #2
 80028d8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028e4:	2204      	movs	r2, #4
 80028e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80028f4:	4817      	ldr	r0, [pc, #92]	; (8002954 <MX_ADC2_Init+0xd4>)
 80028f6:	f000 fbe1 	bl	80030bc <HAL_ADC_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8002900:	f000 f93c 	bl	8002b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002904:	2302      	movs	r3, #2
 8002906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002908:	2301      	movs	r3, #1
 800290a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800291c:	463b      	mov	r3, r7
 800291e:	4619      	mov	r1, r3
 8002920:	480c      	ldr	r0, [pc, #48]	; (8002954 <MX_ADC2_Init+0xd4>)
 8002922:	f000 ff61 	bl	80037e8 <HAL_ADC_ConfigChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 800292c:	f000 f926 	bl	8002b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002930:	2303      	movs	r3, #3
 8002932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002934:	2302      	movs	r3, #2
 8002936:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002938:	463b      	mov	r3, r7
 800293a:	4619      	mov	r1, r3
 800293c:	4805      	ldr	r0, [pc, #20]	; (8002954 <MX_ADC2_Init+0xd4>)
 800293e:	f000 ff53 	bl	80037e8 <HAL_ADC_ConfigChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8002948:	f000 f918 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800294c:	bf00      	nop
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	200007f4 	.word	0x200007f4
 8002958:	50000100 	.word	0x50000100

0800295c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <MX_SPI1_Init+0x78>)
 8002964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800296c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002976:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800297a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <MX_SPI1_Init+0x74>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <MX_SPI1_Init+0x74>)
 800298a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_SPI1_Init+0x74>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029aa:	2207      	movs	r2, #7
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029b6:	2208      	movs	r2, #8
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029ba:	4805      	ldr	r0, [pc, #20]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029bc:	f003 fa48 	bl	8005e50 <HAL_SPI_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029c6:	f000 f8d9 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000844 	.word	0x20000844
 80029d4:	40013000 	.word	0x40013000

080029d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ea:	463b      	mov	r3, r7
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
 80029f8:	615a      	str	r2, [r3, #20]
 80029fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029fc:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <MX_TIM2_Init+0xa8>)
 80029fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a04:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <MX_TIM2_Init+0xa8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <MX_TIM2_Init+0xa8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <MX_TIM2_Init+0xa8>)
 8002a12:	f04f 32ff 	mov.w	r2, #4294967295
 8002a16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <MX_TIM2_Init+0xa8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <MX_TIM2_Init+0xa8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a24:	4816      	ldr	r0, [pc, #88]	; (8002a80 <MX_TIM2_Init+0xa8>)
 8002a26:	f003 fd89 	bl	800653c <HAL_TIM_PWM_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002a30:	f000 f8a4 	bl	8002b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	4619      	mov	r1, r3
 8002a42:	480f      	ldr	r0, [pc, #60]	; (8002a80 <MX_TIM2_Init+0xa8>)
 8002a44:	f004 fa04 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002a4e:	f000 f895 	bl	8002b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a52:	2360      	movs	r3, #96	; 0x60
 8002a54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a62:	463b      	mov	r3, r7
 8002a64:	2204      	movs	r2, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <MX_TIM2_Init+0xa8>)
 8002a6a:	f003 fdbf 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002a74:	f000 f882 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a78:	bf00      	nop
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200008a8 	.word	0x200008a8

08002a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <MX_GPIO_Init+0xf0>)
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	4a35      	ldr	r2, [pc, #212]	; (8002b74 <MX_GPIO_Init+0xf0>)
 8002aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa4:	6153      	str	r3, [r2, #20]
 8002aa6:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <MX_GPIO_Init+0xf0>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <MX_GPIO_Init+0xf0>)
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	4a2f      	ldr	r2, [pc, #188]	; (8002b74 <MX_GPIO_Init+0xf0>)
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	6153      	str	r3, [r2, #20]
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <MX_GPIO_Init+0xf0>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <MX_GPIO_Init+0xf0>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4a29      	ldr	r2, [pc, #164]	; (8002b74 <MX_GPIO_Init+0xf0>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad4:	6153      	str	r3, [r2, #20]
 8002ad6:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <MX_GPIO_Init+0xf0>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	210a      	movs	r1, #10
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aea:	f001 fe4f 	bl	800478c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2110      	movs	r1, #16
 8002af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af6:	f001 fe49 	bl	800478c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8002afa:	231a      	movs	r3, #26
 8002afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b14:	f001 fcb0 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b18:	f248 0304 	movw	r3, #32772	; 0x8004
 8002b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b2a:	2307      	movs	r3, #7
 8002b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	4619      	mov	r1, r3
 8002b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b38:	f001 fc9e 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b44:	2302      	movs	r3, #2
 8002b46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 8002b48:	f107 030c 	add.w	r3, r7, #12
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480a      	ldr	r0, [pc, #40]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002b50:	f001 fc92 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = ANALOGUE_STICK_BUTTON_Pin;
 8002b54:	2302      	movs	r3, #2
 8002b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANALOGUE_STICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	4619      	mov	r1, r3
 8002b66:	4804      	ldr	r0, [pc, #16]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002b68:	f001 fc86 	bl	8004478 <HAL_GPIO_Init>

}
 8002b6c:	bf00      	nop
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	48000400 	.word	0x48000400

08002b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b80:	b672      	cpsid	i
}
 8002b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <Error_Handler+0x8>
	...

08002b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6193      	str	r3, [r2, #24]
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	61d3      	str	r3, [r2, #28]
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	f06f 0001 	mvn.w	r0, #1
 8002bc6:	f001 fa56 	bl	8004076 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a15      	ldr	r2, [pc, #84]	; (8002c4c <HAL_ADC_MspInit+0x74>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d124      	bne.n	8002c44 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_ADC_MspInit+0x78>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_ADC_MspInit+0x78>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6153      	str	r3, [r2, #20]
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_ADC_MspInit+0x78>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_ADC_MspInit+0x78>)
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_ADC_MspInit+0x78>)
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1c:	6153      	str	r3, [r2, #20]
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_ADC_MspInit+0x78>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 8002c2a:	2360      	movs	r3, #96	; 0x60
 8002c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c40:	f001 fc1a 	bl	8004478 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002c44:	bf00      	nop
 8002c46:	3728      	adds	r7, #40	; 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	40021000 	.word	0x40021000

08002c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <HAL_SPI_MspInit+0xb4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d144      	bne.n	8002d00 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <HAL_SPI_MspInit+0xb8>)
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <HAL_SPI_MspInit+0xb8>)
 8002c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c80:	6193      	str	r3, [r2, #24]
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_SPI_MspInit+0xb8>)
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <HAL_SPI_MspInit+0xb8>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_SPI_MspInit+0xb8>)
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c98:	6153      	str	r3, [r2, #20]
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <HAL_SPI_MspInit+0xb8>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_SPI_MspInit+0xb8>)
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <HAL_SPI_MspInit+0xb8>)
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb0:	6153      	str	r3, [r2, #20]
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_SPI_MspInit+0xb8>)
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cce:	2305      	movs	r3, #5
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cdc:	f001 fbcc 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf0:	2305      	movs	r3, #5
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4805      	ldr	r0, [pc, #20]	; (8002d10 <HAL_SPI_MspInit+0xbc>)
 8002cfc:	f001 fbbc 	bl	8004478 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d00:	bf00      	nop
 8002d02:	3728      	adds	r7, #40	; 0x28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40013000 	.word	0x40013000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	48000400 	.word	0x48000400

08002d14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d10b      	bne.n	8002d3e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_TIM_PWM_MspInit+0x38>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <HAL_TIM_PWM_MspInit+0x38>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	61d3      	str	r3, [r2, #28]
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_TIM_PWM_MspInit+0x38>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000

08002d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <NMI_Handler+0x4>

08002d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <HardFault_Handler+0x4>

08002d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <MemManage_Handler+0x4>

08002d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <BusFault_Handler+0x4>

08002d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <UsageFault_Handler+0x4>

08002d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d9c:	f000 f94a 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
	return 1;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_kill>:

int _kill(int pid, int sig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dbe:	f004 f8b5 	bl	8006f2c <__errno>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2216      	movs	r2, #22
 8002dc6:	601a      	str	r2, [r3, #0]
	return -1;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_exit>:

void _exit (int status)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ffe7 	bl	8002db4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002de6:	e7fe      	b.n	8002de6 <_exit+0x12>

08002de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e00a      	b.n	8002e10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dfa:	f3af 8000 	nop.w
 8002dfe:	4601      	mov	r1, r0
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	60ba      	str	r2, [r7, #8]
 8002e06:	b2ca      	uxtb	r2, r1
 8002e08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	dbf0      	blt.n	8002dfa <_read+0x12>
	}

return len;
 8002e18:	687b      	ldr	r3, [r7, #4]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e009      	b.n	8002e48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60ba      	str	r2, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3301      	adds	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dbf1      	blt.n	8002e34 <_write+0x12>
	}
	return len;
 8002e50:	687b      	ldr	r3, [r7, #4]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_close>:

int _close(int file)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
	return -1;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e82:	605a      	str	r2, [r3, #4]
	return 0;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_isatty>:

int _isatty(int file)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
	return 1;
 8002e9a:	2301      	movs	r3, #1
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
	return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <_sbrk+0x5c>)
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <_sbrk+0x60>)
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <_sbrk+0x64>)
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <_sbrk+0x68>)
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <_sbrk+0x64>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d207      	bcs.n	8002f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef4:	f004 f81a 	bl	8006f2c <__errno>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	220c      	movs	r2, #12
 8002efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	e009      	b.n	8002f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <_sbrk+0x64>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <_sbrk+0x64>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <_sbrk+0x64>)
 8002f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20003000 	.word	0x20003000
 8002f24:	00000400 	.word	0x00000400
 8002f28:	200008f4 	.word	0x200008f4
 8002f2c:	20000930 	.word	0x20000930

08002f30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <SystemInit+0x20>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <SystemInit+0x20>)
 8002f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f5a:	490e      	ldr	r1, [pc, #56]	; (8002f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f5c:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <LoopForever+0xe>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f70:	4c0b      	ldr	r4, [pc, #44]	; (8002fa0 <LoopForever+0x16>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f7e:	f7ff ffd7 	bl	8002f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f82:	f003 ffd9 	bl	8006f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f86:	f7ff fbe7 	bl	8002758 <main>

08002f8a <LoopForever>:

LoopForever:
    b LoopForever
 8002f8a:	e7fe      	b.n	8002f8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f8c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f94:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002f98:	08008cdc 	.word	0x08008cdc
  ldr r2, =_sbss
 8002f9c:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002fa0:	20000930 	.word	0x20000930

08002fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fa4:	e7fe      	b.n	8002fa4 <ADC1_2_IRQHandler>
	...

08002fa8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_Init+0x28>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_Init+0x28>)
 8002fb2:	f043 0310 	orr.w	r3, r3, #16
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f001 f851 	bl	8004060 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fde0 	bl	8002b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40022000 	.word	0x40022000

08002fd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 f85b 	bl	80040ae <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f001 f831 	bl	8004076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000058 	.word	0x20000058
 800302c:	20000060 	.word	0x20000060
 8003030:	2000005c 	.word	0x2000005c

08003034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000060 	.word	0x20000060
 8003058:	200008f8 	.word	0x200008f8

0800305c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	200008f8 	.word	0x200008f8

08003074 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000060 	.word	0x20000060

080030bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b09a      	sub	sp, #104	; 0x68
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e172      	b.n	80033c2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d176      	bne.n	80031dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d152      	bne.n	800319c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff fd61 	bl	8002bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d13b      	bne.n	800319c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fe83 	bl	8003e30 <ADC_Disable>
 800312a:	4603      	mov	r3, r0
 800312c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d12f      	bne.n	800319c <HAL_ADC_Init+0xe0>
 800313c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003140:	2b00      	cmp	r3, #0
 8003142:	d12b      	bne.n	800319c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800314c:	f023 0302 	bic.w	r3, r3, #2
 8003150:	f043 0202 	orr.w	r2, r3, #2
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003166:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003176:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003178:	4b94      	ldr	r3, [pc, #592]	; (80033cc <HAL_ADC_Init+0x310>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a94      	ldr	r2, [pc, #592]	; (80033d0 <HAL_ADC_Init+0x314>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0c9a      	lsrs	r2, r3, #18
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800318e:	e002      	b.n	8003196 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	3b01      	subs	r3, #1
 8003194:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f9      	bne.n	8003190 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80031b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b8:	d110      	bne.n	80031dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f023 0312 	bic.w	r3, r3, #18
 80031c2:	f043 0210 	orr.w	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 80df 	bne.w	80033a8 <HAL_ADC_Init+0x2ec>
 80031ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 80da 	bne.w	80033a8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 80d2 	bne.w	80033a8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800320c:	f043 0202 	orr.w	r2, r3, #2
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003214:	4b6f      	ldr	r3, [pc, #444]	; (80033d4 <HAL_ADC_Init+0x318>)
 8003216:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003220:	d102      	bne.n	8003228 <HAL_ADC_Init+0x16c>
 8003222:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <HAL_ADC_Init+0x31c>)
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e002      	b.n	800322e <HAL_ADC_Init+0x172>
 8003228:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800322c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d108      	bne.n	800324e <HAL_ADC_Init+0x192>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_ADC_Init+0x192>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_ADC_Init+0x194>
 800324e:	2300      	movs	r3, #0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11c      	bne.n	800328e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003254:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d010      	beq.n	800327c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d107      	bne.n	8003276 <HAL_ADC_Init+0x1ba>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_ADC_Init+0x1ba>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_ADC_Init+0x1bc>
 8003276:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003278:	2b00      	cmp	r3, #0
 800327a:	d108      	bne.n	800328e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800327c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	431a      	orrs	r2, r3
 800328a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7e5b      	ldrb	r3, [r3, #25]
 8003292:	035b      	lsls	r3, r3, #13
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003298:	2a01      	cmp	r2, #1
 800329a:	d002      	beq.n	80032a2 <HAL_ADC_Init+0x1e6>
 800329c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032a0:	e000      	b.n	80032a4 <HAL_ADC_Init+0x1e8>
 80032a2:	2200      	movs	r2, #0
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032b4:	4313      	orrs	r3, r2
 80032b6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d11b      	bne.n	80032fa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7e5b      	ldrb	r3, [r3, #25]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	3b01      	subs	r3, #1
 80032d0:	045a      	lsls	r2, r3, #17
 80032d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	663b      	str	r3, [r7, #96]	; 0x60
 80032dc:	e00d      	b.n	80032fa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d007      	beq.n	8003312 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	4313      	orrs	r3, r2
 800330c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800330e:	4313      	orrs	r3, r2
 8003310:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b00      	cmp	r3, #0
 800331e:	d114      	bne.n	800334a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332e:	f023 0302 	bic.w	r3, r3, #2
 8003332:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7e1b      	ldrb	r3, [r3, #24]
 8003338:	039a      	lsls	r2, r3, #14
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4313      	orrs	r3, r2
 8003344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003346:	4313      	orrs	r3, r2
 8003348:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_ADC_Init+0x320>)
 8003352:	4013      	ands	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800335a:	430b      	orrs	r3, r1
 800335c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d10c      	bne.n	8003380 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	f023 010f 	bic.w	r1, r3, #15
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	1e5a      	subs	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
 800337e:	e007      	b.n	8003390 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 020f 	bic.w	r2, r2, #15
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
 80033a6:	e00a      	b.n	80033be <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f023 0312 	bic.w	r3, r3, #18
 80033b0:	f043 0210 	orr.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80033be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3768      	adds	r7, #104	; 0x68
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000058 	.word	0x20000058
 80033d0:	431bde83 	.word	0x431bde83
 80033d4:	50000300 	.word	0x50000300
 80033d8:	50000100 	.word	0x50000100
 80033dc:	fff0c007 	.word	0xfff0c007

080033e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 809c 	bne.w	8003534 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_ADC_Start+0x2a>
 8003406:	2302      	movs	r3, #2
 8003408:	e097      	b.n	800353a <HAL_ADC_Start+0x15a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fca8 	bl	8003d68 <ADC_Enable>
 8003418:	4603      	mov	r3, r0
 800341a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 8083 	bne.w	800352a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003438:	4b42      	ldr	r3, [pc, #264]	; (8003544 <HAL_ADC_Start+0x164>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_ADC_Start+0x6e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344c:	d115      	bne.n	800347a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d027      	beq.n	80034b8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003470:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003478:	e01e      	b.n	80034b8 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800348e:	d004      	beq.n	800349a <HAL_ADC_Start+0xba>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2c      	ldr	r2, [pc, #176]	; (8003548 <HAL_ADC_Start+0x168>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10e      	bne.n	80034b8 <HAL_ADC_Start+0xd8>
 800349a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c4:	d106      	bne.n	80034d4 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f023 0206 	bic.w	r2, r3, #6
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
 80034d2:	e002      	b.n	80034da <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	221c      	movs	r2, #28
 80034e8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_ADC_Start+0x164>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_ADC_Start+0x138>
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_ADC_Start+0x164>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d00a      	beq.n	8003518 <HAL_ADC_Start+0x138>
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_ADC_Start+0x164>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	2b09      	cmp	r3, #9
 800350c:	d004      	beq.n	8003518 <HAL_ADC_Start+0x138>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003516:	d10f      	bne.n	8003538 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0204 	orr.w	r2, r2, #4
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e006      	b.n	8003538 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003532:	e001      	b.n	8003538 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003534:	2302      	movs	r3, #2
 8003536:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	50000300 	.word	0x50000300
 8003548:	50000100 	.word	0x50000100

0800354c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b08      	cmp	r3, #8
 8003560:	d102      	bne.n	8003568 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003562:	2308      	movs	r3, #8
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e02e      	b.n	80035c6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003568:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <HAL_ADC_PollForConversion+0x198>)
 800356a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2b00      	cmp	r3, #0
 8003576:	d112      	bne.n	800359e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d11d      	bne.n	80035c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e09d      	b.n	80036da <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e08b      	b.n	80036da <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80035c2:	230c      	movs	r3, #12
 80035c4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_ADC_PollForConversion+0x198>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_ADC_PollForConversion+0x90>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035da:	d104      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	e003      	b.n	80035ee <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80035e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80035ee:	f7ff fd35 	bl	800305c <HAL_GetTick>
 80035f2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80035f4:	e021      	b.n	800363a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d01d      	beq.n	800363a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_ADC_PollForConversion+0xc8>
 8003604:	f7ff fd2a 	bl	800305c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d212      	bcs.n	800363a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f043 0204 	orr.w	r2, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e04f      	b.n	80036da <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0d6      	beq.n	80035f6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800365e:	2b00      	cmp	r3, #0
 8003660:	d131      	bne.n	80036c6 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003668:	2b00      	cmp	r3, #0
 800366a:	d12c      	bne.n	80036c6 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b08      	cmp	r3, #8
 8003678:	d125      	bne.n	80036c6 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d112      	bne.n	80036ae <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d112      	bne.n	80036c6 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
 80036ac:	e00b      	b.n	80036c6 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f043 0220 	orr.w	r2, r3, #32
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d103      	bne.n	80036d8 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	50000300 	.word	0x50000300

080036e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_ADCEx_Calibration_Start+0x1c>
 800371a:	2302      	movs	r3, #2
 800371c:	e05f      	b.n	80037de <HAL_ADCEx_Calibration_Start+0xdc>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fb82 	bl	8003e30 <ADC_Disable>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d14e      	bne.n	80037d4 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800374a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003760:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003770:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003772:	f7ff fc73 	bl	800305c <HAL_GetTick>
 8003776:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003778:	e01c      	b.n	80037b4 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800377a:	f7ff fc6f 	bl	800305c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b0a      	cmp	r3, #10
 8003786:	d915      	bls.n	80037b4 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003796:	d10d      	bne.n	80037b4 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f023 0312 	bic.w	r3, r3, #18
 80037a0:	f043 0210 	orr.w	r2, r3, #16
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e014      	b.n	80037de <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c2:	d0da      	beq.n	800377a <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f023 0303 	bic.w	r3, r3, #3
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b09b      	sub	sp, #108	; 0x6c
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x22>
 8003806:	2302      	movs	r3, #2
 8003808:	e2a4      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x56c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	f040 8288 	bne.w	8003d32 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b04      	cmp	r3, #4
 8003828:	d81c      	bhi.n	8003864 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	461a      	mov	r2, r3
 800383e:	231f      	movs	r3, #31
 8003840:	4093      	lsls	r3, r2
 8003842:	43db      	mvns	r3, r3
 8003844:	4019      	ands	r1, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa00 f203 	lsl.w	r2, r0, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
 8003862:	e063      	b.n	800392c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b09      	cmp	r3, #9
 800386a:	d81e      	bhi.n	80038aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	3b1e      	subs	r3, #30
 8003880:	221f      	movs	r2, #31
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	4019      	ands	r1, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4413      	add	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	3b1e      	subs	r3, #30
 800389c:	fa00 f203 	lsl.w	r2, r0, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34
 80038a8:	e040      	b.n	800392c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b0e      	cmp	r3, #14
 80038b0:	d81e      	bhi.n	80038f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	3b3c      	subs	r3, #60	; 0x3c
 80038c6:	221f      	movs	r2, #31
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	4019      	ands	r1, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	3b3c      	subs	r3, #60	; 0x3c
 80038e2:	fa00 f203 	lsl.w	r2, r0, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
 80038ee:	e01d      	b.n	800392c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	3b5a      	subs	r3, #90	; 0x5a
 8003904:	221f      	movs	r2, #31
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	4019      	ands	r1, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	3b5a      	subs	r3, #90	; 0x5a
 8003920:	fa00 f203 	lsl.w	r2, r0, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 80e5 	bne.w	8003b06 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b09      	cmp	r3, #9
 8003942:	d91c      	bls.n	800397e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	3b1e      	subs	r3, #30
 8003956:	2207      	movs	r2, #7
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	4019      	ands	r1, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	6898      	ldr	r0, [r3, #8]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4413      	add	r3, r2
 800396e:	3b1e      	subs	r3, #30
 8003970:	fa00 f203 	lsl.w	r2, r0, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	619a      	str	r2, [r3, #24]
 800397c:	e019      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6959      	ldr	r1, [r3, #20]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	2207      	movs	r2, #7
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	4019      	ands	r1, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6898      	ldr	r0, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	fa00 f203 	lsl.w	r2, r0, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	08db      	lsrs	r3, r3, #3
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d84f      	bhi.n	8003a74 <HAL_ADC_ConfigChannel+0x28c>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_ADC_ConfigChannel+0x1f4>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	080039ed 	.word	0x080039ed
 80039e0:	08003a0f 	.word	0x08003a0f
 80039e4:	08003a31 	.word	0x08003a31
 80039e8:	08003a53 	.word	0x08003a53
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039f2:	4b94      	ldr	r3, [pc, #592]	; (8003c44 <HAL_ADC_ConfigChannel+0x45c>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	0691      	lsls	r1, r2, #26
 80039fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039fe:	430a      	orrs	r2, r1
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a0c:	e07e      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a14:	4b8b      	ldr	r3, [pc, #556]	; (8003c44 <HAL_ADC_ConfigChannel+0x45c>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	0691      	lsls	r1, r2, #26
 8003a1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a20:	430a      	orrs	r2, r1
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a2c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a2e:	e06d      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a36:	4b83      	ldr	r3, [pc, #524]	; (8003c44 <HAL_ADC_ConfigChannel+0x45c>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	0691      	lsls	r1, r2, #26
 8003a40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a42:	430a      	orrs	r2, r1
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a4e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a50:	e05c      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a58:	4b7a      	ldr	r3, [pc, #488]	; (8003c44 <HAL_ADC_ConfigChannel+0x45c>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	0691      	lsls	r1, r2, #26
 8003a62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a64:	430a      	orrs	r2, r1
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a70:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a72:	e04b      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	069b      	lsls	r3, r3, #26
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d107      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a96:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	069b      	lsls	r3, r3, #26
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d107      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aba:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	069b      	lsls	r3, r3, #26
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d107      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ade:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	069b      	lsls	r3, r3, #26
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d10a      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b02:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003b04:	e001      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x324>
      break;
 8003b0a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d108      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x344>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x344>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x346>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 810a 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d00f      	beq.n	8003b5c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	400a      	ands	r2, r1
 8003b56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003b5a:	e049      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b09      	cmp	r3, #9
 8003b7c:	d91c      	bls.n	8003bb8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6999      	ldr	r1, [r3, #24]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3b1b      	subs	r3, #27
 8003b90:	2207      	movs	r2, #7
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	4019      	ands	r1, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6898      	ldr	r0, [r3, #8]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3b1b      	subs	r3, #27
 8003baa:	fa00 f203 	lsl.w	r2, r0, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	619a      	str	r2, [r3, #24]
 8003bb6:	e01b      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6959      	ldr	r1, [r3, #20]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	2207      	movs	r2, #7
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	4019      	ands	r1, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6898      	ldr	r0, [r3, #8]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	fa00 f203 	lsl.w	r2, r0, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bf0:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <HAL_ADC_ConfigChannel+0x460>)
 8003bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d105      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d015      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c0c:	2b11      	cmp	r3, #17
 8003c0e:	d105      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c20:	2b12      	cmp	r3, #18
 8003c22:	f040 8091 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 808a 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c3c:	d108      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x468>
 8003c3e:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_ADC_ConfigChannel+0x464>)
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e008      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x46e>
 8003c44:	83fff000 	.word	0x83fff000
 8003c48:	50000300 	.word	0x50000300
 8003c4c:	50000100 	.word	0x50000100
 8003c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c54:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d108      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x48e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x48e>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x490>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d150      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d010      	beq.n	8003ca4 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x4b6>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x4b6>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x4b8>
 8003c9e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d13c      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d11d      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x500>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb4:	d118      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cc2:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_ADC_ConfigChannel+0x578>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <HAL_ADC_ConfigChannel+0x57c>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	0c9a      	lsrs	r2, r3, #18
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003cd8:	e002      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f9      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ce6:	e02e      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b11      	cmp	r3, #17
 8003cee:	d10b      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x520>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf8:	d106      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d04:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d06:	e01e      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b12      	cmp	r3, #18
 8003d0e:	d11a      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d1a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d1c:	e013      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d30:	e00a      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d44:	e000      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d46:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	376c      	adds	r7, #108	; 0x6c
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	20000058 	.word	0x20000058
 8003d64:	431bde83 	.word	0x431bde83

08003d68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d108      	bne.n	8003d94 <ADC_Enable+0x2c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <ADC_Enable+0x2c>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <ADC_Enable+0x2e>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d143      	bne.n	8003e22 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <ADC_Enable+0xc4>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0210 	orr.w	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	f043 0201 	orr.w	r2, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e02f      	b.n	8003e24 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003dd4:	f7ff f942 	bl	800305c <HAL_GetTick>
 8003dd8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003dda:	e01b      	b.n	8003e14 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ddc:	f7ff f93e 	bl	800305c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d914      	bls.n	8003e14 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d00d      	beq.n	8003e14 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	f043 0210 	orr.w	r2, r3, #16
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	f043 0201 	orr.w	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e007      	b.n	8003e24 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d1dc      	bne.n	8003ddc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	8000003f 	.word	0x8000003f

08003e30 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d108      	bne.n	8003e5c <ADC_Disable+0x2c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <ADC_Disable+0x2c>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <ADC_Disable+0x2e>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d047      	beq.n	8003ef2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 030d 	and.w	r3, r3, #13
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10f      	bne.n	8003e90 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0202 	orr.w	r2, r2, #2
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2203      	movs	r2, #3
 8003e86:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003e88:	f7ff f8e8 	bl	800305c <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e8e:	e029      	b.n	8003ee4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0210 	orr.w	r2, r3, #16
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e023      	b.n	8003ef4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eac:	f7ff f8d6 	bl	800305c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d914      	bls.n	8003ee4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d10d      	bne.n	8003ee4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f043 0210 	orr.w	r2, r3, #16
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	f043 0201 	orr.w	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e007      	b.n	8003ef4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d0dc      	beq.n	8003eac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <__NVIC_SetPriorityGrouping+0x44>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f2e:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <__NVIC_SetPriorityGrouping+0x44>)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	60d3      	str	r3, [r2, #12]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <__NVIC_GetPriorityGrouping+0x18>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f003 0307 	and.w	r3, r3, #7
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	6039      	str	r1, [r7, #0]
 8003f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	db0a      	blt.n	8003f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	490c      	ldr	r1, [pc, #48]	; (8003fac <__NVIC_SetPriority+0x4c>)
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	0112      	lsls	r2, r2, #4
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	440b      	add	r3, r1
 8003f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f88:	e00a      	b.n	8003fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4908      	ldr	r1, [pc, #32]	; (8003fb0 <__NVIC_SetPriority+0x50>)
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	3b04      	subs	r3, #4
 8003f98:	0112      	lsls	r2, r2, #4
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	761a      	strb	r2, [r3, #24]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000e100 	.word	0xe000e100
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f1c3 0307 	rsb	r3, r3, #7
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	bf28      	it	cs
 8003fd2:	2304      	movcs	r3, #4
 8003fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d902      	bls.n	8003fe4 <NVIC_EncodePriority+0x30>
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	3b03      	subs	r3, #3
 8003fe2:	e000      	b.n	8003fe6 <NVIC_EncodePriority+0x32>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	43d9      	mvns	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800400c:	4313      	orrs	r3, r2
         );
}
 800400e:	4618      	mov	r0, r3
 8004010:	3724      	adds	r7, #36	; 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3b01      	subs	r3, #1
 8004028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800402c:	d301      	bcc.n	8004032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800402e:	2301      	movs	r3, #1
 8004030:	e00f      	b.n	8004052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004032:	4a0a      	ldr	r2, [pc, #40]	; (800405c <SysTick_Config+0x40>)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3b01      	subs	r3, #1
 8004038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800403a:	210f      	movs	r1, #15
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	f7ff ff8e 	bl	8003f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <SysTick_Config+0x40>)
 8004046:	2200      	movs	r2, #0
 8004048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800404a:	4b04      	ldr	r3, [pc, #16]	; (800405c <SysTick_Config+0x40>)
 800404c:	2207      	movs	r2, #7
 800404e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	e000e010 	.word	0xe000e010

08004060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff47 	bl	8003efc <__NVIC_SetPriorityGrouping>
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b086      	sub	sp, #24
 800407a:	af00      	add	r7, sp, #0
 800407c:	4603      	mov	r3, r0
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004088:	f7ff ff5c 	bl	8003f44 <__NVIC_GetPriorityGrouping>
 800408c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	6978      	ldr	r0, [r7, #20]
 8004094:	f7ff ff8e 	bl	8003fb4 <NVIC_EncodePriority>
 8004098:	4602      	mov	r2, r0
 800409a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff5d 	bl	8003f60 <__NVIC_SetPriority>
}
 80040a6:	bf00      	nop
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ffb0 	bl	800401c <SysTick_Config>
 80040bc:	4603      	mov	r3, r0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80040c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80040e2:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <HAL_FLASH_Program+0xd8>)
 80040e4:	7e1b      	ldrb	r3, [r3, #24]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_FLASH_Program+0x26>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e054      	b.n	8004198 <HAL_FLASH_Program+0xd0>
 80040ee:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <HAL_FLASH_Program+0xd8>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040f8:	f000 f8a8 	bl	800424c <FLASH_WaitForLastOperation>
 80040fc:	4603      	mov	r3, r0
 80040fe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d144      	bne.n	8004190 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d102      	bne.n	8004112 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800410c:	2301      	movs	r3, #1
 800410e:	757b      	strb	r3, [r7, #21]
 8004110:	e007      	b.n	8004122 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d102      	bne.n	800411e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004118:	2302      	movs	r3, #2
 800411a:	757b      	strb	r3, [r7, #21]
 800411c:	e001      	b.n	8004122 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800411e:	2304      	movs	r3, #4
 8004120:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004122:	2300      	movs	r3, #0
 8004124:	75bb      	strb	r3, [r7, #22]
 8004126:	e02d      	b.n	8004184 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004128:	7dbb      	ldrb	r3, [r7, #22]
 800412a:	005a      	lsls	r2, r3, #1
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	eb02 0c03 	add.w	ip, r2, r3
 8004132:	7dbb      	ldrb	r3, [r7, #22]
 8004134:	0119      	lsls	r1, r3, #4
 8004136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800413a:	f1c1 0620 	rsb	r6, r1, #32
 800413e:	f1a1 0020 	sub.w	r0, r1, #32
 8004142:	fa22 f401 	lsr.w	r4, r2, r1
 8004146:	fa03 f606 	lsl.w	r6, r3, r6
 800414a:	4334      	orrs	r4, r6
 800414c:	fa23 f000 	lsr.w	r0, r3, r0
 8004150:	4304      	orrs	r4, r0
 8004152:	fa23 f501 	lsr.w	r5, r3, r1
 8004156:	b2a3      	uxth	r3, r4
 8004158:	4619      	mov	r1, r3
 800415a:	4660      	mov	r0, ip
 800415c:	f000 f85a 	bl	8004214 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004160:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004164:	f000 f872 	bl	800424c <FLASH_WaitForLastOperation>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_FLASH_Program+0xdc>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <HAL_FLASH_Program+0xdc>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800417e:	7dbb      	ldrb	r3, [r7, #22]
 8004180:	3301      	adds	r3, #1
 8004182:	75bb      	strb	r3, [r7, #22]
 8004184:	7dba      	ldrb	r2, [r7, #22]
 8004186:	7d7b      	ldrb	r3, [r7, #21]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3cd      	bcc.n	8004128 <HAL_FLASH_Program+0x60>
 800418c:	e000      	b.n	8004190 <HAL_FLASH_Program+0xc8>
      {
        break;
 800418e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_FLASH_Program+0xd8>)
 8004192:	2200      	movs	r2, #0
 8004194:	761a      	strb	r2, [r3, #24]

  return status;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
}
 8004198:	4618      	mov	r0, r3
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a0:	20000900 	.word	0x20000900
 80041a4:	40022000 	.word	0x40022000

080041a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_FLASH_Unlock+0x40>)
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <HAL_FLASH_Unlock+0x40>)
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <HAL_FLASH_Unlock+0x44>)
 80041c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <HAL_FLASH_Unlock+0x40>)
 80041c6:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <HAL_FLASH_Unlock+0x48>)
 80041c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <HAL_FLASH_Unlock+0x40>)
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80041da:	79fb      	ldrb	r3, [r7, #7]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40022000 	.word	0x40022000
 80041ec:	45670123 	.word	0x45670123
 80041f0:	cdef89ab 	.word	0xcdef89ab

080041f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_FLASH_Lock+0x1c>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_FLASH_Lock+0x1c>)
 80041fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004202:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40022000 	.word	0x40022000

08004214 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004220:	4b08      	ldr	r3, [pc, #32]	; (8004244 <FLASH_Program_HalfWord+0x30>)
 8004222:	2200      	movs	r2, #0
 8004224:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004226:	4b08      	ldr	r3, [pc, #32]	; (8004248 <FLASH_Program_HalfWord+0x34>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	4a07      	ldr	r2, [pc, #28]	; (8004248 <FLASH_Program_HalfWord+0x34>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	887a      	ldrh	r2, [r7, #2]
 8004236:	801a      	strh	r2, [r3, #0]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	20000900 	.word	0x20000900
 8004248:	40022000 	.word	0x40022000

0800424c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004254:	f7fe ff02 	bl	800305c <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800425a:	e010      	b.n	800427e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d00c      	beq.n	800427e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <FLASH_WaitForLastOperation+0x2e>
 800426a:	f7fe fef7 	bl	800305c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	429a      	cmp	r2, r3
 8004278:	d201      	bcs.n	800427e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e01f      	b.n	80042be <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <FLASH_WaitForLastOperation+0x7c>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b01      	cmp	r3, #1
 8004288:	d0e8      	beq.n	800425c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <FLASH_WaitForLastOperation+0x7c>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b20      	cmp	r3, #32
 8004294:	d102      	bne.n	800429c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004296:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <FLASH_WaitForLastOperation+0x7c>)
 8004298:	2220      	movs	r2, #32
 800429a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <FLASH_WaitForLastOperation+0x7c>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d005      	beq.n	80042b4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <FLASH_WaitForLastOperation+0x7c>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d103      	bne.n	80042bc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80042b4:	f000 f80a 	bl	80042cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40022000 	.word	0x40022000

080042cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <FLASH_SetErrorCode+0x5c>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d109      	bne.n	80042f6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <FLASH_SetErrorCode+0x60>)
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f043 0302 	orr.w	r3, r3, #2
 80042ea:	4a10      	ldr	r2, [pc, #64]	; (800432c <FLASH_SetErrorCode+0x60>)
 80042ec:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f043 0310 	orr.w	r3, r3, #16
 80042f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <FLASH_SetErrorCode+0x5c>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d109      	bne.n	8004316 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <FLASH_SetErrorCode+0x60>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	4a08      	ldr	r2, [pc, #32]	; (800432c <FLASH_SetErrorCode+0x60>)
 800430c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004316:	4a04      	ldr	r2, [pc, #16]	; (8004328 <FLASH_SetErrorCode+0x5c>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	60d3      	str	r3, [r2, #12]
}  
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	40022000 	.word	0x40022000
 800432c:	20000900 	.word	0x20000900

08004330 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004342:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_FLASHEx_Erase+0xcc>)
 8004344:	7e1b      	ldrb	r3, [r3, #24]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_FLASHEx_Erase+0x1e>
 800434a:	2302      	movs	r3, #2
 800434c:	e052      	b.n	80043f4 <HAL_FLASHEx_Erase+0xc4>
 800434e:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_FLASHEx_Erase+0xcc>)
 8004350:	2201      	movs	r2, #1
 8004352:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d115      	bne.n	8004388 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800435c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004360:	f7ff ff74 	bl	800424c <FLASH_WaitForLastOperation>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d140      	bne.n	80043ec <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800436a:	f000 f84b 	bl	8004404 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800436e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004372:	f7ff ff6b 	bl	800424c <FLASH_WaitForLastOperation>
 8004376:	4603      	mov	r3, r0
 8004378:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800437a:	4b21      	ldr	r3, [pc, #132]	; (8004400 <HAL_FLASHEx_Erase+0xd0>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	4a20      	ldr	r2, [pc, #128]	; (8004400 <HAL_FLASHEx_Erase+0xd0>)
 8004380:	f023 0304 	bic.w	r3, r3, #4
 8004384:	6113      	str	r3, [r2, #16]
 8004386:	e031      	b.n	80043ec <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004388:	f24c 3050 	movw	r0, #50000	; 0xc350
 800438c:	f7ff ff5e 	bl	800424c <FLASH_WaitForLastOperation>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d12a      	bne.n	80043ec <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f04f 32ff 	mov.w	r2, #4294967295
 800439c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	e019      	b.n	80043da <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80043a6:	68b8      	ldr	r0, [r7, #8]
 80043a8:	f000 f846 	bl	8004438 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043b0:	f7ff ff4c 	bl	800424c <FLASH_WaitForLastOperation>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <HAL_FLASHEx_Erase+0xd0>)
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	4a10      	ldr	r2, [pc, #64]	; (8004400 <HAL_FLASHEx_Erase+0xd0>)
 80043be:	f023 0302 	bic.w	r3, r3, #2
 80043c2:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	601a      	str	r2, [r3, #0]
            break;
 80043d0:	e00c      	b.n	80043ec <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	02da      	lsls	r2, r3, #11
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d3dc      	bcc.n	80043a6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_FLASHEx_Erase+0xcc>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	761a      	strb	r2, [r3, #24]

  return status;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000900 	.word	0x20000900
 8004400:	40022000 	.word	0x40022000

08004404 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <FLASH_MassErase+0x2c>)
 800440a:	2200      	movs	r2, #0
 800440c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <FLASH_MassErase+0x30>)
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	4a08      	ldr	r2, [pc, #32]	; (8004434 <FLASH_MassErase+0x30>)
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <FLASH_MassErase+0x30>)
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	4a05      	ldr	r2, [pc, #20]	; (8004434 <FLASH_MassErase+0x30>)
 8004420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004424:	6113      	str	r3, [r2, #16]
}
 8004426:	bf00      	nop
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000900 	.word	0x20000900
 8004434:	40022000 	.word	0x40022000

08004438 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <FLASH_PageErase+0x38>)
 8004442:	2200      	movs	r2, #0
 8004444:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <FLASH_PageErase+0x3c>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <FLASH_PageErase+0x3c>)
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <FLASH_PageErase+0x3c>)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <FLASH_PageErase+0x3c>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	4a05      	ldr	r2, [pc, #20]	; (8004474 <FLASH_PageErase+0x3c>)
 800445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004462:	6113      	str	r3, [r2, #16]
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	20000900 	.word	0x20000900
 8004474:	40022000 	.word	0x40022000

08004478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004486:	e14e      	b.n	8004726 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	fa01 f303 	lsl.w	r3, r1, r3
 8004494:	4013      	ands	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8140 	beq.w	8004720 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d005      	beq.n	80044b8 <HAL_GPIO_Init+0x40>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d130      	bne.n	800451a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	2203      	movs	r2, #3
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044ee:	2201      	movs	r2, #1
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 0201 	and.w	r2, r3, #1
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b03      	cmp	r3, #3
 8004524:	d017      	beq.n	8004556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	2203      	movs	r2, #3
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4013      	ands	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d123      	bne.n	80045aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	08da      	lsrs	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3208      	adds	r2, #8
 800456a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800456e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	220f      	movs	r2, #15
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	08da      	lsrs	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3208      	adds	r2, #8
 80045a4:	6939      	ldr	r1, [r7, #16]
 80045a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0203 	and.w	r2, r3, #3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 809a 	beq.w	8004720 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ec:	4b55      	ldr	r3, [pc, #340]	; (8004744 <HAL_GPIO_Init+0x2cc>)
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	4a54      	ldr	r2, [pc, #336]	; (8004744 <HAL_GPIO_Init+0x2cc>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	6193      	str	r3, [r2, #24]
 80045f8:	4b52      	ldr	r3, [pc, #328]	; (8004744 <HAL_GPIO_Init+0x2cc>)
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004604:	4a50      	ldr	r2, [pc, #320]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	089b      	lsrs	r3, r3, #2
 800460a:	3302      	adds	r3, #2
 800460c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	220f      	movs	r2, #15
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800462e:	d013      	beq.n	8004658 <HAL_GPIO_Init+0x1e0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a46      	ldr	r2, [pc, #280]	; (800474c <HAL_GPIO_Init+0x2d4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00d      	beq.n	8004654 <HAL_GPIO_Init+0x1dc>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a45      	ldr	r2, [pc, #276]	; (8004750 <HAL_GPIO_Init+0x2d8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <HAL_GPIO_Init+0x1d8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a44      	ldr	r2, [pc, #272]	; (8004754 <HAL_GPIO_Init+0x2dc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d101      	bne.n	800464c <HAL_GPIO_Init+0x1d4>
 8004648:	2303      	movs	r3, #3
 800464a:	e006      	b.n	800465a <HAL_GPIO_Init+0x1e2>
 800464c:	2305      	movs	r3, #5
 800464e:	e004      	b.n	800465a <HAL_GPIO_Init+0x1e2>
 8004650:	2302      	movs	r3, #2
 8004652:	e002      	b.n	800465a <HAL_GPIO_Init+0x1e2>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_GPIO_Init+0x1e2>
 8004658:	2300      	movs	r3, #0
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	f002 0203 	and.w	r2, r2, #3
 8004660:	0092      	lsls	r2, r2, #2
 8004662:	4093      	lsls	r3, r2
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800466a:	4937      	ldr	r1, [pc, #220]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004678:	4b37      	ldr	r3, [pc, #220]	; (8004758 <HAL_GPIO_Init+0x2e0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	43db      	mvns	r3, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800469c:	4a2e      	ldr	r2, [pc, #184]	; (8004758 <HAL_GPIO_Init+0x2e0>)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046a2:	4b2d      	ldr	r3, [pc, #180]	; (8004758 <HAL_GPIO_Init+0x2e0>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80046c6:	4a24      	ldr	r2, [pc, #144]	; (8004758 <HAL_GPIO_Init+0x2e0>)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046cc:	4b22      	ldr	r3, [pc, #136]	; (8004758 <HAL_GPIO_Init+0x2e0>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_GPIO_Init+0x2e0>)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f6:	4b18      	ldr	r3, [pc, #96]	; (8004758 <HAL_GPIO_Init+0x2e0>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	43db      	mvns	r3, r3
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800471a:	4a0f      	ldr	r2, [pc, #60]	; (8004758 <HAL_GPIO_Init+0x2e0>)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	3301      	adds	r3, #1
 8004724:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	f47f aea9 	bne.w	8004488 <HAL_GPIO_Init+0x10>
  }
}
 8004736:	bf00      	nop
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40021000 	.word	0x40021000
 8004748:	40010000 	.word	0x40010000
 800474c:	48000400 	.word	0x48000400
 8004750:	48000800 	.word	0x48000800
 8004754:	48000c00 	.word	0x48000c00
 8004758:	40010400 	.word	0x40010400

0800475c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	887b      	ldrh	r3, [r7, #2]
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e001      	b.n	800477e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	807b      	strh	r3, [r7, #2]
 8004798:	4613      	mov	r3, r2
 800479a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800479c:	787b      	ldrb	r3, [r7, #1]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047a8:	e002      	b.n	80047b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f001 b823 	b.w	8005828 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 817d 	beq.w	8004af2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047f8:	4bbc      	ldr	r3, [pc, #752]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b04      	cmp	r3, #4
 8004802:	d00c      	beq.n	800481e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004804:	4bb9      	ldr	r3, [pc, #740]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 030c 	and.w	r3, r3, #12
 800480c:	2b08      	cmp	r3, #8
 800480e:	d15c      	bne.n	80048ca <HAL_RCC_OscConfig+0x10e>
 8004810:	4bb6      	ldr	r3, [pc, #728]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d155      	bne.n	80048ca <HAL_RCC_OscConfig+0x10e>
 800481e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004822:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004832:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004836:	fab3 f383 	clz	r3, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	b2db      	uxtb	r3, r3
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d102      	bne.n	8004850 <HAL_RCC_OscConfig+0x94>
 800484a:	4ba8      	ldr	r3, [pc, #672]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	e015      	b.n	800487c <HAL_RCC_OscConfig+0xc0>
 8004850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004854:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004868:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800486c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004870:	fa93 f3a3 	rbit	r3, r3
 8004874:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004878:	4b9c      	ldr	r3, [pc, #624]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004880:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004884:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004888:	fa92 f2a2 	rbit	r2, r2
 800488c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004890:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004894:	fab2 f282 	clz	r2, r2
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	f042 0220 	orr.w	r2, r2, #32
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	f002 021f 	and.w	r2, r2, #31
 80048a4:	2101      	movs	r1, #1
 80048a6:	fa01 f202 	lsl.w	r2, r1, r2
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 811f 	beq.w	8004af0 <HAL_RCC_OscConfig+0x334>
 80048b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 8116 	bne.w	8004af0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f000 bfaf 	b.w	8005828 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048da:	d106      	bne.n	80048ea <HAL_RCC_OscConfig+0x12e>
 80048dc:	4b83      	ldr	r3, [pc, #524]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a82      	ldr	r2, [pc, #520]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 80048e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e036      	b.n	8004958 <HAL_RCC_OscConfig+0x19c>
 80048ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x158>
 80048fa:	4b7c      	ldr	r3, [pc, #496]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7b      	ldr	r2, [pc, #492]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b79      	ldr	r3, [pc, #484]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a78      	ldr	r2, [pc, #480]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 800490c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e021      	b.n	8004958 <HAL_RCC_OscConfig+0x19c>
 8004914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x184>
 8004926:	4b71      	ldr	r3, [pc, #452]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a70      	ldr	r2, [pc, #448]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 800492c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b6e      	ldr	r3, [pc, #440]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6d      	ldr	r2, [pc, #436]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e00b      	b.n	8004958 <HAL_RCC_OscConfig+0x19c>
 8004940:	4b6a      	ldr	r3, [pc, #424]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a69      	ldr	r2, [pc, #420]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b67      	ldr	r3, [pc, #412]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a66      	ldr	r2, [pc, #408]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004956:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004958:	4b64      	ldr	r3, [pc, #400]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	f023 020f 	bic.w	r2, r3, #15
 8004960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	495f      	ldr	r1, [pc, #380]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 800496e:	4313      	orrs	r3, r2
 8004970:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d059      	beq.n	8004a36 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004982:	f7fe fb6b 	bl	800305c <HAL_GetTick>
 8004986:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800498c:	f7fe fb66 	bl	800305c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b64      	cmp	r3, #100	; 0x64
 800499a:	d902      	bls.n	80049a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	f000 bf43 	b.w	8005828 <HAL_RCC_OscConfig+0x106c>
 80049a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80049b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d102      	bne.n	80049d4 <HAL_RCC_OscConfig+0x218>
 80049ce:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	e015      	b.n	8004a00 <HAL_RCC_OscConfig+0x244>
 80049d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80049e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80049f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80049fc:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a04:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004a08:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004a0c:	fa92 f2a2 	rbit	r2, r2
 8004a10:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004a14:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004a18:	fab2 f282 	clz	r2, r2
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	f042 0220 	orr.w	r2, r2, #32
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	f002 021f 	and.w	r2, r2, #31
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ab      	beq.n	800498c <HAL_RCC_OscConfig+0x1d0>
 8004a34:	e05d      	b.n	8004af2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a36:	f7fe fb11 	bl	800305c <HAL_GetTick>
 8004a3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a40:	f7fe fb0c 	bl	800305c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	; 0x64
 8004a4e:	d902      	bls.n	8004a56 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	f000 bee9 	b.w	8005828 <HAL_RCC_OscConfig+0x106c>
 8004a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a5a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004a62:	fa93 f3a3 	rbit	r3, r3
 8004a66:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004a6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d102      	bne.n	8004a88 <HAL_RCC_OscConfig+0x2cc>
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	e015      	b.n	8004ab4 <HAL_RCC_OscConfig+0x2f8>
 8004a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a8c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a94:	fa93 f3a3 	rbit	r3, r3
 8004a98:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aa0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004aa4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004aa8:	fa93 f3a3 	rbit	r3, r3
 8004aac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <HAL_RCC_OscConfig+0x330>)
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ab8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004abc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004ac0:	fa92 f2a2 	rbit	r2, r2
 8004ac4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004ac8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004acc:	fab2 f282 	clz	r2, r2
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	f042 0220 	orr.w	r2, r2, #32
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	f002 021f 	and.w	r2, r2, #31
 8004adc:	2101      	movs	r1, #1
 8004ade:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ab      	bne.n	8004a40 <HAL_RCC_OscConfig+0x284>
 8004ae8:	e003      	b.n	8004af2 <HAL_RCC_OscConfig+0x336>
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 817d 	beq.w	8004e02 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b08:	4ba6      	ldr	r3, [pc, #664]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 030c 	and.w	r3, r3, #12
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00b      	beq.n	8004b2c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b14:	4ba3      	ldr	r3, [pc, #652]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d172      	bne.n	8004c06 <HAL_RCC_OscConfig+0x44a>
 8004b20:	4ba0      	ldr	r3, [pc, #640]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d16c      	bne.n	8004c06 <HAL_RCC_OscConfig+0x44a>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004b3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d102      	bne.n	8004b5c <HAL_RCC_OscConfig+0x3a0>
 8004b56:	4b93      	ldr	r3, [pc, #588]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	e013      	b.n	8004b84 <HAL_RCC_OscConfig+0x3c8>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004b66:	fa93 f3a3 	rbit	r3, r3
 8004b6a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004b6e:	2302      	movs	r3, #2
 8004b70:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b74:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004b78:	fa93 f3a3 	rbit	r3, r3
 8004b7c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004b80:	4b88      	ldr	r3, [pc, #544]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2202      	movs	r2, #2
 8004b86:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004b8a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b8e:	fa92 f2a2 	rbit	r2, r2
 8004b92:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004b96:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004b9a:	fab2 f282 	clz	r2, r2
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	f042 0220 	orr.w	r2, r2, #32
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	f002 021f 	and.w	r2, r2, #31
 8004baa:	2101      	movs	r1, #1
 8004bac:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCC_OscConfig+0x410>
 8004bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f000 be2e 	b.w	8005828 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bcc:	4b75      	ldr	r3, [pc, #468]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	21f8      	movs	r1, #248	; 0xf8
 8004be2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004bea:	fa91 f1a1 	rbit	r1, r1
 8004bee:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004bf2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004bf6:	fab1 f181 	clz	r1, r1
 8004bfa:	b2c9      	uxtb	r1, r1
 8004bfc:	408b      	lsls	r3, r1
 8004bfe:	4969      	ldr	r1, [pc, #420]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c04:	e0fd      	b.n	8004e02 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 8088 	beq.w	8004d28 <HAL_RCC_OscConfig+0x56c>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004c2a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2e:	fab3 f383 	clz	r3, r3
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2301      	movs	r3, #1
 8004c42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fe fa0a 	bl	800305c <HAL_GetTick>
 8004c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fe fa05 	bl	800305c <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d902      	bls.n	8004c64 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	f000 bde2 	b.w	8005828 <HAL_RCC_OscConfig+0x106c>
 8004c64:	2302      	movs	r3, #2
 8004c66:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c6e:	fa93 f3a3 	rbit	r3, r3
 8004c72:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004c76:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7a:	fab3 f383 	clz	r3, r3
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d102      	bne.n	8004c94 <HAL_RCC_OscConfig+0x4d8>
 8004c8e:	4b45      	ldr	r3, [pc, #276]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	e013      	b.n	8004cbc <HAL_RCC_OscConfig+0x500>
 8004c94:	2302      	movs	r3, #2
 8004c96:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004c9e:	fa93 f3a3 	rbit	r3, r3
 8004ca2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004cac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004cb8:	4b3a      	ldr	r3, [pc, #232]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004cc2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004cc6:	fa92 f2a2 	rbit	r2, r2
 8004cca:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004cce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004cd2:	fab2 f282 	clz	r2, r2
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	f042 0220 	orr.w	r2, r2, #32
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	f002 021f 	and.w	r2, r2, #31
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0af      	beq.n	8004c4e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cee:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	21f8      	movs	r1, #248	; 0xf8
 8004d04:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004d0c:	fa91 f1a1 	rbit	r1, r1
 8004d10:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004d14:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004d18:	fab1 f181 	clz	r1, r1
 8004d1c:	b2c9      	uxtb	r1, r1
 8004d1e:	408b      	lsls	r3, r1
 8004d20:	4920      	ldr	r1, [pc, #128]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
 8004d26:	e06c      	b.n	8004e02 <HAL_RCC_OscConfig+0x646>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2300      	movs	r3, #0
 8004d52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fe f982 	bl	800305c <HAL_GetTick>
 8004d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d5e:	f7fe f97d 	bl	800305c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d902      	bls.n	8004d74 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	f000 bd5a 	b.w	8005828 <HAL_RCC_OscConfig+0x106c>
 8004d74:	2302      	movs	r3, #2
 8004d76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d104      	bne.n	8004da8 <HAL_RCC_OscConfig+0x5ec>
 8004d9e:	4b01      	ldr	r3, [pc, #4]	; (8004da4 <HAL_RCC_OscConfig+0x5e8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	e015      	b.n	8004dd0 <HAL_RCC_OscConfig+0x614>
 8004da4:	40021000 	.word	0x40021000
 8004da8:	2302      	movs	r3, #2
 8004daa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004dba:	2302      	movs	r3, #2
 8004dbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004dc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004dcc:	4bc8      	ldr	r3, [pc, #800]	; (80050f0 <HAL_RCC_OscConfig+0x934>)
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004dd6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004dda:	fa92 f2a2 	rbit	r2, r2
 8004dde:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004de2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004de6:	fab2 f282 	clz	r2, r2
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	f042 0220 	orr.w	r2, r2, #32
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	f002 021f 	and.w	r2, r2, #31
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1ad      	bne.n	8004d5e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8110 	beq.w	8005038 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d079      	beq.n	8004f1c <HAL_RCC_OscConfig+0x760>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e3e:	fab3 f383 	clz	r3, r3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	4bab      	ldr	r3, [pc, #684]	; (80050f4 <HAL_RCC_OscConfig+0x938>)
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2301      	movs	r3, #1
 8004e50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e52:	f7fe f903 	bl	800305c <HAL_GetTick>
 8004e56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5c:	f7fe f8fe 	bl	800305c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d902      	bls.n	8004e72 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	f000 bcdb 	b.w	8005828 <HAL_RCC_OscConfig+0x106c>
 8004e72:	2302      	movs	r3, #2
 8004e74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e7c:	fa93 f3a3 	rbit	r3, r3
 8004e80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	fa93 f2a3 	rbit	r2, r3
 8004e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	fa93 f2a3 	rbit	r2, r3
 8004ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ecc:	4b88      	ldr	r3, [pc, #544]	; (80050f0 <HAL_RCC_OscConfig+0x934>)
 8004ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ed8:	2102      	movs	r1, #2
 8004eda:	6019      	str	r1, [r3, #0]
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	fa93 f1a3 	rbit	r1, r3
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ef2:	6019      	str	r1, [r3, #0]
  return result;
 8004ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	fab3 f383 	clz	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0a0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x6a0>
 8004f1a:	e08d      	b.n	8005038 <HAL_RCC_OscConfig+0x87c>
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	fa93 f2a3 	rbit	r2, r3
 8004f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f3e:	601a      	str	r2, [r3, #0]
  return result;
 8004f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f48:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	4b68      	ldr	r3, [pc, #416]	; (80050f4 <HAL_RCC_OscConfig+0x938>)
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	461a      	mov	r2, r3
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5e:	f7fe f87d 	bl	800305c <HAL_GetTick>
 8004f62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f68:	f7fe f878 	bl	800305c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d902      	bls.n	8004f7e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	f000 bc55 	b.w	8005828 <HAL_RCC_OscConfig+0x106c>
 8004f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f86:	2202      	movs	r2, #2
 8004f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	fa93 f2a3 	rbit	r2, r3
 8004f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004faa:	2202      	movs	r2, #2
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	fa93 f2a3 	rbit	r2, r3
 8004fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fce:	2202      	movs	r2, #2
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	fa93 f2a3 	rbit	r2, r3
 8004fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004fe8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fea:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <HAL_RCC_OscConfig+0x934>)
 8004fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004ff6:	2102      	movs	r1, #2
 8004ff8:	6019      	str	r1, [r3, #0]
 8004ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	fa93 f1a3 	rbit	r1, r3
 8005008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005010:	6019      	str	r1, [r3, #0]
  return result;
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fab3 f383 	clz	r3, r3
 8005020:	b2db      	uxtb	r3, r3
 8005022:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d197      	bne.n	8004f68 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 81a1 	beq.w	8005390 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005054:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <HAL_RCC_OscConfig+0x934>)
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d116      	bne.n	800508e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005060:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <HAL_RCC_OscConfig+0x934>)
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	4a22      	ldr	r2, [pc, #136]	; (80050f0 <HAL_RCC_OscConfig+0x934>)
 8005066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506a:	61d3      	str	r3, [r2, #28]
 800506c:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <HAL_RCC_OscConfig+0x934>)
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005082:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005086:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005088:	2301      	movs	r3, #1
 800508a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508e:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <HAL_RCC_OscConfig+0x93c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d11a      	bne.n	80050d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800509a:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <HAL_RCC_OscConfig+0x93c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <HAL_RCC_OscConfig+0x93c>)
 80050a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a6:	f7fd ffd9 	bl	800305c <HAL_GetTick>
 80050aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	e009      	b.n	80050c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b0:	f7fd ffd4 	bl	800305c <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b64      	cmp	r3, #100	; 0x64
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e3b1      	b.n	8005828 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <HAL_RCC_OscConfig+0x93c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ef      	beq.n	80050b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d10d      	bne.n	80050fc <HAL_RCC_OscConfig+0x940>
 80050e0:	4b03      	ldr	r3, [pc, #12]	; (80050f0 <HAL_RCC_OscConfig+0x934>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	4a02      	ldr	r2, [pc, #8]	; (80050f0 <HAL_RCC_OscConfig+0x934>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6213      	str	r3, [r2, #32]
 80050ec:	e03c      	b.n	8005168 <HAL_RCC_OscConfig+0x9ac>
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	10908120 	.word	0x10908120
 80050f8:	40007000 	.word	0x40007000
 80050fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005100:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10c      	bne.n	8005126 <HAL_RCC_OscConfig+0x96a>
 800510c:	4bc1      	ldr	r3, [pc, #772]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	4ac0      	ldr	r2, [pc, #768]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	6213      	str	r3, [r2, #32]
 8005118:	4bbe      	ldr	r3, [pc, #760]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	4abd      	ldr	r2, [pc, #756]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 800511e:	f023 0304 	bic.w	r3, r3, #4
 8005122:	6213      	str	r3, [r2, #32]
 8005124:	e020      	b.n	8005168 <HAL_RCC_OscConfig+0x9ac>
 8005126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b05      	cmp	r3, #5
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0x994>
 8005136:	4bb7      	ldr	r3, [pc, #732]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	4ab6      	ldr	r2, [pc, #728]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 800513c:	f043 0304 	orr.w	r3, r3, #4
 8005140:	6213      	str	r3, [r2, #32]
 8005142:	4bb4      	ldr	r3, [pc, #720]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	4ab3      	ldr	r2, [pc, #716]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	6213      	str	r3, [r2, #32]
 800514e:	e00b      	b.n	8005168 <HAL_RCC_OscConfig+0x9ac>
 8005150:	4bb0      	ldr	r3, [pc, #704]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	4aaf      	ldr	r2, [pc, #700]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	6213      	str	r3, [r2, #32]
 800515c:	4bad      	ldr	r3, [pc, #692]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4aac      	ldr	r2, [pc, #688]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005162:	f023 0304 	bic.w	r3, r3, #4
 8005166:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8081 	beq.w	800527c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517a:	f7fd ff6f 	bl	800305c <HAL_GetTick>
 800517e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005182:	e00b      	b.n	800519c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005184:	f7fd ff6a 	bl	800305c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	4293      	cmp	r3, r2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e345      	b.n	8005828 <HAL_RCC_OscConfig+0x106c>
 800519c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80051a4:	2202      	movs	r2, #2
 80051a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	fa93 f2a3 	rbit	r2, r3
 80051b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80051c8:	2202      	movs	r2, #2
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	fa93 f2a3 	rbit	r2, r3
 80051da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80051e2:	601a      	str	r2, [r3, #0]
  return result;
 80051e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80051ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ee:	fab3 f383 	clz	r3, r3
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f043 0302 	orr.w	r3, r3, #2
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d102      	bne.n	8005208 <HAL_RCC_OscConfig+0xa4c>
 8005202:	4b84      	ldr	r3, [pc, #528]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	e013      	b.n	8005230 <HAL_RCC_OscConfig+0xa74>
 8005208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005210:	2202      	movs	r2, #2
 8005212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005218:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	fa93 f2a3 	rbit	r2, r3
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	4b79      	ldr	r3, [pc, #484]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005234:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005238:	2102      	movs	r1, #2
 800523a:	6011      	str	r1, [r2, #0]
 800523c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005240:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	fa92 f1a2 	rbit	r1, r2
 800524a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800524e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005252:	6011      	str	r1, [r2, #0]
  return result;
 8005254:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005258:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	fab2 f282 	clz	r2, r2
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	f002 021f 	and.w	r2, r2, #31
 800526e:	2101      	movs	r1, #1
 8005270:	fa01 f202 	lsl.w	r2, r1, r2
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d084      	beq.n	8005184 <HAL_RCC_OscConfig+0x9c8>
 800527a:	e07f      	b.n	800537c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527c:	f7fd feee 	bl	800305c <HAL_GetTick>
 8005280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005284:	e00b      	b.n	800529e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7fd fee9 	bl	800305c <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e2c4      	b.n	8005828 <HAL_RCC_OscConfig+0x106c>
 800529e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80052a6:	2202      	movs	r2, #2
 80052a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	fa93 f2a3 	rbit	r2, r3
 80052b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80052ca:	2202      	movs	r2, #2
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	fa93 f2a3 	rbit	r2, r3
 80052dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052e4:	601a      	str	r2, [r3, #0]
  return result;
 80052e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ea:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f0:	fab3 f383 	clz	r3, r3
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d102      	bne.n	800530a <HAL_RCC_OscConfig+0xb4e>
 8005304:	4b43      	ldr	r3, [pc, #268]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	e013      	b.n	8005332 <HAL_RCC_OscConfig+0xb76>
 800530a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005312:	2202      	movs	r2, #2
 8005314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	fa93 f2a3 	rbit	r2, r3
 8005324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005328:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	4b39      	ldr	r3, [pc, #228]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005336:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800533a:	2102      	movs	r1, #2
 800533c:	6011      	str	r1, [r2, #0]
 800533e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005342:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	fa92 f1a2 	rbit	r1, r2
 800534c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005350:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005354:	6011      	str	r1, [r2, #0]
  return result;
 8005356:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800535a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	fab2 f282 	clz	r2, r2
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	f002 021f 	and.w	r2, r2, #31
 8005370:	2101      	movs	r1, #1
 8005372:	fa01 f202 	lsl.w	r2, r1, r2
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d184      	bne.n	8005286 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800537c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005380:	2b01      	cmp	r3, #1
 8005382:	d105      	bne.n	8005390 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005384:	4b23      	ldr	r3, [pc, #140]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	4a22      	ldr	r2, [pc, #136]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 800538a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005394:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8242 	beq.w	8005826 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <HAL_RCC_OscConfig+0xc58>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	f000 8213 	beq.w	80057d6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	f040 8162 	bne.w	8005686 <HAL_RCC_OscConfig+0xeca>
 80053c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80053ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	fa93 f2a3 	rbit	r2, r3
 80053de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80053e6:	601a      	str	r2, [r3, #0]
  return result;
 80053e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80053f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f2:	fab3 f383 	clz	r3, r3
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	461a      	mov	r2, r3
 8005404:	2300      	movs	r3, #0
 8005406:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fd fe28 	bl	800305c <HAL_GetTick>
 800540c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005410:	e00c      	b.n	800542c <HAL_RCC_OscConfig+0xc70>
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005418:	f7fd fe20 	bl	800305c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e1fd      	b.n	8005828 <HAL_RCC_OscConfig+0x106c>
 800542c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005430:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005434:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	fa93 f2a3 	rbit	r2, r3
 8005448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005450:	601a      	str	r2, [r3, #0]
  return result;
 8005452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005456:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800545a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800545c:	fab3 f383 	clz	r3, r3
 8005460:	b2db      	uxtb	r3, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d102      	bne.n	8005476 <HAL_RCC_OscConfig+0xcba>
 8005470:	4bb0      	ldr	r3, [pc, #704]	; (8005734 <HAL_RCC_OscConfig+0xf78>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	e027      	b.n	80054c6 <HAL_RCC_OscConfig+0xd0a>
 8005476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800547e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005488:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	fa93 f2a3 	rbit	r2, r3
 8005492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005496:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80054a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	fa93 f2a3 	rbit	r2, r3
 80054b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	4b9c      	ldr	r3, [pc, #624]	; (8005734 <HAL_RCC_OscConfig+0xf78>)
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ca:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80054ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054d2:	6011      	str	r1, [r2, #0]
 80054d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054d8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	fa92 f1a2 	rbit	r1, r2
 80054e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054e6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80054ea:	6011      	str	r1, [r2, #0]
  return result;
 80054ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054f0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	fab2 f282 	clz	r2, r2
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	f042 0220 	orr.w	r2, r2, #32
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	f002 021f 	and.w	r2, r2, #31
 8005506:	2101      	movs	r1, #1
 8005508:	fa01 f202 	lsl.w	r2, r1, r2
 800550c:	4013      	ands	r3, r2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d182      	bne.n	8005418 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005512:	4b88      	ldr	r3, [pc, #544]	; (8005734 <HAL_RCC_OscConfig+0xf78>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	430b      	orrs	r3, r1
 8005534:	497f      	ldr	r1, [pc, #508]	; (8005734 <HAL_RCC_OscConfig+0xf78>)
 8005536:	4313      	orrs	r3, r2
 8005538:	604b      	str	r3, [r1, #4]
 800553a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005542:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	fa93 f2a3 	rbit	r2, r3
 8005556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800555e:	601a      	str	r2, [r3, #0]
  return result;
 8005560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005564:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005568:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800556a:	fab3 f383 	clz	r3, r3
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005574:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	461a      	mov	r2, r3
 800557c:	2301      	movs	r3, #1
 800557e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005580:	f7fd fd6c 	bl	800305c <HAL_GetTick>
 8005584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005588:	e009      	b.n	800559e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800558a:	f7fd fd67 	bl	800305c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e144      	b.n	8005828 <HAL_RCC_OscConfig+0x106c>
 800559e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80055a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	fa93 f2a3 	rbit	r2, r3
 80055ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055be:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80055c2:	601a      	str	r2, [r3, #0]
  return result;
 80055c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80055cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d102      	bne.n	80055e8 <HAL_RCC_OscConfig+0xe2c>
 80055e2:	4b54      	ldr	r3, [pc, #336]	; (8005734 <HAL_RCC_OscConfig+0xf78>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	e027      	b.n	8005638 <HAL_RCC_OscConfig+0xe7c>
 80055e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ec:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80055f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	fa93 f2a3 	rbit	r2, r3
 8005604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005608:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005612:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005620:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	fa93 f2a3 	rbit	r2, r3
 800562a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	4b3f      	ldr	r3, [pc, #252]	; (8005734 <HAL_RCC_OscConfig+0xf78>)
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800563c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005640:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005644:	6011      	str	r1, [r2, #0]
 8005646:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800564a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	fa92 f1a2 	rbit	r1, r2
 8005654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005658:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800565c:	6011      	str	r1, [r2, #0]
  return result;
 800565e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005662:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	fab2 f282 	clz	r2, r2
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	f042 0220 	orr.w	r2, r2, #32
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	f002 021f 	and.w	r2, r2, #31
 8005678:	2101      	movs	r1, #1
 800567a:	fa01 f202 	lsl.w	r2, r1, r2
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d082      	beq.n	800558a <HAL_RCC_OscConfig+0xdce>
 8005684:	e0cf      	b.n	8005826 <HAL_RCC_OscConfig+0x106a>
 8005686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800568e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005698:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	fa93 f2a3 	rbit	r2, r3
 80056a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80056aa:	601a      	str	r2, [r3, #0]
  return result;
 80056ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80056b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	461a      	mov	r2, r3
 80056c8:	2300      	movs	r3, #0
 80056ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056cc:	f7fd fcc6 	bl	800305c <HAL_GetTick>
 80056d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d4:	e009      	b.n	80056ea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fd fcc1 	bl	800305c <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e09e      	b.n	8005828 <HAL_RCC_OscConfig+0x106c>
 80056ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80056f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	fa93 f2a3 	rbit	r2, r3
 8005706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800570e:	601a      	str	r2, [r3, #0]
  return result;
 8005710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005714:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005718:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800571a:	fab3 f383 	clz	r3, r3
 800571e:	b2db      	uxtb	r3, r3
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d104      	bne.n	8005738 <HAL_RCC_OscConfig+0xf7c>
 800572e:	4b01      	ldr	r3, [pc, #4]	; (8005734 <HAL_RCC_OscConfig+0xf78>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	e029      	b.n	8005788 <HAL_RCC_OscConfig+0xfcc>
 8005734:	40021000 	.word	0x40021000
 8005738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	fa93 f2a3 	rbit	r2, r3
 8005754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005758:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005762:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005766:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005770:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	fa93 f2a3 	rbit	r2, r3
 800577a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800577e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	4b2b      	ldr	r3, [pc, #172]	; (8005834 <HAL_RCC_OscConfig+0x1078>)
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800578c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005790:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005794:	6011      	str	r1, [r2, #0]
 8005796:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800579a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	fa92 f1a2 	rbit	r1, r2
 80057a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80057ac:	6011      	str	r1, [r2, #0]
  return result;
 80057ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057b2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	fab2 f282 	clz	r2, r2
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	f042 0220 	orr.w	r2, r2, #32
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	f002 021f 	and.w	r2, r2, #31
 80057c8:	2101      	movs	r1, #1
 80057ca:	fa01 f202 	lsl.w	r2, r1, r2
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d180      	bne.n	80056d6 <HAL_RCC_OscConfig+0xf1a>
 80057d4:	e027      	b.n	8005826 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e01e      	b.n	8005828 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <HAL_RCC_OscConfig+0x1078>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057f6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	429a      	cmp	r2, r3
 8005808:	d10b      	bne.n	8005822 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800580a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800580e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800581e:	429a      	cmp	r2, r3
 8005820:	d001      	beq.n	8005826 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40021000 	.word	0x40021000

08005838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b09e      	sub	sp, #120	; 0x78
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e162      	b.n	8005b16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005850:	4b90      	ldr	r3, [pc, #576]	; (8005a94 <HAL_RCC_ClockConfig+0x25c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d910      	bls.n	8005880 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585e:	4b8d      	ldr	r3, [pc, #564]	; (8005a94 <HAL_RCC_ClockConfig+0x25c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 0207 	bic.w	r2, r3, #7
 8005866:	498b      	ldr	r1, [pc, #556]	; (8005a94 <HAL_RCC_ClockConfig+0x25c>)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	4313      	orrs	r3, r2
 800586c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586e:	4b89      	ldr	r3, [pc, #548]	; (8005a94 <HAL_RCC_ClockConfig+0x25c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e14a      	b.n	8005b16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d008      	beq.n	800589e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800588c:	4b82      	ldr	r3, [pc, #520]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	497f      	ldr	r1, [pc, #508]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80dc 	beq.w	8005a64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d13c      	bne.n	800592e <HAL_RCC_ClockConfig+0xf6>
 80058b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058bc:	fa93 f3a3 	rbit	r3, r3
 80058c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80058c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c4:	fab3 f383 	clz	r3, r3
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d102      	bne.n	80058de <HAL_RCC_ClockConfig+0xa6>
 80058d8:	4b6f      	ldr	r3, [pc, #444]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	e00f      	b.n	80058fe <HAL_RCC_ClockConfig+0xc6>
 80058de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058e6:	fa93 f3a3 	rbit	r3, r3
 80058ea:	667b      	str	r3, [r7, #100]	; 0x64
 80058ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058f0:	663b      	str	r3, [r7, #96]	; 0x60
 80058f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f4:	fa93 f3a3 	rbit	r3, r3
 80058f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058fa:	4b67      	ldr	r3, [pc, #412]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005902:	65ba      	str	r2, [r7, #88]	; 0x58
 8005904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005906:	fa92 f2a2 	rbit	r2, r2
 800590a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800590c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800590e:	fab2 f282 	clz	r2, r2
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	f042 0220 	orr.w	r2, r2, #32
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	f002 021f 	and.w	r2, r2, #31
 800591e:	2101      	movs	r1, #1
 8005920:	fa01 f202 	lsl.w	r2, r1, r2
 8005924:	4013      	ands	r3, r2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d17b      	bne.n	8005a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e0f3      	b.n	8005b16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d13c      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x178>
 8005936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800593a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800593e:	fa93 f3a3 	rbit	r3, r3
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005946:	fab3 f383 	clz	r3, r3
 800594a:	b2db      	uxtb	r3, r3
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	b2db      	uxtb	r3, r3
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b01      	cmp	r3, #1
 8005958:	d102      	bne.n	8005960 <HAL_RCC_ClockConfig+0x128>
 800595a:	4b4f      	ldr	r3, [pc, #316]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	e00f      	b.n	8005980 <HAL_RCC_ClockConfig+0x148>
 8005960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005964:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	647b      	str	r3, [r7, #68]	; 0x44
 800596e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005972:	643b      	str	r3, [r7, #64]	; 0x40
 8005974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005976:	fa93 f3a3 	rbit	r3, r3
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800597c:	4b46      	ldr	r3, [pc, #280]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005984:	63ba      	str	r2, [r7, #56]	; 0x38
 8005986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005988:	fa92 f2a2 	rbit	r2, r2
 800598c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800598e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005990:	fab2 f282 	clz	r2, r2
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	f042 0220 	orr.w	r2, r2, #32
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	f002 021f 	and.w	r2, r2, #31
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f202 	lsl.w	r2, r1, r2
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d13a      	bne.n	8005a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0b2      	b.n	8005b16 <HAL_RCC_ClockConfig+0x2de>
 80059b0:	2302      	movs	r3, #2
 80059b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	fa93 f3a3 	rbit	r3, r3
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059be:	fab3 f383 	clz	r3, r3
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d102      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x1a0>
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	e00d      	b.n	80059f4 <HAL_RCC_ClockConfig+0x1bc>
 80059d8:	2302      	movs	r3, #2
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	fa93 f3a3 	rbit	r3, r3
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
 80059e4:	2302      	movs	r3, #2
 80059e6:	623b      	str	r3, [r7, #32]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	fa93 f3a3 	rbit	r3, r3
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	2202      	movs	r2, #2
 80059f6:	61ba      	str	r2, [r7, #24]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	fa92 f2a2 	rbit	r2, r2
 80059fe:	617a      	str	r2, [r7, #20]
  return result;
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	fab2 f282 	clz	r2, r2
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	f042 0220 	orr.w	r2, r2, #32
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	f002 021f 	and.w	r2, r2, #31
 8005a12:	2101      	movs	r1, #1
 8005a14:	fa01 f202 	lsl.w	r2, r1, r2
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e079      	b.n	8005b16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f023 0203 	bic.w	r2, r3, #3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	491a      	ldr	r1, [pc, #104]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a34:	f7fd fb12 	bl	800305c <HAL_GetTick>
 8005a38:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3c:	f7fd fb0e 	bl	800305c <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e061      	b.n	8005b16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a52:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f003 020c 	and.w	r2, r3, #12
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d1eb      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_ClockConfig+0x25c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d214      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <HAL_RCC_ClockConfig+0x25c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 0207 	bic.w	r2, r3, #7
 8005a7a:	4906      	ldr	r1, [pc, #24]	; (8005a94 <HAL_RCC_ClockConfig+0x25c>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <HAL_RCC_ClockConfig+0x25c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d005      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e040      	b.n	8005b16 <HAL_RCC_ClockConfig+0x2de>
 8005a94:	40022000 	.word	0x40022000
 8005a98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <HAL_RCC_ClockConfig+0x2e8>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	491a      	ldr	r1, [pc, #104]	; (8005b20 <HAL_RCC_ClockConfig+0x2e8>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ac6:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <HAL_RCC_ClockConfig+0x2e8>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	4912      	ldr	r1, [pc, #72]	; (8005b20 <HAL_RCC_ClockConfig+0x2e8>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ada:	f000 f829 	bl	8005b30 <HAL_RCC_GetSysClockFreq>
 8005ade:	4601      	mov	r1, r0
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <HAL_RCC_ClockConfig+0x2e8>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ae8:	22f0      	movs	r2, #240	; 0xf0
 8005aea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	fa92 f2a2 	rbit	r2, r2
 8005af2:	60fa      	str	r2, [r7, #12]
  return result;
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	fab2 f282 	clz	r2, r2
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	40d3      	lsrs	r3, r2
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <HAL_RCC_ClockConfig+0x2ec>)
 8005b00:	5cd3      	ldrb	r3, [r2, r3]
 8005b02:	fa21 f303 	lsr.w	r3, r1, r3
 8005b06:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <HAL_RCC_ClockConfig+0x2f0>)
 8005b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b0a:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <HAL_RCC_ClockConfig+0x2f4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fd fa60 	bl	8002fd4 <HAL_InitTick>
  
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3778      	adds	r7, #120	; 0x78
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000
 8005b24:	08008b5c 	.word	0x08008b5c
 8005b28:	20000058 	.word	0x20000058
 8005b2c:	2000005c 	.word	0x2000005c

08005b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b08b      	sub	sp, #44	; 0x2c
 8005b34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b4a:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d002      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0x30>
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCC_GetSysClockFreq+0x36>
 8005b5e:	e03c      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b62:	623b      	str	r3, [r7, #32]
      break;
 8005b64:	e03c      	b.n	8005be0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	fa92 f2a2 	rbit	r2, r2
 8005b78:	607a      	str	r2, [r7, #4]
  return result;
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	fab2 f282 	clz	r2, r2
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	40d3      	lsrs	r3, r2
 8005b84:	4a1c      	ldr	r2, [pc, #112]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b86:	5cd3      	ldrb	r3, [r2, r3]
 8005b88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b8a:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	220f      	movs	r2, #15
 8005b94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	fa92 f2a2 	rbit	r2, r2
 8005b9c:	60fa      	str	r2, [r7, #12]
  return result;
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	fab2 f282 	clz	r2, r2
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	40d3      	lsrs	r3, r2
 8005ba8:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005baa:	5cd3      	ldrb	r3, [r2, r3]
 8005bac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005bb8:	4a0e      	ldr	r2, [pc, #56]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc8:	e004      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	623b      	str	r3, [r7, #32]
      break;
 8005bd8:	e002      	b.n	8005be0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bdc:	623b      	str	r3, [r7, #32]
      break;
 8005bde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be0:	6a3b      	ldr	r3, [r7, #32]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	372c      	adds	r7, #44	; 0x2c
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	007a1200 	.word	0x007a1200
 8005bf8:	08008b6c 	.word	0x08008b6c
 8005bfc:	08008b7c 	.word	0x08008b7c
 8005c00:	003d0900 	.word	0x003d0900

08005c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b092      	sub	sp, #72	; 0x48
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80cd 	beq.w	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c28:	4b86      	ldr	r3, [pc, #536]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10e      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c34:	4b83      	ldr	r3, [pc, #524]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	4a82      	ldr	r2, [pc, #520]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	61d3      	str	r3, [r2, #28]
 8005c40:	4b80      	ldr	r3, [pc, #512]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c52:	4b7d      	ldr	r3, [pc, #500]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d118      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c5e:	4b7a      	ldr	r3, [pc, #488]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a79      	ldr	r2, [pc, #484]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c6a:	f7fd f9f7 	bl	800305c <HAL_GetTick>
 8005c6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c70:	e008      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c72:	f7fd f9f3 	bl	800305c <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b64      	cmp	r3, #100	; 0x64
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e0db      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c84:	4b70      	ldr	r3, [pc, #448]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c90:	4b6c      	ldr	r3, [pc, #432]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d07d      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d076      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cae:	4b65      	ldr	r3, [pc, #404]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cbc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	fa93 f3a3 	rbit	r3, r3
 8005cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cc8:	fab3 f383 	clz	r3, r3
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	4b5e      	ldr	r3, [pc, #376]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2301      	movs	r3, #1
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	fa93 f3a3 	rbit	r3, r3
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cec:	fab3 f383 	clz	r3, r3
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	4b55      	ldr	r3, [pc, #340]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d00:	4a50      	ldr	r2, [pc, #320]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d04:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d045      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fd f9a4 	bl	800305c <HAL_GetTick>
 8005d14:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d16:	e00a      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d18:	f7fd f9a0 	bl	800305c <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e086      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	fa93 f3a3 	rbit	r3, r3
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	fa93 f3a3 	rbit	r3, r3
 8005d44:	61fb      	str	r3, [r7, #28]
  return result;
 8005d46:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d48:	fab3 f383 	clz	r3, r3
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	f043 0302 	orr.w	r3, r3, #2
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d102      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005d5c:	4b39      	ldr	r3, [pc, #228]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	e007      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005d62:	2302      	movs	r3, #2
 8005d64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	fa93 f3a3 	rbit	r3, r3
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	4b35      	ldr	r3, [pc, #212]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2202      	movs	r2, #2
 8005d74:	613a      	str	r2, [r7, #16]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	fa92 f2a2 	rbit	r2, r2
 8005d7c:	60fa      	str	r2, [r7, #12]
  return result;
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	fab2 f282 	clz	r2, r2
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	f002 021f 	and.w	r2, r2, #31
 8005d90:	2101      	movs	r1, #1
 8005d92:	fa01 f202 	lsl.w	r2, r1, r2
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0bd      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005d9c:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4926      	ldr	r1, [pc, #152]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d105      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	4a22      	ldr	r2, [pc, #136]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dce:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	f023 0203 	bic.w	r2, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	491a      	ldr	r1, [pc, #104]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dec:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	f023 0210 	bic.w	r2, r3, #16
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4912      	ldr	r1, [pc, #72]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	490b      	ldr	r1, [pc, #44]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	4903      	ldr	r1, [pc, #12]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3748      	adds	r7, #72	; 0x48
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	40021000 	.word	0x40021000
 8005e48:	40007000 	.word	0x40007000
 8005e4c:	10908100 	.word	0x10908100

08005e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e095      	b.n	8005f8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d108      	bne.n	8005e7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e72:	d009      	beq.n	8005e88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	61da      	str	r2, [r3, #28]
 8005e7a:	e005      	b.n	8005e88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fc fed6 	bl	8002c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ec8:	d902      	bls.n	8005ed0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e002      	b.n	8005ed6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ede:	d007      	beq.n	8005ef0 <HAL_SPI_Init+0xa0>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee8:	d002      	beq.n	8005ef0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	ea42 0103 	orr.w	r1, r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	f003 0204 	and.w	r2, r3, #4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f6c:	ea42 0103 	orr.w	r1, r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b088      	sub	sp, #32
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_SPI_Transmit+0x22>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e158      	b.n	800626a <HAL_SPI_Transmit+0x2d4>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fc0:	f7fd f84c 	bl	800305c <HAL_GetTick>
 8005fc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fda:	e13d      	b.n	8006258 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <HAL_SPI_Transmit+0x52>
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fec:	e134      	b.n	8006258 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006038:	d10f      	bne.n	800605a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006048:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d007      	beq.n	8006078 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006080:	d94b      	bls.n	800611a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_SPI_Transmit+0xfa>
 800608a:	8afb      	ldrh	r3, [r7, #22]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d13e      	bne.n	800610e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	881a      	ldrh	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	1c9a      	adds	r2, r3, #2
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060b4:	e02b      	b.n	800610e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d112      	bne.n	80060ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	1c9a      	adds	r2, r3, #2
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060e8:	e011      	b.n	800610e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ea:	f7fc ffb7 	bl	800305c <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d803      	bhi.n	8006102 <HAL_SPI_Transmit+0x16c>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d102      	bne.n	8006108 <HAL_SPI_Transmit+0x172>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800610c:	e0a4      	b.n	8006258 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1ce      	bne.n	80060b6 <HAL_SPI_Transmit+0x120>
 8006118:	e07c      	b.n	8006214 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_SPI_Transmit+0x192>
 8006122:	8afb      	ldrh	r3, [r7, #22]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d170      	bne.n	800620a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d912      	bls.n	8006158 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	881a      	ldrh	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	1c9a      	adds	r2, r3, #2
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b02      	subs	r3, #2
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006156:	e058      	b.n	800620a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800617e:	e044      	b.n	800620a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b02      	cmp	r3, #2
 800618c:	d12b      	bne.n	80061e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d912      	bls.n	80061be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	881a      	ldrh	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	1c9a      	adds	r2, r3, #2
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b02      	subs	r3, #2
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061bc:	e025      	b.n	800620a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	7812      	ldrb	r2, [r2, #0]
 80061ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061e4:	e011      	b.n	800620a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061e6:	f7fc ff39 	bl	800305c <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d803      	bhi.n	80061fe <HAL_SPI_Transmit+0x268>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d102      	bne.n	8006204 <HAL_SPI_Transmit+0x26e>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006208:	e026      	b.n	8006258 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1b5      	bne.n	8006180 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f949 	bl	80064b0 <SPI_EndRxTxTransaction>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e000      	b.n	8006258 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006256:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006268:	7ffb      	ldrb	r3, [r7, #31]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	4613      	mov	r3, r2
 8006282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006284:	f7fc feea 	bl	800305c <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	4413      	add	r3, r2
 8006292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006294:	f7fc fee2 	bl	800305c <HAL_GetTick>
 8006298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800629a:	4b39      	ldr	r3, [pc, #228]	; (8006380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	015b      	lsls	r3, r3, #5
 80062a0:	0d1b      	lsrs	r3, r3, #20
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	fb02 f303 	mul.w	r3, r2, r3
 80062a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062aa:	e054      	b.n	8006356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d050      	beq.n	8006356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062b4:	f7fc fed2 	bl	800305c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d902      	bls.n	80062ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d13d      	bne.n	8006346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e2:	d111      	bne.n	8006308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ec:	d004      	beq.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f6:	d107      	bne.n	8006308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006310:	d10f      	bne.n	8006332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e017      	b.n	8006376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	3b01      	subs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	429a      	cmp	r2, r3
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	429a      	cmp	r2, r3
 8006372:	d19b      	bne.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000058 	.word	0x20000058

08006384 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	; 0x28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006392:	2300      	movs	r3, #0
 8006394:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006396:	f7fc fe61 	bl	800305c <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	4413      	add	r3, r2
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063a6:	f7fc fe59 	bl	800305c <HAL_GetTick>
 80063aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	330c      	adds	r3, #12
 80063b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063b4:	4b3d      	ldr	r3, [pc, #244]	; (80064ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	00da      	lsls	r2, r3, #3
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	0d1b      	lsrs	r3, r3, #20
 80063c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063cc:	e060      	b.n	8006490 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063d4:	d107      	bne.n	80063e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d050      	beq.n	8006490 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063ee:	f7fc fe35 	bl	800305c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d902      	bls.n	8006404 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d13d      	bne.n	8006480 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006412:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800641c:	d111      	bne.n	8006442 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006426:	d004      	beq.n	8006432 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006430:	d107      	bne.n	8006442 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006440:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644a:	d10f      	bne.n	800646c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800646a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e010      	b.n	80064a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	3b01      	subs	r3, #1
 800648e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4013      	ands	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d196      	bne.n	80063ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3728      	adds	r7, #40	; 0x28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000058 	.word	0x20000058

080064b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff ff5b 	bl	8006384 <SPI_WaitFifoStateUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d8:	f043 0220 	orr.w	r2, r3, #32
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e027      	b.n	8006534 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2180      	movs	r1, #128	; 0x80
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff fec0 	bl	8006274 <SPI_WaitFlagStateUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fe:	f043 0220 	orr.w	r2, r3, #32
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e014      	b.n	8006534 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f7ff ff34 	bl	8006384 <SPI_WaitFifoStateUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006526:	f043 0220 	orr.w	r2, r3, #32
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e000      	b.n	8006534 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e049      	b.n	80065e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fc fbd6 	bl	8002d14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3304      	adds	r3, #4
 8006578:	4619      	mov	r1, r3
 800657a:	4610      	mov	r0, r2
 800657c:	f000 f94a 	bl	8006814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d101      	bne.n	800660a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006606:	2302      	movs	r3, #2
 8006608:	e0ff      	b.n	800680a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b14      	cmp	r3, #20
 8006616:	f200 80f0 	bhi.w	80067fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006675 	.word	0x08006675
 8006624:	080067fb 	.word	0x080067fb
 8006628:	080067fb 	.word	0x080067fb
 800662c:	080067fb 	.word	0x080067fb
 8006630:	080066b5 	.word	0x080066b5
 8006634:	080067fb 	.word	0x080067fb
 8006638:	080067fb 	.word	0x080067fb
 800663c:	080067fb 	.word	0x080067fb
 8006640:	080066f7 	.word	0x080066f7
 8006644:	080067fb 	.word	0x080067fb
 8006648:	080067fb 	.word	0x080067fb
 800664c:	080067fb 	.word	0x080067fb
 8006650:	08006737 	.word	0x08006737
 8006654:	080067fb 	.word	0x080067fb
 8006658:	080067fb 	.word	0x080067fb
 800665c:	080067fb 	.word	0x080067fb
 8006660:	08006779 	.word	0x08006779
 8006664:	080067fb 	.word	0x080067fb
 8006668:	080067fb 	.word	0x080067fb
 800666c:	080067fb 	.word	0x080067fb
 8006670:	080067b9 	.word	0x080067b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f942 	bl	8006904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0208 	orr.w	r2, r2, #8
 800668e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0204 	bic.w	r2, r2, #4
 800669e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6999      	ldr	r1, [r3, #24]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	619a      	str	r2, [r3, #24]
      break;
 80066b2:	e0a5      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f9a8 	bl	8006a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6999      	ldr	r1, [r3, #24]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	021a      	lsls	r2, r3, #8
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	619a      	str	r2, [r3, #24]
      break;
 80066f4:	e084      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fa07 	bl	8006b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0208 	orr.w	r2, r2, #8
 8006710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0204 	bic.w	r2, r2, #4
 8006720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69d9      	ldr	r1, [r3, #28]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	61da      	str	r2, [r3, #28]
      break;
 8006734:	e064      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fa65 	bl	8006c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	021a      	lsls	r2, r3, #8
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	61da      	str	r2, [r3, #28]
      break;
 8006776:	e043      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 faa8 	bl	8006cd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0208 	orr.w	r2, r2, #8
 8006792:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0204 	bic.w	r2, r2, #4
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691a      	ldr	r2, [r3, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067b6:	e023      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fae6 	bl	8006d90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	021a      	lsls	r2, r3, #8
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067f8:	e002      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	75fb      	strb	r3, [r7, #23]
      break;
 80067fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop

08006814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a32      	ldr	r2, [pc, #200]	; (80068f0 <TIM_Base_SetConfig+0xdc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_Base_SetConfig+0x28>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d003      	beq.n	800683c <TIM_Base_SetConfig+0x28>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a2f      	ldr	r2, [pc, #188]	; (80068f4 <TIM_Base_SetConfig+0xe0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d108      	bne.n	800684e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a27      	ldr	r2, [pc, #156]	; (80068f0 <TIM_Base_SetConfig+0xdc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d00f      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a24      	ldr	r2, [pc, #144]	; (80068f4 <TIM_Base_SetConfig+0xe0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00b      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a23      	ldr	r2, [pc, #140]	; (80068f8 <TIM_Base_SetConfig+0xe4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d007      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a22      	ldr	r2, [pc, #136]	; (80068fc <TIM_Base_SetConfig+0xe8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d003      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <TIM_Base_SetConfig+0xec>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d108      	bne.n	8006890 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a0e      	ldr	r2, [pc, #56]	; (80068f0 <TIM_Base_SetConfig+0xdc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0xc0>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a0e      	ldr	r2, [pc, #56]	; (80068f8 <TIM_Base_SetConfig+0xe4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0xc0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <TIM_Base_SetConfig+0xe8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0xc0>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0c      	ldr	r2, [pc, #48]	; (8006900 <TIM_Base_SetConfig+0xec>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d103      	bne.n	80068dc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	615a      	str	r2, [r3, #20]
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800

08006904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0201 	bic.w	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f023 0302 	bic.w	r3, r3, #2
 8006950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a28      	ldr	r2, [pc, #160]	; (8006a00 <TIM_OC1_SetConfig+0xfc>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00b      	beq.n	800697c <TIM_OC1_SetConfig+0x78>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <TIM_OC1_SetConfig+0x100>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d007      	beq.n	800697c <TIM_OC1_SetConfig+0x78>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a26      	ldr	r2, [pc, #152]	; (8006a08 <TIM_OC1_SetConfig+0x104>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_OC1_SetConfig+0x78>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a25      	ldr	r2, [pc, #148]	; (8006a0c <TIM_OC1_SetConfig+0x108>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d10c      	bne.n	8006996 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0308 	bic.w	r3, r3, #8
 8006982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f023 0304 	bic.w	r3, r3, #4
 8006994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a19      	ldr	r2, [pc, #100]	; (8006a00 <TIM_OC1_SetConfig+0xfc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00b      	beq.n	80069b6 <TIM_OC1_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a18      	ldr	r2, [pc, #96]	; (8006a04 <TIM_OC1_SetConfig+0x100>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d007      	beq.n	80069b6 <TIM_OC1_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <TIM_OC1_SetConfig+0x104>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d003      	beq.n	80069b6 <TIM_OC1_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a16      	ldr	r2, [pc, #88]	; (8006a0c <TIM_OC1_SetConfig+0x108>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d111      	bne.n	80069da <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	621a      	str	r2, [r3, #32]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40014400 	.word	0x40014400
 8006a0c:	40014800 	.word	0x40014800

08006a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0210 	bic.w	r2, r3, #16
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0320 	bic.w	r3, r3, #32
 8006a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a24      	ldr	r2, [pc, #144]	; (8006b00 <TIM_OC2_SetConfig+0xf0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d10d      	bne.n	8006a90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a1b      	ldr	r2, [pc, #108]	; (8006b00 <TIM_OC2_SetConfig+0xf0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <TIM_OC2_SetConfig+0xa0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a1a      	ldr	r2, [pc, #104]	; (8006b04 <TIM_OC2_SetConfig+0xf4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d007      	beq.n	8006ab0 <TIM_OC2_SetConfig+0xa0>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a19      	ldr	r2, [pc, #100]	; (8006b08 <TIM_OC2_SetConfig+0xf8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_OC2_SetConfig+0xa0>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a18      	ldr	r2, [pc, #96]	; (8006b0c <TIM_OC2_SetConfig+0xfc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d113      	bne.n	8006ad8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006abe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40012c00 	.word	0x40012c00
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40014400 	.word	0x40014400
 8006b0c:	40014800 	.word	0x40014800

08006b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a23      	ldr	r2, [pc, #140]	; (8006bfc <TIM_OC3_SetConfig+0xec>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10d      	bne.n	8006b8e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <TIM_OC3_SetConfig+0xec>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00b      	beq.n	8006bae <TIM_OC3_SetConfig+0x9e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <TIM_OC3_SetConfig+0xf0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d007      	beq.n	8006bae <TIM_OC3_SetConfig+0x9e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <TIM_OC3_SetConfig+0xf4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d003      	beq.n	8006bae <TIM_OC3_SetConfig+0x9e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <TIM_OC3_SetConfig+0xf8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d113      	bne.n	8006bd6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	621a      	str	r2, [r3, #32]
}
 8006bf0:	bf00      	nop
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40014400 	.word	0x40014400
 8006c08:	40014800 	.word	0x40014800

08006c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	031b      	lsls	r3, r3, #12
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <TIM_OC4_SetConfig+0xb8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_OC4_SetConfig+0x7c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <TIM_OC4_SetConfig+0xbc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <TIM_OC4_SetConfig+0x7c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a14      	ldr	r2, [pc, #80]	; (8006ccc <TIM_OC4_SetConfig+0xc0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC4_SetConfig+0x7c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <TIM_OC4_SetConfig+0xc4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d109      	bne.n	8006c9c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	019b      	lsls	r3, r3, #6
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800

08006cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	041b      	lsls	r3, r3, #16
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <TIM_OC5_SetConfig+0xac>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00b      	beq.n	8006d46 <TIM_OC5_SetConfig+0x72>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <TIM_OC5_SetConfig+0xb0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d007      	beq.n	8006d46 <TIM_OC5_SetConfig+0x72>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <TIM_OC5_SetConfig+0xb4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_OC5_SetConfig+0x72>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a12      	ldr	r2, [pc, #72]	; (8006d8c <TIM_OC5_SetConfig+0xb8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d109      	bne.n	8006d5a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	621a      	str	r2, [r3, #32]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40014000 	.word	0x40014000
 8006d88:	40014400 	.word	0x40014400
 8006d8c:	40014800 	.word	0x40014800

08006d90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	051b      	lsls	r3, r3, #20
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <TIM_OC6_SetConfig+0xb0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_OC6_SetConfig+0x74>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <TIM_OC6_SetConfig+0xb4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_OC6_SetConfig+0x74>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a14      	ldr	r2, [pc, #80]	; (8006e48 <TIM_OC6_SetConfig+0xb8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC6_SetConfig+0x74>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <TIM_OC6_SetConfig+0xbc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d109      	bne.n	8006e18 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	029b      	lsls	r3, r3, #10
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800

08006e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e054      	b.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d108      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d009      	beq.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a11      	ldr	r2, [pc, #68]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d10c      	bne.n	8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40012c00 	.word	0x40012c00
 8006f24:	40000400 	.word	0x40000400
 8006f28:	40014000 	.word	0x40014000

08006f2c <__errno>:
 8006f2c:	4b01      	ldr	r3, [pc, #4]	; (8006f34 <__errno+0x8>)
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000064 	.word	0x20000064

08006f38 <__libc_init_array>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4d0d      	ldr	r5, [pc, #52]	; (8006f70 <__libc_init_array+0x38>)
 8006f3c:	4c0d      	ldr	r4, [pc, #52]	; (8006f74 <__libc_init_array+0x3c>)
 8006f3e:	1b64      	subs	r4, r4, r5
 8006f40:	10a4      	asrs	r4, r4, #2
 8006f42:	2600      	movs	r6, #0
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	d109      	bne.n	8006f5c <__libc_init_array+0x24>
 8006f48:	4d0b      	ldr	r5, [pc, #44]	; (8006f78 <__libc_init_array+0x40>)
 8006f4a:	4c0c      	ldr	r4, [pc, #48]	; (8006f7c <__libc_init_array+0x44>)
 8006f4c:	f001 fa62 	bl	8008414 <_init>
 8006f50:	1b64      	subs	r4, r4, r5
 8006f52:	10a4      	asrs	r4, r4, #2
 8006f54:	2600      	movs	r6, #0
 8006f56:	42a6      	cmp	r6, r4
 8006f58:	d105      	bne.n	8006f66 <__libc_init_array+0x2e>
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f60:	4798      	blx	r3
 8006f62:	3601      	adds	r6, #1
 8006f64:	e7ee      	b.n	8006f44 <__libc_init_array+0xc>
 8006f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6a:	4798      	blx	r3
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	e7f2      	b.n	8006f56 <__libc_init_array+0x1e>
 8006f70:	08008cd4 	.word	0x08008cd4
 8006f74:	08008cd4 	.word	0x08008cd4
 8006f78:	08008cd4 	.word	0x08008cd4
 8006f7c:	08008cd8 	.word	0x08008cd8

08006f80 <memcpy>:
 8006f80:	440a      	add	r2, r1
 8006f82:	4291      	cmp	r1, r2
 8006f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f88:	d100      	bne.n	8006f8c <memcpy+0xc>
 8006f8a:	4770      	bx	lr
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f96:	4291      	cmp	r1, r2
 8006f98:	d1f9      	bne.n	8006f8e <memcpy+0xe>
 8006f9a:	bd10      	pop	{r4, pc}

08006f9c <memset>:
 8006f9c:	4402      	add	r2, r0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d100      	bne.n	8006fa6 <memset+0xa>
 8006fa4:	4770      	bx	lr
 8006fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8006faa:	e7f9      	b.n	8006fa0 <memset+0x4>

08006fac <srand>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <srand+0x44>)
 8006fb0:	681d      	ldr	r5, [r3, #0]
 8006fb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	b9b3      	cbnz	r3, 8006fe6 <srand+0x3a>
 8006fb8:	2018      	movs	r0, #24
 8006fba:	f000 f8b3 	bl	8007124 <malloc>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	63a8      	str	r0, [r5, #56]	; 0x38
 8006fc2:	b920      	cbnz	r0, 8006fce <srand+0x22>
 8006fc4:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <srand+0x48>)
 8006fc6:	480c      	ldr	r0, [pc, #48]	; (8006ff8 <srand+0x4c>)
 8006fc8:	2142      	movs	r1, #66	; 0x42
 8006fca:	f000 f87b 	bl	80070c4 <__assert_func>
 8006fce:	490b      	ldr	r1, [pc, #44]	; (8006ffc <srand+0x50>)
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <srand+0x54>)
 8006fd2:	e9c0 1300 	strd	r1, r3, [r0]
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <srand+0x58>)
 8006fd8:	6083      	str	r3, [r0, #8]
 8006fda:	230b      	movs	r3, #11
 8006fdc:	8183      	strh	r3, [r0, #12]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006fe6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006fe8:	2200      	movs	r2, #0
 8006fea:	611c      	str	r4, [r3, #16]
 8006fec:	615a      	str	r2, [r3, #20]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	20000064 	.word	0x20000064
 8006ff4:	08008b90 	.word	0x08008b90
 8006ff8:	08008ba7 	.word	0x08008ba7
 8006ffc:	abcd330e 	.word	0xabcd330e
 8007000:	e66d1234 	.word	0xe66d1234
 8007004:	0005deec 	.word	0x0005deec

08007008 <rand>:
 8007008:	4b16      	ldr	r3, [pc, #88]	; (8007064 <rand+0x5c>)
 800700a:	b510      	push	{r4, lr}
 800700c:	681c      	ldr	r4, [r3, #0]
 800700e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007010:	b9b3      	cbnz	r3, 8007040 <rand+0x38>
 8007012:	2018      	movs	r0, #24
 8007014:	f000 f886 	bl	8007124 <malloc>
 8007018:	63a0      	str	r0, [r4, #56]	; 0x38
 800701a:	b928      	cbnz	r0, 8007028 <rand+0x20>
 800701c:	4602      	mov	r2, r0
 800701e:	4b12      	ldr	r3, [pc, #72]	; (8007068 <rand+0x60>)
 8007020:	4812      	ldr	r0, [pc, #72]	; (800706c <rand+0x64>)
 8007022:	214e      	movs	r1, #78	; 0x4e
 8007024:	f000 f84e 	bl	80070c4 <__assert_func>
 8007028:	4a11      	ldr	r2, [pc, #68]	; (8007070 <rand+0x68>)
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <rand+0x6c>)
 800702c:	e9c0 2300 	strd	r2, r3, [r0]
 8007030:	4b11      	ldr	r3, [pc, #68]	; (8007078 <rand+0x70>)
 8007032:	6083      	str	r3, [r0, #8]
 8007034:	230b      	movs	r3, #11
 8007036:	8183      	strh	r3, [r0, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	2300      	movs	r3, #0
 800703c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007040:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007042:	4a0e      	ldr	r2, [pc, #56]	; (800707c <rand+0x74>)
 8007044:	6920      	ldr	r0, [r4, #16]
 8007046:	6963      	ldr	r3, [r4, #20]
 8007048:	490d      	ldr	r1, [pc, #52]	; (8007080 <rand+0x78>)
 800704a:	4342      	muls	r2, r0
 800704c:	fb01 2203 	mla	r2, r1, r3, r2
 8007050:	fba0 0101 	umull	r0, r1, r0, r1
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	eb42 0001 	adc.w	r0, r2, r1
 800705a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800705e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007062:	bd10      	pop	{r4, pc}
 8007064:	20000064 	.word	0x20000064
 8007068:	08008b90 	.word	0x08008b90
 800706c:	08008ba7 	.word	0x08008ba7
 8007070:	abcd330e 	.word	0xabcd330e
 8007074:	e66d1234 	.word	0xe66d1234
 8007078:	0005deec 	.word	0x0005deec
 800707c:	5851f42d 	.word	0x5851f42d
 8007080:	4c957f2d 	.word	0x4c957f2d

08007084 <siprintf>:
 8007084:	b40e      	push	{r1, r2, r3}
 8007086:	b500      	push	{lr}
 8007088:	b09c      	sub	sp, #112	; 0x70
 800708a:	ab1d      	add	r3, sp, #116	; 0x74
 800708c:	9002      	str	r0, [sp, #8]
 800708e:	9006      	str	r0, [sp, #24]
 8007090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007094:	4809      	ldr	r0, [pc, #36]	; (80070bc <siprintf+0x38>)
 8007096:	9107      	str	r1, [sp, #28]
 8007098:	9104      	str	r1, [sp, #16]
 800709a:	4909      	ldr	r1, [pc, #36]	; (80070c0 <siprintf+0x3c>)
 800709c:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a0:	9105      	str	r1, [sp, #20]
 80070a2:	6800      	ldr	r0, [r0, #0]
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	a902      	add	r1, sp, #8
 80070a8:	f000 f980 	bl	80073ac <_svfiprintf_r>
 80070ac:	9b02      	ldr	r3, [sp, #8]
 80070ae:	2200      	movs	r2, #0
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	b01c      	add	sp, #112	; 0x70
 80070b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b8:	b003      	add	sp, #12
 80070ba:	4770      	bx	lr
 80070bc:	20000064 	.word	0x20000064
 80070c0:	ffff0208 	.word	0xffff0208

080070c4 <__assert_func>:
 80070c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070c6:	4614      	mov	r4, r2
 80070c8:	461a      	mov	r2, r3
 80070ca:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <__assert_func+0x2c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4605      	mov	r5, r0
 80070d0:	68d8      	ldr	r0, [r3, #12]
 80070d2:	b14c      	cbz	r4, 80070e8 <__assert_func+0x24>
 80070d4:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <__assert_func+0x30>)
 80070d6:	9100      	str	r1, [sp, #0]
 80070d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070dc:	4906      	ldr	r1, [pc, #24]	; (80070f8 <__assert_func+0x34>)
 80070de:	462b      	mov	r3, r5
 80070e0:	f000 f80e 	bl	8007100 <fiprintf>
 80070e4:	f000 fe20 	bl	8007d28 <abort>
 80070e8:	4b04      	ldr	r3, [pc, #16]	; (80070fc <__assert_func+0x38>)
 80070ea:	461c      	mov	r4, r3
 80070ec:	e7f3      	b.n	80070d6 <__assert_func+0x12>
 80070ee:	bf00      	nop
 80070f0:	20000064 	.word	0x20000064
 80070f4:	08008c02 	.word	0x08008c02
 80070f8:	08008c0f 	.word	0x08008c0f
 80070fc:	08008c3d 	.word	0x08008c3d

08007100 <fiprintf>:
 8007100:	b40e      	push	{r1, r2, r3}
 8007102:	b503      	push	{r0, r1, lr}
 8007104:	4601      	mov	r1, r0
 8007106:	ab03      	add	r3, sp, #12
 8007108:	4805      	ldr	r0, [pc, #20]	; (8007120 <fiprintf+0x20>)
 800710a:	f853 2b04 	ldr.w	r2, [r3], #4
 800710e:	6800      	ldr	r0, [r0, #0]
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	f000 fa75 	bl	8007600 <_vfiprintf_r>
 8007116:	b002      	add	sp, #8
 8007118:	f85d eb04 	ldr.w	lr, [sp], #4
 800711c:	b003      	add	sp, #12
 800711e:	4770      	bx	lr
 8007120:	20000064 	.word	0x20000064

08007124 <malloc>:
 8007124:	4b02      	ldr	r3, [pc, #8]	; (8007130 <malloc+0xc>)
 8007126:	4601      	mov	r1, r0
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f000 b86f 	b.w	800720c <_malloc_r>
 800712e:	bf00      	nop
 8007130:	20000064 	.word	0x20000064

08007134 <_free_r>:
 8007134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007136:	2900      	cmp	r1, #0
 8007138:	d044      	beq.n	80071c4 <_free_r+0x90>
 800713a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800713e:	9001      	str	r0, [sp, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f1a1 0404 	sub.w	r4, r1, #4
 8007146:	bfb8      	it	lt
 8007148:	18e4      	addlt	r4, r4, r3
 800714a:	f001 f82f 	bl	80081ac <__malloc_lock>
 800714e:	4a1e      	ldr	r2, [pc, #120]	; (80071c8 <_free_r+0x94>)
 8007150:	9801      	ldr	r0, [sp, #4]
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	b933      	cbnz	r3, 8007164 <_free_r+0x30>
 8007156:	6063      	str	r3, [r4, #4]
 8007158:	6014      	str	r4, [r2, #0]
 800715a:	b003      	add	sp, #12
 800715c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007160:	f001 b82a 	b.w	80081b8 <__malloc_unlock>
 8007164:	42a3      	cmp	r3, r4
 8007166:	d908      	bls.n	800717a <_free_r+0x46>
 8007168:	6825      	ldr	r5, [r4, #0]
 800716a:	1961      	adds	r1, r4, r5
 800716c:	428b      	cmp	r3, r1
 800716e:	bf01      	itttt	eq
 8007170:	6819      	ldreq	r1, [r3, #0]
 8007172:	685b      	ldreq	r3, [r3, #4]
 8007174:	1949      	addeq	r1, r1, r5
 8007176:	6021      	streq	r1, [r4, #0]
 8007178:	e7ed      	b.n	8007156 <_free_r+0x22>
 800717a:	461a      	mov	r2, r3
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	b10b      	cbz	r3, 8007184 <_free_r+0x50>
 8007180:	42a3      	cmp	r3, r4
 8007182:	d9fa      	bls.n	800717a <_free_r+0x46>
 8007184:	6811      	ldr	r1, [r2, #0]
 8007186:	1855      	adds	r5, r2, r1
 8007188:	42a5      	cmp	r5, r4
 800718a:	d10b      	bne.n	80071a4 <_free_r+0x70>
 800718c:	6824      	ldr	r4, [r4, #0]
 800718e:	4421      	add	r1, r4
 8007190:	1854      	adds	r4, r2, r1
 8007192:	42a3      	cmp	r3, r4
 8007194:	6011      	str	r1, [r2, #0]
 8007196:	d1e0      	bne.n	800715a <_free_r+0x26>
 8007198:	681c      	ldr	r4, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	6053      	str	r3, [r2, #4]
 800719e:	4421      	add	r1, r4
 80071a0:	6011      	str	r1, [r2, #0]
 80071a2:	e7da      	b.n	800715a <_free_r+0x26>
 80071a4:	d902      	bls.n	80071ac <_free_r+0x78>
 80071a6:	230c      	movs	r3, #12
 80071a8:	6003      	str	r3, [r0, #0]
 80071aa:	e7d6      	b.n	800715a <_free_r+0x26>
 80071ac:	6825      	ldr	r5, [r4, #0]
 80071ae:	1961      	adds	r1, r4, r5
 80071b0:	428b      	cmp	r3, r1
 80071b2:	bf04      	itt	eq
 80071b4:	6819      	ldreq	r1, [r3, #0]
 80071b6:	685b      	ldreq	r3, [r3, #4]
 80071b8:	6063      	str	r3, [r4, #4]
 80071ba:	bf04      	itt	eq
 80071bc:	1949      	addeq	r1, r1, r5
 80071be:	6021      	streq	r1, [r4, #0]
 80071c0:	6054      	str	r4, [r2, #4]
 80071c2:	e7ca      	b.n	800715a <_free_r+0x26>
 80071c4:	b003      	add	sp, #12
 80071c6:	bd30      	pop	{r4, r5, pc}
 80071c8:	20000920 	.word	0x20000920

080071cc <sbrk_aligned>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	4e0e      	ldr	r6, [pc, #56]	; (8007208 <sbrk_aligned+0x3c>)
 80071d0:	460c      	mov	r4, r1
 80071d2:	6831      	ldr	r1, [r6, #0]
 80071d4:	4605      	mov	r5, r0
 80071d6:	b911      	cbnz	r1, 80071de <sbrk_aligned+0x12>
 80071d8:	f000 fcd6 	bl	8007b88 <_sbrk_r>
 80071dc:	6030      	str	r0, [r6, #0]
 80071de:	4621      	mov	r1, r4
 80071e0:	4628      	mov	r0, r5
 80071e2:	f000 fcd1 	bl	8007b88 <_sbrk_r>
 80071e6:	1c43      	adds	r3, r0, #1
 80071e8:	d00a      	beq.n	8007200 <sbrk_aligned+0x34>
 80071ea:	1cc4      	adds	r4, r0, #3
 80071ec:	f024 0403 	bic.w	r4, r4, #3
 80071f0:	42a0      	cmp	r0, r4
 80071f2:	d007      	beq.n	8007204 <sbrk_aligned+0x38>
 80071f4:	1a21      	subs	r1, r4, r0
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 fcc6 	bl	8007b88 <_sbrk_r>
 80071fc:	3001      	adds	r0, #1
 80071fe:	d101      	bne.n	8007204 <sbrk_aligned+0x38>
 8007200:	f04f 34ff 	mov.w	r4, #4294967295
 8007204:	4620      	mov	r0, r4
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	20000924 	.word	0x20000924

0800720c <_malloc_r>:
 800720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007210:	1ccd      	adds	r5, r1, #3
 8007212:	f025 0503 	bic.w	r5, r5, #3
 8007216:	3508      	adds	r5, #8
 8007218:	2d0c      	cmp	r5, #12
 800721a:	bf38      	it	cc
 800721c:	250c      	movcc	r5, #12
 800721e:	2d00      	cmp	r5, #0
 8007220:	4607      	mov	r7, r0
 8007222:	db01      	blt.n	8007228 <_malloc_r+0x1c>
 8007224:	42a9      	cmp	r1, r5
 8007226:	d905      	bls.n	8007234 <_malloc_r+0x28>
 8007228:	230c      	movs	r3, #12
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	2600      	movs	r6, #0
 800722e:	4630      	mov	r0, r6
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007234:	4e2e      	ldr	r6, [pc, #184]	; (80072f0 <_malloc_r+0xe4>)
 8007236:	f000 ffb9 	bl	80081ac <__malloc_lock>
 800723a:	6833      	ldr	r3, [r6, #0]
 800723c:	461c      	mov	r4, r3
 800723e:	bb34      	cbnz	r4, 800728e <_malloc_r+0x82>
 8007240:	4629      	mov	r1, r5
 8007242:	4638      	mov	r0, r7
 8007244:	f7ff ffc2 	bl	80071cc <sbrk_aligned>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	4604      	mov	r4, r0
 800724c:	d14d      	bne.n	80072ea <_malloc_r+0xde>
 800724e:	6834      	ldr	r4, [r6, #0]
 8007250:	4626      	mov	r6, r4
 8007252:	2e00      	cmp	r6, #0
 8007254:	d140      	bne.n	80072d8 <_malloc_r+0xcc>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	4631      	mov	r1, r6
 800725a:	4638      	mov	r0, r7
 800725c:	eb04 0803 	add.w	r8, r4, r3
 8007260:	f000 fc92 	bl	8007b88 <_sbrk_r>
 8007264:	4580      	cmp	r8, r0
 8007266:	d13a      	bne.n	80072de <_malloc_r+0xd2>
 8007268:	6821      	ldr	r1, [r4, #0]
 800726a:	3503      	adds	r5, #3
 800726c:	1a6d      	subs	r5, r5, r1
 800726e:	f025 0503 	bic.w	r5, r5, #3
 8007272:	3508      	adds	r5, #8
 8007274:	2d0c      	cmp	r5, #12
 8007276:	bf38      	it	cc
 8007278:	250c      	movcc	r5, #12
 800727a:	4629      	mov	r1, r5
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff ffa5 	bl	80071cc <sbrk_aligned>
 8007282:	3001      	adds	r0, #1
 8007284:	d02b      	beq.n	80072de <_malloc_r+0xd2>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	442b      	add	r3, r5
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	e00e      	b.n	80072ac <_malloc_r+0xa0>
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	1b52      	subs	r2, r2, r5
 8007292:	d41e      	bmi.n	80072d2 <_malloc_r+0xc6>
 8007294:	2a0b      	cmp	r2, #11
 8007296:	d916      	bls.n	80072c6 <_malloc_r+0xba>
 8007298:	1961      	adds	r1, r4, r5
 800729a:	42a3      	cmp	r3, r4
 800729c:	6025      	str	r5, [r4, #0]
 800729e:	bf18      	it	ne
 80072a0:	6059      	strne	r1, [r3, #4]
 80072a2:	6863      	ldr	r3, [r4, #4]
 80072a4:	bf08      	it	eq
 80072a6:	6031      	streq	r1, [r6, #0]
 80072a8:	5162      	str	r2, [r4, r5]
 80072aa:	604b      	str	r3, [r1, #4]
 80072ac:	4638      	mov	r0, r7
 80072ae:	f104 060b 	add.w	r6, r4, #11
 80072b2:	f000 ff81 	bl	80081b8 <__malloc_unlock>
 80072b6:	f026 0607 	bic.w	r6, r6, #7
 80072ba:	1d23      	adds	r3, r4, #4
 80072bc:	1af2      	subs	r2, r6, r3
 80072be:	d0b6      	beq.n	800722e <_malloc_r+0x22>
 80072c0:	1b9b      	subs	r3, r3, r6
 80072c2:	50a3      	str	r3, [r4, r2]
 80072c4:	e7b3      	b.n	800722e <_malloc_r+0x22>
 80072c6:	6862      	ldr	r2, [r4, #4]
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	bf0c      	ite	eq
 80072cc:	6032      	streq	r2, [r6, #0]
 80072ce:	605a      	strne	r2, [r3, #4]
 80072d0:	e7ec      	b.n	80072ac <_malloc_r+0xa0>
 80072d2:	4623      	mov	r3, r4
 80072d4:	6864      	ldr	r4, [r4, #4]
 80072d6:	e7b2      	b.n	800723e <_malloc_r+0x32>
 80072d8:	4634      	mov	r4, r6
 80072da:	6876      	ldr	r6, [r6, #4]
 80072dc:	e7b9      	b.n	8007252 <_malloc_r+0x46>
 80072de:	230c      	movs	r3, #12
 80072e0:	603b      	str	r3, [r7, #0]
 80072e2:	4638      	mov	r0, r7
 80072e4:	f000 ff68 	bl	80081b8 <__malloc_unlock>
 80072e8:	e7a1      	b.n	800722e <_malloc_r+0x22>
 80072ea:	6025      	str	r5, [r4, #0]
 80072ec:	e7de      	b.n	80072ac <_malloc_r+0xa0>
 80072ee:	bf00      	nop
 80072f0:	20000920 	.word	0x20000920

080072f4 <__ssputs_r>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	688e      	ldr	r6, [r1, #8]
 80072fa:	429e      	cmp	r6, r3
 80072fc:	4682      	mov	sl, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	4690      	mov	r8, r2
 8007302:	461f      	mov	r7, r3
 8007304:	d838      	bhi.n	8007378 <__ssputs_r+0x84>
 8007306:	898a      	ldrh	r2, [r1, #12]
 8007308:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800730c:	d032      	beq.n	8007374 <__ssputs_r+0x80>
 800730e:	6825      	ldr	r5, [r4, #0]
 8007310:	6909      	ldr	r1, [r1, #16]
 8007312:	eba5 0901 	sub.w	r9, r5, r1
 8007316:	6965      	ldr	r5, [r4, #20]
 8007318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800731c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007320:	3301      	adds	r3, #1
 8007322:	444b      	add	r3, r9
 8007324:	106d      	asrs	r5, r5, #1
 8007326:	429d      	cmp	r5, r3
 8007328:	bf38      	it	cc
 800732a:	461d      	movcc	r5, r3
 800732c:	0553      	lsls	r3, r2, #21
 800732e:	d531      	bpl.n	8007394 <__ssputs_r+0xa0>
 8007330:	4629      	mov	r1, r5
 8007332:	f7ff ff6b 	bl	800720c <_malloc_r>
 8007336:	4606      	mov	r6, r0
 8007338:	b950      	cbnz	r0, 8007350 <__ssputs_r+0x5c>
 800733a:	230c      	movs	r3, #12
 800733c:	f8ca 3000 	str.w	r3, [sl]
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007350:	6921      	ldr	r1, [r4, #16]
 8007352:	464a      	mov	r2, r9
 8007354:	f7ff fe14 	bl	8006f80 <memcpy>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800735e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	6126      	str	r6, [r4, #16]
 8007366:	6165      	str	r5, [r4, #20]
 8007368:	444e      	add	r6, r9
 800736a:	eba5 0509 	sub.w	r5, r5, r9
 800736e:	6026      	str	r6, [r4, #0]
 8007370:	60a5      	str	r5, [r4, #8]
 8007372:	463e      	mov	r6, r7
 8007374:	42be      	cmp	r6, r7
 8007376:	d900      	bls.n	800737a <__ssputs_r+0x86>
 8007378:	463e      	mov	r6, r7
 800737a:	6820      	ldr	r0, [r4, #0]
 800737c:	4632      	mov	r2, r6
 800737e:	4641      	mov	r1, r8
 8007380:	f000 fefa 	bl	8008178 <memmove>
 8007384:	68a3      	ldr	r3, [r4, #8]
 8007386:	1b9b      	subs	r3, r3, r6
 8007388:	60a3      	str	r3, [r4, #8]
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	4433      	add	r3, r6
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	2000      	movs	r0, #0
 8007392:	e7db      	b.n	800734c <__ssputs_r+0x58>
 8007394:	462a      	mov	r2, r5
 8007396:	f000 ff15 	bl	80081c4 <_realloc_r>
 800739a:	4606      	mov	r6, r0
 800739c:	2800      	cmp	r0, #0
 800739e:	d1e1      	bne.n	8007364 <__ssputs_r+0x70>
 80073a0:	6921      	ldr	r1, [r4, #16]
 80073a2:	4650      	mov	r0, sl
 80073a4:	f7ff fec6 	bl	8007134 <_free_r>
 80073a8:	e7c7      	b.n	800733a <__ssputs_r+0x46>
	...

080073ac <_svfiprintf_r>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4698      	mov	r8, r3
 80073b2:	898b      	ldrh	r3, [r1, #12]
 80073b4:	061b      	lsls	r3, r3, #24
 80073b6:	b09d      	sub	sp, #116	; 0x74
 80073b8:	4607      	mov	r7, r0
 80073ba:	460d      	mov	r5, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	d50e      	bpl.n	80073de <_svfiprintf_r+0x32>
 80073c0:	690b      	ldr	r3, [r1, #16]
 80073c2:	b963      	cbnz	r3, 80073de <_svfiprintf_r+0x32>
 80073c4:	2140      	movs	r1, #64	; 0x40
 80073c6:	f7ff ff21 	bl	800720c <_malloc_r>
 80073ca:	6028      	str	r0, [r5, #0]
 80073cc:	6128      	str	r0, [r5, #16]
 80073ce:	b920      	cbnz	r0, 80073da <_svfiprintf_r+0x2e>
 80073d0:	230c      	movs	r3, #12
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	e0d1      	b.n	800757e <_svfiprintf_r+0x1d2>
 80073da:	2340      	movs	r3, #64	; 0x40
 80073dc:	616b      	str	r3, [r5, #20]
 80073de:	2300      	movs	r3, #0
 80073e0:	9309      	str	r3, [sp, #36]	; 0x24
 80073e2:	2320      	movs	r3, #32
 80073e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80073ec:	2330      	movs	r3, #48	; 0x30
 80073ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007598 <_svfiprintf_r+0x1ec>
 80073f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073f6:	f04f 0901 	mov.w	r9, #1
 80073fa:	4623      	mov	r3, r4
 80073fc:	469a      	mov	sl, r3
 80073fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007402:	b10a      	cbz	r2, 8007408 <_svfiprintf_r+0x5c>
 8007404:	2a25      	cmp	r2, #37	; 0x25
 8007406:	d1f9      	bne.n	80073fc <_svfiprintf_r+0x50>
 8007408:	ebba 0b04 	subs.w	fp, sl, r4
 800740c:	d00b      	beq.n	8007426 <_svfiprintf_r+0x7a>
 800740e:	465b      	mov	r3, fp
 8007410:	4622      	mov	r2, r4
 8007412:	4629      	mov	r1, r5
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff ff6d 	bl	80072f4 <__ssputs_r>
 800741a:	3001      	adds	r0, #1
 800741c:	f000 80aa 	beq.w	8007574 <_svfiprintf_r+0x1c8>
 8007420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007422:	445a      	add	r2, fp
 8007424:	9209      	str	r2, [sp, #36]	; 0x24
 8007426:	f89a 3000 	ldrb.w	r3, [sl]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 80a2 	beq.w	8007574 <_svfiprintf_r+0x1c8>
 8007430:	2300      	movs	r3, #0
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800743a:	f10a 0a01 	add.w	sl, sl, #1
 800743e:	9304      	str	r3, [sp, #16]
 8007440:	9307      	str	r3, [sp, #28]
 8007442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007446:	931a      	str	r3, [sp, #104]	; 0x68
 8007448:	4654      	mov	r4, sl
 800744a:	2205      	movs	r2, #5
 800744c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007450:	4851      	ldr	r0, [pc, #324]	; (8007598 <_svfiprintf_r+0x1ec>)
 8007452:	f7f8 fec5 	bl	80001e0 <memchr>
 8007456:	9a04      	ldr	r2, [sp, #16]
 8007458:	b9d8      	cbnz	r0, 8007492 <_svfiprintf_r+0xe6>
 800745a:	06d0      	lsls	r0, r2, #27
 800745c:	bf44      	itt	mi
 800745e:	2320      	movmi	r3, #32
 8007460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007464:	0711      	lsls	r1, r2, #28
 8007466:	bf44      	itt	mi
 8007468:	232b      	movmi	r3, #43	; 0x2b
 800746a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800746e:	f89a 3000 	ldrb.w	r3, [sl]
 8007472:	2b2a      	cmp	r3, #42	; 0x2a
 8007474:	d015      	beq.n	80074a2 <_svfiprintf_r+0xf6>
 8007476:	9a07      	ldr	r2, [sp, #28]
 8007478:	4654      	mov	r4, sl
 800747a:	2000      	movs	r0, #0
 800747c:	f04f 0c0a 	mov.w	ip, #10
 8007480:	4621      	mov	r1, r4
 8007482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007486:	3b30      	subs	r3, #48	; 0x30
 8007488:	2b09      	cmp	r3, #9
 800748a:	d94e      	bls.n	800752a <_svfiprintf_r+0x17e>
 800748c:	b1b0      	cbz	r0, 80074bc <_svfiprintf_r+0x110>
 800748e:	9207      	str	r2, [sp, #28]
 8007490:	e014      	b.n	80074bc <_svfiprintf_r+0x110>
 8007492:	eba0 0308 	sub.w	r3, r0, r8
 8007496:	fa09 f303 	lsl.w	r3, r9, r3
 800749a:	4313      	orrs	r3, r2
 800749c:	9304      	str	r3, [sp, #16]
 800749e:	46a2      	mov	sl, r4
 80074a0:	e7d2      	b.n	8007448 <_svfiprintf_r+0x9c>
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	1d19      	adds	r1, r3, #4
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	9103      	str	r1, [sp, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bfbb      	ittet	lt
 80074ae:	425b      	neglt	r3, r3
 80074b0:	f042 0202 	orrlt.w	r2, r2, #2
 80074b4:	9307      	strge	r3, [sp, #28]
 80074b6:	9307      	strlt	r3, [sp, #28]
 80074b8:	bfb8      	it	lt
 80074ba:	9204      	strlt	r2, [sp, #16]
 80074bc:	7823      	ldrb	r3, [r4, #0]
 80074be:	2b2e      	cmp	r3, #46	; 0x2e
 80074c0:	d10c      	bne.n	80074dc <_svfiprintf_r+0x130>
 80074c2:	7863      	ldrb	r3, [r4, #1]
 80074c4:	2b2a      	cmp	r3, #42	; 0x2a
 80074c6:	d135      	bne.n	8007534 <_svfiprintf_r+0x188>
 80074c8:	9b03      	ldr	r3, [sp, #12]
 80074ca:	1d1a      	adds	r2, r3, #4
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	9203      	str	r2, [sp, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	bfb8      	it	lt
 80074d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80074d8:	3402      	adds	r4, #2
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075a8 <_svfiprintf_r+0x1fc>
 80074e0:	7821      	ldrb	r1, [r4, #0]
 80074e2:	2203      	movs	r2, #3
 80074e4:	4650      	mov	r0, sl
 80074e6:	f7f8 fe7b 	bl	80001e0 <memchr>
 80074ea:	b140      	cbz	r0, 80074fe <_svfiprintf_r+0x152>
 80074ec:	2340      	movs	r3, #64	; 0x40
 80074ee:	eba0 000a 	sub.w	r0, r0, sl
 80074f2:	fa03 f000 	lsl.w	r0, r3, r0
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	4303      	orrs	r3, r0
 80074fa:	3401      	adds	r4, #1
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007502:	4826      	ldr	r0, [pc, #152]	; (800759c <_svfiprintf_r+0x1f0>)
 8007504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007508:	2206      	movs	r2, #6
 800750a:	f7f8 fe69 	bl	80001e0 <memchr>
 800750e:	2800      	cmp	r0, #0
 8007510:	d038      	beq.n	8007584 <_svfiprintf_r+0x1d8>
 8007512:	4b23      	ldr	r3, [pc, #140]	; (80075a0 <_svfiprintf_r+0x1f4>)
 8007514:	bb1b      	cbnz	r3, 800755e <_svfiprintf_r+0x1b2>
 8007516:	9b03      	ldr	r3, [sp, #12]
 8007518:	3307      	adds	r3, #7
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	3308      	adds	r3, #8
 8007520:	9303      	str	r3, [sp, #12]
 8007522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007524:	4433      	add	r3, r6
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	e767      	b.n	80073fa <_svfiprintf_r+0x4e>
 800752a:	fb0c 3202 	mla	r2, ip, r2, r3
 800752e:	460c      	mov	r4, r1
 8007530:	2001      	movs	r0, #1
 8007532:	e7a5      	b.n	8007480 <_svfiprintf_r+0xd4>
 8007534:	2300      	movs	r3, #0
 8007536:	3401      	adds	r4, #1
 8007538:	9305      	str	r3, [sp, #20]
 800753a:	4619      	mov	r1, r3
 800753c:	f04f 0c0a 	mov.w	ip, #10
 8007540:	4620      	mov	r0, r4
 8007542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007546:	3a30      	subs	r2, #48	; 0x30
 8007548:	2a09      	cmp	r2, #9
 800754a:	d903      	bls.n	8007554 <_svfiprintf_r+0x1a8>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0c5      	beq.n	80074dc <_svfiprintf_r+0x130>
 8007550:	9105      	str	r1, [sp, #20]
 8007552:	e7c3      	b.n	80074dc <_svfiprintf_r+0x130>
 8007554:	fb0c 2101 	mla	r1, ip, r1, r2
 8007558:	4604      	mov	r4, r0
 800755a:	2301      	movs	r3, #1
 800755c:	e7f0      	b.n	8007540 <_svfiprintf_r+0x194>
 800755e:	ab03      	add	r3, sp, #12
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	462a      	mov	r2, r5
 8007564:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <_svfiprintf_r+0x1f8>)
 8007566:	a904      	add	r1, sp, #16
 8007568:	4638      	mov	r0, r7
 800756a:	f3af 8000 	nop.w
 800756e:	1c42      	adds	r2, r0, #1
 8007570:	4606      	mov	r6, r0
 8007572:	d1d6      	bne.n	8007522 <_svfiprintf_r+0x176>
 8007574:	89ab      	ldrh	r3, [r5, #12]
 8007576:	065b      	lsls	r3, r3, #25
 8007578:	f53f af2c 	bmi.w	80073d4 <_svfiprintf_r+0x28>
 800757c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800757e:	b01d      	add	sp, #116	; 0x74
 8007580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007584:	ab03      	add	r3, sp, #12
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	462a      	mov	r2, r5
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <_svfiprintf_r+0x1f8>)
 800758c:	a904      	add	r1, sp, #16
 800758e:	4638      	mov	r0, r7
 8007590:	f000 f9d4 	bl	800793c <_printf_i>
 8007594:	e7eb      	b.n	800756e <_svfiprintf_r+0x1c2>
 8007596:	bf00      	nop
 8007598:	08008c3e 	.word	0x08008c3e
 800759c:	08008c48 	.word	0x08008c48
 80075a0:	00000000 	.word	0x00000000
 80075a4:	080072f5 	.word	0x080072f5
 80075a8:	08008c44 	.word	0x08008c44

080075ac <__sfputc_r>:
 80075ac:	6893      	ldr	r3, [r2, #8]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	b410      	push	{r4}
 80075b4:	6093      	str	r3, [r2, #8]
 80075b6:	da08      	bge.n	80075ca <__sfputc_r+0x1e>
 80075b8:	6994      	ldr	r4, [r2, #24]
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	db01      	blt.n	80075c2 <__sfputc_r+0x16>
 80075be:	290a      	cmp	r1, #10
 80075c0:	d103      	bne.n	80075ca <__sfputc_r+0x1e>
 80075c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c6:	f000 baef 	b.w	8007ba8 <__swbuf_r>
 80075ca:	6813      	ldr	r3, [r2, #0]
 80075cc:	1c58      	adds	r0, r3, #1
 80075ce:	6010      	str	r0, [r2, #0]
 80075d0:	7019      	strb	r1, [r3, #0]
 80075d2:	4608      	mov	r0, r1
 80075d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d8:	4770      	bx	lr

080075da <__sfputs_r>:
 80075da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075dc:	4606      	mov	r6, r0
 80075de:	460f      	mov	r7, r1
 80075e0:	4614      	mov	r4, r2
 80075e2:	18d5      	adds	r5, r2, r3
 80075e4:	42ac      	cmp	r4, r5
 80075e6:	d101      	bne.n	80075ec <__sfputs_r+0x12>
 80075e8:	2000      	movs	r0, #0
 80075ea:	e007      	b.n	80075fc <__sfputs_r+0x22>
 80075ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f0:	463a      	mov	r2, r7
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7ff ffda 	bl	80075ac <__sfputc_r>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d1f3      	bne.n	80075e4 <__sfputs_r+0xa>
 80075fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007600 <_vfiprintf_r>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	460d      	mov	r5, r1
 8007606:	b09d      	sub	sp, #116	; 0x74
 8007608:	4614      	mov	r4, r2
 800760a:	4698      	mov	r8, r3
 800760c:	4606      	mov	r6, r0
 800760e:	b118      	cbz	r0, 8007618 <_vfiprintf_r+0x18>
 8007610:	6983      	ldr	r3, [r0, #24]
 8007612:	b90b      	cbnz	r3, 8007618 <_vfiprintf_r+0x18>
 8007614:	f000 fcaa 	bl	8007f6c <__sinit>
 8007618:	4b89      	ldr	r3, [pc, #548]	; (8007840 <_vfiprintf_r+0x240>)
 800761a:	429d      	cmp	r5, r3
 800761c:	d11b      	bne.n	8007656 <_vfiprintf_r+0x56>
 800761e:	6875      	ldr	r5, [r6, #4]
 8007620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007622:	07d9      	lsls	r1, r3, #31
 8007624:	d405      	bmi.n	8007632 <_vfiprintf_r+0x32>
 8007626:	89ab      	ldrh	r3, [r5, #12]
 8007628:	059a      	lsls	r2, r3, #22
 800762a:	d402      	bmi.n	8007632 <_vfiprintf_r+0x32>
 800762c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800762e:	f000 fd3b 	bl	80080a8 <__retarget_lock_acquire_recursive>
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	071b      	lsls	r3, r3, #28
 8007636:	d501      	bpl.n	800763c <_vfiprintf_r+0x3c>
 8007638:	692b      	ldr	r3, [r5, #16]
 800763a:	b9eb      	cbnz	r3, 8007678 <_vfiprintf_r+0x78>
 800763c:	4629      	mov	r1, r5
 800763e:	4630      	mov	r0, r6
 8007640:	f000 fb04 	bl	8007c4c <__swsetup_r>
 8007644:	b1c0      	cbz	r0, 8007678 <_vfiprintf_r+0x78>
 8007646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007648:	07dc      	lsls	r4, r3, #31
 800764a:	d50e      	bpl.n	800766a <_vfiprintf_r+0x6a>
 800764c:	f04f 30ff 	mov.w	r0, #4294967295
 8007650:	b01d      	add	sp, #116	; 0x74
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	4b7b      	ldr	r3, [pc, #492]	; (8007844 <_vfiprintf_r+0x244>)
 8007658:	429d      	cmp	r5, r3
 800765a:	d101      	bne.n	8007660 <_vfiprintf_r+0x60>
 800765c:	68b5      	ldr	r5, [r6, #8]
 800765e:	e7df      	b.n	8007620 <_vfiprintf_r+0x20>
 8007660:	4b79      	ldr	r3, [pc, #484]	; (8007848 <_vfiprintf_r+0x248>)
 8007662:	429d      	cmp	r5, r3
 8007664:	bf08      	it	eq
 8007666:	68f5      	ldreq	r5, [r6, #12]
 8007668:	e7da      	b.n	8007620 <_vfiprintf_r+0x20>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	0598      	lsls	r0, r3, #22
 800766e:	d4ed      	bmi.n	800764c <_vfiprintf_r+0x4c>
 8007670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007672:	f000 fd1a 	bl	80080aa <__retarget_lock_release_recursive>
 8007676:	e7e9      	b.n	800764c <_vfiprintf_r+0x4c>
 8007678:	2300      	movs	r3, #0
 800767a:	9309      	str	r3, [sp, #36]	; 0x24
 800767c:	2320      	movs	r3, #32
 800767e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007682:	f8cd 800c 	str.w	r8, [sp, #12]
 8007686:	2330      	movs	r3, #48	; 0x30
 8007688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800784c <_vfiprintf_r+0x24c>
 800768c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007690:	f04f 0901 	mov.w	r9, #1
 8007694:	4623      	mov	r3, r4
 8007696:	469a      	mov	sl, r3
 8007698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800769c:	b10a      	cbz	r2, 80076a2 <_vfiprintf_r+0xa2>
 800769e:	2a25      	cmp	r2, #37	; 0x25
 80076a0:	d1f9      	bne.n	8007696 <_vfiprintf_r+0x96>
 80076a2:	ebba 0b04 	subs.w	fp, sl, r4
 80076a6:	d00b      	beq.n	80076c0 <_vfiprintf_r+0xc0>
 80076a8:	465b      	mov	r3, fp
 80076aa:	4622      	mov	r2, r4
 80076ac:	4629      	mov	r1, r5
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff ff93 	bl	80075da <__sfputs_r>
 80076b4:	3001      	adds	r0, #1
 80076b6:	f000 80aa 	beq.w	800780e <_vfiprintf_r+0x20e>
 80076ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076bc:	445a      	add	r2, fp
 80076be:	9209      	str	r2, [sp, #36]	; 0x24
 80076c0:	f89a 3000 	ldrb.w	r3, [sl]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 80a2 	beq.w	800780e <_vfiprintf_r+0x20e>
 80076ca:	2300      	movs	r3, #0
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295
 80076d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076d4:	f10a 0a01 	add.w	sl, sl, #1
 80076d8:	9304      	str	r3, [sp, #16]
 80076da:	9307      	str	r3, [sp, #28]
 80076dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076e0:	931a      	str	r3, [sp, #104]	; 0x68
 80076e2:	4654      	mov	r4, sl
 80076e4:	2205      	movs	r2, #5
 80076e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ea:	4858      	ldr	r0, [pc, #352]	; (800784c <_vfiprintf_r+0x24c>)
 80076ec:	f7f8 fd78 	bl	80001e0 <memchr>
 80076f0:	9a04      	ldr	r2, [sp, #16]
 80076f2:	b9d8      	cbnz	r0, 800772c <_vfiprintf_r+0x12c>
 80076f4:	06d1      	lsls	r1, r2, #27
 80076f6:	bf44      	itt	mi
 80076f8:	2320      	movmi	r3, #32
 80076fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076fe:	0713      	lsls	r3, r2, #28
 8007700:	bf44      	itt	mi
 8007702:	232b      	movmi	r3, #43	; 0x2b
 8007704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007708:	f89a 3000 	ldrb.w	r3, [sl]
 800770c:	2b2a      	cmp	r3, #42	; 0x2a
 800770e:	d015      	beq.n	800773c <_vfiprintf_r+0x13c>
 8007710:	9a07      	ldr	r2, [sp, #28]
 8007712:	4654      	mov	r4, sl
 8007714:	2000      	movs	r0, #0
 8007716:	f04f 0c0a 	mov.w	ip, #10
 800771a:	4621      	mov	r1, r4
 800771c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007720:	3b30      	subs	r3, #48	; 0x30
 8007722:	2b09      	cmp	r3, #9
 8007724:	d94e      	bls.n	80077c4 <_vfiprintf_r+0x1c4>
 8007726:	b1b0      	cbz	r0, 8007756 <_vfiprintf_r+0x156>
 8007728:	9207      	str	r2, [sp, #28]
 800772a:	e014      	b.n	8007756 <_vfiprintf_r+0x156>
 800772c:	eba0 0308 	sub.w	r3, r0, r8
 8007730:	fa09 f303 	lsl.w	r3, r9, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	9304      	str	r3, [sp, #16]
 8007738:	46a2      	mov	sl, r4
 800773a:	e7d2      	b.n	80076e2 <_vfiprintf_r+0xe2>
 800773c:	9b03      	ldr	r3, [sp, #12]
 800773e:	1d19      	adds	r1, r3, #4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	9103      	str	r1, [sp, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfbb      	ittet	lt
 8007748:	425b      	neglt	r3, r3
 800774a:	f042 0202 	orrlt.w	r2, r2, #2
 800774e:	9307      	strge	r3, [sp, #28]
 8007750:	9307      	strlt	r3, [sp, #28]
 8007752:	bfb8      	it	lt
 8007754:	9204      	strlt	r2, [sp, #16]
 8007756:	7823      	ldrb	r3, [r4, #0]
 8007758:	2b2e      	cmp	r3, #46	; 0x2e
 800775a:	d10c      	bne.n	8007776 <_vfiprintf_r+0x176>
 800775c:	7863      	ldrb	r3, [r4, #1]
 800775e:	2b2a      	cmp	r3, #42	; 0x2a
 8007760:	d135      	bne.n	80077ce <_vfiprintf_r+0x1ce>
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	1d1a      	adds	r2, r3, #4
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	9203      	str	r2, [sp, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	bfb8      	it	lt
 800776e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007772:	3402      	adds	r4, #2
 8007774:	9305      	str	r3, [sp, #20]
 8007776:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800785c <_vfiprintf_r+0x25c>
 800777a:	7821      	ldrb	r1, [r4, #0]
 800777c:	2203      	movs	r2, #3
 800777e:	4650      	mov	r0, sl
 8007780:	f7f8 fd2e 	bl	80001e0 <memchr>
 8007784:	b140      	cbz	r0, 8007798 <_vfiprintf_r+0x198>
 8007786:	2340      	movs	r3, #64	; 0x40
 8007788:	eba0 000a 	sub.w	r0, r0, sl
 800778c:	fa03 f000 	lsl.w	r0, r3, r0
 8007790:	9b04      	ldr	r3, [sp, #16]
 8007792:	4303      	orrs	r3, r0
 8007794:	3401      	adds	r4, #1
 8007796:	9304      	str	r3, [sp, #16]
 8007798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779c:	482c      	ldr	r0, [pc, #176]	; (8007850 <_vfiprintf_r+0x250>)
 800779e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077a2:	2206      	movs	r2, #6
 80077a4:	f7f8 fd1c 	bl	80001e0 <memchr>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d03f      	beq.n	800782c <_vfiprintf_r+0x22c>
 80077ac:	4b29      	ldr	r3, [pc, #164]	; (8007854 <_vfiprintf_r+0x254>)
 80077ae:	bb1b      	cbnz	r3, 80077f8 <_vfiprintf_r+0x1f8>
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	3307      	adds	r3, #7
 80077b4:	f023 0307 	bic.w	r3, r3, #7
 80077b8:	3308      	adds	r3, #8
 80077ba:	9303      	str	r3, [sp, #12]
 80077bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077be:	443b      	add	r3, r7
 80077c0:	9309      	str	r3, [sp, #36]	; 0x24
 80077c2:	e767      	b.n	8007694 <_vfiprintf_r+0x94>
 80077c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80077c8:	460c      	mov	r4, r1
 80077ca:	2001      	movs	r0, #1
 80077cc:	e7a5      	b.n	800771a <_vfiprintf_r+0x11a>
 80077ce:	2300      	movs	r3, #0
 80077d0:	3401      	adds	r4, #1
 80077d2:	9305      	str	r3, [sp, #20]
 80077d4:	4619      	mov	r1, r3
 80077d6:	f04f 0c0a 	mov.w	ip, #10
 80077da:	4620      	mov	r0, r4
 80077dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e0:	3a30      	subs	r2, #48	; 0x30
 80077e2:	2a09      	cmp	r2, #9
 80077e4:	d903      	bls.n	80077ee <_vfiprintf_r+0x1ee>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0c5      	beq.n	8007776 <_vfiprintf_r+0x176>
 80077ea:	9105      	str	r1, [sp, #20]
 80077ec:	e7c3      	b.n	8007776 <_vfiprintf_r+0x176>
 80077ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80077f2:	4604      	mov	r4, r0
 80077f4:	2301      	movs	r3, #1
 80077f6:	e7f0      	b.n	80077da <_vfiprintf_r+0x1da>
 80077f8:	ab03      	add	r3, sp, #12
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	462a      	mov	r2, r5
 80077fe:	4b16      	ldr	r3, [pc, #88]	; (8007858 <_vfiprintf_r+0x258>)
 8007800:	a904      	add	r1, sp, #16
 8007802:	4630      	mov	r0, r6
 8007804:	f3af 8000 	nop.w
 8007808:	4607      	mov	r7, r0
 800780a:	1c78      	adds	r0, r7, #1
 800780c:	d1d6      	bne.n	80077bc <_vfiprintf_r+0x1bc>
 800780e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007810:	07d9      	lsls	r1, r3, #31
 8007812:	d405      	bmi.n	8007820 <_vfiprintf_r+0x220>
 8007814:	89ab      	ldrh	r3, [r5, #12]
 8007816:	059a      	lsls	r2, r3, #22
 8007818:	d402      	bmi.n	8007820 <_vfiprintf_r+0x220>
 800781a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781c:	f000 fc45 	bl	80080aa <__retarget_lock_release_recursive>
 8007820:	89ab      	ldrh	r3, [r5, #12]
 8007822:	065b      	lsls	r3, r3, #25
 8007824:	f53f af12 	bmi.w	800764c <_vfiprintf_r+0x4c>
 8007828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800782a:	e711      	b.n	8007650 <_vfiprintf_r+0x50>
 800782c:	ab03      	add	r3, sp, #12
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	462a      	mov	r2, r5
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <_vfiprintf_r+0x258>)
 8007834:	a904      	add	r1, sp, #16
 8007836:	4630      	mov	r0, r6
 8007838:	f000 f880 	bl	800793c <_printf_i>
 800783c:	e7e4      	b.n	8007808 <_vfiprintf_r+0x208>
 800783e:	bf00      	nop
 8007840:	08008c94 	.word	0x08008c94
 8007844:	08008cb4 	.word	0x08008cb4
 8007848:	08008c74 	.word	0x08008c74
 800784c:	08008c3e 	.word	0x08008c3e
 8007850:	08008c48 	.word	0x08008c48
 8007854:	00000000 	.word	0x00000000
 8007858:	080075db 	.word	0x080075db
 800785c:	08008c44 	.word	0x08008c44

08007860 <_printf_common>:
 8007860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007864:	4616      	mov	r6, r2
 8007866:	4699      	mov	r9, r3
 8007868:	688a      	ldr	r2, [r1, #8]
 800786a:	690b      	ldr	r3, [r1, #16]
 800786c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007870:	4293      	cmp	r3, r2
 8007872:	bfb8      	it	lt
 8007874:	4613      	movlt	r3, r2
 8007876:	6033      	str	r3, [r6, #0]
 8007878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800787c:	4607      	mov	r7, r0
 800787e:	460c      	mov	r4, r1
 8007880:	b10a      	cbz	r2, 8007886 <_printf_common+0x26>
 8007882:	3301      	adds	r3, #1
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	0699      	lsls	r1, r3, #26
 800788a:	bf42      	ittt	mi
 800788c:	6833      	ldrmi	r3, [r6, #0]
 800788e:	3302      	addmi	r3, #2
 8007890:	6033      	strmi	r3, [r6, #0]
 8007892:	6825      	ldr	r5, [r4, #0]
 8007894:	f015 0506 	ands.w	r5, r5, #6
 8007898:	d106      	bne.n	80078a8 <_printf_common+0x48>
 800789a:	f104 0a19 	add.w	sl, r4, #25
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	6832      	ldr	r2, [r6, #0]
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dc26      	bgt.n	80078f6 <_printf_common+0x96>
 80078a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078ac:	1e13      	subs	r3, r2, #0
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	bf18      	it	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	0692      	lsls	r2, r2, #26
 80078b6:	d42b      	bmi.n	8007910 <_printf_common+0xb0>
 80078b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078bc:	4649      	mov	r1, r9
 80078be:	4638      	mov	r0, r7
 80078c0:	47c0      	blx	r8
 80078c2:	3001      	adds	r0, #1
 80078c4:	d01e      	beq.n	8007904 <_printf_common+0xa4>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	68e5      	ldr	r5, [r4, #12]
 80078ca:	6832      	ldr	r2, [r6, #0]
 80078cc:	f003 0306 	and.w	r3, r3, #6
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	bf08      	it	eq
 80078d4:	1aad      	subeq	r5, r5, r2
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	6922      	ldr	r2, [r4, #16]
 80078da:	bf0c      	ite	eq
 80078dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e0:	2500      	movne	r5, #0
 80078e2:	4293      	cmp	r3, r2
 80078e4:	bfc4      	itt	gt
 80078e6:	1a9b      	subgt	r3, r3, r2
 80078e8:	18ed      	addgt	r5, r5, r3
 80078ea:	2600      	movs	r6, #0
 80078ec:	341a      	adds	r4, #26
 80078ee:	42b5      	cmp	r5, r6
 80078f0:	d11a      	bne.n	8007928 <_printf_common+0xc8>
 80078f2:	2000      	movs	r0, #0
 80078f4:	e008      	b.n	8007908 <_printf_common+0xa8>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4652      	mov	r2, sl
 80078fa:	4649      	mov	r1, r9
 80078fc:	4638      	mov	r0, r7
 80078fe:	47c0      	blx	r8
 8007900:	3001      	adds	r0, #1
 8007902:	d103      	bne.n	800790c <_printf_common+0xac>
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790c:	3501      	adds	r5, #1
 800790e:	e7c6      	b.n	800789e <_printf_common+0x3e>
 8007910:	18e1      	adds	r1, r4, r3
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	2030      	movs	r0, #48	; 0x30
 8007916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800791a:	4422      	add	r2, r4
 800791c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007924:	3302      	adds	r3, #2
 8007926:	e7c7      	b.n	80078b8 <_printf_common+0x58>
 8007928:	2301      	movs	r3, #1
 800792a:	4622      	mov	r2, r4
 800792c:	4649      	mov	r1, r9
 800792e:	4638      	mov	r0, r7
 8007930:	47c0      	blx	r8
 8007932:	3001      	adds	r0, #1
 8007934:	d0e6      	beq.n	8007904 <_printf_common+0xa4>
 8007936:	3601      	adds	r6, #1
 8007938:	e7d9      	b.n	80078ee <_printf_common+0x8e>
	...

0800793c <_printf_i>:
 800793c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007940:	7e0f      	ldrb	r7, [r1, #24]
 8007942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007944:	2f78      	cmp	r7, #120	; 0x78
 8007946:	4691      	mov	r9, r2
 8007948:	4680      	mov	r8, r0
 800794a:	460c      	mov	r4, r1
 800794c:	469a      	mov	sl, r3
 800794e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007952:	d807      	bhi.n	8007964 <_printf_i+0x28>
 8007954:	2f62      	cmp	r7, #98	; 0x62
 8007956:	d80a      	bhi.n	800796e <_printf_i+0x32>
 8007958:	2f00      	cmp	r7, #0
 800795a:	f000 80d8 	beq.w	8007b0e <_printf_i+0x1d2>
 800795e:	2f58      	cmp	r7, #88	; 0x58
 8007960:	f000 80a3 	beq.w	8007aaa <_printf_i+0x16e>
 8007964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800796c:	e03a      	b.n	80079e4 <_printf_i+0xa8>
 800796e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007972:	2b15      	cmp	r3, #21
 8007974:	d8f6      	bhi.n	8007964 <_printf_i+0x28>
 8007976:	a101      	add	r1, pc, #4	; (adr r1, 800797c <_printf_i+0x40>)
 8007978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800797c:	080079d5 	.word	0x080079d5
 8007980:	080079e9 	.word	0x080079e9
 8007984:	08007965 	.word	0x08007965
 8007988:	08007965 	.word	0x08007965
 800798c:	08007965 	.word	0x08007965
 8007990:	08007965 	.word	0x08007965
 8007994:	080079e9 	.word	0x080079e9
 8007998:	08007965 	.word	0x08007965
 800799c:	08007965 	.word	0x08007965
 80079a0:	08007965 	.word	0x08007965
 80079a4:	08007965 	.word	0x08007965
 80079a8:	08007af5 	.word	0x08007af5
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007ad7 	.word	0x08007ad7
 80079b4:	08007965 	.word	0x08007965
 80079b8:	08007965 	.word	0x08007965
 80079bc:	08007b17 	.word	0x08007b17
 80079c0:	08007965 	.word	0x08007965
 80079c4:	08007a19 	.word	0x08007a19
 80079c8:	08007965 	.word	0x08007965
 80079cc:	08007965 	.word	0x08007965
 80079d0:	08007adf 	.word	0x08007adf
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	1d1a      	adds	r2, r3, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	602a      	str	r2, [r5, #0]
 80079dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0a3      	b.n	8007b30 <_printf_i+0x1f4>
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	6829      	ldr	r1, [r5, #0]
 80079ec:	0606      	lsls	r6, r0, #24
 80079ee:	f101 0304 	add.w	r3, r1, #4
 80079f2:	d50a      	bpl.n	8007a0a <_printf_i+0xce>
 80079f4:	680e      	ldr	r6, [r1, #0]
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	da03      	bge.n	8007a04 <_printf_i+0xc8>
 80079fc:	232d      	movs	r3, #45	; 0x2d
 80079fe:	4276      	negs	r6, r6
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a04:	485e      	ldr	r0, [pc, #376]	; (8007b80 <_printf_i+0x244>)
 8007a06:	230a      	movs	r3, #10
 8007a08:	e019      	b.n	8007a3e <_printf_i+0x102>
 8007a0a:	680e      	ldr	r6, [r1, #0]
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a12:	bf18      	it	ne
 8007a14:	b236      	sxthne	r6, r6
 8007a16:	e7ef      	b.n	80079f8 <_printf_i+0xbc>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	6820      	ldr	r0, [r4, #0]
 8007a1c:	1d19      	adds	r1, r3, #4
 8007a1e:	6029      	str	r1, [r5, #0]
 8007a20:	0601      	lsls	r1, r0, #24
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0xec>
 8007a24:	681e      	ldr	r6, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <_printf_i+0xf2>
 8007a28:	0646      	lsls	r6, r0, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0xe8>
 8007a2c:	881e      	ldrh	r6, [r3, #0]
 8007a2e:	4854      	ldr	r0, [pc, #336]	; (8007b80 <_printf_i+0x244>)
 8007a30:	2f6f      	cmp	r7, #111	; 0x6f
 8007a32:	bf0c      	ite	eq
 8007a34:	2308      	moveq	r3, #8
 8007a36:	230a      	movne	r3, #10
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a3e:	6865      	ldr	r5, [r4, #4]
 8007a40:	60a5      	str	r5, [r4, #8]
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	bfa2      	ittt	ge
 8007a46:	6821      	ldrge	r1, [r4, #0]
 8007a48:	f021 0104 	bicge.w	r1, r1, #4
 8007a4c:	6021      	strge	r1, [r4, #0]
 8007a4e:	b90e      	cbnz	r6, 8007a54 <_printf_i+0x118>
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	d04d      	beq.n	8007af0 <_printf_i+0x1b4>
 8007a54:	4615      	mov	r5, r2
 8007a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a5e:	5dc7      	ldrb	r7, [r0, r7]
 8007a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a64:	4637      	mov	r7, r6
 8007a66:	42bb      	cmp	r3, r7
 8007a68:	460e      	mov	r6, r1
 8007a6a:	d9f4      	bls.n	8007a56 <_printf_i+0x11a>
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d10b      	bne.n	8007a88 <_printf_i+0x14c>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	07de      	lsls	r6, r3, #31
 8007a74:	d508      	bpl.n	8007a88 <_printf_i+0x14c>
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	6861      	ldr	r1, [r4, #4]
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	bfde      	ittt	le
 8007a7e:	2330      	movle	r3, #48	; 0x30
 8007a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a88:	1b52      	subs	r2, r2, r5
 8007a8a:	6122      	str	r2, [r4, #16]
 8007a8c:	f8cd a000 	str.w	sl, [sp]
 8007a90:	464b      	mov	r3, r9
 8007a92:	aa03      	add	r2, sp, #12
 8007a94:	4621      	mov	r1, r4
 8007a96:	4640      	mov	r0, r8
 8007a98:	f7ff fee2 	bl	8007860 <_printf_common>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d14c      	bne.n	8007b3a <_printf_i+0x1fe>
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	b004      	add	sp, #16
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	4835      	ldr	r0, [pc, #212]	; (8007b80 <_printf_i+0x244>)
 8007aac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ab0:	6829      	ldr	r1, [r5, #0]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ab8:	6029      	str	r1, [r5, #0]
 8007aba:	061d      	lsls	r5, r3, #24
 8007abc:	d514      	bpl.n	8007ae8 <_printf_i+0x1ac>
 8007abe:	07df      	lsls	r7, r3, #31
 8007ac0:	bf44      	itt	mi
 8007ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac6:	6023      	strmi	r3, [r4, #0]
 8007ac8:	b91e      	cbnz	r6, 8007ad2 <_printf_i+0x196>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	f023 0320 	bic.w	r3, r3, #32
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	2310      	movs	r3, #16
 8007ad4:	e7b0      	b.n	8007a38 <_printf_i+0xfc>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	f043 0320 	orr.w	r3, r3, #32
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	2378      	movs	r3, #120	; 0x78
 8007ae0:	4828      	ldr	r0, [pc, #160]	; (8007b84 <_printf_i+0x248>)
 8007ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ae6:	e7e3      	b.n	8007ab0 <_printf_i+0x174>
 8007ae8:	0659      	lsls	r1, r3, #25
 8007aea:	bf48      	it	mi
 8007aec:	b2b6      	uxthmi	r6, r6
 8007aee:	e7e6      	b.n	8007abe <_printf_i+0x182>
 8007af0:	4615      	mov	r5, r2
 8007af2:	e7bb      	b.n	8007a6c <_printf_i+0x130>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	6826      	ldr	r6, [r4, #0]
 8007af8:	6961      	ldr	r1, [r4, #20]
 8007afa:	1d18      	adds	r0, r3, #4
 8007afc:	6028      	str	r0, [r5, #0]
 8007afe:	0635      	lsls	r5, r6, #24
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	d501      	bpl.n	8007b08 <_printf_i+0x1cc>
 8007b04:	6019      	str	r1, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <_printf_i+0x1d2>
 8007b08:	0670      	lsls	r0, r6, #25
 8007b0a:	d5fb      	bpl.n	8007b04 <_printf_i+0x1c8>
 8007b0c:	8019      	strh	r1, [r3, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	4615      	mov	r5, r2
 8007b14:	e7ba      	b.n	8007a8c <_printf_i+0x150>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	681d      	ldr	r5, [r3, #0]
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	2100      	movs	r1, #0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7f8 fb5c 	bl	80001e0 <memchr>
 8007b28:	b108      	cbz	r0, 8007b2e <_printf_i+0x1f2>
 8007b2a:	1b40      	subs	r0, r0, r5
 8007b2c:	6060      	str	r0, [r4, #4]
 8007b2e:	6863      	ldr	r3, [r4, #4]
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	2300      	movs	r3, #0
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b38:	e7a8      	b.n	8007a8c <_printf_i+0x150>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	47d0      	blx	sl
 8007b44:	3001      	adds	r0, #1
 8007b46:	d0ab      	beq.n	8007aa0 <_printf_i+0x164>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	079b      	lsls	r3, r3, #30
 8007b4c:	d413      	bmi.n	8007b76 <_printf_i+0x23a>
 8007b4e:	68e0      	ldr	r0, [r4, #12]
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	4298      	cmp	r0, r3
 8007b54:	bfb8      	it	lt
 8007b56:	4618      	movlt	r0, r3
 8007b58:	e7a4      	b.n	8007aa4 <_printf_i+0x168>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	47d0      	blx	sl
 8007b64:	3001      	adds	r0, #1
 8007b66:	d09b      	beq.n	8007aa0 <_printf_i+0x164>
 8007b68:	3501      	adds	r5, #1
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	9903      	ldr	r1, [sp, #12]
 8007b6e:	1a5b      	subs	r3, r3, r1
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dcf2      	bgt.n	8007b5a <_printf_i+0x21e>
 8007b74:	e7eb      	b.n	8007b4e <_printf_i+0x212>
 8007b76:	2500      	movs	r5, #0
 8007b78:	f104 0619 	add.w	r6, r4, #25
 8007b7c:	e7f5      	b.n	8007b6a <_printf_i+0x22e>
 8007b7e:	bf00      	nop
 8007b80:	08008c4f 	.word	0x08008c4f
 8007b84:	08008c60 	.word	0x08008c60

08007b88 <_sbrk_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4d06      	ldr	r5, [pc, #24]	; (8007ba4 <_sbrk_r+0x1c>)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4608      	mov	r0, r1
 8007b92:	602b      	str	r3, [r5, #0]
 8007b94:	f7fb f996 	bl	8002ec4 <_sbrk>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_sbrk_r+0x1a>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_sbrk_r+0x1a>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	2000092c 	.word	0x2000092c

08007ba8 <__swbuf_r>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	460e      	mov	r6, r1
 8007bac:	4614      	mov	r4, r2
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b118      	cbz	r0, 8007bba <__swbuf_r+0x12>
 8007bb2:	6983      	ldr	r3, [r0, #24]
 8007bb4:	b90b      	cbnz	r3, 8007bba <__swbuf_r+0x12>
 8007bb6:	f000 f9d9 	bl	8007f6c <__sinit>
 8007bba:	4b21      	ldr	r3, [pc, #132]	; (8007c40 <__swbuf_r+0x98>)
 8007bbc:	429c      	cmp	r4, r3
 8007bbe:	d12b      	bne.n	8007c18 <__swbuf_r+0x70>
 8007bc0:	686c      	ldr	r4, [r5, #4]
 8007bc2:	69a3      	ldr	r3, [r4, #24]
 8007bc4:	60a3      	str	r3, [r4, #8]
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	071a      	lsls	r2, r3, #28
 8007bca:	d52f      	bpl.n	8007c2c <__swbuf_r+0x84>
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	b36b      	cbz	r3, 8007c2c <__swbuf_r+0x84>
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	6820      	ldr	r0, [r4, #0]
 8007bd4:	1ac0      	subs	r0, r0, r3
 8007bd6:	6963      	ldr	r3, [r4, #20]
 8007bd8:	b2f6      	uxtb	r6, r6
 8007bda:	4283      	cmp	r3, r0
 8007bdc:	4637      	mov	r7, r6
 8007bde:	dc04      	bgt.n	8007bea <__swbuf_r+0x42>
 8007be0:	4621      	mov	r1, r4
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 f92e 	bl	8007e44 <_fflush_r>
 8007be8:	bb30      	cbnz	r0, 8007c38 <__swbuf_r+0x90>
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	60a3      	str	r3, [r4, #8]
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	6022      	str	r2, [r4, #0]
 8007bf6:	701e      	strb	r6, [r3, #0]
 8007bf8:	6963      	ldr	r3, [r4, #20]
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	4283      	cmp	r3, r0
 8007bfe:	d004      	beq.n	8007c0a <__swbuf_r+0x62>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	07db      	lsls	r3, r3, #31
 8007c04:	d506      	bpl.n	8007c14 <__swbuf_r+0x6c>
 8007c06:	2e0a      	cmp	r6, #10
 8007c08:	d104      	bne.n	8007c14 <__swbuf_r+0x6c>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 f919 	bl	8007e44 <_fflush_r>
 8007c12:	b988      	cbnz	r0, 8007c38 <__swbuf_r+0x90>
 8007c14:	4638      	mov	r0, r7
 8007c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c18:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <__swbuf_r+0x9c>)
 8007c1a:	429c      	cmp	r4, r3
 8007c1c:	d101      	bne.n	8007c22 <__swbuf_r+0x7a>
 8007c1e:	68ac      	ldr	r4, [r5, #8]
 8007c20:	e7cf      	b.n	8007bc2 <__swbuf_r+0x1a>
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <__swbuf_r+0xa0>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	bf08      	it	eq
 8007c28:	68ec      	ldreq	r4, [r5, #12]
 8007c2a:	e7ca      	b.n	8007bc2 <__swbuf_r+0x1a>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f000 f80c 	bl	8007c4c <__swsetup_r>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d0cb      	beq.n	8007bd0 <__swbuf_r+0x28>
 8007c38:	f04f 37ff 	mov.w	r7, #4294967295
 8007c3c:	e7ea      	b.n	8007c14 <__swbuf_r+0x6c>
 8007c3e:	bf00      	nop
 8007c40:	08008c94 	.word	0x08008c94
 8007c44:	08008cb4 	.word	0x08008cb4
 8007c48:	08008c74 	.word	0x08008c74

08007c4c <__swsetup_r>:
 8007c4c:	4b32      	ldr	r3, [pc, #200]	; (8007d18 <__swsetup_r+0xcc>)
 8007c4e:	b570      	push	{r4, r5, r6, lr}
 8007c50:	681d      	ldr	r5, [r3, #0]
 8007c52:	4606      	mov	r6, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	b125      	cbz	r5, 8007c62 <__swsetup_r+0x16>
 8007c58:	69ab      	ldr	r3, [r5, #24]
 8007c5a:	b913      	cbnz	r3, 8007c62 <__swsetup_r+0x16>
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f000 f985 	bl	8007f6c <__sinit>
 8007c62:	4b2e      	ldr	r3, [pc, #184]	; (8007d1c <__swsetup_r+0xd0>)
 8007c64:	429c      	cmp	r4, r3
 8007c66:	d10f      	bne.n	8007c88 <__swsetup_r+0x3c>
 8007c68:	686c      	ldr	r4, [r5, #4]
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c70:	0719      	lsls	r1, r3, #28
 8007c72:	d42c      	bmi.n	8007cce <__swsetup_r+0x82>
 8007c74:	06dd      	lsls	r5, r3, #27
 8007c76:	d411      	bmi.n	8007c9c <__swsetup_r+0x50>
 8007c78:	2309      	movs	r3, #9
 8007c7a:	6033      	str	r3, [r6, #0]
 8007c7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	f04f 30ff 	mov.w	r0, #4294967295
 8007c86:	e03e      	b.n	8007d06 <__swsetup_r+0xba>
 8007c88:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <__swsetup_r+0xd4>)
 8007c8a:	429c      	cmp	r4, r3
 8007c8c:	d101      	bne.n	8007c92 <__swsetup_r+0x46>
 8007c8e:	68ac      	ldr	r4, [r5, #8]
 8007c90:	e7eb      	b.n	8007c6a <__swsetup_r+0x1e>
 8007c92:	4b24      	ldr	r3, [pc, #144]	; (8007d24 <__swsetup_r+0xd8>)
 8007c94:	429c      	cmp	r4, r3
 8007c96:	bf08      	it	eq
 8007c98:	68ec      	ldreq	r4, [r5, #12]
 8007c9a:	e7e6      	b.n	8007c6a <__swsetup_r+0x1e>
 8007c9c:	0758      	lsls	r0, r3, #29
 8007c9e:	d512      	bpl.n	8007cc6 <__swsetup_r+0x7a>
 8007ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ca2:	b141      	cbz	r1, 8007cb6 <__swsetup_r+0x6a>
 8007ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	d002      	beq.n	8007cb2 <__swsetup_r+0x66>
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7ff fa41 	bl	8007134 <_free_r>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6363      	str	r3, [r4, #52]	; 0x34
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6063      	str	r3, [r4, #4]
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	f043 0308 	orr.w	r3, r3, #8
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	b94b      	cbnz	r3, 8007ce6 <__swsetup_r+0x9a>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cdc:	d003      	beq.n	8007ce6 <__swsetup_r+0x9a>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 fa09 	bl	80080f8 <__smakebuf_r>
 8007ce6:	89a0      	ldrh	r0, [r4, #12]
 8007ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cec:	f010 0301 	ands.w	r3, r0, #1
 8007cf0:	d00a      	beq.n	8007d08 <__swsetup_r+0xbc>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60a3      	str	r3, [r4, #8]
 8007cf6:	6963      	ldr	r3, [r4, #20]
 8007cf8:	425b      	negs	r3, r3
 8007cfa:	61a3      	str	r3, [r4, #24]
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	b943      	cbnz	r3, 8007d12 <__swsetup_r+0xc6>
 8007d00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d04:	d1ba      	bne.n	8007c7c <__swsetup_r+0x30>
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	0781      	lsls	r1, r0, #30
 8007d0a:	bf58      	it	pl
 8007d0c:	6963      	ldrpl	r3, [r4, #20]
 8007d0e:	60a3      	str	r3, [r4, #8]
 8007d10:	e7f4      	b.n	8007cfc <__swsetup_r+0xb0>
 8007d12:	2000      	movs	r0, #0
 8007d14:	e7f7      	b.n	8007d06 <__swsetup_r+0xba>
 8007d16:	bf00      	nop
 8007d18:	20000064 	.word	0x20000064
 8007d1c:	08008c94 	.word	0x08008c94
 8007d20:	08008cb4 	.word	0x08008cb4
 8007d24:	08008c74 	.word	0x08008c74

08007d28 <abort>:
 8007d28:	b508      	push	{r3, lr}
 8007d2a:	2006      	movs	r0, #6
 8007d2c:	f000 faa2 	bl	8008274 <raise>
 8007d30:	2001      	movs	r0, #1
 8007d32:	f7fb f84f 	bl	8002dd4 <_exit>
	...

08007d38 <__sflush_r>:
 8007d38:	898a      	ldrh	r2, [r1, #12]
 8007d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3e:	4605      	mov	r5, r0
 8007d40:	0710      	lsls	r0, r2, #28
 8007d42:	460c      	mov	r4, r1
 8007d44:	d458      	bmi.n	8007df8 <__sflush_r+0xc0>
 8007d46:	684b      	ldr	r3, [r1, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	dc05      	bgt.n	8007d58 <__sflush_r+0x20>
 8007d4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dc02      	bgt.n	8007d58 <__sflush_r+0x20>
 8007d52:	2000      	movs	r0, #0
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	d0f9      	beq.n	8007d52 <__sflush_r+0x1a>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d64:	682f      	ldr	r7, [r5, #0]
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	d032      	beq.n	8007dd0 <__sflush_r+0x98>
 8007d6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	075a      	lsls	r2, r3, #29
 8007d70:	d505      	bpl.n	8007d7e <__sflush_r+0x46>
 8007d72:	6863      	ldr	r3, [r4, #4]
 8007d74:	1ac0      	subs	r0, r0, r3
 8007d76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d78:	b10b      	cbz	r3, 8007d7e <__sflush_r+0x46>
 8007d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d7c:	1ac0      	subs	r0, r0, r3
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4602      	mov	r2, r0
 8007d82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d84:	6a21      	ldr	r1, [r4, #32]
 8007d86:	4628      	mov	r0, r5
 8007d88:	47b0      	blx	r6
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	d106      	bne.n	8007d9e <__sflush_r+0x66>
 8007d90:	6829      	ldr	r1, [r5, #0]
 8007d92:	291d      	cmp	r1, #29
 8007d94:	d82c      	bhi.n	8007df0 <__sflush_r+0xb8>
 8007d96:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <__sflush_r+0x108>)
 8007d98:	40ca      	lsrs	r2, r1
 8007d9a:	07d6      	lsls	r6, r2, #31
 8007d9c:	d528      	bpl.n	8007df0 <__sflush_r+0xb8>
 8007d9e:	2200      	movs	r2, #0
 8007da0:	6062      	str	r2, [r4, #4]
 8007da2:	04d9      	lsls	r1, r3, #19
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	6022      	str	r2, [r4, #0]
 8007da8:	d504      	bpl.n	8007db4 <__sflush_r+0x7c>
 8007daa:	1c42      	adds	r2, r0, #1
 8007dac:	d101      	bne.n	8007db2 <__sflush_r+0x7a>
 8007dae:	682b      	ldr	r3, [r5, #0]
 8007db0:	b903      	cbnz	r3, 8007db4 <__sflush_r+0x7c>
 8007db2:	6560      	str	r0, [r4, #84]	; 0x54
 8007db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007db6:	602f      	str	r7, [r5, #0]
 8007db8:	2900      	cmp	r1, #0
 8007dba:	d0ca      	beq.n	8007d52 <__sflush_r+0x1a>
 8007dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc0:	4299      	cmp	r1, r3
 8007dc2:	d002      	beq.n	8007dca <__sflush_r+0x92>
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f7ff f9b5 	bl	8007134 <_free_r>
 8007dca:	2000      	movs	r0, #0
 8007dcc:	6360      	str	r0, [r4, #52]	; 0x34
 8007dce:	e7c1      	b.n	8007d54 <__sflush_r+0x1c>
 8007dd0:	6a21      	ldr	r1, [r4, #32]
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47b0      	blx	r6
 8007dd8:	1c41      	adds	r1, r0, #1
 8007dda:	d1c7      	bne.n	8007d6c <__sflush_r+0x34>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0c4      	beq.n	8007d6c <__sflush_r+0x34>
 8007de2:	2b1d      	cmp	r3, #29
 8007de4:	d001      	beq.n	8007dea <__sflush_r+0xb2>
 8007de6:	2b16      	cmp	r3, #22
 8007de8:	d101      	bne.n	8007dee <__sflush_r+0xb6>
 8007dea:	602f      	str	r7, [r5, #0]
 8007dec:	e7b1      	b.n	8007d52 <__sflush_r+0x1a>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	e7ad      	b.n	8007d54 <__sflush_r+0x1c>
 8007df8:	690f      	ldr	r7, [r1, #16]
 8007dfa:	2f00      	cmp	r7, #0
 8007dfc:	d0a9      	beq.n	8007d52 <__sflush_r+0x1a>
 8007dfe:	0793      	lsls	r3, r2, #30
 8007e00:	680e      	ldr	r6, [r1, #0]
 8007e02:	bf08      	it	eq
 8007e04:	694b      	ldreq	r3, [r1, #20]
 8007e06:	600f      	str	r7, [r1, #0]
 8007e08:	bf18      	it	ne
 8007e0a:	2300      	movne	r3, #0
 8007e0c:	eba6 0807 	sub.w	r8, r6, r7
 8007e10:	608b      	str	r3, [r1, #8]
 8007e12:	f1b8 0f00 	cmp.w	r8, #0
 8007e16:	dd9c      	ble.n	8007d52 <__sflush_r+0x1a>
 8007e18:	6a21      	ldr	r1, [r4, #32]
 8007e1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e1c:	4643      	mov	r3, r8
 8007e1e:	463a      	mov	r2, r7
 8007e20:	4628      	mov	r0, r5
 8007e22:	47b0      	blx	r6
 8007e24:	2800      	cmp	r0, #0
 8007e26:	dc06      	bgt.n	8007e36 <__sflush_r+0xfe>
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2e:	81a3      	strh	r3, [r4, #12]
 8007e30:	f04f 30ff 	mov.w	r0, #4294967295
 8007e34:	e78e      	b.n	8007d54 <__sflush_r+0x1c>
 8007e36:	4407      	add	r7, r0
 8007e38:	eba8 0800 	sub.w	r8, r8, r0
 8007e3c:	e7e9      	b.n	8007e12 <__sflush_r+0xda>
 8007e3e:	bf00      	nop
 8007e40:	20400001 	.word	0x20400001

08007e44 <_fflush_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	690b      	ldr	r3, [r1, #16]
 8007e48:	4605      	mov	r5, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	b913      	cbnz	r3, 8007e54 <_fflush_r+0x10>
 8007e4e:	2500      	movs	r5, #0
 8007e50:	4628      	mov	r0, r5
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	b118      	cbz	r0, 8007e5e <_fflush_r+0x1a>
 8007e56:	6983      	ldr	r3, [r0, #24]
 8007e58:	b90b      	cbnz	r3, 8007e5e <_fflush_r+0x1a>
 8007e5a:	f000 f887 	bl	8007f6c <__sinit>
 8007e5e:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <_fflush_r+0x6c>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d11b      	bne.n	8007e9c <_fflush_r+0x58>
 8007e64:	686c      	ldr	r4, [r5, #4]
 8007e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0ef      	beq.n	8007e4e <_fflush_r+0xa>
 8007e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e70:	07d0      	lsls	r0, r2, #31
 8007e72:	d404      	bmi.n	8007e7e <_fflush_r+0x3a>
 8007e74:	0599      	lsls	r1, r3, #22
 8007e76:	d402      	bmi.n	8007e7e <_fflush_r+0x3a>
 8007e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7a:	f000 f915 	bl	80080a8 <__retarget_lock_acquire_recursive>
 8007e7e:	4628      	mov	r0, r5
 8007e80:	4621      	mov	r1, r4
 8007e82:	f7ff ff59 	bl	8007d38 <__sflush_r>
 8007e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e88:	07da      	lsls	r2, r3, #31
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	d4e0      	bmi.n	8007e50 <_fflush_r+0xc>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	059b      	lsls	r3, r3, #22
 8007e92:	d4dd      	bmi.n	8007e50 <_fflush_r+0xc>
 8007e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e96:	f000 f908 	bl	80080aa <__retarget_lock_release_recursive>
 8007e9a:	e7d9      	b.n	8007e50 <_fflush_r+0xc>
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <_fflush_r+0x70>)
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d101      	bne.n	8007ea6 <_fflush_r+0x62>
 8007ea2:	68ac      	ldr	r4, [r5, #8]
 8007ea4:	e7df      	b.n	8007e66 <_fflush_r+0x22>
 8007ea6:	4b04      	ldr	r3, [pc, #16]	; (8007eb8 <_fflush_r+0x74>)
 8007ea8:	429c      	cmp	r4, r3
 8007eaa:	bf08      	it	eq
 8007eac:	68ec      	ldreq	r4, [r5, #12]
 8007eae:	e7da      	b.n	8007e66 <_fflush_r+0x22>
 8007eb0:	08008c94 	.word	0x08008c94
 8007eb4:	08008cb4 	.word	0x08008cb4
 8007eb8:	08008c74 	.word	0x08008c74

08007ebc <std>:
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eca:	6083      	str	r3, [r0, #8]
 8007ecc:	8181      	strh	r1, [r0, #12]
 8007ece:	6643      	str	r3, [r0, #100]	; 0x64
 8007ed0:	81c2      	strh	r2, [r0, #14]
 8007ed2:	6183      	str	r3, [r0, #24]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	2208      	movs	r2, #8
 8007ed8:	305c      	adds	r0, #92	; 0x5c
 8007eda:	f7ff f85f 	bl	8006f9c <memset>
 8007ede:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <std+0x38>)
 8007ee0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <std+0x3c>)
 8007ee4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <std+0x40>)
 8007ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eea:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <std+0x44>)
 8007eec:	6224      	str	r4, [r4, #32]
 8007eee:	6323      	str	r3, [r4, #48]	; 0x30
 8007ef0:	bd10      	pop	{r4, pc}
 8007ef2:	bf00      	nop
 8007ef4:	080082ad 	.word	0x080082ad
 8007ef8:	080082cf 	.word	0x080082cf
 8007efc:	08008307 	.word	0x08008307
 8007f00:	0800832b 	.word	0x0800832b

08007f04 <_cleanup_r>:
 8007f04:	4901      	ldr	r1, [pc, #4]	; (8007f0c <_cleanup_r+0x8>)
 8007f06:	f000 b8af 	b.w	8008068 <_fwalk_reent>
 8007f0a:	bf00      	nop
 8007f0c:	08007e45 	.word	0x08007e45

08007f10 <__sfmoreglue>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	2268      	movs	r2, #104	; 0x68
 8007f14:	1e4d      	subs	r5, r1, #1
 8007f16:	4355      	muls	r5, r2
 8007f18:	460e      	mov	r6, r1
 8007f1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f1e:	f7ff f975 	bl	800720c <_malloc_r>
 8007f22:	4604      	mov	r4, r0
 8007f24:	b140      	cbz	r0, 8007f38 <__sfmoreglue+0x28>
 8007f26:	2100      	movs	r1, #0
 8007f28:	e9c0 1600 	strd	r1, r6, [r0]
 8007f2c:	300c      	adds	r0, #12
 8007f2e:	60a0      	str	r0, [r4, #8]
 8007f30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f34:	f7ff f832 	bl	8006f9c <memset>
 8007f38:	4620      	mov	r0, r4
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}

08007f3c <__sfp_lock_acquire>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	; (8007f44 <__sfp_lock_acquire+0x8>)
 8007f3e:	f000 b8b3 	b.w	80080a8 <__retarget_lock_acquire_recursive>
 8007f42:	bf00      	nop
 8007f44:	20000929 	.word	0x20000929

08007f48 <__sfp_lock_release>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__sfp_lock_release+0x8>)
 8007f4a:	f000 b8ae 	b.w	80080aa <__retarget_lock_release_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20000929 	.word	0x20000929

08007f54 <__sinit_lock_acquire>:
 8007f54:	4801      	ldr	r0, [pc, #4]	; (8007f5c <__sinit_lock_acquire+0x8>)
 8007f56:	f000 b8a7 	b.w	80080a8 <__retarget_lock_acquire_recursive>
 8007f5a:	bf00      	nop
 8007f5c:	2000092a 	.word	0x2000092a

08007f60 <__sinit_lock_release>:
 8007f60:	4801      	ldr	r0, [pc, #4]	; (8007f68 <__sinit_lock_release+0x8>)
 8007f62:	f000 b8a2 	b.w	80080aa <__retarget_lock_release_recursive>
 8007f66:	bf00      	nop
 8007f68:	2000092a 	.word	0x2000092a

08007f6c <__sinit>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	4604      	mov	r4, r0
 8007f70:	f7ff fff0 	bl	8007f54 <__sinit_lock_acquire>
 8007f74:	69a3      	ldr	r3, [r4, #24]
 8007f76:	b11b      	cbz	r3, 8007f80 <__sinit+0x14>
 8007f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f7c:	f7ff bff0 	b.w	8007f60 <__sinit_lock_release>
 8007f80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f84:	6523      	str	r3, [r4, #80]	; 0x50
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <__sinit+0x68>)
 8007f88:	4a13      	ldr	r2, [pc, #76]	; (8007fd8 <__sinit+0x6c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	bf04      	itt	eq
 8007f92:	2301      	moveq	r3, #1
 8007f94:	61a3      	streq	r3, [r4, #24]
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 f820 	bl	8007fdc <__sfp>
 8007f9c:	6060      	str	r0, [r4, #4]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 f81c 	bl	8007fdc <__sfp>
 8007fa4:	60a0      	str	r0, [r4, #8]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 f818 	bl	8007fdc <__sfp>
 8007fac:	2200      	movs	r2, #0
 8007fae:	60e0      	str	r0, [r4, #12]
 8007fb0:	2104      	movs	r1, #4
 8007fb2:	6860      	ldr	r0, [r4, #4]
 8007fb4:	f7ff ff82 	bl	8007ebc <std>
 8007fb8:	68a0      	ldr	r0, [r4, #8]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	2109      	movs	r1, #9
 8007fbe:	f7ff ff7d 	bl	8007ebc <std>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	2112      	movs	r1, #18
 8007fc8:	f7ff ff78 	bl	8007ebc <std>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	61a3      	str	r3, [r4, #24]
 8007fd0:	e7d2      	b.n	8007f78 <__sinit+0xc>
 8007fd2:	bf00      	nop
 8007fd4:	08008b8c 	.word	0x08008b8c
 8007fd8:	08007f05 	.word	0x08007f05

08007fdc <__sfp>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	4607      	mov	r7, r0
 8007fe0:	f7ff ffac 	bl	8007f3c <__sfp_lock_acquire>
 8007fe4:	4b1e      	ldr	r3, [pc, #120]	; (8008060 <__sfp+0x84>)
 8007fe6:	681e      	ldr	r6, [r3, #0]
 8007fe8:	69b3      	ldr	r3, [r6, #24]
 8007fea:	b913      	cbnz	r3, 8007ff2 <__sfp+0x16>
 8007fec:	4630      	mov	r0, r6
 8007fee:	f7ff ffbd 	bl	8007f6c <__sinit>
 8007ff2:	3648      	adds	r6, #72	; 0x48
 8007ff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	d503      	bpl.n	8008004 <__sfp+0x28>
 8007ffc:	6833      	ldr	r3, [r6, #0]
 8007ffe:	b30b      	cbz	r3, 8008044 <__sfp+0x68>
 8008000:	6836      	ldr	r6, [r6, #0]
 8008002:	e7f7      	b.n	8007ff4 <__sfp+0x18>
 8008004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008008:	b9d5      	cbnz	r5, 8008040 <__sfp+0x64>
 800800a:	4b16      	ldr	r3, [pc, #88]	; (8008064 <__sfp+0x88>)
 800800c:	60e3      	str	r3, [r4, #12]
 800800e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008012:	6665      	str	r5, [r4, #100]	; 0x64
 8008014:	f000 f847 	bl	80080a6 <__retarget_lock_init_recursive>
 8008018:	f7ff ff96 	bl	8007f48 <__sfp_lock_release>
 800801c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008020:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008024:	6025      	str	r5, [r4, #0]
 8008026:	61a5      	str	r5, [r4, #24]
 8008028:	2208      	movs	r2, #8
 800802a:	4629      	mov	r1, r5
 800802c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008030:	f7fe ffb4 	bl	8006f9c <memset>
 8008034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800803c:	4620      	mov	r0, r4
 800803e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008040:	3468      	adds	r4, #104	; 0x68
 8008042:	e7d9      	b.n	8007ff8 <__sfp+0x1c>
 8008044:	2104      	movs	r1, #4
 8008046:	4638      	mov	r0, r7
 8008048:	f7ff ff62 	bl	8007f10 <__sfmoreglue>
 800804c:	4604      	mov	r4, r0
 800804e:	6030      	str	r0, [r6, #0]
 8008050:	2800      	cmp	r0, #0
 8008052:	d1d5      	bne.n	8008000 <__sfp+0x24>
 8008054:	f7ff ff78 	bl	8007f48 <__sfp_lock_release>
 8008058:	230c      	movs	r3, #12
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	e7ee      	b.n	800803c <__sfp+0x60>
 800805e:	bf00      	nop
 8008060:	08008b8c 	.word	0x08008b8c
 8008064:	ffff0001 	.word	0xffff0001

08008068 <_fwalk_reent>:
 8008068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800806c:	4606      	mov	r6, r0
 800806e:	4688      	mov	r8, r1
 8008070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008074:	2700      	movs	r7, #0
 8008076:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800807a:	f1b9 0901 	subs.w	r9, r9, #1
 800807e:	d505      	bpl.n	800808c <_fwalk_reent+0x24>
 8008080:	6824      	ldr	r4, [r4, #0]
 8008082:	2c00      	cmp	r4, #0
 8008084:	d1f7      	bne.n	8008076 <_fwalk_reent+0xe>
 8008086:	4638      	mov	r0, r7
 8008088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800808c:	89ab      	ldrh	r3, [r5, #12]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d907      	bls.n	80080a2 <_fwalk_reent+0x3a>
 8008092:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008096:	3301      	adds	r3, #1
 8008098:	d003      	beq.n	80080a2 <_fwalk_reent+0x3a>
 800809a:	4629      	mov	r1, r5
 800809c:	4630      	mov	r0, r6
 800809e:	47c0      	blx	r8
 80080a0:	4307      	orrs	r7, r0
 80080a2:	3568      	adds	r5, #104	; 0x68
 80080a4:	e7e9      	b.n	800807a <_fwalk_reent+0x12>

080080a6 <__retarget_lock_init_recursive>:
 80080a6:	4770      	bx	lr

080080a8 <__retarget_lock_acquire_recursive>:
 80080a8:	4770      	bx	lr

080080aa <__retarget_lock_release_recursive>:
 80080aa:	4770      	bx	lr

080080ac <__swhatbuf_r>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	460e      	mov	r6, r1
 80080b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b4:	2900      	cmp	r1, #0
 80080b6:	b096      	sub	sp, #88	; 0x58
 80080b8:	4614      	mov	r4, r2
 80080ba:	461d      	mov	r5, r3
 80080bc:	da08      	bge.n	80080d0 <__swhatbuf_r+0x24>
 80080be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	602a      	str	r2, [r5, #0]
 80080c6:	061a      	lsls	r2, r3, #24
 80080c8:	d410      	bmi.n	80080ec <__swhatbuf_r+0x40>
 80080ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ce:	e00e      	b.n	80080ee <__swhatbuf_r+0x42>
 80080d0:	466a      	mov	r2, sp
 80080d2:	f000 f951 	bl	8008378 <_fstat_r>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	dbf1      	blt.n	80080be <__swhatbuf_r+0x12>
 80080da:	9a01      	ldr	r2, [sp, #4]
 80080dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080e4:	425a      	negs	r2, r3
 80080e6:	415a      	adcs	r2, r3
 80080e8:	602a      	str	r2, [r5, #0]
 80080ea:	e7ee      	b.n	80080ca <__swhatbuf_r+0x1e>
 80080ec:	2340      	movs	r3, #64	; 0x40
 80080ee:	2000      	movs	r0, #0
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	b016      	add	sp, #88	; 0x58
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080080f8 <__smakebuf_r>:
 80080f8:	898b      	ldrh	r3, [r1, #12]
 80080fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080fc:	079d      	lsls	r5, r3, #30
 80080fe:	4606      	mov	r6, r0
 8008100:	460c      	mov	r4, r1
 8008102:	d507      	bpl.n	8008114 <__smakebuf_r+0x1c>
 8008104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	2301      	movs	r3, #1
 800810e:	6163      	str	r3, [r4, #20]
 8008110:	b002      	add	sp, #8
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	ab01      	add	r3, sp, #4
 8008116:	466a      	mov	r2, sp
 8008118:	f7ff ffc8 	bl	80080ac <__swhatbuf_r>
 800811c:	9900      	ldr	r1, [sp, #0]
 800811e:	4605      	mov	r5, r0
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff f873 	bl	800720c <_malloc_r>
 8008126:	b948      	cbnz	r0, 800813c <__smakebuf_r+0x44>
 8008128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812c:	059a      	lsls	r2, r3, #22
 800812e:	d4ef      	bmi.n	8008110 <__smakebuf_r+0x18>
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	e7e3      	b.n	8008104 <__smakebuf_r+0xc>
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <__smakebuf_r+0x7c>)
 800813e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	6020      	str	r0, [r4, #0]
 8008144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	9b00      	ldr	r3, [sp, #0]
 800814c:	6163      	str	r3, [r4, #20]
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	6120      	str	r0, [r4, #16]
 8008152:	b15b      	cbz	r3, 800816c <__smakebuf_r+0x74>
 8008154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008158:	4630      	mov	r0, r6
 800815a:	f000 f91f 	bl	800839c <_isatty_r>
 800815e:	b128      	cbz	r0, 800816c <__smakebuf_r+0x74>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f023 0303 	bic.w	r3, r3, #3
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	89a0      	ldrh	r0, [r4, #12]
 800816e:	4305      	orrs	r5, r0
 8008170:	81a5      	strh	r5, [r4, #12]
 8008172:	e7cd      	b.n	8008110 <__smakebuf_r+0x18>
 8008174:	08007f05 	.word	0x08007f05

08008178 <memmove>:
 8008178:	4288      	cmp	r0, r1
 800817a:	b510      	push	{r4, lr}
 800817c:	eb01 0402 	add.w	r4, r1, r2
 8008180:	d902      	bls.n	8008188 <memmove+0x10>
 8008182:	4284      	cmp	r4, r0
 8008184:	4623      	mov	r3, r4
 8008186:	d807      	bhi.n	8008198 <memmove+0x20>
 8008188:	1e43      	subs	r3, r0, #1
 800818a:	42a1      	cmp	r1, r4
 800818c:	d008      	beq.n	80081a0 <memmove+0x28>
 800818e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008196:	e7f8      	b.n	800818a <memmove+0x12>
 8008198:	4402      	add	r2, r0
 800819a:	4601      	mov	r1, r0
 800819c:	428a      	cmp	r2, r1
 800819e:	d100      	bne.n	80081a2 <memmove+0x2a>
 80081a0:	bd10      	pop	{r4, pc}
 80081a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081aa:	e7f7      	b.n	800819c <memmove+0x24>

080081ac <__malloc_lock>:
 80081ac:	4801      	ldr	r0, [pc, #4]	; (80081b4 <__malloc_lock+0x8>)
 80081ae:	f7ff bf7b 	b.w	80080a8 <__retarget_lock_acquire_recursive>
 80081b2:	bf00      	nop
 80081b4:	20000928 	.word	0x20000928

080081b8 <__malloc_unlock>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__malloc_unlock+0x8>)
 80081ba:	f7ff bf76 	b.w	80080aa <__retarget_lock_release_recursive>
 80081be:	bf00      	nop
 80081c0:	20000928 	.word	0x20000928

080081c4 <_realloc_r>:
 80081c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c8:	4680      	mov	r8, r0
 80081ca:	4614      	mov	r4, r2
 80081cc:	460e      	mov	r6, r1
 80081ce:	b921      	cbnz	r1, 80081da <_realloc_r+0x16>
 80081d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081d4:	4611      	mov	r1, r2
 80081d6:	f7ff b819 	b.w	800720c <_malloc_r>
 80081da:	b92a      	cbnz	r2, 80081e8 <_realloc_r+0x24>
 80081dc:	f7fe ffaa 	bl	8007134 <_free_r>
 80081e0:	4625      	mov	r5, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e8:	f000 f8fa 	bl	80083e0 <_malloc_usable_size_r>
 80081ec:	4284      	cmp	r4, r0
 80081ee:	4607      	mov	r7, r0
 80081f0:	d802      	bhi.n	80081f8 <_realloc_r+0x34>
 80081f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081f6:	d812      	bhi.n	800821e <_realloc_r+0x5a>
 80081f8:	4621      	mov	r1, r4
 80081fa:	4640      	mov	r0, r8
 80081fc:	f7ff f806 	bl	800720c <_malloc_r>
 8008200:	4605      	mov	r5, r0
 8008202:	2800      	cmp	r0, #0
 8008204:	d0ed      	beq.n	80081e2 <_realloc_r+0x1e>
 8008206:	42bc      	cmp	r4, r7
 8008208:	4622      	mov	r2, r4
 800820a:	4631      	mov	r1, r6
 800820c:	bf28      	it	cs
 800820e:	463a      	movcs	r2, r7
 8008210:	f7fe feb6 	bl	8006f80 <memcpy>
 8008214:	4631      	mov	r1, r6
 8008216:	4640      	mov	r0, r8
 8008218:	f7fe ff8c 	bl	8007134 <_free_r>
 800821c:	e7e1      	b.n	80081e2 <_realloc_r+0x1e>
 800821e:	4635      	mov	r5, r6
 8008220:	e7df      	b.n	80081e2 <_realloc_r+0x1e>

08008222 <_raise_r>:
 8008222:	291f      	cmp	r1, #31
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4604      	mov	r4, r0
 8008228:	460d      	mov	r5, r1
 800822a:	d904      	bls.n	8008236 <_raise_r+0x14>
 800822c:	2316      	movs	r3, #22
 800822e:	6003      	str	r3, [r0, #0]
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008238:	b112      	cbz	r2, 8008240 <_raise_r+0x1e>
 800823a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800823e:	b94b      	cbnz	r3, 8008254 <_raise_r+0x32>
 8008240:	4620      	mov	r0, r4
 8008242:	f000 f831 	bl	80082a8 <_getpid_r>
 8008246:	462a      	mov	r2, r5
 8008248:	4601      	mov	r1, r0
 800824a:	4620      	mov	r0, r4
 800824c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008250:	f000 b818 	b.w	8008284 <_kill_r>
 8008254:	2b01      	cmp	r3, #1
 8008256:	d00a      	beq.n	800826e <_raise_r+0x4c>
 8008258:	1c59      	adds	r1, r3, #1
 800825a:	d103      	bne.n	8008264 <_raise_r+0x42>
 800825c:	2316      	movs	r3, #22
 800825e:	6003      	str	r3, [r0, #0]
 8008260:	2001      	movs	r0, #1
 8008262:	e7e7      	b.n	8008234 <_raise_r+0x12>
 8008264:	2400      	movs	r4, #0
 8008266:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800826a:	4628      	mov	r0, r5
 800826c:	4798      	blx	r3
 800826e:	2000      	movs	r0, #0
 8008270:	e7e0      	b.n	8008234 <_raise_r+0x12>
	...

08008274 <raise>:
 8008274:	4b02      	ldr	r3, [pc, #8]	; (8008280 <raise+0xc>)
 8008276:	4601      	mov	r1, r0
 8008278:	6818      	ldr	r0, [r3, #0]
 800827a:	f7ff bfd2 	b.w	8008222 <_raise_r>
 800827e:	bf00      	nop
 8008280:	20000064 	.word	0x20000064

08008284 <_kill_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d07      	ldr	r5, [pc, #28]	; (80082a4 <_kill_r+0x20>)
 8008288:	2300      	movs	r3, #0
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	4611      	mov	r1, r2
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f7fa fd8f 	bl	8002db4 <_kill>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d102      	bne.n	80082a0 <_kill_r+0x1c>
 800829a:	682b      	ldr	r3, [r5, #0]
 800829c:	b103      	cbz	r3, 80082a0 <_kill_r+0x1c>
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	2000092c 	.word	0x2000092c

080082a8 <_getpid_r>:
 80082a8:	f7fa bd7c 	b.w	8002da4 <_getpid>

080082ac <__sread>:
 80082ac:	b510      	push	{r4, lr}
 80082ae:	460c      	mov	r4, r1
 80082b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b4:	f000 f89c 	bl	80083f0 <_read_r>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	bfab      	itete	ge
 80082bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082be:	89a3      	ldrhlt	r3, [r4, #12]
 80082c0:	181b      	addge	r3, r3, r0
 80082c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082c6:	bfac      	ite	ge
 80082c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80082ca:	81a3      	strhlt	r3, [r4, #12]
 80082cc:	bd10      	pop	{r4, pc}

080082ce <__swrite>:
 80082ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d2:	461f      	mov	r7, r3
 80082d4:	898b      	ldrh	r3, [r1, #12]
 80082d6:	05db      	lsls	r3, r3, #23
 80082d8:	4605      	mov	r5, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	4616      	mov	r6, r2
 80082de:	d505      	bpl.n	80082ec <__swrite+0x1e>
 80082e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e4:	2302      	movs	r3, #2
 80082e6:	2200      	movs	r2, #0
 80082e8:	f000 f868 	bl	80083bc <_lseek_r>
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082f6:	81a3      	strh	r3, [r4, #12]
 80082f8:	4632      	mov	r2, r6
 80082fa:	463b      	mov	r3, r7
 80082fc:	4628      	mov	r0, r5
 80082fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008302:	f000 b817 	b.w	8008334 <_write_r>

08008306 <__sseek>:
 8008306:	b510      	push	{r4, lr}
 8008308:	460c      	mov	r4, r1
 800830a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830e:	f000 f855 	bl	80083bc <_lseek_r>
 8008312:	1c43      	adds	r3, r0, #1
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	bf15      	itete	ne
 8008318:	6560      	strne	r0, [r4, #84]	; 0x54
 800831a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800831e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008322:	81a3      	strheq	r3, [r4, #12]
 8008324:	bf18      	it	ne
 8008326:	81a3      	strhne	r3, [r4, #12]
 8008328:	bd10      	pop	{r4, pc}

0800832a <__sclose>:
 800832a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832e:	f000 b813 	b.w	8008358 <_close_r>
	...

08008334 <_write_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d07      	ldr	r5, [pc, #28]	; (8008354 <_write_r+0x20>)
 8008338:	4604      	mov	r4, r0
 800833a:	4608      	mov	r0, r1
 800833c:	4611      	mov	r1, r2
 800833e:	2200      	movs	r2, #0
 8008340:	602a      	str	r2, [r5, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	f7fa fd6d 	bl	8002e22 <_write>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_write_r+0x1e>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_write_r+0x1e>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	2000092c 	.word	0x2000092c

08008358 <_close_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4d06      	ldr	r5, [pc, #24]	; (8008374 <_close_r+0x1c>)
 800835c:	2300      	movs	r3, #0
 800835e:	4604      	mov	r4, r0
 8008360:	4608      	mov	r0, r1
 8008362:	602b      	str	r3, [r5, #0]
 8008364:	f7fa fd79 	bl	8002e5a <_close>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_close_r+0x1a>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_close_r+0x1a>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	2000092c 	.word	0x2000092c

08008378 <_fstat_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d07      	ldr	r5, [pc, #28]	; (8008398 <_fstat_r+0x20>)
 800837c:	2300      	movs	r3, #0
 800837e:	4604      	mov	r4, r0
 8008380:	4608      	mov	r0, r1
 8008382:	4611      	mov	r1, r2
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	f7fa fd74 	bl	8002e72 <_fstat>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d102      	bne.n	8008394 <_fstat_r+0x1c>
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	b103      	cbz	r3, 8008394 <_fstat_r+0x1c>
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	bd38      	pop	{r3, r4, r5, pc}
 8008396:	bf00      	nop
 8008398:	2000092c 	.word	0x2000092c

0800839c <_isatty_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d06      	ldr	r5, [pc, #24]	; (80083b8 <_isatty_r+0x1c>)
 80083a0:	2300      	movs	r3, #0
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7fa fd73 	bl	8002e92 <_isatty>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d102      	bne.n	80083b6 <_isatty_r+0x1a>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b103      	cbz	r3, 80083b6 <_isatty_r+0x1a>
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	2000092c 	.word	0x2000092c

080083bc <_lseek_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d07      	ldr	r5, [pc, #28]	; (80083dc <_lseek_r+0x20>)
 80083c0:	4604      	mov	r4, r0
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f7fa fd6c 	bl	8002ea8 <_lseek>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_lseek_r+0x1e>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_lseek_r+0x1e>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	2000092c 	.word	0x2000092c

080083e0 <_malloc_usable_size_r>:
 80083e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083e4:	1f18      	subs	r0, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bfbc      	itt	lt
 80083ea:	580b      	ldrlt	r3, [r1, r0]
 80083ec:	18c0      	addlt	r0, r0, r3
 80083ee:	4770      	bx	lr

080083f0 <_read_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_read_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7fa fcf2 	bl	8002de8 <_read>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_read_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_read_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	2000092c 	.word	0x2000092c

08008414 <_init>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr

08008420 <_fini>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr
