
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a60  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a054  0800a054  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  0800a054  0800a054  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a054  0800a054  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a054  0800a054  0001a054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a058  0800a058  0001a058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800a05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020138  2**0
                  CONTENTS
 10 .bss          00000920  20000138  20000138  00020138  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000a58  20000a58  00020138  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a76  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000428d  00000000  00000000  00038bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  0003e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f1f1  00000000  00000000  0003f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c35  00000000  00000000  0005e701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad706  00000000  00000000  00078336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125a3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c94  00000000  00000000  00125a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095dc 	.word	0x080095dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	080095dc 	.word	0x080095dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ReadAnalogStickChange>:

		*outputX = x;
		*outputY = y;
}

void ReadAnalogStickChange(ADC_HandleTypeDef* adc, i32* outputX, i32* outputY){
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	//LCD_PCD8544_clear_ram(&gLcdScreen);
	HAL_ADC_Start(adc);
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f003 fb7d 	bl	800398c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f003 fc2f 	bl	8003af8 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 800029a:	68f8      	ldr	r0, [r7, #12]
 800029c:	f003 fcfa 	bl	8003c94 <HAL_ADC_GetValue>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002a6:	801a      	strh	r2, [r3, #0]
	uint16_t y = AD_RES;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	82fb      	strh	r3, [r7, #22]

	// Start ADC Conversion
	HAL_ADC_Start(adc);
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f003 fb6c 	bl	800398c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(adc, 1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f003 fc1e 	bl	8003af8 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(adc);
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f003 fce9 	bl	8003c94 <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002c8:	801a      	strh	r2, [r3, #0]
	uint16_t x = AD_RES;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ReadAnalogStickChange+0x94>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	82bb      	strh	r3, [r7, #20]
	x &= 0xfff;
 80002d0:	8abb      	ldrh	r3, [r7, #20]
 80002d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d6:	82bb      	strh	r3, [r7, #20]
	y &= 0xfff;
 80002d8:	8afb      	ldrh	r3, [r7, #22]
 80002da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002de:	82fb      	strh	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 80002e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e4:	613b      	str	r3, [r7, #16]
	*outputX = (x - (twelveBitMax/2));
 80002e6:	8aba      	ldrh	r2, [r7, #20]
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	0fd9      	lsrs	r1, r3, #31
 80002ec:	440b      	add	r3, r1
 80002ee:	105b      	asrs	r3, r3, #1
 80002f0:	425b      	negs	r3, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	601a      	str	r2, [r3, #0]
	*outputY = (y - (twelveBitMax/2));
 80002f8:	8afa      	ldrh	r2, [r7, #22]
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	0fd9      	lsrs	r1, r3, #31
 80002fe:	440b      	add	r3, r1
 8000300:	105b      	asrs	r3, r3, #1
 8000302:	425b      	negs	r3, r3
 8000304:	441a      	add	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000154 	.word	0x20000154

08000318 <EmulateDPad>:


ANALOG_STICK_DPAD_RESULT EmulateDPad(ADC_HandleTypeDef* adc){
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	4619      	mov	r1, r3
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f7ff ffa8 	bl	8000280 <ReadAnalogStickChange>
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000330:	2300      	movs	r3, #0
 8000332:	75fb      	strb	r3, [r7, #23]
	const i32 twelveBitMax = 4096;
 8000334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000338:	613b      	str	r3, [r7, #16]
	if(analogYChange > (twelveBitMax/3)){
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	4a29      	ldr	r2, [pc, #164]	; (80003e4 <EmulateDPad+0xcc>)
 800033e:	fb82 1203 	smull	r1, r2, r2, r3
 8000342:	17db      	asrs	r3, r3, #31
 8000344:	1ad2      	subs	r2, r2, r3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	429a      	cmp	r2, r3
 800034a:	da09      	bge.n	8000360 <EmulateDPad+0x48>
		if(_isAnalogStickExtended == false){
 800034c:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <EmulateDPad+0xd0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d141      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <EmulateDPad+0xd0>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800035a:	2302      	movs	r3, #2
 800035c:	75fb      	strb	r3, [r7, #23]
 800035e:	e03b      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <EmulateDPad+0xcc>)
 8000364:	fb82 1203 	smull	r1, r2, r2, r3
 8000368:	17db      	asrs	r3, r3, #31
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	429a      	cmp	r2, r3
 8000370:	dd09      	ble.n	8000386 <EmulateDPad+0x6e>
		if(_isAnalogStickExtended == false){
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <EmulateDPad+0xd0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d12e      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <EmulateDPad+0xd0>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000380:	2301      	movs	r3, #1
 8000382:	75fb      	strb	r3, [r7, #23]
 8000384:	e028      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange > (twelveBitMax/3)){
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <EmulateDPad+0xcc>)
 800038a:	fb82 1203 	smull	r1, r2, r2, r3
 800038e:	17db      	asrs	r3, r3, #31
 8000390:	1ad2      	subs	r2, r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	429a      	cmp	r2, r3
 8000396:	da09      	bge.n	80003ac <EmulateDPad+0x94>
		if(_isAnalogStickExtended == false){
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <EmulateDPad+0xd0>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d11b      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <EmulateDPad+0xd0>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 80003a6:	2304      	movs	r3, #4
 80003a8:	75fb      	strb	r3, [r7, #23]
 80003aa:	e015      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <EmulateDPad+0xcc>)
 80003b0:	fb82 1203 	smull	r1, r2, r2, r3
 80003b4:	17db      	asrs	r3, r3, #31
 80003b6:	1a9a      	subs	r2, r3, r2
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	dd09      	ble.n	80003d2 <EmulateDPad+0xba>
		if(_isAnalogStickExtended == false){
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <EmulateDPad+0xd0>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d108      	bne.n	80003d8 <EmulateDPad+0xc0>
			_isAnalogStickExtended = true;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <EmulateDPad+0xd0>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80003cc:	2303      	movs	r3, #3
 80003ce:	75fb      	strb	r3, [r7, #23]
 80003d0:	e002      	b.n	80003d8 <EmulateDPad+0xc0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <EmulateDPad+0xd0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	55555556 	.word	0x55555556
 80003e8:	20000156 	.word	0x20000156

080003ec <EmulateDPadReturningXAndYChange>:


ANALOG_STICK_DPAD_RESULT EmulateDPadReturningXAndYChange(ADC_HandleTypeDef* adc, i32* rXChange, i32* rYChange){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(adc,&analogXChange,&analogYChange);
 80003f8:	f107 0210 	add.w	r2, r7, #16
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	4619      	mov	r1, r3
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff3c 	bl	8000280 <ReadAnalogStickChange>
	*rXChange = analogXChange;
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	601a      	str	r2, [r3, #0]
	*rYChange = analogYChange;
 800040e:	693a      	ldr	r2, [r7, #16]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	601a      	str	r2, [r3, #0]
	ANALOG_STICK_DPAD_RESULT res = NO_DIRECTION;
 8000414:	2300      	movs	r3, #0
 8000416:	77fb      	strb	r3, [r7, #31]
	const i32 twelveBitMax = 4096;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	61bb      	str	r3, [r7, #24]
	if(analogYChange > (twelveBitMax/3)){
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000422:	fb82 1203 	smull	r1, r2, r2, r3
 8000426:	17db      	asrs	r3, r3, #31
 8000428:	1ad2      	subs	r2, r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	429a      	cmp	r2, r3
 800042e:	da09      	bge.n	8000444 <EmulateDPadReturningXAndYChange+0x58>
		if(_isAnalogStickExtended == false){
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d141      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
			res =  DOWN;
 800043e:	2302      	movs	r3, #2
 8000440:	77fb      	strb	r3, [r7, #31]
 8000442:	e03b      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}

	}
	else if(analogYChange < -(twelveBitMax/3)){
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000448:	fb82 1203 	smull	r1, r2, r2, r3
 800044c:	17db      	asrs	r3, r3, #31
 800044e:	1a9a      	subs	r2, r3, r2
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	429a      	cmp	r2, r3
 8000454:	dd09      	ble.n	800046a <EmulateDPadReturningXAndYChange+0x7e>
		if(_isAnalogStickExtended == false){
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d12e      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
			res = UP;
 8000464:	2301      	movs	r3, #1
 8000466:	77fb      	strb	r3, [r7, #31]
 8000468:	e028      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>

		}

	}
	else if(analogXChange > (twelveBitMax/3)){
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 800046e:	fb82 1203 	smull	r1, r2, r2, r3
 8000472:	17db      	asrs	r3, r3, #31
 8000474:	1ad2      	subs	r2, r2, r3
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	429a      	cmp	r2, r3
 800047a:	da09      	bge.n	8000490 <EmulateDPadReturningXAndYChange+0xa4>
		if(_isAnalogStickExtended == false){
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d11b      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
			res = RIGHT;
 800048a:	2304      	movs	r3, #4
 800048c:	77fb      	strb	r3, [r7, #31]
 800048e:	e015      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <EmulateDPadReturningXAndYChange+0xdc>)
 8000494:	fb82 1203 	smull	r1, r2, r2, r3
 8000498:	17db      	asrs	r3, r3, #31
 800049a:	1a9a      	subs	r2, r3, r2
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dd09      	ble.n	80004b6 <EmulateDPadReturningXAndYChange+0xca>
		if(_isAnalogStickExtended == false){
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d108      	bne.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
			_isAnalogStickExtended = true;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
			res = LEFT;
 80004b0:	2303      	movs	r3, #3
 80004b2:	77fb      	strb	r3, [r7, #31]
 80004b4:	e002      	b.n	80004bc <EmulateDPadReturningXAndYChange+0xd0>
		}
	}
	else{
		_isAnalogStickExtended = false;
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <EmulateDPadReturningXAndYChange+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80004bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	55555556 	.word	0x55555556
 80004cc:	20000156 	.word	0x20000156

080004d0 <Buzzer_Init>:
		505,
		477

};

void Buzzer_Init(TIM_HandleTypeDef* timer){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Start(timer,TIM_CHANNEL_1);
 80004d8:	2100      	movs	r1, #0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f006 fc46 	bl	8006d6c <HAL_TIM_OC_Start>
	_timer = timer;
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <Buzzer_Init+0x30>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(_timer,0);
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <Buzzer_Init+0x30>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <Buzzer_Init+0x30>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000158 	.word	0x20000158

08000504 <Buzzer_Note>:

void Buzzer_Note(Note note){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(_timer,_notesBuzzerTimerAutoReloadValues[note]);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <Buzzer_Note+0x34>)
 8000512:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <Buzzer_Note+0x38>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <Buzzer_Note+0x34>)
 8000522:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <Buzzer_Note+0x38>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60da      	str	r2, [r3, #12]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000000 	.word	0x20000000
 800053c:	20000158 	.word	0x20000158

08000540 <gfxClearFrameBuffer>:
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
	}
}

void gfxClearFrameBuffer(){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 8000544:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000548:	2100      	movs	r1, #0
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <gfxClearFrameBuffer+0x14>)
 800054c:	f007 fe0a 	bl	8008164 <memset>
	//UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000015c 	.word	0x2000015c

08000558 <gfxPlotPixelInternal>:
	}


}

void gfxPlotPixelInternal(u8 x, u8 y){
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
	if(x >= 84 || y >= 47){
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b53      	cmp	r3, #83	; 0x53
 800056c:	d825      	bhi.n	80005ba <gfxPlotPixelInternal+0x62>
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	2b2e      	cmp	r3, #46	; 0x2e
 8000572:	d822      	bhi.n	80005ba <gfxPlotPixelInternal+0x62>
		return;
	}
	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2354      	movs	r3, #84	; 0x54
 800057e:	fb03 f202 	mul.w	r2, r3, r2
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4413      	add	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
	if(indexOfSliceContainingPixel < sizeof(gFrameBuffer))
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800058e:	d215      	bcs.n	80005bc <gfxPlotPixelInternal+0x64>
		gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <gfxPlotPixelInternal+0x70>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b25a      	sxtb	r2, r3
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	f003 0307 	and.w	r3, r3, #7
 80005a0:	2101      	movs	r1, #1
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	b2d9      	uxtb	r1, r3
 80005ae:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <gfxPlotPixelInternal+0x70>)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4413      	add	r3, r2
 80005b4:	460a      	mov	r2, r1
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e000      	b.n	80005bc <gfxPlotPixelInternal+0x64>
		return;
 80005ba:	bf00      	nop
}
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2000015c 	.word	0x2000015c

080005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>:
void gfxPlotPixel(u8 x, u8 y){
	gfxPlotPixelInternal(x,y);
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
}

void UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(u8 rowStart, u8 rowStop, u8 colStart, u8 colStop){
 80005cc:	b490      	push	{r4, r7}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4604      	mov	r4, r0
 80005d4:	4608      	mov	r0, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	461a      	mov	r2, r3
 80005da:	4623      	mov	r3, r4
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	4603      	mov	r3, r0
 80005e0:	71bb      	strb	r3, [r7, #6]
 80005e2:	460b      	mov	r3, r1
 80005e4:	717b      	strb	r3, [r7, #5]
 80005e6:	4613      	mov	r3, r2
 80005e8:	713b      	strb	r3, [r7, #4]
	for(int row = rowStart; row <= rowStop; row++){
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e01c      	b.n	800062a <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x5e>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 80005f0:	4913      	ldr	r1, [pc, #76]	; (8000640 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = colStart;
 8000600:	490f      	ldr	r1, [pc, #60]	; (8000640 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	4613      	mov	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	440b      	add	r3, r1
 800060c:	3301      	adds	r3, #1
 800060e:	797a      	ldrb	r2, [r7, #5]
 8000610:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = colStop;
 8000612:	490b      	ldr	r1, [pc, #44]	; (8000640 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x74>)
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4613      	mov	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4413      	add	r3, r2
 800061c:	440b      	add	r3, r1
 800061e:	3302      	adds	r3, #2
 8000620:	793a      	ldrb	r2, [r7, #4]
 8000622:	701a      	strb	r2, [r3, #0]
	for(int row = rowStart; row <= rowStop; row++){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	429a      	cmp	r2, r3
 8000630:	ddde      	ble.n	80005f0 <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen+0x24>
	}
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bc90      	pop	{r4, r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000354 	.word	0x20000354

08000644 <gfxDrawLineBresenhamLow>:

}



void gfxDrawLineBresenhamLow(u8 x0, u8 y0, u8 x1, u8 y1){
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	4604      	mov	r4, r0
 800064c:	4608      	mov	r0, r1
 800064e:	4611      	mov	r1, r2
 8000650:	461a      	mov	r2, r3
 8000652:	4623      	mov	r3, r4
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	4603      	mov	r3, r0
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	460b      	mov	r3, r1
 800065c:	717b      	strb	r3, [r7, #5]
 800065e:	4613      	mov	r3, r2
 8000660:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 8000662:	797a      	ldrb	r2, [r7, #5]
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	60bb      	str	r3, [r7, #8]
	i32 dy = y1 - y0;
 800066a:	793a      	ldrb	r2, [r7, #4]
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	61fb      	str	r3, [r7, #28]
	i32 yi = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
	if(dy < 0){
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da05      	bge.n	8000688 <gfxDrawLineBresenhamLow+0x44>
		yi = -1;
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	425b      	negs	r3, r3
 8000686:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dy) - dx;
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	005a      	lsls	r2, r3, #1
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	617b      	str	r3, [r7, #20]
	i32 y = y0;
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	613b      	str	r3, [r7, #16]
	for(i32 x = x0; x <= x1; x++){
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e01e      	b.n	80006da <gfxDrawLineBresenhamLow+0x96>
		gfxPlotPixelInternal(x,y);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff56 	bl	8000558 <gfxPlotPixelInternal>
		if(D > 0){
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	dd0b      	ble.n	80006ca <gfxDrawLineBresenhamLow+0x86>
			y = y + yi;
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	4413      	add	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
			D = D + (2*(dy-dx));
 80006ba:	69fa      	ldr	r2, [r7, #28]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	4413      	add	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e004      	b.n	80006d4 <gfxDrawLineBresenhamLow+0x90>
		}
		else{
			D = D + 2*dy;
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	4413      	add	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	for(i32 x = x0; x <= x1; x++){
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	797b      	ldrb	r3, [r7, #5]
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dddc      	ble.n	800069c <gfxDrawLineBresenhamLow+0x58>
		}
	}

}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3724      	adds	r7, #36	; 0x24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd90      	pop	{r4, r7, pc}

080006ec <gfxDrawLineBresenhamHigh>:

void gfxDrawLineBresenhamHigh(u8 x0, u8 y0, u8 x1, u8 y1){
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4604      	mov	r4, r0
 80006f4:	4608      	mov	r0, r1
 80006f6:	4611      	mov	r1, r2
 80006f8:	461a      	mov	r2, r3
 80006fa:	4623      	mov	r3, r4
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	4603      	mov	r3, r0
 8000700:	71bb      	strb	r3, [r7, #6]
 8000702:	460b      	mov	r3, r1
 8000704:	717b      	strb	r3, [r7, #5]
 8000706:	4613      	mov	r3, r2
 8000708:	713b      	strb	r3, [r7, #4]
	i32 dx = x1 - x0;
 800070a:	797a      	ldrb	r2, [r7, #5]
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	61fb      	str	r3, [r7, #28]
	i32 dy = y1 - y0;
 8000712:	793a      	ldrb	r2, [r7, #4]
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	60bb      	str	r3, [r7, #8]
	i32 xi = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
	if (dx < 0){
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	2b00      	cmp	r3, #0
 8000722:	da04      	bge.n	800072e <gfxDrawLineBresenhamHigh+0x42>
		xi = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
		dx = -dx;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	425b      	negs	r3, r3
 800072c:	61fb      	str	r3, [r7, #28]
	}
	i32 D = (2 * dx) - dy;
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	005a      	lsls	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
	i32 x = x0;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	613b      	str	r3, [r7, #16]
	for(i32 y = y0; y <= y1; y++){
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e01e      	b.n	8000780 <gfxDrawLineBresenhamHigh+0x94>
		gfxPlotPixelInternal(x,y);
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff03 	bl	8000558 <gfxPlotPixelInternal>
		if(D > 0){
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b00      	cmp	r3, #0
 8000756:	dd0b      	ble.n	8000770 <gfxDrawLineBresenhamHigh+0x84>
			x = x + xi;
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	4413      	add	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
			D = D + (2 * (dx - dy));
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	e004      	b.n	800077a <gfxDrawLineBresenhamHigh+0x8e>
		}
		else{
			D = D + 2*dx;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	4413      	add	r3, r2
 8000778:	617b      	str	r3, [r7, #20]
	for(i32 y = y0; y <= y1; y++){
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	793b      	ldrb	r3, [r7, #4]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	dddc      	ble.n	8000742 <gfxDrawLineBresenhamHigh+0x56>
		}
	}
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}

08000792 <gfxDrawLine>:



void gfxDrawLine(u8 x0, u8 y0, u8 x1, u8 y1){
 8000792:	b590      	push	{r4, r7, lr}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	4604      	mov	r4, r0
 800079a:	4608      	mov	r0, r1
 800079c:	4611      	mov	r1, r2
 800079e:	461a      	mov	r2, r3
 80007a0:	4623      	mov	r3, r4
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4603      	mov	r3, r0
 80007a6:	71bb      	strb	r3, [r7, #6]
 80007a8:	460b      	mov	r3, r1
 80007aa:	717b      	strb	r3, [r7, #5]
 80007ac:	4613      	mov	r3, r2
 80007ae:	713b      	strb	r3, [r7, #4]
	if(abs(y1 - y0) < abs(x1 - x0)){
 80007b0:	793a      	ldrb	r2, [r7, #4]
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007be:	7979      	ldrb	r1, [r7, #5]
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	1acb      	subs	r3, r1, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	bfb8      	it	lt
 80007c8:	425b      	neglt	r3, r3
 80007ca:	429a      	cmp	r2, r3
 80007cc:	da11      	bge.n	80007f2 <gfxDrawLine+0x60>
		if(x0 > x1){
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	797b      	ldrb	r3, [r7, #5]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d906      	bls.n	80007e4 <gfxDrawLine+0x52>
			gfxDrawLineBresenhamLow(x1,y1,x0,y0);
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	7939      	ldrb	r1, [r7, #4]
 80007dc:	7978      	ldrb	r0, [r7, #5]
 80007de:	f7ff ff31 	bl	8000644 <gfxDrawLineBresenhamLow>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
		}

	}
	//UpdateScreenRegionsToUpdate_LineDrawn(x0,y0,x1,y1);
}
 80007e2:	e017      	b.n	8000814 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamLow(x0,y0,x1,y1);
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	797a      	ldrb	r2, [r7, #5]
 80007e8:	79b9      	ldrb	r1, [r7, #6]
 80007ea:	79f8      	ldrb	r0, [r7, #7]
 80007ec:	f7ff ff2a 	bl	8000644 <gfxDrawLineBresenhamLow>
}
 80007f0:	e010      	b.n	8000814 <gfxDrawLine+0x82>
		if(y0 > y1){
 80007f2:	79ba      	ldrb	r2, [r7, #6]
 80007f4:	793b      	ldrb	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d906      	bls.n	8000808 <gfxDrawLine+0x76>
			gfxDrawLineBresenhamHigh(x1,y1,x0,y0);
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	7939      	ldrb	r1, [r7, #4]
 8000800:	7978      	ldrb	r0, [r7, #5]
 8000802:	f7ff ff73 	bl	80006ec <gfxDrawLineBresenhamHigh>
}
 8000806:	e005      	b.n	8000814 <gfxDrawLine+0x82>
			gfxDrawLineBresenhamHigh(x0,y0,x1,y1);
 8000808:	793b      	ldrb	r3, [r7, #4]
 800080a:	797a      	ldrb	r2, [r7, #5]
 800080c:	79b9      	ldrb	r1, [r7, #6]
 800080e:	79f8      	ldrb	r0, [r7, #7]
 8000810:	f7ff ff6c 	bl	80006ec <gfxDrawLineBresenhamHigh>
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}

0800081c <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000828:	e067      	b.n	80008fa <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 800082a:	4938      	ldr	r1, [pc, #224]	; (800090c <gfxFinishDrawing+0xf0>)
 800082c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	440b      	add	r3, r1
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d15b      	bne.n	80008f4 <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 800083c:	4933      	ldr	r1, [pc, #204]	; (800090c <gfxFinishDrawing+0xf0>)
 800083e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	440b      	add	r3, r1
 8000848:	3301      	adds	r3, #1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 8000850:	492e      	ldr	r1, [pc, #184]	; (800090c <gfxFinishDrawing+0xf0>)
 8000852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	440b      	add	r3, r1
 800085c:	3302      	adds	r3, #2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 8000864:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800086c:	429a      	cmp	r2, r3
 800086e:	d20b      	bcs.n	8000888 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 8000870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000874:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000878:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800087c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000880:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000884:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 8000888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088a:	2254      	movs	r2, #84	; 0x54
 800088c:	fb02 f303 	mul.w	r3, r2, r3
 8000890:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 8000892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000894:	b2d9      	uxtb	r1, r3
 8000896:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	4413      	add	r3, r2
 800089e:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <gfxFinishDrawing+0xf4>)
 80008a0:	1898      	adds	r0, r3, r2
 80008a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4603      	mov	r3, r0
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f82a 	bl	8000914 <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 80008c0:	4912      	ldr	r1, [pc, #72]	; (800090c <gfxFinishDrawing+0xf0>)
 80008c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 80008d0:	490e      	ldr	r1, [pc, #56]	; (800090c <gfxFinishDrawing+0xf0>)
 80008d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	440b      	add	r3, r1
 80008dc:	3301      	adds	r3, #1
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 80008e2:	490a      	ldr	r1, [pc, #40]	; (800090c <gfxFinishDrawing+0xf0>)
 80008e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	3302      	adds	r3, #2
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 80008f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f6:	3301      	adds	r3, #1
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fc:	2b05      	cmp	r3, #5
 80008fe:	dd94      	ble.n	800082a <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	; 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000354 	.word	0x20000354
 8000910:	2000015c 	.word	0x2000015c

08000914 <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	460b      	mov	r3, r1
 8000920:	72fb      	strb	r3, [r7, #11]
 8000922:	4613      	mov	r3, r2
 8000924:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f001 fffa 	bl	8002928 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f002 f817 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 800093a:	7dfa      	ldrb	r2, [r7, #23]
 800093c:	7db9      	ldrb	r1, [r7, #22]
 800093e:	2300      	movs	r3, #0
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f001 ff1a 	bl	800277a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 8000946:	7aba      	ldrb	r2, [r7, #10]
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f001 ff67 	bl	8002820 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f002 f818 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f001 fff5 	bl	8002948 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f002 f802 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8000964:	8c3b      	ldrh	r3, [r7, #32]
 8000966:	461a      	mov	r2, r3
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f001 fed2 	bl	8002714 <LCD_PCD8544_LL_send_data>
 8000970:	4603      	mov	r3, r0
 8000972:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f002 f807 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 800097a:	7d7b      	ldrb	r3, [r7, #21]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	; 0x70
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	603a      	str	r2, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	460b      	mov	r3, r1
 8000992:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f7ff fc1b 	bl	80001d0 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 80009a0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	461a      	mov	r2, r3
 80009ae:	79bb      	ldrb	r3, [r7, #6]
 80009b0:	4413      	add	r3, r2
 80009b2:	2b54      	cmp	r3, #84	; 0x54
 80009b4:	dd04      	ble.n	80009c0 <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 80009b6:	230e      	movs	r3, #14
 80009b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2254      	movs	r2, #84	; 0x54
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f007 fbcb 	bl	8008164 <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 80009d4:	e029      	b.n	8000a2a <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 80009d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d029      	beq.n	8000a38 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 80009e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 80009f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	461a      	mov	r2, r3
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	1898      	adds	r0, r3, r2
 8000a06:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <gfxWriteTextLineToFrameBuffer+0xf4>)
 8000a16:	4413      	add	r3, r2
 8000a18:	2206      	movs	r2, #6
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f007 fb94 	bl	8008148 <memcpy>
	for ( ; nChars<strLen; nChars++) {
 8000a20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000a24:	3301      	adds	r3, #1
 8000a26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000a2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000a2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3cf      	bcc.n	80009d6 <gfxWriteTextLineToFrameBuffer+0x52>
 8000a36:	e000      	b.n	8000a3a <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 8000a38:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2254      	movs	r2, #84	; 0x54
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 8000a44:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	0052      	lsls	r2, r2, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 8000a56:	79ba      	ldrb	r2, [r7, #6]
 8000a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <gfxWriteTextLineToFrameBuffer+0xf8>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000a64:	f107 010c 	add.w	r1, r7, #12
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f007 fb6d 	bl	8008148 <memcpy>
	//UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);

}
 8000a6e:	bf00      	nop
 8000a70:	3770      	adds	r7, #112	; 0x70
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	080097fc 	.word	0x080097fc
 8000a7c:	2000015c 	.word	0x2000015c

08000a80 <gfxDrawAxisAlignedRect>:
        }
    }
}


void gfxDrawAxisAlignedRect(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4604      	mov	r4, r0
 8000a88:	4608      	mov	r0, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4623      	mov	r3, r4
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	4603      	mov	r3, r0
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	460b      	mov	r3, r1
 8000a98:	717b      	strb	r3, [r7, #5]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	713b      	strb	r3, [r7, #4]
	gfxDrawLine(tlX,tlY, brX,tlY);
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	797a      	ldrb	r2, [r7, #5]
 8000aa2:	79b9      	ldrb	r1, [r7, #6]
 8000aa4:	79f8      	ldrb	r0, [r7, #7]
 8000aa6:	f7ff fe74 	bl	8000792 <gfxDrawLine>
	gfxDrawLine(brX,tlY, brX, brY);
 8000aaa:	793b      	ldrb	r3, [r7, #4]
 8000aac:	797a      	ldrb	r2, [r7, #5]
 8000aae:	79b9      	ldrb	r1, [r7, #6]
 8000ab0:	7978      	ldrb	r0, [r7, #5]
 8000ab2:	f7ff fe6e 	bl	8000792 <gfxDrawLine>
	gfxDrawLine(brX, brY, tlX, brY);
 8000ab6:	793b      	ldrb	r3, [r7, #4]
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	7939      	ldrb	r1, [r7, #4]
 8000abc:	7978      	ldrb	r0, [r7, #5]
 8000abe:	f7ff fe68 	bl	8000792 <gfxDrawLine>
	gfxDrawLine(tlX, brY, tlX,tlY);
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	7939      	ldrb	r1, [r7, #4]
 8000ac8:	79f8      	ldrb	r0, [r7, #7]
 8000aca:	f7ff fe62 	bl	8000792 <gfxDrawLine>


}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
	...

08000ad8 <ClearUpdateRegions>:

void ClearUpdateRegions(){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	e01c      	b.n	8000b1e <ClearUpdateRegions+0x46>
		gScreenRegionsToUpdate[i].updateColumnFinish = 0;
 8000ae4:	4913      	ldr	r1, [pc, #76]	; (8000b34 <ClearUpdateRegions+0x5c>)
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	3302      	adds	r3, #2
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000af6:	490f      	ldr	r1, [pc, #60]	; (8000b34 <ClearUpdateRegions+0x5c>)
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	3301      	adds	r3, #1
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 0;
 8000b08:	490a      	ldr	r1, [pc, #40]	; (8000b34 <ClearUpdateRegions+0x5c>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	dddf      	ble.n	8000ae4 <ClearUpdateRegions+0xc>


	}
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000354 	.word	0x20000354

08000b38 <ClearScreen>:


void ClearScreen(LCD_PCD8544_screen_t* scr){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	gfxClearFrameBuffer();
 8000b40:	f7ff fcfe 	bl	8000540 <gfxClearFrameBuffer>
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e01c      	b.n	8000b84 <ClearScreen+0x4c>
		gScreenRegionsToUpdate[i].updateColumnFinish = 83;
 8000b4a:	4913      	ldr	r1, [pc, #76]	; (8000b98 <ClearScreen+0x60>)
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	3302      	adds	r3, #2
 8000b58:	2253      	movs	r2, #83	; 0x53
 8000b5a:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 8000b5c:	490e      	ldr	r1, [pc, #56]	; (8000b98 <ClearScreen+0x60>)
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	3301      	adds	r3, #1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateNeeded = 1;
 8000b6e:	490a      	ldr	r1, [pc, #40]	; (8000b98 <ClearScreen+0x60>)
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3301      	adds	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b05      	cmp	r3, #5
 8000b88:	dddf      	ble.n	8000b4a <ClearScreen+0x12>
	}
	gfxFinishDrawing(scr);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fe46 	bl	800081c <gfxFinishDrawing>

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000354 	.word	0x20000354

08000b9c <gfxClearFrameBufferRow>:


void gfxClearFrameBufferRow(u8 rowIndex, u8 colStart, u8 amount){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	4613      	mov	r3, r2
 8000bac:	717b      	strb	r3, [r7, #5]
	u8* frameBufferStartPtr = &gFrameBuffer[(rowIndex * PIXELS_WIDTH) + colStart];
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2254      	movs	r2, #84	; 0x54
 8000bb2:	fb03 f202 	mul.w	r2, r3, r2
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <gfxClearFrameBufferRow+0x38>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

	memset(frameBufferStartPtr, 0, amount);
 8000bc0:	797b      	ldrb	r3, [r7, #5]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f007 facc 	bl	8008164 <memset>

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000015c 	.word	0x2000015c

08000bd8 <MusicPlayer_StartTune>:

void MusicPlayer_Init(TIM_HandleTypeDef* timer){

}

void MusicPlayer_StartTune(MusicNote* notes, u32 numNotes){
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	_currentTune = notes;
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <MusicPlayer_StartTune+0x3c>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6013      	str	r3, [r2, #0]
	_currentTuneNumNotes = numNotes;
 8000be8:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <MusicPlayer_StartTune+0x40>)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	6013      	str	r3, [r2, #0]
	_musicPlayerState = PLAYING;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MusicPlayer_StartTune+0x44>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
	_thisNoteTimer = 0;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MusicPlayer_StartTune+0x48>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
	_tuneTimer = 0;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MusicPlayer_StartTune+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
	_thisNoteStarted = false;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MusicPlayer_StartTune+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000368 	.word	0x20000368
 8000c18:	2000036c 	.word	0x2000036c
 8000c1c:	20000374 	.word	0x20000374
 8000c20:	2000037c 	.word	0x2000037c
 8000c24:	20000378 	.word	0x20000378
 8000c28:	20000380 	.word	0x20000380

08000c2c <MusicPlayer_TimerISR>:

void MusicPlayer_TimerISR(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	_tuneTimer += MUSIC_SEQUENCER_INTERVAL_MILLISECONDS;
 8000c32:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <MusicPlayer_TimerISR+0xb4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	330a      	adds	r3, #10
 8000c38:	4a29      	ldr	r2, [pc, #164]	; (8000ce0 <MusicPlayer_TimerISR+0xb4>)
 8000c3a:	6013      	str	r3, [r2, #0]
	if(_musicPlayerState != PLAYING){
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <MusicPlayer_TimerISR+0xb8>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d148      	bne.n	8000cd6 <MusicPlayer_TimerISR+0xaa>
		return;
	}


	if(_thisNoteStarted == false){
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MusicPlayer_TimerISR+0xbc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d119      	bne.n	8000c80 <MusicPlayer_TimerISR+0x54>
		Buzzer_Note(_currentTune[_currentTunePosition++].note);
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MusicPlayer_TimerISR+0xc0>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	1c59      	adds	r1, r3, #1
 8000c56:	4826      	ldr	r0, [pc, #152]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c58:	6001      	str	r1, [r0, #0]
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fc4f 	bl	8000504 <Buzzer_Note>
		if(_currentTunePosition == _currentTuneNumNotes){
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MusicPlayer_TimerISR+0xc8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d102      	bne.n	8000c78 <MusicPlayer_TimerISR+0x4c>
			_currentTunePosition = 0;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
		}
		_thisNoteStarted = true;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MusicPlayer_TimerISR+0xbc>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	e02b      	b.n	8000cd8 <MusicPlayer_TimerISR+0xac>
	}
	else{
		u32 duration = _currentTunePosition == 0 ? _currentTune[_currentTuneNumNotes - 1].duration : _currentTune
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10a      	bne.n	8000c9e <MusicPlayer_TimerISR+0x72>
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MusicPlayer_TimerISR+0xc0>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MusicPlayer_TimerISR+0xc8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000c94:	3b01      	subs	r3, #1
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4413      	add	r3, r2
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	e009      	b.n	8000cb2 <MusicPlayer_TimerISR+0x86>
				[_currentTunePosition - 1].duration;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MusicPlayer_TimerISR+0xc0>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MusicPlayer_TimerISR+0xc4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000caa:	3b01      	subs	r3, #1
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	4413      	add	r3, r2
		u32 duration = _currentTunePosition == 0 ? _currentTune[_currentTuneNumNotes - 1].duration : _currentTune
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	607b      	str	r3, [r7, #4]
		if(_thisNoteTimer > duration){
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MusicPlayer_TimerISR+0xcc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d205      	bcs.n	8000cca <MusicPlayer_TimerISR+0x9e>
			_thisNoteStarted = false;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MusicPlayer_TimerISR+0xbc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
			_thisNoteTimer = 0;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MusicPlayer_TimerISR+0xcc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
		}
		_thisNoteTimer += MUSIC_SEQUENCER_INTERVAL_MILLISECONDS;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MusicPlayer_TimerISR+0xcc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	330a      	adds	r3, #10
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <MusicPlayer_TimerISR+0xcc>)
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e000      	b.n	8000cd8 <MusicPlayer_TimerISR+0xac>
		return;
 8000cd6:	bf00      	nop
	}

}
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000378 	.word	0x20000378
 8000ce4:	20000374 	.word	0x20000374
 8000ce8:	20000380 	.word	0x20000380
 8000cec:	20000368 	.word	0x20000368
 8000cf0:	20000370 	.word	0x20000370
 8000cf4:	2000036c 	.word	0x2000036c
 8000cf8:	2000037c 	.word	0x2000037c

08000cfc <GetStateAtXY>:
static u8* _TetrisPieces[NUM_TETRIS_PIECES]  = {_ZPieceOccupiedIndicies, _SPieceOccupiedIndicies,_OPieceOccupiedIndicies,_LPieceOccupiedIndicies,_TPieceOccupiedIndicies,_JPieceOccupiedIndicies,_IPieceOccupiedIndices, };




static BOARD_CELL_STATE GetStateAtXY(u8 x, u8 y){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71bb      	strb	r3, [r7, #6]
	return (_gameBoardArray[y] & (1 << x)) == 0 ? EMPTY : FULL;
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <GetStateAtXY+0x3c>)
 8000d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d14:	461a      	mov	r2, r3
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	fa42 f303 	asr.w	r3, r2, r3
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000384 	.word	0x20000384

08000d3c <SetStateAtXY>:

static void SetStateAtXY(u8 x, u8 y, BOARD_CELL_STATE newCellState){
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
 8000d46:	460b      	mov	r3, r1
 8000d48:	71bb      	strb	r3, [r7, #6]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	717b      	strb	r3, [r7, #5]
	if(newCellState == FULL){
 8000d4e:	797b      	ldrb	r3, [r7, #5]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d111      	bne.n	8000d78 <SetStateAtXY+0x3c>
		_gameBoardArray[y] |= (1 << x);
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <SetStateAtXY+0x70>)
 8000d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2101      	movs	r1, #1
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	b291      	uxth	r1, r2
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <SetStateAtXY+0x70>)
 8000d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	else{
		_gameBoardArray[y] &= ~(1 << x);
	}
}
 8000d76:	e012      	b.n	8000d9e <SetStateAtXY+0x62>
		_gameBoardArray[y] &= ~(1 << x);
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <SetStateAtXY+0x70>)
 8000d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2101      	movs	r1, #1
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	b291      	uxth	r1, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <SetStateAtXY+0x70>)
 8000d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000384 	.word	0x20000384

08000db0 <Tetris_DrawCurentPiece>:




static void Tetris_DrawCurentPiece(){
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <Tetris_DrawCurentPiece+0xb8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <Tetris_DrawCurentPiece+0xb8>)
 8000dbc:	7912      	ldrb	r2, [r2, #4]
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	e045      	b.n	8000e56 <Tetris_DrawCurentPiece+0xa6>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	0052      	lsls	r2, r2, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	0052      	lsls	r2, r2, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = (_currentPiece.TopLeftX * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <Tetris_DrawCurentPiece+0xb8>)
 8000df4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	0052      	lsls	r2, r2, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	4413      	add	r3, r2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (_currentPiece.TopLeftY * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <Tetris_DrawCurentPiece+0xb8>)
 8000e0c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	0052      	lsls	r2, r2, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	70fb      	strb	r3, [r7, #3]

		if(yCoordToDrawAt >= 0){
 8000e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db12      	blt.n	8000e50 <Tetris_DrawCurentPiece+0xa0>
			_drawActiveBlock(
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <Tetris_DrawCurentPiece+0xbc>)
 8000e2c:	681c      	ldr	r4, [r3, #0]
 8000e2e:	793a      	ldrb	r2, [r7, #4]
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <Tetris_DrawCurentPiece+0xc0>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	b2d8      	uxtb	r0, r3
 8000e38:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000e3a:	793a      	ldrb	r2, [r7, #4]
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <Tetris_DrawCurentPiece+0xc0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000e44:	3303      	adds	r3, #3
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	3303      	adds	r3, #3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	ddb6      	ble.n	8000dca <Tetris_DrawCurentPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}

	}
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200003bc 	.word	0x200003bc
 8000e6c:	200003a8 	.word	0x200003a8
 8000e70:	20000070 	.word	0x20000070

08000e74 <Tetris_DrawNextPiece>:

static void Tetris_DrawNextPiece(){
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _nextPiece.OccupiedIndiciesForRotations + (_nextPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8000e7a:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <Tetris_DrawNextPiece+0x94>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <Tetris_DrawNextPiece+0x94>)
 8000e80:	7912      	ldrb	r2, [r2, #4]
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	e033      	b.n	8000ef6 <Tetris_DrawNextPiece+0x82>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER) * BOX_WIDTH;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	0052      	lsls	r2, r2, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER) * BOX_HEIGHT;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	0052      	lsls	r2, r2, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	717b      	strb	r3, [r7, #5]
		i8 xCoordToDrawAt = ((TETRIS_BOARD_COLUMNS+1) * BOX_WIDTH) + thisSquareXOffsetFromTL;
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	3321      	adds	r3, #33	; 0x21
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	713b      	strb	r3, [r7, #4]
		i8 yCoordToDrawAt = (0 * BOX_HEIGHT) + thisSquareYOffsetFromTL;
 8000ebe:	797b      	ldrb	r3, [r7, #5]
 8000ec0:	70fb      	strb	r3, [r7, #3]
		if(yCoordToDrawAt >= 0){
 8000ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db12      	blt.n	8000ef0 <Tetris_DrawNextPiece+0x7c>
			_drawActiveBlock(
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <Tetris_DrawNextPiece+0x98>)
 8000ecc:	681c      	ldr	r4, [r3, #0]
 8000ece:	793a      	ldrb	r2, [r7, #4]
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <Tetris_DrawNextPiece+0x9c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b2d8      	uxtb	r0, r3
 8000ed8:	78f9      	ldrb	r1, [r7, #3]
					xCoordToDrawAt + _GameBoardXOffset,
					yCoordToDrawAt,
					xCoordToDrawAt + BOX_WIDTH + _GameBoardXOffset,
 8000eda:	793a      	ldrb	r2, [r7, #4]
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <Tetris_DrawNextPiece+0x9c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b2db      	uxtb	r3, r3
			_drawActiveBlock(
 8000ee4:	3303      	adds	r3, #3
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	3303      	adds	r3, #3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	47a0      	blx	r4
	for(int i=0;i<MAGIC_TETRIS_NUMBER; i++){
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	ddc8      	ble.n	8000e8e <Tetris_DrawNextPiece+0x1a>
					yCoordToDrawAt + BOX_HEIGHT
			);
		}
	}
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200003c4 	.word	0x200003c4
 8000f0c:	200003a8 	.word	0x200003a8
 8000f10:	20000070 	.word	0x20000070

08000f14 <Tetris_DrawTetrisBoard>:

void Tetris_DrawTetrisBoard(bool drawNextPiece){
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	_drawRect(
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <Tetris_DrawTetrisBoard+0xe0>)
 8000f20:	681c      	ldr	r4, [r3, #0]
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <Tetris_DrawTetrisBoard+0xe4>)
 8000f24:	7818      	ldrb	r0, [r3, #0]
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <Tetris_DrawTetrisBoard+0xe8>)
 8000f28:	7819      	ldrb	r1, [r3, #0]
 8000f2a:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <Tetris_DrawTetrisBoard+0xe4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	331e      	adds	r3, #30
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <Tetris_DrawTetrisBoard+0xe8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	332d      	adds	r3, #45	; 0x2d
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	47a0      	blx	r4
			_GameBoardXOffset,
			_GameBoardYOffset,
			_GameBoardXOffset + BOX_WIDTH * TETRIS_BOARD_COLUMNS,
			_GameBoardYOffset + BOX_WIDTH * TETRIS_BOARD_ROWS);
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e049      	b.n	8000fd6 <Tetris_DrawTetrisBoard+0xc2>
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	e040      	b.n	8000fca <Tetris_DrawTetrisBoard+0xb6>
			if(GetStateAtXY(col,row) == FULL){
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fed2 	bl	8000cfc <GetStateAtXY>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d132      	bne.n	8000fc4 <Tetris_DrawTetrisBoard+0xb0>

				u8 tlX = _GameBoardXOffset + col * BOX_WIDTH;
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	0052      	lsls	r2, r2, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <Tetris_DrawTetrisBoard+0xe4>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	73fb      	strb	r3, [r7, #15]
				u8 tlY = _GameBoardYOffset + row * BOX_HEIGHT;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	0052      	lsls	r2, r2, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <Tetris_DrawTetrisBoard+0xe8>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	73bb      	strb	r3, [r7, #14]
				u8 brX = _GameBoardXOffset + (col * BOX_WIDTH) + BOX_WIDTH;
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	0052      	lsls	r2, r2, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <Tetris_DrawTetrisBoard+0xe4>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3303      	adds	r3, #3
 8000f9c:	737b      	strb	r3, [r7, #13]
				u8 brY = _GameBoardYOffset + (row * BOX_HEIGHT) + BOX_HEIGHT;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	0052      	lsls	r2, r2, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <Tetris_DrawTetrisBoard+0xe8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3303      	adds	r3, #3
 8000fb4:	733b      	strb	r3, [r7, #12]

				_drawStationaryBlock(tlX,tlY,brX,brY);
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <Tetris_DrawTetrisBoard+0xec>)
 8000fb8:	681c      	ldr	r4, [r3, #0]
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	7b7a      	ldrb	r2, [r7, #13]
 8000fbe:	7bb9      	ldrb	r1, [r7, #14]
 8000fc0:	7bf8      	ldrb	r0, [r7, #15]
 8000fc2:	47a0      	blx	r4
		for(int col=0; col<TETRIS_BOARD_COLUMNS; col++){
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	ddbb      	ble.n	8000f48 <Tetris_DrawTetrisBoard+0x34>
	for(int row=0; row<TETRIS_BOARD_ROWS; row++){
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	2b0e      	cmp	r3, #14
 8000fda:	ddb2      	ble.n	8000f42 <Tetris_DrawTetrisBoard+0x2e>
			}
		}
	}
	Tetris_DrawCurentPiece();
 8000fdc:	f7ff fee8 	bl	8000db0 <Tetris_DrawCurentPiece>
	if(drawNextPiece == true){
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <Tetris_DrawTetrisBoard+0xd6>
		Tetris_DrawNextPiece();
 8000fe6:	f7ff ff45 	bl	8000e74 <Tetris_DrawNextPiece>
	}
}
 8000fea:	bf00      	nop
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200003a4 	.word	0x200003a4
 8000ff8:	20000070 	.word	0x20000070
 8000ffc:	200003cc 	.word	0x200003cc
 8001000:	200003ac 	.word	0x200003ac

08001004 <InitNewCurrentPiece>:

static void InitNewCurrentPiece(){
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX = 2;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <InitNewCurrentPiece+0x30>)
 800100a:	2202      	movs	r2, #2
 800100c:	715a      	strb	r2, [r3, #5]
	_currentPiece.TopLeftY = -2;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <InitNewCurrentPiece+0x30>)
 8001010:	22fe      	movs	r2, #254	; 0xfe
 8001012:	719a      	strb	r2, [r3, #6]
	_currentPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <InitNewCurrentPiece+0x34>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4798      	blx	r3
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <InitNewCurrentPiece+0x38>)
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	4a03      	ldr	r2, [pc, #12]	; (8001034 <InitNewCurrentPiece+0x30>)
 8001026:	6013      	str	r3, [r2, #0]
	_currentPiece.CurrentRotation = 0;
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <InitNewCurrentPiece+0x30>)
 800102a:	2200      	movs	r2, #0
 800102c:	711a      	strb	r2, [r3, #4]
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200003bc 	.word	0x200003bc
 8001038:	200003b0 	.word	0x200003b0
 800103c:	20000074 	.word	0x20000074

08001040 <InitNewNextPiece>:

static void InitNewNextPiece(){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	_nextPiece.TopLeftX = 2;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <InitNewNextPiece+0x30>)
 8001046:	2202      	movs	r2, #2
 8001048:	715a      	strb	r2, [r3, #5]
	_nextPiece.TopLeftY = -2;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <InitNewNextPiece+0x30>)
 800104c:	22fe      	movs	r2, #254	; 0xfe
 800104e:	719a      	strb	r2, [r3, #6]
	_nextPiece.OccupiedIndiciesForRotations = _TetrisPieces[_getNextBlockIndex()];
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <InitNewNextPiece+0x34>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4798      	blx	r3
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <InitNewNextPiece+0x38>)
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	4a03      	ldr	r2, [pc, #12]	; (8001070 <InitNewNextPiece+0x30>)
 8001062:	6013      	str	r3, [r2, #0]
	_nextPiece.CurrentRotation = 0;
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <InitNewNextPiece+0x30>)
 8001066:	2200      	movs	r2, #0
 8001068:	711a      	strb	r2, [r3, #4]
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200003c4 	.word	0x200003c4
 8001074:	200003b0 	.word	0x200003b0
 8001078:	20000074 	.word	0x20000074

0800107c <CopyNextPieceToCurrent>:

static void CopyNextPieceToCurrent(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	memcpy(&_currentPiece, &_nextPiece, sizeof(TetrisPiece));
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <CopyNextPieceToCurrent+0x1c>)
 8001082:	4a06      	ldr	r2, [pc, #24]	; (800109c <CopyNextPieceToCurrent+0x20>)
 8001084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001088:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200003bc 	.word	0x200003bc
 800109c:	200003c4 	.word	0x200003c4

080010a0 <Tetris_ResetTetrisBoard>:

void Tetris_ResetTetrisBoard(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	memset(_gameBoardArray,EMPTY,sizeof(_gameBoardArray));
 80010a4:	221e      	movs	r2, #30
 80010a6:	2100      	movs	r1, #0
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <Tetris_ResetTetrisBoard+0x1c>)
 80010aa:	f007 f85b 	bl	8008164 <memset>
	InitNewCurrentPiece();
 80010ae:	f7ff ffa9 	bl	8001004 <InitNewCurrentPiece>
	InitNewNextPiece();
 80010b2:	f7ff ffc5 	bl	8001040 <InitNewNextPiece>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000384 	.word	0x20000384

080010c0 <Tetris_Init>:
		TetrisDrawRect drawRect,
		TetrisDrawStationaryBlock drawStationaryBlock,
		TetrisDrawActiveBlock drawActiveBlock,
		TetrisGetNextBlockIndex getNextBlockIndex,
		TetrisLinesClearedCallback onLinesCleared,
		TetrisGameOverCallback onGameOver){
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
	_drawRect = drawRect;
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <Tetris_Init+0x40>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6013      	str	r3, [r2, #0]
	_drawStationaryBlock =  drawStationaryBlock;
 80010d4:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <Tetris_Init+0x44>)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	6013      	str	r3, [r2, #0]
	_drawActiveBlock = drawActiveBlock;
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <Tetris_Init+0x48>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6013      	str	r3, [r2, #0]
	_getNextBlockIndex = getNextBlockIndex;
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <Tetris_Init+0x4c>)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	6013      	str	r3, [r2, #0]
	_onLinesCleared = onLinesCleared;
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <Tetris_Init+0x50>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6013      	str	r3, [r2, #0]
	_onGameOver = onGameOver;
 80010ec:	4a09      	ldr	r2, [pc, #36]	; (8001114 <Tetris_Init+0x54>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	6013      	str	r3, [r2, #0]
	//Tetris_ResetTetrisBoard();
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200003a4 	.word	0x200003a4
 8001104:	200003ac 	.word	0x200003ac
 8001108:	200003a8 	.word	0x200003a8
 800110c:	200003b0 	.word	0x200003b0
 8001110:	200003b4 	.word	0x200003b4
 8001114:	200003b8 	.word	0x200003b8

08001118 <IsBlockAllowedToBeHere>:

static bool IsBlockAllowedToBeHere(i8 x, i8 y){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
	if((y < 0) && (x>=0 && x < TETRIS_BOARD_COLUMNS)){
 8001128:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800112c:	2b00      	cmp	r3, #0
 800112e:	da09      	bge.n	8001144 <IsBlockAllowedToBeHere+0x2c>
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db05      	blt.n	8001144 <IsBlockAllowedToBeHere+0x2c>
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b09      	cmp	r3, #9
 800113e:	dc01      	bgt.n	8001144 <IsBlockAllowedToBeHere+0x2c>
		return true;
 8001140:	2301      	movs	r3, #1
 8001142:	e01b      	b.n	800117c <IsBlockAllowedToBeHere+0x64>
	}
	if(GetStateAtXY(x, y) == FULL){
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	79ba      	ldrb	r2, [r7, #6]
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fdd6 	bl	8000cfc <GetStateAtXY>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <IsBlockAllowedToBeHere+0x42>
		return false;
 8001156:	2300      	movs	r3, #0
 8001158:	e010      	b.n	800117c <IsBlockAllowedToBeHere+0x64>
	}
	if(x >= TETRIS_BOARD_COLUMNS || y >= TETRIS_BOARD_ROWS){
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b09      	cmp	r3, #9
 8001160:	dc03      	bgt.n	800116a <IsBlockAllowedToBeHere+0x52>
 8001162:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001166:	2b0e      	cmp	r3, #14
 8001168:	dd01      	ble.n	800116e <IsBlockAllowedToBeHere+0x56>
		return false;
 800116a:	2300      	movs	r3, #0
 800116c:	e006      	b.n	800117c <IsBlockAllowedToBeHere+0x64>
	}
	if(x < 0){
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	da01      	bge.n	800117a <IsBlockAllowedToBeHere+0x62>
		return false;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <IsBlockAllowedToBeHere+0x64>
	}
	return true;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <WriteCurrentPieceToGameBoardArray>:

static bool WriteCurrentPieceToGameBoardArray(){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <WriteCurrentPieceToGameBoardArray+0x88>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1f      	ldr	r2, [pc, #124]	; (800120c <WriteCurrentPieceToGameBoardArray+0x88>)
 8001190:	7912      	ldrb	r2, [r2, #4]
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4413      	add	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e02e      	b.n	80011fc <WriteCurrentPieceToGameBoardArray+0x78>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	4413      	add	r3, r2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <WriteCurrentPieceToGameBoardArray+0x88>)
 80011b8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	4413      	add	r3, r2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <WriteCurrentPieceToGameBoardArray+0x88>)
 80011c8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	797b      	ldrb	r3, [r7, #5]
 80011d0:	4413      	add	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	70fb      	strb	r3, [r7, #3]
		if(yCoord < 0){
 80011d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da01      	bge.n	80011e2 <WriteCurrentPieceToGameBoardArray+0x5e>
			return true;
 80011de:	2301      	movs	r3, #1
 80011e0:	e010      	b.n	8001204 <WriteCurrentPieceToGameBoardArray+0x80>
		}
		if(yCoord >= 0){
 80011e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db05      	blt.n	80011f6 <WriteCurrentPieceToGameBoardArray+0x72>
			SetStateAtXY(xCoord,yCoord,FULL);
 80011ea:	793b      	ldrb	r3, [r7, #4]
 80011ec:	78f9      	ldrb	r1, [r7, #3]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fda3 	bl	8000d3c <SetStateAtXY>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	ddcd      	ble.n	800119e <WriteCurrentPieceToGameBoardArray+0x1a>
		}
	}
	return false;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200003bc 	.word	0x200003bc

08001210 <IsMoveValid>:

static u8 IsMoveValid(){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
	u8* thisRotationIndicies = _currentPiece.OccupiedIndiciesForRotations + (_currentPiece.CurrentRotation * MAGIC_TETRIS_NUMBER);
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <IsMoveValid+0x84>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <IsMoveValid+0x84>)
 800121c:	7912      	ldrb	r2, [r2, #4]
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4413      	add	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e02b      	b.n	8001282 <IsMoveValid+0x72>
		u8 thisOffsetIndex = thisRotationIndicies[i];
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
		u8 thisSquareXOffsetFromTL = (thisOffsetIndex % MAGIC_TETRIS_NUMBER);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	71bb      	strb	r3, [r7, #6]
		u8 thisSquareYOffsetFromTL = (thisOffsetIndex / MAGIC_TETRIS_NUMBER);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	717b      	strb	r3, [r7, #5]
		i8 xCoord = (_currentPiece.TopLeftX) + thisSquareXOffsetFromTL;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <IsMoveValid+0x84>)
 8001244:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	4413      	add	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	713b      	strb	r3, [r7, #4]
		i8 yCoord = (_currentPiece.TopLeftY) + thisSquareYOffsetFromTL;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <IsMoveValid+0x84>)
 8001254:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	4413      	add	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	70fb      	strb	r3, [r7, #3]
		if(IsBlockAllowedToBeHere(xCoord,yCoord) == false){
 8001262:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001266:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff53 	bl	8001118 <IsBlockAllowedToBeHere>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <IsMoveValid+0x6c>
			return 0;
 8001278:	2300      	movs	r3, #0
 800127a:	e006      	b.n	800128a <IsMoveValid+0x7a>
	for(int i=0; i< MAGIC_TETRIS_NUMBER; i++){
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3301      	adds	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b03      	cmp	r3, #3
 8001286:	ddd0      	ble.n	800122a <IsMoveValid+0x1a>
		}
	}
	return 1;
 8001288:	2301      	movs	r3, #1
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200003bc 	.word	0x200003bc

08001298 <CheckForAndClearLines>:

static u8 CheckForAndClearLines(){
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
	u8 linesToClear = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	71fb      	strb	r3, [r7, #7]
	bool lastLineWasCleared = false;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71bb      	strb	r3, [r7, #6]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 80012a6:	230e      	movs	r3, #14
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	e027      	b.n	80012fc <CheckForAndClearLines+0x64>
		if(_gameBoardArray[i] == 1023){
 80012ac:	4a18      	ldr	r2, [pc, #96]	; (8001310 <CheckForAndClearLines+0x78>)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d105      	bne.n	80012c8 <CheckForAndClearLines+0x30>
			linesToClear++;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	3301      	adds	r3, #1
 80012c0:	71fb      	strb	r3, [r7, #7]
			lastLineWasCleared = true;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71bb      	strb	r3, [r7, #6]
 80012c6:	e001      	b.n	80012cc <CheckForAndClearLines+0x34>
		}
		else{
			lastLineWasCleared = false;
 80012c8:	2300      	movs	r3, #0
 80012ca:	71bb      	strb	r3, [r7, #6]
		}

		if(linesToClear > 0 && lastLineWasCleared == false){
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d011      	beq.n	80012f6 <CheckForAndClearLines+0x5e>
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10e      	bne.n	80012f6 <CheckForAndClearLines+0x5e>
			_gameBoardArray[i+linesToClear] = _gameBoardArray[i];
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	490c      	ldr	r1, [pc, #48]	; (8001310 <CheckForAndClearLines+0x78>)
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <CheckForAndClearLines+0x78>)
 80012e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			_gameBoardArray[i] = 0;
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <CheckForAndClearLines+0x78>)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2100      	movs	r1, #0
 80012f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=TETRIS_BOARD_ROWS-1; i>=0; i--){
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dad4      	bge.n	80012ac <CheckForAndClearLines+0x14>
		}

	}
	return linesToClear;
 8001302:	79fb      	ldrb	r3, [r7, #7]
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20000384 	.word	0x20000384

08001314 <Tetris_Rotate>:

void Tetris_Rotate(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	_currentPiece.CurrentRotation++;
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <Tetris_Rotate+0x48>)
 800131a:	791b      	ldrb	r3, [r3, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <Tetris_Rotate+0x48>)
 8001322:	711a      	strb	r2, [r3, #4]
	if(_currentPiece.CurrentRotation >= MAGIC_TETRIS_NUMBER){
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <Tetris_Rotate+0x48>)
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d902      	bls.n	8001332 <Tetris_Rotate+0x1e>
		_currentPiece.CurrentRotation = 0;
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <Tetris_Rotate+0x48>)
 800132e:	2200      	movs	r2, #0
 8001330:	711a      	strb	r2, [r3, #4]
	}
	if(IsMoveValid() == 0){
 8001332:	f7ff ff6d 	bl	8001210 <IsMoveValid>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10d      	bne.n	8001358 <Tetris_Rotate+0x44>
		if(_currentPiece.CurrentRotation == 0){
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <Tetris_Rotate+0x48>)
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <Tetris_Rotate+0x38>
			_currentPiece.CurrentRotation = MAGIC_TETRIS_NUMBER - 1;
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <Tetris_Rotate+0x48>)
 8001346:	2203      	movs	r2, #3
 8001348:	711a      	strb	r2, [r3, #4]
		}
		else{
			_currentPiece.CurrentRotation--;
		}
	}
}
 800134a:	e005      	b.n	8001358 <Tetris_Rotate+0x44>
			_currentPiece.CurrentRotation--;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <Tetris_Rotate+0x48>)
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	3b01      	subs	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b01      	ldr	r3, [pc, #4]	; (800135c <Tetris_Rotate+0x48>)
 8001356:	711a      	strb	r2, [r3, #4]
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200003bc 	.word	0x200003bc

08001360 <Tetris_MoveDown>:

MoveDownResult Tetris_MoveDown(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftY++;
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <Tetris_MoveDown+0x80>)
 8001368:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	b25a      	sxtb	r2, r3
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <Tetris_MoveDown+0x80>)
 8001376:	719a      	strb	r2, [r3, #6]
	if(IsMoveValid() == 0){
 8001378:	f7ff ff4a 	bl	8001210 <IsMoveValid>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d128      	bne.n	80013d4 <Tetris_MoveDown+0x74>
		_currentPiece.TopLeftY--;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <Tetris_MoveDown+0x80>)
 8001384:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	3b01      	subs	r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	b25a      	sxtb	r2, r3
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <Tetris_MoveDown+0x80>)
 8001392:	719a      	strb	r2, [r3, #6]
		bool hasGameOverOccured = WriteCurrentPieceToGameBoardArray();
 8001394:	f7ff fef6 	bl	8001184 <WriteCurrentPieceToGameBoardArray>
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
		u8 linesCleared = CheckForAndClearLines();
 800139c:	f7ff ff7c 	bl	8001298 <CheckForAndClearLines>
 80013a0:	4603      	mov	r3, r0
 80013a2:	71bb      	strb	r3, [r7, #6]
		CopyNextPieceToCurrent();
 80013a4:	f7ff fe6a 	bl	800107c <CopyNextPieceToCurrent>
		InitNewNextPiece();
 80013a8:	f7ff fe4a 	bl	8001040 <InitNewNextPiece>
		if(hasGameOverOccured == true){
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d106      	bne.n	80013c0 <Tetris_MoveDown+0x60>
			_onGameOver();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <Tetris_MoveDown+0x84>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4798      	blx	r3
			Tetris_ResetTetrisBoard();
 80013b8:	f7ff fe72 	bl	80010a0 <Tetris_ResetTetrisBoard>
			return MoveDownResultGameOver;
 80013bc:	2303      	movs	r3, #3
 80013be:	e00a      	b.n	80013d6 <Tetris_MoveDown+0x76>
		}
		if(linesCleared > 0){
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <Tetris_MoveDown+0x70>
			_onLinesCleared(linesCleared);
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <Tetris_MoveDown+0x88>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	4610      	mov	r0, r2
 80013ce:	4798      	blx	r3
		}
		return Settled;
 80013d0:	2302      	movs	r3, #2
 80013d2:	e000      	b.n	80013d6 <Tetris_MoveDown+0x76>

	}
	return StillMoving;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200003bc 	.word	0x200003bc
 80013e4:	200003b8 	.word	0x200003b8
 80013e8:	200003b4 	.word	0x200003b4

080013ec <Tetris_MoveLeft>:

void Tetris_MoveLeft(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX--;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <Tetris_MoveLeft+0x38>)
 80013f2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <Tetris_MoveLeft+0x38>)
 8001400:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 8001402:	f7ff ff05 	bl	8001210 <IsMoveValid>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d108      	bne.n	800141e <Tetris_MoveLeft+0x32>
		_currentPiece.TopLeftX++;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <Tetris_MoveLeft+0x38>)
 800140e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	3301      	adds	r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	b25a      	sxtb	r2, r3
 800141a:	4b02      	ldr	r3, [pc, #8]	; (8001424 <Tetris_MoveLeft+0x38>)
 800141c:	715a      	strb	r2, [r3, #5]
	}
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200003bc 	.word	0x200003bc

08001428 <Tetris_MoveRight>:

void Tetris_MoveRight(){
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	_currentPiece.TopLeftX++;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <Tetris_MoveRight+0x38>)
 800142e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	b25a      	sxtb	r2, r3
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <Tetris_MoveRight+0x38>)
 800143c:	715a      	strb	r2, [r3, #5]
	if(IsMoveValid() == 0){
 800143e:	f7ff fee7 	bl	8001210 <IsMoveValid>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d108      	bne.n	800145a <Tetris_MoveRight+0x32>
		_currentPiece.TopLeftX--;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <Tetris_MoveRight+0x38>)
 800144a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3b01      	subs	r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	b25a      	sxtb	r2, r3
 8001456:	4b02      	ldr	r3, [pc, #8]	; (8001460 <Tetris_MoveRight+0x38>)
 8001458:	715a      	strb	r2, [r3, #5]
	}
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200003bc 	.word	0x200003bc

08001464 <WriteSingleHighScoreToFrameBuffer>:
static i8 _settingInitial = 0;
static u32 _blinkTimer = 0;
static bool _blinkState = true; /* True if the initial being set is currently drawn to frame buffer, false otherwise */
static bool _isAnalogStickExtended = false; /* Is the analog stick moved far enough in any one direction to count as "extended" */

static void WriteSingleHighScoreToFrameBuffer(const HighScore* highScore, u8 line){
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af02      	add	r7, sp, #8
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
	char highScoreLineBuffer[10];
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
		highScore->Initials[0],
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 8001474:	4619      	mov	r1, r3
		highScore->Initials[1],
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	785b      	ldrb	r3, [r3, #1]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 800147a:	461c      	mov	r4, r3
		highScore->Initials[2],
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	789b      	ldrb	r3, [r3, #2]
	sprintf(highScoreLineBuffer,"%c%c%c %lu",
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f107 000c 	add.w	r0, r7, #12
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	4623      	mov	r3, r4
 8001490:	460a      	mov	r2, r1
 8001492:	4907      	ldr	r1, [pc, #28]	; (80014b0 <WriteSingleHighScoreToFrameBuffer+0x4c>)
 8001494:	f006 feda 	bl	800824c <siprintf>
		highScore->Score);
	gfxWriteTextLineToFrameBuffer(line,0,highScoreLineBuffer);
 8001498:	f107 020c 	add.w	r2, r7, #12
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fa6f 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	bf00      	nop
 80014b0:	080095f4 	.word	0x080095f4

080014b4 <DrawHighScoresToFrameBuffer>:

static void DrawHighScoresToFrameBuffer(){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e010      	b.n	80014e2 <DrawHighScoresToFrameBuffer+0x2e>
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(i);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fda9 	bl	800201c <TetrisHighScores_GetHighScoreAtIndex>
 80014ca:	6038      	str	r0, [r7, #0]
		WriteSingleHighScoreToFrameBuffer(highScore, i+1);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f7ff ffc4 	bl	8001464 <WriteSingleHighScoreToFrameBuffer>
	for(u32 i=0; i < NUM_HIGHSCORES_SAVED; i++){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d9eb      	bls.n	80014c0 <DrawHighScoresToFrameBuffer+0xc>
	}

}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <BlinkInitialBeingSet>:

static void BlinkInitialBeingSet(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	if(_blinkState == true){
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <BlinkInitialBeingSet+0x8c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d11e      	bne.n	8001540 <BlinkInitialBeingSet+0x4c>
		_blinkState = false;
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <BlinkInitialBeingSet+0x8c>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
		u8 colStart = _settingInitial * LCD_PCD8544_CHAR_WIDTH;
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <BlinkInitialBeingSet+0x90>)
 800150a:	f993 3000 	ldrsb.w	r3, [r3]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	0052      	lsls	r2, r2, #1
 8001514:	4413      	add	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	71fb      	strb	r3, [r7, #7]
		u8 row = _newHighScoreRank + 1;
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <BlinkInitialBeingSet+0x94>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	71bb      	strb	r3, [r7, #6]
		gfxClearFrameBufferRow(row,colStart,LCD_PCD8544_CHAR_WIDTH);
 8001522:	79f9      	ldrb	r1, [r7, #7]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	2206      	movs	r2, #6
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fb37 	bl	8000b9c <gfxClearFrameBufferRow>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,colStart + LCD_PCD8544_CHAR_WIDTH);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3306      	adds	r3, #6
 8001532:	b2db      	uxtb	r3, r3
 8001534:	79b9      	ldrb	r1, [r7, #6]
 8001536:	79b8      	ldrb	r0, [r7, #6]
 8001538:	2200      	movs	r2, #0
 800153a:	f7ff f847 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
 800153e:	e017      	b.n	8001570 <BlinkInitialBeingSet+0x7c>
	}
	else{
		_blinkState = true;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <BlinkInitialBeingSet+0x8c>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
		u8 row = _newHighScoreRank + 1;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <BlinkInitialBeingSet+0x94>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
		const HighScore* highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <BlinkInitialBeingSet+0x94>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fd62 	bl	800201c <TetrisHighScores_GetHighScoreAtIndex>
 8001558:	60b8      	str	r0, [r7, #8]
		WriteSingleHighScoreToFrameBuffer(highScore, row);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4619      	mov	r1, r3
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f7ff ff80 	bl	8001464 <WriteSingleHighScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(row,row,0,LCD_PCD8544_CHAR_WIDTH*3);
 8001564:	7bf9      	ldrb	r1, [r7, #15]
 8001566:	7bf8      	ldrb	r0, [r7, #15]
 8001568:	2312      	movs	r3, #18
 800156a:	2200      	movs	r2, #0
 800156c:	f7ff f82e 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	}
	gfxFinishDrawing(&gLcdScreen);
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <BlinkInitialBeingSet+0x98>)
 8001572:	f7ff f953 	bl	800081c <gfxFinishDrawing>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000090 	.word	0x20000090
 8001584:	200003d5 	.word	0x200003d5
 8001588:	200003d4 	.word	0x200003d4
 800158c:	2000066c 	.word	0x2000066c

08001590 <TetrisEnterHighScore_Update>:

Tetris_Modes_StateTriggers TetrisEnterHighScore_Update(u32 timePassed){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	else{
		_isAnalogStickExtended = false;
	}
	*/
	HighScore* highScore;
	switch(EmulateDPad(&hadc2)){
 8001598:	4858      	ldr	r0, [pc, #352]	; (80016fc <TetrisEnterHighScore_Update+0x16c>)
 800159a:	f7fe febd 	bl	8000318 <EmulateDPad>
 800159e:	4603      	mov	r3, r0
 80015a0:	3b01      	subs	r3, #1
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	f200 808a 	bhi.w	80016bc <TetrisEnterHighScore_Update+0x12c>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <TetrisEnterHighScore_Update+0x20>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	0800160d 	.word	0x0800160d
 80015b8:	08001659 	.word	0x08001659
 80015bc:	0800168b 	.word	0x0800168b
	case UP:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 80015c0:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <TetrisEnterHighScore_Update+0x170>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fd29 	bl	800201c <TetrisHighScores_GetHighScoreAtIndex>
 80015ca:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]++;
 80015cc:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 80015ce:	f993 3000 	ldrsb.w	r3, [r3]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	5cd2      	ldrb	r2, [r2, r3]
 80015d6:	3201      	adds	r2, #1
 80015d8:	b2d1      	uxtb	r1, r2
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] > 'Z'){
 80015de:	4b49      	ldr	r3, [pc, #292]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 80015e0:	f993 3000 	ldrsb.w	r3, [r3]
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	5c9b      	ldrb	r3, [r3, r2]
 80015ea:	2b5a      	cmp	r3, #90	; 0x5a
 80015ec:	d906      	bls.n	80015fc <TetrisEnterHighScore_Update+0x6c>
			highScore->Initials[_settingInitial] = 'A';
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 80015f0:	f993 3000 	ldrsb.w	r3, [r3]
 80015f4:	461a      	mov	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2141      	movs	r1, #65	; 0x41
 80015fa:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 80015fc:	4b42      	ldr	r3, [pc, #264]	; (8001708 <TetrisEnterHighScore_Update+0x178>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 8001604:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001608:	601a      	str	r2, [r3, #0]
		break;
 800160a:	e057      	b.n	80016bc <TetrisEnterHighScore_Update+0x12c>
	case DOWN:
		highScore = TetrisHighScores_GetHighScoreAtIndex(_newHighScoreRank);
 800160c:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <TetrisEnterHighScore_Update+0x170>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fd03 	bl	800201c <TetrisHighScores_GetHighScoreAtIndex>
 8001616:	60f8      	str	r0, [r7, #12]
		highScore->Initials[_settingInitial]--;
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800161a:	f993 3000 	ldrsb.w	r3, [r3]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	5cd2      	ldrb	r2, [r2, r3]
 8001622:	3a01      	subs	r2, #1
 8001624:	b2d1      	uxtb	r1, r2
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	54d1      	strb	r1, [r2, r3]
		if(highScore->Initials[_settingInitial] < 'A'){
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800162c:	f993 3000 	ldrsb.w	r3, [r3]
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	5c9b      	ldrb	r3, [r3, r2]
 8001636:	2b40      	cmp	r3, #64	; 0x40
 8001638:	d806      	bhi.n	8001648 <TetrisEnterHighScore_Update+0xb8>
			highScore->Initials[_settingInitial] = 'Z';
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800163c:	f993 3000 	ldrsb.w	r3, [r3]
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	215a      	movs	r1, #90	; 0x5a
 8001646:	5499      	strb	r1, [r3, r2]
		}
		_blinkState = false;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <TetrisEnterHighScore_Update+0x178>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 8001650:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001654:	601a      	str	r2, [r3, #0]
		break;
 8001656:	e031      	b.n	80016bc <TetrisEnterHighScore_Update+0x12c>
	case LEFT:
		_settingInitial--;
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800165a:	f993 3000 	ldrsb.w	r3, [r3]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b25a      	sxtb	r2, r3
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 8001668:	701a      	strb	r2, [r3, #0]
		if(_settingInitial < 0){
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800166c:	f993 3000 	ldrsb.w	r3, [r3]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da02      	bge.n	800167a <TetrisEnterHighScore_Update+0xea>
			_settingInitial = 2;
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 8001676:	2202      	movs	r2, #2
 8001678:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <TetrisEnterHighScore_Update+0x178>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 8001682:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001686:	601a      	str	r2, [r3, #0]
		break;
 8001688:	e018      	b.n	80016bc <TetrisEnterHighScore_Update+0x12c>
	case RIGHT:
		_settingInitial++;
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800168c:	f993 3000 	ldrsb.w	r3, [r3]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b25a      	sxtb	r2, r3
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800169a:	701a      	strb	r2, [r3, #0]
		if(_settingInitial >= 3){
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 800169e:	f993 3000 	ldrsb.w	r3, [r3]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	dd02      	ble.n	80016ac <TetrisEnterHighScore_Update+0x11c>
			_settingInitial = 0;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <TetrisEnterHighScore_Update+0x174>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
		}
		_blinkState = false;
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <TetrisEnterHighScore_Update+0x178>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		_blinkTimer = ENTER_INITIAL_BLINK_PERIOD;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016b8:	601a      	str	r2, [r3, #0]
		break;
 80016ba:	bf00      	nop
	}

	_blinkTimer += timePassed;
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a11      	ldr	r2, [pc, #68]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016c6:	6013      	str	r3, [r2, #0]
	if(_blinkTimer >= ENTER_INITIAL_BLINK_PERIOD){
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016d0:	d304      	bcc.n	80016dc <TetrisEnterHighScore_Update+0x14c>
		_blinkTimer = 0;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <TetrisEnterHighScore_Update+0x17c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
		BlinkInitialBeingSet();
 80016d8:	f7ff ff0c 	bl	80014f4 <BlinkInitialBeingSet>
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 80016dc:	2101      	movs	r1, #1
 80016de:	480c      	ldr	r0, [pc, #48]	; (8001710 <TetrisEnterHighScore_Update+0x180>)
 80016e0:	f003 fb3e 	bl	8004d60 <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	72fb      	strb	r3, [r7, #11]
	if(buttonBState == GPIO_PIN_SET){
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <TetrisEnterHighScore_Update+0x162>
		return HighScoreEntered;
 80016ee:	2305      	movs	r3, #5
 80016f0:	e000      	b.n	80016f4 <TetrisEnterHighScore_Update+0x164>
	}

	return NoChange;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000888 	.word	0x20000888
 8001700:	200003d4 	.word	0x200003d4
 8001704:	200003d5 	.word	0x200003d5
 8001708:	20000090 	.word	0x20000090
 800170c:	200003d8 	.word	0x200003d8
 8001710:	48000400 	.word	0x48000400

08001714 <TetrisEnterHighScore_OnEnter>:

void TetrisEnterHighScore_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
	_newHighScore = *((u32*)stateMachineDataPtr);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <TetrisEnterHighScore_OnEnter+0xa4>)
 8001726:	6013      	str	r3, [r2, #0]
	_newHighScoreRank = TetrisHighScores_AddHighScore(_newHighScore);
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <TetrisEnterHighScore_OnEnter+0xa4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fcb7 	bl	80020a0 <TetrisHighScores_AddHighScore>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <TetrisEnterHighScore_OnEnter+0xa8>)
 8001738:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 800173a:	f7fe ff01 	bl	8000540 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 800173e:	f7ff f9cb 	bl	8000ad8 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8001742:	2354      	movs	r3, #84	; 0x54
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2000      	movs	r0, #0
 800174a:	f7fe ff3f 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 800174e:	2354      	movs	r3, #84	; 0x54
 8001750:	2200      	movs	r2, #0
 8001752:	2101      	movs	r1, #1
 8001754:	2001      	movs	r0, #1
 8001756:	f7fe ff39 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 800175a:	2354      	movs	r3, #84	; 0x54
 800175c:	2200      	movs	r2, #0
 800175e:	2102      	movs	r1, #2
 8001760:	2002      	movs	r0, #2
 8001762:	f7fe ff33 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(3,3,0,84);
 8001766:	2354      	movs	r3, #84	; 0x54
 8001768:	2200      	movs	r2, #0
 800176a:	2103      	movs	r1, #3
 800176c:	2003      	movs	r0, #3
 800176e:	f7fe ff2d 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(4,4,0,84);
 8001772:	2354      	movs	r3, #84	; 0x54
 8001774:	2200      	movs	r2, #0
 8001776:	2104      	movs	r1, #4
 8001778:	2004      	movs	r0, #4
 800177a:	f7fe ff27 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(5,5,0,84);
 800177e:	2354      	movs	r3, #84	; 0x54
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	2005      	movs	r0, #5
 8001786:	f7fe ff21 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>


	gfxWriteTextLineToFrameBuffer(0,0,"High Score");
 800178a:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <TetrisEnterHighScore_OnEnter+0xac>)
 800178c:	2100      	movs	r1, #0
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff f8f8 	bl	8000984 <gfxWriteTextLineToFrameBuffer>
	DrawHighScoresToFrameBuffer();
 8001794:	f7ff fe8e 	bl	80014b4 <DrawHighScoresToFrameBuffer>
	gfxFinishDrawing(&gLcdScreen);
 8001798:	480a      	ldr	r0, [pc, #40]	; (80017c4 <TetrisEnterHighScore_OnEnter+0xb0>)
 800179a:	f7ff f83f 	bl	800081c <gfxFinishDrawing>
	_settingInitial = 0;
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <TetrisEnterHighScore_OnEnter+0xb4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
	_blinkTimer = 0;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <TetrisEnterHighScore_OnEnter+0xb8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
	_blinkState = true;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <TetrisEnterHighScore_OnEnter+0xbc>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]

}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200003d0 	.word	0x200003d0
 80017bc:	200003d4 	.word	0x200003d4
 80017c0:	08009600 	.word	0x08009600
 80017c4:	2000066c 	.word	0x2000066c
 80017c8:	200003d5 	.word	0x200003d5
 80017cc:	200003d8 	.word	0x200003d8
 80017d0:	20000090 	.word	0x20000090

080017d4 <TetrisEnterHighScore_OnExit>:

void TetrisEnterHighScore_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <TetrisEnterHighScore_OnExit+0x20>)
 80017e2:	f7ff f9a9 	bl	8000b38 <ClearScreen>
	TetrisPersistantData_SaveAllPersistantData();
 80017e6:	f000 fe99 	bl	800251c <TetrisPersistantData_SaveAllPersistantData>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000066c 	.word	0x2000066c

080017f8 <GetRandomNumberBetweenZeroAndSix>:

static u8 _currentLevel = 5;

static void InitCurrentLevelTetrisScores();

static u8 GetRandomNumberBetweenZeroAndSix(){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	return (u8)rand() % 7;
 80017fc:	f006 fce8 	bl	80081d0 <rand>
 8001800:	4603      	mov	r3, r0
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <GetRandomNumberBetweenZeroAndSix+0x28>)
 8001806:	fba3 1302 	umull	r1, r3, r3, r2
 800180a:	1ad1      	subs	r1, r2, r3
 800180c:	0849      	lsrs	r1, r1, #1
 800180e:	440b      	add	r3, r1
 8001810:	0899      	lsrs	r1, r3, #2
 8001812:	460b      	mov	r3, r1
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	1a5b      	subs	r3, r3, r1
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	b2db      	uxtb	r3, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}
 8001820:	24924925 	.word	0x24924925

08001824 <DrawStationaryBlock>:


static void DrawStationaryBlock(u8 tlX, u8 tlY, u8 brX, u8 brY){
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4623      	mov	r3, r4
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	4603      	mov	r3, r0
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	460b      	mov	r3, r1
 800183c:	717b      	strb	r3, [r7, #5]
 800183e:	4613      	mov	r3, r2
 8001840:	713b      	strb	r3, [r7, #4]
	gfxDrawAxisAlignedRect(tlX, tlY, brX, brY);
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	797a      	ldrb	r2, [r7, #5]
 8001846:	79b9      	ldrb	r1, [r7, #6]
 8001848:	79f8      	ldrb	r0, [r7, #7]
 800184a:	f7ff f919 	bl	8000a80 <gfxDrawAxisAlignedRect>
	gfxDrawLine(tlX, tlY, brX, brY);
 800184e:	793b      	ldrb	r3, [r7, #4]
 8001850:	797a      	ldrb	r2, [r7, #5]
 8001852:	79b9      	ldrb	r1, [r7, #6]
 8001854:	79f8      	ldrb	r0, [r7, #7]
 8001856:	f7fe ff9c 	bl	8000792 <gfxDrawLine>
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}
	...

08001864 <WriteLevelToFrameBuffer>:

static void WriteLevelToFrameBuffer(){
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
	u8 levelBuffer[11];
	sprintf(levelBuffer, "Lvl: %lu",_currentLevel);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <WriteLevelToFrameBuffer+0x2c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <WriteLevelToFrameBuffer+0x30>)
 8001874:	4618      	mov	r0, r3
 8001876:	f006 fce9 	bl	800824c <siprintf>
	gfxWriteTextLineToFrameBuffer(2,TETRIS_BOARD_RIGHT_EDGE_COL + 1,levelBuffer);
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	461a      	mov	r2, r3
 800187e:	2126      	movs	r1, #38	; 0x26
 8001880:	2002      	movs	r0, #2
 8001882:	f7ff f87f 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000009b 	.word	0x2000009b
 8001894:	0800960c 	.word	0x0800960c

08001898 <SetLevel>:

static void SetLevel(u8 level){
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	_currentLevel = level;
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SetLevel+0x34>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	7013      	strb	r3, [r2, #0]
	_newLevelToDisplay = true;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <SetLevel+0x38>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
	_autoMoveInterval = _levelsMoveIntervals[_currentLevel];
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <SetLevel+0x34>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <SetLevel+0x3c>)
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <SetLevel+0x40>)
 80018bc:	6013      	str	r3, [r2, #0]
	InitCurrentLevelTetrisScores();
 80018be:	f000 f963 	bl	8001b88 <InitCurrentLevelTetrisScores>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000009b 	.word	0x2000009b
 80018d0:	20000099 	.word	0x20000099
 80018d4:	08009e78 	.word	0x08009e78
 80018d8:	20000094 	.word	0x20000094

080018dc <OnLinesCleared>:

static void OnLinesCleared(u8 numLinesCleared){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
	_linesCleared += numLinesCleared;
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <OnLinesCleared+0xa4>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <OnLinesCleared+0xa4>)
 80018f4:	801a      	strh	r2, [r3, #0]
	if(_linesCleared >= TETRIS_LINES_PER_LEVEL_UP){
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <OnLinesCleared+0xa4>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	2b09      	cmp	r3, #9
 80018fc:	d909      	bls.n	8001912 <OnLinesCleared+0x36>
		_linesCleared = 0;
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <OnLinesCleared+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	801a      	strh	r2, [r3, #0]
		SetLevel(_currentLevel + 1);
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <OnLinesCleared+0xa8>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ffc3 	bl	8001898 <SetLevel>
	}
	switch(numLinesCleared){
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	3b01      	subs	r3, #1
 8001916:	2b03      	cmp	r3, #3
 8001918:	d82a      	bhi.n	8001970 <OnLinesCleared+0x94>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <OnLinesCleared+0x44>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08001931 	.word	0x08001931
 8001924:	08001941 	.word	0x08001941
 8001928:	08001951 	.word	0x08001951
 800192c:	08001961 	.word	0x08001961
	case 1:
		_score += _currentLevelTetrisScores[0];
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <OnLinesCleared+0xac>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <OnLinesCleared+0xb0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4413      	add	r3, r2
 800193a:	4a14      	ldr	r2, [pc, #80]	; (800198c <OnLinesCleared+0xb0>)
 800193c:	6013      	str	r3, [r2, #0]
		break;
 800193e:	e017      	b.n	8001970 <OnLinesCleared+0x94>
	case 2:
		_score += _currentLevelTetrisScores[1];
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <OnLinesCleared+0xac>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <OnLinesCleared+0xb0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4413      	add	r3, r2
 800194a:	4a10      	ldr	r2, [pc, #64]	; (800198c <OnLinesCleared+0xb0>)
 800194c:	6013      	str	r3, [r2, #0]
		break;
 800194e:	e00f      	b.n	8001970 <OnLinesCleared+0x94>
	case 3:
		_score += _currentLevelTetrisScores[2];
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <OnLinesCleared+0xac>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <OnLinesCleared+0xb0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4413      	add	r3, r2
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <OnLinesCleared+0xb0>)
 800195c:	6013      	str	r3, [r2, #0]
		break;
 800195e:	e007      	b.n	8001970 <OnLinesCleared+0x94>
	case 4:
		_score += _currentLevelTetrisScores[3];
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <OnLinesCleared+0xac>)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <OnLinesCleared+0xb0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <OnLinesCleared+0xb0>)
 800196c:	6013      	str	r3, [r2, #0]
		break;
 800196e:	bf00      	nop
	}
	_newScoreToDisplay = true;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <OnLinesCleared+0xb4>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200003e2 	.word	0x200003e2
 8001984:	2000009b 	.word	0x2000009b
 8001988:	200003ec 	.word	0x200003ec
 800198c:	200003e4 	.word	0x200003e4
 8001990:	20000098 	.word	0x20000098

08001994 <OnGameOver>:

static void OnGameOver(){
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	// Not used
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <IncrementTetrisTimer>:

static void IncrementTetrisTimer(u32 timePassed, bool moveDown){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
	_tetrisTimer += timePassed;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <IncrementTetrisTimer+0x44>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <IncrementTetrisTimer+0x44>)
 80019ba:	6013      	str	r3, [r2, #0]
	if(_tetrisTimer > _autoMoveInterval){
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <IncrementTetrisTimer+0x44>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <IncrementTetrisTimer+0x48>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d90b      	bls.n	80019e0 <IncrementTetrisTimer+0x3c>
		if(moveDown == true){
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <IncrementTetrisTimer+0x36>
			_movingDownResult = Tetris_MoveDown();
 80019ce:	f7ff fcc7 	bl	8001360 <Tetris_MoveDown>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <IncrementTetrisTimer+0x4c>)
 80019d8:	701a      	strb	r2, [r3, #0]
		}
		_tetrisTimer = 0;
 80019da:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <IncrementTetrisTimer+0x44>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
	}
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200003dc 	.word	0x200003dc
 80019ec:	20000094 	.word	0x20000094
 80019f0:	2000009a 	.word	0x2000009a

080019f4 <WriteScoreToFrameBuffer>:

static void WriteScoreToFrameBuffer(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	u8 scoreNumBuffer[7];
	sprintf(scoreNumBuffer, "%lu",_score);
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <WriteScoreToFrameBuffer+0x28>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	463b      	mov	r3, r7
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <WriteScoreToFrameBuffer+0x2c>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fc22 	bl	800824c <siprintf>
	gfxWriteTextLineToFrameBuffer(1,TETRIS_BOARD_RIGHT_EDGE_COL + 1,scoreNumBuffer);
 8001a08:	463b      	mov	r3, r7
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2126      	movs	r1, #38	; 0x26
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f7fe ffb8 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200003e4 	.word	0x200003e4
 8001a20:	08009618 	.word	0x08009618

08001a24 <UpdateTetrisGame>:


static void UpdateTetrisGame(u32 timePassed){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

	i32 analogXChange, analogYChange;
	ReadAnalogStickChange(&hadc2,&analogXChange,&analogYChange);
 8001a2c:	f107 0208 	add.w	r2, r7, #8
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	4826      	ldr	r0, [pc, #152]	; (8001ad0 <UpdateTetrisGame+0xac>)
 8001a38:	f7fe fc22 	bl	8000280 <ReadAnalogStickChange>

	bool movingDown = true;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8001a40:	2101      	movs	r1, #1
 8001a42:	4824      	ldr	r0, [pc, #144]	; (8001ad4 <UpdateTetrisGame+0xb0>)
 8001a44:	f003 f98c 	bl	8004d60 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	75bb      	strb	r3, [r7, #22]

	const i32 twelveBitMax = 4096;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a50:	613b      	str	r3, [r7, #16]
	if(analogXChange > (twelveBitMax/3)){
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <UpdateTetrisGame+0xb4>)
 8001a56:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5a:	17db      	asrs	r3, r3, #31
 8001a5c:	1ad2      	subs	r2, r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	da02      	bge.n	8001a6a <UpdateTetrisGame+0x46>
		Tetris_MoveRight();
 8001a64:	f7ff fce0 	bl	8001428 <Tetris_MoveRight>
 8001a68:	e01c      	b.n	8001aa4 <UpdateTetrisGame+0x80>
	}
	else if(analogXChange < -(twelveBitMax/3)){
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <UpdateTetrisGame+0xb4>)
 8001a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a72:	17db      	asrs	r3, r3, #31
 8001a74:	1a9a      	subs	r2, r3, r2
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dd02      	ble.n	8001a82 <UpdateTetrisGame+0x5e>
		Tetris_MoveLeft();
 8001a7c:	f7ff fcb6 	bl	80013ec <Tetris_MoveLeft>
 8001a80:	e010      	b.n	8001aa4 <UpdateTetrisGame+0x80>
	}
	else if(analogYChange > (twelveBitMax/3)){
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <UpdateTetrisGame+0xb4>)
 8001a86:	fb82 1203 	smull	r1, r2, r2, r3
 8001a8a:	17db      	asrs	r3, r3, #31
 8001a8c:	1ad2      	subs	r2, r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	da07      	bge.n	8001aa4 <UpdateTetrisGame+0x80>
		_movingDownResult = Tetris_MoveDown();
 8001a94:	f7ff fc64 	bl	8001360 <Tetris_MoveDown>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <UpdateTetrisGame+0xb8>)
 8001a9e:	701a      	strb	r2, [r3, #0]
		movingDown = false;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	75fb      	strb	r3, [r7, #23]
	}
	if(buttonBState == GPIO_PIN_SET && _lastButtonBState == GPIO_PIN_RESET){
 8001aa4:	7dbb      	ldrb	r3, [r7, #22]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <UpdateTetrisGame+0x92>
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <UpdateTetrisGame+0xbc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <UpdateTetrisGame+0x92>
		Tetris_Rotate();
 8001ab2:	f7ff fc2f 	bl	8001314 <Tetris_Rotate>
	}

	_lastButtonBState = buttonBState;
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <UpdateTetrisGame+0xbc>)
 8001ab8:	7dbb      	ldrb	r3, [r7, #22]
 8001aba:	7013      	strb	r3, [r2, #0]

	IncrementTetrisTimer(timePassed, movingDown);
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff6f 	bl	80019a4 <IncrementTetrisTimer>

}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000888 	.word	0x20000888
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	55555556 	.word	0x55555556
 8001adc:	2000009a 	.word	0x2000009a
 8001ae0:	200003e0 	.word	0x200003e0

08001ae4 <DrawTetrisGame>:

static void DrawTetrisGame(){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	gfxClearFrameBuffer();
 8001ae8:	f7fe fd2a 	bl	8000540 <gfxClearFrameBuffer>

	Tetris_DrawTetrisBoard((_movingDownResult == Settled || _movingDownResult == GameOver) ? true : false);
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <DrawTetrisGame+0x94>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d003      	beq.n	8001afc <DrawTetrisGame+0x18>
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <DrawTetrisGame+0x94>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d101      	bne.n	8001b00 <DrawTetrisGame+0x1c>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <DrawTetrisGame+0x1e>
 8001b00:	2300      	movs	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fa05 	bl	8000f14 <Tetris_DrawTetrisBoard>

	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,5,TETRIS_BOARD_LEFT_EDGE_COL,TETRIS_BOARD_RIGHT_EDGE_COL);
 8001b0a:	2325      	movs	r3, #37	; 0x25
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	2105      	movs	r1, #5
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7fe fd5b 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>

	if(_movingDownResult == Settled || _movingDownResult == GameOver){
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <DrawTetrisGame+0x94>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d003      	beq.n	8001b26 <DrawTetrisGame+0x42>
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <DrawTetrisGame+0x94>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d105      	bne.n	8001b32 <DrawTetrisGame+0x4e>
		/* update the area where the next block is shown */
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,53);
 8001b26:	2335      	movs	r3, #53	; 0x35
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7fe fd4d 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	}
	if(_newScoreToDisplay == true){
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <DrawTetrisGame+0x98>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10a      	bne.n	8001b50 <DrawTetrisGame+0x6c>
		/* Update the new area of the screen with the new score.
		 * TODO: get actual length of score string instead of using 84 */
		WriteScoreToFrameBuffer();
 8001b3a:	f7ff ff5b 	bl	80019f4 <WriteScoreToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(1,1,0,84);
 8001b3e:	2354      	movs	r3, #84	; 0x54
 8001b40:	2200      	movs	r2, #0
 8001b42:	2101      	movs	r1, #1
 8001b44:	2001      	movs	r0, #1
 8001b46:	f7fe fd41 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newScoreToDisplay = false;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <DrawTetrisGame+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
	}
	if(_newLevelToDisplay){
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <DrawTetrisGame+0x9c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00a      	beq.n	8001b6e <DrawTetrisGame+0x8a>
		WriteLevelToFrameBuffer();
 8001b58:	f7ff fe84 	bl	8001864 <WriteLevelToFrameBuffer>
		UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 8001b5c:	2354      	movs	r3, #84	; 0x54
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2102      	movs	r1, #2
 8001b62:	2002      	movs	r0, #2
 8001b64:	f7fe fd32 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
		_newLevelToDisplay = false;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <DrawTetrisGame+0x9c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
	}
	gfxFinishDrawing(&gLcdScreen);
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <DrawTetrisGame+0xa0>)
 8001b70:	f7fe fe54 	bl	800081c <gfxFinishDrawing>
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000009a 	.word	0x2000009a
 8001b7c:	20000098 	.word	0x20000098
 8001b80:	20000099 	.word	0x20000099
 8001b84:	2000066c 	.word	0x2000066c

08001b88 <InitCurrentLevelTetrisScores>:

static void InitCurrentLevelTetrisScores(){
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
	/* score setting function derived from information from https://tetris.fandom.com/wiki/Scoring */

	if(_currentLevel == 0){
 8001b8c:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10e      	bne.n	8001bb2 <InitCurrentLevelTetrisScores+0x2a>
		_currentLevelTetrisScores[0] = 40;
 8001b94:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001b96:	2228      	movs	r2, #40	; 0x28
 8001b98:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100;
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001b9c:	2264      	movs	r2, #100	; 0x64
 8001b9e:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300;
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001ba2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ba6:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200;
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001baa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001bae:	60da      	str	r2, [r3, #12]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);

	}
}
 8001bb0:	e066      	b.n	8001c80 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 1){
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10e      	bne.n	8001bd8 <InitCurrentLevelTetrisScores+0x50>
		_currentLevelTetrisScores[0] = 80;
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bbc:	2250      	movs	r2, #80	; 0x50
 8001bbe:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 200;
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bc2:	22c8      	movs	r2, #200	; 0xc8
 8001bc4:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 600;
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bc8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001bcc:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 2400;
 8001bce:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bd0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001bd4:	60da      	str	r2, [r3, #12]
}
 8001bd6:	e053      	b.n	8001c80 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel >=2 && _currentLevel < 9){
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d913      	bls.n	8001c08 <InitCurrentLevelTetrisScores+0x80>
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d80f      	bhi.n	8001c08 <InitCurrentLevelTetrisScores+0x80>
		_currentLevelTetrisScores[0] = 120;
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bea:	2278      	movs	r2, #120	; 0x78
 8001bec:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 300;
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bf0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bf4:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 900;
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001bf8:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001bfc:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 3600;
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c00:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001c04:	60da      	str	r2, [r3, #12]
}
 8001c06:	e03b      	b.n	8001c80 <InitCurrentLevelTetrisScores+0xf8>
	else if(_currentLevel == 9){
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	d110      	bne.n	8001c32 <InitCurrentLevelTetrisScores+0xaa>
		_currentLevelTetrisScores[0] = 400;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c16:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 1000;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c1e:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 3000;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c26:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 12000;
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c2a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001c2e:	60da      	str	r2, [r3, #12]
}
 8001c30:	e026      	b.n	8001c80 <InitCurrentLevelTetrisScores+0xf8>
		_currentLevelTetrisScores[0] = 40 * (_currentLevel + 1);
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c44:	601a      	str	r2, [r3, #0]
		_currentLevelTetrisScores[1] = 100 * (_currentLevel + 1);
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	2264      	movs	r2, #100	; 0x64
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c56:	605a      	str	r2, [r3, #4]
		_currentLevelTetrisScores[2] = 300 * (_currentLevel + 1);
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c6a:	609a      	str	r2, [r3, #8]
		_currentLevelTetrisScores[3] = 1200 * (_currentLevel + 1);
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <InitCurrentLevelTetrisScores+0x104>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <InitCurrentLevelTetrisScores+0x108>)
 8001c7e:	60da      	str	r2, [r3, #12]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2000009b 	.word	0x2000009b
 8001c90:	200003ec 	.word	0x200003ec

08001c94 <CheckForHighScore>:


Tetris_Modes_StateTriggers CheckForHighScore(){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	if(TetrisHighScores_IsNewHighScore(_score) == true){
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <CheckForHighScore+0x24>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f99d 	bl	8001fdc <TetrisHighScores_IsNewHighScore>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d104      	bne.n	8001cb2 <CheckForHighScore+0x1e>
		TetrisMain_SetStateMachineDataPointer(&_score);
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <CheckForHighScore+0x24>)
 8001caa:	f000 fb31 	bl	8002310 <TetrisMain_SetStateMachineDataPointer>
		return GameOverNewHighScore;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e000      	b.n	8001cb4 <CheckForHighScore+0x20>
	}
	else{
		return GameOver;
 8001cb2:	2302      	movs	r3, #2
	}
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200003e4 	.word	0x200003e4

08001cbc <TetrisGame_Update>:


Tetris_Modes_StateTriggers TetrisGame_Update(u32 timePassed){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	UpdateTetrisGame(timePassed);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fead 	bl	8001a24 <UpdateTetrisGame>
	DrawTetrisGame();
 8001cca:	f7ff ff0b 	bl	8001ae4 <DrawTetrisGame>
	if(_movingDownResult == MoveDownResultGameOver){
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <TetrisGame_Update+0x2c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d103      	bne.n	8001cde <TetrisGame_Update+0x22>
		return CheckForHighScore();
 8001cd6:	f7ff ffdd 	bl	8001c94 <CheckForHighScore>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	e000      	b.n	8001ce0 <TetrisGame_Update+0x24>
	}
	return NoChange;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000009a 	.word	0x2000009a

08001cec <TetrisGame_Init>:



void TetrisGame_Init(){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af02      	add	r7, sp, #8
	Tetris_Init(
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <TetrisGame_Init+0x20>)
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <TetrisGame_Init+0x24>)
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <TetrisGame_Init+0x28>)
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <TetrisGame_Init+0x2c>)
 8001cfe:	4907      	ldr	r1, [pc, #28]	; (8001d1c <TetrisGame_Init+0x30>)
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <TetrisGame_Init+0x2c>)
 8001d02:	f7ff f9dd 	bl	80010c0 <Tetris_Init>
			&DrawStationaryBlock,
			&gfxDrawAxisAlignedRect,
			&GetRandomNumberBetweenZeroAndSix,
			&OnLinesCleared,
			&OnGameOver);
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	08001995 	.word	0x08001995
 8001d10:	080018dd 	.word	0x080018dd
 8001d14:	080017f9 	.word	0x080017f9
 8001d18:	08000a81 	.word	0x08000a81
 8001d1c:	08001825 	.word	0x08001825

08001d20 <TetrisGame_OnEnter>:

void TetrisGame_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
	if(previousState == LevelSelect || previousState == NoState){
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <TetrisGame_OnEnter+0x18>
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d103      	bne.n	8001d40 <TetrisGame_OnEnter+0x20>
		_startLevel = *((u8*)stateMachineDataPtr);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <TetrisGame_OnEnter+0x54>)
 8001d3e:	701a      	strb	r2, [r3, #0]
	}
	SetLevel(_startLevel);
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <TetrisGame_OnEnter+0x54>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fda7 	bl	8001898 <SetLevel>
	Tetris_ResetTetrisBoard();
 8001d4a:	f7ff f9a9 	bl	80010a0 <Tetris_ResetTetrisBoard>
	InitCurrentLevelTetrisScores();
 8001d4e:	f7ff ff1b 	bl	8001b88 <InitCurrentLevelTetrisScores>
	_movingDownResult = Settled;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <TetrisGame_OnEnter+0x58>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	701a      	strb	r2, [r3, #0]
	_score = 0;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <TetrisGame_OnEnter+0x5c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
	_newScoreToDisplay = true;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <TetrisGame_OnEnter+0x60>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
	_newLevelToDisplay = true;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <TetrisGame_OnEnter+0x64>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200003e8 	.word	0x200003e8
 8001d78:	2000009a 	.word	0x2000009a
 8001d7c:	200003e4 	.word	0x200003e4
 8001d80:	20000098 	.word	0x20000098
 8001d84:	20000099 	.word	0x20000099

08001d88 <TetrisGame_OnExit>:



void TetrisGame_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <TetrisGame_OnExit+0x1c>)
 8001d96:	f7fe fecf 	bl	8000b38 <ClearScreen>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000066c 	.word	0x2000066c

08001da8 <SetHighScoreCellSize>:
		{{'c','p','u'}, 2500},
};
static u32 _highScoreCellSize = 0;
static u32 _nextHighScoreSaveAddress = 0;

static void SetHighScoreCellSize(){
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
	u32 size = sizeof(HighScore);
 8001dae:	2308      	movs	r3, #8
 8001db0:	607b      	str	r3, [r7, #4]
	_highScoreCellSize = size;
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <SetHighScoreCellSize+0x38>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6013      	str	r3, [r2, #0]

	while(_highScoreCellSize % 4 != 0)
 8001db8:	e004      	b.n	8001dc4 <SetHighScoreCellSize+0x1c>
		_highScoreCellSize++;
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <SetHighScoreCellSize+0x38>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <SetHighScoreCellSize+0x38>)
 8001dc2:	6013      	str	r3, [r2, #0]
	while(_highScoreCellSize % 4 != 0)
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <SetHighScoreCellSize+0x38>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f4      	bne.n	8001dba <SetHighScoreCellSize+0x12>

}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	200003fc 	.word	0x200003fc

08001de4 <LoadHighScores>:
static void LoadHighScores(HighScore* output, u32 startAddress){
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e026      	b.n	8001e42 <LoadHighScores+0x5e>
		HighScore* hs = startAddress + (i * _highScoreCellSize);
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <LoadHighScores+0x74>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	fb03 f202 	mul.w	r2, r3, r2
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
		output[i].Initials[0] = hs->Initials[0];
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	701a      	strb	r2, [r3, #0]
		output[i].Initials[1] = hs->Initials[1];
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	7852      	ldrb	r2, [r2, #1]
 8001e1e:	705a      	strb	r2, [r3, #1]
		output[i].Initials[2] = hs->Initials[2];
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	7892      	ldrb	r2, [r2, #2]
 8001e2c:	709a      	strb	r2, [r3, #2]
		output[i].Score = hs->Score;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	6852      	ldr	r2, [r2, #4]
 8001e3a:	605a      	str	r2, [r3, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d9d5      	bls.n	8001df4 <LoadHighScores+0x10>
	}

}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	200003fc 	.word	0x200003fc

08001e5c <SaveSingleHighScore>:

static void SaveSingleHighScore(HighScore* input, u32 address){
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e016      	b.n	8001e9a <SaveSingleHighScore+0x3e>
		u32 wordToWrite = *((u32*)input + i);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,address + (i*4), wordToWrite);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	18d1      	adds	r1, r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2200      	movs	r2, #0
 8001e86:	461c      	mov	r4, r3
 8001e88:	4615      	mov	r5, r2
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f002 fc1c 	bl	80046cc <HAL_FLASH_Program>
	for(int i=0; i<_highScoreCellSize/4; i++){
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SaveSingleHighScore+0x54>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	089a      	lsrs	r2, r3, #2
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d8e2      	bhi.n	8001e6c <SaveSingleHighScore+0x10>
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb0:	200003fc 	.word	0x200003fc

08001eb4 <SaveHighScores>:

static void SaveHighScores(HighScore* input, u32 addressToWrite){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]

	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e00f      	b.n	8001ee4 <SaveHighScores+0x30>
		SaveSingleHighScore(&input[i], addressToWrite);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	6839      	ldr	r1, [r7, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ffc4 	bl	8001e5c <SaveSingleHighScore>
		addressToWrite += _highScoreCellSize;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <SaveHighScores+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	603b      	str	r3, [r7, #0]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d9ec      	bls.n	8001ec4 <SaveHighScores+0x10>
	}

}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200003fc 	.word	0x200003fc

08001ef8 <ErasePagePreservingHighScores>:

static void ErasePagePreservingHighScores(){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
	eraseInit.PageAddress = FINAL_PAGE_START_ADDRESS;
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <ErasePagePreservingHighScores+0x34>)
 8001f04:	60bb      	str	r3, [r7, #8]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
 8001f0a:	463a      	mov	r2, r7
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fd0f 	bl	8004934 <HAL_FLASHEx_Erase>
	SaveHighScores(_highScores,FINAL_PAGE_START_ADDRESS);
 8001f16:	4905      	ldr	r1, [pc, #20]	; (8001f2c <ErasePagePreservingHighScores+0x34>)
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <ErasePagePreservingHighScores+0x38>)
 8001f1a:	f7ff ffcb 	bl	8001eb4 <SaveHighScores>
	TetrisHighScores_Load();
 8001f1e:	f000 f833 	bl	8001f88 <TetrisHighScores_Load>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	0800f800 	.word	0x0800f800
 8001f30:	2000009c 	.word	0x2000009c

08001f34 <SeekLatestHighScoresStartAddress>:

static u32 SeekLatestHighScoresStartAddress(){
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
	if(_highScoreCellSize == 0){
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <SeekLatestHighScoresStartAddress+0x4c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <SeekLatestHighScoresStartAddress+0x12>
		return 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e016      	b.n	8001f74 <SeekLatestHighScoresStartAddress+0x40>
	}
	u32 rval = FINAL_PAGE_START_ADDRESS;
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <SeekLatestHighScoresStartAddress+0x50>)
 8001f48:	607b      	str	r3, [r7, #4]
	do{
		rval += (NUM_HIGHSCORES_SAVED * _highScoreCellSize);
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <SeekLatestHighScoresStartAddress+0x4c>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	607b      	str	r3, [r7, #4]

	}
	while(*(((u32*)rval)+ 1) != 0xFFFFFFFF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d1f1      	bne.n	8001f4a <SeekLatestHighScoresStartAddress+0x16>


	return (rval - (NUM_HIGHSCORES_SAVED * _highScoreCellSize));
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <SeekLatestHighScoresStartAddress+0x4c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	1ad3      	subs	r3, r2, r3

}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	200003fc 	.word	0x200003fc
 8001f84:	0800f800 	.word	0x0800f800

08001f88 <TetrisHighScores_Load>:


u32 TetrisHighScores_Load(){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0

	SetHighScoreCellSize();
 8001f8e:	f7ff ff0b 	bl	8001da8 <SetHighScoreCellSize>
	u32 finalPage = FINAL_PAGE_START_ADDRESS;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <TetrisHighScores_Load+0x44>)
 8001f94:	607b      	str	r3, [r7, #4]
	u32 startAddress = SeekLatestHighScoresStartAddress();
 8001f96:	f7ff ffcd 	bl	8001f34 <SeekLatestHighScoresStartAddress>
 8001f9a:	6038      	str	r0, [r7, #0]
	_nextHighScoreSaveAddress = startAddress + (NUM_HIGHSCORES_SAVED * _highScoreCellSize);
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <TetrisHighScores_Load+0x48>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	441a      	add	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <TetrisHighScores_Load+0x4c>)
 8001fac:	6013      	str	r3, [r2, #0]
	LoadHighScores(_highScores, startAddress);
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <TetrisHighScores_Load+0x50>)
 8001fb2:	f7ff ff17 	bl	8001de4 <LoadHighScores>
	return startAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <TetrisHighScores_Load+0x48>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	441a      	add	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4413      	add	r3, r2
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0800f800 	.word	0x0800f800
 8001fd0:	200003fc 	.word	0x200003fc
 8001fd4:	20000400 	.word	0x20000400
 8001fd8:	2000009c 	.word	0x2000009c

08001fdc <TetrisHighScores_IsNewHighScore>:


bool TetrisHighScores_IsNewHighScore(u32 potentialHighScore){
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e00c      	b.n	8002004 <TetrisHighScores_IsNewHighScore+0x28>
		if(potentialHighScore > _highScores[i].Score){
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <TetrisHighScores_IsNewHighScore+0x3c>)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d901      	bls.n	8001ffe <TetrisHighScores_IsNewHighScore+0x22>
			return true;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e006      	b.n	800200c <TetrisHighScores_IsNewHighScore+0x30>
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3301      	adds	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b04      	cmp	r3, #4
 8002008:	d9ef      	bls.n	8001fea <TetrisHighScores_IsNewHighScore+0xe>
		}
	}
	return false;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	2000009c 	.word	0x2000009c

0800201c <TetrisHighScores_GetHighScoreAtIndex>:

HighScore* TetrisHighScores_GetHighScoreAtIndex(u8 atIndex){
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
	return &_highScores[atIndex];
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <TetrisHighScores_GetHighScoreAtIndex+0x20>)
 800202c:	4413      	add	r3, r2
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2000009c 	.word	0x2000009c

08002040 <TetrisHighScores_Save>:


u32 TetrisHighScores_Save(u32 startAddress){
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	//SetHighScoreCellSize();
	if((_nextHighScoreSaveAddress + (_highScoreCellSize * NUM_HIGHSCORES_SAVED)) <= FINAL_PAGE_END_ADDRESS){
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <TetrisHighScores_Save+0x50>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	441a      	add	r2, r3
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <TetrisHighScores_Save+0x54>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <TetrisHighScores_Save+0x58>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d810      	bhi.n	8002080 <TetrisHighScores_Save+0x40>
		SaveHighScores(_highScores, _nextHighScoreSaveAddress);
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <TetrisHighScores_Save+0x54>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4619      	mov	r1, r3
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <TetrisHighScores_Save+0x5c>)
 8002066:	f7ff ff25 	bl	8001eb4 <SaveHighScores>
		//LoadHighScores(_highScores, _nextHighScoreSaveAddress);
		_nextHighScoreSaveAddress += (_highScoreCellSize * NUM_HIGHSCORES_SAVED);
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <TetrisHighScores_Save+0x50>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	441a      	add	r2, r3
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <TetrisHighScores_Save+0x54>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4413      	add	r3, r2
 800207a:	4a06      	ldr	r2, [pc, #24]	; (8002094 <TetrisHighScores_Save+0x54>)
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e001      	b.n	8002084 <TetrisHighScores_Save+0x44>

	}
	else{
		ErasePagePreservingHighScores();
 8002080:	f7ff ff3a 	bl	8001ef8 <ErasePagePreservingHighScores>
	}


	//TetrisHighScores_Load();
	return _nextHighScoreSaveAddress;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <TetrisHighScores_Save+0x54>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200003fc 	.word	0x200003fc
 8002094:	20000400 	.word	0x20000400
 8002098:	08010000 	.word	0x08010000
 800209c:	2000009c 	.word	0x2000009c

080020a0 <TetrisHighScores_AddHighScore>:

u8 TetrisHighScores_AddHighScore(u32 highScore){
 80020a0:	b480      	push	{r7}
 80020a2:	b08b      	sub	sp, #44	; 0x2c
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

	u8 rval = 255;
 80020a8:	23ff      	movs	r3, #255	; 0xff
 80020aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HighScore cachedHighScore;
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	e046      	b.n	8002142 <TetrisHighScores_AddHighScore+0xa2>
		HighScore* thisHighScore = &_highScores[i];
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <TetrisHighScores_AddHighScore+0xb8>)
 80020ba:	4413      	add	r3, r2
 80020bc:	61fb      	str	r3, [r7, #28]

		if(highScore > thisHighScore->Score && rval == 255){
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d919      	bls.n	80020fc <TetrisHighScores_AddHighScore+0x5c>
 80020c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020cc:	2bff      	cmp	r3, #255	; 0xff
 80020ce:	d115      	bne.n	80020fc <TetrisHighScores_AddHighScore+0x5c>
			cachedHighScore = *thisHighScore;
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020da:	e883 0003 	stmia.w	r3, {r0, r1}
			rval = i;
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			thisHighScore->Score = highScore;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = 'A';
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	2241      	movs	r2, #65	; 0x41
 80020ee:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = 'A';
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2241      	movs	r2, #65	; 0x41
 80020f4:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = 'A';
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2241      	movs	r2, #65	; 0x41
 80020fa:	709a      	strb	r2, [r3, #2]

		}
		if(i > rval){
 80020fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	429a      	cmp	r2, r3
 8002104:	d91a      	bls.n	800213c <TetrisHighScores_AddHighScore+0x9c>
			HighScore cachedHighScore2 = *thisHighScore;
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002110:	e883 0003 	stmia.w	r3, {r0, r1}
			thisHighScore->Score = cachedHighScore.Score;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	605a      	str	r2, [r3, #4]
			thisHighScore->Initials[0] = cachedHighScore.Initials[0];
 800211a:	7d3a      	ldrb	r2, [r7, #20]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	701a      	strb	r2, [r3, #0]
			thisHighScore->Initials[1] = cachedHighScore.Initials[1];
 8002120:	7d7a      	ldrb	r2, [r7, #21]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	705a      	strb	r2, [r3, #1]
			thisHighScore->Initials[2] = cachedHighScore.Initials[2];
 8002126:	7dba      	ldrb	r2, [r7, #22]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	709a      	strb	r2, [r3, #2]
			cachedHighScore = cachedHighScore2;
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	f107 020c 	add.w	r2, r7, #12
 8002134:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002138:	e883 0003 	stmia.w	r3, {r0, r1}
	for(u32 i=0; i<NUM_HIGHSCORES_SAVED; i++){
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	3301      	adds	r3, #1
 8002140:	623b      	str	r3, [r7, #32]
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d9b5      	bls.n	80020b4 <TetrisHighScores_AddHighScore+0x14>

		}

	}
	return rval;
 8002148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800214c:	4618      	mov	r0, r3
 800214e:	372c      	adds	r7, #44	; 0x2c
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	2000009c 	.word	0x2000009c

0800215c <WriteStartLevelToFrameBuffer>:
static i8 _startLevel = 3;
static bool _isAnalogStickExtended = false;

u32 randomSeed = 0;

void WriteStartLevelToFrameBuffer(){
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
	u8 stringBuffer[11];
	sprintf(stringBuffer,"Level: %lu",_startLevel);
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <WriteStartLevelToFrameBuffer+0x38>)
 8002164:	f993 3000 	ldrsb.w	r3, [r3]
 8002168:	461a      	mov	r2, r3
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	490a      	ldr	r1, [pc, #40]	; (8002198 <WriteStartLevelToFrameBuffer+0x3c>)
 800216e:	4618      	mov	r0, r3
 8002170:	f006 f86c 	bl	800824c <siprintf>
	gfxClearFrameBufferRow(2,0,LCD_PCD8544_CHAR_WIDTH*11);
 8002174:	2242      	movs	r2, #66	; 0x42
 8002176:	2100      	movs	r1, #0
 8002178:	2002      	movs	r0, #2
 800217a:	f7fe fd0f 	bl	8000b9c <gfxClearFrameBufferRow>
	gfxWriteTextLineToFrameBuffer(2,0,stringBuffer);
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	461a      	mov	r2, r3
 8002182:	2100      	movs	r1, #0
 8002184:	2002      	movs	r0, #2
 8002186:	f7fe fbfd 	bl	8000984 <gfxWriteTextLineToFrameBuffer>
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200000c4 	.word	0x200000c4
 8002198:	0800961c 	.word	0x0800961c

0800219c <ChangeCurrentLevelUpOrDown>:

void ChangeCurrentLevelUpOrDown(i8 incOrDec){
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	_startLevel += incOrDec;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021a8:	f993 3000 	ldrsb.w	r3, [r3]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4413      	add	r3, r2
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	b25a      	sxtb	r2, r3
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021b8:	701a      	strb	r2, [r3, #0]
	if(incOrDec < 0){
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	da08      	bge.n	80021d4 <ChangeCurrentLevelUpOrDown+0x38>
		if(_startLevel < 0){
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021c4:	f993 3000 	ldrsb.w	r3, [r3]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da0f      	bge.n	80021ec <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 15;
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021ce:	220f      	movs	r2, #15
 80021d0:	701a      	strb	r2, [r3, #0]
		}
	}
	else{

	}
}
 80021d2:	e00b      	b.n	80021ec <ChangeCurrentLevelUpOrDown+0x50>
	else if(incOrDec > 0){
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	dd07      	ble.n	80021ec <ChangeCurrentLevelUpOrDown+0x50>
		if(_startLevel > 15){
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021de:	f993 3000 	ldrsb.w	r3, [r3]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	dd02      	ble.n	80021ec <ChangeCurrentLevelUpOrDown+0x50>
			_startLevel = 0;
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <ChangeCurrentLevelUpOrDown+0x5c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	200000c4 	.word	0x200000c4

080021fc <TetrisLevelSelect_Update>:

Tetris_Modes_StateTriggers TetrisLevelSelect_Update(u32 TimePassed){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	randomSeed += TimePassed;
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 800220e:	6013      	str	r3, [r2, #0]
	i32 analogYChange, analogXChange;
	ANALOG_STICK_DPAD_RESULT res = EmulateDPadReturningXAndYChange(&hadc2,&analogXChange,&analogYChange);
 8002210:	f107 0210 	add.w	r2, r7, #16
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	4619      	mov	r1, r3
 800221a:	4820      	ldr	r0, [pc, #128]	; (800229c <TetrisLevelSelect_Update+0xa0>)
 800221c:	f7fe f8e6 	bl	80003ec <EmulateDPadReturningXAndYChange>
 8002220:	4603      	mov	r3, r0
 8002222:	75fb      	strb	r3, [r7, #23]
	switch(res){
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d002      	beq.n	8002230 <TetrisLevelSelect_Update+0x34>
 800222a:	2b02      	cmp	r3, #2
 800222c:	d00a      	beq.n	8002244 <TetrisLevelSelect_Update+0x48>
 800222e:	e014      	b.n	800225a <TetrisLevelSelect_Update+0x5e>
	case UP:
		ChangeCurrentLevelUpOrDown(1);
 8002230:	2001      	movs	r0, #1
 8002232:	f7ff ffb3 	bl	800219c <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	4a16      	ldr	r2, [pc, #88]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 8002240:	6013      	str	r3, [r2, #0]
		break;
 8002242:	e00a      	b.n	800225a <TetrisLevelSelect_Update+0x5e>
	case DOWN:
		ChangeCurrentLevelUpOrDown(-1);
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f7ff ffa8 	bl	800219c <ChangeCurrentLevelUpOrDown>
		randomSeed += analogYChange;
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	4a10      	ldr	r2, [pc, #64]	; (8002298 <TetrisLevelSelect_Update+0x9c>)
 8002256:	6013      	str	r3, [r2, #0]
		break;
 8002258:	bf00      	nop
	}

	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 800225a:	2101      	movs	r1, #1
 800225c:	4810      	ldr	r0, [pc, #64]	; (80022a0 <TetrisLevelSelect_Update+0xa4>)
 800225e:	f002 fd7f 	bl	8004d60 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	75bb      	strb	r3, [r7, #22]
	if(buttonBState == GPIO_PIN_SET){
 8002266:	7dbb      	ldrb	r3, [r7, #22]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d104      	bne.n	8002276 <TetrisLevelSelect_Update+0x7a>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <TetrisLevelSelect_Update+0xa8>)
 800226e:	f000 f84f 	bl	8002310 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 8002272:	2301      	movs	r3, #1
 8002274:	e00b      	b.n	800228e <TetrisLevelSelect_Update+0x92>
	}

	WriteStartLevelToFrameBuffer();
 8002276:	f7ff ff71 	bl	800215c <WriteStartLevelToFrameBuffer>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(2,2,0,84);
 800227a:	2354      	movs	r3, #84	; 0x54
 800227c:	2200      	movs	r2, #0
 800227e:	2102      	movs	r1, #2
 8002280:	2002      	movs	r0, #2
 8002282:	f7fe f9a3 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 8002286:	4808      	ldr	r0, [pc, #32]	; (80022a8 <TetrisLevelSelect_Update+0xac>)
 8002288:	f7fe fac8 	bl	800081c <gfxFinishDrawing>



	return NoChange;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000404 	.word	0x20000404
 800229c:	20000888 	.word	0x20000888
 80022a0:	48000400 	.word	0x48000400
 80022a4:	200000c4 	.word	0x200000c4
 80022a8:	2000066c 	.word	0x2000066c

080022ac <TetrisLevelSelect_OnEnter>:

void TetrisLevelSelect_Init(){

}

void TetrisLevelSelect_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
	gfxWriteTextLineToFrameBuffer(0,0,"Select Level");
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <TetrisLevelSelect_OnEnter+0x38>)
 80022ba:	2100      	movs	r1, #0
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fb61 	bl	8000984 <gfxWriteTextLineToFrameBuffer>
	gfxClearFrameBuffer();
 80022c2:	f7fe f93d 	bl	8000540 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 80022c6:	f7fe fc07 	bl	8000ad8 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 80022ca:	2354      	movs	r3, #84	; 0x54
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7fe f97b 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxFinishDrawing(&gLcdScreen);
 80022d6:	4804      	ldr	r0, [pc, #16]	; (80022e8 <TetrisLevelSelect_OnEnter+0x3c>)
 80022d8:	f7fe faa0 	bl	800081c <gfxFinishDrawing>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	08009628 	.word	0x08009628
 80022e8:	2000066c 	.word	0x2000066c

080022ec <TetrisLevelSelect_OnExit>:

void TetrisLevelSelect_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
	srand(randomSeed);
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <TetrisLevelSelect_OnExit+0x20>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f005 ff39 	bl	8008174 <srand>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000404 	.word	0x20000404

08002310 <TetrisMain_SetStateMachineDataPointer>:
#define ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS 1


static void* _stateMachineDataPointer = 0;

void TetrisMain_SetStateMachineDataPointer(void* dataPtr){
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	_stateMachineDataPointer = dataPtr;
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <TetrisMain_SetStateMachineDataPointer+0x1c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000408 	.word	0x20000408

08002330 <TetrisMain_Init>:

static State _states[NumStates];
static Tetris_Modes_States _currentState = LevelSelect;


void TetrisMain_Init(){
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
	/* Setup the state machines states */
	TetrisPersistantData_LoadAllPeristantData();
 8002336:	f000 f8e7 	bl	8002508 <TetrisPersistantData_LoadAllPeristantData>
	//TetrisPersistantData_SaveAllPersistantData();
	TetrisGame_Init();
 800233a:	f7ff fcd7 	bl	8001cec <TetrisGame_Init>
	u8 startLevel = 5;
 800233e:	2305      	movs	r3, #5
 8002340:	71fb      	strb	r3, [r7, #7]
	/* Lead-in to the first state */
	//TetrisGame_OnEnter(&startLevel,NoState);
	TetrisLevelSelect_OnEnter(0,NoState);
 8002342:	2104      	movs	r1, #4
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff ffb1 	bl	80022ac <TetrisLevelSelect_OnEnter>

	_states[Playing].NumTransitions = PLAYING_NUM_TRANSITIONS;
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <TetrisMain_Init+0xa0>)
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2020 	strb.w	r2, [r3, #32]
	_states[Playing].Transitions = _playingTransitions;
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002354:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <TetrisMain_Init+0xa4>)
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
	_states[Playing].UpdateFunction = &TetrisGame_Update;
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <TetrisMain_Init+0xa0>)
 800235a:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <TetrisMain_Init+0xa8>)
 800235c:	615a      	str	r2, [r3, #20]
	_states[Playing].OnEnterFunction = &TetrisGame_OnEnter;
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002360:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <TetrisMain_Init+0xac>)
 8002362:	619a      	str	r2, [r3, #24]
	_states[Playing].OnExitFunction = &TetrisGame_OnExit;
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002366:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <TetrisMain_Init+0xb0>)
 8002368:	61da      	str	r2, [r3, #28]

	_states[LevelSelect].NumTransitions = LEVEL_SELECT_NUM_TRANSITIONS;
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <TetrisMain_Init+0xa0>)
 800236c:	2201      	movs	r2, #1
 800236e:	731a      	strb	r2, [r3, #12]
	_states[LevelSelect].Transitions = _levelSelectTransitions;
 8002370:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002372:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <TetrisMain_Init+0xb4>)
 8002374:	611a      	str	r2, [r3, #16]
	_states[LevelSelect].UpdateFunction = &TetrisLevelSelect_Update;
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002378:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <TetrisMain_Init+0xb8>)
 800237a:	601a      	str	r2, [r3, #0]
	_states[LevelSelect].OnEnterFunction = &TetrisLevelSelect_OnEnter;
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <TetrisMain_Init+0xa0>)
 800237e:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <TetrisMain_Init+0xbc>)
 8002380:	605a      	str	r2, [r3, #4]
	_states[LevelSelect].OnExitFunction = &TetrisLevelSelect_OnExit;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <TetrisMain_Init+0xc0>)
 8002386:	609a      	str	r2, [r3, #8]

	_states[PlayAgainDialogue].NumTransitions = PLAY_AGAIN_SCREEN_NUM_TRANSITIONS;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <TetrisMain_Init+0xa0>)
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	_states[PlayAgainDialogue].Transitions = _playAgainScreenTransitions;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <TetrisMain_Init+0xc4>)
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
	_states[PlayAgainDialogue].UpdateFunction = &TetrisPlayAgain_Update;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <TetrisMain_Init+0xa0>)
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <TetrisMain_Init+0xc8>)
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
	_states[PlayAgainDialogue].OnEnterFunction = &TetrisPlayAgain_OnEnter;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <TetrisMain_Init+0xa0>)
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <TetrisMain_Init+0xcc>)
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
	_states[PlayAgainDialogue].OnExitFunction = &TetrisPlayAgain_OnExit;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <TetrisMain_Init+0xd0>)
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30

	_states[EnterNewHighScoreScreen].NumTransitions = ENTER_NEW_HIGH_SCORE_SCREEN_NUM_TRANSITIONS;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	_states[EnterNewHighScoreScreen].Transitions = _enterNewHighScoreScreenTransitions;
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023b2:	4a14      	ldr	r2, [pc, #80]	; (8002404 <TetrisMain_Init+0xd4>)
 80023b4:	64da      	str	r2, [r3, #76]	; 0x4c
	_states[EnterNewHighScoreScreen].UpdateFunction = &TetrisEnterHighScore_Update;
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <TetrisMain_Init+0xd8>)
 80023ba:	63da      	str	r2, [r3, #60]	; 0x3c
	_states[EnterNewHighScoreScreen].OnEnterFunction = &TetrisEnterHighScore_OnEnter;
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <TetrisMain_Init+0xdc>)
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
	_states[EnterNewHighScoreScreen].OnExitFunction = &TetrisEnterHighScore_OnExit;
 80023c2:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <TetrisMain_Init+0xa0>)
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <TetrisMain_Init+0xe0>)
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44


}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	2000040c 	.word	0x2000040c
 80023d4:	08009ed0 	.word	0x08009ed0
 80023d8:	08001cbd 	.word	0x08001cbd
 80023dc:	08001d21 	.word	0x08001d21
 80023e0:	08001d89 	.word	0x08001d89
 80023e4:	08009ecc 	.word	0x08009ecc
 80023e8:	080021fd 	.word	0x080021fd
 80023ec:	080022ad 	.word	0x080022ad
 80023f0:	080022ed 	.word	0x080022ed
 80023f4:	08009ed4 	.word	0x08009ed4
 80023f8:	08002541 	.word	0x08002541
 80023fc:	08002579 	.word	0x08002579
 8002400:	080025c5 	.word	0x080025c5
 8002404:	08009ed8 	.word	0x08009ed8
 8002408:	08001591 	.word	0x08001591
 800240c:	08001715 	.word	0x08001715
 8002410:	080017d5 	.word	0x080017d5

08002414 <TetrisMain_Update>:

void TetrisMain_Update(u32 timePassed){
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	/* Call update on the current state, the return value of update will determine there should be a change to a new state */
	Tetris_Modes_StateTriggers updateResult = _states[_currentState].UpdateFunction(timePassed);
 800241c:	4b37      	ldr	r3, [pc, #220]	; (80024fc <TetrisMain_Update+0xe8>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	4a37      	ldr	r2, [pc, #220]	; (8002500 <TetrisMain_Update+0xec>)
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	4603      	mov	r3, r0
 8002436:	76fb      	strb	r3, [r7, #27]
	if(updateResult == NoChange){
 8002438:	7efb      	ldrb	r3, [r7, #27]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d059      	beq.n	80024f2 <TetrisMain_Update+0xde>
		return;
	}
	/* If we're at this point there should be a change in state */
	u32 numTransitions = _states[_currentState].NumTransitions;
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <TetrisMain_Update+0xe8>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	4619      	mov	r1, r3
 8002444:	4a2e      	ldr	r2, [pc, #184]	; (8002500 <TetrisMain_Update+0xec>)
 8002446:	460b      	mov	r3, r1
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	330c      	adds	r3, #12
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]
	Transition* transitions = _states[_currentState].Transitions;
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <TetrisMain_Update+0xe8>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <TetrisMain_Update+0xec>)
 800245e:	460b      	mov	r3, r1
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3310      	adds	r3, #16
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	613b      	str	r3, [r7, #16]
	/* Find the transition for the state change trigger returned by update */
	for(i32 i=0; i<numTransitions; i++){
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e039      	b.n	80024e8 <TetrisMain_Update+0xd4>
		if(transitions[i].trigger == updateResult){
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	7efa      	ldrb	r2, [r7, #27]
 8002480:	429a      	cmp	r2, r3
 8002482:	d12e      	bne.n	80024e2 <TetrisMain_Update+0xce>
			/* Change state and call enter and exit functions for the transition */
			Tetris_Modes_States last = _currentState;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <TetrisMain_Update+0xe8>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	73fb      	strb	r3, [r7, #15]
			_states[_currentState].OnExitFunction(_stateMachineDataPointer, transitions[i].destination);
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <TetrisMain_Update+0xe8>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <TetrisMain_Update+0xec>)
 8002492:	460b      	mov	r3, r1
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	3308      	adds	r3, #8
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a18      	ldr	r2, [pc, #96]	; (8002504 <TetrisMain_Update+0xf0>)
 80024a2:	6810      	ldr	r0, [r2, #0]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	0052      	lsls	r2, r2, #1
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	440a      	add	r2, r1
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4798      	blx	r3
			_currentState = transitions[i].destination;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <TetrisMain_Update+0xe8>)
 80024be:	701a      	strb	r2, [r3, #0]
			_states[_currentState].OnEnterFunction(_stateMachineDataPointer, last);
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <TetrisMain_Update+0xe8>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <TetrisMain_Update+0xec>)
 80024c8:	460b      	mov	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3304      	adds	r3, #4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <TetrisMain_Update+0xf0>)
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	7bf9      	ldrb	r1, [r7, #15]
 80024dc:	4610      	mov	r0, r2
 80024de:	4798      	blx	r3
			return;
 80024e0:	e008      	b.n	80024f4 <TetrisMain_Update+0xe0>
	for(i32 i=0; i<numTransitions; i++){
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8c1      	bhi.n	8002474 <TetrisMain_Update+0x60>
 80024f0:	e000      	b.n	80024f4 <TetrisMain_Update+0xe0>
		return;
 80024f2:	bf00      	nop
		}
	}
}
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000470 	.word	0x20000470
 8002500:	2000040c 	.word	0x2000040c
 8002504:	20000408 	.word	0x20000408

08002508 <TetrisPersistantData_LoadAllPeristantData>:
#include "TetrisPersistantData.h"
#include "TetrisHighScores.h"
#include "main.h"
#include "stm32f3xx_hal_flash_ex.h"

void TetrisPersistantData_LoadAllPeristantData(){
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	u32 nextAddress = TetrisHighScores_Load();
 800250e:	f7ff fd3b 	bl	8001f88 <TetrisHighScores_Load>
 8002512:	6078      	str	r0, [r7, #4]

}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <TetrisPersistantData_SaveAllPersistantData>:
void TetrisPersistantData_SaveAllPersistantData(){
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002522:	f002 f943 	bl	80047ac <HAL_FLASH_Unlock>

	u32 pageError;
	HAL_FLASHEx_Erase(&eraseInit,&pageError);
	*/

	u32 nextAddress = TetrisHighScores_Save(FINAL_PAGE_START_ADDRESS);
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <TetrisPersistantData_SaveAllPersistantData+0x20>)
 8002528:	f7ff fd8a 	bl	8002040 <TetrisHighScores_Save>
 800252c:	6078      	str	r0, [r7, #4]

	HAL_FLASH_Lock();
 800252e:	f002 f963 	bl	80047f8 <HAL_FLASH_Lock>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	0800f800 	.word	0x0800f800

08002540 <TetrisPlayAgain_Update>:
extern LCD_PCD8544_screen_t gLcdScreen;

static u8 _startLevel;


Tetris_Modes_StateTriggers TetrisPlayAgain_Update(u32 TimePassed){
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

	/* Will have option to go back to main menu.  67 */
	GPIO_PinState buttonBState = HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin);
 8002548:	2101      	movs	r1, #1
 800254a:	4809      	ldr	r0, [pc, #36]	; (8002570 <TetrisPlayAgain_Update+0x30>)
 800254c:	f002 fc08 	bl	8004d60 <HAL_GPIO_ReadPin>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
	if(buttonBState == GPIO_PIN_SET){
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d104      	bne.n	8002564 <TetrisPlayAgain_Update+0x24>
		TetrisMain_SetStateMachineDataPointer(&_startLevel);
 800255a:	4806      	ldr	r0, [pc, #24]	; (8002574 <TetrisPlayAgain_Update+0x34>)
 800255c:	f7ff fed8 	bl	8002310 <TetrisMain_SetStateMachineDataPointer>
		return StartPlaying;
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <TetrisPlayAgain_Update+0x26>
	}

	return NoChange;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	48000400 	.word	0x48000400
 8002574:	20000471 	.word	0x20000471

08002578 <TetrisPlayAgain_OnEnter>:

void TetrisPlayAgain_Init(){

}

void TetrisPlayAgain_OnEnter(void* stateMachineDataPtr, Tetris_Modes_States previousState){
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	70fb      	strb	r3, [r7, #3]
	_startLevel = *((u8*)stateMachineDataPtr);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <TetrisPlayAgain_OnEnter+0x40>)
 800258a:	701a      	strb	r2, [r3, #0]
	gfxClearFrameBuffer();
 800258c:	f7fd ffd8 	bl	8000540 <gfxClearFrameBuffer>
	ClearUpdateRegions();
 8002590:	f7fe faa2 	bl	8000ad8 <ClearUpdateRegions>
	UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen(0,0,0,84);
 8002594:	2354      	movs	r3, #84	; 0x54
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe f816 	bl	80005cc <UpdateScreenRegionsToUpdate_FrameBufferRectCopiedToScreen>
	gfxWriteTextLineToFrameBuffer(0,0,"Play Again?");
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <TetrisPlayAgain_OnEnter+0x44>)
 80025a2:	2100      	movs	r1, #0
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7fe f9ed 	bl	8000984 <gfxWriteTextLineToFrameBuffer>

	gfxFinishDrawing(&gLcdScreen);
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <TetrisPlayAgain_OnEnter+0x48>)
 80025ac:	f7fe f936 	bl	800081c <gfxFinishDrawing>

}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000471 	.word	0x20000471
 80025bc:	08009638 	.word	0x08009638
 80025c0:	2000066c 	.word	0x2000066c

080025c4 <TetrisPlayAgain_OnExit>:

void TetrisPlayAgain_OnExit(void* stateMachineDataPtr, Tetris_Modes_States nextState){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
	ClearScreen(&gLcdScreen);
 80025d0:	4803      	ldr	r0, [pc, #12]	; (80025e0 <TetrisPlayAgain_OnExit+0x1c>)
 80025d2:	f7fe fab1 	bl	8000b38 <ClearScreen>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000066c 	.word	0x2000066c

080025e4 <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 80025ec:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80025f0:	2100      	movs	r1, #0
 80025f2:	481e      	ldr	r0, [pc, #120]	; (800266c <LCD_PCD8544_init+0x88>)
 80025f4:	f005 fdb6 	bl	8008164 <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f976 	bl	80028f2 <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f98e 	bl	8002928 <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f9ab 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	7bb9      	ldrb	r1, [r7, #14]
 8002616:	2301      	movs	r3, #1
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8ae 	bl	800277a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 800261e:	2103      	movs	r1, #3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f939 	bl	8002898 <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 8002626:	2140      	movs	r1, #64	; 0x40
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f94e 	bl	80028ca <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 800262e:	2102      	movs	r1, #2
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f918 	bl	8002866 <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	7bb9      	ldrb	r1, [r7, #14]
 800263a:	2300      	movs	r3, #0
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f89c 	bl	800277a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2101      	movs	r1, #1
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f8c7 	bl	80027da <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2100      	movs	r1, #0
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f8e5 	bl	8002820 <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f996 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f845 	bl	80026ec <LCD_PCD8544_clear_ram>
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000474 	.word	0x20000474

08002670 <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	72fb      	strb	r3, [r7, #11]
 800267e:	4613      	mov	r3, r2
 8002680:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f94c 	bl	8002928 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f969 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8002696:	7dfa      	ldrb	r2, [r7, #23]
 8002698:	7db9      	ldrb	r1, [r7, #22]
 800269a:	2300      	movs	r3, #0
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f86c 	bl	800277a <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 80026a2:	7abb      	ldrb	r3, [r7, #10]
 80026a4:	461a      	mov	r2, r3
 80026a6:	0052      	lsls	r2, r2, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	7afb      	ldrb	r3, [r7, #11]
 80026b0:	4619      	mov	r1, r3
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f8b4 	bl	8002820 <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f965 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f942 	bl	8002948 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f94f 	bl	8002968 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 80026ca:	8c3b      	ldrh	r3, [r7, #32]
 80026cc:	461a      	mov	r2, r3
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f81f 	bl	8002714 <LCD_PCD8544_LL_send_data>
 80026d6:	4603      	mov	r3, r0
 80026d8:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f954 	bl	8002988 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 80026e0:	7d7b      	ldrb	r3, [r7, #21]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 80026f4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <LCD_PCD8544_clear_ram+0x24>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffb5 	bl	8002670 <LCD_PCD8544_write_bytes>
 8002706:	4603      	mov	r3, r0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000474 	.word	0x20000474

08002714 <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	4613      	mov	r3, r2
 8002720:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	2302      	movs	r3, #2
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	f003 ff35 	bl	800659a <HAL_SPI_Transmit>
 8002730:	4603      	mov	r3, r0
 8002732:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	69d8      	ldr	r0, [r3, #28]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8c1b      	ldrh	r3, [r3, #32]
 8002742:	2200      	movs	r2, #0
 8002744:	4619      	mov	r1, r3
 8002746:	f002 fb23 	bl	8004d90 <HAL_GPIO_WritePin>
	}
	return stat;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 8002760:	2301      	movs	r3, #1
 8002762:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8002764:	89fa      	ldrh	r2, [r7, #14]
 8002766:	1cfb      	adds	r3, r7, #3
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffd2 	bl	8002714 <LCD_PCD8544_LL_send_data>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	4608      	mov	r0, r1
 8002784:	4611      	mov	r1, r2
 8002786:	461a      	mov	r2, r3
 8002788:	4603      	mov	r3, r0
 800278a:	70fb      	strb	r3, [r7, #3]
 800278c:	460b      	mov	r3, r1
 800278e:	70bb      	strb	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	b25b      	sxtb	r3, r3
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	b25b      	sxtb	r3, r3
 80027a0:	f043 0320 	orr.w	r3, r3, #32
 80027a4:	b25a      	sxtb	r2, r3
 80027a6:	78bb      	ldrb	r3, [r7, #2]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	b25a      	sxtb	r2, r3
 80027b6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	4619      	mov	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ffc2 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70fb      	strb	r3, [r7, #3]
 80027e6:	4613      	mov	r3, r2
 80027e8:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	b25a      	sxtb	r2, r3
 80027fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	b25b      	sxtb	r3, r3
 8002806:	4313      	orrs	r3, r2
 8002808:	b25b      	sxtb	r3, r3
 800280a:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff9f 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 8002816:	4603      	mov	r3, r0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
 800282c:	4613      	mov	r3, r2
 800282e:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 8002830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	b25b      	sxtb	r3, r3
 800283a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283e:	b25b      	sxtb	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 8002844:	78bb      	ldrb	r3, [r7, #2]
 8002846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800284a:	b2db      	uxtb	r3, r3
 800284c:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	2202      	movs	r2, #2
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ff5c 	bl	8002714 <LCD_PCD8544_LL_send_data>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 8002872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	b25b      	sxtb	r3, r3
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	b25b      	sxtb	r3, r3
 8002882:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff63 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 800288e:	4603      	mov	r3, r0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 80028a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	f043 0310 	orr.w	r3, r3, #16
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ff4a 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028dc:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff36 	bl	8002754 <LCD_PCD8544_LL_send_byte>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6858      	ldr	r0, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	891b      	ldrh	r3, [r3, #8]
 8002902:	2200      	movs	r2, #0
 8002904:	4619      	mov	r1, r3
 8002906:	f002 fa43 	bl	8004d90 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 800290a:	2001      	movs	r0, #1
 800290c:	f000 fe88 	bl	8003620 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6858      	ldr	r0, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	891b      	ldrh	r3, [r3, #8]
 8002918:	2201      	movs	r2, #1
 800291a:	4619      	mov	r1, r3
 800291c:	f002 fa38 	bl	8004d90 <HAL_GPIO_WritePin>
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6958      	ldr	r0, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8b1b      	ldrh	r3, [r3, #24]
 8002938:	2200      	movs	r2, #0
 800293a:	4619      	mov	r1, r3
 800293c:	f002 fa28 	bl	8004d90 <HAL_GPIO_WritePin>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6958      	ldr	r0, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8b1b      	ldrh	r3, [r3, #24]
 8002958:	2201      	movs	r2, #1
 800295a:	4619      	mov	r1, r3
 800295c:	f002 fa18 	bl	8004d90 <HAL_GPIO_WritePin>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68d8      	ldr	r0, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8a1b      	ldrh	r3, [r3, #16]
 8002978:	2200      	movs	r2, #0
 800297a:	4619      	mov	r1, r3
 800297c:	f002 fa08 	bl	8004d90 <HAL_GPIO_WritePin>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68d8      	ldr	r0, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8a1b      	ldrh	r3, [r3, #16]
 8002998:	2201      	movs	r2, #1
 800299a:	4619      	mov	r1, r3
 800299c:	f002 f9f8 	bl	8004d90 <HAL_GPIO_WritePin>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b0ee      	sub	sp, #440	; 0x1b8
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ae:	f000 fdd1 	bl	8003554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b2:	f000 f857 	bl	8002a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b6:	f000 faaf 	bl	8002f18 <MX_GPIO_Init>
  MX_SPI1_Init();
 80029ba:	f000 f91d 	bl	8002bf8 <MX_SPI1_Init>
  MX_ADC2_Init();
 80029be:	f000 f8ad 	bl	8002b1c <MX_ADC2_Init>
  MX_TIM2_Init();
 80029c2:	f000 fa05 	bl	8002dd0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80029c6:	f000 f955 	bl	8002c74 <MX_TIM1_Init>
  MX_TIM3_Init();
 80029ca:	f000 fa57 	bl	8002e7c <MX_TIM3_Init>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  // Calibrate The ADC On Power-Up For Better Accuracy
  //HAL_ADCEx_Calibration_Start(&hadc2);
  //HAL_TIM_Base_Start(&htim1);

  Buzzer_Init(&htim1);
 80029ce:	481f      	ldr	r0, [pc, #124]	; (8002a4c <main+0xa4>)
 80029d0:	f7fd fd7e 	bl	80004d0 <Buzzer_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80029d4:	481e      	ldr	r0, [pc, #120]	; (8002a50 <main+0xa8>)
 80029d6:	f004 f90b 	bl	8006bf0 <HAL_TIM_Base_Start_IT>


  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <main+0xac>)
 80029dc:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <main+0xb0>)
 80029de:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <main+0xac>)
 80029e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80029e6:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <main+0xac>)
 80029ea:	2208      	movs	r2, #8
 80029ec:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <main+0xac>)
 80029f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80029f4:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <main+0xac>)
 80029f8:	2202      	movs	r2, #2
 80029fa:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 80029fc:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <main+0xac>)
 80029fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002a02:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <main+0xac>)
 8002a06:	2210      	movs	r2, #16
 8002a08:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 8002a0a:	4812      	ldr	r0, [pc, #72]	; (8002a54 <main+0xac>)
 8002a0c:	f7ff fdea 	bl	80025e4 <LCD_PCD8544_init>

    // LCD - welcome screen
  //static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002a10:	2100      	movs	r1, #0
 8002a12:	4812      	ldr	r0, [pc, #72]	; (8002a5c <main+0xb4>)
 8002a14:	f001 f94b 	bl	8003cae <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   TetrisMain_Init();
 8002a18:	f7ff fc8a 	bl	8002330 <TetrisMain_Init>

   //HAL_TIM_RegisterCallback(&htim3,HAL_TIM_PERIOD_ELAPSED_CB_ID,&MusicPlayer_TimerISR);

#define TEST_TUNE_LENGTH 55
#define TEMPO_MODIFIER 3
   MusicNote tetrisTune[TEST_TUNE_LENGTH] = {
 8002a1c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002a20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <main+0xb8>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	4611      	mov	r1, r2
 8002a2a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f005 fb8a 	bl	8008148 <memcpy>
		   {E4,1014/TEMPO_MODIFIER},
		   {A4,2026/TEMPO_MODIFIER},
		   {GSHARP4,4090/TEMPO_MODIFIER},

   };
   MusicPlayer_StartTune(&tetrisTune[0],TEST_TUNE_LENGTH);//HAL_TIM_PERIOD_ELAPSED_CB_ID
 8002a34:	463b      	mov	r3, r7
 8002a36:	2137      	movs	r1, #55	; 0x37
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe f8cd 	bl	8000bd8 <MusicPlayer_StartTune>

   while (1)
   {
	   TetrisMain_Update(50);
 8002a3e:	2032      	movs	r0, #50	; 0x32
 8002a40:	f7ff fce8 	bl	8002414 <TetrisMain_Update>
	   HAL_Delay(50);
 8002a44:	2032      	movs	r0, #50	; 0x32
 8002a46:	f000 fdeb 	bl	8003620 <HAL_Delay>
	   TetrisMain_Update(50);
 8002a4a:	e7f8      	b.n	8002a3e <main+0x96>
 8002a4c:	2000093c 	.word	0x2000093c
 8002a50:	200009d4 	.word	0x200009d4
 8002a54:	2000066c 	.word	0x2000066c
 8002a58:	200008d8 	.word	0x200008d8
 8002a5c:	20000888 	.word	0x20000888
 8002a60:	08009644 	.word	0x08009644

08002a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b096      	sub	sp, #88	; 0x58
 8002a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a6e:	2228      	movs	r2, #40	; 0x28
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f005 fb76 	bl	8008164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	611a      	str	r2, [r3, #16]
 8002a96:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002aac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ab0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 f982 	bl	8004dc0 <HAL_RCC_OscConfig>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002ac2:	f000 fab5 	bl	8003030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac6:	230f      	movs	r3, #15
 8002ac8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002ad2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 f9aa 	bl	8005e3c <HAL_RCC_ClockConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002aee:	f000 fa9f 	bl	8003030 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8002af2:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8002af6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 fb7f 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002b10:	f000 fa8e 	bl	8003030 <Error_Handler>
  }
}
 8002b14:	bf00      	nop
 8002b16:	3758      	adds	r7, #88	; 0x58
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b22:	463b      	mov	r3, r7
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
 8002b30:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002b32:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b34:	4a2f      	ldr	r2, [pc, #188]	; (8002bf4 <MX_ADC2_Init+0xd8>)
 8002b36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b44:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002b4a:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002b70:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b72:	2202      	movs	r2, #2
 8002b74:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b80:	2204      	movs	r2, #4
 8002b82:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002b90:	4817      	ldr	r0, [pc, #92]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002b92:	f000 fd69 	bl	8003668 <HAL_ADC_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8002b9c:	f000 fa48 	bl	8003030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bb8:	463b      	mov	r3, r7
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002bbe:	f001 f8e9 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8002bc8:	f000 fa32 	bl	8003030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_ADC2_Init+0xd4>)
 8002bda:	f001 f8db 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8002be4:	f000 fa24 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002be8:	bf00      	nop
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000888 	.word	0x20000888
 8002bf4:	50000100 	.word	0x50000100

08002bf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	; (8002c70 <MX_SPI1_Init+0x78>)
 8002c00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c46:	2207      	movs	r2, #7
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c52:	2208      	movs	r2, #8
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_SPI1_Init+0x74>)
 8002c58:	f003 fbfc 	bl	8006454 <HAL_SPI_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c62:	f000 f9e5 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200008d8 	.word	0x200008d8
 8002c70:	40013000 	.word	0x40013000

08002c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b09a      	sub	sp, #104	; 0x68
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
 8002ca4:	615a      	str	r2, [r3, #20]
 8002ca6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	222c      	movs	r2, #44	; 0x2c
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f005 fa58 	bl	8008164 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cb4:	4b44      	ldr	r3, [pc, #272]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002cb6:	4a45      	ldr	r2, [pc, #276]	; (8002dcc <MX_TIM1_Init+0x158>)
 8002cb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc0:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4600;
 8002cc6:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002cc8:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8002ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cce:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cda:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ce0:	4839      	ldr	r0, [pc, #228]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002ce2:	f003 ff2d 	bl	8006b40 <HAL_TIM_Base_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002cec:	f000 f9a0 	bl	8003030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4832      	ldr	r0, [pc, #200]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002cfe:	f004 fc25 	bl	800754c <HAL_TIM_ConfigClockSource>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d08:	f000 f992 	bl	8003030 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002d0c:	482e      	ldr	r0, [pc, #184]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002d0e:	f003 ffcb 	bl	8006ca8 <HAL_TIM_OC_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d18:	f000 f98a 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d20:	2300      	movs	r3, #0
 8002d22:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4826      	ldr	r0, [pc, #152]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002d30:	f005 f8dc 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002d3a:	f000 f979 	bl	8003030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002d3e:	2330      	movs	r3, #48	; 0x30
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2300;
 8002d42:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d60:	2200      	movs	r2, #0
 8002d62:	4619      	mov	r1, r3
 8002d64:	4818      	ldr	r0, [pc, #96]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002d66:	f004 fa63 	bl	8007230 <HAL_TIM_OC_ConfigChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002d70:	f000 f95e 	bl	8003030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	4807      	ldr	r0, [pc, #28]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002daa:	f005 f90d 	bl	8007fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002db4:	f000 f93c 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002db8:	4803      	ldr	r0, [pc, #12]	; (8002dc8 <MX_TIM1_Init+0x154>)
 8002dba:	f000 fa5d 	bl	8003278 <HAL_TIM_MspPostInit>

}
 8002dbe:	bf00      	nop
 8002dc0:	3768      	adds	r7, #104	; 0x68
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000093c 	.word	0x2000093c
 8002dcc:	40012c00 	.word	0x40012c00

08002dd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd6:	f107 031c 	add.w	r3, r7, #28
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de2:	463b      	mov	r3, r7
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
 8002df0:	615a      	str	r2, [r3, #20]
 8002df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <MX_TIM2_Init+0xa8>)
 8002df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <MX_TIM2_Init+0xa8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <MX_TIM2_Init+0xa8>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <MX_TIM2_Init+0xa8>)
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <MX_TIM2_Init+0xa8>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e16:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <MX_TIM2_Init+0xa8>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e1c:	4816      	ldr	r0, [pc, #88]	; (8002e78 <MX_TIM2_Init+0xa8>)
 8002e1e:	f004 f891 	bl	8006f44 <HAL_TIM_PWM_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002e28:	f000 f902 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	4619      	mov	r1, r3
 8002e3a:	480f      	ldr	r0, [pc, #60]	; (8002e78 <MX_TIM2_Init+0xa8>)
 8002e3c:	f005 f856 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002e46:	f000 f8f3 	bl	8003030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e4a:	2360      	movs	r3, #96	; 0x60
 8002e4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4805      	ldr	r0, [pc, #20]	; (8002e78 <MX_TIM2_Init+0xa8>)
 8002e62:	f004 fa5f 	bl	8007324 <HAL_TIM_PWM_ConfigChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002e6c:	f000 f8e0 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000988 	.word	0x20000988

08002e7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <MX_TIM3_Init+0x94>)
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <MX_TIM3_Init+0x98>)
 8002e9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <MX_TIM3_Init+0x94>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <MX_TIM3_Init+0x94>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8002eac:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <MX_TIM3_Init+0x94>)
 8002eae:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002eb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <MX_TIM3_Init+0x94>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <MX_TIM3_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ec0:	4813      	ldr	r0, [pc, #76]	; (8002f10 <MX_TIM3_Init+0x94>)
 8002ec2:	f003 fe3d 	bl	8006b40 <HAL_TIM_Base_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ecc:	f000 f8b0 	bl	8003030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	4619      	mov	r1, r3
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <MX_TIM3_Init+0x94>)
 8002ede:	f004 fb35 	bl	800754c <HAL_TIM_ConfigClockSource>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ee8:	f000 f8a2 	bl	8003030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eec:	2300      	movs	r3, #0
 8002eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4805      	ldr	r0, [pc, #20]	; (8002f10 <MX_TIM3_Init+0x94>)
 8002efa:	f004 fff7 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002f04:	f000 f894 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f08:	bf00      	nop
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	200009d4 	.word	0x200009d4
 8002f14:	40000400 	.word	0x40000400

08002f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1e:	f107 030c 	add.w	r3, r7, #12
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <MX_GPIO_Init+0xf0>)
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4a35      	ldr	r2, [pc, #212]	; (8003008 <MX_GPIO_Init+0xf0>)
 8002f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f38:	6153      	str	r3, [r2, #20]
 8002f3a:	4b33      	ldr	r3, [pc, #204]	; (8003008 <MX_GPIO_Init+0xf0>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	4b30      	ldr	r3, [pc, #192]	; (8003008 <MX_GPIO_Init+0xf0>)
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <MX_GPIO_Init+0xf0>)
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f50:	6153      	str	r3, [r2, #20]
 8002f52:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <MX_GPIO_Init+0xf0>)
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <MX_GPIO_Init+0xf0>)
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	4a29      	ldr	r2, [pc, #164]	; (8003008 <MX_GPIO_Init+0xf0>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6153      	str	r3, [r2, #20]
 8002f6a:	4b27      	ldr	r3, [pc, #156]	; (8003008 <MX_GPIO_Init+0xf0>)
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8002f76:	2201      	movs	r2, #1
 8002f78:	210a      	movs	r1, #10
 8002f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f7e:	f001 ff07 	bl	8004d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2110      	movs	r1, #16
 8002f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8a:	f001 ff01 	bl	8004d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8002f8e:	231a      	movs	r3, #26
 8002f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f92:	2301      	movs	r3, #1
 8002f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9e:	f107 030c 	add.w	r3, r7, #12
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fa8:	f001 fd68 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002fac:	f248 0304 	movw	r3, #32772	; 0x8004
 8002fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	f107 030c 	add.w	r3, r7, #12
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fcc:	f001 fd56 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480a      	ldr	r0, [pc, #40]	; (800300c <MX_GPIO_Init+0xf4>)
 8002fe4:	f001 fd4a 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOGUE_STICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = ANALOGUE_STICK_BUTTON_Pin;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANALOGUE_STICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4804      	ldr	r0, [pc, #16]	; (800300c <MX_GPIO_Init+0xf4>)
 8002ffc:	f001 fd3e 	bl	8004a7c <HAL_GPIO_Init>

}
 8003000:	bf00      	nop
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	48000400 	.word	0x48000400

08003010 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_TIM_PeriodElapsedCallback+0x14>
		MusicPlayer_TimerISR();
 8003020:	f7fd fe04 	bl	8000c2c <MusicPlayer_TimerISR>
	}
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	200009d4 	.word	0x200009d4

08003030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003034:	b672      	cpsid	i
}
 8003036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003038:	e7fe      	b.n	8003038 <Error_Handler+0x8>
	...

0800303c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_MspInit+0x4c>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_MspInit+0x4c>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6193      	str	r3, [r2, #24]
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_MspInit+0x4c>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_MspInit+0x4c>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_MspInit+0x4c>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	61d3      	str	r3, [r2, #28]
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_MspInit+0x4c>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	210f      	movs	r1, #15
 8003076:	f06f 0001 	mvn.w	r0, #1
 800307a:	f001 faf0 	bl	800465e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000

0800308c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a15      	ldr	r2, [pc, #84]	; (8003100 <HAL_ADC_MspInit+0x74>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d124      	bne.n	80030f8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_ADC_MspInit+0x78>)
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_ADC_MspInit+0x78>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6153      	str	r3, [r2, #20]
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_ADC_MspInit+0x78>)
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_ADC_MspInit+0x78>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <HAL_ADC_MspInit+0x78>)
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	6153      	str	r3, [r2, #20]
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_ADC_MspInit+0x78>)
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 80030de:	2360      	movs	r3, #96	; 0x60
 80030e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e2:	2303      	movs	r3, #3
 80030e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030f4:	f001 fcc2 	bl	8004a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80030f8:	bf00      	nop
 80030fa:	3728      	adds	r7, #40	; 0x28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	50000100 	.word	0x50000100
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <HAL_SPI_MspInit+0xb4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d144      	bne.n	80031b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800312a:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_SPI_MspInit+0xb8>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_SPI_MspInit+0xb8>)
 8003130:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003134:	6193      	str	r3, [r2, #24]
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_SPI_MspInit+0xb8>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003142:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_SPI_MspInit+0xb8>)
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <HAL_SPI_MspInit+0xb8>)
 8003148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314c:	6153      	str	r3, [r2, #20]
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_SPI_MspInit+0xb8>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_SPI_MspInit+0xb8>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <HAL_SPI_MspInit+0xb8>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003164:	6153      	str	r3, [r2, #20]
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <HAL_SPI_MspInit+0xb8>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003176:	2302      	movs	r3, #2
 8003178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800317e:	2303      	movs	r3, #3
 8003180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003182:	2305      	movs	r3, #5
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003186:	f107 0314 	add.w	r3, r7, #20
 800318a:	4619      	mov	r1, r3
 800318c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003190:	f001 fc74 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003194:	2308      	movs	r3, #8
 8003196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a0:	2303      	movs	r3, #3
 80031a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031a4:	2305      	movs	r3, #5
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4619      	mov	r1, r3
 80031ae:	4805      	ldr	r0, [pc, #20]	; (80031c4 <HAL_SPI_MspInit+0xbc>)
 80031b0:	f001 fc64 	bl	8004a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031b4:	bf00      	nop
 80031b6:	3728      	adds	r7, #40	; 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40013000 	.word	0x40013000
 80031c0:	40021000 	.word	0x40021000
 80031c4:	48000400 	.word	0x48000400

080031c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a16      	ldr	r2, [pc, #88]	; (8003230 <HAL_TIM_Base_MspInit+0x68>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d10c      	bne.n	80031f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_TIM_Base_MspInit+0x6c>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <HAL_TIM_Base_MspInit+0x6c>)
 80031e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031e4:	6193      	str	r3, [r2, #24]
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_TIM_Base_MspInit+0x6c>)
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031f2:	e018      	b.n	8003226 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0f      	ldr	r2, [pc, #60]	; (8003238 <HAL_TIM_Base_MspInit+0x70>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d113      	bne.n	8003226 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_TIM_Base_MspInit+0x6c>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <HAL_TIM_Base_MspInit+0x6c>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	61d3      	str	r3, [r2, #28]
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_TIM_Base_MspInit+0x6c>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	201d      	movs	r0, #29
 800321c:	f001 fa1f 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003220:	201d      	movs	r0, #29
 8003222:	f001 fa38 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40021000 	.word	0x40021000
 8003238:	40000400 	.word	0x40000400

0800323c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d10b      	bne.n	8003266 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_TIM_PWM_MspInit+0x38>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4a08      	ldr	r2, [pc, #32]	; (8003274 <HAL_TIM_PWM_MspInit+0x38>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	61d3      	str	r3, [r2, #28]
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_TIM_PWM_MspInit+0x38>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000

08003278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	f107 030c 	add.w	r3, r7, #12
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <HAL_TIM_MspPostInit+0x68>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d11d      	bne.n	80032d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_TIM_MspPostInit+0x6c>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <HAL_TIM_MspPostInit+0x6c>)
 80032a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a4:	6153      	str	r3, [r2, #20]
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_TIM_MspPostInit+0x6c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80032c4:	2306      	movs	r3, #6
 80032c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	4619      	mov	r1, r3
 80032ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d2:	f001 fbd3 	bl	8004a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032d6:	bf00      	nop
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40021000 	.word	0x40021000

080032e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032ec:	e7fe      	b.n	80032ec <NMI_Handler+0x4>

080032ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f2:	e7fe      	b.n	80032f2 <HardFault_Handler+0x4>

080032f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f8:	e7fe      	b.n	80032f8 <MemManage_Handler+0x4>

080032fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032fe:	e7fe      	b.n	80032fe <BusFault_Handler+0x4>

08003300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <UsageFault_Handler+0x4>

08003306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003334:	f000 f954 	bl	80035e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //__disable_irq();
  //OSSched();
  //__enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}

0800333c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <TIM3_IRQHandler+0x10>)
 8003342:	f003 fe56 	bl	8006ff2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200009d4 	.word	0x200009d4

08003350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
	return 1;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <_kill>:

int _kill(int pid, int sig)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800336a:	f004 fec3 	bl	80080f4 <__errno>
 800336e:	4603      	mov	r3, r0
 8003370:	2216      	movs	r2, #22
 8003372:	601a      	str	r2, [r3, #0]
	return -1;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_exit>:

void _exit (int status)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffe7 	bl	8003360 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003392:	e7fe      	b.n	8003392 <_exit+0x12>

08003394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e00a      	b.n	80033bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033a6:	f3af 8000 	nop.w
 80033aa:	4601      	mov	r1, r0
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	60ba      	str	r2, [r7, #8]
 80033b2:	b2ca      	uxtb	r2, r1
 80033b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3301      	adds	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dbf0      	blt.n	80033a6 <_read+0x12>
	}

return len;
 80033c4:	687b      	ldr	r3, [r7, #4]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e009      	b.n	80033f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	60ba      	str	r2, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dbf1      	blt.n	80033e0 <_write+0x12>
	}
	return len;
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_close>:

int _close(int file)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	return -1;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800342e:	605a      	str	r2, [r3, #4]
	return 0;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <_isatty>:

int _isatty(int file)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
	return 1;
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
	return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <_sbrk+0x5c>)
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <_sbrk+0x60>)
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <_sbrk+0x64>)
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <_sbrk+0x68>)
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a0:	f004 fe28 	bl	80080f4 <__errno>
 80034a4:	4603      	mov	r3, r0
 80034a6:	220c      	movs	r2, #12
 80034a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e009      	b.n	80034c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <_sbrk+0x64>)
 80034c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20003000 	.word	0x20003000
 80034d0:	00000400 	.word	0x00000400
 80034d4:	20000a20 	.word	0x20000a20
 80034d8:	20000a58 	.word	0x20000a58

080034dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <SystemInit+0x20>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <SystemInit+0x20>)
 80034e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003538 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <LoopForever+0x6>)
  ldr r1, =_edata
 8003506:	490e      	ldr	r1, [pc, #56]	; (8003540 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <LoopForever+0xe>)
  movs r3, #0
 800350a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800350c:	e002      	b.n	8003514 <LoopCopyDataInit>

0800350e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003512:	3304      	adds	r3, #4

08003514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003518:	d3f9      	bcc.n	800350e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351a:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <LoopForever+0x12>)
  ldr r4, =_ebss
 800351c:	4c0b      	ldr	r4, [pc, #44]	; (800354c <LoopForever+0x16>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003520:	e001      	b.n	8003526 <LoopFillZerobss>

08003522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003524:	3204      	adds	r2, #4

08003526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003528:	d3fb      	bcc.n	8003522 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800352a:	f7ff ffd7 	bl	80034dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800352e:	f004 fde7 	bl	8008100 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003532:	f7ff fa39 	bl	80029a8 <main>

08003536 <LoopForever>:

LoopForever:
    b LoopForever
 8003536:	e7fe      	b.n	8003536 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003538:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800353c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003540:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8003544:	0800a05c 	.word	0x0800a05c
  ldr r2, =_sbss
 8003548:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 800354c:	20000a58 	.word	0x20000a58

08003550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003550:	e7fe      	b.n	8003550 <ADC1_2_IRQHandler>
	...

08003554 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_Init+0x28>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a07      	ldr	r2, [pc, #28]	; (800357c <HAL_Init+0x28>)
 800355e:	f043 0310 	orr.w	r3, r3, #16
 8003562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003564:	2003      	movs	r0, #3
 8003566:	f001 f86f 	bl	8004648 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800356a:	2000      	movs	r0, #0
 800356c:	f000 f808 	bl	8003580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003570:	f7ff fd64 	bl	800303c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40022000 	.word	0x40022000

08003580 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_InitTick+0x54>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_InitTick+0x58>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003596:	fbb3 f3f1 	udiv	r3, r3, r1
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 f887 	bl	80046b2 <HAL_SYSTICK_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00e      	b.n	80035cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b0f      	cmp	r3, #15
 80035b2:	d80a      	bhi.n	80035ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035b4:	2200      	movs	r2, #0
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f001 f84f 	bl	800465e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c0:	4a06      	ldr	r2, [pc, #24]	; (80035dc <HAL_InitTick+0x5c>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200000c8 	.word	0x200000c8
 80035d8:	200000d0 	.word	0x200000d0
 80035dc:	200000cc 	.word	0x200000cc

080035e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_IncTick+0x20>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_IncTick+0x24>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_IncTick+0x24>)
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	200000d0 	.word	0x200000d0
 8003604:	20000a24 	.word	0x20000a24

08003608 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return uwTick;  
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_GetTick+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000a24 	.word	0x20000a24

08003620 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff ffee 	bl	8003608 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d005      	beq.n	8003646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_Delay+0x44>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003646:	bf00      	nop
 8003648:	f7ff ffde 	bl	8003608 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	429a      	cmp	r2, r3
 8003656:	d8f7      	bhi.n	8003648 <HAL_Delay+0x28>
  {
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200000d0 	.word	0x200000d0

08003668 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b09a      	sub	sp, #104	; 0x68
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e172      	b.n	800396e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	d176      	bne.n	8003788 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d152      	bne.n	8003748 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff fce5 	bl	800308c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d13b      	bne.n	8003748 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fe83 	bl	80043dc <ADC_Disable>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d12f      	bne.n	8003748 <HAL_ADC_Init+0xe0>
 80036e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d12b      	bne.n	8003748 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036f8:	f023 0302 	bic.w	r3, r3, #2
 80036fc:	f043 0202 	orr.w	r2, r3, #2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003712:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003722:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003724:	4b94      	ldr	r3, [pc, #592]	; (8003978 <HAL_ADC_Init+0x310>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a94      	ldr	r2, [pc, #592]	; (800397c <HAL_ADC_Init+0x314>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0c9a      	lsrs	r2, r3, #18
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800373a:	e002      	b.n	8003742 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	3b01      	subs	r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f9      	bne.n	800373c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003764:	d110      	bne.n	8003788 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f023 0312 	bic.w	r3, r3, #18
 800376e:	f043 0210 	orr.w	r2, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f043 0201 	orr.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 80df 	bne.w	8003954 <HAL_ADC_Init+0x2ec>
 8003796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 80da 	bne.w	8003954 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 80d2 	bne.w	8003954 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037b8:	f043 0202 	orr.w	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037c0:	4b6f      	ldr	r3, [pc, #444]	; (8003980 <HAL_ADC_Init+0x318>)
 80037c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037cc:	d102      	bne.n	80037d4 <HAL_ADC_Init+0x16c>
 80037ce:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_ADC_Init+0x31c>)
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e002      	b.n	80037da <HAL_ADC_Init+0x172>
 80037d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d108      	bne.n	80037fa <HAL_ADC_Init+0x192>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_Init+0x192>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_ADC_Init+0x194>
 80037fa:	2300      	movs	r3, #0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11c      	bne.n	800383a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003800:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003802:	2b00      	cmp	r3, #0
 8003804:	d010      	beq.n	8003828 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d107      	bne.n	8003822 <HAL_ADC_Init+0x1ba>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_ADC_Init+0x1ba>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_ADC_Init+0x1bc>
 8003822:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003824:	2b00      	cmp	r3, #0
 8003826:	d108      	bne.n	800383a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	431a      	orrs	r2, r3
 8003836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003838:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7e5b      	ldrb	r3, [r3, #25]
 800383e:	035b      	lsls	r3, r3, #13
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003844:	2a01      	cmp	r2, #1
 8003846:	d002      	beq.n	800384e <HAL_ADC_Init+0x1e6>
 8003848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800384c:	e000      	b.n	8003850 <HAL_ADC_Init+0x1e8>
 800384e:	2200      	movs	r2, #0
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4313      	orrs	r3, r2
 800385e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003860:	4313      	orrs	r3, r2
 8003862:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d11b      	bne.n	80038a6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7e5b      	ldrb	r3, [r3, #25]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	3b01      	subs	r3, #1
 800387c:	045a      	lsls	r2, r3, #17
 800387e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003880:	4313      	orrs	r3, r2
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	663b      	str	r3, [r7, #96]	; 0x60
 8003888:	e00d      	b.n	80038a6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0201 	orr.w	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d007      	beq.n	80038be <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	4313      	orrs	r3, r2
 80038b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ba:	4313      	orrs	r3, r2
 80038bc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d114      	bne.n	80038f6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038da:	f023 0302 	bic.w	r3, r3, #2
 80038de:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7e1b      	ldrb	r3, [r3, #24]
 80038e4:	039a      	lsls	r2, r3, #14
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038f2:	4313      	orrs	r3, r2
 80038f4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_ADC_Init+0x320>)
 80038fe:	4013      	ands	r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003906:	430b      	orrs	r3, r1
 8003908:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10c      	bne.n	800392c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	f023 010f 	bic.w	r1, r3, #15
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	1e5a      	subs	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
 800392a:	e007      	b.n	800393c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 020f 	bic.w	r2, r2, #15
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
 8003952:	e00a      	b.n	800396a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f023 0312 	bic.w	r3, r3, #18
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003964:	2301      	movs	r3, #1
 8003966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800396a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800396e:	4618      	mov	r0, r3
 8003970:	3768      	adds	r7, #104	; 0x68
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200000c8 	.word	0x200000c8
 800397c:	431bde83 	.word	0x431bde83
 8003980:	50000300 	.word	0x50000300
 8003984:	50000100 	.word	0x50000100
 8003988:	fff0c007 	.word	0xfff0c007

0800398c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 809c 	bne.w	8003ae0 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_Start+0x2a>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e097      	b.n	8003ae6 <HAL_ADC_Start+0x15a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fca8 	bl	8004314 <ADC_Enable>
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 8083 	bne.w	8003ad6 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039e4:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <HAL_ADC_Start+0x164>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <HAL_ADC_Start+0x6e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f8:	d115      	bne.n	8003a26 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d027      	beq.n	8003a64 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003a24:	e01e      	b.n	8003a64 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a3a:	d004      	beq.n	8003a46 <HAL_ADC_Start+0xba>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <HAL_ADC_Start+0x168>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10e      	bne.n	8003a64 <HAL_ADC_Start+0xd8>
 8003a46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a70:	d106      	bne.n	8003a80 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f023 0206 	bic.w	r2, r3, #6
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
 8003a7e:	e002      	b.n	8003a86 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	221c      	movs	r2, #28
 8003a94:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003a96:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <HAL_ADC_Start+0x164>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d010      	beq.n	8003ac4 <HAL_ADC_Start+0x138>
 8003aa2:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <HAL_ADC_Start+0x164>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d00a      	beq.n	8003ac4 <HAL_ADC_Start+0x138>
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_ADC_Start+0x164>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2b09      	cmp	r3, #9
 8003ab8:	d004      	beq.n	8003ac4 <HAL_ADC_Start+0x138>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac2:	d10f      	bne.n	8003ae4 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0204 	orr.w	r2, r2, #4
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	e006      	b.n	8003ae4 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ade:	e001      	b.n	8003ae4 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	50000300 	.word	0x50000300
 8003af4:	50000100 	.word	0x50000100

08003af8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d102      	bne.n	8003b14 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003b0e:	2308      	movs	r3, #8
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e02e      	b.n	8003b72 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b14:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <HAL_ADC_PollForConversion+0x198>)
 8003b16:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d112      	bne.n	8003b4a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d11d      	bne.n	8003b6e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f043 0220 	orr.w	r2, r3, #32
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e09d      	b.n	8003c86 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e08b      	b.n	8003c86 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003b6e:	230c      	movs	r3, #12
 8003b70:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_ADC_PollForConversion+0x198>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <HAL_ADC_PollForConversion+0x90>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b86:	d104      	bne.n	8003b92 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e003      	b.n	8003b9a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003b92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003b9a:	f7ff fd35 	bl	8003608 <HAL_GetTick>
 8003b9e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003ba0:	e021      	b.n	8003be6 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d01d      	beq.n	8003be6 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_ADC_PollForConversion+0xc8>
 8003bb0:	f7ff fd2a 	bl	8003608 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d212      	bcs.n	8003be6 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f043 0204 	orr.w	r2, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e04f      	b.n	8003c86 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0d6      	beq.n	8003ba2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d131      	bne.n	8003c72 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d12c      	bne.n	8003c72 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d125      	bne.n	8003c72 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d112      	bne.n	8003c5a <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d112      	bne.n	8003c72 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
 8003c58:	e00b      	b.n	8003c72 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d103      	bne.n	8003c84 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	50000300 	.word	0x50000300

08003c94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_ADCEx_Calibration_Start+0x1c>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e05f      	b.n	8003d8a <HAL_ADCEx_Calibration_Start+0xdc>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fb82 	bl	80043dc <ADC_Disable>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d14e      	bne.n	8003d80 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003cf6:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d0c:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d1c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003d1e:	f7ff fc73 	bl	8003608 <HAL_GetTick>
 8003d22:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003d24:	e01c      	b.n	8003d60 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003d26:	f7ff fc6f 	bl	8003608 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b0a      	cmp	r3, #10
 8003d32:	d915      	bls.n	8003d60 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d42:	d10d      	bne.n	8003d60 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f023 0312 	bic.w	r3, r3, #18
 8003d4c:	f043 0210 	orr.w	r2, r3, #16
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e014      	b.n	8003d8a <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d6e:	d0da      	beq.n	8003d26 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f023 0303 	bic.w	r3, r3, #3
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b09b      	sub	sp, #108	; 0x6c
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x22>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e2a4      	b.n	8004300 <HAL_ADC_ConfigChannel+0x56c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f040 8288 	bne.w	80042de <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d81c      	bhi.n	8003e10 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	461a      	mov	r2, r3
 8003dea:	231f      	movs	r3, #31
 8003dec:	4093      	lsls	r3, r2
 8003dee:	43db      	mvns	r3, r3
 8003df0:	4019      	ands	r1, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	fa00 f203 	lsl.w	r2, r0, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e0e:	e063      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b09      	cmp	r3, #9
 8003e16:	d81e      	bhi.n	8003e56 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	3b1e      	subs	r3, #30
 8003e2c:	221f      	movs	r2, #31
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	4019      	ands	r1, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	3b1e      	subs	r3, #30
 8003e48:	fa00 f203 	lsl.w	r2, r0, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34
 8003e54:	e040      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b0e      	cmp	r3, #14
 8003e5c:	d81e      	bhi.n	8003e9c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	3b3c      	subs	r3, #60	; 0x3c
 8003e72:	221f      	movs	r2, #31
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	4019      	ands	r1, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	3b3c      	subs	r3, #60	; 0x3c
 8003e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
 8003e9a:	e01d      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	3b5a      	subs	r3, #90	; 0x5a
 8003eb0:	221f      	movs	r2, #31
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	4019      	ands	r1, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	3b5a      	subs	r3, #90	; 0x5a
 8003ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 80e5 	bne.w	80040b2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	d91c      	bls.n	8003f2a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6999      	ldr	r1, [r3, #24]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	3b1e      	subs	r3, #30
 8003f02:	2207      	movs	r2, #7
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	4019      	ands	r1, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6898      	ldr	r0, [r3, #8]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	3b1e      	subs	r3, #30
 8003f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]
 8003f28:	e019      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6959      	ldr	r1, [r3, #20]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	2207      	movs	r2, #7
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	4019      	ands	r1, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	6898      	ldr	r0, [r3, #8]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	fa00 f203 	lsl.w	r2, r0, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695a      	ldr	r2, [r3, #20]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	08db      	lsrs	r3, r3, #3
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d84f      	bhi.n	8004020 <HAL_ADC_ConfigChannel+0x28c>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_ADC_ConfigChannel+0x1f4>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003fbb 	.word	0x08003fbb
 8003f90:	08003fdd 	.word	0x08003fdd
 8003f94:	08003fff 	.word	0x08003fff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f9e:	4b94      	ldr	r3, [pc, #592]	; (80041f0 <HAL_ADC_ConfigChannel+0x45c>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	0691      	lsls	r1, r2, #26
 8003fa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003faa:	430a      	orrs	r2, r1
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003fb8:	e07e      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fc0:	4b8b      	ldr	r3, [pc, #556]	; (80041f0 <HAL_ADC_ConfigChannel+0x45c>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	0691      	lsls	r1, r2, #26
 8003fca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fd8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003fda:	e06d      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003fe2:	4b83      	ldr	r3, [pc, #524]	; (80041f0 <HAL_ADC_ConfigChannel+0x45c>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	0691      	lsls	r1, r2, #26
 8003fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ffa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ffc:	e05c      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004004:	4b7a      	ldr	r3, [pc, #488]	; (80041f0 <HAL_ADC_ConfigChannel+0x45c>)
 8004006:	4013      	ands	r3, r2
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	0691      	lsls	r1, r2, #26
 800400e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004010:	430a      	orrs	r2, r1
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800401c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800401e:	e04b      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004026:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	069b      	lsls	r3, r3, #26
 8004030:	429a      	cmp	r2, r3
 8004032:	d107      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004042:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800404a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	069b      	lsls	r3, r3, #26
 8004054:	429a      	cmp	r2, r3
 8004056:	d107      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004066:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800406e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	069b      	lsls	r3, r3, #26
 8004078:	429a      	cmp	r2, r3
 800407a:	d107      	bne.n	800408c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800408a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004092:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	069b      	lsls	r3, r3, #26
 800409c:	429a      	cmp	r2, r3
 800409e:	d10a      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80040b0:	e001      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80040b6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d108      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x344>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x344>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_ADC_ConfigChannel+0x346>
 80040d8:	2300      	movs	r3, #0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 810a 	bne.w	80042f4 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d00f      	beq.n	8004108 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2201      	movs	r2, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	400a      	ands	r2, r1
 8004102:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004106:	e049      	b.n	800419c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2201      	movs	r2, #1
 8004116:	409a      	lsls	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b09      	cmp	r3, #9
 8004128:	d91c      	bls.n	8004164 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6999      	ldr	r1, [r3, #24]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	3b1b      	subs	r3, #27
 800413c:	2207      	movs	r2, #7
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	4019      	ands	r1, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6898      	ldr	r0, [r3, #8]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	3b1b      	subs	r3, #27
 8004156:	fa00 f203 	lsl.w	r2, r0, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	619a      	str	r2, [r3, #24]
 8004162:	e01b      	b.n	800419c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6959      	ldr	r1, [r3, #20]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	4613      	mov	r3, r2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	4413      	add	r3, r2
 8004176:	2207      	movs	r2, #7
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	4019      	ands	r1, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6898      	ldr	r0, [r3, #8]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	fa00 f203 	lsl.w	r2, r0, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800419c:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_ADC_ConfigChannel+0x460>)
 800419e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d105      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80041a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d015      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80041b8:	2b11      	cmp	r3, #17
 80041ba:	d105      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80041bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00b      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80041cc:	2b12      	cmp	r3, #18
 80041ce:	f040 8091 	bne.w	80042f4 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80041d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 808a 	bne.w	80042f4 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041e8:	d108      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x468>
 80041ea:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_ADC_ConfigChannel+0x464>)
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	e008      	b.n	8004202 <HAL_ADC_ConfigChannel+0x46e>
 80041f0:	83fff000 	.word	0x83fff000
 80041f4:	50000300 	.word	0x50000300
 80041f8:	50000100 	.word	0x50000100
 80041fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004200:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d108      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x48e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x48e>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_ADC_ConfigChannel+0x490>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d150      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004228:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800422a:	2b00      	cmp	r3, #0
 800422c:	d010      	beq.n	8004250 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d107      	bne.n	800424a <HAL_ADC_ConfigChannel+0x4b6>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x4b6>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <HAL_ADC_ConfigChannel+0x4b8>
 800424a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800424c:	2b00      	cmp	r3, #0
 800424e:	d13c      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b10      	cmp	r3, #16
 8004256:	d11d      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x500>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004260:	d118      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800426a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800426e:	4b27      	ldr	r3, [pc, #156]	; (800430c <HAL_ADC_ConfigChannel+0x578>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a27      	ldr	r2, [pc, #156]	; (8004310 <HAL_ADC_ConfigChannel+0x57c>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	0c9a      	lsrs	r2, r3, #18
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004284:	e002      	b.n	800428c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	3b01      	subs	r3, #1
 800428a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f9      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004292:	e02e      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b11      	cmp	r3, #17
 800429a:	d10b      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x520>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a4:	d106      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80042a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80042ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042b2:	e01e      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b12      	cmp	r3, #18
 80042ba:	d11a      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80042bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042c8:	e013      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f043 0220 	orr.w	r2, r3, #32
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80042dc:	e00a      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80042f0:	e000      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042f2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80042fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004300:	4618      	mov	r0, r3
 8004302:	376c      	adds	r7, #108	; 0x6c
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	200000c8 	.word	0x200000c8
 8004310:	431bde83 	.word	0x431bde83

08004314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b01      	cmp	r3, #1
 800432c:	d108      	bne.n	8004340 <ADC_Enable+0x2c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <ADC_Enable+0x2c>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <ADC_Enable+0x2e>
 8004340:	2300      	movs	r3, #0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d143      	bne.n	80043ce <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <ADC_Enable+0xc4>)
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f043 0210 	orr.w	r2, r3, #16
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f043 0201 	orr.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e02f      	b.n	80043d0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004380:	f7ff f942 	bl	8003608 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004386:	e01b      	b.n	80043c0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004388:	f7ff f93e 	bl	8003608 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d914      	bls.n	80043c0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d00d      	beq.n	80043c0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e007      	b.n	80043d0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d1dc      	bne.n	8004388 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	8000003f 	.word	0x8000003f

080043dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d108      	bne.n	8004408 <ADC_Disable+0x2c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <ADC_Disable+0x2c>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <ADC_Disable+0x2e>
 8004408:	2300      	movs	r3, #0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d047      	beq.n	800449e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 030d 	and.w	r3, r3, #13
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10f      	bne.n	800443c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0202 	orr.w	r2, r2, #2
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2203      	movs	r2, #3
 8004432:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004434:	f7ff f8e8 	bl	8003608 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800443a:	e029      	b.n	8004490 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f043 0210 	orr.w	r2, r3, #16
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	f043 0201 	orr.w	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e023      	b.n	80044a0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004458:	f7ff f8d6 	bl	8003608 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d914      	bls.n	8004490 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d10d      	bne.n	8004490 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f043 0210 	orr.w	r2, r3, #16
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f043 0201 	orr.w	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e007      	b.n	80044a0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d0dc      	beq.n	8004458 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <__NVIC_SetPriorityGrouping+0x44>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c4:	4013      	ands	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <__NVIC_SetPriorityGrouping+0x44>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	60d3      	str	r3, [r2, #12]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <__NVIC_GetPriorityGrouping+0x18>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f003 0307 	and.w	r3, r3, #7
}
 80044fe:	4618      	mov	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	2b00      	cmp	r3, #0
 800451c:	db0b      	blt.n	8004536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	4907      	ldr	r1, [pc, #28]	; (8004544 <__NVIC_EnableIRQ+0x38>)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2001      	movs	r0, #1
 800452e:	fa00 f202 	lsl.w	r2, r0, r2
 8004532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	e000e100 	.word	0xe000e100

08004548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	6039      	str	r1, [r7, #0]
 8004552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db0a      	blt.n	8004572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	490c      	ldr	r1, [pc, #48]	; (8004594 <__NVIC_SetPriority+0x4c>)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	440b      	add	r3, r1
 800456c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004570:	e00a      	b.n	8004588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4908      	ldr	r1, [pc, #32]	; (8004598 <__NVIC_SetPriority+0x50>)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3b04      	subs	r3, #4
 8004580:	0112      	lsls	r2, r2, #4
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	440b      	add	r3, r1
 8004586:	761a      	strb	r2, [r3, #24]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	e000e100 	.word	0xe000e100
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f1c3 0307 	rsb	r3, r3, #7
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	bf28      	it	cs
 80045ba:	2304      	movcs	r3, #4
 80045bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d902      	bls.n	80045cc <NVIC_EncodePriority+0x30>
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3b03      	subs	r3, #3
 80045ca:	e000      	b.n	80045ce <NVIC_EncodePriority+0x32>
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43da      	mvns	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	401a      	ands	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e4:	f04f 31ff 	mov.w	r1, #4294967295
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa01 f303 	lsl.w	r3, r1, r3
 80045ee:	43d9      	mvns	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	4313      	orrs	r3, r2
         );
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	; 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004614:	d301      	bcc.n	800461a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004616:	2301      	movs	r3, #1
 8004618:	e00f      	b.n	800463a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <SysTick_Config+0x40>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004622:	210f      	movs	r1, #15
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f7ff ff8e 	bl	8004548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <SysTick_Config+0x40>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <SysTick_Config+0x40>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	e000e010 	.word	0xe000e010

08004648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ff29 	bl	80044a8 <__NVIC_SetPriorityGrouping>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004670:	f7ff ff3e 	bl	80044f0 <__NVIC_GetPriorityGrouping>
 8004674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff ff8e 	bl	800459c <NVIC_EncodePriority>
 8004680:	4602      	mov	r2, r0
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff5d 	bl	8004548 <__NVIC_SetPriority>
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff31 	bl	800450c <__NVIC_EnableIRQ>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffa2 	bl	8004604 <SysTick_Config>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80046e6:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <HAL_FLASH_Program+0xd8>)
 80046e8:	7e1b      	ldrb	r3, [r3, #24]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_FLASH_Program+0x26>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e054      	b.n	800479c <HAL_FLASH_Program+0xd0>
 80046f2:	4b2c      	ldr	r3, [pc, #176]	; (80047a4 <HAL_FLASH_Program+0xd8>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046fc:	f000 f8a8 	bl	8004850 <FLASH_WaitForLastOperation>
 8004700:	4603      	mov	r3, r0
 8004702:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d144      	bne.n	8004794 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d102      	bne.n	8004716 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004710:	2301      	movs	r3, #1
 8004712:	757b      	strb	r3, [r7, #21]
 8004714:	e007      	b.n	8004726 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d102      	bne.n	8004722 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800471c:	2302      	movs	r3, #2
 800471e:	757b      	strb	r3, [r7, #21]
 8004720:	e001      	b.n	8004726 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004722:	2304      	movs	r3, #4
 8004724:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004726:	2300      	movs	r3, #0
 8004728:	75bb      	strb	r3, [r7, #22]
 800472a:	e02d      	b.n	8004788 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800472c:	7dbb      	ldrb	r3, [r7, #22]
 800472e:	005a      	lsls	r2, r3, #1
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	eb02 0c03 	add.w	ip, r2, r3
 8004736:	7dbb      	ldrb	r3, [r7, #22]
 8004738:	0119      	lsls	r1, r3, #4
 800473a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800473e:	f1c1 0620 	rsb	r6, r1, #32
 8004742:	f1a1 0020 	sub.w	r0, r1, #32
 8004746:	fa22 f401 	lsr.w	r4, r2, r1
 800474a:	fa03 f606 	lsl.w	r6, r3, r6
 800474e:	4334      	orrs	r4, r6
 8004750:	fa23 f000 	lsr.w	r0, r3, r0
 8004754:	4304      	orrs	r4, r0
 8004756:	fa23 f501 	lsr.w	r5, r3, r1
 800475a:	b2a3      	uxth	r3, r4
 800475c:	4619      	mov	r1, r3
 800475e:	4660      	mov	r0, ip
 8004760:	f000 f85a 	bl	8004818 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004764:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004768:	f000 f872 	bl	8004850 <FLASH_WaitForLastOperation>
 800476c:	4603      	mov	r3, r0
 800476e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004770:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_FLASH_Program+0xdc>)
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <HAL_FLASH_Program+0xdc>)
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004782:	7dbb      	ldrb	r3, [r7, #22]
 8004784:	3301      	adds	r3, #1
 8004786:	75bb      	strb	r3, [r7, #22]
 8004788:	7dba      	ldrb	r2, [r7, #22]
 800478a:	7d7b      	ldrb	r3, [r7, #21]
 800478c:	429a      	cmp	r2, r3
 800478e:	d3cd      	bcc.n	800472c <HAL_FLASH_Program+0x60>
 8004790:	e000      	b.n	8004794 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004792:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004794:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <HAL_FLASH_Program+0xd8>)
 8004796:	2200      	movs	r2, #0
 8004798:	761a      	strb	r2, [r3, #24]

  return status;
 800479a:	7dfb      	ldrb	r3, [r7, #23]
}
 800479c:	4618      	mov	r0, r3
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a4:	20000a28 	.word	0x20000a28
 80047a8:	40022000 	.word	0x40022000

080047ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_FLASH_Unlock+0x40>)
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_FLASH_Unlock+0x40>)
 80047c4:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <HAL_FLASH_Unlock+0x44>)
 80047c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_FLASH_Unlock+0x40>)
 80047ca:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <HAL_FLASH_Unlock+0x48>)
 80047cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <HAL_FLASH_Unlock+0x40>)
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80047de:	79fb      	ldrb	r3, [r7, #7]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40022000 	.word	0x40022000
 80047f0:	45670123 	.word	0x45670123
 80047f4:	cdef89ab 	.word	0xcdef89ab

080047f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_FLASH_Lock+0x1c>)
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	4a04      	ldr	r2, [pc, #16]	; (8004814 <HAL_FLASH_Lock+0x1c>)
 8004802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004806:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40022000 	.word	0x40022000

08004818 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <FLASH_Program_HalfWord+0x30>)
 8004826:	2200      	movs	r2, #0
 8004828:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <FLASH_Program_HalfWord+0x34>)
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	4a07      	ldr	r2, [pc, #28]	; (800484c <FLASH_Program_HalfWord+0x34>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	887a      	ldrh	r2, [r7, #2]
 800483a:	801a      	strh	r2, [r3, #0]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000a28 	.word	0x20000a28
 800484c:	40022000 	.word	0x40022000

08004850 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004858:	f7fe fed6 	bl	8003608 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800485e:	e010      	b.n	8004882 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d00c      	beq.n	8004882 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <FLASH_WaitForLastOperation+0x2e>
 800486e:	f7fe fecb 	bl	8003608 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d201      	bcs.n	8004882 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e01f      	b.n	80048c2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <FLASH_WaitForLastOperation+0x7c>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d0e8      	beq.n	8004860 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <FLASH_WaitForLastOperation+0x7c>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b20      	cmp	r3, #32
 8004898:	d102      	bne.n	80048a0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800489a:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <FLASH_WaitForLastOperation+0x7c>)
 800489c:	2220      	movs	r2, #32
 800489e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <FLASH_WaitForLastOperation+0x7c>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d005      	beq.n	80048b8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <FLASH_WaitForLastOperation+0x7c>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d103      	bne.n	80048c0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80048b8:	f000 f80a 	bl	80048d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40022000 	.word	0x40022000

080048d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80048da:	4b14      	ldr	r3, [pc, #80]	; (800492c <FLASH_SetErrorCode+0x5c>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d109      	bne.n	80048fa <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <FLASH_SetErrorCode+0x60>)
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f043 0302 	orr.w	r3, r3, #2
 80048ee:	4a10      	ldr	r2, [pc, #64]	; (8004930 <FLASH_SetErrorCode+0x60>)
 80048f0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f043 0310 	orr.w	r3, r3, #16
 80048f8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <FLASH_SetErrorCode+0x5c>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b04      	cmp	r3, #4
 8004904:	d109      	bne.n	800491a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <FLASH_SetErrorCode+0x60>)
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	4a08      	ldr	r2, [pc, #32]	; (8004930 <FLASH_SetErrorCode+0x60>)
 8004910:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800491a:	4a04      	ldr	r2, [pc, #16]	; (800492c <FLASH_SetErrorCode+0x5c>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60d3      	str	r3, [r2, #12]
}  
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40022000 	.word	0x40022000
 8004930:	20000a28 	.word	0x20000a28

08004934 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004946:	4b2e      	ldr	r3, [pc, #184]	; (8004a00 <HAL_FLASHEx_Erase+0xcc>)
 8004948:	7e1b      	ldrb	r3, [r3, #24]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_FLASHEx_Erase+0x1e>
 800494e:	2302      	movs	r3, #2
 8004950:	e052      	b.n	80049f8 <HAL_FLASHEx_Erase+0xc4>
 8004952:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_FLASHEx_Erase+0xcc>)
 8004954:	2201      	movs	r2, #1
 8004956:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d115      	bne.n	800498c <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004960:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004964:	f7ff ff74 	bl	8004850 <FLASH_WaitForLastOperation>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d140      	bne.n	80049f0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800496e:	f000 f84b 	bl	8004a08 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004972:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004976:	f7ff ff6b 	bl	8004850 <FLASH_WaitForLastOperation>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800497e:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <HAL_FLASHEx_Erase+0xd0>)
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <HAL_FLASHEx_Erase+0xd0>)
 8004984:	f023 0304 	bic.w	r3, r3, #4
 8004988:	6113      	str	r3, [r2, #16]
 800498a:	e031      	b.n	80049f0 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800498c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004990:	f7ff ff5e 	bl	8004850 <FLASH_WaitForLastOperation>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d12a      	bne.n	80049f0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f04f 32ff 	mov.w	r2, #4294967295
 80049a0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	e019      	b.n	80049de <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80049aa:	68b8      	ldr	r0, [r7, #8]
 80049ac:	f000 f846 	bl	8004a3c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049b4:	f7ff ff4c 	bl	8004850 <FLASH_WaitForLastOperation>
 80049b8:	4603      	mov	r3, r0
 80049ba:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80049bc:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <HAL_FLASHEx_Erase+0xd0>)
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <HAL_FLASHEx_Erase+0xd0>)
 80049c2:	f023 0302 	bic.w	r3, r3, #2
 80049c6:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	601a      	str	r2, [r3, #0]
            break;
 80049d4:	e00c      	b.n	80049f0 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049dc:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	02da      	lsls	r2, r3, #11
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d3dc      	bcc.n	80049aa <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049f0:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_FLASHEx_Erase+0xcc>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	761a      	strb	r2, [r3, #24]

  return status;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000a28 	.word	0x20000a28
 8004a04:	40022000 	.word	0x40022000

08004a08 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <FLASH_MassErase+0x2c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <FLASH_MassErase+0x30>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <FLASH_MassErase+0x30>)
 8004a18:	f043 0304 	orr.w	r3, r3, #4
 8004a1c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <FLASH_MassErase+0x30>)
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	4a05      	ldr	r2, [pc, #20]	; (8004a38 <FLASH_MassErase+0x30>)
 8004a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a28:	6113      	str	r3, [r2, #16]
}
 8004a2a:	bf00      	nop
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	20000a28 	.word	0x20000a28
 8004a38:	40022000 	.word	0x40022000

08004a3c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <FLASH_PageErase+0x38>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <FLASH_PageErase+0x3c>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <FLASH_PageErase+0x3c>)
 8004a50:	f043 0302 	orr.w	r3, r3, #2
 8004a54:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004a56:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <FLASH_PageErase+0x3c>)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <FLASH_PageErase+0x3c>)
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	4a05      	ldr	r2, [pc, #20]	; (8004a78 <FLASH_PageErase+0x3c>)
 8004a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a66:	6113      	str	r3, [r2, #16]
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000a28 	.word	0x20000a28
 8004a78:	40022000 	.word	0x40022000

08004a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a8a:	e14e      	b.n	8004d2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2101      	movs	r1, #1
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8140 	beq.w	8004d24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d005      	beq.n	8004abc <HAL_GPIO_Init+0x40>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d130      	bne.n	8004b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004af2:	2201      	movs	r2, #1
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0201 	and.w	r2, r3, #1
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d017      	beq.n	8004b5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	2203      	movs	r2, #3
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d123      	bne.n	8004bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	08da      	lsrs	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3208      	adds	r2, #8
 8004b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	220f      	movs	r2, #15
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43db      	mvns	r3, r3
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4013      	ands	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	08da      	lsrs	r2, r3, #3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3208      	adds	r2, #8
 8004ba8:	6939      	ldr	r1, [r7, #16]
 8004baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2203      	movs	r2, #3
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0203 	and.w	r2, r3, #3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 809a 	beq.w	8004d24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf0:	4b55      	ldr	r3, [pc, #340]	; (8004d48 <HAL_GPIO_Init+0x2cc>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	4a54      	ldr	r2, [pc, #336]	; (8004d48 <HAL_GPIO_Init+0x2cc>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6193      	str	r3, [r2, #24]
 8004bfc:	4b52      	ldr	r3, [pc, #328]	; (8004d48 <HAL_GPIO_Init+0x2cc>)
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c08:	4a50      	ldr	r2, [pc, #320]	; (8004d4c <HAL_GPIO_Init+0x2d0>)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	3302      	adds	r3, #2
 8004c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	220f      	movs	r2, #15
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c32:	d013      	beq.n	8004c5c <HAL_GPIO_Init+0x1e0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a46      	ldr	r2, [pc, #280]	; (8004d50 <HAL_GPIO_Init+0x2d4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00d      	beq.n	8004c58 <HAL_GPIO_Init+0x1dc>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a45      	ldr	r2, [pc, #276]	; (8004d54 <HAL_GPIO_Init+0x2d8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d007      	beq.n	8004c54 <HAL_GPIO_Init+0x1d8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a44      	ldr	r2, [pc, #272]	; (8004d58 <HAL_GPIO_Init+0x2dc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <HAL_GPIO_Init+0x1d4>
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e006      	b.n	8004c5e <HAL_GPIO_Init+0x1e2>
 8004c50:	2305      	movs	r3, #5
 8004c52:	e004      	b.n	8004c5e <HAL_GPIO_Init+0x1e2>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e002      	b.n	8004c5e <HAL_GPIO_Init+0x1e2>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_GPIO_Init+0x1e2>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	f002 0203 	and.w	r2, r2, #3
 8004c64:	0092      	lsls	r2, r2, #2
 8004c66:	4093      	lsls	r3, r2
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c6e:	4937      	ldr	r1, [pc, #220]	; (8004d4c <HAL_GPIO_Init+0x2d0>)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	089b      	lsrs	r3, r3, #2
 8004c74:	3302      	adds	r3, #2
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c7c:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ca0:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ca6:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004cca:	4a24      	ldr	r2, [pc, #144]	; (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cd0:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cfa:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d1e:	4a0f      	ldr	r2, [pc, #60]	; (8004d5c <HAL_GPIO_Init+0x2e0>)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3301      	adds	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f47f aea9 	bne.w	8004a8c <HAL_GPIO_Init+0x10>
  }
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	48000400 	.word	0x48000400
 8004d54:	48000800 	.word	0x48000800
 8004d58:	48000c00 	.word	0x48000c00
 8004d5c:	40010400 	.word	0x40010400

08004d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	887b      	ldrh	r3, [r7, #2]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
 8004d7c:	e001      	b.n	8004d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004da0:	787b      	ldrb	r3, [r7, #1]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dac:	e002      	b.n	8004db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dae:	887a      	ldrh	r2, [r7, #2]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dd0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f001 b823 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 817d 	beq.w	80050f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004dfc:	4bbc      	ldr	r3, [pc, #752]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d00c      	beq.n	8004e22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e08:	4bb9      	ldr	r3, [pc, #740]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d15c      	bne.n	8004ece <HAL_RCC_OscConfig+0x10e>
 8004e14:	4bb6      	ldr	r3, [pc, #728]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e20:	d155      	bne.n	8004ece <HAL_RCC_OscConfig+0x10e>
 8004e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004e2e:	fa93 f3a3 	rbit	r3, r3
 8004e32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3a:	fab3 f383 	clz	r3, r3
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCC_OscConfig+0x94>
 8004e4e:	4ba8      	ldr	r3, [pc, #672]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	e015      	b.n	8004e80 <HAL_RCC_OscConfig+0xc0>
 8004e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004e60:	fa93 f3a3 	rbit	r3, r3
 8004e64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004e70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004e74:	fa93 f3a3 	rbit	r3, r3
 8004e78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004e7c:	4b9c      	ldr	r3, [pc, #624]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004e88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004e8c:	fa92 f2a2 	rbit	r2, r2
 8004e90:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004e94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004e98:	fab2 f282 	clz	r2, r2
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	f042 0220 	orr.w	r2, r2, #32
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	f002 021f 	and.w	r2, r2, #31
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 811f 	beq.w	80050f4 <HAL_RCC_OscConfig+0x334>
 8004eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 8116 	bne.w	80050f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f000 bfaf 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x12e>
 8004ee0:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a82      	ldr	r2, [pc, #520]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e036      	b.n	8004f5c <HAL_RCC_OscConfig+0x19c>
 8004eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x158>
 8004efe:	4b7c      	ldr	r3, [pc, #496]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7b      	ldr	r2, [pc, #492]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b79      	ldr	r3, [pc, #484]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a78      	ldr	r2, [pc, #480]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e021      	b.n	8004f5c <HAL_RCC_OscConfig+0x19c>
 8004f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x184>
 8004f2a:	4b71      	ldr	r3, [pc, #452]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a70      	ldr	r2, [pc, #448]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	4b6e      	ldr	r3, [pc, #440]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6d      	ldr	r2, [pc, #436]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e00b      	b.n	8004f5c <HAL_RCC_OscConfig+0x19c>
 8004f44:	4b6a      	ldr	r3, [pc, #424]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a69      	ldr	r2, [pc, #420]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	4b67      	ldr	r3, [pc, #412]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a66      	ldr	r2, [pc, #408]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f5c:	4b64      	ldr	r3, [pc, #400]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f023 020f 	bic.w	r2, r3, #15
 8004f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	495f      	ldr	r1, [pc, #380]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d059      	beq.n	800503a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f86:	f7fe fb3f 	bl	8003608 <HAL_GetTick>
 8004f8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fe fb3a 	bl	8003608 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b64      	cmp	r3, #100	; 0x64
 8004f9e:	d902      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	f000 bf43 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8004fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004faa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004fba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d102      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x218>
 8004fd2:	4b47      	ldr	r3, [pc, #284]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	e015      	b.n	8005004 <HAL_RCC_OscConfig+0x244>
 8004fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fdc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004fe4:	fa93 f3a3 	rbit	r3, r3
 8004fe8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ff0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004ff4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004ff8:	fa93 f3a3 	rbit	r3, r3
 8004ffc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005008:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800500c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005010:	fa92 f2a2 	rbit	r2, r2
 8005014:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005018:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800501c:	fab2 f282 	clz	r2, r2
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	f042 0220 	orr.w	r2, r2, #32
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	f002 021f 	and.w	r2, r2, #31
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f202 	lsl.w	r2, r1, r2
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ab      	beq.n	8004f90 <HAL_RCC_OscConfig+0x1d0>
 8005038:	e05d      	b.n	80050f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fe fae5 	bl	8003608 <HAL_GetTick>
 800503e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005042:	e00a      	b.n	800505a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005044:	f7fe fae0 	bl	8003608 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b64      	cmp	r3, #100	; 0x64
 8005052:	d902      	bls.n	800505a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	f000 bee9 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 800505a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800505e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005062:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800506e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <HAL_RCC_OscConfig+0x2cc>
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	e015      	b.n	80050b8 <HAL_RCC_OscConfig+0x2f8>
 800508c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005090:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80050a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80050a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050bc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80050c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80050c4:	fa92 f2a2 	rbit	r2, r2
 80050c8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80050cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80050d0:	fab2 f282 	clz	r2, r2
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	f042 0220 	orr.w	r2, r2, #32
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	f002 021f 	and.w	r2, r2, #31
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ab      	bne.n	8005044 <HAL_RCC_OscConfig+0x284>
 80050ec:	e003      	b.n	80050f6 <HAL_RCC_OscConfig+0x336>
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 817d 	beq.w	8005406 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800510c:	4ba6      	ldr	r3, [pc, #664]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 030c 	and.w	r3, r3, #12
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005118:	4ba3      	ldr	r3, [pc, #652]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b08      	cmp	r3, #8
 8005122:	d172      	bne.n	800520a <HAL_RCC_OscConfig+0x44a>
 8005124:	4ba0      	ldr	r3, [pc, #640]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d16c      	bne.n	800520a <HAL_RCC_OscConfig+0x44a>
 8005130:	2302      	movs	r3, #2
 8005132:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800513a:	fa93 f3a3 	rbit	r3, r3
 800513e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005142:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d102      	bne.n	8005160 <HAL_RCC_OscConfig+0x3a0>
 800515a:	4b93      	ldr	r3, [pc, #588]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	e013      	b.n	8005188 <HAL_RCC_OscConfig+0x3c8>
 8005160:	2302      	movs	r3, #2
 8005162:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005166:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800516a:	fa93 f3a3 	rbit	r3, r3
 800516e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005172:	2302      	movs	r3, #2
 8005174:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005178:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005184:	4b88      	ldr	r3, [pc, #544]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2202      	movs	r2, #2
 800518a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800518e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005192:	fa92 f2a2 	rbit	r2, r2
 8005196:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800519a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800519e:	fab2 f282 	clz	r2, r2
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	f042 0220 	orr.w	r2, r2, #32
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	f002 021f 	and.w	r2, r2, #31
 80051ae:	2101      	movs	r1, #1
 80051b0:	fa01 f202 	lsl.w	r2, r1, r2
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCC_OscConfig+0x410>
 80051ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d002      	beq.n	80051d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f000 be2e 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d0:	4b75      	ldr	r3, [pc, #468]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	21f8      	movs	r1, #248	; 0xf8
 80051e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80051ee:	fa91 f1a1 	rbit	r1, r1
 80051f2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80051f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80051fa:	fab1 f181 	clz	r1, r1
 80051fe:	b2c9      	uxtb	r1, r1
 8005200:	408b      	lsls	r3, r1
 8005202:	4969      	ldr	r1, [pc, #420]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005204:	4313      	orrs	r3, r2
 8005206:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005208:	e0fd      	b.n	8005406 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800520a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8088 	beq.w	800532c <HAL_RCC_OscConfig+0x56c>
 800521c:	2301      	movs	r3, #1
 800521e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005226:	fa93 f3a3 	rbit	r3, r3
 800522a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800522e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800523c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	461a      	mov	r2, r3
 8005244:	2301      	movs	r3, #1
 8005246:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fe f9de 	bl	8003608 <HAL_GetTick>
 800524c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005250:	e00a      	b.n	8005268 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005252:	f7fe f9d9 	bl	8003608 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d902      	bls.n	8005268 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	f000 bde2 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005268:	2302      	movs	r3, #2
 800526a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005272:	fa93 f3a3 	rbit	r3, r3
 8005276:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800527a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527e:	fab3 f383 	clz	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d102      	bne.n	8005298 <HAL_RCC_OscConfig+0x4d8>
 8005292:	4b45      	ldr	r3, [pc, #276]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	e013      	b.n	80052c0 <HAL_RCC_OscConfig+0x500>
 8005298:	2302      	movs	r3, #2
 800529a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80052a2:	fa93 f3a3 	rbit	r3, r3
 80052a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80052aa:	2302      	movs	r3, #2
 80052ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80052b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80052b4:	fa93 f3a3 	rbit	r3, r3
 80052b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80052bc:	4b3a      	ldr	r3, [pc, #232]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	2202      	movs	r2, #2
 80052c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80052c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80052ca:	fa92 f2a2 	rbit	r2, r2
 80052ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80052d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80052d6:	fab2 f282 	clz	r2, r2
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	f042 0220 	orr.w	r2, r2, #32
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	f002 021f 	and.w	r2, r2, #31
 80052e6:	2101      	movs	r1, #1
 80052e8:	fa01 f202 	lsl.w	r2, r1, r2
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0af      	beq.n	8005252 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f2:	4b2d      	ldr	r3, [pc, #180]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	21f8      	movs	r1, #248	; 0xf8
 8005308:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005310:	fa91 f1a1 	rbit	r1, r1
 8005314:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005318:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800531c:	fab1 f181 	clz	r1, r1
 8005320:	b2c9      	uxtb	r1, r1
 8005322:	408b      	lsls	r3, r1
 8005324:	4920      	ldr	r1, [pc, #128]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]
 800532a:	e06c      	b.n	8005406 <HAL_RCC_OscConfig+0x646>
 800532c:	2301      	movs	r3, #1
 800532e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800533e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800534c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	461a      	mov	r2, r3
 8005354:	2300      	movs	r3, #0
 8005356:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fe f956 	bl	8003608 <HAL_GetTick>
 800535c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005360:	e00a      	b.n	8005378 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005362:	f7fe f951 	bl	8003608 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d902      	bls.n	8005378 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	f000 bd5a 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005378:	2302      	movs	r3, #2
 800537a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800538a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800538e:	fab3 f383 	clz	r3, r3
 8005392:	b2db      	uxtb	r3, r3
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d104      	bne.n	80053ac <HAL_RCC_OscConfig+0x5ec>
 80053a2:	4b01      	ldr	r3, [pc, #4]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	e015      	b.n	80053d4 <HAL_RCC_OscConfig+0x614>
 80053a8:	40021000 	.word	0x40021000
 80053ac:	2302      	movs	r3, #2
 80053ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053b6:	fa93 f3a3 	rbit	r3, r3
 80053ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053be:	2302      	movs	r3, #2
 80053c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053c8:	fa93 f3a3 	rbit	r3, r3
 80053cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053d0:	4bc8      	ldr	r3, [pc, #800]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2202      	movs	r2, #2
 80053d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80053da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80053de:	fa92 f2a2 	rbit	r2, r2
 80053e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80053e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80053ea:	fab2 f282 	clz	r2, r2
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	f042 0220 	orr.w	r2, r2, #32
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	f002 021f 	and.w	r2, r2, #31
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1ad      	bne.n	8005362 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8110 	beq.w	800563c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800541c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005420:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d079      	beq.n	8005520 <HAL_RCC_OscConfig+0x760>
 800542c:	2301      	movs	r3, #1
 800542e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005432:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800543e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005442:	fab3 f383 	clz	r3, r3
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	4bab      	ldr	r3, [pc, #684]	; (80056f8 <HAL_RCC_OscConfig+0x938>)
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	461a      	mov	r2, r3
 8005452:	2301      	movs	r3, #1
 8005454:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005456:	f7fe f8d7 	bl	8003608 <HAL_GetTick>
 800545a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545e:	e00a      	b.n	8005476 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005460:	f7fe f8d2 	bl	8003608 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d902      	bls.n	8005476 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	f000 bcdb 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005476:	2302      	movs	r3, #2
 8005478:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005480:	fa93 f3a3 	rbit	r3, r3
 8005484:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005490:	2202      	movs	r2, #2
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005498:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	fa93 f2a3 	rbit	r2, r3
 80054a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b4:	2202      	movs	r2, #2
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	fa93 f2a3 	rbit	r2, r3
 80054c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d0:	4b88      	ldr	r3, [pc, #544]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80054d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054dc:	2102      	movs	r1, #2
 80054de:	6019      	str	r1, [r3, #0]
 80054e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	fa93 f1a3 	rbit	r1, r3
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054f6:	6019      	str	r1, [r3, #0]
  return result;
 80054f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	fab3 f383 	clz	r3, r3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	2101      	movs	r1, #1
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0a0      	beq.n	8005460 <HAL_RCC_OscConfig+0x6a0>
 800551e:	e08d      	b.n	800563c <HAL_RCC_OscConfig+0x87c>
 8005520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005524:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005530:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	fa93 f2a3 	rbit	r2, r3
 800553a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005542:	601a      	str	r2, [r3, #0]
  return result;
 8005544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005548:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800554c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800554e:	fab3 f383 	clz	r3, r3
 8005552:	b2db      	uxtb	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	4b68      	ldr	r3, [pc, #416]	; (80056f8 <HAL_RCC_OscConfig+0x938>)
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	461a      	mov	r2, r3
 800555e:	2300      	movs	r3, #0
 8005560:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005562:	f7fe f851 	bl	8003608 <HAL_GetTick>
 8005566:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800556c:	f7fe f84c 	bl	8003608 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d902      	bls.n	8005582 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	f000 bc55 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005586:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800558a:	2202      	movs	r2, #2
 800558c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005592:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	fa93 f2a3 	rbit	r2, r3
 800559c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055ae:	2202      	movs	r2, #2
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	fa93 f2a3 	rbit	r2, r3
 80055c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d2:	2202      	movs	r2, #2
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	fa93 f2a3 	rbit	r2, r3
 80055e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ee:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80055f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80055fa:	2102      	movs	r1, #2
 80055fc:	6019      	str	r1, [r3, #0]
 80055fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005602:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	fa93 f1a3 	rbit	r1, r3
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005614:	6019      	str	r1, [r3, #0]
  return result;
 8005616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	fab3 f383 	clz	r3, r3
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d197      	bne.n	800556c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 81a1 	beq.w	8005994 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005658:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d116      	bne.n	8005692 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005664:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	4a22      	ldr	r2, [pc, #136]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 800566a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566e:	61d3      	str	r3, [r2, #28]
 8005670:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005686:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800568a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005692:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <HAL_RCC_OscConfig+0x93c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11a      	bne.n	80056d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800569e:	4b17      	ldr	r3, [pc, #92]	; (80056fc <HAL_RCC_OscConfig+0x93c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_RCC_OscConfig+0x93c>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056aa:	f7fd ffad 	bl	8003608 <HAL_GetTick>
 80056ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b2:	e009      	b.n	80056c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b4:	f7fd ffa8 	bl	8003608 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b64      	cmp	r3, #100	; 0x64
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e3b1      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <HAL_RCC_OscConfig+0x93c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0ef      	beq.n	80056b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d10d      	bne.n	8005700 <HAL_RCC_OscConfig+0x940>
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	4a02      	ldr	r2, [pc, #8]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6213      	str	r3, [r2, #32]
 80056f0:	e03c      	b.n	800576c <HAL_RCC_OscConfig+0x9ac>
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
 80056f8:	10908120 	.word	0x10908120
 80056fc:	40007000 	.word	0x40007000
 8005700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005704:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10c      	bne.n	800572a <HAL_RCC_OscConfig+0x96a>
 8005710:	4bc1      	ldr	r3, [pc, #772]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	4ac0      	ldr	r2, [pc, #768]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	6213      	str	r3, [r2, #32]
 800571c:	4bbe      	ldr	r3, [pc, #760]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	4abd      	ldr	r2, [pc, #756]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005722:	f023 0304 	bic.w	r3, r3, #4
 8005726:	6213      	str	r3, [r2, #32]
 8005728:	e020      	b.n	800576c <HAL_RCC_OscConfig+0x9ac>
 800572a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b05      	cmp	r3, #5
 8005738:	d10c      	bne.n	8005754 <HAL_RCC_OscConfig+0x994>
 800573a:	4bb7      	ldr	r3, [pc, #732]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	4ab6      	ldr	r2, [pc, #728]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005740:	f043 0304 	orr.w	r3, r3, #4
 8005744:	6213      	str	r3, [r2, #32]
 8005746:	4bb4      	ldr	r3, [pc, #720]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	4ab3      	ldr	r2, [pc, #716]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	6213      	str	r3, [r2, #32]
 8005752:	e00b      	b.n	800576c <HAL_RCC_OscConfig+0x9ac>
 8005754:	4bb0      	ldr	r3, [pc, #704]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	4aaf      	ldr	r2, [pc, #700]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	6213      	str	r3, [r2, #32]
 8005760:	4bad      	ldr	r3, [pc, #692]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	4aac      	ldr	r2, [pc, #688]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005766:	f023 0304 	bic.w	r3, r3, #4
 800576a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800576c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8081 	beq.w	8005880 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800577e:	f7fd ff43 	bl	8003608 <HAL_GetTick>
 8005782:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005786:	e00b      	b.n	80057a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005788:	f7fd ff3e 	bl	8003608 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	; 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e345      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 80057a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80057a8:	2202      	movs	r2, #2
 80057aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	fa93 f2a3 	rbit	r2, r3
 80057ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80057cc:	2202      	movs	r2, #2
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	fa93 f2a3 	rbit	r2, r3
 80057de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057e6:	601a      	str	r2, [r3, #0]
  return result;
 80057e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f2:	fab3 f383 	clz	r3, r3
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f043 0302 	orr.w	r3, r3, #2
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d102      	bne.n	800580c <HAL_RCC_OscConfig+0xa4c>
 8005806:	4b84      	ldr	r3, [pc, #528]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	e013      	b.n	8005834 <HAL_RCC_OscConfig+0xa74>
 800580c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005810:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005814:	2202      	movs	r2, #2
 8005816:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	fa93 f2a3 	rbit	r2, r3
 8005826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	4b79      	ldr	r3, [pc, #484]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005838:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800583c:	2102      	movs	r1, #2
 800583e:	6011      	str	r1, [r2, #0]
 8005840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005844:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	fa92 f1a2 	rbit	r1, r2
 800584e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005852:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005856:	6011      	str	r1, [r2, #0]
  return result;
 8005858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800585c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	fab2 f282 	clz	r2, r2
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	f002 021f 	and.w	r2, r2, #31
 8005872:	2101      	movs	r1, #1
 8005874:	fa01 f202 	lsl.w	r2, r1, r2
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d084      	beq.n	8005788 <HAL_RCC_OscConfig+0x9c8>
 800587e:	e07f      	b.n	8005980 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005880:	f7fd fec2 	bl	8003608 <HAL_GetTick>
 8005884:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005888:	e00b      	b.n	80058a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588a:	f7fd febd 	bl	8003608 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e2c4      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 80058a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80058aa:	2202      	movs	r2, #2
 80058ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	fa93 f2a3 	rbit	r2, r3
 80058bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80058ce:	2202      	movs	r2, #2
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	fa93 f2a3 	rbit	r2, r3
 80058e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058e8:	601a      	str	r2, [r3, #0]
  return result;
 80058ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f4:	fab3 f383 	clz	r3, r3
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f043 0302 	orr.w	r3, r3, #2
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d102      	bne.n	800590e <HAL_RCC_OscConfig+0xb4e>
 8005908:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	e013      	b.n	8005936 <HAL_RCC_OscConfig+0xb76>
 800590e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005912:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005916:	2202      	movs	r2, #2
 8005918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800591e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	fa93 f2a3 	rbit	r2, r3
 8005928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800593a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800593e:	2102      	movs	r1, #2
 8005940:	6011      	str	r1, [r2, #0]
 8005942:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005946:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	fa92 f1a2 	rbit	r1, r2
 8005950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005954:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005958:	6011      	str	r1, [r2, #0]
  return result;
 800595a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800595e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	fab2 f282 	clz	r2, r2
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	f002 021f 	and.w	r2, r2, #31
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f202 	lsl.w	r2, r1, r2
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d184      	bne.n	800588a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005980:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005984:	2b01      	cmp	r3, #1
 8005986:	d105      	bne.n	8005994 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005988:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800598e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005992:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005998:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8242 	beq.w	8005e2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a6:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	f000 8213 	beq.w	8005dda <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	f040 8162 	bne.w	8005c8a <HAL_RCC_OscConfig+0xeca>
 80059c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80059ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	fa93 f2a3 	rbit	r2, r3
 80059e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059ea:	601a      	str	r2, [r3, #0]
  return result;
 80059ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	461a      	mov	r2, r3
 8005a08:	2300      	movs	r3, #0
 8005a0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fd fdfc 	bl	8003608 <HAL_GetTick>
 8005a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a14:	e00c      	b.n	8005a30 <HAL_RCC_OscConfig+0xc70>
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fd fdf4 	bl	8003608 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e1fd      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a34:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a42:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	fa93 f2a3 	rbit	r2, r3
 8005a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a54:	601a      	str	r2, [r3, #0]
  return result;
 8005a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a60:	fab3 f383 	clz	r3, r3
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d102      	bne.n	8005a7a <HAL_RCC_OscConfig+0xcba>
 8005a74:	4bb0      	ldr	r3, [pc, #704]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	e027      	b.n	8005aca <HAL_RCC_OscConfig+0xd0a>
 8005a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	fa93 f2a3 	rbit	r2, r3
 8005a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	fa93 f2a3 	rbit	r2, r3
 8005abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	4b9c      	ldr	r3, [pc, #624]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ace:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005ad2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ad6:	6011      	str	r1, [r2, #0]
 8005ad8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005adc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	fa92 f1a2 	rbit	r1, r2
 8005ae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005aee:	6011      	str	r1, [r2, #0]
  return result;
 8005af0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005af4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	fab2 f282 	clz	r2, r2
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	f042 0220 	orr.w	r2, r2, #32
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	f002 021f 	and.w	r2, r2, #31
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d182      	bne.n	8005a1c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b16:	4b88      	ldr	r3, [pc, #544]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	430b      	orrs	r3, r1
 8005b38:	497f      	ldr	r1, [pc, #508]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	604b      	str	r3, [r1, #4]
 8005b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b42:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005b46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b50:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	fa93 f2a3 	rbit	r2, r3
 8005b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b62:	601a      	str	r2, [r3, #0]
  return result;
 8005b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b6c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b6e:	fab3 f383 	clz	r3, r3
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2301      	movs	r3, #1
 8005b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fd fd40 	bl	8003608 <HAL_GetTick>
 8005b88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b8c:	e009      	b.n	8005ba2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fd fd3b 	bl	8003608 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e144      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	fa93 f2a3 	rbit	r2, r3
 8005bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005bc6:	601a      	str	r2, [r3, #0]
  return result;
 8005bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bcc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005bd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd2:	fab3 f383 	clz	r3, r3
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d102      	bne.n	8005bec <HAL_RCC_OscConfig+0xe2c>
 8005be6:	4b54      	ldr	r3, [pc, #336]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	e027      	b.n	8005c3c <HAL_RCC_OscConfig+0xe7c>
 8005bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	fa93 f2a3 	rbit	r2, r3
 8005c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c16:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c24:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	fa93 f2a3 	rbit	r2, r3
 8005c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c32:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	4b3f      	ldr	r3, [pc, #252]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c40:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005c44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c48:	6011      	str	r1, [r2, #0]
 8005c4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c4e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	fa92 f1a2 	rbit	r1, r2
 8005c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c5c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c60:	6011      	str	r1, [r2, #0]
  return result;
 8005c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c66:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	fab2 f282 	clz	r2, r2
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	f042 0220 	orr.w	r2, r2, #32
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	f002 021f 	and.w	r2, r2, #31
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d082      	beq.n	8005b8e <HAL_RCC_OscConfig+0xdce>
 8005c88:	e0cf      	b.n	8005e2a <HAL_RCC_OscConfig+0x106a>
 8005c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c8e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005c92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c9c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	fa93 f2a3 	rbit	r2, r3
 8005ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005caa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005cae:	601a      	str	r2, [r3, #0]
  return result;
 8005cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005cb8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cba:	fab3 f383 	clz	r3, r3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005cc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2300      	movs	r3, #0
 8005cce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fd fc9a 	bl	8003608 <HAL_GetTick>
 8005cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd8:	e009      	b.n	8005cee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cda:	f7fd fc95 	bl	8003608 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e09e      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cf2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	fa93 f2a3 	rbit	r2, r3
 8005d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d12:	601a      	str	r2, [r3, #0]
  return result;
 8005d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d1e:	fab3 f383 	clz	r3, r3
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d104      	bne.n	8005d3c <HAL_RCC_OscConfig+0xf7c>
 8005d32:	4b01      	ldr	r3, [pc, #4]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	e029      	b.n	8005d8c <HAL_RCC_OscConfig+0xfcc>
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	fa93 f2a3 	rbit	r2, r3
 8005d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d66:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d74:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	fa93 f2a3 	rbit	r2, r3
 8005d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	4b2b      	ldr	r3, [pc, #172]	; (8005e38 <HAL_RCC_OscConfig+0x1078>)
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d90:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005d94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d98:	6011      	str	r1, [r2, #0]
 8005d9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d9e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	fa92 f1a2 	rbit	r1, r2
 8005da8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005db0:	6011      	str	r1, [r2, #0]
  return result;
 8005db2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005db6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	fab2 f282 	clz	r2, r2
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	f042 0220 	orr.w	r2, r2, #32
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	f002 021f 	and.w	r2, r2, #31
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d180      	bne.n	8005cda <HAL_RCC_OscConfig+0xf1a>
 8005dd8:	e027      	b.n	8005e2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e01e      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <HAL_RCC_OscConfig+0x1078>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005df6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005dfa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d10b      	bne.n	8005e26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005e0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d001      	beq.n	8005e2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40021000 	.word	0x40021000

08005e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b09e      	sub	sp, #120	; 0x78
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e162      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e54:	4b90      	ldr	r3, [pc, #576]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d910      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e62:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 0207 	bic.w	r2, r3, #7
 8005e6a:	498b      	ldr	r1, [pc, #556]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b89      	ldr	r3, [pc, #548]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e14a      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e90:	4b82      	ldr	r3, [pc, #520]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	497f      	ldr	r1, [pc, #508]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80dc 	beq.w	8006068 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d13c      	bne.n	8005f32 <HAL_RCC_ClockConfig+0xf6>
 8005eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ebc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ec0:	fa93 f3a3 	rbit	r3, r3
 8005ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec8:	fab3 f383 	clz	r3, r3
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d102      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xa6>
 8005edc:	4b6f      	ldr	r3, [pc, #444]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	e00f      	b.n	8005f02 <HAL_RCC_ClockConfig+0xc6>
 8005ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ee6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eea:	fa93 f3a3 	rbit	r3, r3
 8005eee:	667b      	str	r3, [r7, #100]	; 0x64
 8005ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ef4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef8:	fa93 f3a3 	rbit	r3, r3
 8005efc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005efe:	4b67      	ldr	r3, [pc, #412]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f06:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f0a:	fa92 f2a2 	rbit	r2, r2
 8005f0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005f10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f12:	fab2 f282 	clz	r2, r2
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	f042 0220 	orr.w	r2, r2, #32
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	f002 021f 	and.w	r2, r2, #31
 8005f22:	2101      	movs	r1, #1
 8005f24:	fa01 f202 	lsl.w	r2, r1, r2
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d17b      	bne.n	8006026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e0f3      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d13c      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x178>
 8005f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f42:	fa93 f3a3 	rbit	r3, r3
 8005f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4a:	fab3 f383 	clz	r3, r3
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d102      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x128>
 8005f5e:	4b4f      	ldr	r3, [pc, #316]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	e00f      	b.n	8005f84 <HAL_RCC_ClockConfig+0x148>
 8005f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6c:	fa93 f3a3 	rbit	r3, r3
 8005f70:	647b      	str	r3, [r7, #68]	; 0x44
 8005f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f76:	643b      	str	r3, [r7, #64]	; 0x40
 8005f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7a:	fa93 f3a3 	rbit	r3, r3
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f80:	4b46      	ldr	r3, [pc, #280]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f88:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f8c:	fa92 f2a2 	rbit	r2, r2
 8005f90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f94:	fab2 f282 	clz	r2, r2
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	f042 0220 	orr.w	r2, r2, #32
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	f002 021f 	and.w	r2, r2, #31
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d13a      	bne.n	8006026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0b2      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	fa93 f3a3 	rbit	r3, r3
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc2:	fab3 f383 	clz	r3, r3
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d102      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x1a0>
 8005fd6:	4b31      	ldr	r3, [pc, #196]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	e00d      	b.n	8005ff8 <HAL_RCC_ClockConfig+0x1bc>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	fa93 f3a3 	rbit	r3, r3
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe8:	2302      	movs	r3, #2
 8005fea:	623b      	str	r3, [r7, #32]
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	fa93 f3a3 	rbit	r3, r3
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	4b29      	ldr	r3, [pc, #164]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	61ba      	str	r2, [r7, #24]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	fa92 f2a2 	rbit	r2, r2
 8006002:	617a      	str	r2, [r7, #20]
  return result;
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	fab2 f282 	clz	r2, r2
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	f042 0220 	orr.w	r2, r2, #32
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	f002 021f 	and.w	r2, r2, #31
 8006016:	2101      	movs	r1, #1
 8006018:	fa01 f202 	lsl.w	r2, r1, r2
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e079      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006026:	4b1d      	ldr	r3, [pc, #116]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f023 0203 	bic.w	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	491a      	ldr	r1, [pc, #104]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006038:	f7fd fae6 	bl	8003608 <HAL_GetTick>
 800603c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603e:	e00a      	b.n	8006056 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006040:	f7fd fae2 	bl	8003608 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	f241 3288 	movw	r2, #5000	; 0x1388
 800604e:	4293      	cmp	r3, r2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e061      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006056:	4b11      	ldr	r3, [pc, #68]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f003 020c 	and.w	r2, r3, #12
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	429a      	cmp	r2, r3
 8006066:	d1eb      	bne.n	8006040 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006068:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d214      	bcs.n	80060a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006076:	4b08      	ldr	r3, [pc, #32]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f023 0207 	bic.w	r2, r3, #7
 800607e:	4906      	ldr	r1, [pc, #24]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	4313      	orrs	r3, r2
 8006084:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006086:	4b04      	ldr	r3, [pc, #16]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d005      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e040      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
 8006098:	40022000 	.word	0x40022000
 800609c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ac:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	491a      	ldr	r1, [pc, #104]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ca:	4b16      	ldr	r3, [pc, #88]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4912      	ldr	r1, [pc, #72]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80060de:	f000 f829 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 80060e2:	4601      	mov	r1, r0
 80060e4:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ec:	22f0      	movs	r2, #240	; 0xf0
 80060ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	fa92 f2a2 	rbit	r2, r2
 80060f6:	60fa      	str	r2, [r7, #12]
  return result;
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	fab2 f282 	clz	r2, r2
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	40d3      	lsrs	r3, r2
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <HAL_RCC_ClockConfig+0x2ec>)
 8006104:	5cd3      	ldrb	r3, [r2, r3]
 8006106:	fa21 f303 	lsr.w	r3, r1, r3
 800610a:	4a08      	ldr	r2, [pc, #32]	; (800612c <HAL_RCC_ClockConfig+0x2f0>)
 800610c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800610e:	4b08      	ldr	r3, [pc, #32]	; (8006130 <HAL_RCC_ClockConfig+0x2f4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fd fa34 	bl	8003580 <HAL_InitTick>
  
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3778      	adds	r7, #120	; 0x78
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40021000 	.word	0x40021000
 8006128:	08009edc 	.word	0x08009edc
 800612c:	200000c8 	.word	0x200000c8
 8006130:	200000cc 	.word	0x200000cc

08006134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	b08b      	sub	sp, #44	; 0x2c
 8006138:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800614e:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b04      	cmp	r3, #4
 800615c:	d002      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0x30>
 800615e:	2b08      	cmp	r3, #8
 8006160:	d003      	beq.n	800616a <HAL_RCC_GetSysClockFreq+0x36>
 8006162:	e03c      	b.n	80061de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006164:	4b24      	ldr	r3, [pc, #144]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006166:	623b      	str	r3, [r7, #32]
      break;
 8006168:	e03c      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006170:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006174:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	fa92 f2a2 	rbit	r2, r2
 800617c:	607a      	str	r2, [r7, #4]
  return result;
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	fab2 f282 	clz	r2, r2
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	40d3      	lsrs	r3, r2
 8006188:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800618a:	5cd3      	ldrb	r3, [r2, r3]
 800618c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800618e:	4b19      	ldr	r3, [pc, #100]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	220f      	movs	r2, #15
 8006198:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	fa92 f2a2 	rbit	r2, r2
 80061a0:	60fa      	str	r2, [r7, #12]
  return result;
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	fab2 f282 	clz	r2, r2
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	40d3      	lsrs	r3, r2
 80061ac:	4a14      	ldr	r2, [pc, #80]	; (8006200 <HAL_RCC_GetSysClockFreq+0xcc>)
 80061ae:	5cd3      	ldrb	r3, [r2, r3]
 80061b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80061bc:	4a0e      	ldr	r2, [pc, #56]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
 80061cc:	e004      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4a0c      	ldr	r2, [pc, #48]	; (8006204 <HAL_RCC_GetSysClockFreq+0xd0>)
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	623b      	str	r3, [r7, #32]
      break;
 80061dc:	e002      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80061e0:	623b      	str	r3, [r7, #32]
      break;
 80061e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061e4:	6a3b      	ldr	r3, [r7, #32]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	372c      	adds	r7, #44	; 0x2c
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40021000 	.word	0x40021000
 80061f8:	007a1200 	.word	0x007a1200
 80061fc:	08009eec 	.word	0x08009eec
 8006200:	08009efc 	.word	0x08009efc
 8006204:	003d0900 	.word	0x003d0900

08006208 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b092      	sub	sp, #72	; 0x48
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006218:	2300      	movs	r3, #0
 800621a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80cd 	beq.w	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800622c:	4b86      	ldr	r3, [pc, #536]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10e      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006238:	4b83      	ldr	r3, [pc, #524]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	4a82      	ldr	r2, [pc, #520]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800623e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006242:	61d3      	str	r3, [r2, #28]
 8006244:	4b80      	ldr	r3, [pc, #512]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006256:	4b7d      	ldr	r3, [pc, #500]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d118      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006262:	4b7a      	ldr	r3, [pc, #488]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a79      	ldr	r2, [pc, #484]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800626e:	f7fd f9cb 	bl	8003608 <HAL_GetTick>
 8006272:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006274:	e008      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006276:	f7fd f9c7 	bl	8003608 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b64      	cmp	r3, #100	; 0x64
 8006282:	d901      	bls.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e0db      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006288:	4b70      	ldr	r3, [pc, #448]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f0      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006294:	4b6c      	ldr	r3, [pc, #432]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800629e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d07d      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d076      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b2:	4b65      	ldr	r3, [pc, #404]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	fa93 f3a3 	rbit	r3, r3
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062cc:	fab3 f383 	clz	r3, r3
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	4b5e      	ldr	r3, [pc, #376]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	461a      	mov	r2, r3
 80062dc:	2301      	movs	r3, #1
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	fa93 f3a3 	rbit	r3, r3
 80062ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80062ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062f0:	fab3 f383 	clz	r3, r3
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	4b55      	ldr	r3, [pc, #340]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	461a      	mov	r2, r3
 8006300:	2300      	movs	r3, #0
 8006302:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006304:	4a50      	ldr	r2, [pc, #320]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006308:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800630a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d045      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006314:	f7fd f978 	bl	8003608 <HAL_GetTick>
 8006318:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631a:	e00a      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f7fd f974 	bl	8003608 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e086      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8006332:	2302      	movs	r3, #2
 8006334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	fa93 f3a3 	rbit	r3, r3
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
 800633e:	2302      	movs	r3, #2
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	fa93 f3a3 	rbit	r3, r3
 8006348:	61fb      	str	r3, [r7, #28]
  return result;
 800634a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634c:	fab3 f383 	clz	r3, r3
 8006350:	b2db      	uxtb	r3, r3
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f043 0302 	orr.w	r3, r3, #2
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d102      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006360:	4b39      	ldr	r3, [pc, #228]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	e007      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006366:	2302      	movs	r3, #2
 8006368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	fa93 f3a3 	rbit	r3, r3
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	4b35      	ldr	r3, [pc, #212]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	2202      	movs	r2, #2
 8006378:	613a      	str	r2, [r7, #16]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	fa92 f2a2 	rbit	r2, r2
 8006380:	60fa      	str	r2, [r7, #12]
  return result;
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	fab2 f282 	clz	r2, r2
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	f002 021f 	and.w	r2, r2, #31
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f202 	lsl.w	r2, r1, r2
 800639a:	4013      	ands	r3, r2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0bd      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80063a0:	4b29      	ldr	r3, [pc, #164]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4926      	ldr	r1, [pc, #152]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d105      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	4a22      	ldr	r2, [pc, #136]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d008      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063d2:	4b1d      	ldr	r3, [pc, #116]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	f023 0203 	bic.w	r2, r3, #3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	491a      	ldr	r1, [pc, #104]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063f0:	4b15      	ldr	r3, [pc, #84]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	f023 0210 	bic.w	r2, r3, #16
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4912      	ldr	r1, [pc, #72]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640a:	2b00      	cmp	r3, #0
 800640c:	d008      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800640e:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	490b      	ldr	r1, [pc, #44]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800641c:	4313      	orrs	r3, r2
 800641e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	4903      	ldr	r1, [pc, #12]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800643a:	4313      	orrs	r3, r2
 800643c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3748      	adds	r7, #72	; 0x48
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40021000 	.word	0x40021000
 800644c:	40007000 	.word	0x40007000
 8006450:	10908100 	.word	0x10908100

08006454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e095      	b.n	8006592 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	2b00      	cmp	r3, #0
 800646c:	d108      	bne.n	8006480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006476:	d009      	beq.n	800648c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	61da      	str	r2, [r3, #28]
 800647e:	e005      	b.n	800648c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fc fe2e 	bl	8003108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064cc:	d902      	bls.n	80064d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e002      	b.n	80064da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064e2:	d007      	beq.n	80064f4 <HAL_SPI_Init+0xa0>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064ec:	d002      	beq.n	80064f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006504:	431a      	orrs	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006536:	ea42 0103 	orr.w	r1, r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	0c1b      	lsrs	r3, r3, #16
 8006550:	f003 0204 	and.w	r2, r3, #4
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006570:	ea42 0103 	orr.w	r1, r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b088      	sub	sp, #32
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_SPI_Transmit+0x22>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e158      	b.n	800686e <HAL_SPI_Transmit+0x2d4>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065c4:	f7fd f820 	bl	8003608 <HAL_GetTick>
 80065c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d002      	beq.n	80065e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065da:	2302      	movs	r3, #2
 80065dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065de:	e13d      	b.n	800685c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_SPI_Transmit+0x52>
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065f0:	e134      	b.n	800685c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2203      	movs	r2, #3
 80065f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	88fa      	ldrh	r2, [r7, #6]
 800660a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663c:	d10f      	bne.n	800665e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800665c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d007      	beq.n	800667c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006684:	d94b      	bls.n	800671e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_SPI_Transmit+0xfa>
 800668e:	8afb      	ldrh	r3, [r7, #22]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d13e      	bne.n	8006712 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	881a      	ldrh	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	1c9a      	adds	r2, r3, #2
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066b8:	e02b      	b.n	8006712 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d112      	bne.n	80066ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	881a      	ldrh	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	1c9a      	adds	r2, r3, #2
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ec:	e011      	b.n	8006712 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ee:	f7fc ff8b 	bl	8003608 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d803      	bhi.n	8006706 <HAL_SPI_Transmit+0x16c>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006704:	d102      	bne.n	800670c <HAL_SPI_Transmit+0x172>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d102      	bne.n	8006712 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006710:	e0a4      	b.n	800685c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1ce      	bne.n	80066ba <HAL_SPI_Transmit+0x120>
 800671c:	e07c      	b.n	8006818 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_SPI_Transmit+0x192>
 8006726:	8afb      	ldrh	r3, [r7, #22]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d170      	bne.n	800680e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b01      	cmp	r3, #1
 8006734:	d912      	bls.n	800675c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	881a      	ldrh	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b02      	subs	r3, #2
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	87da      	strh	r2, [r3, #62]	; 0x3e
 800675a:	e058      	b.n	800680e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	7812      	ldrb	r2, [r2, #0]
 8006768:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006782:	e044      	b.n	800680e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d12b      	bne.n	80067ea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d912      	bls.n	80067c2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	881a      	ldrh	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	1c9a      	adds	r2, r3, #2
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b02      	subs	r3, #2
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067c0:	e025      	b.n	800680e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067e8:	e011      	b.n	800680e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ea:	f7fc ff0d 	bl	8003608 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d803      	bhi.n	8006802 <HAL_SPI_Transmit+0x268>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d102      	bne.n	8006808 <HAL_SPI_Transmit+0x26e>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d102      	bne.n	800680e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800680c:	e026      	b.n	800685c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1b5      	bne.n	8006784 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f949 	bl	8006ab4 <SPI_EndRxTxTransaction>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	77fb      	strb	r3, [r7, #31]
 8006858:	e000      	b.n	800685c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800685a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800686c:	7ffb      	ldrb	r3, [r7, #31]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006888:	f7fc febe 	bl	8003608 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	1a9b      	subs	r3, r3, r2
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	4413      	add	r3, r2
 8006896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006898:	f7fc feb6 	bl	8003608 <HAL_GetTick>
 800689c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800689e:	4b39      	ldr	r3, [pc, #228]	; (8006984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	015b      	lsls	r3, r3, #5
 80068a4:	0d1b      	lsrs	r3, r3, #20
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	fb02 f303 	mul.w	r3, r2, r3
 80068ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ae:	e054      	b.n	800695a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d050      	beq.n	800695a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068b8:	f7fc fea6 	bl	8003608 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d902      	bls.n	80068ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d13d      	bne.n	800694a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e6:	d111      	bne.n	800690c <SPI_WaitFlagStateUntilTimeout+0x94>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f0:	d004      	beq.n	80068fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fa:	d107      	bne.n	800690c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006914:	d10f      	bne.n	8006936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e017      	b.n	800697a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3b01      	subs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	bf0c      	ite	eq
 800696a:	2301      	moveq	r3, #1
 800696c:	2300      	movne	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	429a      	cmp	r2, r3
 8006976:	d19b      	bne.n	80068b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3720      	adds	r7, #32
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	200000c8 	.word	0x200000c8

08006988 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08a      	sub	sp, #40	; 0x28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800699a:	f7fc fe35 	bl	8003608 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	4413      	add	r3, r2
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80069aa:	f7fc fe2d 	bl	8003608 <HAL_GetTick>
 80069ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069b8:	4b3d      	ldr	r3, [pc, #244]	; (8006ab0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	00da      	lsls	r2, r3, #3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	0d1b      	lsrs	r3, r3, #20
 80069c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ca:	fb02 f303 	mul.w	r3, r2, r3
 80069ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069d0:	e060      	b.n	8006a94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069d8:	d107      	bne.n	80069ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d050      	beq.n	8006a94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069f2:	f7fc fe09 	bl	8003608 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d902      	bls.n	8006a08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d13d      	bne.n	8006a84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a20:	d111      	bne.n	8006a46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2a:	d004      	beq.n	8006a36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a34:	d107      	bne.n	8006a46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4e:	d10f      	bne.n	8006a70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e010      	b.n	8006aa6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d196      	bne.n	80069d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3728      	adds	r7, #40	; 0x28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	200000c8 	.word	0x200000c8

08006ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff ff5b 	bl	8006988 <SPI_WaitFifoStateUntilTimeout>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006adc:	f043 0220 	orr.w	r2, r3, #32
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e027      	b.n	8006b38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff fec0 	bl	8006878 <SPI_WaitFlagStateUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b02:	f043 0220 	orr.w	r2, r3, #32
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e014      	b.n	8006b38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff ff34 	bl	8006988 <SPI_WaitFifoStateUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2a:	f043 0220 	orr.w	r2, r3, #32
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e000      	b.n	8006b38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e049      	b.n	8006be6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fc fb2e 	bl	80031c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f000 fdd6 	bl	8007730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d001      	beq.n	8006c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e040      	b.n	8006c8a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a1c      	ldr	r2, [pc, #112]	; (8006c98 <HAL_TIM_Base_Start_IT+0xa8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00e      	beq.n	8006c48 <HAL_TIM_Base_Start_IT+0x58>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d009      	beq.n	8006c48 <HAL_TIM_Base_Start_IT+0x58>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a18      	ldr	r2, [pc, #96]	; (8006c9c <HAL_TIM_Base_Start_IT+0xac>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <HAL_TIM_Base_Start_IT+0x58>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a17      	ldr	r2, [pc, #92]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d115      	bne.n	8006c74 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b06      	cmp	r3, #6
 8006c58:	d015      	beq.n	8006c86 <HAL_TIM_Base_Start_IT+0x96>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c60:	d011      	beq.n	8006c86 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0201 	orr.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c72:	e008      	b.n	8006c86 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e000      	b.n	8006c88 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	40000400 	.word	0x40000400
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	00010007 	.word	0x00010007

08006ca8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e049      	b.n	8006d4e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f841 	bl	8006d56 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f000 fd22 	bl	8007730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
	...

08006d6c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <HAL_TIM_OC_Start+0x24>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	bf14      	ite	ne
 8006d88:	2301      	movne	r3, #1
 8006d8a:	2300      	moveq	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	e03c      	b.n	8006e0a <HAL_TIM_OC_Start+0x9e>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d109      	bne.n	8006daa <HAL_TIM_OC_Start+0x3e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	bf14      	ite	ne
 8006da2:	2301      	movne	r3, #1
 8006da4:	2300      	moveq	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	e02f      	b.n	8006e0a <HAL_TIM_OC_Start+0x9e>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	d109      	bne.n	8006dc4 <HAL_TIM_OC_Start+0x58>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	bf14      	ite	ne
 8006dbc:	2301      	movne	r3, #1
 8006dbe:	2300      	moveq	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	e022      	b.n	8006e0a <HAL_TIM_OC_Start+0x9e>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d109      	bne.n	8006dde <HAL_TIM_OC_Start+0x72>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	bf14      	ite	ne
 8006dd6:	2301      	movne	r3, #1
 8006dd8:	2300      	moveq	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	e015      	b.n	8006e0a <HAL_TIM_OC_Start+0x9e>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	d109      	bne.n	8006df8 <HAL_TIM_OC_Start+0x8c>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e008      	b.n	8006e0a <HAL_TIM_OC_Start+0x9e>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	bf14      	ite	ne
 8006e04:	2301      	movne	r3, #1
 8006e06:	2300      	moveq	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e088      	b.n	8006f24 <HAL_TIM_OC_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_OC_Start+0xb6>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e20:	e023      	b.n	8006e6a <HAL_TIM_OC_Start+0xfe>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_OC_Start+0xc6>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e30:	e01b      	b.n	8006e6a <HAL_TIM_OC_Start+0xfe>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_OC_Start+0xd6>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e40:	e013      	b.n	8006e6a <HAL_TIM_OC_Start+0xfe>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_OC_Start+0xe6>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e50:	e00b      	b.n	8006e6a <HAL_TIM_OC_Start+0xfe>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d104      	bne.n	8006e62 <HAL_TIM_OC_Start+0xf6>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e60:	e003      	b.n	8006e6a <HAL_TIM_OC_Start+0xfe>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f814 	bl	8007ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a2b      	ldr	r2, [pc, #172]	; (8006f2c <HAL_TIM_OC_Start+0x1c0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00e      	beq.n	8006ea0 <HAL_TIM_OC_Start+0x134>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a2a      	ldr	r2, [pc, #168]	; (8006f30 <HAL_TIM_OC_Start+0x1c4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d009      	beq.n	8006ea0 <HAL_TIM_OC_Start+0x134>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a28      	ldr	r2, [pc, #160]	; (8006f34 <HAL_TIM_OC_Start+0x1c8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIM_OC_Start+0x134>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a27      	ldr	r2, [pc, #156]	; (8006f38 <HAL_TIM_OC_Start+0x1cc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIM_OC_Start+0x138>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e000      	b.n	8006ea6 <HAL_TIM_OC_Start+0x13a>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d007      	beq.n	8006eba <HAL_TIM_OC_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <HAL_TIM_OC_Start+0x1c0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00e      	beq.n	8006ee2 <HAL_TIM_OC_Start+0x176>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ecc:	d009      	beq.n	8006ee2 <HAL_TIM_OC_Start+0x176>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1a      	ldr	r2, [pc, #104]	; (8006f3c <HAL_TIM_OC_Start+0x1d0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d004      	beq.n	8006ee2 <HAL_TIM_OC_Start+0x176>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a14      	ldr	r2, [pc, #80]	; (8006f30 <HAL_TIM_OC_Start+0x1c4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d115      	bne.n	8006f0e <HAL_TIM_OC_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <HAL_TIM_OC_Start+0x1d4>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b06      	cmp	r3, #6
 8006ef2:	d015      	beq.n	8006f20 <HAL_TIM_OC_Start+0x1b4>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efa:	d011      	beq.n	8006f20 <HAL_TIM_OC_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0c:	e008      	b.n	8006f20 <HAL_TIM_OC_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0201 	orr.w	r2, r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	e000      	b.n	8006f22 <HAL_TIM_OC_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40012c00 	.word	0x40012c00
 8006f30:	40014000 	.word	0x40014000
 8006f34:	40014400 	.word	0x40014400
 8006f38:	40014800 	.word	0x40014800
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	00010007 	.word	0x00010007

08006f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e049      	b.n	8006fea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7fc f966 	bl	800323c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f000 fbd4 	bl	8007730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b02      	cmp	r3, #2
 8007006:	d122      	bne.n	800704e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b02      	cmp	r3, #2
 8007014:	d11b      	bne.n	800704e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f06f 0202 	mvn.w	r2, #2
 800701e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fb5c 	bl	80076f2 <HAL_TIM_IC_CaptureCallback>
 800703a:	e005      	b.n	8007048 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fb4e 	bl	80076de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fb5f 	bl	8007706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b04      	cmp	r3, #4
 800705a:	d122      	bne.n	80070a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b04      	cmp	r3, #4
 8007068:	d11b      	bne.n	80070a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f06f 0204 	mvn.w	r2, #4
 8007072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fb32 	bl	80076f2 <HAL_TIM_IC_CaptureCallback>
 800708e:	e005      	b.n	800709c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fb24 	bl	80076de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fb35 	bl	8007706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d122      	bne.n	80070f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d11b      	bne.n	80070f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f06f 0208 	mvn.w	r2, #8
 80070c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2204      	movs	r2, #4
 80070cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fb08 	bl	80076f2 <HAL_TIM_IC_CaptureCallback>
 80070e2:	e005      	b.n	80070f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fafa 	bl	80076de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fb0b 	bl	8007706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	2b10      	cmp	r3, #16
 8007102:	d122      	bne.n	800714a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b10      	cmp	r3, #16
 8007110:	d11b      	bne.n	800714a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f06f 0210 	mvn.w	r2, #16
 800711a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2208      	movs	r2, #8
 8007120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fade 	bl	80076f2 <HAL_TIM_IC_CaptureCallback>
 8007136:	e005      	b.n	8007144 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fad0 	bl	80076de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fae1 	bl	8007706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b01      	cmp	r3, #1
 8007156:	d10e      	bne.n	8007176 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b01      	cmp	r3, #1
 8007164:	d107      	bne.n	8007176 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f06f 0201 	mvn.w	r2, #1
 800716e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7fb ff4d 	bl	8003010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007180:	2b80      	cmp	r3, #128	; 0x80
 8007182:	d10e      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b80      	cmp	r3, #128	; 0x80
 8007190:	d107      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800719a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 ff95 	bl	80080cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b0:	d10e      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071bc:	2b80      	cmp	r3, #128	; 0x80
 80071be:	d107      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 ff88 	bl	80080e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d10e      	bne.n	80071fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	d107      	bne.n	80071fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa8f 	bl	800771a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b20      	cmp	r3, #32
 8007208:	d10e      	bne.n	8007228 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b20      	cmp	r3, #32
 8007216:	d107      	bne.n	8007228 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0220 	mvn.w	r2, #32
 8007220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 ff48 	bl	80080b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_TIM_OC_ConfigChannel+0x1e>
 800724a:	2302      	movs	r3, #2
 800724c:	e066      	b.n	800731c <HAL_TIM_OC_ConfigChannel+0xec>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b14      	cmp	r3, #20
 800725a:	d857      	bhi.n	800730c <HAL_TIM_OC_ConfigChannel+0xdc>
 800725c:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <HAL_TIM_OC_ConfigChannel+0x34>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	080072b9 	.word	0x080072b9
 8007268:	0800730d 	.word	0x0800730d
 800726c:	0800730d 	.word	0x0800730d
 8007270:	0800730d 	.word	0x0800730d
 8007274:	080072c7 	.word	0x080072c7
 8007278:	0800730d 	.word	0x0800730d
 800727c:	0800730d 	.word	0x0800730d
 8007280:	0800730d 	.word	0x0800730d
 8007284:	080072d5 	.word	0x080072d5
 8007288:	0800730d 	.word	0x0800730d
 800728c:	0800730d 	.word	0x0800730d
 8007290:	0800730d 	.word	0x0800730d
 8007294:	080072e3 	.word	0x080072e3
 8007298:	0800730d 	.word	0x0800730d
 800729c:	0800730d 	.word	0x0800730d
 80072a0:	0800730d 	.word	0x0800730d
 80072a4:	080072f1 	.word	0x080072f1
 80072a8:	0800730d 	.word	0x0800730d
 80072ac:	0800730d 	.word	0x0800730d
 80072b0:	0800730d 	.word	0x0800730d
 80072b4:	080072ff 	.word	0x080072ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 faae 	bl	8007820 <TIM_OC1_SetConfig>
      break;
 80072c4:	e025      	b.n	8007312 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fb2d 	bl	800792c <TIM_OC2_SetConfig>
      break;
 80072d2:	e01e      	b.n	8007312 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fba6 	bl	8007a2c <TIM_OC3_SetConfig>
      break;
 80072e0:	e017      	b.n	8007312 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fc1d 	bl	8007b28 <TIM_OC4_SetConfig>
      break;
 80072ee:	e010      	b.n	8007312 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fc7a 	bl	8007bf0 <TIM_OC5_SetConfig>
      break;
 80072fc:	e009      	b.n	8007312 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fcd1 	bl	8007cac <TIM_OC6_SetConfig>
      break;
 800730a:	e002      	b.n	8007312 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	75fb      	strb	r3, [r7, #23]
      break;
 8007310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800733e:	2302      	movs	r3, #2
 8007340:	e0ff      	b.n	8007542 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b14      	cmp	r3, #20
 800734e:	f200 80f0 	bhi.w	8007532 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	080073ad 	.word	0x080073ad
 800735c:	08007533 	.word	0x08007533
 8007360:	08007533 	.word	0x08007533
 8007364:	08007533 	.word	0x08007533
 8007368:	080073ed 	.word	0x080073ed
 800736c:	08007533 	.word	0x08007533
 8007370:	08007533 	.word	0x08007533
 8007374:	08007533 	.word	0x08007533
 8007378:	0800742f 	.word	0x0800742f
 800737c:	08007533 	.word	0x08007533
 8007380:	08007533 	.word	0x08007533
 8007384:	08007533 	.word	0x08007533
 8007388:	0800746f 	.word	0x0800746f
 800738c:	08007533 	.word	0x08007533
 8007390:	08007533 	.word	0x08007533
 8007394:	08007533 	.word	0x08007533
 8007398:	080074b1 	.word	0x080074b1
 800739c:	08007533 	.word	0x08007533
 80073a0:	08007533 	.word	0x08007533
 80073a4:	08007533 	.word	0x08007533
 80073a8:	080074f1 	.word	0x080074f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fa34 	bl	8007820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699a      	ldr	r2, [r3, #24]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0208 	orr.w	r2, r2, #8
 80073c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0204 	bic.w	r2, r2, #4
 80073d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6999      	ldr	r1, [r3, #24]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	619a      	str	r2, [r3, #24]
      break;
 80073ea:	e0a5      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fa9a 	bl	800792c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699a      	ldr	r2, [r3, #24]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6999      	ldr	r1, [r3, #24]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	021a      	lsls	r2, r3, #8
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	619a      	str	r2, [r3, #24]
      break;
 800742c:	e084      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 faf9 	bl	8007a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f042 0208 	orr.w	r2, r2, #8
 8007448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0204 	bic.w	r2, r2, #4
 8007458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69d9      	ldr	r1, [r3, #28]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	61da      	str	r2, [r3, #28]
      break;
 800746c:	e064      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68b9      	ldr	r1, [r7, #8]
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fb57 	bl	8007b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69d9      	ldr	r1, [r3, #28]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	021a      	lsls	r2, r3, #8
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	61da      	str	r2, [r3, #28]
      break;
 80074ae:	e043      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fb9a 	bl	8007bf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0208 	orr.w	r2, r2, #8
 80074ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0204 	bic.w	r2, r2, #4
 80074da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074ee:	e023      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fbd8 	bl	8007cac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800750a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800751a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	021a      	lsls	r2, r3, #8
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007530:	e002      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	75fb      	strb	r3, [r7, #23]
      break;
 8007536:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop

0800754c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_TIM_ConfigClockSource+0x1c>
 8007564:	2302      	movs	r3, #2
 8007566:	e0b6      	b.n	80076d6 <HAL_TIM_ConfigClockSource+0x18a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800758a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a4:	d03e      	beq.n	8007624 <HAL_TIM_ConfigClockSource+0xd8>
 80075a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075aa:	f200 8087 	bhi.w	80076bc <HAL_TIM_ConfigClockSource+0x170>
 80075ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b2:	f000 8086 	beq.w	80076c2 <HAL_TIM_ConfigClockSource+0x176>
 80075b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ba:	d87f      	bhi.n	80076bc <HAL_TIM_ConfigClockSource+0x170>
 80075bc:	2b70      	cmp	r3, #112	; 0x70
 80075be:	d01a      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0xaa>
 80075c0:	2b70      	cmp	r3, #112	; 0x70
 80075c2:	d87b      	bhi.n	80076bc <HAL_TIM_ConfigClockSource+0x170>
 80075c4:	2b60      	cmp	r3, #96	; 0x60
 80075c6:	d050      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x11e>
 80075c8:	2b60      	cmp	r3, #96	; 0x60
 80075ca:	d877      	bhi.n	80076bc <HAL_TIM_ConfigClockSource+0x170>
 80075cc:	2b50      	cmp	r3, #80	; 0x50
 80075ce:	d03c      	beq.n	800764a <HAL_TIM_ConfigClockSource+0xfe>
 80075d0:	2b50      	cmp	r3, #80	; 0x50
 80075d2:	d873      	bhi.n	80076bc <HAL_TIM_ConfigClockSource+0x170>
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	d058      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x13e>
 80075d8:	2b40      	cmp	r3, #64	; 0x40
 80075da:	d86f      	bhi.n	80076bc <HAL_TIM_ConfigClockSource+0x170>
 80075dc:	2b30      	cmp	r3, #48	; 0x30
 80075de:	d064      	beq.n	80076aa <HAL_TIM_ConfigClockSource+0x15e>
 80075e0:	2b30      	cmp	r3, #48	; 0x30
 80075e2:	d86b      	bhi.n	80076bc <HAL_TIM_ConfigClockSource+0x170>
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d060      	beq.n	80076aa <HAL_TIM_ConfigClockSource+0x15e>
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d867      	bhi.n	80076bc <HAL_TIM_ConfigClockSource+0x170>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d05c      	beq.n	80076aa <HAL_TIM_ConfigClockSource+0x15e>
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	d05a      	beq.n	80076aa <HAL_TIM_ConfigClockSource+0x15e>
 80075f4:	e062      	b.n	80076bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	6899      	ldr	r1, [r3, #8]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f000 fc2b 	bl	8007e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	609a      	str	r2, [r3, #8]
      break;
 8007622:	e04f      	b.n	80076c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	6899      	ldr	r1, [r3, #8]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f000 fc14 	bl	8007e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007646:	609a      	str	r2, [r3, #8]
      break;
 8007648:	e03c      	b.n	80076c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6818      	ldr	r0, [r3, #0]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6859      	ldr	r1, [r3, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	461a      	mov	r2, r3
 8007658:	f000 fb88 	bl	8007d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2150      	movs	r1, #80	; 0x50
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fbe1 	bl	8007e2a <TIM_ITRx_SetConfig>
      break;
 8007668:	e02c      	b.n	80076c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6859      	ldr	r1, [r3, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	461a      	mov	r2, r3
 8007678:	f000 fba7 	bl	8007dca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2160      	movs	r1, #96	; 0x60
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fbd1 	bl	8007e2a <TIM_ITRx_SetConfig>
      break;
 8007688:	e01c      	b.n	80076c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6859      	ldr	r1, [r3, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	461a      	mov	r2, r3
 8007698:	f000 fb68 	bl	8007d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2140      	movs	r1, #64	; 0x40
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fbc1 	bl	8007e2a <TIM_ITRx_SetConfig>
      break;
 80076a8:	e00c      	b.n	80076c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f000 fbb8 	bl	8007e2a <TIM_ITRx_SetConfig>
      break;
 80076ba:	e003      	b.n	80076c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	73fb      	strb	r3, [r7, #15]
      break;
 80076c0:	e000      	b.n	80076c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80076c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a32      	ldr	r2, [pc, #200]	; (800780c <TIM_Base_SetConfig+0xdc>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d007      	beq.n	8007758 <TIM_Base_SetConfig+0x28>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d003      	beq.n	8007758 <TIM_Base_SetConfig+0x28>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a2f      	ldr	r2, [pc, #188]	; (8007810 <TIM_Base_SetConfig+0xe0>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d108      	bne.n	800776a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a27      	ldr	r2, [pc, #156]	; (800780c <TIM_Base_SetConfig+0xdc>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <TIM_Base_SetConfig+0x6a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007778:	d00f      	beq.n	800779a <TIM_Base_SetConfig+0x6a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a24      	ldr	r2, [pc, #144]	; (8007810 <TIM_Base_SetConfig+0xe0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00b      	beq.n	800779a <TIM_Base_SetConfig+0x6a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a23      	ldr	r2, [pc, #140]	; (8007814 <TIM_Base_SetConfig+0xe4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d007      	beq.n	800779a <TIM_Base_SetConfig+0x6a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a22      	ldr	r2, [pc, #136]	; (8007818 <TIM_Base_SetConfig+0xe8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d003      	beq.n	800779a <TIM_Base_SetConfig+0x6a>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a21      	ldr	r2, [pc, #132]	; (800781c <TIM_Base_SetConfig+0xec>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d108      	bne.n	80077ac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a0e      	ldr	r2, [pc, #56]	; (800780c <TIM_Base_SetConfig+0xdc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00b      	beq.n	80077f0 <TIM_Base_SetConfig+0xc0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a0e      	ldr	r2, [pc, #56]	; (8007814 <TIM_Base_SetConfig+0xe4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d007      	beq.n	80077f0 <TIM_Base_SetConfig+0xc0>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a0d      	ldr	r2, [pc, #52]	; (8007818 <TIM_Base_SetConfig+0xe8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_Base_SetConfig+0xc0>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a0c      	ldr	r2, [pc, #48]	; (800781c <TIM_Base_SetConfig+0xec>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d103      	bne.n	80077f8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	615a      	str	r2, [r3, #20]
}
 80077fe:	bf00      	nop
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40000400 	.word	0x40000400
 8007814:	40014000 	.word	0x40014000
 8007818:	40014400 	.word	0x40014400
 800781c:	40014800 	.word	0x40014800

08007820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f023 0201 	bic.w	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f023 0302 	bic.w	r3, r3, #2
 800786c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a28      	ldr	r2, [pc, #160]	; (800791c <TIM_OC1_SetConfig+0xfc>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00b      	beq.n	8007898 <TIM_OC1_SetConfig+0x78>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a27      	ldr	r2, [pc, #156]	; (8007920 <TIM_OC1_SetConfig+0x100>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d007      	beq.n	8007898 <TIM_OC1_SetConfig+0x78>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a26      	ldr	r2, [pc, #152]	; (8007924 <TIM_OC1_SetConfig+0x104>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC1_SetConfig+0x78>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a25      	ldr	r2, [pc, #148]	; (8007928 <TIM_OC1_SetConfig+0x108>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d10c      	bne.n	80078b2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f023 0308 	bic.w	r3, r3, #8
 800789e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f023 0304 	bic.w	r3, r3, #4
 80078b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a19      	ldr	r2, [pc, #100]	; (800791c <TIM_OC1_SetConfig+0xfc>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00b      	beq.n	80078d2 <TIM_OC1_SetConfig+0xb2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a18      	ldr	r2, [pc, #96]	; (8007920 <TIM_OC1_SetConfig+0x100>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d007      	beq.n	80078d2 <TIM_OC1_SetConfig+0xb2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a17      	ldr	r2, [pc, #92]	; (8007924 <TIM_OC1_SetConfig+0x104>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d003      	beq.n	80078d2 <TIM_OC1_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a16      	ldr	r2, [pc, #88]	; (8007928 <TIM_OC1_SetConfig+0x108>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d111      	bne.n	80078f6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	621a      	str	r2, [r3, #32]
}
 8007910:	bf00      	nop
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	40012c00 	.word	0x40012c00
 8007920:	40014000 	.word	0x40014000
 8007924:	40014400 	.word	0x40014400
 8007928:	40014800 	.word	0x40014800

0800792c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f023 0210 	bic.w	r2, r3, #16
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800795a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800795e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4313      	orrs	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f023 0320 	bic.w	r3, r3, #32
 800797a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	011b      	lsls	r3, r3, #4
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a24      	ldr	r2, [pc, #144]	; (8007a1c <TIM_OC2_SetConfig+0xf0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10d      	bne.n	80079ac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a1b      	ldr	r2, [pc, #108]	; (8007a1c <TIM_OC2_SetConfig+0xf0>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00b      	beq.n	80079cc <TIM_OC2_SetConfig+0xa0>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a1a      	ldr	r2, [pc, #104]	; (8007a20 <TIM_OC2_SetConfig+0xf4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d007      	beq.n	80079cc <TIM_OC2_SetConfig+0xa0>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a19      	ldr	r2, [pc, #100]	; (8007a24 <TIM_OC2_SetConfig+0xf8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_OC2_SetConfig+0xa0>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a18      	ldr	r2, [pc, #96]	; (8007a28 <TIM_OC2_SetConfig+0xfc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d113      	bne.n	80079f4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	621a      	str	r2, [r3, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	40012c00 	.word	0x40012c00
 8007a20:	40014000 	.word	0x40014000
 8007a24:	40014400 	.word	0x40014400
 8007a28:	40014800 	.word	0x40014800

08007a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a23      	ldr	r2, [pc, #140]	; (8007b18 <TIM_OC3_SetConfig+0xec>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d10d      	bne.n	8007aaa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aa8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a1a      	ldr	r2, [pc, #104]	; (8007b18 <TIM_OC3_SetConfig+0xec>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_OC3_SetConfig+0x9e>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a19      	ldr	r2, [pc, #100]	; (8007b1c <TIM_OC3_SetConfig+0xf0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_OC3_SetConfig+0x9e>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a18      	ldr	r2, [pc, #96]	; (8007b20 <TIM_OC3_SetConfig+0xf4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_OC3_SetConfig+0x9e>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a17      	ldr	r2, [pc, #92]	; (8007b24 <TIM_OC3_SetConfig+0xf8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d113      	bne.n	8007af2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	621a      	str	r2, [r3, #32]
}
 8007b0c:	bf00      	nop
 8007b0e:	371c      	adds	r7, #28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	40012c00 	.word	0x40012c00
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40014400 	.word	0x40014400
 8007b24:	40014800 	.word	0x40014800

08007b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	031b      	lsls	r3, r3, #12
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a16      	ldr	r2, [pc, #88]	; (8007be0 <TIM_OC4_SetConfig+0xb8>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_OC4_SetConfig+0x7c>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a15      	ldr	r2, [pc, #84]	; (8007be4 <TIM_OC4_SetConfig+0xbc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_OC4_SetConfig+0x7c>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a14      	ldr	r2, [pc, #80]	; (8007be8 <TIM_OC4_SetConfig+0xc0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_OC4_SetConfig+0x7c>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a13      	ldr	r2, [pc, #76]	; (8007bec <TIM_OC4_SetConfig+0xc4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d109      	bne.n	8007bb8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	019b      	lsls	r3, r3, #6
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	621a      	str	r2, [r3, #32]
}
 8007bd2:	bf00      	nop
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40014400 	.word	0x40014400
 8007bec:	40014800 	.word	0x40014800

08007bf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	041b      	lsls	r3, r3, #16
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a15      	ldr	r2, [pc, #84]	; (8007c9c <TIM_OC5_SetConfig+0xac>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d00b      	beq.n	8007c62 <TIM_OC5_SetConfig+0x72>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a14      	ldr	r2, [pc, #80]	; (8007ca0 <TIM_OC5_SetConfig+0xb0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d007      	beq.n	8007c62 <TIM_OC5_SetConfig+0x72>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a13      	ldr	r2, [pc, #76]	; (8007ca4 <TIM_OC5_SetConfig+0xb4>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d003      	beq.n	8007c62 <TIM_OC5_SetConfig+0x72>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a12      	ldr	r2, [pc, #72]	; (8007ca8 <TIM_OC5_SetConfig+0xb8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d109      	bne.n	8007c76 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	621a      	str	r2, [r3, #32]
}
 8007c90:	bf00      	nop
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	40012c00 	.word	0x40012c00
 8007ca0:	40014000 	.word	0x40014000
 8007ca4:	40014400 	.word	0x40014400
 8007ca8:	40014800 	.word	0x40014800

08007cac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	051b      	lsls	r3, r3, #20
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a16      	ldr	r2, [pc, #88]	; (8007d5c <TIM_OC6_SetConfig+0xb0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00b      	beq.n	8007d20 <TIM_OC6_SetConfig+0x74>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a15      	ldr	r2, [pc, #84]	; (8007d60 <TIM_OC6_SetConfig+0xb4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d007      	beq.n	8007d20 <TIM_OC6_SetConfig+0x74>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a14      	ldr	r2, [pc, #80]	; (8007d64 <TIM_OC6_SetConfig+0xb8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_OC6_SetConfig+0x74>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a13      	ldr	r2, [pc, #76]	; (8007d68 <TIM_OC6_SetConfig+0xbc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d109      	bne.n	8007d34 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	029b      	lsls	r3, r3, #10
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	621a      	str	r2, [r3, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	40012c00 	.word	0x40012c00
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800

08007d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	f023 0201 	bic.w	r2, r3, #1
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f023 030a 	bic.w	r3, r3, #10
 8007da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	621a      	str	r2, [r3, #32]
}
 8007dbe:	bf00      	nop
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b087      	sub	sp, #28
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f023 0210 	bic.w	r2, r3, #16
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	031b      	lsls	r3, r3, #12
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	621a      	str	r2, [r3, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b085      	sub	sp, #20
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f043 0307 	orr.w	r3, r3, #7
 8007e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	609a      	str	r2, [r3, #8]
}
 8007e54:	bf00      	nop
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	021a      	lsls	r2, r3, #8
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	609a      	str	r2, [r3, #8]
}
 8007e94:	bf00      	nop
 8007e96:	371c      	adds	r7, #28
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f003 031f 	and.w	r3, r3, #31
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1a      	ldr	r2, [r3, #32]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	401a      	ands	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a1a      	ldr	r2, [r3, #32]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	621a      	str	r2, [r3, #32]
}
 8007ede:	bf00      	nop
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
	...

08007eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e054      	b.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a24      	ldr	r2, [pc, #144]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d108      	bne.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a17      	ldr	r2, [pc, #92]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00e      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a13      	ldr	r2, [pc, #76]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a11      	ldr	r2, [pc, #68]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d10c      	bne.n	8007f9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40014000 	.word	0x40014000

08007fc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e060      	b.n	80080a6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4313      	orrs	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	041b      	lsls	r3, r3, #16
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a14      	ldr	r2, [pc, #80]	; (80080b4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d115      	bne.n	8008094 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	051b      	lsls	r3, r3, #20
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40012c00 	.word	0x40012c00

080080b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <__errno>:
 80080f4:	4b01      	ldr	r3, [pc, #4]	; (80080fc <__errno+0x8>)
 80080f6:	6818      	ldr	r0, [r3, #0]
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	200000d4 	.word	0x200000d4

08008100 <__libc_init_array>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	4d0d      	ldr	r5, [pc, #52]	; (8008138 <__libc_init_array+0x38>)
 8008104:	4c0d      	ldr	r4, [pc, #52]	; (800813c <__libc_init_array+0x3c>)
 8008106:	1b64      	subs	r4, r4, r5
 8008108:	10a4      	asrs	r4, r4, #2
 800810a:	2600      	movs	r6, #0
 800810c:	42a6      	cmp	r6, r4
 800810e:	d109      	bne.n	8008124 <__libc_init_array+0x24>
 8008110:	4d0b      	ldr	r5, [pc, #44]	; (8008140 <__libc_init_array+0x40>)
 8008112:	4c0c      	ldr	r4, [pc, #48]	; (8008144 <__libc_init_array+0x44>)
 8008114:	f001 fa62 	bl	80095dc <_init>
 8008118:	1b64      	subs	r4, r4, r5
 800811a:	10a4      	asrs	r4, r4, #2
 800811c:	2600      	movs	r6, #0
 800811e:	42a6      	cmp	r6, r4
 8008120:	d105      	bne.n	800812e <__libc_init_array+0x2e>
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	f855 3b04 	ldr.w	r3, [r5], #4
 8008128:	4798      	blx	r3
 800812a:	3601      	adds	r6, #1
 800812c:	e7ee      	b.n	800810c <__libc_init_array+0xc>
 800812e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008132:	4798      	blx	r3
 8008134:	3601      	adds	r6, #1
 8008136:	e7f2      	b.n	800811e <__libc_init_array+0x1e>
 8008138:	0800a054 	.word	0x0800a054
 800813c:	0800a054 	.word	0x0800a054
 8008140:	0800a054 	.word	0x0800a054
 8008144:	0800a058 	.word	0x0800a058

08008148 <memcpy>:
 8008148:	440a      	add	r2, r1
 800814a:	4291      	cmp	r1, r2
 800814c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008150:	d100      	bne.n	8008154 <memcpy+0xc>
 8008152:	4770      	bx	lr
 8008154:	b510      	push	{r4, lr}
 8008156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800815a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800815e:	4291      	cmp	r1, r2
 8008160:	d1f9      	bne.n	8008156 <memcpy+0xe>
 8008162:	bd10      	pop	{r4, pc}

08008164 <memset>:
 8008164:	4402      	add	r2, r0
 8008166:	4603      	mov	r3, r0
 8008168:	4293      	cmp	r3, r2
 800816a:	d100      	bne.n	800816e <memset+0xa>
 800816c:	4770      	bx	lr
 800816e:	f803 1b01 	strb.w	r1, [r3], #1
 8008172:	e7f9      	b.n	8008168 <memset+0x4>

08008174 <srand>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <srand+0x44>)
 8008178:	681d      	ldr	r5, [r3, #0]
 800817a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800817c:	4604      	mov	r4, r0
 800817e:	b9b3      	cbnz	r3, 80081ae <srand+0x3a>
 8008180:	2018      	movs	r0, #24
 8008182:	f000 f8b3 	bl	80082ec <malloc>
 8008186:	4602      	mov	r2, r0
 8008188:	63a8      	str	r0, [r5, #56]	; 0x38
 800818a:	b920      	cbnz	r0, 8008196 <srand+0x22>
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <srand+0x48>)
 800818e:	480c      	ldr	r0, [pc, #48]	; (80081c0 <srand+0x4c>)
 8008190:	2142      	movs	r1, #66	; 0x42
 8008192:	f000 f87b 	bl	800828c <__assert_func>
 8008196:	490b      	ldr	r1, [pc, #44]	; (80081c4 <srand+0x50>)
 8008198:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <srand+0x54>)
 800819a:	e9c0 1300 	strd	r1, r3, [r0]
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <srand+0x58>)
 80081a0:	6083      	str	r3, [r0, #8]
 80081a2:	230b      	movs	r3, #11
 80081a4:	8183      	strh	r3, [r0, #12]
 80081a6:	2100      	movs	r1, #0
 80081a8:	2001      	movs	r0, #1
 80081aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80081ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80081b0:	2200      	movs	r2, #0
 80081b2:	611c      	str	r4, [r3, #16]
 80081b4:	615a      	str	r2, [r3, #20]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	200000d4 	.word	0x200000d4
 80081bc:	08009f10 	.word	0x08009f10
 80081c0:	08009f27 	.word	0x08009f27
 80081c4:	abcd330e 	.word	0xabcd330e
 80081c8:	e66d1234 	.word	0xe66d1234
 80081cc:	0005deec 	.word	0x0005deec

080081d0 <rand>:
 80081d0:	4b16      	ldr	r3, [pc, #88]	; (800822c <rand+0x5c>)
 80081d2:	b510      	push	{r4, lr}
 80081d4:	681c      	ldr	r4, [r3, #0]
 80081d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081d8:	b9b3      	cbnz	r3, 8008208 <rand+0x38>
 80081da:	2018      	movs	r0, #24
 80081dc:	f000 f886 	bl	80082ec <malloc>
 80081e0:	63a0      	str	r0, [r4, #56]	; 0x38
 80081e2:	b928      	cbnz	r0, 80081f0 <rand+0x20>
 80081e4:	4602      	mov	r2, r0
 80081e6:	4b12      	ldr	r3, [pc, #72]	; (8008230 <rand+0x60>)
 80081e8:	4812      	ldr	r0, [pc, #72]	; (8008234 <rand+0x64>)
 80081ea:	214e      	movs	r1, #78	; 0x4e
 80081ec:	f000 f84e 	bl	800828c <__assert_func>
 80081f0:	4a11      	ldr	r2, [pc, #68]	; (8008238 <rand+0x68>)
 80081f2:	4b12      	ldr	r3, [pc, #72]	; (800823c <rand+0x6c>)
 80081f4:	e9c0 2300 	strd	r2, r3, [r0]
 80081f8:	4b11      	ldr	r3, [pc, #68]	; (8008240 <rand+0x70>)
 80081fa:	6083      	str	r3, [r0, #8]
 80081fc:	230b      	movs	r3, #11
 80081fe:	8183      	strh	r3, [r0, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	2300      	movs	r3, #0
 8008204:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008208:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800820a:	4a0e      	ldr	r2, [pc, #56]	; (8008244 <rand+0x74>)
 800820c:	6920      	ldr	r0, [r4, #16]
 800820e:	6963      	ldr	r3, [r4, #20]
 8008210:	490d      	ldr	r1, [pc, #52]	; (8008248 <rand+0x78>)
 8008212:	4342      	muls	r2, r0
 8008214:	fb01 2203 	mla	r2, r1, r3, r2
 8008218:	fba0 0101 	umull	r0, r1, r0, r1
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	eb42 0001 	adc.w	r0, r2, r1
 8008222:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8008226:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800822a:	bd10      	pop	{r4, pc}
 800822c:	200000d4 	.word	0x200000d4
 8008230:	08009f10 	.word	0x08009f10
 8008234:	08009f27 	.word	0x08009f27
 8008238:	abcd330e 	.word	0xabcd330e
 800823c:	e66d1234 	.word	0xe66d1234
 8008240:	0005deec 	.word	0x0005deec
 8008244:	5851f42d 	.word	0x5851f42d
 8008248:	4c957f2d 	.word	0x4c957f2d

0800824c <siprintf>:
 800824c:	b40e      	push	{r1, r2, r3}
 800824e:	b500      	push	{lr}
 8008250:	b09c      	sub	sp, #112	; 0x70
 8008252:	ab1d      	add	r3, sp, #116	; 0x74
 8008254:	9002      	str	r0, [sp, #8]
 8008256:	9006      	str	r0, [sp, #24]
 8008258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800825c:	4809      	ldr	r0, [pc, #36]	; (8008284 <siprintf+0x38>)
 800825e:	9107      	str	r1, [sp, #28]
 8008260:	9104      	str	r1, [sp, #16]
 8008262:	4909      	ldr	r1, [pc, #36]	; (8008288 <siprintf+0x3c>)
 8008264:	f853 2b04 	ldr.w	r2, [r3], #4
 8008268:	9105      	str	r1, [sp, #20]
 800826a:	6800      	ldr	r0, [r0, #0]
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	a902      	add	r1, sp, #8
 8008270:	f000 f980 	bl	8008574 <_svfiprintf_r>
 8008274:	9b02      	ldr	r3, [sp, #8]
 8008276:	2200      	movs	r2, #0
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	b01c      	add	sp, #112	; 0x70
 800827c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008280:	b003      	add	sp, #12
 8008282:	4770      	bx	lr
 8008284:	200000d4 	.word	0x200000d4
 8008288:	ffff0208 	.word	0xffff0208

0800828c <__assert_func>:
 800828c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800828e:	4614      	mov	r4, r2
 8008290:	461a      	mov	r2, r3
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <__assert_func+0x2c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4605      	mov	r5, r0
 8008298:	68d8      	ldr	r0, [r3, #12]
 800829a:	b14c      	cbz	r4, 80082b0 <__assert_func+0x24>
 800829c:	4b07      	ldr	r3, [pc, #28]	; (80082bc <__assert_func+0x30>)
 800829e:	9100      	str	r1, [sp, #0]
 80082a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082a4:	4906      	ldr	r1, [pc, #24]	; (80082c0 <__assert_func+0x34>)
 80082a6:	462b      	mov	r3, r5
 80082a8:	f000 f80e 	bl	80082c8 <fiprintf>
 80082ac:	f000 fe20 	bl	8008ef0 <abort>
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <__assert_func+0x38>)
 80082b2:	461c      	mov	r4, r3
 80082b4:	e7f3      	b.n	800829e <__assert_func+0x12>
 80082b6:	bf00      	nop
 80082b8:	200000d4 	.word	0x200000d4
 80082bc:	08009f82 	.word	0x08009f82
 80082c0:	08009f8f 	.word	0x08009f8f
 80082c4:	08009fbd 	.word	0x08009fbd

080082c8 <fiprintf>:
 80082c8:	b40e      	push	{r1, r2, r3}
 80082ca:	b503      	push	{r0, r1, lr}
 80082cc:	4601      	mov	r1, r0
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	4805      	ldr	r0, [pc, #20]	; (80082e8 <fiprintf+0x20>)
 80082d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d6:	6800      	ldr	r0, [r0, #0]
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	f000 fa75 	bl	80087c8 <_vfiprintf_r>
 80082de:	b002      	add	sp, #8
 80082e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e4:	b003      	add	sp, #12
 80082e6:	4770      	bx	lr
 80082e8:	200000d4 	.word	0x200000d4

080082ec <malloc>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <malloc+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f000 b86f 	b.w	80083d4 <_malloc_r>
 80082f6:	bf00      	nop
 80082f8:	200000d4 	.word	0x200000d4

080082fc <_free_r>:
 80082fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082fe:	2900      	cmp	r1, #0
 8008300:	d044      	beq.n	800838c <_free_r+0x90>
 8008302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008306:	9001      	str	r0, [sp, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f1a1 0404 	sub.w	r4, r1, #4
 800830e:	bfb8      	it	lt
 8008310:	18e4      	addlt	r4, r4, r3
 8008312:	f001 f82f 	bl	8009374 <__malloc_lock>
 8008316:	4a1e      	ldr	r2, [pc, #120]	; (8008390 <_free_r+0x94>)
 8008318:	9801      	ldr	r0, [sp, #4]
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	b933      	cbnz	r3, 800832c <_free_r+0x30>
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	b003      	add	sp, #12
 8008324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008328:	f001 b82a 	b.w	8009380 <__malloc_unlock>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d908      	bls.n	8008342 <_free_r+0x46>
 8008330:	6825      	ldr	r5, [r4, #0]
 8008332:	1961      	adds	r1, r4, r5
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1949      	addeq	r1, r1, r5
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	e7ed      	b.n	800831e <_free_r+0x22>
 8008342:	461a      	mov	r2, r3
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b10b      	cbz	r3, 800834c <_free_r+0x50>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x46>
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	1855      	adds	r5, r2, r1
 8008350:	42a5      	cmp	r5, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x70>
 8008354:	6824      	ldr	r4, [r4, #0]
 8008356:	4421      	add	r1, r4
 8008358:	1854      	adds	r4, r2, r1
 800835a:	42a3      	cmp	r3, r4
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	d1e0      	bne.n	8008322 <_free_r+0x26>
 8008360:	681c      	ldr	r4, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	6053      	str	r3, [r2, #4]
 8008366:	4421      	add	r1, r4
 8008368:	6011      	str	r1, [r2, #0]
 800836a:	e7da      	b.n	8008322 <_free_r+0x26>
 800836c:	d902      	bls.n	8008374 <_free_r+0x78>
 800836e:	230c      	movs	r3, #12
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	e7d6      	b.n	8008322 <_free_r+0x26>
 8008374:	6825      	ldr	r5, [r4, #0]
 8008376:	1961      	adds	r1, r4, r5
 8008378:	428b      	cmp	r3, r1
 800837a:	bf04      	itt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	bf04      	itt	eq
 8008384:	1949      	addeq	r1, r1, r5
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	6054      	str	r4, [r2, #4]
 800838a:	e7ca      	b.n	8008322 <_free_r+0x26>
 800838c:	b003      	add	sp, #12
 800838e:	bd30      	pop	{r4, r5, pc}
 8008390:	20000a48 	.word	0x20000a48

08008394 <sbrk_aligned>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4e0e      	ldr	r6, [pc, #56]	; (80083d0 <sbrk_aligned+0x3c>)
 8008398:	460c      	mov	r4, r1
 800839a:	6831      	ldr	r1, [r6, #0]
 800839c:	4605      	mov	r5, r0
 800839e:	b911      	cbnz	r1, 80083a6 <sbrk_aligned+0x12>
 80083a0:	f000 fcd6 	bl	8008d50 <_sbrk_r>
 80083a4:	6030      	str	r0, [r6, #0]
 80083a6:	4621      	mov	r1, r4
 80083a8:	4628      	mov	r0, r5
 80083aa:	f000 fcd1 	bl	8008d50 <_sbrk_r>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d00a      	beq.n	80083c8 <sbrk_aligned+0x34>
 80083b2:	1cc4      	adds	r4, r0, #3
 80083b4:	f024 0403 	bic.w	r4, r4, #3
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d007      	beq.n	80083cc <sbrk_aligned+0x38>
 80083bc:	1a21      	subs	r1, r4, r0
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 fcc6 	bl	8008d50 <_sbrk_r>
 80083c4:	3001      	adds	r0, #1
 80083c6:	d101      	bne.n	80083cc <sbrk_aligned+0x38>
 80083c8:	f04f 34ff 	mov.w	r4, #4294967295
 80083cc:	4620      	mov	r0, r4
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	20000a4c 	.word	0x20000a4c

080083d4 <_malloc_r>:
 80083d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d8:	1ccd      	adds	r5, r1, #3
 80083da:	f025 0503 	bic.w	r5, r5, #3
 80083de:	3508      	adds	r5, #8
 80083e0:	2d0c      	cmp	r5, #12
 80083e2:	bf38      	it	cc
 80083e4:	250c      	movcc	r5, #12
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	4607      	mov	r7, r0
 80083ea:	db01      	blt.n	80083f0 <_malloc_r+0x1c>
 80083ec:	42a9      	cmp	r1, r5
 80083ee:	d905      	bls.n	80083fc <_malloc_r+0x28>
 80083f0:	230c      	movs	r3, #12
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	2600      	movs	r6, #0
 80083f6:	4630      	mov	r0, r6
 80083f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083fc:	4e2e      	ldr	r6, [pc, #184]	; (80084b8 <_malloc_r+0xe4>)
 80083fe:	f000 ffb9 	bl	8009374 <__malloc_lock>
 8008402:	6833      	ldr	r3, [r6, #0]
 8008404:	461c      	mov	r4, r3
 8008406:	bb34      	cbnz	r4, 8008456 <_malloc_r+0x82>
 8008408:	4629      	mov	r1, r5
 800840a:	4638      	mov	r0, r7
 800840c:	f7ff ffc2 	bl	8008394 <sbrk_aligned>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	4604      	mov	r4, r0
 8008414:	d14d      	bne.n	80084b2 <_malloc_r+0xde>
 8008416:	6834      	ldr	r4, [r6, #0]
 8008418:	4626      	mov	r6, r4
 800841a:	2e00      	cmp	r6, #0
 800841c:	d140      	bne.n	80084a0 <_malloc_r+0xcc>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	4631      	mov	r1, r6
 8008422:	4638      	mov	r0, r7
 8008424:	eb04 0803 	add.w	r8, r4, r3
 8008428:	f000 fc92 	bl	8008d50 <_sbrk_r>
 800842c:	4580      	cmp	r8, r0
 800842e:	d13a      	bne.n	80084a6 <_malloc_r+0xd2>
 8008430:	6821      	ldr	r1, [r4, #0]
 8008432:	3503      	adds	r5, #3
 8008434:	1a6d      	subs	r5, r5, r1
 8008436:	f025 0503 	bic.w	r5, r5, #3
 800843a:	3508      	adds	r5, #8
 800843c:	2d0c      	cmp	r5, #12
 800843e:	bf38      	it	cc
 8008440:	250c      	movcc	r5, #12
 8008442:	4629      	mov	r1, r5
 8008444:	4638      	mov	r0, r7
 8008446:	f7ff ffa5 	bl	8008394 <sbrk_aligned>
 800844a:	3001      	adds	r0, #1
 800844c:	d02b      	beq.n	80084a6 <_malloc_r+0xd2>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	442b      	add	r3, r5
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	e00e      	b.n	8008474 <_malloc_r+0xa0>
 8008456:	6822      	ldr	r2, [r4, #0]
 8008458:	1b52      	subs	r2, r2, r5
 800845a:	d41e      	bmi.n	800849a <_malloc_r+0xc6>
 800845c:	2a0b      	cmp	r2, #11
 800845e:	d916      	bls.n	800848e <_malloc_r+0xba>
 8008460:	1961      	adds	r1, r4, r5
 8008462:	42a3      	cmp	r3, r4
 8008464:	6025      	str	r5, [r4, #0]
 8008466:	bf18      	it	ne
 8008468:	6059      	strne	r1, [r3, #4]
 800846a:	6863      	ldr	r3, [r4, #4]
 800846c:	bf08      	it	eq
 800846e:	6031      	streq	r1, [r6, #0]
 8008470:	5162      	str	r2, [r4, r5]
 8008472:	604b      	str	r3, [r1, #4]
 8008474:	4638      	mov	r0, r7
 8008476:	f104 060b 	add.w	r6, r4, #11
 800847a:	f000 ff81 	bl	8009380 <__malloc_unlock>
 800847e:	f026 0607 	bic.w	r6, r6, #7
 8008482:	1d23      	adds	r3, r4, #4
 8008484:	1af2      	subs	r2, r6, r3
 8008486:	d0b6      	beq.n	80083f6 <_malloc_r+0x22>
 8008488:	1b9b      	subs	r3, r3, r6
 800848a:	50a3      	str	r3, [r4, r2]
 800848c:	e7b3      	b.n	80083f6 <_malloc_r+0x22>
 800848e:	6862      	ldr	r2, [r4, #4]
 8008490:	42a3      	cmp	r3, r4
 8008492:	bf0c      	ite	eq
 8008494:	6032      	streq	r2, [r6, #0]
 8008496:	605a      	strne	r2, [r3, #4]
 8008498:	e7ec      	b.n	8008474 <_malloc_r+0xa0>
 800849a:	4623      	mov	r3, r4
 800849c:	6864      	ldr	r4, [r4, #4]
 800849e:	e7b2      	b.n	8008406 <_malloc_r+0x32>
 80084a0:	4634      	mov	r4, r6
 80084a2:	6876      	ldr	r6, [r6, #4]
 80084a4:	e7b9      	b.n	800841a <_malloc_r+0x46>
 80084a6:	230c      	movs	r3, #12
 80084a8:	603b      	str	r3, [r7, #0]
 80084aa:	4638      	mov	r0, r7
 80084ac:	f000 ff68 	bl	8009380 <__malloc_unlock>
 80084b0:	e7a1      	b.n	80083f6 <_malloc_r+0x22>
 80084b2:	6025      	str	r5, [r4, #0]
 80084b4:	e7de      	b.n	8008474 <_malloc_r+0xa0>
 80084b6:	bf00      	nop
 80084b8:	20000a48 	.word	0x20000a48

080084bc <__ssputs_r>:
 80084bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	688e      	ldr	r6, [r1, #8]
 80084c2:	429e      	cmp	r6, r3
 80084c4:	4682      	mov	sl, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	4690      	mov	r8, r2
 80084ca:	461f      	mov	r7, r3
 80084cc:	d838      	bhi.n	8008540 <__ssputs_r+0x84>
 80084ce:	898a      	ldrh	r2, [r1, #12]
 80084d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084d4:	d032      	beq.n	800853c <__ssputs_r+0x80>
 80084d6:	6825      	ldr	r5, [r4, #0]
 80084d8:	6909      	ldr	r1, [r1, #16]
 80084da:	eba5 0901 	sub.w	r9, r5, r1
 80084de:	6965      	ldr	r5, [r4, #20]
 80084e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084e8:	3301      	adds	r3, #1
 80084ea:	444b      	add	r3, r9
 80084ec:	106d      	asrs	r5, r5, #1
 80084ee:	429d      	cmp	r5, r3
 80084f0:	bf38      	it	cc
 80084f2:	461d      	movcc	r5, r3
 80084f4:	0553      	lsls	r3, r2, #21
 80084f6:	d531      	bpl.n	800855c <__ssputs_r+0xa0>
 80084f8:	4629      	mov	r1, r5
 80084fa:	f7ff ff6b 	bl	80083d4 <_malloc_r>
 80084fe:	4606      	mov	r6, r0
 8008500:	b950      	cbnz	r0, 8008518 <__ssputs_r+0x5c>
 8008502:	230c      	movs	r3, #12
 8008504:	f8ca 3000 	str.w	r3, [sl]
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008518:	6921      	ldr	r1, [r4, #16]
 800851a:	464a      	mov	r2, r9
 800851c:	f7ff fe14 	bl	8008148 <memcpy>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	6126      	str	r6, [r4, #16]
 800852e:	6165      	str	r5, [r4, #20]
 8008530:	444e      	add	r6, r9
 8008532:	eba5 0509 	sub.w	r5, r5, r9
 8008536:	6026      	str	r6, [r4, #0]
 8008538:	60a5      	str	r5, [r4, #8]
 800853a:	463e      	mov	r6, r7
 800853c:	42be      	cmp	r6, r7
 800853e:	d900      	bls.n	8008542 <__ssputs_r+0x86>
 8008540:	463e      	mov	r6, r7
 8008542:	6820      	ldr	r0, [r4, #0]
 8008544:	4632      	mov	r2, r6
 8008546:	4641      	mov	r1, r8
 8008548:	f000 fefa 	bl	8009340 <memmove>
 800854c:	68a3      	ldr	r3, [r4, #8]
 800854e:	1b9b      	subs	r3, r3, r6
 8008550:	60a3      	str	r3, [r4, #8]
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	4433      	add	r3, r6
 8008556:	6023      	str	r3, [r4, #0]
 8008558:	2000      	movs	r0, #0
 800855a:	e7db      	b.n	8008514 <__ssputs_r+0x58>
 800855c:	462a      	mov	r2, r5
 800855e:	f000 ff15 	bl	800938c <_realloc_r>
 8008562:	4606      	mov	r6, r0
 8008564:	2800      	cmp	r0, #0
 8008566:	d1e1      	bne.n	800852c <__ssputs_r+0x70>
 8008568:	6921      	ldr	r1, [r4, #16]
 800856a:	4650      	mov	r0, sl
 800856c:	f7ff fec6 	bl	80082fc <_free_r>
 8008570:	e7c7      	b.n	8008502 <__ssputs_r+0x46>
	...

08008574 <_svfiprintf_r>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	4698      	mov	r8, r3
 800857a:	898b      	ldrh	r3, [r1, #12]
 800857c:	061b      	lsls	r3, r3, #24
 800857e:	b09d      	sub	sp, #116	; 0x74
 8008580:	4607      	mov	r7, r0
 8008582:	460d      	mov	r5, r1
 8008584:	4614      	mov	r4, r2
 8008586:	d50e      	bpl.n	80085a6 <_svfiprintf_r+0x32>
 8008588:	690b      	ldr	r3, [r1, #16]
 800858a:	b963      	cbnz	r3, 80085a6 <_svfiprintf_r+0x32>
 800858c:	2140      	movs	r1, #64	; 0x40
 800858e:	f7ff ff21 	bl	80083d4 <_malloc_r>
 8008592:	6028      	str	r0, [r5, #0]
 8008594:	6128      	str	r0, [r5, #16]
 8008596:	b920      	cbnz	r0, 80085a2 <_svfiprintf_r+0x2e>
 8008598:	230c      	movs	r3, #12
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	e0d1      	b.n	8008746 <_svfiprintf_r+0x1d2>
 80085a2:	2340      	movs	r3, #64	; 0x40
 80085a4:	616b      	str	r3, [r5, #20]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9309      	str	r3, [sp, #36]	; 0x24
 80085aa:	2320      	movs	r3, #32
 80085ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b4:	2330      	movs	r3, #48	; 0x30
 80085b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008760 <_svfiprintf_r+0x1ec>
 80085ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085be:	f04f 0901 	mov.w	r9, #1
 80085c2:	4623      	mov	r3, r4
 80085c4:	469a      	mov	sl, r3
 80085c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ca:	b10a      	cbz	r2, 80085d0 <_svfiprintf_r+0x5c>
 80085cc:	2a25      	cmp	r2, #37	; 0x25
 80085ce:	d1f9      	bne.n	80085c4 <_svfiprintf_r+0x50>
 80085d0:	ebba 0b04 	subs.w	fp, sl, r4
 80085d4:	d00b      	beq.n	80085ee <_svfiprintf_r+0x7a>
 80085d6:	465b      	mov	r3, fp
 80085d8:	4622      	mov	r2, r4
 80085da:	4629      	mov	r1, r5
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ff6d 	bl	80084bc <__ssputs_r>
 80085e2:	3001      	adds	r0, #1
 80085e4:	f000 80aa 	beq.w	800873c <_svfiprintf_r+0x1c8>
 80085e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ea:	445a      	add	r2, fp
 80085ec:	9209      	str	r2, [sp, #36]	; 0x24
 80085ee:	f89a 3000 	ldrb.w	r3, [sl]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 80a2 	beq.w	800873c <_svfiprintf_r+0x1c8>
 80085f8:	2300      	movs	r3, #0
 80085fa:	f04f 32ff 	mov.w	r2, #4294967295
 80085fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008602:	f10a 0a01 	add.w	sl, sl, #1
 8008606:	9304      	str	r3, [sp, #16]
 8008608:	9307      	str	r3, [sp, #28]
 800860a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800860e:	931a      	str	r3, [sp, #104]	; 0x68
 8008610:	4654      	mov	r4, sl
 8008612:	2205      	movs	r2, #5
 8008614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008618:	4851      	ldr	r0, [pc, #324]	; (8008760 <_svfiprintf_r+0x1ec>)
 800861a:	f7f7 fde1 	bl	80001e0 <memchr>
 800861e:	9a04      	ldr	r2, [sp, #16]
 8008620:	b9d8      	cbnz	r0, 800865a <_svfiprintf_r+0xe6>
 8008622:	06d0      	lsls	r0, r2, #27
 8008624:	bf44      	itt	mi
 8008626:	2320      	movmi	r3, #32
 8008628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800862c:	0711      	lsls	r1, r2, #28
 800862e:	bf44      	itt	mi
 8008630:	232b      	movmi	r3, #43	; 0x2b
 8008632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008636:	f89a 3000 	ldrb.w	r3, [sl]
 800863a:	2b2a      	cmp	r3, #42	; 0x2a
 800863c:	d015      	beq.n	800866a <_svfiprintf_r+0xf6>
 800863e:	9a07      	ldr	r2, [sp, #28]
 8008640:	4654      	mov	r4, sl
 8008642:	2000      	movs	r0, #0
 8008644:	f04f 0c0a 	mov.w	ip, #10
 8008648:	4621      	mov	r1, r4
 800864a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864e:	3b30      	subs	r3, #48	; 0x30
 8008650:	2b09      	cmp	r3, #9
 8008652:	d94e      	bls.n	80086f2 <_svfiprintf_r+0x17e>
 8008654:	b1b0      	cbz	r0, 8008684 <_svfiprintf_r+0x110>
 8008656:	9207      	str	r2, [sp, #28]
 8008658:	e014      	b.n	8008684 <_svfiprintf_r+0x110>
 800865a:	eba0 0308 	sub.w	r3, r0, r8
 800865e:	fa09 f303 	lsl.w	r3, r9, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	46a2      	mov	sl, r4
 8008668:	e7d2      	b.n	8008610 <_svfiprintf_r+0x9c>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	1d19      	adds	r1, r3, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	9103      	str	r1, [sp, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	bfbb      	ittet	lt
 8008676:	425b      	neglt	r3, r3
 8008678:	f042 0202 	orrlt.w	r2, r2, #2
 800867c:	9307      	strge	r3, [sp, #28]
 800867e:	9307      	strlt	r3, [sp, #28]
 8008680:	bfb8      	it	lt
 8008682:	9204      	strlt	r2, [sp, #16]
 8008684:	7823      	ldrb	r3, [r4, #0]
 8008686:	2b2e      	cmp	r3, #46	; 0x2e
 8008688:	d10c      	bne.n	80086a4 <_svfiprintf_r+0x130>
 800868a:	7863      	ldrb	r3, [r4, #1]
 800868c:	2b2a      	cmp	r3, #42	; 0x2a
 800868e:	d135      	bne.n	80086fc <_svfiprintf_r+0x188>
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	1d1a      	adds	r2, r3, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	9203      	str	r2, [sp, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	bfb8      	it	lt
 800869c:	f04f 33ff 	movlt.w	r3, #4294967295
 80086a0:	3402      	adds	r4, #2
 80086a2:	9305      	str	r3, [sp, #20]
 80086a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008770 <_svfiprintf_r+0x1fc>
 80086a8:	7821      	ldrb	r1, [r4, #0]
 80086aa:	2203      	movs	r2, #3
 80086ac:	4650      	mov	r0, sl
 80086ae:	f7f7 fd97 	bl	80001e0 <memchr>
 80086b2:	b140      	cbz	r0, 80086c6 <_svfiprintf_r+0x152>
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	eba0 000a 	sub.w	r0, r0, sl
 80086ba:	fa03 f000 	lsl.w	r0, r3, r0
 80086be:	9b04      	ldr	r3, [sp, #16]
 80086c0:	4303      	orrs	r3, r0
 80086c2:	3401      	adds	r4, #1
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ca:	4826      	ldr	r0, [pc, #152]	; (8008764 <_svfiprintf_r+0x1f0>)
 80086cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086d0:	2206      	movs	r2, #6
 80086d2:	f7f7 fd85 	bl	80001e0 <memchr>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d038      	beq.n	800874c <_svfiprintf_r+0x1d8>
 80086da:	4b23      	ldr	r3, [pc, #140]	; (8008768 <_svfiprintf_r+0x1f4>)
 80086dc:	bb1b      	cbnz	r3, 8008726 <_svfiprintf_r+0x1b2>
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	3307      	adds	r3, #7
 80086e2:	f023 0307 	bic.w	r3, r3, #7
 80086e6:	3308      	adds	r3, #8
 80086e8:	9303      	str	r3, [sp, #12]
 80086ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ec:	4433      	add	r3, r6
 80086ee:	9309      	str	r3, [sp, #36]	; 0x24
 80086f0:	e767      	b.n	80085c2 <_svfiprintf_r+0x4e>
 80086f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f6:	460c      	mov	r4, r1
 80086f8:	2001      	movs	r0, #1
 80086fa:	e7a5      	b.n	8008648 <_svfiprintf_r+0xd4>
 80086fc:	2300      	movs	r3, #0
 80086fe:	3401      	adds	r4, #1
 8008700:	9305      	str	r3, [sp, #20]
 8008702:	4619      	mov	r1, r3
 8008704:	f04f 0c0a 	mov.w	ip, #10
 8008708:	4620      	mov	r0, r4
 800870a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800870e:	3a30      	subs	r2, #48	; 0x30
 8008710:	2a09      	cmp	r2, #9
 8008712:	d903      	bls.n	800871c <_svfiprintf_r+0x1a8>
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0c5      	beq.n	80086a4 <_svfiprintf_r+0x130>
 8008718:	9105      	str	r1, [sp, #20]
 800871a:	e7c3      	b.n	80086a4 <_svfiprintf_r+0x130>
 800871c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008720:	4604      	mov	r4, r0
 8008722:	2301      	movs	r3, #1
 8008724:	e7f0      	b.n	8008708 <_svfiprintf_r+0x194>
 8008726:	ab03      	add	r3, sp, #12
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	462a      	mov	r2, r5
 800872c:	4b0f      	ldr	r3, [pc, #60]	; (800876c <_svfiprintf_r+0x1f8>)
 800872e:	a904      	add	r1, sp, #16
 8008730:	4638      	mov	r0, r7
 8008732:	f3af 8000 	nop.w
 8008736:	1c42      	adds	r2, r0, #1
 8008738:	4606      	mov	r6, r0
 800873a:	d1d6      	bne.n	80086ea <_svfiprintf_r+0x176>
 800873c:	89ab      	ldrh	r3, [r5, #12]
 800873e:	065b      	lsls	r3, r3, #25
 8008740:	f53f af2c 	bmi.w	800859c <_svfiprintf_r+0x28>
 8008744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008746:	b01d      	add	sp, #116	; 0x74
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	ab03      	add	r3, sp, #12
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	462a      	mov	r2, r5
 8008752:	4b06      	ldr	r3, [pc, #24]	; (800876c <_svfiprintf_r+0x1f8>)
 8008754:	a904      	add	r1, sp, #16
 8008756:	4638      	mov	r0, r7
 8008758:	f000 f9d4 	bl	8008b04 <_printf_i>
 800875c:	e7eb      	b.n	8008736 <_svfiprintf_r+0x1c2>
 800875e:	bf00      	nop
 8008760:	08009fbe 	.word	0x08009fbe
 8008764:	08009fc8 	.word	0x08009fc8
 8008768:	00000000 	.word	0x00000000
 800876c:	080084bd 	.word	0x080084bd
 8008770:	08009fc4 	.word	0x08009fc4

08008774 <__sfputc_r>:
 8008774:	6893      	ldr	r3, [r2, #8]
 8008776:	3b01      	subs	r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	b410      	push	{r4}
 800877c:	6093      	str	r3, [r2, #8]
 800877e:	da08      	bge.n	8008792 <__sfputc_r+0x1e>
 8008780:	6994      	ldr	r4, [r2, #24]
 8008782:	42a3      	cmp	r3, r4
 8008784:	db01      	blt.n	800878a <__sfputc_r+0x16>
 8008786:	290a      	cmp	r1, #10
 8008788:	d103      	bne.n	8008792 <__sfputc_r+0x1e>
 800878a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800878e:	f000 baef 	b.w	8008d70 <__swbuf_r>
 8008792:	6813      	ldr	r3, [r2, #0]
 8008794:	1c58      	adds	r0, r3, #1
 8008796:	6010      	str	r0, [r2, #0]
 8008798:	7019      	strb	r1, [r3, #0]
 800879a:	4608      	mov	r0, r1
 800879c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <__sfputs_r>:
 80087a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a4:	4606      	mov	r6, r0
 80087a6:	460f      	mov	r7, r1
 80087a8:	4614      	mov	r4, r2
 80087aa:	18d5      	adds	r5, r2, r3
 80087ac:	42ac      	cmp	r4, r5
 80087ae:	d101      	bne.n	80087b4 <__sfputs_r+0x12>
 80087b0:	2000      	movs	r0, #0
 80087b2:	e007      	b.n	80087c4 <__sfputs_r+0x22>
 80087b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b8:	463a      	mov	r2, r7
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff ffda 	bl	8008774 <__sfputc_r>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d1f3      	bne.n	80087ac <__sfputs_r+0xa>
 80087c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087c8 <_vfiprintf_r>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	460d      	mov	r5, r1
 80087ce:	b09d      	sub	sp, #116	; 0x74
 80087d0:	4614      	mov	r4, r2
 80087d2:	4698      	mov	r8, r3
 80087d4:	4606      	mov	r6, r0
 80087d6:	b118      	cbz	r0, 80087e0 <_vfiprintf_r+0x18>
 80087d8:	6983      	ldr	r3, [r0, #24]
 80087da:	b90b      	cbnz	r3, 80087e0 <_vfiprintf_r+0x18>
 80087dc:	f000 fcaa 	bl	8009134 <__sinit>
 80087e0:	4b89      	ldr	r3, [pc, #548]	; (8008a08 <_vfiprintf_r+0x240>)
 80087e2:	429d      	cmp	r5, r3
 80087e4:	d11b      	bne.n	800881e <_vfiprintf_r+0x56>
 80087e6:	6875      	ldr	r5, [r6, #4]
 80087e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ea:	07d9      	lsls	r1, r3, #31
 80087ec:	d405      	bmi.n	80087fa <_vfiprintf_r+0x32>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	059a      	lsls	r2, r3, #22
 80087f2:	d402      	bmi.n	80087fa <_vfiprintf_r+0x32>
 80087f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087f6:	f000 fd3b 	bl	8009270 <__retarget_lock_acquire_recursive>
 80087fa:	89ab      	ldrh	r3, [r5, #12]
 80087fc:	071b      	lsls	r3, r3, #28
 80087fe:	d501      	bpl.n	8008804 <_vfiprintf_r+0x3c>
 8008800:	692b      	ldr	r3, [r5, #16]
 8008802:	b9eb      	cbnz	r3, 8008840 <_vfiprintf_r+0x78>
 8008804:	4629      	mov	r1, r5
 8008806:	4630      	mov	r0, r6
 8008808:	f000 fb04 	bl	8008e14 <__swsetup_r>
 800880c:	b1c0      	cbz	r0, 8008840 <_vfiprintf_r+0x78>
 800880e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008810:	07dc      	lsls	r4, r3, #31
 8008812:	d50e      	bpl.n	8008832 <_vfiprintf_r+0x6a>
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	b01d      	add	sp, #116	; 0x74
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881e:	4b7b      	ldr	r3, [pc, #492]	; (8008a0c <_vfiprintf_r+0x244>)
 8008820:	429d      	cmp	r5, r3
 8008822:	d101      	bne.n	8008828 <_vfiprintf_r+0x60>
 8008824:	68b5      	ldr	r5, [r6, #8]
 8008826:	e7df      	b.n	80087e8 <_vfiprintf_r+0x20>
 8008828:	4b79      	ldr	r3, [pc, #484]	; (8008a10 <_vfiprintf_r+0x248>)
 800882a:	429d      	cmp	r5, r3
 800882c:	bf08      	it	eq
 800882e:	68f5      	ldreq	r5, [r6, #12]
 8008830:	e7da      	b.n	80087e8 <_vfiprintf_r+0x20>
 8008832:	89ab      	ldrh	r3, [r5, #12]
 8008834:	0598      	lsls	r0, r3, #22
 8008836:	d4ed      	bmi.n	8008814 <_vfiprintf_r+0x4c>
 8008838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800883a:	f000 fd1a 	bl	8009272 <__retarget_lock_release_recursive>
 800883e:	e7e9      	b.n	8008814 <_vfiprintf_r+0x4c>
 8008840:	2300      	movs	r3, #0
 8008842:	9309      	str	r3, [sp, #36]	; 0x24
 8008844:	2320      	movs	r3, #32
 8008846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800884a:	f8cd 800c 	str.w	r8, [sp, #12]
 800884e:	2330      	movs	r3, #48	; 0x30
 8008850:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a14 <_vfiprintf_r+0x24c>
 8008854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008858:	f04f 0901 	mov.w	r9, #1
 800885c:	4623      	mov	r3, r4
 800885e:	469a      	mov	sl, r3
 8008860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008864:	b10a      	cbz	r2, 800886a <_vfiprintf_r+0xa2>
 8008866:	2a25      	cmp	r2, #37	; 0x25
 8008868:	d1f9      	bne.n	800885e <_vfiprintf_r+0x96>
 800886a:	ebba 0b04 	subs.w	fp, sl, r4
 800886e:	d00b      	beq.n	8008888 <_vfiprintf_r+0xc0>
 8008870:	465b      	mov	r3, fp
 8008872:	4622      	mov	r2, r4
 8008874:	4629      	mov	r1, r5
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff ff93 	bl	80087a2 <__sfputs_r>
 800887c:	3001      	adds	r0, #1
 800887e:	f000 80aa 	beq.w	80089d6 <_vfiprintf_r+0x20e>
 8008882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008884:	445a      	add	r2, fp
 8008886:	9209      	str	r2, [sp, #36]	; 0x24
 8008888:	f89a 3000 	ldrb.w	r3, [sl]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 80a2 	beq.w	80089d6 <_vfiprintf_r+0x20e>
 8008892:	2300      	movs	r3, #0
 8008894:	f04f 32ff 	mov.w	r2, #4294967295
 8008898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800889c:	f10a 0a01 	add.w	sl, sl, #1
 80088a0:	9304      	str	r3, [sp, #16]
 80088a2:	9307      	str	r3, [sp, #28]
 80088a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088a8:	931a      	str	r3, [sp, #104]	; 0x68
 80088aa:	4654      	mov	r4, sl
 80088ac:	2205      	movs	r2, #5
 80088ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b2:	4858      	ldr	r0, [pc, #352]	; (8008a14 <_vfiprintf_r+0x24c>)
 80088b4:	f7f7 fc94 	bl	80001e0 <memchr>
 80088b8:	9a04      	ldr	r2, [sp, #16]
 80088ba:	b9d8      	cbnz	r0, 80088f4 <_vfiprintf_r+0x12c>
 80088bc:	06d1      	lsls	r1, r2, #27
 80088be:	bf44      	itt	mi
 80088c0:	2320      	movmi	r3, #32
 80088c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c6:	0713      	lsls	r3, r2, #28
 80088c8:	bf44      	itt	mi
 80088ca:	232b      	movmi	r3, #43	; 0x2b
 80088cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d0:	f89a 3000 	ldrb.w	r3, [sl]
 80088d4:	2b2a      	cmp	r3, #42	; 0x2a
 80088d6:	d015      	beq.n	8008904 <_vfiprintf_r+0x13c>
 80088d8:	9a07      	ldr	r2, [sp, #28]
 80088da:	4654      	mov	r4, sl
 80088dc:	2000      	movs	r0, #0
 80088de:	f04f 0c0a 	mov.w	ip, #10
 80088e2:	4621      	mov	r1, r4
 80088e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088e8:	3b30      	subs	r3, #48	; 0x30
 80088ea:	2b09      	cmp	r3, #9
 80088ec:	d94e      	bls.n	800898c <_vfiprintf_r+0x1c4>
 80088ee:	b1b0      	cbz	r0, 800891e <_vfiprintf_r+0x156>
 80088f0:	9207      	str	r2, [sp, #28]
 80088f2:	e014      	b.n	800891e <_vfiprintf_r+0x156>
 80088f4:	eba0 0308 	sub.w	r3, r0, r8
 80088f8:	fa09 f303 	lsl.w	r3, r9, r3
 80088fc:	4313      	orrs	r3, r2
 80088fe:	9304      	str	r3, [sp, #16]
 8008900:	46a2      	mov	sl, r4
 8008902:	e7d2      	b.n	80088aa <_vfiprintf_r+0xe2>
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	1d19      	adds	r1, r3, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	9103      	str	r1, [sp, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	bfbb      	ittet	lt
 8008910:	425b      	neglt	r3, r3
 8008912:	f042 0202 	orrlt.w	r2, r2, #2
 8008916:	9307      	strge	r3, [sp, #28]
 8008918:	9307      	strlt	r3, [sp, #28]
 800891a:	bfb8      	it	lt
 800891c:	9204      	strlt	r2, [sp, #16]
 800891e:	7823      	ldrb	r3, [r4, #0]
 8008920:	2b2e      	cmp	r3, #46	; 0x2e
 8008922:	d10c      	bne.n	800893e <_vfiprintf_r+0x176>
 8008924:	7863      	ldrb	r3, [r4, #1]
 8008926:	2b2a      	cmp	r3, #42	; 0x2a
 8008928:	d135      	bne.n	8008996 <_vfiprintf_r+0x1ce>
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	1d1a      	adds	r2, r3, #4
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	9203      	str	r2, [sp, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	bfb8      	it	lt
 8008936:	f04f 33ff 	movlt.w	r3, #4294967295
 800893a:	3402      	adds	r4, #2
 800893c:	9305      	str	r3, [sp, #20]
 800893e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a24 <_vfiprintf_r+0x25c>
 8008942:	7821      	ldrb	r1, [r4, #0]
 8008944:	2203      	movs	r2, #3
 8008946:	4650      	mov	r0, sl
 8008948:	f7f7 fc4a 	bl	80001e0 <memchr>
 800894c:	b140      	cbz	r0, 8008960 <_vfiprintf_r+0x198>
 800894e:	2340      	movs	r3, #64	; 0x40
 8008950:	eba0 000a 	sub.w	r0, r0, sl
 8008954:	fa03 f000 	lsl.w	r0, r3, r0
 8008958:	9b04      	ldr	r3, [sp, #16]
 800895a:	4303      	orrs	r3, r0
 800895c:	3401      	adds	r4, #1
 800895e:	9304      	str	r3, [sp, #16]
 8008960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008964:	482c      	ldr	r0, [pc, #176]	; (8008a18 <_vfiprintf_r+0x250>)
 8008966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800896a:	2206      	movs	r2, #6
 800896c:	f7f7 fc38 	bl	80001e0 <memchr>
 8008970:	2800      	cmp	r0, #0
 8008972:	d03f      	beq.n	80089f4 <_vfiprintf_r+0x22c>
 8008974:	4b29      	ldr	r3, [pc, #164]	; (8008a1c <_vfiprintf_r+0x254>)
 8008976:	bb1b      	cbnz	r3, 80089c0 <_vfiprintf_r+0x1f8>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	3307      	adds	r3, #7
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	3308      	adds	r3, #8
 8008982:	9303      	str	r3, [sp, #12]
 8008984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008986:	443b      	add	r3, r7
 8008988:	9309      	str	r3, [sp, #36]	; 0x24
 800898a:	e767      	b.n	800885c <_vfiprintf_r+0x94>
 800898c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008990:	460c      	mov	r4, r1
 8008992:	2001      	movs	r0, #1
 8008994:	e7a5      	b.n	80088e2 <_vfiprintf_r+0x11a>
 8008996:	2300      	movs	r3, #0
 8008998:	3401      	adds	r4, #1
 800899a:	9305      	str	r3, [sp, #20]
 800899c:	4619      	mov	r1, r3
 800899e:	f04f 0c0a 	mov.w	ip, #10
 80089a2:	4620      	mov	r0, r4
 80089a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a8:	3a30      	subs	r2, #48	; 0x30
 80089aa:	2a09      	cmp	r2, #9
 80089ac:	d903      	bls.n	80089b6 <_vfiprintf_r+0x1ee>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0c5      	beq.n	800893e <_vfiprintf_r+0x176>
 80089b2:	9105      	str	r1, [sp, #20]
 80089b4:	e7c3      	b.n	800893e <_vfiprintf_r+0x176>
 80089b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ba:	4604      	mov	r4, r0
 80089bc:	2301      	movs	r3, #1
 80089be:	e7f0      	b.n	80089a2 <_vfiprintf_r+0x1da>
 80089c0:	ab03      	add	r3, sp, #12
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	462a      	mov	r2, r5
 80089c6:	4b16      	ldr	r3, [pc, #88]	; (8008a20 <_vfiprintf_r+0x258>)
 80089c8:	a904      	add	r1, sp, #16
 80089ca:	4630      	mov	r0, r6
 80089cc:	f3af 8000 	nop.w
 80089d0:	4607      	mov	r7, r0
 80089d2:	1c78      	adds	r0, r7, #1
 80089d4:	d1d6      	bne.n	8008984 <_vfiprintf_r+0x1bc>
 80089d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089d8:	07d9      	lsls	r1, r3, #31
 80089da:	d405      	bmi.n	80089e8 <_vfiprintf_r+0x220>
 80089dc:	89ab      	ldrh	r3, [r5, #12]
 80089de:	059a      	lsls	r2, r3, #22
 80089e0:	d402      	bmi.n	80089e8 <_vfiprintf_r+0x220>
 80089e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089e4:	f000 fc45 	bl	8009272 <__retarget_lock_release_recursive>
 80089e8:	89ab      	ldrh	r3, [r5, #12]
 80089ea:	065b      	lsls	r3, r3, #25
 80089ec:	f53f af12 	bmi.w	8008814 <_vfiprintf_r+0x4c>
 80089f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089f2:	e711      	b.n	8008818 <_vfiprintf_r+0x50>
 80089f4:	ab03      	add	r3, sp, #12
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	462a      	mov	r2, r5
 80089fa:	4b09      	ldr	r3, [pc, #36]	; (8008a20 <_vfiprintf_r+0x258>)
 80089fc:	a904      	add	r1, sp, #16
 80089fe:	4630      	mov	r0, r6
 8008a00:	f000 f880 	bl	8008b04 <_printf_i>
 8008a04:	e7e4      	b.n	80089d0 <_vfiprintf_r+0x208>
 8008a06:	bf00      	nop
 8008a08:	0800a014 	.word	0x0800a014
 8008a0c:	0800a034 	.word	0x0800a034
 8008a10:	08009ff4 	.word	0x08009ff4
 8008a14:	08009fbe 	.word	0x08009fbe
 8008a18:	08009fc8 	.word	0x08009fc8
 8008a1c:	00000000 	.word	0x00000000
 8008a20:	080087a3 	.word	0x080087a3
 8008a24:	08009fc4 	.word	0x08009fc4

08008a28 <_printf_common>:
 8008a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	4699      	mov	r9, r3
 8008a30:	688a      	ldr	r2, [r1, #8]
 8008a32:	690b      	ldr	r3, [r1, #16]
 8008a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	bfb8      	it	lt
 8008a3c:	4613      	movlt	r3, r2
 8008a3e:	6033      	str	r3, [r6, #0]
 8008a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a44:	4607      	mov	r7, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	b10a      	cbz	r2, 8008a4e <_printf_common+0x26>
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	6033      	str	r3, [r6, #0]
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	0699      	lsls	r1, r3, #26
 8008a52:	bf42      	ittt	mi
 8008a54:	6833      	ldrmi	r3, [r6, #0]
 8008a56:	3302      	addmi	r3, #2
 8008a58:	6033      	strmi	r3, [r6, #0]
 8008a5a:	6825      	ldr	r5, [r4, #0]
 8008a5c:	f015 0506 	ands.w	r5, r5, #6
 8008a60:	d106      	bne.n	8008a70 <_printf_common+0x48>
 8008a62:	f104 0a19 	add.w	sl, r4, #25
 8008a66:	68e3      	ldr	r3, [r4, #12]
 8008a68:	6832      	ldr	r2, [r6, #0]
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	42ab      	cmp	r3, r5
 8008a6e:	dc26      	bgt.n	8008abe <_printf_common+0x96>
 8008a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a74:	1e13      	subs	r3, r2, #0
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	bf18      	it	ne
 8008a7a:	2301      	movne	r3, #1
 8008a7c:	0692      	lsls	r2, r2, #26
 8008a7e:	d42b      	bmi.n	8008ad8 <_printf_common+0xb0>
 8008a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a84:	4649      	mov	r1, r9
 8008a86:	4638      	mov	r0, r7
 8008a88:	47c0      	blx	r8
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	d01e      	beq.n	8008acc <_printf_common+0xa4>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	68e5      	ldr	r5, [r4, #12]
 8008a92:	6832      	ldr	r2, [r6, #0]
 8008a94:	f003 0306 	and.w	r3, r3, #6
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	bf08      	it	eq
 8008a9c:	1aad      	subeq	r5, r5, r2
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	6922      	ldr	r2, [r4, #16]
 8008aa2:	bf0c      	ite	eq
 8008aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aa8:	2500      	movne	r5, #0
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	bfc4      	itt	gt
 8008aae:	1a9b      	subgt	r3, r3, r2
 8008ab0:	18ed      	addgt	r5, r5, r3
 8008ab2:	2600      	movs	r6, #0
 8008ab4:	341a      	adds	r4, #26
 8008ab6:	42b5      	cmp	r5, r6
 8008ab8:	d11a      	bne.n	8008af0 <_printf_common+0xc8>
 8008aba:	2000      	movs	r0, #0
 8008abc:	e008      	b.n	8008ad0 <_printf_common+0xa8>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	4652      	mov	r2, sl
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	47c0      	blx	r8
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d103      	bne.n	8008ad4 <_printf_common+0xac>
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad4:	3501      	adds	r5, #1
 8008ad6:	e7c6      	b.n	8008a66 <_printf_common+0x3e>
 8008ad8:	18e1      	adds	r1, r4, r3
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	2030      	movs	r0, #48	; 0x30
 8008ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ae2:	4422      	add	r2, r4
 8008ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aec:	3302      	adds	r3, #2
 8008aee:	e7c7      	b.n	8008a80 <_printf_common+0x58>
 8008af0:	2301      	movs	r3, #1
 8008af2:	4622      	mov	r2, r4
 8008af4:	4649      	mov	r1, r9
 8008af6:	4638      	mov	r0, r7
 8008af8:	47c0      	blx	r8
 8008afa:	3001      	adds	r0, #1
 8008afc:	d0e6      	beq.n	8008acc <_printf_common+0xa4>
 8008afe:	3601      	adds	r6, #1
 8008b00:	e7d9      	b.n	8008ab6 <_printf_common+0x8e>
	...

08008b04 <_printf_i>:
 8008b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b08:	7e0f      	ldrb	r7, [r1, #24]
 8008b0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b0c:	2f78      	cmp	r7, #120	; 0x78
 8008b0e:	4691      	mov	r9, r2
 8008b10:	4680      	mov	r8, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	469a      	mov	sl, r3
 8008b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b1a:	d807      	bhi.n	8008b2c <_printf_i+0x28>
 8008b1c:	2f62      	cmp	r7, #98	; 0x62
 8008b1e:	d80a      	bhi.n	8008b36 <_printf_i+0x32>
 8008b20:	2f00      	cmp	r7, #0
 8008b22:	f000 80d8 	beq.w	8008cd6 <_printf_i+0x1d2>
 8008b26:	2f58      	cmp	r7, #88	; 0x58
 8008b28:	f000 80a3 	beq.w	8008c72 <_printf_i+0x16e>
 8008b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b34:	e03a      	b.n	8008bac <_printf_i+0xa8>
 8008b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b3a:	2b15      	cmp	r3, #21
 8008b3c:	d8f6      	bhi.n	8008b2c <_printf_i+0x28>
 8008b3e:	a101      	add	r1, pc, #4	; (adr r1, 8008b44 <_printf_i+0x40>)
 8008b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b44:	08008b9d 	.word	0x08008b9d
 8008b48:	08008bb1 	.word	0x08008bb1
 8008b4c:	08008b2d 	.word	0x08008b2d
 8008b50:	08008b2d 	.word	0x08008b2d
 8008b54:	08008b2d 	.word	0x08008b2d
 8008b58:	08008b2d 	.word	0x08008b2d
 8008b5c:	08008bb1 	.word	0x08008bb1
 8008b60:	08008b2d 	.word	0x08008b2d
 8008b64:	08008b2d 	.word	0x08008b2d
 8008b68:	08008b2d 	.word	0x08008b2d
 8008b6c:	08008b2d 	.word	0x08008b2d
 8008b70:	08008cbd 	.word	0x08008cbd
 8008b74:	08008be1 	.word	0x08008be1
 8008b78:	08008c9f 	.word	0x08008c9f
 8008b7c:	08008b2d 	.word	0x08008b2d
 8008b80:	08008b2d 	.word	0x08008b2d
 8008b84:	08008cdf 	.word	0x08008cdf
 8008b88:	08008b2d 	.word	0x08008b2d
 8008b8c:	08008be1 	.word	0x08008be1
 8008b90:	08008b2d 	.word	0x08008b2d
 8008b94:	08008b2d 	.word	0x08008b2d
 8008b98:	08008ca7 	.word	0x08008ca7
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	1d1a      	adds	r2, r3, #4
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	602a      	str	r2, [r5, #0]
 8008ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bac:	2301      	movs	r3, #1
 8008bae:	e0a3      	b.n	8008cf8 <_printf_i+0x1f4>
 8008bb0:	6820      	ldr	r0, [r4, #0]
 8008bb2:	6829      	ldr	r1, [r5, #0]
 8008bb4:	0606      	lsls	r6, r0, #24
 8008bb6:	f101 0304 	add.w	r3, r1, #4
 8008bba:	d50a      	bpl.n	8008bd2 <_printf_i+0xce>
 8008bbc:	680e      	ldr	r6, [r1, #0]
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	2e00      	cmp	r6, #0
 8008bc2:	da03      	bge.n	8008bcc <_printf_i+0xc8>
 8008bc4:	232d      	movs	r3, #45	; 0x2d
 8008bc6:	4276      	negs	r6, r6
 8008bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bcc:	485e      	ldr	r0, [pc, #376]	; (8008d48 <_printf_i+0x244>)
 8008bce:	230a      	movs	r3, #10
 8008bd0:	e019      	b.n	8008c06 <_printf_i+0x102>
 8008bd2:	680e      	ldr	r6, [r1, #0]
 8008bd4:	602b      	str	r3, [r5, #0]
 8008bd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bda:	bf18      	it	ne
 8008bdc:	b236      	sxthne	r6, r6
 8008bde:	e7ef      	b.n	8008bc0 <_printf_i+0xbc>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	6820      	ldr	r0, [r4, #0]
 8008be4:	1d19      	adds	r1, r3, #4
 8008be6:	6029      	str	r1, [r5, #0]
 8008be8:	0601      	lsls	r1, r0, #24
 8008bea:	d501      	bpl.n	8008bf0 <_printf_i+0xec>
 8008bec:	681e      	ldr	r6, [r3, #0]
 8008bee:	e002      	b.n	8008bf6 <_printf_i+0xf2>
 8008bf0:	0646      	lsls	r6, r0, #25
 8008bf2:	d5fb      	bpl.n	8008bec <_printf_i+0xe8>
 8008bf4:	881e      	ldrh	r6, [r3, #0]
 8008bf6:	4854      	ldr	r0, [pc, #336]	; (8008d48 <_printf_i+0x244>)
 8008bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8008bfa:	bf0c      	ite	eq
 8008bfc:	2308      	moveq	r3, #8
 8008bfe:	230a      	movne	r3, #10
 8008c00:	2100      	movs	r1, #0
 8008c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c06:	6865      	ldr	r5, [r4, #4]
 8008c08:	60a5      	str	r5, [r4, #8]
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	bfa2      	ittt	ge
 8008c0e:	6821      	ldrge	r1, [r4, #0]
 8008c10:	f021 0104 	bicge.w	r1, r1, #4
 8008c14:	6021      	strge	r1, [r4, #0]
 8008c16:	b90e      	cbnz	r6, 8008c1c <_printf_i+0x118>
 8008c18:	2d00      	cmp	r5, #0
 8008c1a:	d04d      	beq.n	8008cb8 <_printf_i+0x1b4>
 8008c1c:	4615      	mov	r5, r2
 8008c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c22:	fb03 6711 	mls	r7, r3, r1, r6
 8008c26:	5dc7      	ldrb	r7, [r0, r7]
 8008c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c2c:	4637      	mov	r7, r6
 8008c2e:	42bb      	cmp	r3, r7
 8008c30:	460e      	mov	r6, r1
 8008c32:	d9f4      	bls.n	8008c1e <_printf_i+0x11a>
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d10b      	bne.n	8008c50 <_printf_i+0x14c>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	07de      	lsls	r6, r3, #31
 8008c3c:	d508      	bpl.n	8008c50 <_printf_i+0x14c>
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	6861      	ldr	r1, [r4, #4]
 8008c42:	4299      	cmp	r1, r3
 8008c44:	bfde      	ittt	le
 8008c46:	2330      	movle	r3, #48	; 0x30
 8008c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c50:	1b52      	subs	r2, r2, r5
 8008c52:	6122      	str	r2, [r4, #16]
 8008c54:	f8cd a000 	str.w	sl, [sp]
 8008c58:	464b      	mov	r3, r9
 8008c5a:	aa03      	add	r2, sp, #12
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	4640      	mov	r0, r8
 8008c60:	f7ff fee2 	bl	8008a28 <_printf_common>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d14c      	bne.n	8008d02 <_printf_i+0x1fe>
 8008c68:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6c:	b004      	add	sp, #16
 8008c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c72:	4835      	ldr	r0, [pc, #212]	; (8008d48 <_printf_i+0x244>)
 8008c74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c78:	6829      	ldr	r1, [r5, #0]
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c80:	6029      	str	r1, [r5, #0]
 8008c82:	061d      	lsls	r5, r3, #24
 8008c84:	d514      	bpl.n	8008cb0 <_printf_i+0x1ac>
 8008c86:	07df      	lsls	r7, r3, #31
 8008c88:	bf44      	itt	mi
 8008c8a:	f043 0320 	orrmi.w	r3, r3, #32
 8008c8e:	6023      	strmi	r3, [r4, #0]
 8008c90:	b91e      	cbnz	r6, 8008c9a <_printf_i+0x196>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	f023 0320 	bic.w	r3, r3, #32
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	2310      	movs	r3, #16
 8008c9c:	e7b0      	b.n	8008c00 <_printf_i+0xfc>
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	f043 0320 	orr.w	r3, r3, #32
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	2378      	movs	r3, #120	; 0x78
 8008ca8:	4828      	ldr	r0, [pc, #160]	; (8008d4c <_printf_i+0x248>)
 8008caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cae:	e7e3      	b.n	8008c78 <_printf_i+0x174>
 8008cb0:	0659      	lsls	r1, r3, #25
 8008cb2:	bf48      	it	mi
 8008cb4:	b2b6      	uxthmi	r6, r6
 8008cb6:	e7e6      	b.n	8008c86 <_printf_i+0x182>
 8008cb8:	4615      	mov	r5, r2
 8008cba:	e7bb      	b.n	8008c34 <_printf_i+0x130>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	6826      	ldr	r6, [r4, #0]
 8008cc0:	6961      	ldr	r1, [r4, #20]
 8008cc2:	1d18      	adds	r0, r3, #4
 8008cc4:	6028      	str	r0, [r5, #0]
 8008cc6:	0635      	lsls	r5, r6, #24
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	d501      	bpl.n	8008cd0 <_printf_i+0x1cc>
 8008ccc:	6019      	str	r1, [r3, #0]
 8008cce:	e002      	b.n	8008cd6 <_printf_i+0x1d2>
 8008cd0:	0670      	lsls	r0, r6, #25
 8008cd2:	d5fb      	bpl.n	8008ccc <_printf_i+0x1c8>
 8008cd4:	8019      	strh	r1, [r3, #0]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6123      	str	r3, [r4, #16]
 8008cda:	4615      	mov	r5, r2
 8008cdc:	e7ba      	b.n	8008c54 <_printf_i+0x150>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	1d1a      	adds	r2, r3, #4
 8008ce2:	602a      	str	r2, [r5, #0]
 8008ce4:	681d      	ldr	r5, [r3, #0]
 8008ce6:	6862      	ldr	r2, [r4, #4]
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4628      	mov	r0, r5
 8008cec:	f7f7 fa78 	bl	80001e0 <memchr>
 8008cf0:	b108      	cbz	r0, 8008cf6 <_printf_i+0x1f2>
 8008cf2:	1b40      	subs	r0, r0, r5
 8008cf4:	6060      	str	r0, [r4, #4]
 8008cf6:	6863      	ldr	r3, [r4, #4]
 8008cf8:	6123      	str	r3, [r4, #16]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d00:	e7a8      	b.n	8008c54 <_printf_i+0x150>
 8008d02:	6923      	ldr	r3, [r4, #16]
 8008d04:	462a      	mov	r2, r5
 8008d06:	4649      	mov	r1, r9
 8008d08:	4640      	mov	r0, r8
 8008d0a:	47d0      	blx	sl
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d0ab      	beq.n	8008c68 <_printf_i+0x164>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	079b      	lsls	r3, r3, #30
 8008d14:	d413      	bmi.n	8008d3e <_printf_i+0x23a>
 8008d16:	68e0      	ldr	r0, [r4, #12]
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	4298      	cmp	r0, r3
 8008d1c:	bfb8      	it	lt
 8008d1e:	4618      	movlt	r0, r3
 8008d20:	e7a4      	b.n	8008c6c <_printf_i+0x168>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4632      	mov	r2, r6
 8008d26:	4649      	mov	r1, r9
 8008d28:	4640      	mov	r0, r8
 8008d2a:	47d0      	blx	sl
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d09b      	beq.n	8008c68 <_printf_i+0x164>
 8008d30:	3501      	adds	r5, #1
 8008d32:	68e3      	ldr	r3, [r4, #12]
 8008d34:	9903      	ldr	r1, [sp, #12]
 8008d36:	1a5b      	subs	r3, r3, r1
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	dcf2      	bgt.n	8008d22 <_printf_i+0x21e>
 8008d3c:	e7eb      	b.n	8008d16 <_printf_i+0x212>
 8008d3e:	2500      	movs	r5, #0
 8008d40:	f104 0619 	add.w	r6, r4, #25
 8008d44:	e7f5      	b.n	8008d32 <_printf_i+0x22e>
 8008d46:	bf00      	nop
 8008d48:	08009fcf 	.word	0x08009fcf
 8008d4c:	08009fe0 	.word	0x08009fe0

08008d50 <_sbrk_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d06      	ldr	r5, [pc, #24]	; (8008d6c <_sbrk_r+0x1c>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	f7fa fb88 	bl	8003470 <_sbrk>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_sbrk_r+0x1a>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_sbrk_r+0x1a>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	20000a54 	.word	0x20000a54

08008d70 <__swbuf_r>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	460e      	mov	r6, r1
 8008d74:	4614      	mov	r4, r2
 8008d76:	4605      	mov	r5, r0
 8008d78:	b118      	cbz	r0, 8008d82 <__swbuf_r+0x12>
 8008d7a:	6983      	ldr	r3, [r0, #24]
 8008d7c:	b90b      	cbnz	r3, 8008d82 <__swbuf_r+0x12>
 8008d7e:	f000 f9d9 	bl	8009134 <__sinit>
 8008d82:	4b21      	ldr	r3, [pc, #132]	; (8008e08 <__swbuf_r+0x98>)
 8008d84:	429c      	cmp	r4, r3
 8008d86:	d12b      	bne.n	8008de0 <__swbuf_r+0x70>
 8008d88:	686c      	ldr	r4, [r5, #4]
 8008d8a:	69a3      	ldr	r3, [r4, #24]
 8008d8c:	60a3      	str	r3, [r4, #8]
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	071a      	lsls	r2, r3, #28
 8008d92:	d52f      	bpl.n	8008df4 <__swbuf_r+0x84>
 8008d94:	6923      	ldr	r3, [r4, #16]
 8008d96:	b36b      	cbz	r3, 8008df4 <__swbuf_r+0x84>
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	6820      	ldr	r0, [r4, #0]
 8008d9c:	1ac0      	subs	r0, r0, r3
 8008d9e:	6963      	ldr	r3, [r4, #20]
 8008da0:	b2f6      	uxtb	r6, r6
 8008da2:	4283      	cmp	r3, r0
 8008da4:	4637      	mov	r7, r6
 8008da6:	dc04      	bgt.n	8008db2 <__swbuf_r+0x42>
 8008da8:	4621      	mov	r1, r4
 8008daa:	4628      	mov	r0, r5
 8008dac:	f000 f92e 	bl	800900c <_fflush_r>
 8008db0:	bb30      	cbnz	r0, 8008e00 <__swbuf_r+0x90>
 8008db2:	68a3      	ldr	r3, [r4, #8]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	60a3      	str	r3, [r4, #8]
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	6022      	str	r2, [r4, #0]
 8008dbe:	701e      	strb	r6, [r3, #0]
 8008dc0:	6963      	ldr	r3, [r4, #20]
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	4283      	cmp	r3, r0
 8008dc6:	d004      	beq.n	8008dd2 <__swbuf_r+0x62>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	07db      	lsls	r3, r3, #31
 8008dcc:	d506      	bpl.n	8008ddc <__swbuf_r+0x6c>
 8008dce:	2e0a      	cmp	r6, #10
 8008dd0:	d104      	bne.n	8008ddc <__swbuf_r+0x6c>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f000 f919 	bl	800900c <_fflush_r>
 8008dda:	b988      	cbnz	r0, 8008e00 <__swbuf_r+0x90>
 8008ddc:	4638      	mov	r0, r7
 8008dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de0:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <__swbuf_r+0x9c>)
 8008de2:	429c      	cmp	r4, r3
 8008de4:	d101      	bne.n	8008dea <__swbuf_r+0x7a>
 8008de6:	68ac      	ldr	r4, [r5, #8]
 8008de8:	e7cf      	b.n	8008d8a <__swbuf_r+0x1a>
 8008dea:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <__swbuf_r+0xa0>)
 8008dec:	429c      	cmp	r4, r3
 8008dee:	bf08      	it	eq
 8008df0:	68ec      	ldreq	r4, [r5, #12]
 8008df2:	e7ca      	b.n	8008d8a <__swbuf_r+0x1a>
 8008df4:	4621      	mov	r1, r4
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 f80c 	bl	8008e14 <__swsetup_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d0cb      	beq.n	8008d98 <__swbuf_r+0x28>
 8008e00:	f04f 37ff 	mov.w	r7, #4294967295
 8008e04:	e7ea      	b.n	8008ddc <__swbuf_r+0x6c>
 8008e06:	bf00      	nop
 8008e08:	0800a014 	.word	0x0800a014
 8008e0c:	0800a034 	.word	0x0800a034
 8008e10:	08009ff4 	.word	0x08009ff4

08008e14 <__swsetup_r>:
 8008e14:	4b32      	ldr	r3, [pc, #200]	; (8008ee0 <__swsetup_r+0xcc>)
 8008e16:	b570      	push	{r4, r5, r6, lr}
 8008e18:	681d      	ldr	r5, [r3, #0]
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	b125      	cbz	r5, 8008e2a <__swsetup_r+0x16>
 8008e20:	69ab      	ldr	r3, [r5, #24]
 8008e22:	b913      	cbnz	r3, 8008e2a <__swsetup_r+0x16>
 8008e24:	4628      	mov	r0, r5
 8008e26:	f000 f985 	bl	8009134 <__sinit>
 8008e2a:	4b2e      	ldr	r3, [pc, #184]	; (8008ee4 <__swsetup_r+0xd0>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	d10f      	bne.n	8008e50 <__swsetup_r+0x3c>
 8008e30:	686c      	ldr	r4, [r5, #4]
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e38:	0719      	lsls	r1, r3, #28
 8008e3a:	d42c      	bmi.n	8008e96 <__swsetup_r+0x82>
 8008e3c:	06dd      	lsls	r5, r3, #27
 8008e3e:	d411      	bmi.n	8008e64 <__swsetup_r+0x50>
 8008e40:	2309      	movs	r3, #9
 8008e42:	6033      	str	r3, [r6, #0]
 8008e44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e48:	81a3      	strh	r3, [r4, #12]
 8008e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4e:	e03e      	b.n	8008ece <__swsetup_r+0xba>
 8008e50:	4b25      	ldr	r3, [pc, #148]	; (8008ee8 <__swsetup_r+0xd4>)
 8008e52:	429c      	cmp	r4, r3
 8008e54:	d101      	bne.n	8008e5a <__swsetup_r+0x46>
 8008e56:	68ac      	ldr	r4, [r5, #8]
 8008e58:	e7eb      	b.n	8008e32 <__swsetup_r+0x1e>
 8008e5a:	4b24      	ldr	r3, [pc, #144]	; (8008eec <__swsetup_r+0xd8>)
 8008e5c:	429c      	cmp	r4, r3
 8008e5e:	bf08      	it	eq
 8008e60:	68ec      	ldreq	r4, [r5, #12]
 8008e62:	e7e6      	b.n	8008e32 <__swsetup_r+0x1e>
 8008e64:	0758      	lsls	r0, r3, #29
 8008e66:	d512      	bpl.n	8008e8e <__swsetup_r+0x7a>
 8008e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e6a:	b141      	cbz	r1, 8008e7e <__swsetup_r+0x6a>
 8008e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e70:	4299      	cmp	r1, r3
 8008e72:	d002      	beq.n	8008e7a <__swsetup_r+0x66>
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff fa41 	bl	80082fc <_free_r>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	2300      	movs	r3, #0
 8008e88:	6063      	str	r3, [r4, #4]
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	f043 0308 	orr.w	r3, r3, #8
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	b94b      	cbnz	r3, 8008eae <__swsetup_r+0x9a>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea4:	d003      	beq.n	8008eae <__swsetup_r+0x9a>
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f000 fa09 	bl	80092c0 <__smakebuf_r>
 8008eae:	89a0      	ldrh	r0, [r4, #12]
 8008eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eb4:	f010 0301 	ands.w	r3, r0, #1
 8008eb8:	d00a      	beq.n	8008ed0 <__swsetup_r+0xbc>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60a3      	str	r3, [r4, #8]
 8008ebe:	6963      	ldr	r3, [r4, #20]
 8008ec0:	425b      	negs	r3, r3
 8008ec2:	61a3      	str	r3, [r4, #24]
 8008ec4:	6923      	ldr	r3, [r4, #16]
 8008ec6:	b943      	cbnz	r3, 8008eda <__swsetup_r+0xc6>
 8008ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ecc:	d1ba      	bne.n	8008e44 <__swsetup_r+0x30>
 8008ece:	bd70      	pop	{r4, r5, r6, pc}
 8008ed0:	0781      	lsls	r1, r0, #30
 8008ed2:	bf58      	it	pl
 8008ed4:	6963      	ldrpl	r3, [r4, #20]
 8008ed6:	60a3      	str	r3, [r4, #8]
 8008ed8:	e7f4      	b.n	8008ec4 <__swsetup_r+0xb0>
 8008eda:	2000      	movs	r0, #0
 8008edc:	e7f7      	b.n	8008ece <__swsetup_r+0xba>
 8008ede:	bf00      	nop
 8008ee0:	200000d4 	.word	0x200000d4
 8008ee4:	0800a014 	.word	0x0800a014
 8008ee8:	0800a034 	.word	0x0800a034
 8008eec:	08009ff4 	.word	0x08009ff4

08008ef0 <abort>:
 8008ef0:	b508      	push	{r3, lr}
 8008ef2:	2006      	movs	r0, #6
 8008ef4:	f000 faa2 	bl	800943c <raise>
 8008ef8:	2001      	movs	r0, #1
 8008efa:	f7fa fa41 	bl	8003380 <_exit>
	...

08008f00 <__sflush_r>:
 8008f00:	898a      	ldrh	r2, [r1, #12]
 8008f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f06:	4605      	mov	r5, r0
 8008f08:	0710      	lsls	r0, r2, #28
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	d458      	bmi.n	8008fc0 <__sflush_r+0xc0>
 8008f0e:	684b      	ldr	r3, [r1, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dc05      	bgt.n	8008f20 <__sflush_r+0x20>
 8008f14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dc02      	bgt.n	8008f20 <__sflush_r+0x20>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	d0f9      	beq.n	8008f1a <__sflush_r+0x1a>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f2c:	682f      	ldr	r7, [r5, #0]
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	d032      	beq.n	8008f98 <__sflush_r+0x98>
 8008f32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	075a      	lsls	r2, r3, #29
 8008f38:	d505      	bpl.n	8008f46 <__sflush_r+0x46>
 8008f3a:	6863      	ldr	r3, [r4, #4]
 8008f3c:	1ac0      	subs	r0, r0, r3
 8008f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f40:	b10b      	cbz	r3, 8008f46 <__sflush_r+0x46>
 8008f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f44:	1ac0      	subs	r0, r0, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	4602      	mov	r2, r0
 8008f4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f4c:	6a21      	ldr	r1, [r4, #32]
 8008f4e:	4628      	mov	r0, r5
 8008f50:	47b0      	blx	r6
 8008f52:	1c43      	adds	r3, r0, #1
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	d106      	bne.n	8008f66 <__sflush_r+0x66>
 8008f58:	6829      	ldr	r1, [r5, #0]
 8008f5a:	291d      	cmp	r1, #29
 8008f5c:	d82c      	bhi.n	8008fb8 <__sflush_r+0xb8>
 8008f5e:	4a2a      	ldr	r2, [pc, #168]	; (8009008 <__sflush_r+0x108>)
 8008f60:	40ca      	lsrs	r2, r1
 8008f62:	07d6      	lsls	r6, r2, #31
 8008f64:	d528      	bpl.n	8008fb8 <__sflush_r+0xb8>
 8008f66:	2200      	movs	r2, #0
 8008f68:	6062      	str	r2, [r4, #4]
 8008f6a:	04d9      	lsls	r1, r3, #19
 8008f6c:	6922      	ldr	r2, [r4, #16]
 8008f6e:	6022      	str	r2, [r4, #0]
 8008f70:	d504      	bpl.n	8008f7c <__sflush_r+0x7c>
 8008f72:	1c42      	adds	r2, r0, #1
 8008f74:	d101      	bne.n	8008f7a <__sflush_r+0x7a>
 8008f76:	682b      	ldr	r3, [r5, #0]
 8008f78:	b903      	cbnz	r3, 8008f7c <__sflush_r+0x7c>
 8008f7a:	6560      	str	r0, [r4, #84]	; 0x54
 8008f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f7e:	602f      	str	r7, [r5, #0]
 8008f80:	2900      	cmp	r1, #0
 8008f82:	d0ca      	beq.n	8008f1a <__sflush_r+0x1a>
 8008f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f88:	4299      	cmp	r1, r3
 8008f8a:	d002      	beq.n	8008f92 <__sflush_r+0x92>
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f7ff f9b5 	bl	80082fc <_free_r>
 8008f92:	2000      	movs	r0, #0
 8008f94:	6360      	str	r0, [r4, #52]	; 0x34
 8008f96:	e7c1      	b.n	8008f1c <__sflush_r+0x1c>
 8008f98:	6a21      	ldr	r1, [r4, #32]
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b0      	blx	r6
 8008fa0:	1c41      	adds	r1, r0, #1
 8008fa2:	d1c7      	bne.n	8008f34 <__sflush_r+0x34>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0c4      	beq.n	8008f34 <__sflush_r+0x34>
 8008faa:	2b1d      	cmp	r3, #29
 8008fac:	d001      	beq.n	8008fb2 <__sflush_r+0xb2>
 8008fae:	2b16      	cmp	r3, #22
 8008fb0:	d101      	bne.n	8008fb6 <__sflush_r+0xb6>
 8008fb2:	602f      	str	r7, [r5, #0]
 8008fb4:	e7b1      	b.n	8008f1a <__sflush_r+0x1a>
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	e7ad      	b.n	8008f1c <__sflush_r+0x1c>
 8008fc0:	690f      	ldr	r7, [r1, #16]
 8008fc2:	2f00      	cmp	r7, #0
 8008fc4:	d0a9      	beq.n	8008f1a <__sflush_r+0x1a>
 8008fc6:	0793      	lsls	r3, r2, #30
 8008fc8:	680e      	ldr	r6, [r1, #0]
 8008fca:	bf08      	it	eq
 8008fcc:	694b      	ldreq	r3, [r1, #20]
 8008fce:	600f      	str	r7, [r1, #0]
 8008fd0:	bf18      	it	ne
 8008fd2:	2300      	movne	r3, #0
 8008fd4:	eba6 0807 	sub.w	r8, r6, r7
 8008fd8:	608b      	str	r3, [r1, #8]
 8008fda:	f1b8 0f00 	cmp.w	r8, #0
 8008fde:	dd9c      	ble.n	8008f1a <__sflush_r+0x1a>
 8008fe0:	6a21      	ldr	r1, [r4, #32]
 8008fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fe4:	4643      	mov	r3, r8
 8008fe6:	463a      	mov	r2, r7
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b0      	blx	r6
 8008fec:	2800      	cmp	r0, #0
 8008fee:	dc06      	bgt.n	8008ffe <__sflush_r+0xfe>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffc:	e78e      	b.n	8008f1c <__sflush_r+0x1c>
 8008ffe:	4407      	add	r7, r0
 8009000:	eba8 0800 	sub.w	r8, r8, r0
 8009004:	e7e9      	b.n	8008fda <__sflush_r+0xda>
 8009006:	bf00      	nop
 8009008:	20400001 	.word	0x20400001

0800900c <_fflush_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	4605      	mov	r5, r0
 8009012:	460c      	mov	r4, r1
 8009014:	b913      	cbnz	r3, 800901c <_fflush_r+0x10>
 8009016:	2500      	movs	r5, #0
 8009018:	4628      	mov	r0, r5
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	b118      	cbz	r0, 8009026 <_fflush_r+0x1a>
 800901e:	6983      	ldr	r3, [r0, #24]
 8009020:	b90b      	cbnz	r3, 8009026 <_fflush_r+0x1a>
 8009022:	f000 f887 	bl	8009134 <__sinit>
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <_fflush_r+0x6c>)
 8009028:	429c      	cmp	r4, r3
 800902a:	d11b      	bne.n	8009064 <_fflush_r+0x58>
 800902c:	686c      	ldr	r4, [r5, #4]
 800902e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0ef      	beq.n	8009016 <_fflush_r+0xa>
 8009036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009038:	07d0      	lsls	r0, r2, #31
 800903a:	d404      	bmi.n	8009046 <_fflush_r+0x3a>
 800903c:	0599      	lsls	r1, r3, #22
 800903e:	d402      	bmi.n	8009046 <_fflush_r+0x3a>
 8009040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009042:	f000 f915 	bl	8009270 <__retarget_lock_acquire_recursive>
 8009046:	4628      	mov	r0, r5
 8009048:	4621      	mov	r1, r4
 800904a:	f7ff ff59 	bl	8008f00 <__sflush_r>
 800904e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009050:	07da      	lsls	r2, r3, #31
 8009052:	4605      	mov	r5, r0
 8009054:	d4e0      	bmi.n	8009018 <_fflush_r+0xc>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	059b      	lsls	r3, r3, #22
 800905a:	d4dd      	bmi.n	8009018 <_fflush_r+0xc>
 800905c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905e:	f000 f908 	bl	8009272 <__retarget_lock_release_recursive>
 8009062:	e7d9      	b.n	8009018 <_fflush_r+0xc>
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <_fflush_r+0x70>)
 8009066:	429c      	cmp	r4, r3
 8009068:	d101      	bne.n	800906e <_fflush_r+0x62>
 800906a:	68ac      	ldr	r4, [r5, #8]
 800906c:	e7df      	b.n	800902e <_fflush_r+0x22>
 800906e:	4b04      	ldr	r3, [pc, #16]	; (8009080 <_fflush_r+0x74>)
 8009070:	429c      	cmp	r4, r3
 8009072:	bf08      	it	eq
 8009074:	68ec      	ldreq	r4, [r5, #12]
 8009076:	e7da      	b.n	800902e <_fflush_r+0x22>
 8009078:	0800a014 	.word	0x0800a014
 800907c:	0800a034 	.word	0x0800a034
 8009080:	08009ff4 	.word	0x08009ff4

08009084 <std>:
 8009084:	2300      	movs	r3, #0
 8009086:	b510      	push	{r4, lr}
 8009088:	4604      	mov	r4, r0
 800908a:	e9c0 3300 	strd	r3, r3, [r0]
 800908e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009092:	6083      	str	r3, [r0, #8]
 8009094:	8181      	strh	r1, [r0, #12]
 8009096:	6643      	str	r3, [r0, #100]	; 0x64
 8009098:	81c2      	strh	r2, [r0, #14]
 800909a:	6183      	str	r3, [r0, #24]
 800909c:	4619      	mov	r1, r3
 800909e:	2208      	movs	r2, #8
 80090a0:	305c      	adds	r0, #92	; 0x5c
 80090a2:	f7ff f85f 	bl	8008164 <memset>
 80090a6:	4b05      	ldr	r3, [pc, #20]	; (80090bc <std+0x38>)
 80090a8:	6263      	str	r3, [r4, #36]	; 0x24
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <std+0x3c>)
 80090ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ae:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <std+0x40>)
 80090b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <std+0x44>)
 80090b4:	6224      	str	r4, [r4, #32]
 80090b6:	6323      	str	r3, [r4, #48]	; 0x30
 80090b8:	bd10      	pop	{r4, pc}
 80090ba:	bf00      	nop
 80090bc:	08009475 	.word	0x08009475
 80090c0:	08009497 	.word	0x08009497
 80090c4:	080094cf 	.word	0x080094cf
 80090c8:	080094f3 	.word	0x080094f3

080090cc <_cleanup_r>:
 80090cc:	4901      	ldr	r1, [pc, #4]	; (80090d4 <_cleanup_r+0x8>)
 80090ce:	f000 b8af 	b.w	8009230 <_fwalk_reent>
 80090d2:	bf00      	nop
 80090d4:	0800900d 	.word	0x0800900d

080090d8 <__sfmoreglue>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	2268      	movs	r2, #104	; 0x68
 80090dc:	1e4d      	subs	r5, r1, #1
 80090de:	4355      	muls	r5, r2
 80090e0:	460e      	mov	r6, r1
 80090e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090e6:	f7ff f975 	bl	80083d4 <_malloc_r>
 80090ea:	4604      	mov	r4, r0
 80090ec:	b140      	cbz	r0, 8009100 <__sfmoreglue+0x28>
 80090ee:	2100      	movs	r1, #0
 80090f0:	e9c0 1600 	strd	r1, r6, [r0]
 80090f4:	300c      	adds	r0, #12
 80090f6:	60a0      	str	r0, [r4, #8]
 80090f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090fc:	f7ff f832 	bl	8008164 <memset>
 8009100:	4620      	mov	r0, r4
 8009102:	bd70      	pop	{r4, r5, r6, pc}

08009104 <__sfp_lock_acquire>:
 8009104:	4801      	ldr	r0, [pc, #4]	; (800910c <__sfp_lock_acquire+0x8>)
 8009106:	f000 b8b3 	b.w	8009270 <__retarget_lock_acquire_recursive>
 800910a:	bf00      	nop
 800910c:	20000a51 	.word	0x20000a51

08009110 <__sfp_lock_release>:
 8009110:	4801      	ldr	r0, [pc, #4]	; (8009118 <__sfp_lock_release+0x8>)
 8009112:	f000 b8ae 	b.w	8009272 <__retarget_lock_release_recursive>
 8009116:	bf00      	nop
 8009118:	20000a51 	.word	0x20000a51

0800911c <__sinit_lock_acquire>:
 800911c:	4801      	ldr	r0, [pc, #4]	; (8009124 <__sinit_lock_acquire+0x8>)
 800911e:	f000 b8a7 	b.w	8009270 <__retarget_lock_acquire_recursive>
 8009122:	bf00      	nop
 8009124:	20000a52 	.word	0x20000a52

08009128 <__sinit_lock_release>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__sinit_lock_release+0x8>)
 800912a:	f000 b8a2 	b.w	8009272 <__retarget_lock_release_recursive>
 800912e:	bf00      	nop
 8009130:	20000a52 	.word	0x20000a52

08009134 <__sinit>:
 8009134:	b510      	push	{r4, lr}
 8009136:	4604      	mov	r4, r0
 8009138:	f7ff fff0 	bl	800911c <__sinit_lock_acquire>
 800913c:	69a3      	ldr	r3, [r4, #24]
 800913e:	b11b      	cbz	r3, 8009148 <__sinit+0x14>
 8009140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009144:	f7ff bff0 	b.w	8009128 <__sinit_lock_release>
 8009148:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800914c:	6523      	str	r3, [r4, #80]	; 0x50
 800914e:	4b13      	ldr	r3, [pc, #76]	; (800919c <__sinit+0x68>)
 8009150:	4a13      	ldr	r2, [pc, #76]	; (80091a0 <__sinit+0x6c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	62a2      	str	r2, [r4, #40]	; 0x28
 8009156:	42a3      	cmp	r3, r4
 8009158:	bf04      	itt	eq
 800915a:	2301      	moveq	r3, #1
 800915c:	61a3      	streq	r3, [r4, #24]
 800915e:	4620      	mov	r0, r4
 8009160:	f000 f820 	bl	80091a4 <__sfp>
 8009164:	6060      	str	r0, [r4, #4]
 8009166:	4620      	mov	r0, r4
 8009168:	f000 f81c 	bl	80091a4 <__sfp>
 800916c:	60a0      	str	r0, [r4, #8]
 800916e:	4620      	mov	r0, r4
 8009170:	f000 f818 	bl	80091a4 <__sfp>
 8009174:	2200      	movs	r2, #0
 8009176:	60e0      	str	r0, [r4, #12]
 8009178:	2104      	movs	r1, #4
 800917a:	6860      	ldr	r0, [r4, #4]
 800917c:	f7ff ff82 	bl	8009084 <std>
 8009180:	68a0      	ldr	r0, [r4, #8]
 8009182:	2201      	movs	r2, #1
 8009184:	2109      	movs	r1, #9
 8009186:	f7ff ff7d 	bl	8009084 <std>
 800918a:	68e0      	ldr	r0, [r4, #12]
 800918c:	2202      	movs	r2, #2
 800918e:	2112      	movs	r1, #18
 8009190:	f7ff ff78 	bl	8009084 <std>
 8009194:	2301      	movs	r3, #1
 8009196:	61a3      	str	r3, [r4, #24]
 8009198:	e7d2      	b.n	8009140 <__sinit+0xc>
 800919a:	bf00      	nop
 800919c:	08009f0c 	.word	0x08009f0c
 80091a0:	080090cd 	.word	0x080090cd

080091a4 <__sfp>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	4607      	mov	r7, r0
 80091a8:	f7ff ffac 	bl	8009104 <__sfp_lock_acquire>
 80091ac:	4b1e      	ldr	r3, [pc, #120]	; (8009228 <__sfp+0x84>)
 80091ae:	681e      	ldr	r6, [r3, #0]
 80091b0:	69b3      	ldr	r3, [r6, #24]
 80091b2:	b913      	cbnz	r3, 80091ba <__sfp+0x16>
 80091b4:	4630      	mov	r0, r6
 80091b6:	f7ff ffbd 	bl	8009134 <__sinit>
 80091ba:	3648      	adds	r6, #72	; 0x48
 80091bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	d503      	bpl.n	80091cc <__sfp+0x28>
 80091c4:	6833      	ldr	r3, [r6, #0]
 80091c6:	b30b      	cbz	r3, 800920c <__sfp+0x68>
 80091c8:	6836      	ldr	r6, [r6, #0]
 80091ca:	e7f7      	b.n	80091bc <__sfp+0x18>
 80091cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091d0:	b9d5      	cbnz	r5, 8009208 <__sfp+0x64>
 80091d2:	4b16      	ldr	r3, [pc, #88]	; (800922c <__sfp+0x88>)
 80091d4:	60e3      	str	r3, [r4, #12]
 80091d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091da:	6665      	str	r5, [r4, #100]	; 0x64
 80091dc:	f000 f847 	bl	800926e <__retarget_lock_init_recursive>
 80091e0:	f7ff ff96 	bl	8009110 <__sfp_lock_release>
 80091e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091ec:	6025      	str	r5, [r4, #0]
 80091ee:	61a5      	str	r5, [r4, #24]
 80091f0:	2208      	movs	r2, #8
 80091f2:	4629      	mov	r1, r5
 80091f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091f8:	f7fe ffb4 	bl	8008164 <memset>
 80091fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009204:	4620      	mov	r0, r4
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009208:	3468      	adds	r4, #104	; 0x68
 800920a:	e7d9      	b.n	80091c0 <__sfp+0x1c>
 800920c:	2104      	movs	r1, #4
 800920e:	4638      	mov	r0, r7
 8009210:	f7ff ff62 	bl	80090d8 <__sfmoreglue>
 8009214:	4604      	mov	r4, r0
 8009216:	6030      	str	r0, [r6, #0]
 8009218:	2800      	cmp	r0, #0
 800921a:	d1d5      	bne.n	80091c8 <__sfp+0x24>
 800921c:	f7ff ff78 	bl	8009110 <__sfp_lock_release>
 8009220:	230c      	movs	r3, #12
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	e7ee      	b.n	8009204 <__sfp+0x60>
 8009226:	bf00      	nop
 8009228:	08009f0c 	.word	0x08009f0c
 800922c:	ffff0001 	.word	0xffff0001

08009230 <_fwalk_reent>:
 8009230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009234:	4606      	mov	r6, r0
 8009236:	4688      	mov	r8, r1
 8009238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800923c:	2700      	movs	r7, #0
 800923e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009242:	f1b9 0901 	subs.w	r9, r9, #1
 8009246:	d505      	bpl.n	8009254 <_fwalk_reent+0x24>
 8009248:	6824      	ldr	r4, [r4, #0]
 800924a:	2c00      	cmp	r4, #0
 800924c:	d1f7      	bne.n	800923e <_fwalk_reent+0xe>
 800924e:	4638      	mov	r0, r7
 8009250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009254:	89ab      	ldrh	r3, [r5, #12]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d907      	bls.n	800926a <_fwalk_reent+0x3a>
 800925a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800925e:	3301      	adds	r3, #1
 8009260:	d003      	beq.n	800926a <_fwalk_reent+0x3a>
 8009262:	4629      	mov	r1, r5
 8009264:	4630      	mov	r0, r6
 8009266:	47c0      	blx	r8
 8009268:	4307      	orrs	r7, r0
 800926a:	3568      	adds	r5, #104	; 0x68
 800926c:	e7e9      	b.n	8009242 <_fwalk_reent+0x12>

0800926e <__retarget_lock_init_recursive>:
 800926e:	4770      	bx	lr

08009270 <__retarget_lock_acquire_recursive>:
 8009270:	4770      	bx	lr

08009272 <__retarget_lock_release_recursive>:
 8009272:	4770      	bx	lr

08009274 <__swhatbuf_r>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	460e      	mov	r6, r1
 8009278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927c:	2900      	cmp	r1, #0
 800927e:	b096      	sub	sp, #88	; 0x58
 8009280:	4614      	mov	r4, r2
 8009282:	461d      	mov	r5, r3
 8009284:	da08      	bge.n	8009298 <__swhatbuf_r+0x24>
 8009286:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	602a      	str	r2, [r5, #0]
 800928e:	061a      	lsls	r2, r3, #24
 8009290:	d410      	bmi.n	80092b4 <__swhatbuf_r+0x40>
 8009292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009296:	e00e      	b.n	80092b6 <__swhatbuf_r+0x42>
 8009298:	466a      	mov	r2, sp
 800929a:	f000 f951 	bl	8009540 <_fstat_r>
 800929e:	2800      	cmp	r0, #0
 80092a0:	dbf1      	blt.n	8009286 <__swhatbuf_r+0x12>
 80092a2:	9a01      	ldr	r2, [sp, #4]
 80092a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092ac:	425a      	negs	r2, r3
 80092ae:	415a      	adcs	r2, r3
 80092b0:	602a      	str	r2, [r5, #0]
 80092b2:	e7ee      	b.n	8009292 <__swhatbuf_r+0x1e>
 80092b4:	2340      	movs	r3, #64	; 0x40
 80092b6:	2000      	movs	r0, #0
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	b016      	add	sp, #88	; 0x58
 80092bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080092c0 <__smakebuf_r>:
 80092c0:	898b      	ldrh	r3, [r1, #12]
 80092c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c4:	079d      	lsls	r5, r3, #30
 80092c6:	4606      	mov	r6, r0
 80092c8:	460c      	mov	r4, r1
 80092ca:	d507      	bpl.n	80092dc <__smakebuf_r+0x1c>
 80092cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	2301      	movs	r3, #1
 80092d6:	6163      	str	r3, [r4, #20]
 80092d8:	b002      	add	sp, #8
 80092da:	bd70      	pop	{r4, r5, r6, pc}
 80092dc:	ab01      	add	r3, sp, #4
 80092de:	466a      	mov	r2, sp
 80092e0:	f7ff ffc8 	bl	8009274 <__swhatbuf_r>
 80092e4:	9900      	ldr	r1, [sp, #0]
 80092e6:	4605      	mov	r5, r0
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff f873 	bl	80083d4 <_malloc_r>
 80092ee:	b948      	cbnz	r0, 8009304 <__smakebuf_r+0x44>
 80092f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f4:	059a      	lsls	r2, r3, #22
 80092f6:	d4ef      	bmi.n	80092d8 <__smakebuf_r+0x18>
 80092f8:	f023 0303 	bic.w	r3, r3, #3
 80092fc:	f043 0302 	orr.w	r3, r3, #2
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	e7e3      	b.n	80092cc <__smakebuf_r+0xc>
 8009304:	4b0d      	ldr	r3, [pc, #52]	; (800933c <__smakebuf_r+0x7c>)
 8009306:	62b3      	str	r3, [r6, #40]	; 0x28
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009310:	81a3      	strh	r3, [r4, #12]
 8009312:	9b00      	ldr	r3, [sp, #0]
 8009314:	6163      	str	r3, [r4, #20]
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	6120      	str	r0, [r4, #16]
 800931a:	b15b      	cbz	r3, 8009334 <__smakebuf_r+0x74>
 800931c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009320:	4630      	mov	r0, r6
 8009322:	f000 f91f 	bl	8009564 <_isatty_r>
 8009326:	b128      	cbz	r0, 8009334 <__smakebuf_r+0x74>
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	f023 0303 	bic.w	r3, r3, #3
 800932e:	f043 0301 	orr.w	r3, r3, #1
 8009332:	81a3      	strh	r3, [r4, #12]
 8009334:	89a0      	ldrh	r0, [r4, #12]
 8009336:	4305      	orrs	r5, r0
 8009338:	81a5      	strh	r5, [r4, #12]
 800933a:	e7cd      	b.n	80092d8 <__smakebuf_r+0x18>
 800933c:	080090cd 	.word	0x080090cd

08009340 <memmove>:
 8009340:	4288      	cmp	r0, r1
 8009342:	b510      	push	{r4, lr}
 8009344:	eb01 0402 	add.w	r4, r1, r2
 8009348:	d902      	bls.n	8009350 <memmove+0x10>
 800934a:	4284      	cmp	r4, r0
 800934c:	4623      	mov	r3, r4
 800934e:	d807      	bhi.n	8009360 <memmove+0x20>
 8009350:	1e43      	subs	r3, r0, #1
 8009352:	42a1      	cmp	r1, r4
 8009354:	d008      	beq.n	8009368 <memmove+0x28>
 8009356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800935a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800935e:	e7f8      	b.n	8009352 <memmove+0x12>
 8009360:	4402      	add	r2, r0
 8009362:	4601      	mov	r1, r0
 8009364:	428a      	cmp	r2, r1
 8009366:	d100      	bne.n	800936a <memmove+0x2a>
 8009368:	bd10      	pop	{r4, pc}
 800936a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800936e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009372:	e7f7      	b.n	8009364 <memmove+0x24>

08009374 <__malloc_lock>:
 8009374:	4801      	ldr	r0, [pc, #4]	; (800937c <__malloc_lock+0x8>)
 8009376:	f7ff bf7b 	b.w	8009270 <__retarget_lock_acquire_recursive>
 800937a:	bf00      	nop
 800937c:	20000a50 	.word	0x20000a50

08009380 <__malloc_unlock>:
 8009380:	4801      	ldr	r0, [pc, #4]	; (8009388 <__malloc_unlock+0x8>)
 8009382:	f7ff bf76 	b.w	8009272 <__retarget_lock_release_recursive>
 8009386:	bf00      	nop
 8009388:	20000a50 	.word	0x20000a50

0800938c <_realloc_r>:
 800938c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009390:	4680      	mov	r8, r0
 8009392:	4614      	mov	r4, r2
 8009394:	460e      	mov	r6, r1
 8009396:	b921      	cbnz	r1, 80093a2 <_realloc_r+0x16>
 8009398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800939c:	4611      	mov	r1, r2
 800939e:	f7ff b819 	b.w	80083d4 <_malloc_r>
 80093a2:	b92a      	cbnz	r2, 80093b0 <_realloc_r+0x24>
 80093a4:	f7fe ffaa 	bl	80082fc <_free_r>
 80093a8:	4625      	mov	r5, r4
 80093aa:	4628      	mov	r0, r5
 80093ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b0:	f000 f8fa 	bl	80095a8 <_malloc_usable_size_r>
 80093b4:	4284      	cmp	r4, r0
 80093b6:	4607      	mov	r7, r0
 80093b8:	d802      	bhi.n	80093c0 <_realloc_r+0x34>
 80093ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093be:	d812      	bhi.n	80093e6 <_realloc_r+0x5a>
 80093c0:	4621      	mov	r1, r4
 80093c2:	4640      	mov	r0, r8
 80093c4:	f7ff f806 	bl	80083d4 <_malloc_r>
 80093c8:	4605      	mov	r5, r0
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d0ed      	beq.n	80093aa <_realloc_r+0x1e>
 80093ce:	42bc      	cmp	r4, r7
 80093d0:	4622      	mov	r2, r4
 80093d2:	4631      	mov	r1, r6
 80093d4:	bf28      	it	cs
 80093d6:	463a      	movcs	r2, r7
 80093d8:	f7fe feb6 	bl	8008148 <memcpy>
 80093dc:	4631      	mov	r1, r6
 80093de:	4640      	mov	r0, r8
 80093e0:	f7fe ff8c 	bl	80082fc <_free_r>
 80093e4:	e7e1      	b.n	80093aa <_realloc_r+0x1e>
 80093e6:	4635      	mov	r5, r6
 80093e8:	e7df      	b.n	80093aa <_realloc_r+0x1e>

080093ea <_raise_r>:
 80093ea:	291f      	cmp	r1, #31
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4604      	mov	r4, r0
 80093f0:	460d      	mov	r5, r1
 80093f2:	d904      	bls.n	80093fe <_raise_r+0x14>
 80093f4:	2316      	movs	r3, #22
 80093f6:	6003      	str	r3, [r0, #0]
 80093f8:	f04f 30ff 	mov.w	r0, #4294967295
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009400:	b112      	cbz	r2, 8009408 <_raise_r+0x1e>
 8009402:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009406:	b94b      	cbnz	r3, 800941c <_raise_r+0x32>
 8009408:	4620      	mov	r0, r4
 800940a:	f000 f831 	bl	8009470 <_getpid_r>
 800940e:	462a      	mov	r2, r5
 8009410:	4601      	mov	r1, r0
 8009412:	4620      	mov	r0, r4
 8009414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009418:	f000 b818 	b.w	800944c <_kill_r>
 800941c:	2b01      	cmp	r3, #1
 800941e:	d00a      	beq.n	8009436 <_raise_r+0x4c>
 8009420:	1c59      	adds	r1, r3, #1
 8009422:	d103      	bne.n	800942c <_raise_r+0x42>
 8009424:	2316      	movs	r3, #22
 8009426:	6003      	str	r3, [r0, #0]
 8009428:	2001      	movs	r0, #1
 800942a:	e7e7      	b.n	80093fc <_raise_r+0x12>
 800942c:	2400      	movs	r4, #0
 800942e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009432:	4628      	mov	r0, r5
 8009434:	4798      	blx	r3
 8009436:	2000      	movs	r0, #0
 8009438:	e7e0      	b.n	80093fc <_raise_r+0x12>
	...

0800943c <raise>:
 800943c:	4b02      	ldr	r3, [pc, #8]	; (8009448 <raise+0xc>)
 800943e:	4601      	mov	r1, r0
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	f7ff bfd2 	b.w	80093ea <_raise_r>
 8009446:	bf00      	nop
 8009448:	200000d4 	.word	0x200000d4

0800944c <_kill_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d07      	ldr	r5, [pc, #28]	; (800946c <_kill_r+0x20>)
 8009450:	2300      	movs	r3, #0
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	4611      	mov	r1, r2
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	f7f9 ff81 	bl	8003360 <_kill>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d102      	bne.n	8009468 <_kill_r+0x1c>
 8009462:	682b      	ldr	r3, [r5, #0]
 8009464:	b103      	cbz	r3, 8009468 <_kill_r+0x1c>
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	bd38      	pop	{r3, r4, r5, pc}
 800946a:	bf00      	nop
 800946c:	20000a54 	.word	0x20000a54

08009470 <_getpid_r>:
 8009470:	f7f9 bf6e 	b.w	8003350 <_getpid>

08009474 <__sread>:
 8009474:	b510      	push	{r4, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	f000 f89c 	bl	80095b8 <_read_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	bfab      	itete	ge
 8009484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009486:	89a3      	ldrhlt	r3, [r4, #12]
 8009488:	181b      	addge	r3, r3, r0
 800948a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800948e:	bfac      	ite	ge
 8009490:	6563      	strge	r3, [r4, #84]	; 0x54
 8009492:	81a3      	strhlt	r3, [r4, #12]
 8009494:	bd10      	pop	{r4, pc}

08009496 <__swrite>:
 8009496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	461f      	mov	r7, r3
 800949c:	898b      	ldrh	r3, [r1, #12]
 800949e:	05db      	lsls	r3, r3, #23
 80094a0:	4605      	mov	r5, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	4616      	mov	r6, r2
 80094a6:	d505      	bpl.n	80094b4 <__swrite+0x1e>
 80094a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ac:	2302      	movs	r3, #2
 80094ae:	2200      	movs	r2, #0
 80094b0:	f000 f868 	bl	8009584 <_lseek_r>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	4632      	mov	r2, r6
 80094c2:	463b      	mov	r3, r7
 80094c4:	4628      	mov	r0, r5
 80094c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ca:	f000 b817 	b.w	80094fc <_write_r>

080094ce <__sseek>:
 80094ce:	b510      	push	{r4, lr}
 80094d0:	460c      	mov	r4, r1
 80094d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d6:	f000 f855 	bl	8009584 <_lseek_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	bf15      	itete	ne
 80094e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80094e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094ea:	81a3      	strheq	r3, [r4, #12]
 80094ec:	bf18      	it	ne
 80094ee:	81a3      	strhne	r3, [r4, #12]
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__sclose>:
 80094f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f6:	f000 b813 	b.w	8009520 <_close_r>
	...

080094fc <_write_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d07      	ldr	r5, [pc, #28]	; (800951c <_write_r+0x20>)
 8009500:	4604      	mov	r4, r0
 8009502:	4608      	mov	r0, r1
 8009504:	4611      	mov	r1, r2
 8009506:	2200      	movs	r2, #0
 8009508:	602a      	str	r2, [r5, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	f7f9 ff5f 	bl	80033ce <_write>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_write_r+0x1e>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_write_r+0x1e>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20000a54 	.word	0x20000a54

08009520 <_close_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d06      	ldr	r5, [pc, #24]	; (800953c <_close_r+0x1c>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f9 ff6b 	bl	8003406 <_close>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_close_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_close_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20000a54 	.word	0x20000a54

08009540 <_fstat_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d07      	ldr	r5, [pc, #28]	; (8009560 <_fstat_r+0x20>)
 8009544:	2300      	movs	r3, #0
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	f7f9 ff66 	bl	800341e <_fstat>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d102      	bne.n	800955c <_fstat_r+0x1c>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	b103      	cbz	r3, 800955c <_fstat_r+0x1c>
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	bf00      	nop
 8009560:	20000a54 	.word	0x20000a54

08009564 <_isatty_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d06      	ldr	r5, [pc, #24]	; (8009580 <_isatty_r+0x1c>)
 8009568:	2300      	movs	r3, #0
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	f7f9 ff65 	bl	800343e <_isatty>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_isatty_r+0x1a>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_isatty_r+0x1a>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	20000a54 	.word	0x20000a54

08009584 <_lseek_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4d07      	ldr	r5, [pc, #28]	; (80095a4 <_lseek_r+0x20>)
 8009588:	4604      	mov	r4, r0
 800958a:	4608      	mov	r0, r1
 800958c:	4611      	mov	r1, r2
 800958e:	2200      	movs	r2, #0
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f9 ff5e 	bl	8003454 <_lseek>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_lseek_r+0x1e>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_lseek_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20000a54 	.word	0x20000a54

080095a8 <_malloc_usable_size_r>:
 80095a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ac:	1f18      	subs	r0, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bfbc      	itt	lt
 80095b2:	580b      	ldrlt	r3, [r1, r0]
 80095b4:	18c0      	addlt	r0, r0, r3
 80095b6:	4770      	bx	lr

080095b8 <_read_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d07      	ldr	r5, [pc, #28]	; (80095d8 <_read_r+0x20>)
 80095bc:	4604      	mov	r4, r0
 80095be:	4608      	mov	r0, r1
 80095c0:	4611      	mov	r1, r2
 80095c2:	2200      	movs	r2, #0
 80095c4:	602a      	str	r2, [r5, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	f7f9 fee4 	bl	8003394 <_read>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_read_r+0x1e>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_read_r+0x1e>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	20000a54 	.word	0x20000a54

080095dc <_init>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr

080095e8 <_fini>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr
