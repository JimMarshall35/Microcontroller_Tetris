
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006784  08006784  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006784  08006784  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800678c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000758  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007c8  200007c8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001046a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000247a  00000000  00000000  0003050a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00032988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da8  00000000  00000000  00033848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c293  00000000  00000000  000345f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b5e  00000000  00000000  00050883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a96ce  00000000  00000000  000623e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010baaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041a8  00000000  00000000  0010bb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060ec 	.word	0x080060ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080060ec 	.word	0x080060ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer>:
// copy all the regions of the frame buffer that are marked as needing to be updated
// to the lcd screen
void gfxFinishDrawing(LCD_PCD8544_screen_t* scr);


void UpdateScreenRegionsToUpdate_ClearedFrameBuffer(){
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e01c      	b.n	80002c6 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x46>
		gScreenRegionsToUpdate[i].updateNeeded = true;
 800028c:	4913      	ldr	r1, [pc, #76]	; (80002dc <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x5c>)
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	4613      	mov	r3, r2
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	4413      	add	r3, r2
 8000296:	440b      	add	r3, r1
 8000298:	2201      	movs	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnStart = 0;
 800029c:	490f      	ldr	r1, [pc, #60]	; (80002dc <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x5c>)
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	4613      	mov	r3, r2
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	4413      	add	r3, r2
 80002a6:	440b      	add	r3, r1
 80002a8:	3301      	adds	r3, #1
 80002aa:	2200      	movs	r2, #0
 80002ac:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[i].updateColumnFinish = PIXELS_WIDTH;
 80002ae:	490b      	ldr	r1, [pc, #44]	; (80002dc <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0x5c>)
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4613      	mov	r3, r2
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	4413      	add	r3, r2
 80002b8:	440b      	add	r3, r1
 80002ba:	3302      	adds	r3, #2
 80002bc:	2254      	movs	r2, #84	; 0x54
 80002be:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < SCREEN_NUM_ROWS; i++){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2b05      	cmp	r3, #5
 80002ca:	dddf      	ble.n	800028c <UpdateScreenRegionsToUpdate_ClearedFrameBuffer+0xc>
	}
}
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	20000284 	.word	0x20000284

080002e0 <gfxClearFrameBuffer>:

void gfxClearFrameBuffer(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	memset(gFrameBuffer, 0, sizeof(gFrameBuffer));
 80002e4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80002e8:	2100      	movs	r1, #0
 80002ea:	4803      	ldr	r0, [pc, #12]	; (80002f8 <gfxClearFrameBuffer+0x18>)
 80002ec:	f005 fa96 	bl	800581c <memset>
	UpdateScreenRegionsToUpdate_ClearedFrameBuffer();
 80002f0:	f7ff ffc6 	bl	8000280 <UpdateScreenRegionsToUpdate_ClearedFrameBuffer>
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	2000008c 	.word	0x2000008c

080002fc <gfxPlotPixelInternal>:

void gfxPlotPixelInternal(u8 x, u8 y){
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	460a      	mov	r2, r1
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]

	int indexOfSliceContainingPixel = ((y / 8)*PIXELS_WIDTH) + x;
 800030c:	79bb      	ldrb	r3, [r7, #6]
 800030e:	08db      	lsrs	r3, r3, #3
 8000310:	b2db      	uxtb	r3, r3
 8000312:	461a      	mov	r2, r3
 8000314:	2354      	movs	r3, #84	; 0x54
 8000316:	fb03 f202 	mul.w	r2, r3, r2
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4413      	add	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]
	gFrameBuffer[indexOfSliceContainingPixel] |= (1 << (y % 8));
 8000320:	4a0c      	ldr	r2, [pc, #48]	; (8000354 <gfxPlotPixelInternal+0x58>)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	4413      	add	r3, r2
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	b25a      	sxtb	r2, r3
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	f003 0307 	and.w	r3, r3, #7
 8000330:	2101      	movs	r1, #1
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	b25b      	sxtb	r3, r3
 8000338:	4313      	orrs	r3, r2
 800033a:	b25b      	sxtb	r3, r3
 800033c:	b2d9      	uxtb	r1, r3
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <gfxPlotPixelInternal+0x58>)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	4413      	add	r3, r2
 8000344:	460a      	mov	r2, r1
 8000346:	701a      	strb	r2, [r3, #0]
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	2000008c 	.word	0x2000008c

08000358 <UpdateScreenRegionsToUpdate_SinglePixel>:

void UpdateScreenRegionsToUpdate_SinglePixel(u8 x, u8 y){
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	460a      	mov	r2, r1
 8000362:	71fb      	strb	r3, [r7, #7]
 8000364:	4613      	mov	r3, r2
 8000366:	71bb      	strb	r3, [r7, #6]
	u8 row = y / SCREEN_NUM_ROWS;
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	4a2c      	ldr	r2, [pc, #176]	; (800041c <UpdateScreenRegionsToUpdate_SinglePixel+0xc4>)
 800036c:	fba2 2303 	umull	r2, r3, r2, r3
 8000370:	089b      	lsrs	r3, r3, #2
 8000372:	73fb      	strb	r3, [r7, #15]
	if(gScreenRegionsToUpdate[row].updateNeeded == false){
 8000374:	7bfa      	ldrb	r2, [r7, #15]
 8000376:	492a      	ldr	r1, [pc, #168]	; (8000420 <UpdateScreenRegionsToUpdate_SinglePixel+0xc8>)
 8000378:	4613      	mov	r3, r2
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	4413      	add	r3, r2
 800037e:	440b      	add	r3, r1
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d11a      	bne.n	80003bc <UpdateScreenRegionsToUpdate_SinglePixel+0x64>
		gScreenRegionsToUpdate[row].updateNeeded = true;
 8000386:	7bfa      	ldrb	r2, [r7, #15]
 8000388:	4925      	ldr	r1, [pc, #148]	; (8000420 <UpdateScreenRegionsToUpdate_SinglePixel+0xc8>)
 800038a:	4613      	mov	r3, r2
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	4413      	add	r3, r2
 8000390:	440b      	add	r3, r1
 8000392:	2201      	movs	r2, #1
 8000394:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnStart = x;
 8000396:	7bfa      	ldrb	r2, [r7, #15]
 8000398:	4921      	ldr	r1, [pc, #132]	; (8000420 <UpdateScreenRegionsToUpdate_SinglePixel+0xc8>)
 800039a:	4613      	mov	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4413      	add	r3, r2
 80003a0:	440b      	add	r3, r1
 80003a2:	3301      	adds	r3, #1
 80003a4:	79fa      	ldrb	r2, [r7, #7]
 80003a6:	701a      	strb	r2, [r3, #0]
		gScreenRegionsToUpdate[row].updateColumnFinish = x;
 80003a8:	7bfa      	ldrb	r2, [r7, #15]
 80003aa:	491d      	ldr	r1, [pc, #116]	; (8000420 <UpdateScreenRegionsToUpdate_SinglePixel+0xc8>)
 80003ac:	4613      	mov	r3, r2
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	4413      	add	r3, r2
 80003b2:	440b      	add	r3, r1
 80003b4:	3302      	adds	r3, #2
 80003b6:	79fa      	ldrb	r2, [r7, #7]
 80003b8:	701a      	strb	r2, [r3, #0]
		else if(x < gScreenRegionsToUpdate[row].updateColumnStart){
			gScreenRegionsToUpdate[row].updateColumnStart = x;
		}

	}
}
 80003ba:	e028      	b.n	800040e <UpdateScreenRegionsToUpdate_SinglePixel+0xb6>
		if(x > gScreenRegionsToUpdate[row].updateColumnFinish){
 80003bc:	7bfa      	ldrb	r2, [r7, #15]
 80003be:	4918      	ldr	r1, [pc, #96]	; (8000420 <UpdateScreenRegionsToUpdate_SinglePixel+0xc8>)
 80003c0:	4613      	mov	r3, r2
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	4413      	add	r3, r2
 80003c6:	440b      	add	r3, r1
 80003c8:	3302      	adds	r3, #2
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	79fa      	ldrb	r2, [r7, #7]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d909      	bls.n	80003e6 <UpdateScreenRegionsToUpdate_SinglePixel+0x8e>
			gScreenRegionsToUpdate[row].updateColumnFinish = x;
 80003d2:	7bfa      	ldrb	r2, [r7, #15]
 80003d4:	4912      	ldr	r1, [pc, #72]	; (8000420 <UpdateScreenRegionsToUpdate_SinglePixel+0xc8>)
 80003d6:	4613      	mov	r3, r2
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4413      	add	r3, r2
 80003dc:	440b      	add	r3, r1
 80003de:	3302      	adds	r3, #2
 80003e0:	79fa      	ldrb	r2, [r7, #7]
 80003e2:	701a      	strb	r2, [r3, #0]
}
 80003e4:	e013      	b.n	800040e <UpdateScreenRegionsToUpdate_SinglePixel+0xb6>
		else if(x < gScreenRegionsToUpdate[row].updateColumnStart){
 80003e6:	7bfa      	ldrb	r2, [r7, #15]
 80003e8:	490d      	ldr	r1, [pc, #52]	; (8000420 <UpdateScreenRegionsToUpdate_SinglePixel+0xc8>)
 80003ea:	4613      	mov	r3, r2
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	4413      	add	r3, r2
 80003f0:	440b      	add	r3, r1
 80003f2:	3301      	adds	r3, #1
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	79fa      	ldrb	r2, [r7, #7]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d208      	bcs.n	800040e <UpdateScreenRegionsToUpdate_SinglePixel+0xb6>
			gScreenRegionsToUpdate[row].updateColumnStart = x;
 80003fc:	7bfa      	ldrb	r2, [r7, #15]
 80003fe:	4908      	ldr	r1, [pc, #32]	; (8000420 <UpdateScreenRegionsToUpdate_SinglePixel+0xc8>)
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	440b      	add	r3, r1
 8000408:	3301      	adds	r3, #1
 800040a:	79fa      	ldrb	r2, [r7, #7]
 800040c:	701a      	strb	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	aaaaaaab 	.word	0xaaaaaaab
 8000420:	20000284 	.word	0x20000284

08000424 <gfxPlotPixel>:

void gfxPlotPixel(u8 x, u8 y){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	460a      	mov	r2, r1
 800042e:	71fb      	strb	r3, [r7, #7]
 8000430:	4613      	mov	r3, r2
 8000432:	71bb      	strb	r3, [r7, #6]
	if(x >= PIXELS_WIDTH || y >= PIXELS_WIDTH){
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2b53      	cmp	r3, #83	; 0x53
 8000438:	d80f      	bhi.n	800045a <gfxPlotPixel+0x36>
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	2b53      	cmp	r3, #83	; 0x53
 800043e:	d80c      	bhi.n	800045a <gfxPlotPixel+0x36>
		return;
	}
	gfxPlotPixelInternal(x,y);
 8000440:	79ba      	ldrb	r2, [r7, #6]
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	4611      	mov	r1, r2
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff58 	bl	80002fc <gfxPlotPixelInternal>
	UpdateScreenRegionsToUpdate_SinglePixel(x,y);
 800044c:	79ba      	ldrb	r2, [r7, #6]
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	4611      	mov	r1, r2
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff80 	bl	8000358 <UpdateScreenRegionsToUpdate_SinglePixel>
 8000458:	e000      	b.n	800045c <gfxPlotPixel+0x38>
		return;
 800045a:	bf00      	nop
}
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <gfxFinishDrawing>:
	}

}


void gfxFinishDrawing(LCD_PCD8544_screen_t* scr){
 8000464:	b580      	push	{r7, lr}
 8000466:	b08e      	sub	sp, #56	; 0x38
 8000468:	af02      	add	r7, sp, #8
 800046a:	6078      	str	r0, [r7, #4]
	char info[25];
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 800046c:	2300      	movs	r3, #0
 800046e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000470:	e067      	b.n	8000542 <gfxFinishDrawing+0xde>
		if(gScreenRegionsToUpdate[row].updateNeeded == true){
 8000472:	4938      	ldr	r1, [pc, #224]	; (8000554 <gfxFinishDrawing+0xf0>)
 8000474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000476:	4613      	mov	r3, r2
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	4413      	add	r3, r2
 800047c:	440b      	add	r3, r1
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d15b      	bne.n	800053c <gfxFinishDrawing+0xd8>



			u8 colStart = gScreenRegionsToUpdate[row].updateColumnStart;
 8000484:	4933      	ldr	r1, [pc, #204]	; (8000554 <gfxFinishDrawing+0xf0>)
 8000486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000488:	4613      	mov	r3, r2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	4413      	add	r3, r2
 800048e:	440b      	add	r3, r1
 8000490:	3301      	adds	r3, #1
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			u8 colFinish = gScreenRegionsToUpdate[row].updateColumnFinish;
 8000498:	492e      	ldr	r1, [pc, #184]	; (8000554 <gfxFinishDrawing+0xf0>)
 800049a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800049c:	4613      	mov	r3, r2
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	4413      	add	r3, r2
 80004a2:	440b      	add	r3, r1
 80004a4:	3302      	adds	r3, #2
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(colFinish < colStart){
 80004ac:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80004b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d20b      	bcs.n	80004d0 <gfxFinishDrawing+0x6c>
				Swapi8(colStart,colFinish);
 80004b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80004bc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80004c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80004c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80004c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80004cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			//sprintf(info,"s: %d f: %d", colStart, colFinish);
			//LCD_PCD8544_write_line(scr,row,info);
			int yOffset = row * PIXELS_WIDTH;
 80004d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004d2:	2254      	movs	r2, #84	; 0x54
 80004d4:	fb02 f303 	mul.w	r3, r2, r3
 80004d8:	627b      	str	r3, [r7, #36]	; 0x24

			gfxWriteBytes(scr,row,colStart, &gFrameBuffer[yOffset + colStart], colFinish-colStart);
 80004da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004dc:	b2d9      	uxtb	r1, r3
 80004de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80004e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e4:	4413      	add	r3, r2
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <gfxFinishDrawing+0xf4>)
 80004e8:	1898      	adds	r0, r3, r2
 80004ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	4603      	mov	r3, r0
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 f82a 	bl	800055c <gfxWriteBytes>


			gScreenRegionsToUpdate[row].updateNeeded = false;
 8000508:	4912      	ldr	r1, [pc, #72]	; (8000554 <gfxFinishDrawing+0xf0>)
 800050a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	440b      	add	r3, r1
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnStart = 0;
 8000518:	490e      	ldr	r1, [pc, #56]	; (8000554 <gfxFinishDrawing+0xf0>)
 800051a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800051c:	4613      	mov	r3, r2
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	4413      	add	r3, r2
 8000522:	440b      	add	r3, r1
 8000524:	3301      	adds	r3, #1
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
			gScreenRegionsToUpdate[row].updateColumnFinish = 0;
 800052a:	490a      	ldr	r1, [pc, #40]	; (8000554 <gfxFinishDrawing+0xf0>)
 800052c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800052e:	4613      	mov	r3, r2
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4413      	add	r3, r2
 8000534:	440b      	add	r3, r1
 8000536:	3302      	adds	r3, #2
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<SCREEN_NUM_ROWS; row++ ){
 800053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800053e:	3301      	adds	r3, #1
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000544:	2b05      	cmp	r3, #5
 8000546:	dd94      	ble.n	8000472 <gfxFinishDrawing+0xe>
			sprintf(info,"s: %d f: %d", colStart, colFinish);
			LCD_PCD8544_write_line(scr,row,info);
		}
		*/
	}
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3730      	adds	r7, #48	; 0x30
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000284 	.word	0x20000284
 8000558:	2000008c 	.word	0x2000008c

0800055c <gfxWriteBytes>:

HAL_StatusTypeDef gfxWriteBytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size){
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	460b      	mov	r3, r1
 8000568:	72fb      	strb	r3, [r7, #11]
 800056a:	4613      	mov	r3, r2
 800056c:	72bb      	strb	r3, [r7, #10]

	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	f000 fb9c 	bl	8000cb4 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	f000 fbb9 	bl	8000cf4 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8000582:	7dfa      	ldrb	r2, [r7, #23]
 8000584:	7db9      	ldrb	r1, [r7, #22]
 8000586:	2300      	movs	r3, #0
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	f000 fabc 	bl	8000b06 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, hIndex);
 800058e:	7aba      	ldrb	r2, [r7, #10]
 8000590:	7afb      	ldrb	r3, [r7, #11]
 8000592:	4619      	mov	r1, r3
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 fb09 	bl	8000bac <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 800059a:	68f8      	ldr	r0, [r7, #12]
 800059c:	f000 fbba 	bl	8000d14 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f000 fb97 	bl	8000cd4 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	f000 fba4 	bl	8000cf4 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 80005ac:	8c3b      	ldrh	r3, [r7, #32]
 80005ae:	461a      	mov	r2, r3
 80005b0:	6879      	ldr	r1, [r7, #4]
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 fa74 	bl	8000aa0 <LCD_PCD8544_LL_send_data>
 80005b8:	4603      	mov	r3, r0
 80005ba:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f000 fba9 	bl	8000d14 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 80005c2:	7d7b      	ldrb	r3, [r7, #21]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <gfxWriteTextLineToFrameBuffer>:

void gfxWriteTextLineToFrameBuffer(u8 vIndex, u8 hIndex, const char* string){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09c      	sub	sp, #112	; 0x70
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	603a      	str	r2, [r7, #0]
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	460b      	mov	r3, r1
 80005da:	71bb      	strb	r3, [r7, #6]
	unsigned short int strLen = strlen(string);
 80005dc:	6838      	ldr	r0, [r7, #0]
 80005de:	f7ff fdf7 	bl	80001d0 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	if (strLen* LCD_PCD8544_CHAR_WIDTH + hIndex > LCD_PCD8544_LINEWIDTH * LCD_PCD8544_CHAR_WIDTH) {
 80005e8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	461a      	mov	r2, r3
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	4413      	add	r3, r2
 80005fa:	2b54      	cmp	r3, #84	; 0x54
 80005fc:	dd04      	ble.n	8000608 <gfxWriteTextLineToFrameBuffer+0x3c>
		strLen = LCD_PCD8544_LINEWIDTH;
 80005fe:	230e      	movs	r3, #14
 8000600:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		hIndex = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	71bb      	strb	r3, [r7, #6]
	} // cut to the right edge of the screen

	//TODO check that initialization works; maybe better use memset?
	unsigned char data[LCD_PCD8544_LINEWIDTH*LCD_PCD8544_CHAR_WIDTH];
	memset(data, 0, sizeof(data));
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2254      	movs	r2, #84	; 0x54
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 f903 	bl	800581c <memset>

	// Translate the input string into the bit array using the font
	unsigned short int nChars=0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	for ( ; nChars<strLen; nChars++) {
 800061c:	e029      	b.n	8000672 <gfxWriteTextLineToFrameBuffer+0xa6>
		if (string[nChars] == '\0') {
 800061e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000622:	683a      	ldr	r2, [r7, #0]
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d029      	beq.n	8000680 <gfxWriteTextLineToFrameBuffer+0xb4>
			//TODO check
			break;
		} else {
			unsigned short int idx = (unsigned short int)(string[nChars]);
 800062c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	4413      	add	r3, r2
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			memcpy(&data[LCD_PCD8544_CHAR_WIDTH*nChars], &gFont6x8[LCD_PCD8544_CHAR_WIDTH*idx], LCD_PCD8544_CHAR_WIDTH);
 800063a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	461a      	mov	r2, r3
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	1898      	adds	r0, r3, r2
 800064e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	461a      	mov	r2, r3
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <gfxWriteTextLineToFrameBuffer+0x100>)
 800065e:	4413      	add	r3, r2
 8000660:	2206      	movs	r2, #6
 8000662:	4619      	mov	r1, r3
 8000664:	f005 f8cc 	bl	8005800 <memcpy>
	for ( ; nChars<strLen; nChars++) {
 8000668:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800066c:	3301      	adds	r3, #1
 800066e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000672:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000676:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800067a:	429a      	cmp	r2, r3
 800067c:	d3cf      	bcc.n	800061e <gfxWriteTextLineToFrameBuffer+0x52>
 800067e:	e000      	b.n	8000682 <gfxWriteTextLineToFrameBuffer+0xb6>
			break;
 8000680:	bf00      	nop
		}
	}
	int yOffset = vIndex * PIXELS_WIDTH;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2254      	movs	r2, #84	; 0x54
 8000686:	fb02 f303 	mul.w	r3, r2, r3
 800068a:	667b      	str	r3, [r7, #100]	; 0x64
	u8 stringWidthBytes = strLen*LCD_PCD8544_CHAR_WIDTH;
 800068c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	0052      	lsls	r2, r2, #1
 8000696:	4413      	add	r3, r2
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	memcpy(&gFrameBuffer[yOffset + hIndex], data, stringWidthBytes);
 800069e:	79ba      	ldrb	r2, [r7, #6]
 80006a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a2:	4413      	add	r3, r2
 80006a4:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <gfxWriteTextLineToFrameBuffer+0x104>)
 80006a6:	4413      	add	r3, r2
 80006a8:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80006ac:	f107 010c 	add.w	r1, r7, #12
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 f8a5 	bl	8005800 <memcpy>
	UpdateScreenRegionsToUpdate_TextDrawn(vIndex, hIndex, stringWidthBytes);
 80006b6:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80006ba:	79b9      	ldrb	r1, [r7, #6]
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f808 	bl	80006d4 <UpdateScreenRegionsToUpdate_TextDrawn>

}
 80006c4:	bf00      	nop
 80006c6:	3770      	adds	r7, #112	; 0x70
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08006114 	.word	0x08006114
 80006d0:	2000008c 	.word	0x2000008c

080006d4 <UpdateScreenRegionsToUpdate_TextDrawn>:


void UpdateScreenRegionsToUpdate_TextDrawn(u8 vIndex, u8 hIndex, u8 stringWidthBytes){
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	460b      	mov	r3, r1
 80006e0:	71bb      	strb	r3, [r7, #6]
 80006e2:	4613      	mov	r3, r2
 80006e4:	717b      	strb	r3, [r7, #5]
	gScreenRegionsToUpdate[vIndex].updateNeeded = true;
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	491f      	ldr	r1, [pc, #124]	; (8000768 <UpdateScreenRegionsToUpdate_TextDrawn+0x94>)
 80006ea:	4613      	mov	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	440b      	add	r3, r1
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
	u8 currentUpdateColStart = gScreenRegionsToUpdate[vIndex].updateColumnStart;
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	491b      	ldr	r1, [pc, #108]	; (8000768 <UpdateScreenRegionsToUpdate_TextDrawn+0x94>)
 80006fa:	4613      	mov	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4413      	add	r3, r2
 8000700:	440b      	add	r3, r1
 8000702:	3301      	adds	r3, #1
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]
	u8 currentUpdateColFinish = gScreenRegionsToUpdate[vIndex].updateColumnFinish;
 8000708:	79fa      	ldrb	r2, [r7, #7]
 800070a:	4917      	ldr	r1, [pc, #92]	; (8000768 <UpdateScreenRegionsToUpdate_TextDrawn+0x94>)
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	440b      	add	r3, r1
 8000714:	3302      	adds	r3, #2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	73bb      	strb	r3, [r7, #14]
	gScreenRegionsToUpdate[vIndex].updateColumnStart = MIN(currentUpdateColStart, hIndex);
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	79b9      	ldrb	r1, [r7, #6]
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	428b      	cmp	r3, r1
 8000722:	bf28      	it	cs
 8000724:	460b      	movcs	r3, r1
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	490f      	ldr	r1, [pc, #60]	; (8000768 <UpdateScreenRegionsToUpdate_TextDrawn+0x94>)
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	440b      	add	r3, r1
 8000732:	3301      	adds	r3, #1
 8000734:	4602      	mov	r2, r0
 8000736:	701a      	strb	r2, [r3, #0]
	gScreenRegionsToUpdate[vIndex].updateColumnFinish = MAX(currentUpdateColFinish, hIndex + stringWidthBytes);
 8000738:	79ba      	ldrb	r2, [r7, #6]
 800073a:	797b      	ldrb	r3, [r7, #5]
 800073c:	441a      	add	r2, r3
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	4293      	cmp	r3, r2
 8000742:	bfb8      	it	lt
 8000744:	4613      	movlt	r3, r2
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	b2d8      	uxtb	r0, r3
 800074a:	4907      	ldr	r1, [pc, #28]	; (8000768 <UpdateScreenRegionsToUpdate_TextDrawn+0x94>)
 800074c:	4613      	mov	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4413      	add	r3, r2
 8000752:	440b      	add	r3, r1
 8000754:	3302      	adds	r3, #2
 8000756:	4602      	mov	r2, r0
 8000758:	701a      	strb	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000284 	.word	0x20000284

0800076c <gfxMidPointCircleDraw>:


// Implementing Mid-Point Circle Drawing Algorithm
void gfxMidPointCircleDraw(int x_centre, int y_centre, int r)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
    int x = r, y = 0;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	61fb      	str	r3, [r7, #28]
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]

    // Printing the initial point on the axes
    // after translation
    gfxPlotPixel(x - x_centre, y - y_centre);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	b2d8      	uxtb	r0, r3
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4619      	mov	r1, r3
 800079a:	f7ff fe43 	bl	8000424 <gfxPlotPixel>
    gfxPlotPixel(x + x_centre, y + y_centre);
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	b2d8      	uxtb	r0, r3
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4413      	add	r3, r2
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	f7ff fe34 	bl	8000424 <gfxPlotPixel>

    // When radius is zero only a single
    // point will be printed
    if (r > 0)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dd2c      	ble.n	800081c <gfxMidPointCircleDraw+0xb0>
    {
    	gfxPlotPixel(x + x_centre, -y + y_centre);
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	4413      	add	r3, r2
 80007cc:	b2d8      	uxtb	r0, r3
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4619      	mov	r1, r3
 80007dc:	f7ff fe22 	bl	8000424 <gfxPlotPixel>
    	gfxPlotPixel(y + x_centre, x + y_centre);
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4413      	add	r3, r2
 80007ea:	b2d8      	uxtb	r0, r3
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4413      	add	r3, r2
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4619      	mov	r1, r3
 80007fa:	f7ff fe13 	bl	8000424 <gfxPlotPixel>
    	gfxPlotPixel(-y + x_centre, x + y_centre);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b2d8      	uxtb	r0, r3
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4413      	add	r3, r2
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	f7ff fe04 	bl	8000424 <gfxPlotPixel>
    }

    // Initialising the value of P
    int P = 1 - r;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f1c3 0301 	rsb	r3, r3, #1
 8000822:	617b      	str	r3, [r7, #20]
    while (x > y)
 8000824:	e099      	b.n	800095a <gfxMidPointCircleDraw+0x1ee>
    {
        y++;
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	3301      	adds	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]

        // Mid-point is inside or on the perimeter
        if (P <= 0)
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	2b00      	cmp	r3, #0
 8000830:	dc06      	bgt.n	8000840 <gfxMidPointCircleDraw+0xd4>
            P = P + 2*y + 1;
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	005a      	lsls	r2, r3, #1
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	4413      	add	r3, r2
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	e00b      	b.n	8000858 <gfxMidPointCircleDraw+0xec>

        // Mid-point is outside the perimeter
        else
        {
            x--;
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	3b01      	subs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
            P = P + 2*y - 2*x + 1;
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	005a      	lsls	r2, r3, #1
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	441a      	add	r2, r3
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
        }

        // All the perimeter points have already been printed
        if (x < y)
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	429a      	cmp	r2, r3
 800085e:	f2c0 8082 	blt.w	8000966 <gfxMidPointCircleDraw+0x1fa>
            break;

        // Printing the generated point and its reflection
        // in the other octants after translation
        gfxPlotPixel(x + x_centre, y + y_centre);
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4413      	add	r3, r2
 800086c:	b2d8      	uxtb	r0, r3
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4413      	add	r3, r2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4619      	mov	r1, r3
 800087c:	f7ff fdd2 	bl	8000424 <gfxPlotPixel>
        gfxPlotPixel(-x + x_centre, y + y_centre);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b2d8      	uxtb	r0, r3
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4413      	add	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	f7ff fdc3 	bl	8000424 <gfxPlotPixel>
        gfxPlotPixel(x + x_centre, -y + y_centre);
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4413      	add	r3, r2
 80008a8:	b2d8      	uxtb	r0, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4619      	mov	r1, r3
 80008b8:	f7ff fdb4 	bl	8000424 <gfxPlotPixel>
        gfxPlotPixel(-x + x_centre, -y + y_centre);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	b2d8      	uxtb	r0, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	f7ff fda5 	bl	8000424 <gfxPlotPixel>

        // If the generated point is on the line x = y then
        // the perimeter points have already been printed
        if (x != y)
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d03b      	beq.n	800095a <gfxMidPointCircleDraw+0x1ee>
        {
        	gfxPlotPixel(y + x_centre, x + y_centre);
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4413      	add	r3, r2
 80008ec:	b2d8      	uxtb	r0, r3
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	f7ff fd92 	bl	8000424 <gfxPlotPixel>
        	gfxPlotPixel(-y + x_centre, x + y_centre);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	b2d8      	uxtb	r0, r3
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4413      	add	r3, r2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	f7ff fd83 	bl	8000424 <gfxPlotPixel>
        	gfxPlotPixel(y + x_centre, -x + y_centre);
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4413      	add	r3, r2
 8000928:	b2d8      	uxtb	r0, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	f7ff fd74 	bl	8000424 <gfxPlotPixel>
            gfxPlotPixel(-y + x_centre, -x + y_centre);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	b2d8      	uxtb	r0, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4619      	mov	r1, r3
 8000956:	f7ff fd65 	bl	8000424 <gfxPlotPixel>
    while (x > y)
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	429a      	cmp	r2, r3
 8000960:	f73f af61 	bgt.w	8000826 <gfxMidPointCircleDraw+0xba>
        }
    }
}
 8000964:	e000      	b.n	8000968 <gfxMidPointCircleDraw+0x1fc>
            break;
 8000966:	bf00      	nop
}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <LCD_PCD8544_init>:

LCD_PCD8544_screen_t gLcdScreen;
char g_LCD_PCD8544_lines[LCD_PCD8544_NLINES][LCD_PCD8544_LINEWIDTH];

void LCD_PCD8544_init(LCD_PCD8544_screen_t* scr)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	//TODO clear g_LCD_PCD8544_lines


	//TODO check that this is necessary at all
	// Fill gZeroArray with zeros
	memset(gZeroArray, 0, sizeof(gZeroArray));
 8000978:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800097c:	2100      	movs	r1, #0
 800097e:	481e      	ldr	r0, [pc, #120]	; (80009f8 <LCD_PCD8544_init+0x88>)
 8000980:	f004 ff4c 	bl	800581c <memset>

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	73bb      	strb	r3, [r7, #14]

	LCD_PCD8544_LL_reset(scr);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f976 	bl	8000c7e <LCD_PCD8544_LL_reset>

	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f98e 	bl	8000cb4 <LCD_PCD8544_LL_switch_to_commands_mode>

	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 f9ab 	bl	8000cf4 <LCD_PCD8544_LL_begin_data_transfer>

	// Part 1 ==================================================================
	// 1st byte: instruction = 'Function set' with H=1
	// With this command sent to the LCD controller we
	// indicate that so called extended instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 1);
 800099e:	7bfa      	ldrb	r2, [r7, #15]
 80009a0:	7bb9      	ldrb	r1, [r7, #14]
 80009a2:	2301      	movs	r3, #1
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f8ae 	bl	8000b06 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Bias system'
	LCD_PCD8544_LL_set_bias_system(scr, 3); //TODO study!
 80009aa:	2103      	movs	r1, #3
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f939 	bl	8000c24 <LCD_PCD8544_LL_set_bias_system>
	// 3rd byte: instruction = 'Set VOP'
	LCD_PCD8544_LL_set_VOP(scr, 0x40); //TODO study!
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f94e 	bl	8000c56 <LCD_PCD8544_LL_set_VOP>
	// 4th byte: instruction = 'Temperature control'
	LCD_PCD8544_LL_set_temperature_control(scr, 2); //TODO study!
 80009ba:	2102      	movs	r1, #2
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 f918 	bl	8000bf2 <LCD_PCD8544_LL_set_temperature_control>

	// Part 2 ==================================================================
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 80009c2:	7bfa      	ldrb	r2, [r7, #15]
 80009c4:	7bb9      	ldrb	r1, [r7, #14]
 80009c6:	2300      	movs	r3, #0
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f000 f89c 	bl	8000b06 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Display control'
	LCD_PCD8544_LL_set_display_control(scr, 1, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 f8c7 	bl	8000b66 <LCD_PCD8544_LL_set_display_control>
	// 3rd byte: instruction = 'Set Y address of RAM'
	// 4th byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f8e5 	bl	8000bac <LCD_PCD8544_LL_set_YX_address_of_RAM>

	LCD_PCD8544_LL_end_data_transfer(scr);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f996 	bl	8000d14 <LCD_PCD8544_LL_end_data_transfer>

	LCD_PCD8544_clear_ram(scr);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f845 	bl	8000a78 <LCD_PCD8544_clear_ram>
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000298 	.word	0x20000298

080009fc <LCD_PCD8544_write_bytes>:

HAL_StatusTypeDef LCD_PCD8544_write_bytes(LCD_PCD8544_screen_t* scr,
                                          unsigned char vIndex, unsigned char hIndex,
                                          unsigned char* bytes, unsigned short int size)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	72fb      	strb	r3, [r7, #11]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	72bb      	strb	r3, [r7, #10]
	//TODO check that vIndex, hIndex, and size are in the allowed range

	// 0 - horizontal addressing;
	// 1 - vertical addressing.
	unsigned char addressing_type = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	75fb      	strb	r3, [r7, #23]

	// 0 - chip is active;
	// 1 - chip is in power-down mode.
	unsigned char power_down = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	75bb      	strb	r3, [r7, #22]

	// Set the cursor to (vIndex,hIndex)
	LCD_PCD8544_LL_switch_to_commands_mode(scr);
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 f94c 	bl	8000cb4 <LCD_PCD8544_LL_switch_to_commands_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f000 f969 	bl	8000cf4 <LCD_PCD8544_LL_begin_data_transfer>
	// 1st byte: instruction = 'Function set' with H=0
	// With this command sent to the LCD controller we
	// indicate that so called basic instruction set will be used
	LCD_PCD8544_LL_set_function_set(scr, power_down, addressing_type, 0);
 8000a22:	7dfa      	ldrb	r2, [r7, #23]
 8000a24:	7db9      	ldrb	r1, [r7, #22]
 8000a26:	2300      	movs	r3, #0
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 f86c 	bl	8000b06 <LCD_PCD8544_LL_set_function_set>
	// 2nd byte: instruction = 'Set Y address of RAM'
	// 3rd byte: instruction = 'Set X address of RAM'
	LCD_PCD8544_LL_set_YX_address_of_RAM(scr, vIndex, LCD_PCD8544_CHAR_WIDTH*hIndex);
 8000a2e:	7abb      	ldrb	r3, [r7, #10]
 8000a30:	461a      	mov	r2, r3
 8000a32:	0052      	lsls	r2, r2, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	7afb      	ldrb	r3, [r7, #11]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 f8b4 	bl	8000bac <LCD_PCD8544_LL_set_YX_address_of_RAM>
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f000 f965 	bl	8000d14 <LCD_PCD8544_LL_end_data_transfer>

	//TODO can we do both parts within the same batch?

	// Per-se fill the RAM with the provided string
	LCD_PCD8544_LL_switch_to_data_mode(scr);
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f000 f942 	bl	8000cd4 <LCD_PCD8544_LL_switch_to_data_mode>
	LCD_PCD8544_LL_begin_data_transfer(scr);
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f000 f94f 	bl	8000cf4 <LCD_PCD8544_LL_begin_data_transfer>
	HAL_StatusTypeDef stat = LCD_PCD8544_LL_send_data(scr, bytes, size);
 8000a56:	8c3b      	ldrh	r3, [r7, #32]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f000 f81f 	bl	8000aa0 <LCD_PCD8544_LL_send_data>
 8000a62:	4603      	mov	r3, r0
 8000a64:	757b      	strb	r3, [r7, #21]
	LCD_PCD8544_LL_end_data_transfer(scr);
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f954 	bl	8000d14 <LCD_PCD8544_LL_end_data_transfer>

	return stat;
 8000a6c:	7d7b      	ldrb	r3, [r7, #21]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <LCD_PCD8544_clear_ram>:

HAL_StatusTypeDef LCD_PCD8544_clear_ram(LCD_PCD8544_screen_t* scr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af02      	add	r7, sp, #8
 8000a7e:	6078      	str	r0, [r7, #4]
	return LCD_PCD8544_write_bytes(scr, 0, 0, gZeroArray, sizeof(gZeroArray));
 8000a80:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <LCD_PCD8544_clear_ram+0x24>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ffb5 	bl	80009fc <LCD_PCD8544_write_bytes>
 8000a92:	4603      	mov	r3, r0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000298 	.word	0x20000298

08000aa0 <LCD_PCD8544_LL_send_data>:
#include "lcd_pcd8544_ll.h"

// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_send_data(LCD_PCD8544_screen_t* scr, unsigned char* bytes, unsigned short int nBytes)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat = HAL_SPI_Transmit(scr->mPinout.mSpiHandle, bytes, nBytes, SPI_TIMEOUT);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	f003 fbd7 	bl	800426a <HAL_SPI_Transmit>
 8000abc:	4603      	mov	r3, r0
 8000abe:	75fb      	strb	r3, [r7, #23]
	if (stat != HAL_OK) {
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <LCD_PCD8544_LL_send_data+0x36>
		HAL_GPIO_WritePin(scr->mPinout.mLcdErrorLedPort, scr->mPinout.mLcdErrorLedPin, GPIO_PIN_RESET);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	69d8      	ldr	r0, [r3, #28]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	8c1b      	ldrh	r3, [r3, #32]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f001 ffc5 	bl	8002a60 <HAL_GPIO_WritePin>
	}
	return stat;
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <LCD_PCD8544_LL_send_byte>:

HAL_StatusTypeDef LCD_PCD8544_LL_send_byte(LCD_PCD8544_screen_t* scr, unsigned char byte)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	unsigned short int nBytes = 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	81fb      	strh	r3, [r7, #14]
	return LCD_PCD8544_LL_send_data(scr, &byte, nBytes);
 8000af0:	89fa      	ldrh	r2, [r7, #14]
 8000af2:	1cfb      	adds	r3, r7, #3
 8000af4:	4619      	mov	r1, r3
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffd2 	bl	8000aa0 <LCD_PCD8544_LL_send_data>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <LCD_PCD8544_LL_set_function_set>:
// =============================================================================
// H=0 or H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_function_set(LCD_PCD8544_screen_t* scr, unsigned char pd, unsigned char v, unsigned char h)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b084      	sub	sp, #16
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	4608      	mov	r0, r1
 8000b10:	4611      	mov	r1, r2
 8000b12:	461a      	mov	r2, r3
 8000b14:	4603      	mov	r3, r0
 8000b16:	70fb      	strb	r3, [r7, #3]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70bb      	strb	r3, [r7, #2]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	707b      	strb	r3, [r7, #1]
	//TODO check that pd argument is within the limits
	//TODO check that v argument is within the limits
	//TODO check that h argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 5) | ((pd & 0x01) << 2) | ((v & 0x01) << 1) | (h & 0x1);
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	78bb      	ldrb	r3, [r7, #2]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b25a      	sxtb	r2, r3
 8000b42:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	4619      	mov	r1, r3
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffc2 	bl	8000ae0 <LCD_PCD8544_LL_send_byte>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <LCD_PCD8544_LL_set_display_control>:
// =============================================================================
// H=0
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_display_control(LCD_PCD8544_screen_t* scr, unsigned char d, unsigned char e)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b084      	sub	sp, #16
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	70fb      	strb	r3, [r7, #3]
 8000b72:	4613      	mov	r3, r2
 8000b74:	70bb      	strb	r3, [r7, #2]
	//TODO check that d argument is within the limits
	//TODO check that e argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 3) | ((d & 0x01) << 2) | (e & 0x01);
 8000b76:	78fb      	ldrb	r3, [r7, #3]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	b25a      	sxtb	r2, r3
 8000b88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff9f 	bl	8000ae0 <LCD_PCD8544_LL_send_byte>
 8000ba2:	4603      	mov	r3, r0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LCD_PCD8544_LL_set_YX_address_of_RAM>:
	unsigned char command = (1 << 7) | (x & 0x7f);
	return LCD_PCD8544_LL_send_byte(scr, command);
}

HAL_StatusTypeDef LCD_PCD8544_LL_set_YX_address_of_RAM(LCD_PCD8544_screen_t* scr, unsigned char y, unsigned char x)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	70fb      	strb	r3, [r7, #3]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	70bb      	strb	r3, [r7, #2]
	//TODO check that y argument is within the limits
	//TODO check that x argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char commands[2];
	commands[0] = (1 << 6) | (y & 0x07);
 8000bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	733b      	strb	r3, [r7, #12]
	commands[1] = (1 << 7) | (x & 0x7f);
 8000bd0:	78bb      	ldrb	r3, [r7, #2]
 8000bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	737b      	strb	r3, [r7, #13]
	return LCD_PCD8544_LL_send_data(scr, commands, 2);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2202      	movs	r2, #2
 8000be0:	4619      	mov	r1, r3
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff5c 	bl	8000aa0 <LCD_PCD8544_LL_send_data>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <LCD_PCD8544_LL_set_temperature_control>:
// =============================================================================
// H=1
// =============================================================================

HAL_StatusTypeDef LCD_PCD8544_LL_set_temperature_control(LCD_PCD8544_screen_t* scr, unsigned char tc)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	70fb      	strb	r3, [r7, #3]
	//TODO check that tc argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 2) | (tc & 0x03);
 8000bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	4619      	mov	r1, r3
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff63 	bl	8000ae0 <LCD_PCD8544_LL_send_byte>
 8000c1a:	4603      	mov	r3, r0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <LCD_PCD8544_LL_set_bias_system>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_bias_system(LCD_PCD8544_screen_t* scr, unsigned char bs)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
	//TODO check that bs argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 4) | (bs & 0x07);
 8000c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff4a 	bl	8000ae0 <LCD_PCD8544_LL_send_byte>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <LCD_PCD8544_LL_set_VOP>:

HAL_StatusTypeDef LCD_PCD8544_LL_set_VOP(LCD_PCD8544_screen_t* scr, unsigned char vop)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	70fb      	strb	r3, [r7, #3]
	//TODO check that vop argument is within the limits
	// Also, probably, implement proper error handling
	unsigned char command = (1 << 7) | (vop & 0x7f);
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c68:	73fb      	strb	r3, [r7, #15]
	return LCD_PCD8544_LL_send_byte(scr, command);
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff36 	bl	8000ae0 <LCD_PCD8544_LL_send_byte>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <LCD_PCD8544_LL_reset>:

// =============================================================================

// Send an RST pulse - required as the very first step before operating the LCD
void LCD_PCD8544_LL_reset(LCD_PCD8544_screen_t* scr) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_RESET);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6858      	ldr	r0, [r3, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	891b      	ldrh	r3, [r3, #8]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4619      	mov	r1, r3
 8000c92:	f001 fee5 	bl	8002a60 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 1ms // not really; HAL_Delay does not guarantee exact time
 8000c96:	2001      	movs	r0, #1
 8000c98:	f000 fd46 	bl	8001728 <HAL_Delay>
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiRstPort, scr->mPinout.mLcdSpiRstPin, GPIO_PIN_SET);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6858      	ldr	r0, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	891b      	ldrh	r3, [r3, #8]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f001 feda 	bl	8002a60 <HAL_GPIO_WritePin>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <LCD_PCD8544_LL_switch_to_commands_mode>:


void LCD_PCD8544_LL_switch_to_commands_mode(LCD_PCD8544_screen_t* scr) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_RESET);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6958      	ldr	r0, [r3, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	8b1b      	ldrh	r3, [r3, #24]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f001 feca 	bl	8002a60 <HAL_GPIO_WritePin>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <LCD_PCD8544_LL_switch_to_data_mode>:


void LCD_PCD8544_LL_switch_to_data_mode(LCD_PCD8544_screen_t* scr) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiDcPort, scr->mPinout.mLcdSpiDcPin, GPIO_PIN_SET);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6958      	ldr	r0, [r3, #20]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	8b1b      	ldrh	r3, [r3, #24]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f001 feba 	bl	8002a60 <HAL_GPIO_WritePin>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <LCD_PCD8544_LL_begin_data_transfer>:


void LCD_PCD8544_LL_begin_data_transfer(LCD_PCD8544_screen_t* scr) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_RESET);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68d8      	ldr	r0, [r3, #12]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	8a1b      	ldrh	r3, [r3, #16]
 8000d04:	2200      	movs	r2, #0
 8000d06:	4619      	mov	r1, r3
 8000d08:	f001 feaa 	bl	8002a60 <HAL_GPIO_WritePin>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <LCD_PCD8544_LL_end_data_transfer>:


void LCD_PCD8544_LL_end_data_transfer(LCD_PCD8544_screen_t* scr) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(scr->mPinout.mLcdSpiCePort, scr->mPinout.mLcdSpiCePin, GPIO_PIN_SET);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68d8      	ldr	r0, [r3, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	8a1b      	ldrh	r3, [r3, #16]
 8000d24:	2201      	movs	r2, #1
 8000d26:	4619      	mov	r1, r3
 8000d28:	f001 fe9a 	bl	8002a60 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d38:	f000 fc90 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3c:	f000 f83a 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d40:	f000 f9b2 	bl	80010a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d44:	f000 f8fc 	bl	8000f40 <MX_SPI1_Init>
  MX_ADC2_Init();
 8000d48:	f000 f88c 	bl	8000e64 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000d4c:	f000 f936 	bl	8000fbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <main+0x70>)
 8000d54:	f003 fe14 	bl	8004980 <HAL_TIM_PWM_Start>
  //HAL_ADCEx_Calibration_Start(&hadc2);



  // LCD - assign SPI interface and pins
  gLcdScreen.mPinout.mSpiHandle = &hspi1;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <main+0x74>)
 8000d5a:	4a14      	ldr	r2, [pc, #80]	; (8000dac <main+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  gLcdScreen.mPinout.mLcdSpiRstPort = LCD_RST_GPIO_Port;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <main+0x74>)
 8000d60:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d64:	605a      	str	r2, [r3, #4]
  gLcdScreen.mPinout.mLcdSpiRstPin = LCD_RST_Pin;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <main+0x74>)
 8000d68:	2208      	movs	r2, #8
 8000d6a:	811a      	strh	r2, [r3, #8]
  gLcdScreen.mPinout.mLcdSpiCePort = LCD_CE_GPIO_Port;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <main+0x74>)
 8000d6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d72:	60da      	str	r2, [r3, #12]
  gLcdScreen.mPinout.mLcdSpiCePin = LCD_CE_Pin;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <main+0x74>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	821a      	strh	r2, [r3, #16]
  gLcdScreen.mPinout.mLcdSpiDcPort = LCD_DC_GPIO_Port;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <main+0x74>)
 8000d7c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d80:	615a      	str	r2, [r3, #20]
  gLcdScreen.mPinout.mLcdSpiDcPin = LCD_DC_Pin;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <main+0x74>)
 8000d84:	2210      	movs	r2, #16
 8000d86:	831a      	strh	r2, [r3, #24]

  // LCD - initialize
  LCD_PCD8544_init(&gLcdScreen);
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <main+0x74>)
 8000d8a:	f7ff fdf1 	bl	8000970 <LCD_PCD8544_init>
  //HAL_Delay(1000);
  static u8 squarepusher[504] = { 0, 220, 220, 210, 210, 246, 118, 0, 126, 126, 102, 194, 194, 60, 60, 0, 62, 62, 192, 192, 254, 254, 0, 58, 58, 202, 202, 252, 252, 0, 248, 248, 6, 6, 30, 30, 0, 120, 120, 214, 214, 222, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 136, 136, 120, 120, 0, 248, 248, 0, 0, 248, 248, 0, 112, 112, 72, 72, 216, 216, 0, 254, 254, 32, 32, 224, 224, 0, 224, 224, 88, 88, 120, 120, 0, 224, 224, 24, 24, 120, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 243, 240, 240, 240, 240, 240, 240, 240, 243, 243, 243, 243, 240, 243, 243, 243, 243, 243, 241, 240, 243, 243, 240, 240, 243, 243, 240, 241, 241, 243, 243, 243, 243, 240, 243, 243, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };

  //LCD_PCD8544_write_bytes(&gLcdScreen,0,0,squarepusher,504);
  //HAL_Delay(2000);
   HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <main+0x7c>)
 8000d92:	f001 f810 	bl	8001db6 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  AnalogStickTest();
 8000d96:	f000 fa4b 	bl	8001230 <AnalogStickTest>

	  HAL_Delay(20);
 8000d9a:	2014      	movs	r0, #20
 8000d9c:	f000 fcc4 	bl	8001728 <HAL_Delay>
	  AnalogStickTest();
 8000da0:	e7f9      	b.n	8000d96 <main+0x62>
 8000da2:	bf00      	nop
 8000da4:	20000760 	.word	0x20000760
 8000da8:	20000490 	.word	0x20000490
 8000dac:	200006fc 	.word	0x200006fc
 8000db0:	200006ac 	.word	0x200006ac

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b096      	sub	sp, #88	; 0x58
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f004 fd2a 	bl	800581c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de8:	2302      	movs	r3, #2
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df0:	2310      	movs	r3, #16
 8000df2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df4:	2302      	movs	r3, #2
 8000df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000dfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fe42 	bl	8002a90 <HAL_RCC_OscConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e12:	f000 fa6d 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 fe6b 	bl	8003b0c <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e3c:	f000 fa58 	bl	80012f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e48:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 f843 	bl	8003ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e58:	f000 fa4a 	bl	80012f0 <Error_Handler>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3758      	adds	r7, #88	; 0x58
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000e7c:	4a2f      	ldr	r2, [pc, #188]	; (8000f3c <MX_ADC2_Init+0xd8>)
 8000e7e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e92:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea6:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000ec8:	2204      	movs	r2, #4
 8000eca:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ed8:	4817      	ldr	r0, [pc, #92]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000eda:	f000 fc49 	bl	8001770 <HAL_ADC_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000ee4:	f000 fa04 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000f06:	f000 ffc9 	bl	8001e9c <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000f10:	f000 f9ee 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f14:	2303      	movs	r3, #3
 8000f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_ADC2_Init+0xd4>)
 8000f22:	f000 ffbb 	bl	8001e9c <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000f2c:	f000 f9e0 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200006ac 	.word	0x200006ac
 8000f3c:	50000100 	.word	0x50000100

08000f40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <MX_SPI1_Init+0x78>)
 8000f48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f8e:	2207      	movs	r2, #7
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_SPI1_Init+0x74>)
 8000fa0:	f003 f8c0 	bl	8004124 <HAL_SPI_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f000 f9a1 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200006fc 	.word	0x200006fc
 8000fb8:	40013000 	.word	0x40013000

08000fbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08e      	sub	sp, #56	; 0x38
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8000ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_TIM2_Init+0xe8>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001016:	4823      	ldr	r0, [pc, #140]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8001018:	f003 fbfa 	bl	8004810 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001022:	f000 f965 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800102c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001030:	4619      	mov	r1, r3
 8001032:	481c      	ldr	r0, [pc, #112]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8001034:	f003 fea4 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800103e:	f000 f957 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001042:	4818      	ldr	r0, [pc, #96]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8001044:	f003 fc3b 	bl	80048be <HAL_TIM_PWM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800104e:	f000 f94f 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8001062:	f004 fb35 	bl	80056d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800106c:	f000 f940 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001070:	2360      	movs	r3, #96	; 0x60
 8001072:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8001088:	f003 fd66 	bl	8004b58 <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001092:	f000 f92d 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM2_Init+0xe8>)
 8001098:	f000 fa10 	bl	80014bc <HAL_TIM_MspPostInit>

}
 800109c:	bf00      	nop
 800109e:	3738      	adds	r7, #56	; 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000760 	.word	0x20000760

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	4a29      	ldr	r2, [pc, #164]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010c8:	6153      	str	r3, [r2, #20]
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b24      	ldr	r3, [pc, #144]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4a23      	ldr	r2, [pc, #140]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	6153      	str	r3, [r2, #20]
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	210a      	movs	r1, #10
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f001 fca7 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2110      	movs	r1, #16
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f001 fca1 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CE_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CE_Pin|LCD_RST_Pin|LCD_DC_Pin;
 800111e:	231a      	movs	r3, #26
 8001120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f001 fb20 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800113c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001140:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114e:	2307      	movs	r3, #7
 8001150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f001 fb0e 	bl	800277c <HAL_GPIO_Init>

}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000

0800116c <DrawCursor>:

#define TWELVE_BIT_MAX 4095
void DrawCursor(u16 adcX, u16 adcY){
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	80fb      	strh	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	80bb      	strh	r3, [r7, #4]
	f32 FractionDeviationFromCenterX = (f32)adcX / (f32)TWELVE_BIT_MAX;
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001186:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001220 <DrawCursor+0xb4>
 800118a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118e:	edc7 7a05 	vstr	s15, [r7, #20]
	FractionDeviationFromCenterX -= 0.5f;
 8001192:	edd7 7a05 	vldr	s15, [r7, #20]
 8001196:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800119a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800119e:	edc7 7a05 	vstr	s15, [r7, #20]


	f32 FractionDeviationFromCenterY = (f32)adcY / (f32)TWELVE_BIT_MAX;
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ac:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001220 <DrawCursor+0xb4>
 80011b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b4:	edc7 7a04 	vstr	s15, [r7, #16]
	FractionDeviationFromCenterY -= 0.5f;
 80011b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011c4:	edc7 7a04 	vstr	s15, [r7, #16]

	f32 pixelPosX = FractionDeviationFromCenterX * (f32)PIXELS_WIDTH;
 80011c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011cc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001224 <DrawCursor+0xb8>
 80011d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d4:	edc7 7a03 	vstr	s15, [r7, #12]
	f32 pixelPosY = FractionDeviationFromCenterY * (f32)PIXELS_HEIGHT;
 80011d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011dc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001228 <DrawCursor+0xbc>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	edc7 7a02 	vstr	s15, [r7, #8]
	gfxPlotPixel((PIXELS_WIDTH/2.0f)+pixelPosX + 2, (PIXELS_HEIGHT/2.0f)+pixelPosY);
	gfxPlotPixel((PIXELS_WIDTH/2.0f)+pixelPosX, (PIXELS_HEIGHT/2.0f)+pixelPosY - 2);
	gfxPlotPixel((PIXELS_WIDTH/2.0f)+pixelPosX, (PIXELS_HEIGHT/2.0f)+pixelPosY + 2);

	*/
	gfxMidPointCircleDraw((PIXELS_WIDTH/2.0f)+pixelPosX, (PIXELS_HEIGHT/2.0f)+pixelPosY,6);
 80011e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800122c <DrawCursor+0xc0>
 80011f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011f4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80011f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011fc:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001208:	2206      	movs	r2, #6
 800120a:	ee17 1a90 	vmov	r1, s15
 800120e:	ee16 0a90 	vmov	r0, s13
 8001212:	f7ff faab 	bl	800076c <gfxMidPointCircleDraw>

}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	457ff000 	.word	0x457ff000
 8001224:	42a80000 	.word	0x42a80000
 8001228:	42400000 	.word	0x42400000
 800122c:	42280000 	.word	0x42280000

08001230 <AnalogStickTest>:

/* USER CODE BEGIN 4 */
void AnalogStickTest(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
	//LCD_PCD8544_clear_ram(&gLcdScreen);
	HAL_ADC_Start(&hadc2);
 8001236:	4829      	ldr	r0, [pc, #164]	; (80012dc <AnalogStickTest+0xac>)
 8001238:	f000 fc2c 	bl	8001a94 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc2, 1);
 800123c:	2101      	movs	r1, #1
 800123e:	4827      	ldr	r0, [pc, #156]	; (80012dc <AnalogStickTest+0xac>)
 8001240:	f000 fcde 	bl	8001c00 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(&hadc2);
 8001244:	4825      	ldr	r0, [pc, #148]	; (80012dc <AnalogStickTest+0xac>)
 8001246:	f000 fda9 	bl	8001d9c <HAL_ADC_GetValue>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <AnalogStickTest+0xb0>)
 8001250:	801a      	strh	r2, [r3, #0]
	uint16_t y = AD_RES;
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <AnalogStickTest+0xb0>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	83fb      	strh	r3, [r7, #30]

	// Start ADC Conversion
	HAL_ADC_Start(&hadc2);
 8001258:	4820      	ldr	r0, [pc, #128]	; (80012dc <AnalogStickTest+0xac>)
 800125a:	f000 fc1b 	bl	8001a94 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc2, 1);
 800125e:	2101      	movs	r1, #1
 8001260:	481e      	ldr	r0, [pc, #120]	; (80012dc <AnalogStickTest+0xac>)
 8001262:	f000 fccd 	bl	8001c00 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(&hadc2);
 8001266:	481d      	ldr	r0, [pc, #116]	; (80012dc <AnalogStickTest+0xac>)
 8001268:	f000 fd98 	bl	8001d9c <HAL_ADC_GetValue>
 800126c:	4603      	mov	r3, r0
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <AnalogStickTest+0xb0>)
 8001272:	801a      	strh	r2, [r3, #0]
	uint16_t x = AD_RES;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <AnalogStickTest+0xb0>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	83bb      	strh	r3, [r7, #28]
	x &= 0xfff;
 800127a:	8bbb      	ldrh	r3, [r7, #28]
 800127c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001280:	83bb      	strh	r3, [r7, #28]
	y &= 0xfff;
 8001282:	8bfb      	ldrh	r3, [r7, #30]
 8001284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001288:	83fb      	strh	r3, [r7, #30]
	char xString[10];// = {'x','=',' ',' ',' ',' ',' ',0x00};
	char yString[10]; // = {'y','=',' ',' ',' ',' ',' ',0x00};
	sprintf(xString,"x = %d", x);
 800128a:	8bba      	ldrh	r2, [r7, #28]
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4914      	ldr	r1, [pc, #80]	; (80012e4 <AnalogStickTest+0xb4>)
 8001292:	4618      	mov	r0, r3
 8001294:	f004 faca 	bl	800582c <siprintf>
	sprintf(yString,"y = %d", y);
 8001298:	8bfa      	ldrh	r2, [r7, #30]
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4912      	ldr	r1, [pc, #72]	; (80012e8 <AnalogStickTest+0xb8>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fac4 	bl	800582c <siprintf>
	gfxClearFrameBuffer();
 80012a4:	f7ff f81c 	bl	80002e0 <gfxClearFrameBuffer>
	gfxWriteTextLineToFrameBuffer(0,0,xString);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	461a      	mov	r2, r3
 80012ae:	2100      	movs	r1, #0
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff f98b 	bl	80005cc <gfxWriteTextLineToFrameBuffer>
	gfxWriteTextLineToFrameBuffer(1,0,yString);
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	461a      	mov	r2, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff f985 	bl	80005cc <gfxWriteTextLineToFrameBuffer>

	DrawCursor(x,y);
 80012c2:	8bfa      	ldrh	r2, [r7, #30]
 80012c4:	8bbb      	ldrh	r3, [r7, #28]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff4f 	bl	800116c <DrawCursor>
	gfxFinishDrawing(&gLcdScreen);
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <AnalogStickTest+0xbc>)
 80012d0:	f7ff f8c8 	bl	8000464 <gfxFinishDrawing>
	//LCD_PCD8544_write_line(&gLcdScreen, 1, xString);
	//LCD_PCD8544_write_line(&gLcdScreen, 2, yString);
}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200006ac 	.word	0x200006ac
 80012e0:	200007ac 	.word	0x200007ac
 80012e4:	08006104 	.word	0x08006104
 80012e8:	0800610c 	.word	0x0800610c
 80012ec:	20000490 	.word	0x20000490

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_MspInit+0x44>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_MspInit+0x44>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_MspInit+0x44>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_MspInit+0x44>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_MspInit+0x44>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_MspInit+0x44>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <HAL_ADC_MspInit+0x74>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d124      	bne.n	80013b0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_ADC_MspInit+0x78>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_ADC_MspInit+0x78>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6153      	str	r3, [r2, #20]
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_ADC_MspInit+0x78>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_ADC_MspInit+0x78>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_ADC_MspInit+0x78>)
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	6153      	str	r3, [r2, #20]
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_ADC_MspInit+0x78>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = ANALOGUE_STICK_VRy_Pin|ANALOGUE_STICK_VRx_Pin;
 8001396:	2360      	movs	r3, #96	; 0x60
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ac:	f001 f9e6 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	50000100 	.word	0x50000100
 80013bc:	40021000 	.word	0x40021000

080013c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a25      	ldr	r2, [pc, #148]	; (8001474 <HAL_SPI_MspInit+0xb4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d144      	bne.n	800146c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <HAL_SPI_MspInit+0xb8>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a24      	ldr	r2, [pc, #144]	; (8001478 <HAL_SPI_MspInit+0xb8>)
 80013e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_SPI_MspInit+0xb8>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_SPI_MspInit+0xb8>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <HAL_SPI_MspInit+0xb8>)
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	6153      	str	r3, [r2, #20]
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_SPI_MspInit+0xb8>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_SPI_MspInit+0xb8>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_SPI_MspInit+0xb8>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6153      	str	r3, [r2, #20]
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_SPI_MspInit+0xb8>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800143a:	2305      	movs	r3, #5
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f001 f998 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800144c:	2308      	movs	r3, #8
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145c:	2305      	movs	r3, #5
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_SPI_MspInit+0xbc>)
 8001468:	f001 f988 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013000 	.word	0x40013000
 8001478:	40021000 	.word	0x40021000
 800147c:	48000400 	.word	0x48000400

08001480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001490:	d10b      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_TIM_Base_MspInit+0x38>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_TIM_Base_MspInit+0x38>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_TIM_Base_MspInit+0x38>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014dc:	d11c      	bne.n	8001518 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_TIM_MspPostInit+0x64>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <HAL_TIM_MspPostInit+0x64>)
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	6153      	str	r3, [r2, #20]
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_TIM_MspPostInit+0x64>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f6:	2301      	movs	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001506:	2301      	movs	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f001 f932 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 f8ba 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f004 f900 	bl	80057ac <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20003000 	.word	0x20003000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	200007b0 	.word	0x200007b0
 80015e0:	200007c8 	.word	0x200007c8

080015e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <LoopForever+0x6>)
  ldr r1, =_edata
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <LoopForever+0xe>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001624:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <LoopForever+0x16>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001632:	f7ff ffd7 	bl	80015e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f004 f8bf 	bl	80057b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800163a:	f7ff fb7b 	bl	8000d34 <main>

0800163e <LoopForever>:

LoopForever:
    b LoopForever
 800163e:	e7fe      	b.n	800163e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001640:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800164c:	0800678c 	.word	0x0800678c
  ldr r2, =_sbss
 8001650:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001654:	200007c8 	.word	0x200007c8

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f001 f851 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fe40 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 f85b 	bl	8002762 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f001 f831 	bl	800272a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	200007b4 	.word	0x200007b4

08001710 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;  
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200007b4 	.word	0x200007b4

08001728 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09a      	sub	sp, #104	; 0x68
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e172      	b.n	8001a76 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d176      	bne.n	8001890 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d152      	bne.n	8001850 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fdbd 	bl	8001344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d13b      	bne.n	8001850 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fe83 	bl	80024e4 <ADC_Disable>
 80017de:	4603      	mov	r3, r0
 80017e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d12f      	bne.n	8001850 <HAL_ADC_Init+0xe0>
 80017f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d12b      	bne.n	8001850 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001800:	f023 0302 	bic.w	r3, r3, #2
 8001804:	f043 0202 	orr.w	r2, r3, #2
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800181a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800182a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800182c:	4b94      	ldr	r3, [pc, #592]	; (8001a80 <HAL_ADC_Init+0x310>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a94      	ldr	r2, [pc, #592]	; (8001a84 <HAL_ADC_Init+0x314>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	0c9a      	lsrs	r2, r3, #18
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001842:	e002      	b.n	800184a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3b01      	subs	r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800186c:	d110      	bne.n	8001890 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f023 0312 	bic.w	r3, r3, #18
 8001876:	f043 0210 	orr.w	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	f040 80df 	bne.w	8001a5c <HAL_ADC_Init+0x2ec>
 800189e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 80da 	bne.w	8001a5c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 80d2 	bne.w	8001a5c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018c0:	f043 0202 	orr.w	r2, r3, #2
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c8:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <HAL_ADC_Init+0x318>)
 80018ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d4:	d102      	bne.n	80018dc <HAL_ADC_Init+0x16c>
 80018d6:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <HAL_ADC_Init+0x31c>)
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e002      	b.n	80018e2 <HAL_ADC_Init+0x172>
 80018dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018e0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d108      	bne.n	8001902 <HAL_ADC_Init+0x192>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Init+0x192>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_ADC_Init+0x194>
 8001902:	2300      	movs	r3, #0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d11c      	bne.n	8001942 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001908:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800190a:	2b00      	cmp	r3, #0
 800190c:	d010      	beq.n	8001930 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_ADC_Init+0x1ba>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x1ba>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_ADC_Init+0x1bc>
 800192a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800192c:	2b00      	cmp	r3, #0
 800192e:	d108      	bne.n	8001942 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	431a      	orrs	r2, r3
 800193e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001940:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7e5b      	ldrb	r3, [r3, #25]
 8001946:	035b      	lsls	r3, r3, #13
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800194c:	2a01      	cmp	r2, #1
 800194e:	d002      	beq.n	8001956 <HAL_ADC_Init+0x1e6>
 8001950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001954:	e000      	b.n	8001958 <HAL_ADC_Init+0x1e8>
 8001956:	2200      	movs	r2, #0
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4313      	orrs	r3, r2
 8001966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001968:	4313      	orrs	r3, r2
 800196a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d11b      	bne.n	80019ae <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7e5b      	ldrb	r3, [r3, #25]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	3b01      	subs	r3, #1
 8001984:	045a      	lsls	r2, r3, #17
 8001986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001988:	4313      	orrs	r3, r2
 800198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198e:	663b      	str	r3, [r7, #96]	; 0x60
 8001990:	e00d      	b.n	80019ae <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800199a:	f043 0220 	orr.w	r2, r3, #32
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d007      	beq.n	80019c6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	4313      	orrs	r3, r2
 80019c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019c2:	4313      	orrs	r3, r2
 80019c4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d114      	bne.n	80019fe <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e2:	f023 0302 	bic.w	r3, r3, #2
 80019e6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e1b      	ldrb	r3, [r3, #24]
 80019ec:	039a      	lsls	r2, r3, #14
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4313      	orrs	r3, r2
 80019f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019fa:	4313      	orrs	r3, r2
 80019fc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_ADC_Init+0x320>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d10c      	bne.n	8001a34 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	f023 010f 	bic.w	r1, r3, #15
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
 8001a32:	e007      	b.n	8001a44 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 020f 	bic.w	r2, r2, #15
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f023 0303 	bic.w	r3, r3, #3
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
 8001a5a:	e00a      	b.n	8001a72 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f023 0312 	bic.w	r3, r3, #18
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3768      	adds	r7, #104	; 0x68
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000000 	.word	0x20000000
 8001a84:	431bde83 	.word	0x431bde83
 8001a88:	50000300 	.word	0x50000300
 8001a8c:	50000100 	.word	0x50000100
 8001a90:	fff0c007 	.word	0xfff0c007

08001a94 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 809c 	bne.w	8001be8 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Start+0x2a>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e097      	b.n	8001bee <HAL_ADC_Start+0x15a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fca8 	bl	800241c <ADC_Enable>
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 8083 	bne.w	8001bde <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <HAL_ADC_Start+0x164>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_ADC_Start+0x6e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b00:	d115      	bne.n	8001b2e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d027      	beq.n	8001b6c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b2c:	e01e      	b.n	8001b6c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b42:	d004      	beq.n	8001b4e <HAL_ADC_Start+0xba>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2c      	ldr	r2, [pc, #176]	; (8001bfc <HAL_ADC_Start+0x168>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10e      	bne.n	8001b6c <HAL_ADC_Start+0xd8>
 8001b4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f023 0206 	bic.w	r2, r3, #6
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
 8001b86:	e002      	b.n	8001b8e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	221c      	movs	r2, #28
 8001b9c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_ADC_Start+0x164>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d010      	beq.n	8001bcc <HAL_ADC_Start+0x138>
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_ADC_Start+0x164>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d00a      	beq.n	8001bcc <HAL_ADC_Start+0x138>
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_ADC_Start+0x164>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2b09      	cmp	r3, #9
 8001bc0:	d004      	beq.n	8001bcc <HAL_ADC_Start+0x138>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bca:	d10f      	bne.n	8001bec <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0204 	orr.w	r2, r2, #4
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	e006      	b.n	8001bec <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001be6:	e001      	b.n	8001bec <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
 8001bea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	50000300 	.word	0x50000300
 8001bfc:	50000100 	.word	0x50000100

08001c00 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d102      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001c16:	2308      	movs	r3, #8
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e02e      	b.n	8001c7a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c1c:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <HAL_ADC_PollForConversion+0x198>)
 8001c1e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d112      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d11d      	bne.n	8001c76 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f043 0220 	orr.w	r2, r3, #32
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e09d      	b.n	8001d8e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f043 0220 	orr.w	r2, r3, #32
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e08b      	b.n	8001d8e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001c76:	230c      	movs	r3, #12
 8001c78:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_ADC_PollForConversion+0x198>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <HAL_ADC_PollForConversion+0x90>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c8e:	d104      	bne.n	8001c9a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e003      	b.n	8001ca2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001ca2:	f7ff fd35 	bl	8001710 <HAL_GetTick>
 8001ca6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ca8:	e021      	b.n	8001cee <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d01d      	beq.n	8001cee <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_ADC_PollForConversion+0xc8>
 8001cb8:	f7ff fd2a 	bl	8001710 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d212      	bcs.n	8001cee <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10b      	bne.n	8001cee <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f043 0204 	orr.w	r2, r3, #4
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e04f      	b.n	8001d8e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0d6      	beq.n	8001caa <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d131      	bne.n	8001d7a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d12c      	bne.n	8001d7a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d125      	bne.n	8001d7a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d112      	bne.n	8001d62 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d112      	bne.n	8001d7a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d60:	e00b      	b.n	8001d7a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f043 0220 	orr.w	r2, r3, #32
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f043 0201 	orr.w	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d103      	bne.n	8001d8c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	50000300 	.word	0x50000300

08001d9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADCEx_Calibration_Start+0x1c>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e05f      	b.n	8001e92 <HAL_ADCEx_Calibration_Start+0xdc>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fb82 	bl	80024e4 <ADC_Disable>
 8001de0:	4603      	mov	r3, r0
 8001de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d14e      	bne.n	8001e88 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001dfe:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e14:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e24:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001e26:	f7ff fc73 	bl	8001710 <HAL_GetTick>
 8001e2a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e2c:	e01c      	b.n	8001e68 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e2e:	f7ff fc6f 	bl	8001710 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b0a      	cmp	r3, #10
 8001e3a:	d915      	bls.n	8001e68 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e4a:	d10d      	bne.n	8001e68 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f023 0312 	bic.w	r3, r3, #18
 8001e54:	f043 0210 	orr.w	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e014      	b.n	8001e92 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e76:	d0da      	beq.n	8001e2e <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f023 0303 	bic.w	r3, r3, #3
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b09b      	sub	sp, #108	; 0x6c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x22>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e2a4      	b.n	8002408 <HAL_ADC_ConfigChannel+0x56c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 8288 	bne.w	80023e6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d81c      	bhi.n	8001f18 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	231f      	movs	r3, #31
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	4019      	ands	r1, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
 8001f16:	e063      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	d81e      	bhi.n	8001f5e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	221f      	movs	r2, #31
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4019      	ands	r1, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	3b1e      	subs	r3, #30
 8001f50:	fa00 f203 	lsl.w	r2, r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5c:	e040      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b0e      	cmp	r3, #14
 8001f64:	d81e      	bhi.n	8001fa4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	3b3c      	subs	r3, #60	; 0x3c
 8001f7a:	221f      	movs	r2, #31
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4019      	ands	r1, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	3b3c      	subs	r3, #60	; 0x3c
 8001f96:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa2:	e01d      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	3b5a      	subs	r3, #90	; 0x5a
 8001fb8:	221f      	movs	r2, #31
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	4019      	ands	r1, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	3b5a      	subs	r3, #90	; 0x5a
 8001fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80e5 	bne.w	80021ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	d91c      	bls.n	8002032 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6999      	ldr	r1, [r3, #24]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	3b1e      	subs	r3, #30
 800200a:	2207      	movs	r2, #7
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	4019      	ands	r1, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6898      	ldr	r0, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	3b1e      	subs	r3, #30
 8002024:	fa00 f203 	lsl.w	r2, r0, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	619a      	str	r2, [r3, #24]
 8002030:	e019      	b.n	8002066 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6959      	ldr	r1, [r3, #20]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	2207      	movs	r2, #7
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	4019      	ands	r1, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6898      	ldr	r0, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	fa00 f203 	lsl.w	r2, r0, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	3b01      	subs	r3, #1
 8002084:	2b03      	cmp	r3, #3
 8002086:	d84f      	bhi.n	8002128 <HAL_ADC_ConfigChannel+0x28c>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_ADC_ConfigChannel+0x1f4>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020a1 	.word	0x080020a1
 8002094:	080020c3 	.word	0x080020c3
 8002098:	080020e5 	.word	0x080020e5
 800209c:	08002107 	.word	0x08002107
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020a6:	4b94      	ldr	r3, [pc, #592]	; (80022f8 <HAL_ADC_ConfigChannel+0x45c>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	0691      	lsls	r1, r2, #26
 80020b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020b2:	430a      	orrs	r2, r1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020c0:	e07e      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020c8:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <HAL_ADC_ConfigChannel+0x45c>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	0691      	lsls	r1, r2, #26
 80020d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020d4:	430a      	orrs	r2, r1
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020e2:	e06d      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020ea:	4b83      	ldr	r3, [pc, #524]	; (80022f8 <HAL_ADC_ConfigChannel+0x45c>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	0691      	lsls	r1, r2, #26
 80020f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020f6:	430a      	orrs	r2, r1
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002102:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002104:	e05c      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800210c:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <HAL_ADC_ConfigChannel+0x45c>)
 800210e:	4013      	ands	r3, r2
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	0691      	lsls	r1, r2, #26
 8002116:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002118:	430a      	orrs	r2, r1
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002124:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002126:	e04b      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	069b      	lsls	r3, r3, #26
 8002138:	429a      	cmp	r2, r3
 800213a:	d107      	bne.n	800214c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800214a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002152:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	069b      	lsls	r3, r3, #26
 800215c:	429a      	cmp	r2, r3
 800215e:	d107      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800216e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002176:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	069b      	lsls	r3, r3, #26
 8002180:	429a      	cmp	r2, r3
 8002182:	d107      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002192:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	069b      	lsls	r3, r3, #26
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d10a      	bne.n	80021be <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80021b8:	e001      	b.n	80021be <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80021ba:	bf00      	nop
 80021bc:	e000      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80021be:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d108      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x344>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x344>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x346>
 80021e0:	2300      	movs	r3, #0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 810a 	bne.w	80023fc <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d00f      	beq.n	8002210 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2201      	movs	r2, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	400a      	ands	r2, r1
 800220a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800220e:	e049      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2201      	movs	r2, #1
 800221e:	409a      	lsls	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b09      	cmp	r3, #9
 8002230:	d91c      	bls.n	800226c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6999      	ldr	r1, [r3, #24]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	3b1b      	subs	r3, #27
 8002244:	2207      	movs	r2, #7
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	4019      	ands	r1, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6898      	ldr	r0, [r3, #8]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	3b1b      	subs	r3, #27
 800225e:	fa00 f203 	lsl.w	r2, r0, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	619a      	str	r2, [r3, #24]
 800226a:	e01b      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6959      	ldr	r1, [r3, #20]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	2207      	movs	r2, #7
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	4019      	ands	r1, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6898      	ldr	r0, [r3, #8]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	fa00 f203 	lsl.w	r2, r0, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_ADC_ConfigChannel+0x460>)
 80022a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d105      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022c0:	2b11      	cmp	r3, #17
 80022c2:	d105      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00b      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022d4:	2b12      	cmp	r3, #18
 80022d6:	f040 8091 	bne.w	80023fc <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80022da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 808a 	bne.w	80023fc <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f0:	d108      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x468>
 80022f2:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_ADC_ConfigChannel+0x464>)
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e008      	b.n	800230a <HAL_ADC_ConfigChannel+0x46e>
 80022f8:	83fff000 	.word	0x83fff000
 80022fc:	50000300 	.word	0x50000300
 8002300:	50000100 	.word	0x50000100
 8002304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002308:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_ADC_ConfigChannel+0x48e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x48e>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_ADC_ConfigChannel+0x490>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d150      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002330:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d010      	beq.n	8002358 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x4b6>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x4b6>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_ADC_ConfigChannel+0x4b8>
 8002352:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002354:	2b00      	cmp	r3, #0
 8002356:	d13c      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b10      	cmp	r3, #16
 800235e:	d11d      	bne.n	800239c <HAL_ADC_ConfigChannel+0x500>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002368:	d118      	bne.n	800239c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800236a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002374:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002376:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_ADC_ConfigChannel+0x578>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a27      	ldr	r2, [pc, #156]	; (8002418 <HAL_ADC_ConfigChannel+0x57c>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	0c9a      	lsrs	r2, r3, #18
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800238c:	e002      	b.n	8002394 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	3b01      	subs	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f9      	bne.n	800238e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800239a:	e02e      	b.n	80023fa <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b11      	cmp	r3, #17
 80023a2:	d10b      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x520>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ac:	d106      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80023ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80023b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023ba:	e01e      	b.n	80023fa <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b12      	cmp	r3, #18
 80023c2:	d11a      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80023c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023d0:	e013      	b.n	80023fa <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023e4:	e00a      	b.n	80023fc <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023f8:	e000      	b.n	80023fc <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023fa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002408:	4618      	mov	r0, r3
 800240a:	376c      	adds	r7, #108	; 0x6c
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	20000000 	.word	0x20000000
 8002418:	431bde83 	.word	0x431bde83

0800241c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <ADC_Enable+0x2c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <ADC_Enable+0x2c>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <ADC_Enable+0x2e>
 8002448:	2300      	movs	r3, #0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d143      	bne.n	80024d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <ADC_Enable+0xc4>)
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00d      	beq.n	8002478 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f043 0210 	orr.w	r2, r3, #16
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e02f      	b.n	80024d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002488:	f7ff f942 	bl	8001710 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800248e:	e01b      	b.n	80024c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002490:	f7ff f93e 	bl	8001710 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d914      	bls.n	80024c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d00d      	beq.n	80024c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f043 0210 	orr.w	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e007      	b.n	80024d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d1dc      	bne.n	8002490 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	8000003f 	.word	0x8000003f

080024e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <ADC_Disable+0x2c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <ADC_Disable+0x2c>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <ADC_Disable+0x2e>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d047      	beq.n	80025a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030d 	and.w	r3, r3, #13
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10f      	bne.n	8002544 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0202 	orr.w	r2, r2, #2
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2203      	movs	r2, #3
 800253a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800253c:	f7ff f8e8 	bl	8001710 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002542:	e029      	b.n	8002598 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f043 0210 	orr.w	r2, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e023      	b.n	80025a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002560:	f7ff f8d6 	bl	8001710 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d914      	bls.n	8002598 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10d      	bne.n	8002598 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0210 	orr.w	r2, r3, #16
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d0dc      	beq.n	8002560 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e2:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <__NVIC_GetPriorityGrouping+0x18>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	f003 0307 	and.w	r3, r3, #7
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e0:	d301      	bcc.n	80026e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <SysTick_Config+0x40>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ee:	210f      	movs	r1, #15
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f7ff ff8e 	bl	8002614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <SysTick_Config+0x40>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <SysTick_Config+0x40>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff47 	bl	80025b0 <__NVIC_SetPriorityGrouping>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff5c 	bl	80025f8 <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff8e 	bl	8002668 <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5d 	bl	8002614 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffb0 	bl	80026d0 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278a:	e14e      	b.n	8002a2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8140 	beq.w	8002a24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d005      	beq.n	80027bc <HAL_GPIO_Init+0x40>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d130      	bne.n	800281e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f2:	2201      	movs	r2, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f003 0201 	and.w	r2, r3, #1
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b03      	cmp	r3, #3
 8002828:	d017      	beq.n	800285a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d123      	bne.n	80028ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	6939      	ldr	r1, [r7, #16]
 80028aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0203 	and.w	r2, r3, #3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 809a 	beq.w	8002a24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f0:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_GPIO_Init+0x2cc>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4a54      	ldr	r2, [pc, #336]	; (8002a48 <HAL_GPIO_Init+0x2cc>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	4b52      	ldr	r3, [pc, #328]	; (8002a48 <HAL_GPIO_Init+0x2cc>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002908:	4a50      	ldr	r2, [pc, #320]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	220f      	movs	r2, #15
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002932:	d013      	beq.n	800295c <HAL_GPIO_Init+0x1e0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a46      	ldr	r2, [pc, #280]	; (8002a50 <HAL_GPIO_Init+0x2d4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00d      	beq.n	8002958 <HAL_GPIO_Init+0x1dc>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a45      	ldr	r2, [pc, #276]	; (8002a54 <HAL_GPIO_Init+0x2d8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d007      	beq.n	8002954 <HAL_GPIO_Init+0x1d8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a44      	ldr	r2, [pc, #272]	; (8002a58 <HAL_GPIO_Init+0x2dc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_GPIO_Init+0x1d4>
 800294c:	2303      	movs	r3, #3
 800294e:	e006      	b.n	800295e <HAL_GPIO_Init+0x1e2>
 8002950:	2305      	movs	r3, #5
 8002952:	e004      	b.n	800295e <HAL_GPIO_Init+0x1e2>
 8002954:	2302      	movs	r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x1e2>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_GPIO_Init+0x1e2>
 800295c:	2300      	movs	r3, #0
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	f002 0203 	and.w	r2, r2, #3
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	4093      	lsls	r3, r2
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800296e:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_GPIO_Init+0x2e0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029a0:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <HAL_GPIO_Init+0x2e0>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a6:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_GPIO_Init+0x2e0>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029ca:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_GPIO_Init+0x2e0>)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_GPIO_Init+0x2e0>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029f4:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_GPIO_Init+0x2e0>)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_GPIO_Init+0x2e0>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a1e:	4a0f      	ldr	r2, [pc, #60]	; (8002a5c <HAL_GPIO_Init+0x2e0>)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3301      	adds	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f47f aea9 	bne.w	800278c <HAL_GPIO_Init+0x10>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	48000400 	.word	0x48000400
 8002a54:	48000800 	.word	0x48000800
 8002a58:	48000c00 	.word	0x48000c00
 8002a5c:	40010400 	.word	0x40010400

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a7c:	e002      	b.n	8002a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f001 b823 	b.w	8003afc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 817d 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002acc:	4bbc      	ldr	r3, [pc, #752]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d00c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad8:	4bb9      	ldr	r3, [pc, #740]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d15c      	bne.n	8002b9e <HAL_RCC_OscConfig+0x10e>
 8002ae4:	4bb6      	ldr	r3, [pc, #728]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d155      	bne.n	8002b9e <HAL_RCC_OscConfig+0x10e>
 8002af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002af6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_OscConfig+0x94>
 8002b1e:	4ba8      	ldr	r3, [pc, #672]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	e015      	b.n	8002b50 <HAL_RCC_OscConfig+0xc0>
 8002b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b3c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b40:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b4c:	4b9c      	ldr	r3, [pc, #624]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b54:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b58:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b5c:	fa92 f2a2 	rbit	r2, r2
 8002b60:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002b64:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002b68:	fab2 f282 	clz	r2, r2
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	f042 0220 	orr.w	r2, r2, #32
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f002 021f 	and.w	r2, r2, #31
 8002b78:	2101      	movs	r1, #1
 8002b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 811f 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x334>
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 8116 	bne.w	8002dc4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f000 bfaf 	b.w	8003afc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12e>
 8002bb0:	4b83      	ldr	r3, [pc, #524]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a82      	ldr	r2, [pc, #520]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	e036      	b.n	8002c2c <HAL_RCC_OscConfig+0x19c>
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x158>
 8002bce:	4b7c      	ldr	r3, [pc, #496]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7b      	ldr	r2, [pc, #492]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b79      	ldr	r3, [pc, #484]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a78      	ldr	r2, [pc, #480]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e021      	b.n	8002c2c <HAL_RCC_OscConfig+0x19c>
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x184>
 8002bfa:	4b71      	ldr	r3, [pc, #452]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a70      	ldr	r2, [pc, #448]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b6e      	ldr	r3, [pc, #440]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6d      	ldr	r2, [pc, #436]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x19c>
 8002c14:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a69      	ldr	r2, [pc, #420]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4b67      	ldr	r3, [pc, #412]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a66      	ldr	r2, [pc, #408]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c2c:	4b64      	ldr	r3, [pc, #400]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	f023 020f 	bic.w	r2, r3, #15
 8002c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	495f      	ldr	r1, [pc, #380]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d059      	beq.n	8002d0a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fd5b 	bl	8001710 <HAL_GetTick>
 8002c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fd56 	bl	8001710 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b64      	cmp	r3, #100	; 0x64
 8002c6e:	d902      	bls.n	8002c76 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	f000 bf43 	b.w	8003afc <HAL_RCC_OscConfig+0x106c>
 8002c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d102      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x218>
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	e015      	b.n	8002cd4 <HAL_RCC_OscConfig+0x244>
 8002ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cd8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cdc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ce0:	fa92 f2a2 	rbit	r2, r2
 8002ce4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ce8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002cec:	fab2 f282 	clz	r2, r2
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	f042 0220 	orr.w	r2, r2, #32
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	f002 021f 	and.w	r2, r2, #31
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ab      	beq.n	8002c60 <HAL_RCC_OscConfig+0x1d0>
 8002d08:	e05d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fd01 	bl	8001710 <HAL_GetTick>
 8002d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fcfc 	bl	8001710 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b64      	cmp	r3, #100	; 0x64
 8002d22:	d902      	bls.n	8002d2a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	f000 bee9 	b.w	8003afc <HAL_RCC_OscConfig+0x106c>
 8002d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d2e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2cc>
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	e015      	b.n	8002d88 <HAL_RCC_OscConfig+0x2f8>
 8002d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d60:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d74:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_RCC_OscConfig+0x330>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d8c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d90:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d94:	fa92 f2a2 	rbit	r2, r2
 8002d98:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d9c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0220 	orr.w	r2, r2, #32
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ab      	bne.n	8002d14 <HAL_RCC_OscConfig+0x284>
 8002dbc:	e003      	b.n	8002dc6 <HAL_RCC_OscConfig+0x336>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 817d 	beq.w	80030d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ddc:	4ba6      	ldr	r3, [pc, #664]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002de8:	4ba3      	ldr	r3, [pc, #652]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d172      	bne.n	8002eda <HAL_RCC_OscConfig+0x44a>
 8002df4:	4ba0      	ldr	r3, [pc, #640]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d16c      	bne.n	8002eda <HAL_RCC_OscConfig+0x44a>
 8002e00:	2302      	movs	r3, #2
 8002e02:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e12:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_OscConfig+0x3a0>
 8002e2a:	4b93      	ldr	r3, [pc, #588]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	e013      	b.n	8002e58 <HAL_RCC_OscConfig+0x3c8>
 8002e30:	2302      	movs	r3, #2
 8002e32:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e42:	2302      	movs	r3, #2
 8002e44:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e54:	4b88      	ldr	r3, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e5e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e62:	fa92 f2a2 	rbit	r2, r2
 8002e66:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e6a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e6e:	fab2 f282 	clz	r2, r2
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f042 0220 	orr.w	r2, r2, #32
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f002 021f 	and.w	r2, r2, #31
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f202 	lsl.w	r2, r1, r2
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x410>
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d002      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f000 be2e 	b.w	8003afc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b75      	ldr	r3, [pc, #468]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	21f8      	movs	r1, #248	; 0xf8
 8002eb6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ebe:	fa91 f1a1 	rbit	r1, r1
 8002ec2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ec6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002eca:	fab1 f181 	clz	r1, r1
 8002ece:	b2c9      	uxtb	r1, r1
 8002ed0:	408b      	lsls	r3, r1
 8002ed2:	4969      	ldr	r1, [pc, #420]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed8:	e0fd      	b.n	80030d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8088 	beq.w	8002ffc <HAL_RCC_OscConfig+0x56c>
 8002eec:	2301      	movs	r3, #1
 8002eee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002efe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	461a      	mov	r2, r3
 8002f14:	2301      	movs	r3, #1
 8002f16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe fbfa 	bl	8001710 <HAL_GetTick>
 8002f1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f22:	f7fe fbf5 	bl	8001710 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	f000 bde2 	b.w	8003afc <HAL_RCC_OscConfig+0x106c>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4d8>
 8002f62:	4b45      	ldr	r3, [pc, #276]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	e013      	b.n	8002f90 <HAL_RCC_OscConfig+0x500>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f8c:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	2202      	movs	r2, #2
 8002f92:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f9a:	fa92 f2a2 	rbit	r2, r2
 8002f9e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002fa2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002fa6:	fab2 f282 	clz	r2, r2
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f042 0220 	orr.w	r2, r2, #32
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f002 021f 	and.w	r2, r2, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0af      	beq.n	8002f22 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	21f8      	movs	r1, #248	; 0xf8
 8002fd8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fe0:	fa91 f1a1 	rbit	r1, r1
 8002fe4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fe8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fec:	fab1 f181 	clz	r1, r1
 8002ff0:	b2c9      	uxtb	r1, r1
 8002ff2:	408b      	lsls	r3, r1
 8002ff4:	4920      	ldr	r1, [pc, #128]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
 8002ffa:	e06c      	b.n	80030d6 <HAL_RCC_OscConfig+0x646>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800300e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800301c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	461a      	mov	r2, r3
 8003024:	2300      	movs	r3, #0
 8003026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fb72 	bl	8001710 <HAL_GetTick>
 800302c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7fe fb6d 	bl	8001710 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	f000 bd5a 	b.w	8003afc <HAL_RCC_OscConfig+0x106c>
 8003048:	2302      	movs	r3, #2
 800304a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800305a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d104      	bne.n	800307c <HAL_RCC_OscConfig+0x5ec>
 8003072:	4b01      	ldr	r3, [pc, #4]	; (8003078 <HAL_RCC_OscConfig+0x5e8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	e015      	b.n	80030a4 <HAL_RCC_OscConfig+0x614>
 8003078:	40021000 	.word	0x40021000
 800307c:	2302      	movs	r3, #2
 800307e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800308e:	2302      	movs	r3, #2
 8003090:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003094:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80030a0:	4bc8      	ldr	r3, [pc, #800]	; (80033c4 <HAL_RCC_OscConfig+0x934>)
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2202      	movs	r2, #2
 80030a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80030aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030ae:	fa92 f2a2 	rbit	r2, r2
 80030b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80030b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80030ba:	fab2 f282 	clz	r2, r2
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	f002 021f 	and.w	r2, r2, #31
 80030ca:	2101      	movs	r1, #1
 80030cc:	fa01 f202 	lsl.w	r2, r1, r2
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ad      	bne.n	8003032 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8110 	beq.w	800330c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d079      	beq.n	80031f0 <HAL_RCC_OscConfig+0x760>
 80030fc:	2301      	movs	r3, #1
 80030fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800310e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	4bab      	ldr	r3, [pc, #684]	; (80033c8 <HAL_RCC_OscConfig+0x938>)
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	461a      	mov	r2, r3
 8003122:	2301      	movs	r3, #1
 8003124:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003126:	f7fe faf3 	bl	8001710 <HAL_GetTick>
 800312a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003130:	f7fe faee 	bl	8001710 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d902      	bls.n	8003146 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	f000 bcdb 	b.w	8003afc <HAL_RCC_OscConfig+0x106c>
 8003146:	2302      	movs	r3, #2
 8003148:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003160:	2202      	movs	r2, #2
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003184:	2202      	movs	r2, #2
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800319e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a0:	4b88      	ldr	r3, [pc, #544]	; (80033c4 <HAL_RCC_OscConfig+0x934>)
 80031a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031ac:	2102      	movs	r1, #2
 80031ae:	6019      	str	r1, [r3, #0]
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	fa93 f1a3 	rbit	r1, r3
 80031be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031c6:	6019      	str	r1, [r3, #0]
  return result;
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0a0      	beq.n	8003130 <HAL_RCC_OscConfig+0x6a0>
 80031ee:	e08d      	b.n	800330c <HAL_RCC_OscConfig+0x87c>
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003212:	601a      	str	r2, [r3, #0]
  return result;
 8003214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003218:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800321c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	4b68      	ldr	r3, [pc, #416]	; (80033c8 <HAL_RCC_OscConfig+0x938>)
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	461a      	mov	r2, r3
 800322e:	2300      	movs	r3, #0
 8003230:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fe fa6d 	bl	8001710 <HAL_GetTick>
 8003236:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323c:	f7fe fa68 	bl	8001710 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d902      	bls.n	8003252 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	f000 bc55 	b.w	8003afc <HAL_RCC_OscConfig+0x106c>
 8003252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003256:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800325a:	2202      	movs	r2, #2
 800325c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	fa93 f2a3 	rbit	r2, r3
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800327e:	2202      	movs	r2, #2
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	fa93 f2a3 	rbit	r2, r3
 8003290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032a2:	2202      	movs	r2, #2
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032be:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_RCC_OscConfig+0x934>)
 80032c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032ca:	2102      	movs	r1, #2
 80032cc:	6019      	str	r1, [r3, #0]
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f1a3 	rbit	r1, r3
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032e4:	6019      	str	r1, [r3, #0]
  return result;
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	2101      	movs	r1, #1
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d197      	bne.n	800323c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 81a1 	beq.w	8003664 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003328:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_RCC_OscConfig+0x934>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d116      	bne.n	8003362 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_RCC_OscConfig+0x934>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <HAL_RCC_OscConfig+0x934>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333e:	61d3      	str	r3, [r2, #28]
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCC_OscConfig+0x934>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800335a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003362:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <HAL_RCC_OscConfig+0x93c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d11a      	bne.n	80033a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <HAL_RCC_OscConfig+0x93c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a16      	ldr	r2, [pc, #88]	; (80033cc <HAL_RCC_OscConfig+0x93c>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337a:	f7fe f9c9 	bl	8001710 <HAL_GetTick>
 800337e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	e009      	b.n	8003398 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe f9c4 	bl	8001710 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b64      	cmp	r3, #100	; 0x64
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e3b1      	b.n	8003afc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <HAL_RCC_OscConfig+0x93c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ef      	beq.n	8003384 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCC_OscConfig+0x940>
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCC_OscConfig+0x934>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4a02      	ldr	r2, [pc, #8]	; (80033c4 <HAL_RCC_OscConfig+0x934>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6213      	str	r3, [r2, #32]
 80033c0:	e03c      	b.n	800343c <HAL_RCC_OscConfig+0x9ac>
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	10908120 	.word	0x10908120
 80033cc:	40007000 	.word	0x40007000
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10c      	bne.n	80033fa <HAL_RCC_OscConfig+0x96a>
 80033e0:	4bc1      	ldr	r3, [pc, #772]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4ac0      	ldr	r2, [pc, #768]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	6213      	str	r3, [r2, #32]
 80033ec:	4bbe      	ldr	r3, [pc, #760]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	4abd      	ldr	r2, [pc, #756]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 80033f2:	f023 0304 	bic.w	r3, r3, #4
 80033f6:	6213      	str	r3, [r2, #32]
 80033f8:	e020      	b.n	800343c <HAL_RCC_OscConfig+0x9ac>
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b05      	cmp	r3, #5
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x994>
 800340a:	4bb7      	ldr	r3, [pc, #732]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4ab6      	ldr	r2, [pc, #728]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 8003410:	f043 0304 	orr.w	r3, r3, #4
 8003414:	6213      	str	r3, [r2, #32]
 8003416:	4bb4      	ldr	r3, [pc, #720]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4ab3      	ldr	r2, [pc, #716]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0x9ac>
 8003424:	4bb0      	ldr	r3, [pc, #704]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4aaf      	ldr	r2, [pc, #700]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	6213      	str	r3, [r2, #32]
 8003430:	4bad      	ldr	r3, [pc, #692]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4aac      	ldr	r2, [pc, #688]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 8003436:	f023 0304 	bic.w	r3, r3, #4
 800343a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8081 	beq.w	8003550 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fe f95f 	bl	8001710 <HAL_GetTick>
 8003452:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003456:	e00b      	b.n	8003470 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003458:	f7fe f95a 	bl	8001710 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e345      	b.n	8003afc <HAL_RCC_OscConfig+0x106c>
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003478:	2202      	movs	r2, #2
 800347a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003480:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	fa93 f2a3 	rbit	r2, r3
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003498:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800349c:	2202      	movs	r2, #2
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	fa93 f2a3 	rbit	r2, r3
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034b6:	601a      	str	r2, [r3, #0]
  return result;
 80034b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d102      	bne.n	80034dc <HAL_RCC_OscConfig+0xa4c>
 80034d6:	4b84      	ldr	r3, [pc, #528]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	e013      	b.n	8003504 <HAL_RCC_OscConfig+0xa74>
 80034dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034e4:	2202      	movs	r2, #2
 80034e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	fa93 f2a3 	rbit	r2, r3
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	4b79      	ldr	r3, [pc, #484]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003508:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800350c:	2102      	movs	r1, #2
 800350e:	6011      	str	r1, [r2, #0]
 8003510:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003514:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	fa92 f1a2 	rbit	r1, r2
 800351e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003522:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003526:	6011      	str	r1, [r2, #0]
  return result;
 8003528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800352c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	fab2 f282 	clz	r2, r2
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	f002 021f 	and.w	r2, r2, #31
 8003542:	2101      	movs	r1, #1
 8003544:	fa01 f202 	lsl.w	r2, r1, r2
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d084      	beq.n	8003458 <HAL_RCC_OscConfig+0x9c8>
 800354e:	e07f      	b.n	8003650 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003550:	f7fe f8de 	bl	8001710 <HAL_GetTick>
 8003554:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003558:	e00b      	b.n	8003572 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe f8d9 	bl	8001710 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e2c4      	b.n	8003afc <HAL_RCC_OscConfig+0x106c>
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800357a:	2202      	movs	r2, #2
 800357c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fa93 f2a3 	rbit	r2, r3
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800359e:	2202      	movs	r2, #2
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	fa93 f2a3 	rbit	r2, r3
 80035b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035b8:	601a      	str	r2, [r3, #0]
  return result;
 80035ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f043 0302 	orr.w	r3, r3, #2
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d102      	bne.n	80035de <HAL_RCC_OscConfig+0xb4e>
 80035d8:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	e013      	b.n	8003606 <HAL_RCC_OscConfig+0xb76>
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035e6:	2202      	movs	r2, #2
 80035e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fa93 f2a3 	rbit	r2, r3
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800360e:	2102      	movs	r1, #2
 8003610:	6011      	str	r1, [r2, #0]
 8003612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003616:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	fa92 f1a2 	rbit	r1, r2
 8003620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003624:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003628:	6011      	str	r1, [r2, #0]
  return result;
 800362a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800362e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	fab2 f282 	clz	r2, r2
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f002 021f 	and.w	r2, r2, #31
 8003644:	2101      	movs	r1, #1
 8003646:	fa01 f202 	lsl.w	r2, r1, r2
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d184      	bne.n	800355a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003650:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 800365e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003662:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8242 	beq.w	8003afa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <HAL_RCC_OscConfig+0xc58>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	f000 8213 	beq.w	8003aaa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	2b02      	cmp	r3, #2
 8003692:	f040 8162 	bne.w	800395a <HAL_RCC_OscConfig+0xeca>
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800369e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	fa93 f2a3 	rbit	r2, r3
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036ba:	601a      	str	r2, [r3, #0]
  return result;
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	461a      	mov	r2, r3
 80036d8:	2300      	movs	r3, #0
 80036da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fe f818 	bl	8001710 <HAL_GetTick>
 80036e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e4:	e00c      	b.n	8003700 <HAL_RCC_OscConfig+0xc70>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe f810 	bl	8001710 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1fd      	b.n	8003afc <HAL_RCC_OscConfig+0x106c>
 8003700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003704:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fa93 f2a3 	rbit	r2, r3
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003724:	601a      	str	r2, [r3, #0]
  return result;
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800372e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d102      	bne.n	800374a <HAL_RCC_OscConfig+0xcba>
 8003744:	4bb0      	ldr	r3, [pc, #704]	; (8003a08 <HAL_RCC_OscConfig+0xf78>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	e027      	b.n	800379a <HAL_RCC_OscConfig+0xd0a>
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	fa93 f2a3 	rbit	r2, r3
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003774:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003790:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	4b9c      	ldr	r3, [pc, #624]	; (8003a08 <HAL_RCC_OscConfig+0xf78>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800379e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80037a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037a6:	6011      	str	r1, [r2, #0]
 80037a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	fa92 f1a2 	rbit	r1, r2
 80037b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037be:	6011      	str	r1, [r2, #0]
  return result;
 80037c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	fab2 f282 	clz	r2, r2
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	f042 0220 	orr.w	r2, r2, #32
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	f002 021f 	and.w	r2, r2, #31
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f202 	lsl.w	r2, r1, r2
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d182      	bne.n	80036ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e6:	4b88      	ldr	r3, [pc, #544]	; (8003a08 <HAL_RCC_OscConfig+0xf78>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	430b      	orrs	r3, r1
 8003808:	497f      	ldr	r1, [pc, #508]	; (8003a08 <HAL_RCC_OscConfig+0xf78>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003816:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800381a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003820:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	fa93 f2a3 	rbit	r2, r3
 800382a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003832:	601a      	str	r2, [r3, #0]
  return result;
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800383c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003848:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	461a      	mov	r2, r3
 8003850:	2301      	movs	r3, #1
 8003852:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fd ff5c 	bl	8001710 <HAL_GetTick>
 8003858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800385c:	e009      	b.n	8003872 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385e:	f7fd ff57 	bl	8001710 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e144      	b.n	8003afc <HAL_RCC_OscConfig+0x106c>
 8003872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003876:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800387a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800387e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	fa93 f2a3 	rbit	r2, r3
 800388e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003892:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003896:	601a      	str	r2, [r3, #0]
  return result;
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <HAL_RCC_OscConfig+0xe2c>
 80038b6:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <HAL_RCC_OscConfig+0xf78>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	e027      	b.n	800390c <HAL_RCC_OscConfig+0xe7c>
 80038bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	fa93 f2a3 	rbit	r2, r3
 80038d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	fa93 f2a3 	rbit	r2, r3
 80038fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003902:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	4b3f      	ldr	r3, [pc, #252]	; (8003a08 <HAL_RCC_OscConfig+0xf78>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003910:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003914:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003918:	6011      	str	r1, [r2, #0]
 800391a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	fa92 f1a2 	rbit	r1, r2
 8003928:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800392c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003930:	6011      	str	r1, [r2, #0]
  return result;
 8003932:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003936:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	fab2 f282 	clz	r2, r2
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f042 0220 	orr.w	r2, r2, #32
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	f002 021f 	and.w	r2, r2, #31
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f202 	lsl.w	r2, r1, r2
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d082      	beq.n	800385e <HAL_RCC_OscConfig+0xdce>
 8003958:	e0cf      	b.n	8003afa <HAL_RCC_OscConfig+0x106a>
 800395a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003962:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	fa93 f2a3 	rbit	r2, r3
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800397e:	601a      	str	r2, [r3, #0]
  return result;
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003988:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fd feb6 	bl	8001710 <HAL_GetTick>
 80039a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a8:	e009      	b.n	80039be <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fd feb1 	bl	8001710 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e09e      	b.n	8003afc <HAL_RCC_OscConfig+0x106c>
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039e2:	601a      	str	r2, [r3, #0]
  return result;
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d104      	bne.n	8003a0c <HAL_RCC_OscConfig+0xf7c>
 8003a02:	4b01      	ldr	r3, [pc, #4]	; (8003a08 <HAL_RCC_OscConfig+0xf78>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	e029      	b.n	8003a5c <HAL_RCC_OscConfig+0xfcc>
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f2a3 	rbit	r2, r3
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	fa93 f2a3 	rbit	r2, r3
 8003a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x1078>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a60:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a6e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	fa92 f1a2 	rbit	r1, r2
 8003a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a80:	6011      	str	r1, [r2, #0]
  return result;
 8003a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	fab2 f282 	clz	r2, r2
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	f042 0220 	orr.w	r2, r2, #32
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	f002 021f 	and.w	r2, r2, #31
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d180      	bne.n	80039aa <HAL_RCC_OscConfig+0xf1a>
 8003aa8:	e027      	b.n	8003afa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e01e      	b.n	8003afc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_RCC_OscConfig+0x1078>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ac6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003aca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d10b      	bne.n	8003af6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ade:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ae2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000

08003b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b09e      	sub	sp, #120	; 0x78
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e162      	b.n	8003dea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b24:	4b90      	ldr	r3, [pc, #576]	; (8003d68 <HAL_RCC_ClockConfig+0x25c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d910      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b8d      	ldr	r3, [pc, #564]	; (8003d68 <HAL_RCC_ClockConfig+0x25c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 0207 	bic.w	r2, r3, #7
 8003b3a:	498b      	ldr	r1, [pc, #556]	; (8003d68 <HAL_RCC_ClockConfig+0x25c>)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b89      	ldr	r3, [pc, #548]	; (8003d68 <HAL_RCC_ClockConfig+0x25c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e14a      	b.n	8003dea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b82      	ldr	r3, [pc, #520]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	497f      	ldr	r1, [pc, #508]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80dc 	beq.w	8003d38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d13c      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xf6>
 8003b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d102      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xa6>
 8003bac:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	e00f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0xc6>
 8003bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bce:	4b67      	ldr	r3, [pc, #412]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bda:	fa92 f2a2 	rbit	r2, r2
 8003bde:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003be0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003be2:	fab2 f282 	clz	r2, r2
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	f042 0220 	orr.w	r2, r2, #32
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	f002 021f 	and.w	r2, r2, #31
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d17b      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0f3      	b.n	8003dea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d13c      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x178>
 8003c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x128>
 8003c2e:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	e00f      	b.n	8003c54 <HAL_RCC_ClockConfig+0x148>
 8003c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	647b      	str	r3, [r7, #68]	; 0x44
 8003c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c46:	643b      	str	r3, [r7, #64]	; 0x40
 8003c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c50:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c58:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c5c:	fa92 f2a2 	rbit	r2, r2
 8003c60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c64:	fab2 f282 	clz	r2, r2
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	f042 0220 	orr.w	r2, r2, #32
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	f002 021f 	and.w	r2, r2, #31
 8003c74:	2101      	movs	r1, #1
 8003c76:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d13a      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0b2      	b.n	8003dea <HAL_RCC_ClockConfig+0x2de>
 8003c84:	2302      	movs	r3, #2
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d102      	bne.n	8003cac <HAL_RCC_ClockConfig+0x1a0>
 8003ca6:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	e00d      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x1bc>
 8003cac:	2302      	movs	r3, #2
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb8:	2302      	movs	r3, #2
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	2202      	movs	r2, #2
 8003cca:	61ba      	str	r2, [r7, #24]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	fa92 f2a2 	rbit	r2, r2
 8003cd2:	617a      	str	r2, [r7, #20]
  return result;
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	fab2 f282 	clz	r2, r2
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	f042 0220 	orr.w	r2, r2, #32
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f002 021f 	and.w	r2, r2, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e079      	b.n	8003dea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f023 0203 	bic.w	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	491a      	ldr	r1, [pc, #104]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d08:	f7fd fd02 	bl	8001710 <HAL_GetTick>
 8003d0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d10:	f7fd fcfe 	bl	8001710 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e061      	b.n	8003dea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_RCC_ClockConfig+0x260>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 020c 	and.w	r2, r3, #12
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d1eb      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_ClockConfig+0x25c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d214      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_RCC_ClockConfig+0x25c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 0207 	bic.w	r2, r3, #7
 8003d4e:	4906      	ldr	r1, [pc, #24]	; (8003d68 <HAL_RCC_ClockConfig+0x25c>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <HAL_RCC_ClockConfig+0x25c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e040      	b.n	8003dea <HAL_RCC_ClockConfig+0x2de>
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	491a      	ldr	r1, [pc, #104]	; (8003df4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4912      	ldr	r1, [pc, #72]	; (8003df4 <HAL_RCC_ClockConfig+0x2e8>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dae:	f000 f829 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003db2:	4601      	mov	r1, r0
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_RCC_ClockConfig+0x2e8>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dbc:	22f0      	movs	r2, #240	; 0xf0
 8003dbe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	fa92 f2a2 	rbit	r2, r2
 8003dc6:	60fa      	str	r2, [r7, #12]
  return result;
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	fab2 f282 	clz	r2, r2
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	40d3      	lsrs	r3, r2
 8003dd2:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x2ec>)
 8003dd4:	5cd3      	ldrb	r3, [r2, r3]
 8003dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8003dda:	4a08      	ldr	r2, [pc, #32]	; (8003dfc <HAL_RCC_ClockConfig+0x2f0>)
 8003ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_RCC_ClockConfig+0x2f4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fc50 	bl	8001688 <HAL_InitTick>
  
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3778      	adds	r7, #120	; 0x78
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	08006720 	.word	0x08006720
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	20000004 	.word	0x20000004

08003e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b08b      	sub	sp, #44	; 0x2c
 8003e08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d002      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x30>
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d003      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x36>
 8003e32:	e03c      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e34:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e36:	623b      	str	r3, [r7, #32]
      break;
 8003e38:	e03c      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	fa92 f2a2 	rbit	r2, r2
 8003e4c:	607a      	str	r2, [r7, #4]
  return result;
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	fab2 f282 	clz	r2, r2
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	40d3      	lsrs	r3, r2
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e5e:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	220f      	movs	r2, #15
 8003e68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	fa92 f2a2 	rbit	r2, r2
 8003e70:	60fa      	str	r2, [r7, #12]
  return result;
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	fab2 f282 	clz	r2, r2
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	40d3      	lsrs	r3, r2
 8003e7c:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e8c:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9c:	e004      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4a0c      	ldr	r2, [pc, #48]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	623b      	str	r3, [r7, #32]
      break;
 8003eac:	e002      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003eb0:	623b      	str	r3, [r7, #32]
      break;
 8003eb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	372c      	adds	r7, #44	; 0x2c
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	007a1200 	.word	0x007a1200
 8003ecc:	08006730 	.word	0x08006730
 8003ed0:	08006740 	.word	0x08006740
 8003ed4:	003d0900 	.word	0x003d0900

08003ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b092      	sub	sp, #72	; 0x48
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80cd 	beq.w	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efc:	4b86      	ldr	r3, [pc, #536]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10e      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	4b83      	ldr	r3, [pc, #524]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	4a82      	ldr	r2, [pc, #520]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f12:	61d3      	str	r3, [r2, #28]
 8003f14:	4b80      	ldr	r3, [pc, #512]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	4b7d      	ldr	r3, [pc, #500]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d118      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f32:	4b7a      	ldr	r3, [pc, #488]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a79      	ldr	r2, [pc, #484]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd fbe7 	bl	8001710 <HAL_GetTick>
 8003f42:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	e008      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f46:	f7fd fbe3 	bl	8001710 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b64      	cmp	r3, #100	; 0x64
 8003f52:	d901      	bls.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e0db      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	4b70      	ldr	r3, [pc, #448]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f64:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d07d      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d076      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f82:	4b65      	ldr	r3, [pc, #404]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4b5e      	ldr	r3, [pc, #376]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	461a      	mov	r2, r3
 8003fac:	2301      	movs	r3, #1
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	fa93 f3a3 	rbit	r3, r3
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b55      	ldr	r3, [pc, #340]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fd4:	4a50      	ldr	r2, [pc, #320]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d045      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fb94 	bl	8001710 <HAL_GetTick>
 8003fe8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fea:	e00a      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fec:	f7fd fb90 	bl	8001710 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e086      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004002:	2302      	movs	r3, #2
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	fa93 f3a3 	rbit	r3, r3
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	2302      	movs	r3, #2
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	61fb      	str	r3, [r7, #28]
  return result;
 800401a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	fab3 f383 	clz	r3, r3
 8004020:	b2db      	uxtb	r3, r3
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f043 0302 	orr.w	r3, r3, #2
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d102      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004030:	4b39      	ldr	r3, [pc, #228]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	e007      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004036:	2302      	movs	r3, #2
 8004038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	4b35      	ldr	r3, [pc, #212]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2202      	movs	r2, #2
 8004048:	613a      	str	r2, [r7, #16]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	fa92 f2a2 	rbit	r2, r2
 8004050:	60fa      	str	r2, [r7, #12]
  return result;
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	fab2 f282 	clz	r2, r2
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	f002 021f 	and.w	r2, r2, #31
 8004064:	2101      	movs	r1, #1
 8004066:	fa01 f202 	lsl.w	r2, r1, r2
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0bd      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004070:	4b29      	ldr	r3, [pc, #164]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4926      	ldr	r1, [pc, #152]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800407e:	4313      	orrs	r3, r2
 8004080:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004082:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004086:	2b01      	cmp	r3, #1
 8004088:	d105      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408a:	4b23      	ldr	r3, [pc, #140]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	4a22      	ldr	r2, [pc, #136]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004094:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	491a      	ldr	r1, [pc, #104]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c0:	4b15      	ldr	r3, [pc, #84]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f023 0210 	bic.w	r2, r3, #16
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4912      	ldr	r1, [pc, #72]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	490b      	ldr	r1, [pc, #44]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	4903      	ldr	r1, [pc, #12]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800410a:	4313      	orrs	r3, r2
 800410c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3748      	adds	r7, #72	; 0x48
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	40007000 	.word	0x40007000
 8004120:	10908100 	.word	0x10908100

08004124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e095      	b.n	8004262 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2b00      	cmp	r3, #0
 800413c:	d108      	bne.n	8004150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004146:	d009      	beq.n	800415c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	61da      	str	r2, [r3, #28]
 800414e:	e005      	b.n	800415c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd f922 	bl	80013c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004192:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800419c:	d902      	bls.n	80041a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e002      	b.n	80041aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041b2:	d007      	beq.n	80041c4 <HAL_SPI_Init+0xa0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041bc:	d002      	beq.n	80041c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	ea42 0103 	orr.w	r1, r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	f003 0204 	and.w	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004240:	ea42 0103 	orr.w	r1, r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b088      	sub	sp, #32
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_SPI_Transmit+0x22>
 8004288:	2302      	movs	r3, #2
 800428a:	e158      	b.n	800453e <HAL_SPI_Transmit+0x2d4>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004294:	f7fd fa3c 	bl	8001710 <HAL_GetTick>
 8004298:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d002      	beq.n	80042b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
 80042ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042ae:	e13d      	b.n	800452c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_SPI_Transmit+0x52>
 80042b6:	88fb      	ldrh	r3, [r7, #6]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c0:	e134      	b.n	800452c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2203      	movs	r2, #3
 80042c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	88fa      	ldrh	r2, [r7, #6]
 80042da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	d10f      	bne.n	800432e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800432c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d007      	beq.n	800434c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004354:	d94b      	bls.n	80043ee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_Transmit+0xfa>
 800435e:	8afb      	ldrh	r3, [r7, #22]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d13e      	bne.n	80043e2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004388:	e02b      	b.n	80043e2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d112      	bne.n	80043be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	881a      	ldrh	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	1c9a      	adds	r2, r3, #2
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043bc:	e011      	b.n	80043e2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043be:	f7fd f9a7 	bl	8001710 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d803      	bhi.n	80043d6 <HAL_SPI_Transmit+0x16c>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d102      	bne.n	80043dc <HAL_SPI_Transmit+0x172>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043e0:	e0a4      	b.n	800452c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ce      	bne.n	800438a <HAL_SPI_Transmit+0x120>
 80043ec:	e07c      	b.n	80044e8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_SPI_Transmit+0x192>
 80043f6:	8afb      	ldrh	r3, [r7, #22]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d170      	bne.n	80044de <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d912      	bls.n	800442c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	1c9a      	adds	r2, r3, #2
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b02      	subs	r3, #2
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	87da      	strh	r2, [r3, #62]	; 0x3e
 800442a:	e058      	b.n	80044de <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004452:	e044      	b.n	80044de <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d12b      	bne.n	80044ba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d912      	bls.n	8004492 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	881a      	ldrh	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	1c9a      	adds	r2, r3, #2
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b02      	subs	r3, #2
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004490:	e025      	b.n	80044de <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044b8:	e011      	b.n	80044de <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ba:	f7fd f929 	bl	8001710 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d803      	bhi.n	80044d2 <HAL_SPI_Transmit+0x268>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d102      	bne.n	80044d8 <HAL_SPI_Transmit+0x26e>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044dc:	e026      	b.n	800452c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1b5      	bne.n	8004454 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f949 	bl	8004784 <SPI_EndRxTxTransaction>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e000      	b.n	800452c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800452a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800453c:	7ffb      	ldrb	r3, [r7, #31]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004558:	f7fd f8da 	bl	8001710 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4413      	add	r3, r2
 8004566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004568:	f7fd f8d2 	bl	8001710 <HAL_GetTick>
 800456c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800456e:	4b39      	ldr	r3, [pc, #228]	; (8004654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	015b      	lsls	r3, r3, #5
 8004574:	0d1b      	lsrs	r3, r3, #20
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800457e:	e054      	b.n	800462a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d050      	beq.n	800462a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004588:	f7fd f8c2 	bl	8001710 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	429a      	cmp	r2, r3
 8004596:	d902      	bls.n	800459e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d13d      	bne.n	800461a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b6:	d111      	bne.n	80045dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c0:	d004      	beq.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d107      	bne.n	80045dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e4:	d10f      	bne.n	8004606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e017      	b.n	800464a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	3b01      	subs	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	429a      	cmp	r2, r3
 8004646:	d19b      	bne.n	8004580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000000 	.word	0x20000000

08004658 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	; 0x28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800466a:	f7fd f851 	bl	8001710 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	4413      	add	r3, r2
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800467a:	f7fd f849 	bl	8001710 <HAL_GetTick>
 800467e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004688:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	00da      	lsls	r2, r3, #3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	0d1b      	lsrs	r3, r3, #20
 8004698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046a0:	e060      	b.n	8004764 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046a8:	d107      	bne.n	80046ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d050      	beq.n	8004764 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046c2:	f7fd f825 	bl	8001710 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d902      	bls.n	80046d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d13d      	bne.n	8004754 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f0:	d111      	bne.n	8004716 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fa:	d004      	beq.n	8004706 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004704:	d107      	bne.n	8004716 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	d10f      	bne.n	8004740 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800473e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e010      	b.n	8004776 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	3b01      	subs	r3, #1
 8004762:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	d196      	bne.n	80046a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3728      	adds	r7, #40	; 0x28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000000 	.word	0x20000000

08004784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2200      	movs	r2, #0
 8004798:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff ff5b 	bl	8004658 <SPI_WaitFifoStateUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e027      	b.n	8004808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2200      	movs	r2, #0
 80047c0:	2180      	movs	r1, #128	; 0x80
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff fec0 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e014      	b.n	8004808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ff34 	bl	8004658 <SPI_WaitFifoStateUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e000      	b.n	8004808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e049      	b.n	80048b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc fe22 	bl	8001480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f000 fb60 	bl	8004f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e049      	b.n	8004964 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f841 	bl	800496c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f000 fb09 	bl	8004f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_TIM_PWM_Start+0x24>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e03c      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d109      	bne.n	80049be <HAL_TIM_PWM_Start+0x3e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e02f      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d109      	bne.n	80049d8 <HAL_TIM_PWM_Start+0x58>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e022      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d109      	bne.n	80049f2 <HAL_TIM_PWM_Start+0x72>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	e015      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start+0x8c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e008      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e088      	b.n	8004b38 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start+0xb6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a34:	e023      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start+0xc6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a44:	e01b      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0xd6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a54:	e013      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b0c      	cmp	r3, #12
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0xe6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a64:	e00b      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start+0xf6>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a74:	e003      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fdfc 	bl	8005684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <HAL_TIM_PWM_Start+0x1c0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <HAL_TIM_PWM_Start+0x134>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2a      	ldr	r2, [pc, #168]	; (8004b44 <HAL_TIM_PWM_Start+0x1c4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <HAL_TIM_PWM_Start+0x134>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a28      	ldr	r2, [pc, #160]	; (8004b48 <HAL_TIM_PWM_Start+0x1c8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIM_PWM_Start+0x134>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <HAL_TIM_PWM_Start+0x1cc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIM_PWM_Start+0x138>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <HAL_TIM_PWM_Start+0x13a>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_TIM_PWM_Start+0x1c0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x176>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae0:	d009      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x176>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_TIM_PWM_Start+0x1d0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x176>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <HAL_TIM_PWM_Start+0x1c4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d115      	bne.n	8004b22 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <HAL_TIM_PWM_Start+0x1d4>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d015      	beq.n	8004b34 <HAL_TIM_PWM_Start+0x1b4>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0e:	d011      	beq.n	8004b34 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	e008      	b.n	8004b34 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e000      	b.n	8004b36 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800
 8004b50:	40000400 	.word	0x40000400
 8004b54:	00010007 	.word	0x00010007

08004b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e0ff      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b14      	cmp	r3, #20
 8004b82:	f200 80f0 	bhi.w	8004d66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b86:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004be1 	.word	0x08004be1
 8004b90:	08004d67 	.word	0x08004d67
 8004b94:	08004d67 	.word	0x08004d67
 8004b98:	08004d67 	.word	0x08004d67
 8004b9c:	08004c21 	.word	0x08004c21
 8004ba0:	08004d67 	.word	0x08004d67
 8004ba4:	08004d67 	.word	0x08004d67
 8004ba8:	08004d67 	.word	0x08004d67
 8004bac:	08004c63 	.word	0x08004c63
 8004bb0:	08004d67 	.word	0x08004d67
 8004bb4:	08004d67 	.word	0x08004d67
 8004bb8:	08004d67 	.word	0x08004d67
 8004bbc:	08004ca3 	.word	0x08004ca3
 8004bc0:	08004d67 	.word	0x08004d67
 8004bc4:	08004d67 	.word	0x08004d67
 8004bc8:	08004d67 	.word	0x08004d67
 8004bcc:	08004ce5 	.word	0x08004ce5
 8004bd0:	08004d67 	.word	0x08004d67
 8004bd4:	08004d67 	.word	0x08004d67
 8004bd8:	08004d67 	.word	0x08004d67
 8004bdc:	08004d25 	.word	0x08004d25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fa0c 	bl	8005004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0204 	bic.w	r2, r2, #4
 8004c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6999      	ldr	r1, [r3, #24]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	619a      	str	r2, [r3, #24]
      break;
 8004c1e:	e0a5      	b.n	8004d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fa72 	bl	8005110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6999      	ldr	r1, [r3, #24]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	021a      	lsls	r2, r3, #8
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	619a      	str	r2, [r3, #24]
      break;
 8004c60:	e084      	b.n	8004d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fad1 	bl	8005210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0208 	orr.w	r2, r2, #8
 8004c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0204 	bic.w	r2, r2, #4
 8004c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69d9      	ldr	r1, [r3, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	61da      	str	r2, [r3, #28]
      break;
 8004ca0:	e064      	b.n	8004d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fb2f 	bl	800530c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69d9      	ldr	r1, [r3, #28]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	021a      	lsls	r2, r3, #8
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	61da      	str	r2, [r3, #28]
      break;
 8004ce2:	e043      	b.n	8004d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fb72 	bl	80053d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0208 	orr.w	r2, r2, #8
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0204 	bic.w	r2, r2, #4
 8004d0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d22:	e023      	b.n	8004d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fbb0 	bl	8005490 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	021a      	lsls	r2, r3, #8
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d64:	e002      	b.n	8004d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop

08004d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_ConfigClockSource+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0b6      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x18a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd8:	d03e      	beq.n	8004e58 <HAL_TIM_ConfigClockSource+0xd8>
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dde:	f200 8087 	bhi.w	8004ef0 <HAL_TIM_ConfigClockSource+0x170>
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	f000 8086 	beq.w	8004ef6 <HAL_TIM_ConfigClockSource+0x176>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d87f      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x170>
 8004df0:	2b70      	cmp	r3, #112	; 0x70
 8004df2:	d01a      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0xaa>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d87b      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x170>
 8004df8:	2b60      	cmp	r3, #96	; 0x60
 8004dfa:	d050      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x11e>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d877      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x170>
 8004e00:	2b50      	cmp	r3, #80	; 0x50
 8004e02:	d03c      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0xfe>
 8004e04:	2b50      	cmp	r3, #80	; 0x50
 8004e06:	d873      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x170>
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d058      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x13e>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d86f      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x170>
 8004e10:	2b30      	cmp	r3, #48	; 0x30
 8004e12:	d064      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15e>
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d86b      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x170>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d060      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15e>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d867      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x170>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d05c      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15e>
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d05a      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15e>
 8004e28:	e062      	b.n	8004ef0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6899      	ldr	r1, [r3, #8]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f000 fc03 	bl	8005644 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	609a      	str	r2, [r3, #8]
      break;
 8004e56:	e04f      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6899      	ldr	r1, [r3, #8]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f000 fbec 	bl	8005644 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7a:	609a      	str	r2, [r3, #8]
      break;
 8004e7c:	e03c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 fb60 	bl	8005550 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2150      	movs	r1, #80	; 0x50
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fbb9 	bl	800560e <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e02c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f000 fb7f 	bl	80055ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2160      	movs	r1, #96	; 0x60
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fba9 	bl	800560e <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e01c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 fb40 	bl	8005550 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2140      	movs	r1, #64	; 0x40
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fb99 	bl	800560e <TIM_ITRx_SetConfig>
      break;
 8004edc:	e00c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f000 fb90 	bl	800560e <TIM_ITRx_SetConfig>
      break;
 8004eee:	e003      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef4:	e000      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a32      	ldr	r2, [pc, #200]	; (8004ff0 <TIM_Base_SetConfig+0xdc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d007      	beq.n	8004f3c <TIM_Base_SetConfig+0x28>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f32:	d003      	beq.n	8004f3c <TIM_Base_SetConfig+0x28>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a2f      	ldr	r2, [pc, #188]	; (8004ff4 <TIM_Base_SetConfig+0xe0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d108      	bne.n	8004f4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a27      	ldr	r2, [pc, #156]	; (8004ff0 <TIM_Base_SetConfig+0xdc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d013      	beq.n	8004f7e <TIM_Base_SetConfig+0x6a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d00f      	beq.n	8004f7e <TIM_Base_SetConfig+0x6a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <TIM_Base_SetConfig+0xe0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00b      	beq.n	8004f7e <TIM_Base_SetConfig+0x6a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a23      	ldr	r2, [pc, #140]	; (8004ff8 <TIM_Base_SetConfig+0xe4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d007      	beq.n	8004f7e <TIM_Base_SetConfig+0x6a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a22      	ldr	r2, [pc, #136]	; (8004ffc <TIM_Base_SetConfig+0xe8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_Base_SetConfig+0x6a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a21      	ldr	r2, [pc, #132]	; (8005000 <TIM_Base_SetConfig+0xec>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d108      	bne.n	8004f90 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <TIM_Base_SetConfig+0xdc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <TIM_Base_SetConfig+0xc0>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <TIM_Base_SetConfig+0xe4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d007      	beq.n	8004fd4 <TIM_Base_SetConfig+0xc0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a0d      	ldr	r2, [pc, #52]	; (8004ffc <TIM_Base_SetConfig+0xe8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0xc0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a0c      	ldr	r2, [pc, #48]	; (8005000 <TIM_Base_SetConfig+0xec>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d103      	bne.n	8004fdc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	615a      	str	r2, [r3, #20]
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40014400 	.word	0x40014400
 8005000:	40014800 	.word	0x40014800

08005004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f023 0201 	bic.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f023 0302 	bic.w	r3, r3, #2
 8005050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a28      	ldr	r2, [pc, #160]	; (8005100 <TIM_OC1_SetConfig+0xfc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00b      	beq.n	800507c <TIM_OC1_SetConfig+0x78>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a27      	ldr	r2, [pc, #156]	; (8005104 <TIM_OC1_SetConfig+0x100>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d007      	beq.n	800507c <TIM_OC1_SetConfig+0x78>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a26      	ldr	r2, [pc, #152]	; (8005108 <TIM_OC1_SetConfig+0x104>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_OC1_SetConfig+0x78>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a25      	ldr	r2, [pc, #148]	; (800510c <TIM_OC1_SetConfig+0x108>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d10c      	bne.n	8005096 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0308 	bic.w	r3, r3, #8
 8005082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a19      	ldr	r2, [pc, #100]	; (8005100 <TIM_OC1_SetConfig+0xfc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00b      	beq.n	80050b6 <TIM_OC1_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a18      	ldr	r2, [pc, #96]	; (8005104 <TIM_OC1_SetConfig+0x100>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <TIM_OC1_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a17      	ldr	r2, [pc, #92]	; (8005108 <TIM_OC1_SetConfig+0x104>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC1_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a16      	ldr	r2, [pc, #88]	; (800510c <TIM_OC1_SetConfig+0x108>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d111      	bne.n	80050da <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	621a      	str	r2, [r3, #32]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40014000 	.word	0x40014000
 8005108:	40014400 	.word	0x40014400
 800510c:	40014800 	.word	0x40014800

08005110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0210 	bic.w	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0320 	bic.w	r3, r3, #32
 800515e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a24      	ldr	r2, [pc, #144]	; (8005200 <TIM_OC2_SetConfig+0xf0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10d      	bne.n	8005190 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800517a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <TIM_OC2_SetConfig+0xf0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00b      	beq.n	80051b0 <TIM_OC2_SetConfig+0xa0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <TIM_OC2_SetConfig+0xf4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d007      	beq.n	80051b0 <TIM_OC2_SetConfig+0xa0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_OC2_SetConfig+0xf8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_OC2_SetConfig+0xa0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a18      	ldr	r2, [pc, #96]	; (800520c <TIM_OC2_SetConfig+0xfc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d113      	bne.n	80051d8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051b6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051be:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40014000 	.word	0x40014000
 8005208:	40014400 	.word	0x40014400
 800520c:	40014800 	.word	0x40014800

08005210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0303 	bic.w	r3, r3, #3
 800524a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800525c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a23      	ldr	r2, [pc, #140]	; (80052fc <TIM_OC3_SetConfig+0xec>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10d      	bne.n	800528e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800528c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <TIM_OC3_SetConfig+0xec>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00b      	beq.n	80052ae <TIM_OC3_SetConfig+0x9e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a19      	ldr	r2, [pc, #100]	; (8005300 <TIM_OC3_SetConfig+0xf0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <TIM_OC3_SetConfig+0x9e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a18      	ldr	r2, [pc, #96]	; (8005304 <TIM_OC3_SetConfig+0xf4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_OC3_SetConfig+0x9e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a17      	ldr	r2, [pc, #92]	; (8005308 <TIM_OC3_SetConfig+0xf8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d113      	bne.n	80052d6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40014000 	.word	0x40014000
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800

0800530c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800535a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	031b      	lsls	r3, r3, #12
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a16      	ldr	r2, [pc, #88]	; (80053c4 <TIM_OC4_SetConfig+0xb8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <TIM_OC4_SetConfig+0x7c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <TIM_OC4_SetConfig+0xbc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <TIM_OC4_SetConfig+0x7c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a14      	ldr	r2, [pc, #80]	; (80053cc <TIM_OC4_SetConfig+0xc0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_OC4_SetConfig+0x7c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <TIM_OC4_SetConfig+0xc4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d109      	bne.n	800539c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800538e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	019b      	lsls	r3, r3, #6
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40014400 	.word	0x40014400
 80053d0:	40014800 	.word	0x40014800

080053d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005418:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a15      	ldr	r2, [pc, #84]	; (8005480 <TIM_OC5_SetConfig+0xac>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00b      	beq.n	8005446 <TIM_OC5_SetConfig+0x72>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a14      	ldr	r2, [pc, #80]	; (8005484 <TIM_OC5_SetConfig+0xb0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d007      	beq.n	8005446 <TIM_OC5_SetConfig+0x72>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a13      	ldr	r2, [pc, #76]	; (8005488 <TIM_OC5_SetConfig+0xb4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d003      	beq.n	8005446 <TIM_OC5_SetConfig+0x72>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a12      	ldr	r2, [pc, #72]	; (800548c <TIM_OC5_SetConfig+0xb8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d109      	bne.n	800545a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	621a      	str	r2, [r3, #32]
}
 8005474:	bf00      	nop
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	40012c00 	.word	0x40012c00
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800

08005490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	051b      	lsls	r3, r3, #20
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a16      	ldr	r2, [pc, #88]	; (8005540 <TIM_OC6_SetConfig+0xb0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00b      	beq.n	8005504 <TIM_OC6_SetConfig+0x74>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <TIM_OC6_SetConfig+0xb4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d007      	beq.n	8005504 <TIM_OC6_SetConfig+0x74>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <TIM_OC6_SetConfig+0xb8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC6_SetConfig+0x74>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a13      	ldr	r2, [pc, #76]	; (800554c <TIM_OC6_SetConfig+0xbc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d109      	bne.n	8005518 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800550a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	029b      	lsls	r3, r3, #10
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800

08005550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f023 0201 	bic.w	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800557a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 030a 	bic.w	r3, r3, #10
 800558c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b087      	sub	sp, #28
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f023 0210 	bic.w	r2, r3, #16
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	031b      	lsls	r3, r3, #12
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	f043 0307 	orr.w	r3, r3, #7
 8005630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	609a      	str	r2, [r3, #8]
}
 8005638:	bf00      	nop
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800565e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	021a      	lsls	r2, r3, #8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	431a      	orrs	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4313      	orrs	r3, r2
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	609a      	str	r2, [r3, #8]
}
 8005678:	bf00      	nop
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2201      	movs	r2, #1
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1a      	ldr	r2, [r3, #32]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	401a      	ands	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	431a      	orrs	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e054      	b.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a24      	ldr	r2, [pc, #144]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d108      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005718:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a17      	ldr	r2, [pc, #92]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d009      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a11      	ldr	r2, [pc, #68]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10c      	bne.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800576c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	4313      	orrs	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40014000 	.word	0x40014000

080057ac <__errno>:
 80057ac:	4b01      	ldr	r3, [pc, #4]	; (80057b4 <__errno+0x8>)
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	2000000c 	.word	0x2000000c

080057b8 <__libc_init_array>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	4d0d      	ldr	r5, [pc, #52]	; (80057f0 <__libc_init_array+0x38>)
 80057bc:	4c0d      	ldr	r4, [pc, #52]	; (80057f4 <__libc_init_array+0x3c>)
 80057be:	1b64      	subs	r4, r4, r5
 80057c0:	10a4      	asrs	r4, r4, #2
 80057c2:	2600      	movs	r6, #0
 80057c4:	42a6      	cmp	r6, r4
 80057c6:	d109      	bne.n	80057dc <__libc_init_array+0x24>
 80057c8:	4d0b      	ldr	r5, [pc, #44]	; (80057f8 <__libc_init_array+0x40>)
 80057ca:	4c0c      	ldr	r4, [pc, #48]	; (80057fc <__libc_init_array+0x44>)
 80057cc:	f000 fc8e 	bl	80060ec <_init>
 80057d0:	1b64      	subs	r4, r4, r5
 80057d2:	10a4      	asrs	r4, r4, #2
 80057d4:	2600      	movs	r6, #0
 80057d6:	42a6      	cmp	r6, r4
 80057d8:	d105      	bne.n	80057e6 <__libc_init_array+0x2e>
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e0:	4798      	blx	r3
 80057e2:	3601      	adds	r6, #1
 80057e4:	e7ee      	b.n	80057c4 <__libc_init_array+0xc>
 80057e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ea:	4798      	blx	r3
 80057ec:	3601      	adds	r6, #1
 80057ee:	e7f2      	b.n	80057d6 <__libc_init_array+0x1e>
 80057f0:	08006784 	.word	0x08006784
 80057f4:	08006784 	.word	0x08006784
 80057f8:	08006784 	.word	0x08006784
 80057fc:	08006788 	.word	0x08006788

08005800 <memcpy>:
 8005800:	440a      	add	r2, r1
 8005802:	4291      	cmp	r1, r2
 8005804:	f100 33ff 	add.w	r3, r0, #4294967295
 8005808:	d100      	bne.n	800580c <memcpy+0xc>
 800580a:	4770      	bx	lr
 800580c:	b510      	push	{r4, lr}
 800580e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005816:	4291      	cmp	r1, r2
 8005818:	d1f9      	bne.n	800580e <memcpy+0xe>
 800581a:	bd10      	pop	{r4, pc}

0800581c <memset>:
 800581c:	4402      	add	r2, r0
 800581e:	4603      	mov	r3, r0
 8005820:	4293      	cmp	r3, r2
 8005822:	d100      	bne.n	8005826 <memset+0xa>
 8005824:	4770      	bx	lr
 8005826:	f803 1b01 	strb.w	r1, [r3], #1
 800582a:	e7f9      	b.n	8005820 <memset+0x4>

0800582c <siprintf>:
 800582c:	b40e      	push	{r1, r2, r3}
 800582e:	b500      	push	{lr}
 8005830:	b09c      	sub	sp, #112	; 0x70
 8005832:	ab1d      	add	r3, sp, #116	; 0x74
 8005834:	9002      	str	r0, [sp, #8]
 8005836:	9006      	str	r0, [sp, #24]
 8005838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800583c:	4809      	ldr	r0, [pc, #36]	; (8005864 <siprintf+0x38>)
 800583e:	9107      	str	r1, [sp, #28]
 8005840:	9104      	str	r1, [sp, #16]
 8005842:	4909      	ldr	r1, [pc, #36]	; (8005868 <siprintf+0x3c>)
 8005844:	f853 2b04 	ldr.w	r2, [r3], #4
 8005848:	9105      	str	r1, [sp, #20]
 800584a:	6800      	ldr	r0, [r0, #0]
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	a902      	add	r1, sp, #8
 8005850:	f000 f868 	bl	8005924 <_svfiprintf_r>
 8005854:	9b02      	ldr	r3, [sp, #8]
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	b01c      	add	sp, #112	; 0x70
 800585c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005860:	b003      	add	sp, #12
 8005862:	4770      	bx	lr
 8005864:	2000000c 	.word	0x2000000c
 8005868:	ffff0208 	.word	0xffff0208

0800586c <__ssputs_r>:
 800586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	688e      	ldr	r6, [r1, #8]
 8005872:	429e      	cmp	r6, r3
 8005874:	4682      	mov	sl, r0
 8005876:	460c      	mov	r4, r1
 8005878:	4690      	mov	r8, r2
 800587a:	461f      	mov	r7, r3
 800587c:	d838      	bhi.n	80058f0 <__ssputs_r+0x84>
 800587e:	898a      	ldrh	r2, [r1, #12]
 8005880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005884:	d032      	beq.n	80058ec <__ssputs_r+0x80>
 8005886:	6825      	ldr	r5, [r4, #0]
 8005888:	6909      	ldr	r1, [r1, #16]
 800588a:	eba5 0901 	sub.w	r9, r5, r1
 800588e:	6965      	ldr	r5, [r4, #20]
 8005890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005898:	3301      	adds	r3, #1
 800589a:	444b      	add	r3, r9
 800589c:	106d      	asrs	r5, r5, #1
 800589e:	429d      	cmp	r5, r3
 80058a0:	bf38      	it	cc
 80058a2:	461d      	movcc	r5, r3
 80058a4:	0553      	lsls	r3, r2, #21
 80058a6:	d531      	bpl.n	800590c <__ssputs_r+0xa0>
 80058a8:	4629      	mov	r1, r5
 80058aa:	f000 fb55 	bl	8005f58 <_malloc_r>
 80058ae:	4606      	mov	r6, r0
 80058b0:	b950      	cbnz	r0, 80058c8 <__ssputs_r+0x5c>
 80058b2:	230c      	movs	r3, #12
 80058b4:	f8ca 3000 	str.w	r3, [sl]
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058be:	81a3      	strh	r3, [r4, #12]
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c8:	6921      	ldr	r1, [r4, #16]
 80058ca:	464a      	mov	r2, r9
 80058cc:	f7ff ff98 	bl	8005800 <memcpy>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	6126      	str	r6, [r4, #16]
 80058de:	6165      	str	r5, [r4, #20]
 80058e0:	444e      	add	r6, r9
 80058e2:	eba5 0509 	sub.w	r5, r5, r9
 80058e6:	6026      	str	r6, [r4, #0]
 80058e8:	60a5      	str	r5, [r4, #8]
 80058ea:	463e      	mov	r6, r7
 80058ec:	42be      	cmp	r6, r7
 80058ee:	d900      	bls.n	80058f2 <__ssputs_r+0x86>
 80058f0:	463e      	mov	r6, r7
 80058f2:	6820      	ldr	r0, [r4, #0]
 80058f4:	4632      	mov	r2, r6
 80058f6:	4641      	mov	r1, r8
 80058f8:	f000 faa8 	bl	8005e4c <memmove>
 80058fc:	68a3      	ldr	r3, [r4, #8]
 80058fe:	1b9b      	subs	r3, r3, r6
 8005900:	60a3      	str	r3, [r4, #8]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	4433      	add	r3, r6
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	2000      	movs	r0, #0
 800590a:	e7db      	b.n	80058c4 <__ssputs_r+0x58>
 800590c:	462a      	mov	r2, r5
 800590e:	f000 fb97 	bl	8006040 <_realloc_r>
 8005912:	4606      	mov	r6, r0
 8005914:	2800      	cmp	r0, #0
 8005916:	d1e1      	bne.n	80058dc <__ssputs_r+0x70>
 8005918:	6921      	ldr	r1, [r4, #16]
 800591a:	4650      	mov	r0, sl
 800591c:	f000 fab0 	bl	8005e80 <_free_r>
 8005920:	e7c7      	b.n	80058b2 <__ssputs_r+0x46>
	...

08005924 <_svfiprintf_r>:
 8005924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	4698      	mov	r8, r3
 800592a:	898b      	ldrh	r3, [r1, #12]
 800592c:	061b      	lsls	r3, r3, #24
 800592e:	b09d      	sub	sp, #116	; 0x74
 8005930:	4607      	mov	r7, r0
 8005932:	460d      	mov	r5, r1
 8005934:	4614      	mov	r4, r2
 8005936:	d50e      	bpl.n	8005956 <_svfiprintf_r+0x32>
 8005938:	690b      	ldr	r3, [r1, #16]
 800593a:	b963      	cbnz	r3, 8005956 <_svfiprintf_r+0x32>
 800593c:	2140      	movs	r1, #64	; 0x40
 800593e:	f000 fb0b 	bl	8005f58 <_malloc_r>
 8005942:	6028      	str	r0, [r5, #0]
 8005944:	6128      	str	r0, [r5, #16]
 8005946:	b920      	cbnz	r0, 8005952 <_svfiprintf_r+0x2e>
 8005948:	230c      	movs	r3, #12
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e0d1      	b.n	8005af6 <_svfiprintf_r+0x1d2>
 8005952:	2340      	movs	r3, #64	; 0x40
 8005954:	616b      	str	r3, [r5, #20]
 8005956:	2300      	movs	r3, #0
 8005958:	9309      	str	r3, [sp, #36]	; 0x24
 800595a:	2320      	movs	r3, #32
 800595c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005960:	f8cd 800c 	str.w	r8, [sp, #12]
 8005964:	2330      	movs	r3, #48	; 0x30
 8005966:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b10 <_svfiprintf_r+0x1ec>
 800596a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800596e:	f04f 0901 	mov.w	r9, #1
 8005972:	4623      	mov	r3, r4
 8005974:	469a      	mov	sl, r3
 8005976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800597a:	b10a      	cbz	r2, 8005980 <_svfiprintf_r+0x5c>
 800597c:	2a25      	cmp	r2, #37	; 0x25
 800597e:	d1f9      	bne.n	8005974 <_svfiprintf_r+0x50>
 8005980:	ebba 0b04 	subs.w	fp, sl, r4
 8005984:	d00b      	beq.n	800599e <_svfiprintf_r+0x7a>
 8005986:	465b      	mov	r3, fp
 8005988:	4622      	mov	r2, r4
 800598a:	4629      	mov	r1, r5
 800598c:	4638      	mov	r0, r7
 800598e:	f7ff ff6d 	bl	800586c <__ssputs_r>
 8005992:	3001      	adds	r0, #1
 8005994:	f000 80aa 	beq.w	8005aec <_svfiprintf_r+0x1c8>
 8005998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800599a:	445a      	add	r2, fp
 800599c:	9209      	str	r2, [sp, #36]	; 0x24
 800599e:	f89a 3000 	ldrb.w	r3, [sl]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80a2 	beq.w	8005aec <_svfiprintf_r+0x1c8>
 80059a8:	2300      	movs	r3, #0
 80059aa:	f04f 32ff 	mov.w	r2, #4294967295
 80059ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059b2:	f10a 0a01 	add.w	sl, sl, #1
 80059b6:	9304      	str	r3, [sp, #16]
 80059b8:	9307      	str	r3, [sp, #28]
 80059ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059be:	931a      	str	r3, [sp, #104]	; 0x68
 80059c0:	4654      	mov	r4, sl
 80059c2:	2205      	movs	r2, #5
 80059c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c8:	4851      	ldr	r0, [pc, #324]	; (8005b10 <_svfiprintf_r+0x1ec>)
 80059ca:	f7fa fc09 	bl	80001e0 <memchr>
 80059ce:	9a04      	ldr	r2, [sp, #16]
 80059d0:	b9d8      	cbnz	r0, 8005a0a <_svfiprintf_r+0xe6>
 80059d2:	06d0      	lsls	r0, r2, #27
 80059d4:	bf44      	itt	mi
 80059d6:	2320      	movmi	r3, #32
 80059d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059dc:	0711      	lsls	r1, r2, #28
 80059de:	bf44      	itt	mi
 80059e0:	232b      	movmi	r3, #43	; 0x2b
 80059e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059e6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ea:	2b2a      	cmp	r3, #42	; 0x2a
 80059ec:	d015      	beq.n	8005a1a <_svfiprintf_r+0xf6>
 80059ee:	9a07      	ldr	r2, [sp, #28]
 80059f0:	4654      	mov	r4, sl
 80059f2:	2000      	movs	r0, #0
 80059f4:	f04f 0c0a 	mov.w	ip, #10
 80059f8:	4621      	mov	r1, r4
 80059fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059fe:	3b30      	subs	r3, #48	; 0x30
 8005a00:	2b09      	cmp	r3, #9
 8005a02:	d94e      	bls.n	8005aa2 <_svfiprintf_r+0x17e>
 8005a04:	b1b0      	cbz	r0, 8005a34 <_svfiprintf_r+0x110>
 8005a06:	9207      	str	r2, [sp, #28]
 8005a08:	e014      	b.n	8005a34 <_svfiprintf_r+0x110>
 8005a0a:	eba0 0308 	sub.w	r3, r0, r8
 8005a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a12:	4313      	orrs	r3, r2
 8005a14:	9304      	str	r3, [sp, #16]
 8005a16:	46a2      	mov	sl, r4
 8005a18:	e7d2      	b.n	80059c0 <_svfiprintf_r+0x9c>
 8005a1a:	9b03      	ldr	r3, [sp, #12]
 8005a1c:	1d19      	adds	r1, r3, #4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	9103      	str	r1, [sp, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bfbb      	ittet	lt
 8005a26:	425b      	neglt	r3, r3
 8005a28:	f042 0202 	orrlt.w	r2, r2, #2
 8005a2c:	9307      	strge	r3, [sp, #28]
 8005a2e:	9307      	strlt	r3, [sp, #28]
 8005a30:	bfb8      	it	lt
 8005a32:	9204      	strlt	r2, [sp, #16]
 8005a34:	7823      	ldrb	r3, [r4, #0]
 8005a36:	2b2e      	cmp	r3, #46	; 0x2e
 8005a38:	d10c      	bne.n	8005a54 <_svfiprintf_r+0x130>
 8005a3a:	7863      	ldrb	r3, [r4, #1]
 8005a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a3e:	d135      	bne.n	8005aac <_svfiprintf_r+0x188>
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	1d1a      	adds	r2, r3, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	9203      	str	r2, [sp, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bfb8      	it	lt
 8005a4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a50:	3402      	adds	r4, #2
 8005a52:	9305      	str	r3, [sp, #20]
 8005a54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b20 <_svfiprintf_r+0x1fc>
 8005a58:	7821      	ldrb	r1, [r4, #0]
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	f7fa fbbf 	bl	80001e0 <memchr>
 8005a62:	b140      	cbz	r0, 8005a76 <_svfiprintf_r+0x152>
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	eba0 000a 	sub.w	r0, r0, sl
 8005a6a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a6e:	9b04      	ldr	r3, [sp, #16]
 8005a70:	4303      	orrs	r3, r0
 8005a72:	3401      	adds	r4, #1
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7a:	4826      	ldr	r0, [pc, #152]	; (8005b14 <_svfiprintf_r+0x1f0>)
 8005a7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a80:	2206      	movs	r2, #6
 8005a82:	f7fa fbad 	bl	80001e0 <memchr>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d038      	beq.n	8005afc <_svfiprintf_r+0x1d8>
 8005a8a:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <_svfiprintf_r+0x1f4>)
 8005a8c:	bb1b      	cbnz	r3, 8005ad6 <_svfiprintf_r+0x1b2>
 8005a8e:	9b03      	ldr	r3, [sp, #12]
 8005a90:	3307      	adds	r3, #7
 8005a92:	f023 0307 	bic.w	r3, r3, #7
 8005a96:	3308      	adds	r3, #8
 8005a98:	9303      	str	r3, [sp, #12]
 8005a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9c:	4433      	add	r3, r6
 8005a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa0:	e767      	b.n	8005972 <_svfiprintf_r+0x4e>
 8005aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	e7a5      	b.n	80059f8 <_svfiprintf_r+0xd4>
 8005aac:	2300      	movs	r3, #0
 8005aae:	3401      	adds	r4, #1
 8005ab0:	9305      	str	r3, [sp, #20]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f04f 0c0a 	mov.w	ip, #10
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005abe:	3a30      	subs	r2, #48	; 0x30
 8005ac0:	2a09      	cmp	r2, #9
 8005ac2:	d903      	bls.n	8005acc <_svfiprintf_r+0x1a8>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0c5      	beq.n	8005a54 <_svfiprintf_r+0x130>
 8005ac8:	9105      	str	r1, [sp, #20]
 8005aca:	e7c3      	b.n	8005a54 <_svfiprintf_r+0x130>
 8005acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e7f0      	b.n	8005ab8 <_svfiprintf_r+0x194>
 8005ad6:	ab03      	add	r3, sp, #12
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	462a      	mov	r2, r5
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <_svfiprintf_r+0x1f8>)
 8005ade:	a904      	add	r1, sp, #16
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	f3af 8000 	nop.w
 8005ae6:	1c42      	adds	r2, r0, #1
 8005ae8:	4606      	mov	r6, r0
 8005aea:	d1d6      	bne.n	8005a9a <_svfiprintf_r+0x176>
 8005aec:	89ab      	ldrh	r3, [r5, #12]
 8005aee:	065b      	lsls	r3, r3, #25
 8005af0:	f53f af2c 	bmi.w	800594c <_svfiprintf_r+0x28>
 8005af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005af6:	b01d      	add	sp, #116	; 0x74
 8005af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afc:	ab03      	add	r3, sp, #12
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	462a      	mov	r2, r5
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <_svfiprintf_r+0x1f8>)
 8005b04:	a904      	add	r1, sp, #16
 8005b06:	4638      	mov	r0, r7
 8005b08:	f000 f87a 	bl	8005c00 <_printf_i>
 8005b0c:	e7eb      	b.n	8005ae6 <_svfiprintf_r+0x1c2>
 8005b0e:	bf00      	nop
 8005b10:	08006750 	.word	0x08006750
 8005b14:	0800675a 	.word	0x0800675a
 8005b18:	00000000 	.word	0x00000000
 8005b1c:	0800586d 	.word	0x0800586d
 8005b20:	08006756 	.word	0x08006756

08005b24 <_printf_common>:
 8005b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b28:	4616      	mov	r6, r2
 8005b2a:	4699      	mov	r9, r3
 8005b2c:	688a      	ldr	r2, [r1, #8]
 8005b2e:	690b      	ldr	r3, [r1, #16]
 8005b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	bfb8      	it	lt
 8005b38:	4613      	movlt	r3, r2
 8005b3a:	6033      	str	r3, [r6, #0]
 8005b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b40:	4607      	mov	r7, r0
 8005b42:	460c      	mov	r4, r1
 8005b44:	b10a      	cbz	r2, 8005b4a <_printf_common+0x26>
 8005b46:	3301      	adds	r3, #1
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	0699      	lsls	r1, r3, #26
 8005b4e:	bf42      	ittt	mi
 8005b50:	6833      	ldrmi	r3, [r6, #0]
 8005b52:	3302      	addmi	r3, #2
 8005b54:	6033      	strmi	r3, [r6, #0]
 8005b56:	6825      	ldr	r5, [r4, #0]
 8005b58:	f015 0506 	ands.w	r5, r5, #6
 8005b5c:	d106      	bne.n	8005b6c <_printf_common+0x48>
 8005b5e:	f104 0a19 	add.w	sl, r4, #25
 8005b62:	68e3      	ldr	r3, [r4, #12]
 8005b64:	6832      	ldr	r2, [r6, #0]
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	42ab      	cmp	r3, r5
 8005b6a:	dc26      	bgt.n	8005bba <_printf_common+0x96>
 8005b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b70:	1e13      	subs	r3, r2, #0
 8005b72:	6822      	ldr	r2, [r4, #0]
 8005b74:	bf18      	it	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	0692      	lsls	r2, r2, #26
 8005b7a:	d42b      	bmi.n	8005bd4 <_printf_common+0xb0>
 8005b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b80:	4649      	mov	r1, r9
 8005b82:	4638      	mov	r0, r7
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d01e      	beq.n	8005bc8 <_printf_common+0xa4>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	68e5      	ldr	r5, [r4, #12]
 8005b8e:	6832      	ldr	r2, [r6, #0]
 8005b90:	f003 0306 	and.w	r3, r3, #6
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	bf08      	it	eq
 8005b98:	1aad      	subeq	r5, r5, r2
 8005b9a:	68a3      	ldr	r3, [r4, #8]
 8005b9c:	6922      	ldr	r2, [r4, #16]
 8005b9e:	bf0c      	ite	eq
 8005ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ba4:	2500      	movne	r5, #0
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	bfc4      	itt	gt
 8005baa:	1a9b      	subgt	r3, r3, r2
 8005bac:	18ed      	addgt	r5, r5, r3
 8005bae:	2600      	movs	r6, #0
 8005bb0:	341a      	adds	r4, #26
 8005bb2:	42b5      	cmp	r5, r6
 8005bb4:	d11a      	bne.n	8005bec <_printf_common+0xc8>
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	e008      	b.n	8005bcc <_printf_common+0xa8>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4652      	mov	r2, sl
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	47c0      	blx	r8
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d103      	bne.n	8005bd0 <_printf_common+0xac>
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	e7c6      	b.n	8005b62 <_printf_common+0x3e>
 8005bd4:	18e1      	adds	r1, r4, r3
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	2030      	movs	r0, #48	; 0x30
 8005bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bde:	4422      	add	r2, r4
 8005be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005be8:	3302      	adds	r3, #2
 8005bea:	e7c7      	b.n	8005b7c <_printf_common+0x58>
 8005bec:	2301      	movs	r3, #1
 8005bee:	4622      	mov	r2, r4
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	47c0      	blx	r8
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d0e6      	beq.n	8005bc8 <_printf_common+0xa4>
 8005bfa:	3601      	adds	r6, #1
 8005bfc:	e7d9      	b.n	8005bb2 <_printf_common+0x8e>
	...

08005c00 <_printf_i>:
 8005c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c04:	7e0f      	ldrb	r7, [r1, #24]
 8005c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c08:	2f78      	cmp	r7, #120	; 0x78
 8005c0a:	4691      	mov	r9, r2
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	469a      	mov	sl, r3
 8005c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c16:	d807      	bhi.n	8005c28 <_printf_i+0x28>
 8005c18:	2f62      	cmp	r7, #98	; 0x62
 8005c1a:	d80a      	bhi.n	8005c32 <_printf_i+0x32>
 8005c1c:	2f00      	cmp	r7, #0
 8005c1e:	f000 80d8 	beq.w	8005dd2 <_printf_i+0x1d2>
 8005c22:	2f58      	cmp	r7, #88	; 0x58
 8005c24:	f000 80a3 	beq.w	8005d6e <_printf_i+0x16e>
 8005c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c30:	e03a      	b.n	8005ca8 <_printf_i+0xa8>
 8005c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c36:	2b15      	cmp	r3, #21
 8005c38:	d8f6      	bhi.n	8005c28 <_printf_i+0x28>
 8005c3a:	a101      	add	r1, pc, #4	; (adr r1, 8005c40 <_printf_i+0x40>)
 8005c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c40:	08005c99 	.word	0x08005c99
 8005c44:	08005cad 	.word	0x08005cad
 8005c48:	08005c29 	.word	0x08005c29
 8005c4c:	08005c29 	.word	0x08005c29
 8005c50:	08005c29 	.word	0x08005c29
 8005c54:	08005c29 	.word	0x08005c29
 8005c58:	08005cad 	.word	0x08005cad
 8005c5c:	08005c29 	.word	0x08005c29
 8005c60:	08005c29 	.word	0x08005c29
 8005c64:	08005c29 	.word	0x08005c29
 8005c68:	08005c29 	.word	0x08005c29
 8005c6c:	08005db9 	.word	0x08005db9
 8005c70:	08005cdd 	.word	0x08005cdd
 8005c74:	08005d9b 	.word	0x08005d9b
 8005c78:	08005c29 	.word	0x08005c29
 8005c7c:	08005c29 	.word	0x08005c29
 8005c80:	08005ddb 	.word	0x08005ddb
 8005c84:	08005c29 	.word	0x08005c29
 8005c88:	08005cdd 	.word	0x08005cdd
 8005c8c:	08005c29 	.word	0x08005c29
 8005c90:	08005c29 	.word	0x08005c29
 8005c94:	08005da3 	.word	0x08005da3
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	1d1a      	adds	r2, r3, #4
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	602a      	str	r2, [r5, #0]
 8005ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0a3      	b.n	8005df4 <_printf_i+0x1f4>
 8005cac:	6820      	ldr	r0, [r4, #0]
 8005cae:	6829      	ldr	r1, [r5, #0]
 8005cb0:	0606      	lsls	r6, r0, #24
 8005cb2:	f101 0304 	add.w	r3, r1, #4
 8005cb6:	d50a      	bpl.n	8005cce <_printf_i+0xce>
 8005cb8:	680e      	ldr	r6, [r1, #0]
 8005cba:	602b      	str	r3, [r5, #0]
 8005cbc:	2e00      	cmp	r6, #0
 8005cbe:	da03      	bge.n	8005cc8 <_printf_i+0xc8>
 8005cc0:	232d      	movs	r3, #45	; 0x2d
 8005cc2:	4276      	negs	r6, r6
 8005cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc8:	485e      	ldr	r0, [pc, #376]	; (8005e44 <_printf_i+0x244>)
 8005cca:	230a      	movs	r3, #10
 8005ccc:	e019      	b.n	8005d02 <_printf_i+0x102>
 8005cce:	680e      	ldr	r6, [r1, #0]
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cd6:	bf18      	it	ne
 8005cd8:	b236      	sxthne	r6, r6
 8005cda:	e7ef      	b.n	8005cbc <_printf_i+0xbc>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	6820      	ldr	r0, [r4, #0]
 8005ce0:	1d19      	adds	r1, r3, #4
 8005ce2:	6029      	str	r1, [r5, #0]
 8005ce4:	0601      	lsls	r1, r0, #24
 8005ce6:	d501      	bpl.n	8005cec <_printf_i+0xec>
 8005ce8:	681e      	ldr	r6, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <_printf_i+0xf2>
 8005cec:	0646      	lsls	r6, r0, #25
 8005cee:	d5fb      	bpl.n	8005ce8 <_printf_i+0xe8>
 8005cf0:	881e      	ldrh	r6, [r3, #0]
 8005cf2:	4854      	ldr	r0, [pc, #336]	; (8005e44 <_printf_i+0x244>)
 8005cf4:	2f6f      	cmp	r7, #111	; 0x6f
 8005cf6:	bf0c      	ite	eq
 8005cf8:	2308      	moveq	r3, #8
 8005cfa:	230a      	movne	r3, #10
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d02:	6865      	ldr	r5, [r4, #4]
 8005d04:	60a5      	str	r5, [r4, #8]
 8005d06:	2d00      	cmp	r5, #0
 8005d08:	bfa2      	ittt	ge
 8005d0a:	6821      	ldrge	r1, [r4, #0]
 8005d0c:	f021 0104 	bicge.w	r1, r1, #4
 8005d10:	6021      	strge	r1, [r4, #0]
 8005d12:	b90e      	cbnz	r6, 8005d18 <_printf_i+0x118>
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	d04d      	beq.n	8005db4 <_printf_i+0x1b4>
 8005d18:	4615      	mov	r5, r2
 8005d1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d1e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d22:	5dc7      	ldrb	r7, [r0, r7]
 8005d24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d28:	4637      	mov	r7, r6
 8005d2a:	42bb      	cmp	r3, r7
 8005d2c:	460e      	mov	r6, r1
 8005d2e:	d9f4      	bls.n	8005d1a <_printf_i+0x11a>
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d10b      	bne.n	8005d4c <_printf_i+0x14c>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	07de      	lsls	r6, r3, #31
 8005d38:	d508      	bpl.n	8005d4c <_printf_i+0x14c>
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	6861      	ldr	r1, [r4, #4]
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	bfde      	ittt	le
 8005d42:	2330      	movle	r3, #48	; 0x30
 8005d44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d4c:	1b52      	subs	r2, r2, r5
 8005d4e:	6122      	str	r2, [r4, #16]
 8005d50:	f8cd a000 	str.w	sl, [sp]
 8005d54:	464b      	mov	r3, r9
 8005d56:	aa03      	add	r2, sp, #12
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	f7ff fee2 	bl	8005b24 <_printf_common>
 8005d60:	3001      	adds	r0, #1
 8005d62:	d14c      	bne.n	8005dfe <_printf_i+0x1fe>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	b004      	add	sp, #16
 8005d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6e:	4835      	ldr	r0, [pc, #212]	; (8005e44 <_printf_i+0x244>)
 8005d70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d74:	6829      	ldr	r1, [r5, #0]
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d7c:	6029      	str	r1, [r5, #0]
 8005d7e:	061d      	lsls	r5, r3, #24
 8005d80:	d514      	bpl.n	8005dac <_printf_i+0x1ac>
 8005d82:	07df      	lsls	r7, r3, #31
 8005d84:	bf44      	itt	mi
 8005d86:	f043 0320 	orrmi.w	r3, r3, #32
 8005d8a:	6023      	strmi	r3, [r4, #0]
 8005d8c:	b91e      	cbnz	r6, 8005d96 <_printf_i+0x196>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	f023 0320 	bic.w	r3, r3, #32
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	2310      	movs	r3, #16
 8005d98:	e7b0      	b.n	8005cfc <_printf_i+0xfc>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	f043 0320 	orr.w	r3, r3, #32
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	2378      	movs	r3, #120	; 0x78
 8005da4:	4828      	ldr	r0, [pc, #160]	; (8005e48 <_printf_i+0x248>)
 8005da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005daa:	e7e3      	b.n	8005d74 <_printf_i+0x174>
 8005dac:	0659      	lsls	r1, r3, #25
 8005dae:	bf48      	it	mi
 8005db0:	b2b6      	uxthmi	r6, r6
 8005db2:	e7e6      	b.n	8005d82 <_printf_i+0x182>
 8005db4:	4615      	mov	r5, r2
 8005db6:	e7bb      	b.n	8005d30 <_printf_i+0x130>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	6826      	ldr	r6, [r4, #0]
 8005dbc:	6961      	ldr	r1, [r4, #20]
 8005dbe:	1d18      	adds	r0, r3, #4
 8005dc0:	6028      	str	r0, [r5, #0]
 8005dc2:	0635      	lsls	r5, r6, #24
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	d501      	bpl.n	8005dcc <_printf_i+0x1cc>
 8005dc8:	6019      	str	r1, [r3, #0]
 8005dca:	e002      	b.n	8005dd2 <_printf_i+0x1d2>
 8005dcc:	0670      	lsls	r0, r6, #25
 8005dce:	d5fb      	bpl.n	8005dc8 <_printf_i+0x1c8>
 8005dd0:	8019      	strh	r1, [r3, #0]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6123      	str	r3, [r4, #16]
 8005dd6:	4615      	mov	r5, r2
 8005dd8:	e7ba      	b.n	8005d50 <_printf_i+0x150>
 8005dda:	682b      	ldr	r3, [r5, #0]
 8005ddc:	1d1a      	adds	r2, r3, #4
 8005dde:	602a      	str	r2, [r5, #0]
 8005de0:	681d      	ldr	r5, [r3, #0]
 8005de2:	6862      	ldr	r2, [r4, #4]
 8005de4:	2100      	movs	r1, #0
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7fa f9fa 	bl	80001e0 <memchr>
 8005dec:	b108      	cbz	r0, 8005df2 <_printf_i+0x1f2>
 8005dee:	1b40      	subs	r0, r0, r5
 8005df0:	6060      	str	r0, [r4, #4]
 8005df2:	6863      	ldr	r3, [r4, #4]
 8005df4:	6123      	str	r3, [r4, #16]
 8005df6:	2300      	movs	r3, #0
 8005df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dfc:	e7a8      	b.n	8005d50 <_printf_i+0x150>
 8005dfe:	6923      	ldr	r3, [r4, #16]
 8005e00:	462a      	mov	r2, r5
 8005e02:	4649      	mov	r1, r9
 8005e04:	4640      	mov	r0, r8
 8005e06:	47d0      	blx	sl
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d0ab      	beq.n	8005d64 <_printf_i+0x164>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	079b      	lsls	r3, r3, #30
 8005e10:	d413      	bmi.n	8005e3a <_printf_i+0x23a>
 8005e12:	68e0      	ldr	r0, [r4, #12]
 8005e14:	9b03      	ldr	r3, [sp, #12]
 8005e16:	4298      	cmp	r0, r3
 8005e18:	bfb8      	it	lt
 8005e1a:	4618      	movlt	r0, r3
 8005e1c:	e7a4      	b.n	8005d68 <_printf_i+0x168>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4632      	mov	r2, r6
 8005e22:	4649      	mov	r1, r9
 8005e24:	4640      	mov	r0, r8
 8005e26:	47d0      	blx	sl
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d09b      	beq.n	8005d64 <_printf_i+0x164>
 8005e2c:	3501      	adds	r5, #1
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	9903      	ldr	r1, [sp, #12]
 8005e32:	1a5b      	subs	r3, r3, r1
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	dcf2      	bgt.n	8005e1e <_printf_i+0x21e>
 8005e38:	e7eb      	b.n	8005e12 <_printf_i+0x212>
 8005e3a:	2500      	movs	r5, #0
 8005e3c:	f104 0619 	add.w	r6, r4, #25
 8005e40:	e7f5      	b.n	8005e2e <_printf_i+0x22e>
 8005e42:	bf00      	nop
 8005e44:	08006761 	.word	0x08006761
 8005e48:	08006772 	.word	0x08006772

08005e4c <memmove>:
 8005e4c:	4288      	cmp	r0, r1
 8005e4e:	b510      	push	{r4, lr}
 8005e50:	eb01 0402 	add.w	r4, r1, r2
 8005e54:	d902      	bls.n	8005e5c <memmove+0x10>
 8005e56:	4284      	cmp	r4, r0
 8005e58:	4623      	mov	r3, r4
 8005e5a:	d807      	bhi.n	8005e6c <memmove+0x20>
 8005e5c:	1e43      	subs	r3, r0, #1
 8005e5e:	42a1      	cmp	r1, r4
 8005e60:	d008      	beq.n	8005e74 <memmove+0x28>
 8005e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e6a:	e7f8      	b.n	8005e5e <memmove+0x12>
 8005e6c:	4402      	add	r2, r0
 8005e6e:	4601      	mov	r1, r0
 8005e70:	428a      	cmp	r2, r1
 8005e72:	d100      	bne.n	8005e76 <memmove+0x2a>
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e7e:	e7f7      	b.n	8005e70 <memmove+0x24>

08005e80 <_free_r>:
 8005e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e82:	2900      	cmp	r1, #0
 8005e84:	d044      	beq.n	8005f10 <_free_r+0x90>
 8005e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8a:	9001      	str	r0, [sp, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e92:	bfb8      	it	lt
 8005e94:	18e4      	addlt	r4, r4, r3
 8005e96:	f000 f913 	bl	80060c0 <__malloc_lock>
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <_free_r+0x94>)
 8005e9c:	9801      	ldr	r0, [sp, #4]
 8005e9e:	6813      	ldr	r3, [r2, #0]
 8005ea0:	b933      	cbnz	r3, 8005eb0 <_free_r+0x30>
 8005ea2:	6063      	str	r3, [r4, #4]
 8005ea4:	6014      	str	r4, [r2, #0]
 8005ea6:	b003      	add	sp, #12
 8005ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005eac:	f000 b90e 	b.w	80060cc <__malloc_unlock>
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d908      	bls.n	8005ec6 <_free_r+0x46>
 8005eb4:	6825      	ldr	r5, [r4, #0]
 8005eb6:	1961      	adds	r1, r4, r5
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	bf01      	itttt	eq
 8005ebc:	6819      	ldreq	r1, [r3, #0]
 8005ebe:	685b      	ldreq	r3, [r3, #4]
 8005ec0:	1949      	addeq	r1, r1, r5
 8005ec2:	6021      	streq	r1, [r4, #0]
 8005ec4:	e7ed      	b.n	8005ea2 <_free_r+0x22>
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	b10b      	cbz	r3, 8005ed0 <_free_r+0x50>
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	d9fa      	bls.n	8005ec6 <_free_r+0x46>
 8005ed0:	6811      	ldr	r1, [r2, #0]
 8005ed2:	1855      	adds	r5, r2, r1
 8005ed4:	42a5      	cmp	r5, r4
 8005ed6:	d10b      	bne.n	8005ef0 <_free_r+0x70>
 8005ed8:	6824      	ldr	r4, [r4, #0]
 8005eda:	4421      	add	r1, r4
 8005edc:	1854      	adds	r4, r2, r1
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	6011      	str	r1, [r2, #0]
 8005ee2:	d1e0      	bne.n	8005ea6 <_free_r+0x26>
 8005ee4:	681c      	ldr	r4, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	6053      	str	r3, [r2, #4]
 8005eea:	4421      	add	r1, r4
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	e7da      	b.n	8005ea6 <_free_r+0x26>
 8005ef0:	d902      	bls.n	8005ef8 <_free_r+0x78>
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	6003      	str	r3, [r0, #0]
 8005ef6:	e7d6      	b.n	8005ea6 <_free_r+0x26>
 8005ef8:	6825      	ldr	r5, [r4, #0]
 8005efa:	1961      	adds	r1, r4, r5
 8005efc:	428b      	cmp	r3, r1
 8005efe:	bf04      	itt	eq
 8005f00:	6819      	ldreq	r1, [r3, #0]
 8005f02:	685b      	ldreq	r3, [r3, #4]
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	bf04      	itt	eq
 8005f08:	1949      	addeq	r1, r1, r5
 8005f0a:	6021      	streq	r1, [r4, #0]
 8005f0c:	6054      	str	r4, [r2, #4]
 8005f0e:	e7ca      	b.n	8005ea6 <_free_r+0x26>
 8005f10:	b003      	add	sp, #12
 8005f12:	bd30      	pop	{r4, r5, pc}
 8005f14:	200007b8 	.word	0x200007b8

08005f18 <sbrk_aligned>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	4e0e      	ldr	r6, [pc, #56]	; (8005f54 <sbrk_aligned+0x3c>)
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	6831      	ldr	r1, [r6, #0]
 8005f20:	4605      	mov	r5, r0
 8005f22:	b911      	cbnz	r1, 8005f2a <sbrk_aligned+0x12>
 8005f24:	f000 f8bc 	bl	80060a0 <_sbrk_r>
 8005f28:	6030      	str	r0, [r6, #0]
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f000 f8b7 	bl	80060a0 <_sbrk_r>
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	d00a      	beq.n	8005f4c <sbrk_aligned+0x34>
 8005f36:	1cc4      	adds	r4, r0, #3
 8005f38:	f024 0403 	bic.w	r4, r4, #3
 8005f3c:	42a0      	cmp	r0, r4
 8005f3e:	d007      	beq.n	8005f50 <sbrk_aligned+0x38>
 8005f40:	1a21      	subs	r1, r4, r0
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 f8ac 	bl	80060a0 <_sbrk_r>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d101      	bne.n	8005f50 <sbrk_aligned+0x38>
 8005f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f50:	4620      	mov	r0, r4
 8005f52:	bd70      	pop	{r4, r5, r6, pc}
 8005f54:	200007bc 	.word	0x200007bc

08005f58 <_malloc_r>:
 8005f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5c:	1ccd      	adds	r5, r1, #3
 8005f5e:	f025 0503 	bic.w	r5, r5, #3
 8005f62:	3508      	adds	r5, #8
 8005f64:	2d0c      	cmp	r5, #12
 8005f66:	bf38      	it	cc
 8005f68:	250c      	movcc	r5, #12
 8005f6a:	2d00      	cmp	r5, #0
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	db01      	blt.n	8005f74 <_malloc_r+0x1c>
 8005f70:	42a9      	cmp	r1, r5
 8005f72:	d905      	bls.n	8005f80 <_malloc_r+0x28>
 8005f74:	230c      	movs	r3, #12
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	2600      	movs	r6, #0
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f80:	4e2e      	ldr	r6, [pc, #184]	; (800603c <_malloc_r+0xe4>)
 8005f82:	f000 f89d 	bl	80060c0 <__malloc_lock>
 8005f86:	6833      	ldr	r3, [r6, #0]
 8005f88:	461c      	mov	r4, r3
 8005f8a:	bb34      	cbnz	r4, 8005fda <_malloc_r+0x82>
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	4638      	mov	r0, r7
 8005f90:	f7ff ffc2 	bl	8005f18 <sbrk_aligned>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	4604      	mov	r4, r0
 8005f98:	d14d      	bne.n	8006036 <_malloc_r+0xde>
 8005f9a:	6834      	ldr	r4, [r6, #0]
 8005f9c:	4626      	mov	r6, r4
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	d140      	bne.n	8006024 <_malloc_r+0xcc>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	eb04 0803 	add.w	r8, r4, r3
 8005fac:	f000 f878 	bl	80060a0 <_sbrk_r>
 8005fb0:	4580      	cmp	r8, r0
 8005fb2:	d13a      	bne.n	800602a <_malloc_r+0xd2>
 8005fb4:	6821      	ldr	r1, [r4, #0]
 8005fb6:	3503      	adds	r5, #3
 8005fb8:	1a6d      	subs	r5, r5, r1
 8005fba:	f025 0503 	bic.w	r5, r5, #3
 8005fbe:	3508      	adds	r5, #8
 8005fc0:	2d0c      	cmp	r5, #12
 8005fc2:	bf38      	it	cc
 8005fc4:	250c      	movcc	r5, #12
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	4638      	mov	r0, r7
 8005fca:	f7ff ffa5 	bl	8005f18 <sbrk_aligned>
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d02b      	beq.n	800602a <_malloc_r+0xd2>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	442b      	add	r3, r5
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	e00e      	b.n	8005ff8 <_malloc_r+0xa0>
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	1b52      	subs	r2, r2, r5
 8005fde:	d41e      	bmi.n	800601e <_malloc_r+0xc6>
 8005fe0:	2a0b      	cmp	r2, #11
 8005fe2:	d916      	bls.n	8006012 <_malloc_r+0xba>
 8005fe4:	1961      	adds	r1, r4, r5
 8005fe6:	42a3      	cmp	r3, r4
 8005fe8:	6025      	str	r5, [r4, #0]
 8005fea:	bf18      	it	ne
 8005fec:	6059      	strne	r1, [r3, #4]
 8005fee:	6863      	ldr	r3, [r4, #4]
 8005ff0:	bf08      	it	eq
 8005ff2:	6031      	streq	r1, [r6, #0]
 8005ff4:	5162      	str	r2, [r4, r5]
 8005ff6:	604b      	str	r3, [r1, #4]
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	f104 060b 	add.w	r6, r4, #11
 8005ffe:	f000 f865 	bl	80060cc <__malloc_unlock>
 8006002:	f026 0607 	bic.w	r6, r6, #7
 8006006:	1d23      	adds	r3, r4, #4
 8006008:	1af2      	subs	r2, r6, r3
 800600a:	d0b6      	beq.n	8005f7a <_malloc_r+0x22>
 800600c:	1b9b      	subs	r3, r3, r6
 800600e:	50a3      	str	r3, [r4, r2]
 8006010:	e7b3      	b.n	8005f7a <_malloc_r+0x22>
 8006012:	6862      	ldr	r2, [r4, #4]
 8006014:	42a3      	cmp	r3, r4
 8006016:	bf0c      	ite	eq
 8006018:	6032      	streq	r2, [r6, #0]
 800601a:	605a      	strne	r2, [r3, #4]
 800601c:	e7ec      	b.n	8005ff8 <_malloc_r+0xa0>
 800601e:	4623      	mov	r3, r4
 8006020:	6864      	ldr	r4, [r4, #4]
 8006022:	e7b2      	b.n	8005f8a <_malloc_r+0x32>
 8006024:	4634      	mov	r4, r6
 8006026:	6876      	ldr	r6, [r6, #4]
 8006028:	e7b9      	b.n	8005f9e <_malloc_r+0x46>
 800602a:	230c      	movs	r3, #12
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	4638      	mov	r0, r7
 8006030:	f000 f84c 	bl	80060cc <__malloc_unlock>
 8006034:	e7a1      	b.n	8005f7a <_malloc_r+0x22>
 8006036:	6025      	str	r5, [r4, #0]
 8006038:	e7de      	b.n	8005ff8 <_malloc_r+0xa0>
 800603a:	bf00      	nop
 800603c:	200007b8 	.word	0x200007b8

08006040 <_realloc_r>:
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	4680      	mov	r8, r0
 8006046:	4614      	mov	r4, r2
 8006048:	460e      	mov	r6, r1
 800604a:	b921      	cbnz	r1, 8006056 <_realloc_r+0x16>
 800604c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006050:	4611      	mov	r1, r2
 8006052:	f7ff bf81 	b.w	8005f58 <_malloc_r>
 8006056:	b92a      	cbnz	r2, 8006064 <_realloc_r+0x24>
 8006058:	f7ff ff12 	bl	8005e80 <_free_r>
 800605c:	4625      	mov	r5, r4
 800605e:	4628      	mov	r0, r5
 8006060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006064:	f000 f838 	bl	80060d8 <_malloc_usable_size_r>
 8006068:	4284      	cmp	r4, r0
 800606a:	4607      	mov	r7, r0
 800606c:	d802      	bhi.n	8006074 <_realloc_r+0x34>
 800606e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006072:	d812      	bhi.n	800609a <_realloc_r+0x5a>
 8006074:	4621      	mov	r1, r4
 8006076:	4640      	mov	r0, r8
 8006078:	f7ff ff6e 	bl	8005f58 <_malloc_r>
 800607c:	4605      	mov	r5, r0
 800607e:	2800      	cmp	r0, #0
 8006080:	d0ed      	beq.n	800605e <_realloc_r+0x1e>
 8006082:	42bc      	cmp	r4, r7
 8006084:	4622      	mov	r2, r4
 8006086:	4631      	mov	r1, r6
 8006088:	bf28      	it	cs
 800608a:	463a      	movcs	r2, r7
 800608c:	f7ff fbb8 	bl	8005800 <memcpy>
 8006090:	4631      	mov	r1, r6
 8006092:	4640      	mov	r0, r8
 8006094:	f7ff fef4 	bl	8005e80 <_free_r>
 8006098:	e7e1      	b.n	800605e <_realloc_r+0x1e>
 800609a:	4635      	mov	r5, r6
 800609c:	e7df      	b.n	800605e <_realloc_r+0x1e>
	...

080060a0 <_sbrk_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4d06      	ldr	r5, [pc, #24]	; (80060bc <_sbrk_r+0x1c>)
 80060a4:	2300      	movs	r3, #0
 80060a6:	4604      	mov	r4, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	602b      	str	r3, [r5, #0]
 80060ac:	f7fb fa64 	bl	8001578 <_sbrk>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_sbrk_r+0x1a>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_sbrk_r+0x1a>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	200007c0 	.word	0x200007c0

080060c0 <__malloc_lock>:
 80060c0:	4801      	ldr	r0, [pc, #4]	; (80060c8 <__malloc_lock+0x8>)
 80060c2:	f000 b811 	b.w	80060e8 <__retarget_lock_acquire_recursive>
 80060c6:	bf00      	nop
 80060c8:	200007c4 	.word	0x200007c4

080060cc <__malloc_unlock>:
 80060cc:	4801      	ldr	r0, [pc, #4]	; (80060d4 <__malloc_unlock+0x8>)
 80060ce:	f000 b80c 	b.w	80060ea <__retarget_lock_release_recursive>
 80060d2:	bf00      	nop
 80060d4:	200007c4 	.word	0x200007c4

080060d8 <_malloc_usable_size_r>:
 80060d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060dc:	1f18      	subs	r0, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfbc      	itt	lt
 80060e2:	580b      	ldrlt	r3, [r1, r0]
 80060e4:	18c0      	addlt	r0, r0, r3
 80060e6:	4770      	bx	lr

080060e8 <__retarget_lock_acquire_recursive>:
 80060e8:	4770      	bx	lr

080060ea <__retarget_lock_release_recursive>:
 80060ea:	4770      	bx	lr

080060ec <_init>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr

080060f8 <_fini>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	bf00      	nop
 80060fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fe:	bc08      	pop	{r3}
 8006100:	469e      	mov	lr, r3
 8006102:	4770      	bx	lr
